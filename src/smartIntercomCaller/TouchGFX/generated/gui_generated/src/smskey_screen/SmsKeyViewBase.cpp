/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/smskey_screen/SmsKeyViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

SmsKeyViewBase::SmsKeyViewBase() :
    buttonCallback(this, &SmsKeyViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &SmsKeyViewBase::flexButtonCallbackHandler)
{

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    background.setXY(0, 0);
    background.setBitmap(touchgfx::Bitmap(BITMAP_DARK_BACKGROUNDS_MAIN_BG_TEXTURE_480X272PX_ID));

    keyboardContainer.setPosition(0, 0, 480, 272);
    keyboardContainer.setVisible(false);

    buttonBack.setXY(0, 236);
    buttonBack.setBitmaps(touchgfx::Bitmap(BITMAP_BACK_ID), touchgfx::Bitmap(BITMAP_BACK_ID));
    buttonBack.setAction(buttonCallback);
    keyboardContainer.add(buttonBack);

    buttonConfirm.setXY(444, 236);
    buttonConfirm.setBitmaps(touchgfx::Bitmap(BITMAP_CONFIRM_ID), touchgfx::Bitmap(BITMAP_CONFIRM_ID));
    buttonConfirm.setAction(buttonCallback);
    keyboardContainer.add(buttonConfirm);

    fill.setPosition(0, 0, 480, 272);

    forSms.setPosition(0, 50, 480, 222);
    forSms.setVisible(false);

    buttonBackNumber.setXY(0, 186);
    buttonBackNumber.setBitmaps(touchgfx::Bitmap(BITMAP_BACK_ID), touchgfx::Bitmap(BITMAP_BACK_ID));
    buttonBackNumber.setAction(buttonCallback);
    forSms.add(buttonBackNumber);

    buttonSms.setXY(155, 120);
    buttonSms.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID), touchgfx::Bitmap(BITMAP_SEND_ID), touchgfx::Bitmap(BITMAP_SEND_ID));
    buttonSms.setIconXY(67, 12);
    buttonSms.setAction(buttonCallback);
    forSms.add(buttonSms);

    backgroundForSms.setPosition(115, 50, 250, 50);
    backgroundForSms.setColor(touchgfx::Color::getColorFromRGB(110, 110, 110));
    backgroundForSms.setBorderColor(touchgfx::Color::getColorFromRGB(14, 237, 237));
    backgroundForSms.setBorderSize(2);
    backgroundForSms.setAlpha(127);
    forSms.add(backgroundForSms);

    areaForSms.setPosition(125, 55, 230, 40);
    areaForSms.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    areaForSms.setLinespacing(0);
    areaForSmsBuffer[0] = 0;
    areaForSms.setWildcard(areaForSmsBuffer);
    areaForSms.setTypedText(touchgfx::TypedText(T___SINGLEUSE_WPXN));
    forSms.add(areaForSms);

    flexForSms.setBoxWithBorderPosition(0, 0, 250, 50);
    flexForSms.setBorderSize(5);
    flexForSms.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    flexForSms.setPosition(115, 50, 250, 50);
    flexForSms.setAlpha(0);
    flexForSms.setAction(flexButtonCallback);
    forSms.add(flexForSms);

    textSms.setXY(163, 10);
    textSms.setColor(touchgfx::Color::getColorFromRGB(14, 237, 237));
    textSms.setLinespacing(0);
    textSms.setTypedText(touchgfx::TypedText(T___SINGLEUSE_73TH));
    forSms.add(textSms);
    fill.add(forSms);

    forNumber.setPosition(0, 50, 480, 222);

    buttonBackHome.setXY(0, 186);
    buttonBackHome.setBitmaps(touchgfx::Bitmap(BITMAP_BACK_ID), touchgfx::Bitmap(BITMAP_BACK_ID));
    buttonBackHome.setAction(buttonCallback);
    forNumber.add(buttonBackHome);

    buttonSendNumber.setXY(155, 120);
    buttonSendNumber.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_DARK_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID), touchgfx::Bitmap(BITMAP_SEND_ID), touchgfx::Bitmap(BITMAP_SEND_ID));
    buttonSendNumber.setIconXY(67, 12);
    buttonSendNumber.setAction(buttonCallback);
    forNumber.add(buttonSendNumber);

    backgroundForNumber.setPosition(115, 50, 250, 50);
    backgroundForNumber.setColor(touchgfx::Color::getColorFromRGB(110, 110, 110));
    backgroundForNumber.setBorderColor(touchgfx::Color::getColorFromRGB(14, 237, 237));
    backgroundForNumber.setBorderSize(2);
    backgroundForNumber.setAlpha(127);
    forNumber.add(backgroundForNumber);

    areaForNumber.setPosition(125, 55, 230, 40);
    areaForNumber.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    areaForNumber.setLinespacing(0);
    areaForNumberBuffer[0] = 0;
    areaForNumber.setWildcard(areaForNumberBuffer);
    areaForNumber.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0ONI));
    forNumber.add(areaForNumber);

    flexForNumber.setBoxWithBorderPosition(0, 0, 250, 50);
    flexForNumber.setBorderSize(5);
    flexForNumber.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
    flexForNumber.setPosition(115, 50, 250, 50);
    flexForNumber.setAlpha(0);
    flexForNumber.setAction(flexButtonCallback);
    forNumber.add(flexForNumber);

    textNumber.setXY(82, 10);
    textNumber.setColor(touchgfx::Color::getColorFromRGB(14, 237, 237));
    textNumber.setLinespacing(0);
    textNumber.setTypedText(touchgfx::TypedText(T___SINGLEUSE_WCMZ));
    forNumber.add(textNumber);
    fill.add(forNumber);

    header.setPosition(0, 0, 480, 50);

    headerBackground.setPosition(0, 0, 480, 50);
    headerBackground.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    headerBackground.setAlpha(68);
    header.add(headerBackground);

    clock.setPosition(0, 13, 100, 25);
    clock.setColor(touchgfx::Color::getColorFromRGB(14, 237, 237));
    clock.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8A3V));
    clock.displayLeadingZeroForHourIndicator(false);
    clock.setDisplayMode(touchgfx::DigitalClock::DISPLAY_24_HOUR_NO_SECONDS);
    clock.setTime24Hour(9, 41, 0);
    header.add(clock);

    nameOfPage.setXY(185, 10);
    nameOfPage.setColor(touchgfx::Color::getColorFromRGB(14, 237, 237));
    nameOfPage.setLinespacing(0);
    nameOfPage.setTypedText(touchgfx::TypedText(T___SINGLEUSE_51JU));
    header.add(nameOfPage);
    fill.add(header);

    add(__background);
    add(background);
    add(keyboardContainer);
    add(fill);
}

void SmsKeyViewBase::setupScreen()
{

}

void SmsKeyViewBase::keyboardSelectedVar(uint8_t value)
{
    //keyboardSelected
    //When keyboardSelectedVar is called call virtual function
    //Call keyboardSelected
    keyboardSelected(value);

    //hideFill
    //When keyboardSelected completed hide fill
    //Hide fill
    fill.setVisible(false);
    fill.invalidate();

    //toKeyboard
    //When hideFill completed show keyboardContainer
    //Show keyboardContainer
    keyboardContainer.setVisible(true);
    keyboardContainer.invalidate();

    //clearBuffer
    //When toKeyboard completed call virtual function
    //Call clearBuffer
    clearBuffer();
}

void SmsKeyViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonBack)
    {
        //hideKeyboard
        //When buttonBack clicked hide keyboardContainer
        //Hide keyboardContainer
        keyboardContainer.setVisible(false);
        keyboardContainer.invalidate();

        //showFill
        //When hideKeyboard completed show fill
        //Show fill
        fill.setVisible(true);
        fill.invalidate();
    }
    else if (&src == &buttonConfirm)
    {
        //confirmText
        //When buttonConfirm clicked call virtual function
        //Call getBuffer
        getBuffer();

        //hideKeyboardConfirm
        //When confirmText completed hide keyboardContainer
        //Hide keyboardContainer
        keyboardContainer.setVisible(false);
        keyboardContainer.invalidate();

        //showFillConfirm
        //When hideKeyboardConfirm completed show fill
        //Show fill
        fill.setVisible(true);
        fill.invalidate();

        //updateScreen
        //When confirmText completed call virtual function
        //Call updateScreen
        updateScreen();
    }
    else if (&src == &buttonBackNumber)
    {
        //hideSms
        //When buttonBackNumber clicked hide forSms
        //Hide forSms
        forSms.setVisible(false);
        forSms.invalidate();

        //showNumber
        //When hideSms completed show forNumber
        //Show forNumber
        forNumber.setVisible(true);
        forNumber.invalidate();
    }
    else if (&src == &buttonSms)
    {
        //sendSms
        //When buttonSms clicked change screen to Home
        //Go to Home with screen transition towards West
        application().gotoHomeScreenSlideTransitionWest();
    }
    else if (&src == &buttonBackHome)
    {
        //toHome
        //When buttonBackHome clicked change screen to Home
        //Go to Home with screen transition towards West
        application().gotoHomeScreenSlideTransitionWest();
    }
    else if (&src == &buttonSendNumber)
    {
        //hideNumber
        //When buttonSendNumber clicked hide forNumber
        //Hide forNumber
        forNumber.setVisible(false);
        forNumber.invalidate();

        //ShowSms
        //When hideNumber completed show forSms
        //Show forSms
        forSms.setVisible(true);
        forSms.invalidate();
    }
}

void SmsKeyViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexForSms)
    {
        //buttonSms
        //When flexForSms clicked call keyboardSelectedVar on SmsKey
        //Call keyboardSelectedVar
        keyboardSelectedVar(1);
    }
    else if (&src == &flexForNumber)
    {
        //buttonNumber
        //When flexForNumber clicked call keyboardSelectedVar on SmsKey
        //Call keyboardSelectedVar
        keyboardSelectedVar(0);
    }
}
