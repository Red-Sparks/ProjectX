
STM32F746G_DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002b138  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006e70  0802b308  0802b308  0003b308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  08032178  08032178  00042178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08032190  08032190  000b0784  2**0
                  CONTENTS
  5 .ARM          00000008  08032190  08032190  00042190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08032198  08032198  000b0784  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   0000001c  08032198  08032198  00042198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  080321b4  080321b4  000421b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000124  20000000  080321bc  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 Video_RGB_Buffer 00016c80  20000124  080322e0  00050124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00015068  20016da4  08048f60  00066da4  2**2
                  ALLOC
 12 ._user_heap_stack 00001404  2002be0c  08048f60  0006be0c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000b0784  2**0
                  CONTENTS, READONLY
 14 ExtFlashSection 0003ec00  90000000  90000000  00070000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 FontFlashSection 00001aa0  9003ec00  9003ec00  000aec00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 000000e4  900406a0  900406a0  000b06a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .debug_info   000fd34c  00000000  00000000  000b07b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0001afb5  00000000  00000000  001adb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000032e0  00000000  00000000  001c8ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00005b68  00000000  00000000  001cbd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0003a7ff  00000000  00000000  001d1900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   000859cd  00000000  00000000  0020c0ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00127325  00000000  00000000  00291acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000d2  00000000  00000000  003b8df1  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00009e3c  00000000  00000000  003b8ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_loc    000547fd  00000000  00000000  003c2d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20016da4 	.word	0x20016da4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802b2f0 	.word	0x0802b2f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20016da8 	.word	0x20016da8
 800020c:	0802b2f0 	.word	0x0802b2f0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b96e 	b.w	8000de0 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468c      	mov	ip, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8083 	bne.w	8000c32 <__udivmoddi4+0x116>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4617      	mov	r7, r2
 8000b30:	d947      	bls.n	8000bc2 <__udivmoddi4+0xa6>
 8000b32:	fab2 f282 	clz	r2, r2
 8000b36:	b142      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	f1c2 0020 	rsb	r0, r2, #32
 8000b3c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b40:	4091      	lsls	r1, r2
 8000b42:	4097      	lsls	r7, r2
 8000b44:	ea40 0c01 	orr.w	ip, r0, r1
 8000b48:	4094      	lsls	r4, r2
 8000b4a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b4e:	0c23      	lsrs	r3, r4, #16
 8000b50:	fbbc f6f8 	udiv	r6, ip, r8
 8000b54:	fa1f fe87 	uxth.w	lr, r7
 8000b58:	fb08 c116 	mls	r1, r8, r6, ip
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f10e 	mul.w	r1, r6, lr
 8000b64:	4299      	cmp	r1, r3
 8000b66:	d909      	bls.n	8000b7c <__udivmoddi4+0x60>
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b6e:	f080 8119 	bcs.w	8000da4 <__udivmoddi4+0x288>
 8000b72:	4299      	cmp	r1, r3
 8000b74:	f240 8116 	bls.w	8000da4 <__udivmoddi4+0x288>
 8000b78:	3e02      	subs	r6, #2
 8000b7a:	443b      	add	r3, r7
 8000b7c:	1a5b      	subs	r3, r3, r1
 8000b7e:	b2a4      	uxth	r4, r4
 8000b80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b84:	fb08 3310 	mls	r3, r8, r0, r3
 8000b88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b90:	45a6      	cmp	lr, r4
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x8c>
 8000b94:	193c      	adds	r4, r7, r4
 8000b96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9a:	f080 8105 	bcs.w	8000da8 <__udivmoddi4+0x28c>
 8000b9e:	45a6      	cmp	lr, r4
 8000ba0:	f240 8102 	bls.w	8000da8 <__udivmoddi4+0x28c>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	443c      	add	r4, r7
 8000ba8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bac:	eba4 040e 	sub.w	r4, r4, lr
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	b11d      	cbz	r5, 8000bbc <__udivmoddi4+0xa0>
 8000bb4:	40d4      	lsrs	r4, r2
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bbc:	4631      	mov	r1, r6
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	b902      	cbnz	r2, 8000bc6 <__udivmoddi4+0xaa>
 8000bc4:	deff      	udf	#255	; 0xff
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	d150      	bne.n	8000c70 <__udivmoddi4+0x154>
 8000bce:	1bcb      	subs	r3, r1, r7
 8000bd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd4:	fa1f f887 	uxth.w	r8, r7
 8000bd8:	2601      	movs	r6, #1
 8000bda:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bde:	0c21      	lsrs	r1, r4, #16
 8000be0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0xe4>
 8000bf0:	1879      	adds	r1, r7, r1
 8000bf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0xe2>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	f200 80e9 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000bfe:	4684      	mov	ip, r0
 8000c00:	1ac9      	subs	r1, r1, r3
 8000c02:	b2a3      	uxth	r3, r4
 8000c04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c10:	fb08 f800 	mul.w	r8, r8, r0
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	d907      	bls.n	8000c28 <__udivmoddi4+0x10c>
 8000c18:	193c      	adds	r4, r7, r4
 8000c1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x10a>
 8000c20:	45a0      	cmp	r8, r4
 8000c22:	f200 80d9 	bhi.w	8000dd8 <__udivmoddi4+0x2bc>
 8000c26:	4618      	mov	r0, r3
 8000c28:	eba4 0408 	sub.w	r4, r4, r8
 8000c2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c30:	e7bf      	b.n	8000bb2 <__udivmoddi4+0x96>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x12e>
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	f000 80b1 	beq.w	8000d9e <__udivmoddi4+0x282>
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c42:	4630      	mov	r0, r6
 8000c44:	4631      	mov	r1, r6
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f683 	clz	r6, r3
 8000c4e:	2e00      	cmp	r6, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x1cc>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0x140>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80b8 	bhi.w	8000dcc <__udivmoddi4+0x2b0>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	468c      	mov	ip, r1
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d0a8      	beq.n	8000bbc <__udivmoddi4+0xa0>
 8000c6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c6e:	e7a5      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000c70:	f1c2 0320 	rsb	r3, r2, #32
 8000c74:	fa20 f603 	lsr.w	r6, r0, r3
 8000c78:	4097      	lsls	r7, r2
 8000c7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c82:	40d9      	lsrs	r1, r3
 8000c84:	4330      	orrs	r0, r6
 8000c86:	0c03      	lsrs	r3, r0, #16
 8000c88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c8c:	fa1f f887 	uxth.w	r8, r7
 8000c90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c98:	fb06 f108 	mul.w	r1, r6, r8
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x19c>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000caa:	f080 808d 	bcs.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 808a 	bls.w	8000dc8 <__udivmoddi4+0x2ac>
 8000cb4:	3e02      	subs	r6, #2
 8000cb6:	443b      	add	r3, r7
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b281      	uxth	r1, r0
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc8:	fb00 f308 	mul.w	r3, r0, r8
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x1c4>
 8000cd0:	1879      	adds	r1, r7, r1
 8000cd2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cd6:	d273      	bcs.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d971      	bls.n	8000dc0 <__udivmoddi4+0x2a4>
 8000cdc:	3802      	subs	r0, #2
 8000cde:	4439      	add	r1, r7
 8000ce0:	1acb      	subs	r3, r1, r3
 8000ce2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ce6:	e778      	b.n	8000bda <__udivmoddi4+0xbe>
 8000ce8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cec:	fa03 f406 	lsl.w	r4, r3, r6
 8000cf0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cf4:	431c      	orrs	r4, r3
 8000cf6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d06:	431f      	orrs	r7, r3
 8000d08:	0c3b      	lsrs	r3, r7, #16
 8000d0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0e:	fa1f f884 	uxth.w	r8, r4
 8000d12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d1e:	458a      	cmp	sl, r1
 8000d20:	fa02 f206 	lsl.w	r2, r2, r6
 8000d24:	fa00 f306 	lsl.w	r3, r0, r6
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x220>
 8000d2a:	1861      	adds	r1, r4, r1
 8000d2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d30:	d248      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d32:	458a      	cmp	sl, r1
 8000d34:	d946      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d36:	f1a9 0902 	sub.w	r9, r9, #2
 8000d3a:	4421      	add	r1, r4
 8000d3c:	eba1 010a 	sub.w	r1, r1, sl
 8000d40:	b2bf      	uxth	r7, r7
 8000d42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d4e:	fb00 f808 	mul.w	r8, r0, r8
 8000d52:	45b8      	cmp	r8, r7
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x24a>
 8000d56:	19e7      	adds	r7, r4, r7
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5c:	d22e      	bcs.n	8000dbc <__udivmoddi4+0x2a0>
 8000d5e:	45b8      	cmp	r8, r7
 8000d60:	d92c      	bls.n	8000dbc <__udivmoddi4+0x2a0>
 8000d62:	3802      	subs	r0, #2
 8000d64:	4427      	add	r7, r4
 8000d66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d6a:	eba7 0708 	sub.w	r7, r7, r8
 8000d6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d72:	454f      	cmp	r7, r9
 8000d74:	46c6      	mov	lr, r8
 8000d76:	4649      	mov	r1, r9
 8000d78:	d31a      	bcc.n	8000db0 <__udivmoddi4+0x294>
 8000d7a:	d017      	beq.n	8000dac <__udivmoddi4+0x290>
 8000d7c:	b15d      	cbz	r5, 8000d96 <__udivmoddi4+0x27a>
 8000d7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d82:	eb67 0701 	sbc.w	r7, r7, r1
 8000d86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d8a:	40f2      	lsrs	r2, r6
 8000d8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d90:	40f7      	lsrs	r7, r6
 8000d92:	e9c5 2700 	strd	r2, r7, [r5]
 8000d96:	2600      	movs	r6, #0
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	462e      	mov	r6, r5
 8000da0:	4628      	mov	r0, r5
 8000da2:	e70b      	b.n	8000bbc <__udivmoddi4+0xa0>
 8000da4:	4606      	mov	r6, r0
 8000da6:	e6e9      	b.n	8000b7c <__udivmoddi4+0x60>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6fd      	b.n	8000ba8 <__udivmoddi4+0x8c>
 8000dac:	4543      	cmp	r3, r8
 8000dae:	d2e5      	bcs.n	8000d7c <__udivmoddi4+0x260>
 8000db0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000db4:	eb69 0104 	sbc.w	r1, r9, r4
 8000db8:	3801      	subs	r0, #1
 8000dba:	e7df      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	e7d2      	b.n	8000d66 <__udivmoddi4+0x24a>
 8000dc0:	4660      	mov	r0, ip
 8000dc2:	e78d      	b.n	8000ce0 <__udivmoddi4+0x1c4>
 8000dc4:	4681      	mov	r9, r0
 8000dc6:	e7b9      	b.n	8000d3c <__udivmoddi4+0x220>
 8000dc8:	4666      	mov	r6, ip
 8000dca:	e775      	b.n	8000cb8 <__udivmoddi4+0x19c>
 8000dcc:	4630      	mov	r0, r6
 8000dce:	e74a      	b.n	8000c66 <__udivmoddi4+0x14a>
 8000dd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd4:	4439      	add	r1, r7
 8000dd6:	e713      	b.n	8000c00 <__udivmoddi4+0xe4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	443c      	add	r4, r7
 8000ddc:	e724      	b.n	8000c28 <__udivmoddi4+0x10c>
 8000dde:	bf00      	nop

08000de0 <__aeabi_idiv0>:
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
   vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8000de4:	4901      	ldr	r1, [pc, #4]	; (8000dec <vApplicationIdleHook+0x8>)
 8000de6:	2000      	movs	r0, #0
 8000de8:	f008 b932 	b.w	8009050 <vTaskSetApplicationTaskTag>
 8000dec:	08001cad 	.word	0x08001cad

08000df0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000df0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000df2:	2064      	movs	r0, #100	; 0x64
 8000df4:	f006 fb2c 	bl	8007450 <osDelay>
  for(;;)
 8000df8:	e7fb      	b.n	8000df2 <StartDefaultTask+0x2>
	...

08000dfc <SystemClock_Config>:
{
 8000dfc:	b510      	push	{r4, lr}
 8000dfe:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e00:	2210      	movs	r2, #16
 8000e02:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e04:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e06:	a80a      	add	r0, sp, #40	; 0x28
 8000e08:	f029 f8b2 	bl	8029f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	2214      	movs	r2, #20
 8000e0e:	2100      	movs	r1, #0
 8000e10:	a803      	add	r0, sp, #12
 8000e12:	f029 f8ad 	bl	8029f70 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <SystemClock_Config+0x90>)
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000e18:	2119      	movs	r1, #25
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e1a:	a808      	add	r0, sp, #32
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e22:	641a      	str	r2, [r3, #64]	; 0x40
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	9301      	str	r3, [sp, #4]
 8000e2c:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e2e:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <SystemClock_Config+0x94>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000e36:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e38:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e40:	9302      	str	r3, [sp, #8]
 8000e42:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e48:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e50:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000e54:	f44f 73c8 	mov.w	r3, #400	; 0x190
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e58:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000e5c:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e60:	f005 fab4 	bl	80063cc <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e64:	f004 ff5a 	bl	8005d1c <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e68:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e6a:	2000      	movs	r0, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000e6c:	2106      	movs	r1, #6
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e6e:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e72:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e76:	e9cd 0305 	strd	r0, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000e7e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e80:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000e82:	f005 fc8f 	bl	80067a4 <HAL_RCC_ClockConfig>
}
 8000e86:	b014      	add	sp, #80	; 0x50
 8000e88:	bd10      	pop	{r4, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40007000 	.word	0x40007000

08000e94 <main>:
{
 8000e94:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000e98:	b09b      	sub	sp, #108	; 0x6c

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2210      	movs	r2, #16

  /* Disables the MPU */
  HAL_MPU_Disable();
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e9e:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ea0:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000ea2:	2400      	movs	r4, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ea4:	f029 f864 	bl	8029f70 <memset>
  HAL_MPU_Disable();
 8000ea8:	f003 fe6c 	bl	8004b84 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000eac:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
 8000eb0:	4bca      	ldr	r3, [pc, #808]	; (80011dc <main+0x348>)
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eb2:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000eb4:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000eb8:	9410      	str	r4, [sp, #64]	; 0x40
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000eba:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ebe:	f003 fe83 	bl	8004bc8 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000ec2:	2317      	movs	r3, #23
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ec4:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000ec6:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8000eca:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000ece:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ed2:	f003 fe79 	bl	8004bc8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ed6:	2004      	movs	r0, #4
 8000ed8:	f003 fe64 	bl	8004ba4 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000edc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ee0:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000ee4:	4bbe      	ldr	r3, [pc, #760]	; (80011e0 <main+0x34c>)
 8000ee6:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000eea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000eee:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ef2:	695a      	ldr	r2, [r3, #20]
 8000ef4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000ef8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000efa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000efe:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f02:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f06:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f0a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f0e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f12:	f3c2 00c9 	ubfx	r0, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f16:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8000f1a:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f1c:	ea02 0604 	and.w	r6, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f20:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f22:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f26:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f28:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8000f2c:	d2f9      	bcs.n	8000f22 <main+0x8e>
    } while(sets-- != 0U);
 8000f2e:	3a20      	subs	r2, #32
 8000f30:	f112 0f20 	cmn.w	r2, #32
 8000f34:	d1f2      	bne.n	8000f1c <main+0x88>
 8000f36:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f3a:	695a      	ldr	r2, [r3, #20]
 8000f3c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f40:	615a      	str	r2, [r3, #20]
 8000f42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f46:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000f4a:	f003 fd7f 	bl	8004a4c <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2400      	movs	r4, #0
  SystemClock_Config();
 8000f50:	f7ff ff54 	bl	8000dfc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	2214      	movs	r2, #20
 8000f56:	2100      	movs	r1, #0
 8000f58:	a80d      	add	r0, sp, #52	; 0x34
 8000f5a:	f029 f809 	bl	8029f70 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f5e:	4ba1      	ldr	r3, [pc, #644]	; (80011e4 <main+0x350>)
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8000f60:	2108      	movs	r1, #8
 8000f62:	48a1      	ldr	r0, [pc, #644]	; (80011e8 <main+0x354>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2701      	movs	r7, #1
 8000f68:	f04f 0b08 	mov.w	fp, #8
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000f6c:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f70:	f042 0210 	orr.w	r2, r2, #16
  hdma2d.Instance = DMA2D;
 8000f74:	4d9d      	ldr	r5, [pc, #628]	; (80011ec <main+0x358>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000f76:	4e9e      	ldr	r6, [pc, #632]	; (80011f0 <main+0x35c>)
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000f78:	f04f 0904 	mov.w	r9, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7c:	631a      	str	r2, [r3, #48]	; 0x30
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000f7e:	f04f 0810 	mov.w	r8, #16
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f84:	f002 0210 	and.w	r2, r2, #16
 8000f88:	9202      	str	r2, [sp, #8]
 8000f8a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f8e:	f042 0201 	orr.w	r2, r2, #1
 8000f92:	631a      	str	r2, [r3, #48]	; 0x30
 8000f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f96:	f002 0201 	and.w	r2, r2, #1
 8000f9a:	9203      	str	r2, [sp, #12]
 8000f9c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fa0:	f042 0202 	orr.w	r2, r2, #2
 8000fa4:	631a      	str	r2, [r3, #48]	; 0x30
 8000fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fa8:	f002 0202 	and.w	r2, r2, #2
 8000fac:	9204      	str	r2, [sp, #16]
 8000fae:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fb6:	631a      	str	r2, [r3, #48]	; 0x30
 8000fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fba:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000fbe:	9205      	str	r2, [sp, #20]
 8000fc0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fc8:	631a      	str	r2, [r3, #48]	; 0x30
 8000fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fcc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000fd0:	9206      	str	r2, [sp, #24]
 8000fd2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fd6:	f042 0208 	orr.w	r2, r2, #8
 8000fda:	631a      	str	r2, [r3, #48]	; 0x30
 8000fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fde:	f002 0208 	and.w	r2, r2, #8
 8000fe2:	9207      	str	r2, [sp, #28]
 8000fe4:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fe8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fec:	631a      	str	r2, [r3, #48]	; 0x30
 8000fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ff0:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000ff4:	9208      	str	r2, [sp, #32]
 8000ff6:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffa:	f042 0220 	orr.w	r2, r2, #32
 8000ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8001000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001002:	f002 0220 	and.w	r2, r2, #32
 8001006:	9209      	str	r2, [sp, #36]	; 0x24
 8001008:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800100a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800100c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001010:	631a      	str	r2, [r3, #48]	; 0x30
 8001012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001014:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001018:	920a      	str	r2, [sp, #40]	; 0x28
 800101a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800101c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800101e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001022:	631a      	str	r2, [r3, #48]	; 0x30
 8001024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001026:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800102a:	920b      	str	r2, [sp, #44]	; 0x2c
 800102c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001030:	f042 0204 	orr.w	r2, r2, #4
 8001034:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001036:	2201      	movs	r2, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	930c      	str	r3, [sp, #48]	; 0x30
 8001040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001042:	f004 f90f 	bl	8005264 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001046:	2201      	movs	r2, #1
 8001048:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800104c:	4869      	ldr	r0, [pc, #420]	; (80011f4 <main+0x360>)
 800104e:	f004 f909 	bl	8005264 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001052:	a90d      	add	r1, sp, #52	; 0x34
 8001054:	4864      	ldr	r0, [pc, #400]	; (80011e8 <main+0x354>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001056:	e9cd b70d 	strd	fp, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800105e:	f003 ff7b 	bl	8004f58 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001062:	a90d      	add	r1, sp, #52	; 0x34
 8001064:	4863      	ldr	r0, [pc, #396]	; (80011f4 <main+0x360>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	e9cd a70d 	strd	sl, r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 800106e:	f003 ff73 	bl	8004f58 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8001072:	4861      	ldr	r0, [pc, #388]	; (80011f8 <main+0x364>)
 8001074:	4b61      	ldr	r3, [pc, #388]	; (80011fc <main+0x368>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001076:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 8001078:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800107a:	6207      	str	r7, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800107c:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001080:	f003 fdca 	bl	8004c18 <HAL_CRC_Init>
  hdma2d.Instance = DMA2D;
 8001084:	4b5e      	ldr	r3, [pc, #376]	; (8001200 <main+0x36c>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001086:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001088:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800108c:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
  hdma2d.Init.Mode = DMA2D_M2M;
 8001090:	e9c5 3400 	strd	r3, r4, [r5]
  hdma2d.Init.OutputOffset = 0;
 8001094:	e9c5 4402 	strd	r4, r4, [r5, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001098:	f003 fe5d 	bl	8004d56 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800109c:	4639      	mov	r1, r7
 800109e:	4628      	mov	r0, r5
    Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80010a0:	4d58      	ldr	r5, [pc, #352]	; (8001204 <main+0x370>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80010a2:	f003 ff11 	bl	8004ec8 <HAL_DMA2D_ConfigLayer>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80010a6:	4b58      	ldr	r3, [pc, #352]	; (8001208 <main+0x374>)
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80010a8:	2240      	movs	r2, #64	; 0x40
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80010aa:	a90d      	add	r1, sp, #52	; 0x34
 80010ac:	4630      	mov	r0, r6
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80010ae:	60b4      	str	r4, [r6, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80010b0:	61f4      	str	r4, [r6, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80010b2:	62b4      	str	r4, [r6, #40]	; 0x28
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80010b4:	e9c6 3400 	strd	r3, r4, [r6]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80010b8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80010bc:	e9c6 2305 	strd	r2, r3, [r6, #20]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80010c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80010c4:	e9c6 3a08 	strd	r3, sl, [r6, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80010c8:	f04f 0a02 	mov.w	sl, #2
 80010cc:	2307      	movs	r3, #7
 80010ce:	e9cd a30d 	strd	sl, r3, [sp, #52]	; 0x34
  SdramTiming.RowCycleDelay = 7;
 80010d2:	e9cd 930f 	strd	r9, r3, [sp, #60]	; 0x3c
  SdramTiming.WriteRecoveryTime = 3;
 80010d6:	2303      	movs	r3, #3
  SdramTiming.RCDDelay = 2;
 80010d8:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  SdramTiming.RPDelay = 2;
 80010dc:	e9cd 3a11 	strd	r3, sl, [sp, #68]	; 0x44
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80010e0:	e9c6 9803 	strd	r9, r8, [r6, #12]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80010e4:	f005 feb4 	bl	8006e50 <HAL_SDRAM_Init>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80010e8:	4629      	mov	r1, r5
 80010ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ee:	4630      	mov	r0, r6
  __IO uint32_t tmpmrd = 0;
 80010f0:	9401      	str	r4, [sp, #4]
    Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80010f2:	e9c5 7800 	strd	r7, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 80010f6:	e9c5 7402 	strd	r7, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80010fa:	f005 fec9 	bl	8006e90 <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 80010fe:	4638      	mov	r0, r7
 8001100:	f003 fcc8 	bl	8004a94 <HAL_Delay>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001104:	4629      	mov	r1, r5
 8001106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800110a:	4630      	mov	r0, r6
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800110c:	e9c5 a800 	strd	sl, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 8001110:	e9c5 7402 	strd	r7, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001114:	f005 febc 	bl	8006e90 <HAL_SDRAM_SendCommand>
    Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001118:	2303      	movs	r3, #3
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800111a:	4629      	mov	r1, r5
 800111c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001120:	4630      	mov	r0, r6
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001122:	e9c5 3800 	strd	r3, r8, [r5]
    Command.ModeRegisterDefinition = 0;
 8001126:	e9c5 b402 	strd	fp, r4, [r5, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800112a:	f005 feb1 	bl	8006e90 <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 800112e:	f44f 730c 	mov.w	r3, #560	; 0x230
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001132:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001136:	4629      	mov	r1, r5
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1 | \
 8001138:	9301      	str	r3, [sp, #4]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800113a:	4630      	mov	r0, r6
    Command.ModeRegisterDefinition = tmpmrd;
 800113c:	9b01      	ldr	r3, [sp, #4]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800113e:	f04f 0b18 	mov.w	fp, #24
    Command.AutoRefreshNumber      = 1;
 8001142:	60af      	str	r7, [r5, #8]
    Command.ModeRegisterDefinition = tmpmrd;
 8001144:	60eb      	str	r3, [r5, #12]
    Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001146:	e9c5 9800 	strd	r9, r8, [r5]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800114a:	f005 fea1 	bl	8006e90 <HAL_SDRAM_SendCommand>
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 800114e:	f240 712b 	movw	r1, #1835	; 0x72b
 8001152:	4630      	mov	r0, r6
  hi2c3.Instance = I2C3;
 8001154:	4d2d      	ldr	r5, [pc, #180]	; (800120c <main+0x378>)
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT);
 8001156:	f005 feba 	bl	8006ece <HAL_SDRAM_ProgramRefreshRate>
    FMC_Bank1->BTCR[0] = 0x000030D2;
 800115a:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800115e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001162:	492b      	ldr	r1, [pc, #172]	; (8001210 <main+0x37c>)
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001164:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedVBP = 11;
 8001166:	2635      	movs	r6, #53	; 0x35
    FMC_Bank1->BTCR[0] = 0x000030D2;
 8001168:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800116a:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <main+0x380>)
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116c:	622c      	str	r4, [r5, #32]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800116e:	e9c5 1300 	strd	r1, r3, [r5]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001172:	e9c5 4702 	strd	r4, r7, [r5, #8]
  hi2c3.Init.OwnAddress2 = 0;
 8001176:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800117a:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800117e:	f004 fa09 	bl	8005594 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001182:	4621      	mov	r1, r4
 8001184:	4628      	mov	r0, r5
 8001186:	f004 fbe1 	bl	800594c <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800118a:	4621      	mov	r1, r4
 800118c:	4628      	mov	r0, r5
  hltdc.Instance = LTDC;
 800118e:	4d22      	ldr	r5, [pc, #136]	; (8001218 <main+0x384>)
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001190:	f004 fc02 	bl	8005998 <HAL_I2CEx_ConfigDigitalFilter>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001194:	2234      	movs	r2, #52	; 0x34
 8001196:	4621      	mov	r1, r4
 8001198:	eb0d 0002 	add.w	r0, sp, r2
 800119c:	f028 fee8 	bl	8029f70 <memset>
  hltdc.Instance = LTDC;
 80011a0:	4b1e      	ldr	r3, [pc, #120]	; (800121c <main+0x388>)
  hltdc.Init.VerticalSync = 9;
 80011a2:	2028      	movs	r0, #40	; 0x28
  hltdc.Init.AccumulatedActiveH = 283;
 80011a4:	f240 2c15 	movw	ip, #533	; 0x215
  hltdc.Init.TotalHeigh = 285;
 80011a8:	f240 2e35 	movw	lr, #565	; 0x235
  hltdc.Init.Backcolor.Blue = 0;
 80011ac:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80011ae:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 80011b0:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80011b4:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 80011b8:	2309      	movs	r3, #9
 80011ba:	e9c5 0305 	strd	r0, r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
 80011be:	230b      	movs	r3, #11
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80011c0:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedVBP = 11;
 80011c2:	e9c5 6307 	strd	r6, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
 80011c6:	f240 131b 	movw	r3, #283	; 0x11b
 80011ca:	e9c5 c309 	strd	ip, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
 80011ce:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80011d2:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 285;
 80011d6:	e9c5 e30b 	strd	lr, r3, [r5, #44]	; 0x2c
 80011da:	e021      	b.n	8001220 <main+0x38c>
 80011dc:	0300001b 	.word	0x0300001b
 80011e0:	e000ed00 	.word	0xe000ed00
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40022800 	.word	0x40022800
 80011ec:	2002bc5c 	.word	0x2002bc5c
 80011f0:	2002bca0 	.word	0x2002bca0
 80011f4:	40022000 	.word	0x40022000
 80011f8:	2002bb8c 	.word	0x2002bb8c
 80011fc:	40023000 	.word	0x40023000
 8001200:	4002b000 	.word	0x4002b000
 8001204:	20016dc0 	.word	0x20016dc0
 8001208:	a0000140 	.word	0xa0000140
 800120c:	2002bb40 	.word	0x2002bb40
 8001210:	40005c00 	.word	0x40005c00
 8001214:	00c0eaff 	.word	0x00c0eaff
 8001218:	2002bbb0 	.word	0x2002bbb0
 800121c:	40016800 	.word	0x40016800
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001220:	f004 fc66 	bl	8005af0 <HAL_LTDC_Init>
  pLayerCfg.WindowY1 = 272;
 8001224:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.Alpha = 255;
 8001228:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.WindowX1 = 480;
 800122a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800122e:	4628      	mov	r0, r5
  pLayerCfg.ImageHeight = 272;
 8001230:	9318      	str	r3, [sp, #96]	; 0x60
  pLayerCfg.WindowX0 = 0;
 8001232:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Blue = 0;
 8001234:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Red = 0;
 8001238:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800123c:	e9cd 3a10 	strd	r3, sl, [sp, #64]	; 0x40
  pLayerCfg.Alpha0 = 0;
 8001240:	e9cd 1412 	strd	r1, r4, [sp, #72]	; 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001244:	f44f 6a80 	mov.w	sl, #1024	; 0x400
 8001248:	2105      	movs	r1, #5
 800124a:	e9cd a114 	strd	sl, r1, [sp, #80]	; 0x50
  pLayerCfg.FBStartAdress = 0xC0000000;
 800124e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
  pLayerCfg.WindowY0 = 0;
 8001252:	e9cd 240e 	strd	r2, r4, [sp, #56]	; 0x38
  pLayerCfg.ImageWidth = 480;
 8001256:	e9cd 1216 	strd	r1, r2, [sp, #88]	; 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800125a:	4622      	mov	r2, r4
 800125c:	a90d      	add	r1, sp, #52	; 0x34
 800125e:	f004 fd12 	bl	8005c86 <HAL_LTDC_ConfigLayer>
  hqspi.Instance = QUADSPI;
 8001262:	481a      	ldr	r0, [pc, #104]	; (80012cc <main+0x438>)
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <main+0x43c>)
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001266:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 1;
 8001268:	e9c0 3700 	strd	r3, r7, [r0]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800126c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001270:	e9c0 9802 	strd	r9, r8, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001274:	e9c0 b304 	strd	fp, r3, [r0, #16]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001278:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800127c:	f004 fe6a 	bl	8005f54 <HAL_QSPI_Init>
  BSP_QSPI_Init();
 8001280:	f003 fa62 	bl	8004748 <BSP_QSPI_Init>
  BSP_QSPI_MemoryMappedMode();
 8001284:	f003 f9a6 	bl	80045d4 <BSP_QSPI_EnableMemoryMappedMode>
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8001288:	205c      	movs	r0, #92	; 0x5c
 800128a:	f003 fc67 	bl	8004b5c <HAL_NVIC_DisableIRQ>
  MX_LIBJPEG_Init();
 800128e:	f000 fb49 	bl	8001924 <MX_LIBJPEG_Init>
  MX_TouchGFX_Init();
 8001292:	f000 fb72 	bl	800197a <MX_TouchGFX_Init>
  osKernelInitialize();
 8001296:	f006 f84b 	bl	8007330 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800129a:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <main+0x440>)
 800129c:	4621      	mov	r1, r4
 800129e:	480e      	ldr	r0, [pc, #56]	; (80012d8 <main+0x444>)
 80012a0:	f006 f880 	bl	80073a4 <osThreadNew>
 80012a4:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <main+0x448>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80012a6:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <main+0x44c>)
 80012a8:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012aa:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80012ac:	480d      	ldr	r0, [pc, #52]	; (80012e4 <main+0x450>)
 80012ae:	f006 f879 	bl	80073a4 <osThreadNew>
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <main+0x454>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <main+0x458>)
 80012b6:	4621      	mov	r1, r4
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80012b8:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 80012ba:	480d      	ldr	r0, [pc, #52]	; (80012f0 <main+0x45c>)
 80012bc:	f006 f872 	bl	80073a4 <osThreadNew>
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <main+0x460>)
 80012c2:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80012c4:	f006 f84e 	bl	8007364 <osKernelStart>
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <main+0x434>
 80012ca:	bf00      	nop
 80012cc:	2002bcd4 	.word	0x2002bcd4
 80012d0:	a0001000 	.word	0xa0001000
 80012d4:	0802b390 	.word	0x0802b390
 80012d8:	08000df1 	.word	0x08000df1
 80012dc:	2002bb3c 	.word	0x2002bb3c
 80012e0:	0802b36c 	.word	0x0802b36c
 80012e4:	0800197f 	.word	0x0800197f
 80012e8:	2002bc58 	.word	0x2002bc58
 80012ec:	0802b3b4 	.word	0x0802b3b4
 80012f0:	08002fe5 	.word	0x08002fe5
 80012f4:	2002bc9c 	.word	0x2002bc9c

080012f8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012f8:	6802      	ldr	r2, [r0, #0]
 80012fa:	4b03      	ldr	r3, [pc, #12]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d101      	bne.n	8001304 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001300:	f003 bbb6 	b.w	8004a70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	40001000 	.word	0x40001000

0800130c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800130c:	4770      	bx	lr
	...

08001310 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001310:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <HAL_MspInit+0x38>)
{
 8001312:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001314:	210f      	movs	r1, #15
 8001316:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800131c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001320:	641a      	str	r2, [r3, #64]	; 0x40
 8001322:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001324:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001328:	9200      	str	r2, [sp, #0]
 800132a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800132e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001332:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001334:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001340:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001342:	f003 bbcb 	b.w	8004adc <HAL_NVIC_SetPriority>
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800

0800134c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 800134c:	6802      	ldr	r2, [r0, #0]
{
 800134e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_CRC_MspInit+0x28>)
 8001352:	429a      	cmp	r2, r3
 8001354:	d10b      	bne.n	800136e <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001356:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 800135a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800135e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001362:	631a      	str	r2, [r3, #48]	; 0x30
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800136e:	b002      	add	sp, #8
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40023000 	.word	0x40023000

08001378 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001378:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <HAL_DMA2D_MspInit+0x3c>)
{
 800137a:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 800137c:	6802      	ldr	r2, [r0, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	d115      	bne.n	80013ae <HAL_DMA2D_MspInit+0x36>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001382:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001386:	2105      	movs	r1, #5
 8001388:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800138a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800138c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001390:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001392:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800139e:	f003 fb9d 	bl	8004adc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80013a2:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80013a4:	b003      	add	sp, #12
 80013a6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80013aa:	f003 bbc9 	b.w	8004b40 <HAL_NVIC_EnableIRQ>
}
 80013ae:	b003      	add	sp, #12
 80013b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80013b4:	4002b000 	.word	0x4002b000

080013b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013b8:	b510      	push	{r4, lr}
 80013ba:	b0a8      	sub	sp, #160	; 0xa0
 80013bc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	2214      	movs	r2, #20
 80013c0:	2100      	movs	r1, #0
 80013c2:	a802      	add	r0, sp, #8
 80013c4:	f028 fdd4 	bl	8029f70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c8:	2284      	movs	r2, #132	; 0x84
 80013ca:	2100      	movs	r1, #0
 80013cc:	a807      	add	r0, sp, #28
 80013ce:	f028 fdcf 	bl	8029f70 <memset>
  if(hi2c->Instance==I2C3)
 80013d2:	6822      	ldr	r2, [r4, #0]
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <HAL_I2C_MspInit+0x80>)
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d12c      	bne.n	8001434 <HAL_I2C_MspInit+0x7c>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80013da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013de:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80013e0:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	9322      	str	r3, [sp, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e6:	f005 faab 	bl	8006940 <HAL_RCCEx_PeriphCLKConfig>
 80013ea:	b108      	cbz	r0, 80013f0 <HAL_I2C_MspInit+0x38>
    {
      Error_Handler();
 80013ec:	f7ff ff8e 	bl	800130c <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f0:	4c12      	ldr	r4, [pc, #72]	; (800143c <HAL_I2C_MspInit+0x84>)
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f2:	f44f 72c0 	mov.w	r2, #384	; 0x180
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f6:	2101      	movs	r1, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013f8:	4811      	ldr	r0, [pc, #68]	; (8001440 <HAL_I2C_MspInit+0x88>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80013fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001400:	6323      	str	r3, [r4, #48]	; 0x30
 8001402:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800140c:	2312      	movs	r3, #18
 800140e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001418:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800141a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800141c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800141e:	f003 fd9b 	bl	8004f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001422:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001424:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001428:	6423      	str	r3, [r4, #64]	; 0x40
 800142a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800142c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001434:	b028      	add	sp, #160	; 0xa0
 8001436:	bd10      	pop	{r4, pc}
 8001438:	40005c00 	.word	0x40005c00
 800143c:	40023800 	.word	0x40023800
 8001440:	40021c00 	.word	0x40021c00

08001444 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C3)
 8001444:	6802      	ldr	r2, [r0, #0]
{
 8001446:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C3)
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_I2C_MspDeInit+0x2c>)
 800144a:	429a      	cmp	r2, r3
 800144c:	d10f      	bne.n	800146e <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800144e:	4a09      	ldr	r2, [pc, #36]	; (8001474 <HAL_I2C_MspDeInit+0x30>)

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	4809      	ldr	r0, [pc, #36]	; (8001478 <HAL_I2C_MspDeInit+0x34>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001454:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001456:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800145a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 800145c:	f003 fe60 	bl	8005120 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 8001460:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001464:	4804      	ldr	r0, [pc, #16]	; (8001478 <HAL_I2C_MspDeInit+0x34>)
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001466:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 800146a:	f003 be59 	b.w	8005120 <HAL_GPIO_DeInit>
}
 800146e:	bd08      	pop	{r3, pc}
 8001470:	40005c00 	.word	0x40005c00
 8001474:	40023800 	.word	0x40023800
 8001478:	40021c00 	.word	0x40021c00

0800147c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800147c:	b570      	push	{r4, r5, r6, lr}
 800147e:	b0ac      	sub	sp, #176	; 0xb0
 8001480:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001482:	2214      	movs	r2, #20
 8001484:	2100      	movs	r1, #0
 8001486:	a806      	add	r0, sp, #24
 8001488:	f028 fd72 	bl	8029f70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800148c:	2284      	movs	r2, #132	; 0x84
 800148e:	2100      	movs	r1, #0
 8001490:	a80b      	add	r0, sp, #44	; 0x2c
 8001492:	f028 fd6d 	bl	8029f70 <memset>
  if(hltdc->Instance==LTDC)
 8001496:	6822      	ldr	r2, [r4, #0]
 8001498:	4b49      	ldr	r3, [pc, #292]	; (80015c0 <HAL_LTDC_MspInit+0x144>)
 800149a:	429a      	cmp	r2, r3
 800149c:	f040 808e 	bne.w	80015bc <HAL_LTDC_MspInit+0x140>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80014a0:	2308      	movs	r3, #8
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80014a2:	2005      	movs	r0, #5
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
    PeriphClkInitStruct.PLLSAIDivQ = 1;
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80014a4:	2501      	movs	r5, #1
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80014a6:	930b      	str	r3, [sp, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80014a8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014ac:	9310      	str	r3, [sp, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80014ae:	2302      	movs	r3, #2
 80014b0:	e9cd 3011 	strd	r3, r0, [sp, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80014b4:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b6:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80014b8:	9313      	str	r3, [sp, #76]	; 0x4c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80014ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014be:	e9cd 5315 	strd	r5, r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c2:	f005 fa3d 	bl	8006940 <HAL_RCCEx_PeriphCLKConfig>
 80014c6:	b108      	cbz	r0, 80014cc <HAL_LTDC_MspInit+0x50>
    {
      Error_Handler();
 80014c8:	f7ff ff20 	bl	800130c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014cc:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <HAL_LTDC_MspInit+0x148>)
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014d2:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d6:	a906      	add	r1, sp, #24
 80014d8:	483b      	ldr	r0, [pc, #236]	; (80015c8 <HAL_LTDC_MspInit+0x14c>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80014de:	645a      	str	r2, [r3, #68]	; 0x44
 80014e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014e2:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80014e6:	9200      	str	r2, [sp, #0]
 80014e8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ec:	f042 0210 	orr.w	r2, r2, #16
 80014f0:	631a      	str	r2, [r3, #48]	; 0x30
 80014f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014f4:	f002 0210 	and.w	r2, r2, #16
 80014f8:	9201      	str	r2, [sp, #4]
 80014fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001502:	631a      	str	r2, [r3, #48]	; 0x30
 8001504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001506:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800150a:	9202      	str	r2, [sp, #8]
 800150c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800150e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001510:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001514:	631a      	str	r2, [r3, #48]	; 0x30
 8001516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001518:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800151c:	9203      	str	r2, [sp, #12]
 800151e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001522:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001526:	631a      	str	r2, [r3, #48]	; 0x30
 8001528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800152a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800152e:	9204      	str	r2, [sp, #16]
 8001530:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001538:	631a      	str	r2, [r3, #48]	; 0x30
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001540:	9305      	str	r3, [sp, #20]
 8001542:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2310      	movs	r3, #16
 8001546:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800154e:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001550:	f003 fd02 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8001554:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001558:	a906      	add	r1, sp, #24
 800155a:	481c      	ldr	r0, [pc, #112]	; (80015cc <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800155c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001566:	f003 fcf7 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 800156a:	23f7      	movs	r3, #247	; 0xf7
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800156c:	a906      	add	r1, sp, #24
 800156e:	4818      	ldr	r0, [pc, #96]	; (80015d0 <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001570:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800157a:	f003 fced 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800157e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001582:	a906      	add	r1, sp, #24
 8001584:	4813      	ldr	r0, [pc, #76]	; (80015d4 <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800158a:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	e9cd 4408 	strd	r4, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001590:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001592:	f003 fce1 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8001596:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800159a:	a906      	add	r1, sp, #24
 800159c:	480e      	ldr	r0, [pc, #56]	; (80015d8 <HAL_LTDC_MspInit+0x15c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800159e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015a8:	f003 fcd6 	bl	8004f58 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80015ac:	2058      	movs	r0, #88	; 0x58
 80015ae:	4622      	mov	r2, r4
 80015b0:	2105      	movs	r1, #5
 80015b2:	f003 fa93 	bl	8004adc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80015b6:	2058      	movs	r0, #88	; 0x58
 80015b8:	f003 fac2 	bl	8004b40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80015bc:	b02c      	add	sp, #176	; 0xb0
 80015be:	bd70      	pop	{r4, r5, r6, pc}
 80015c0:	40016800 	.word	0x40016800
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40022400 	.word	0x40022400
 80015d0:	40022800 	.word	0x40022800
 80015d4:	40021800 	.word	0x40021800
 80015d8:	40022000 	.word	0x40022000

080015dc <HAL_QSPI_MspInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	2214      	movs	r2, #20
 80015de:	2100      	movs	r1, #0
{
 80015e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015e4:	b08a      	sub	sp, #40	; 0x28
 80015e6:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	eb0d 0002 	add.w	r0, sp, r2
 80015ec:	f028 fcc0 	bl	8029f70 <memset>
  if(hqspi->Instance==QUADSPI)
 80015f0:	6822      	ldr	r2, [r4, #0]
 80015f2:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <HAL_QSPI_MspInit+0xc8>)
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d152      	bne.n	800169e <HAL_QSPI_MspInit+0xc2>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80015f8:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <HAL_QSPI_MspInit+0xcc>)
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2500      	movs	r5, #0
 80015fe:	2403      	movs	r4, #3
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001602:	2709      	movs	r7, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	f04f 0804 	mov.w	r8, #4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001608:	a905      	add	r1, sp, #20
    __HAL_RCC_QSPI_CLK_ENABLE();
 800160a:	f042 0202 	orr.w	r2, r2, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800160e:	4827      	ldr	r0, [pc, #156]	; (80016ac <HAL_QSPI_MspInit+0xd0>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001610:	639a      	str	r2, [r3, #56]	; 0x38
 8001612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001614:	f002 0202 	and.w	r2, r2, #2
 8001618:	9201      	str	r2, [sp, #4]
 800161a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800161c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800161e:	f042 0210 	orr.w	r2, r2, #16
 8001622:	631a      	str	r2, [r3, #48]	; 0x30
 8001624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001626:	f002 0210 	and.w	r2, r2, #16
 800162a:	9202      	str	r2, [sp, #8]
 800162c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001630:	f042 0202 	orr.w	r2, r2, #2
 8001634:	631a      	str	r2, [r3, #48]	; 0x30
 8001636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001638:	f002 0202 	and.w	r2, r2, #2
 800163c:	9203      	str	r2, [sp, #12]
 800163e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001642:	f042 0208 	orr.w	r2, r2, #8
 8001646:	631a      	str	r2, [r3, #48]	; 0x30
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800164a:	9709      	str	r7, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	9304      	str	r3, [sp, #16]
 8001652:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	e9cd 8605 	strd	r8, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001658:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800165c:	f003 fc7c 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001660:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001662:	a905      	add	r1, sp, #20
 8001664:	4812      	ldr	r0, [pc, #72]	; (80016b0 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800166a:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166c:	e9cd 5407 	strd	r5, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001670:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001672:	f003 fc71 	bl	8004f58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001676:	a905      	add	r1, sp, #20
 8001678:	480d      	ldr	r0, [pc, #52]	; (80016b0 <HAL_QSPI_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800167a:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	e9cd 8605 	strd	r8, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001680:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f003 fc68 	bl	8004f58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
 8001688:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800168c:	a905      	add	r1, sp, #20
 800168e:	4809      	ldr	r0, [pc, #36]	; (80016b4 <HAL_QSPI_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001690:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	e9cd 3605 	strd	r3, r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001696:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169a:	f003 fc5d 	bl	8004f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800169e:	b00a      	add	sp, #40	; 0x28
 80016a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016a4:	a0001000 	.word	0xa0001000
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40020400 	.word	0x40020400
 80016b4:	40020c00 	.word	0x40020c00

080016b8 <HAL_QSPI_MspDeInit>:
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
  if(hqspi->Instance==QUADSPI)
 80016b8:	6802      	ldr	r2, [r0, #0]
{
 80016ba:	b508      	push	{r3, lr}
  if(hqspi->Instance==QUADSPI)
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_QSPI_MspDeInit+0x34>)
 80016be:	429a      	cmp	r2, r3
 80016c0:	d113      	bne.n	80016ea <HAL_QSPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80016c2:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <HAL_QSPI_MspDeInit+0x38>)
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 80016c4:	2104      	movs	r1, #4
 80016c6:	480b      	ldr	r0, [pc, #44]	; (80016f4 <HAL_QSPI_MspDeInit+0x3c>)
    __HAL_RCC_QSPI_CLK_DISABLE();
 80016c8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80016ca:	f023 0302 	bic.w	r3, r3, #2
 80016ce:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 80016d0:	f003 fd26 	bl	8005120 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_2);
 80016d4:	2144      	movs	r1, #68	; 0x44
 80016d6:	4808      	ldr	r0, [pc, #32]	; (80016f8 <HAL_QSPI_MspDeInit+0x40>)
 80016d8:	f003 fd22 	bl	8005120 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 80016dc:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80016e0:	4806      	ldr	r0, [pc, #24]	; (80016fc <HAL_QSPI_MspDeInit+0x44>)
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 80016e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11);
 80016e6:	f003 bd1b 	b.w	8005120 <HAL_GPIO_DeInit>
}
 80016ea:	bd08      	pop	{r3, pc}
 80016ec:	a0001000 	.word	0xa0001000
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40020400 	.word	0x40020400
 80016fc:	40020c00 	.word	0x40020c00

08001700 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
 8001700:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <HAL_SDRAM_MspInit+0xb0>)
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001702:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FMC_Initialized) {
 8001704:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001706:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 8001708:	2c00      	cmp	r4, #0
 800170a:	d14e      	bne.n	80017aa <HAL_SDRAM_MspInit+0xaa>
  FMC_Initialized = 1;
 800170c:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001710:	2603      	movs	r6, #3
 8001712:	250c      	movs	r5, #12
  FMC_Initialized = 1;
 8001714:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001716:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8001718:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800171a:	4827      	ldr	r0, [pc, #156]	; (80017b8 <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800171c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800171e:	f042 0201 	orr.w	r2, r2, #1
 8001722:	639a      	str	r2, [r3, #56]	; 0x38
 8001724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	9403      	str	r4, [sp, #12]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001734:	e9cd 6504 	strd	r6, r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800173c:	f003 fc0c 	bl	8004f58 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8001740:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001744:	a901      	add	r1, sp, #4
 8001746:	481d      	ldr	r0, [pc, #116]	; (80017bc <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001748:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001752:	f003 fc01 	bl	8004f58 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8001756:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800175a:	a901      	add	r1, sp, #4
 800175c:	4818      	ldr	r0, [pc, #96]	; (80017c0 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800175e:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001768:	f003 fbf6 	bl	8004f58 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800176c:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001770:	a901      	add	r1, sp, #4
 8001772:	4814      	ldr	r0, [pc, #80]	; (80017c4 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001774:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177a:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800177e:	f003 fbeb 	bl	8004f58 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8001782:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001784:	a901      	add	r1, sp, #4
 8001786:	4810      	ldr	r0, [pc, #64]	; (80017c8 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001788:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001792:	f003 fbe1 	bl	8004f58 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001796:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001798:	a901      	add	r1, sp, #4
 800179a:	480c      	ldr	r0, [pc, #48]	; (80017cc <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800179c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a6:	f003 fbd7 	bl	8004f58 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80017aa:	b007      	add	sp, #28
 80017ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20016dd0 	.word	0x20016dd0
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40021800 	.word	0x40021800
 80017c0:	40020c00 	.word	0x40020c00
 80017c4:	40021400 	.word	0x40021400
 80017c8:	40021c00 	.word	0x40021c00
 80017cc:	40020800 	.word	0x40020800

080017d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d0:	b510      	push	{r4, lr}
 80017d2:	4601      	mov	r1, r0
 80017d4:	b088      	sub	sp, #32
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2036      	movs	r0, #54	; 0x36
 80017da:	f003 f97f 	bl	8004adc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017de:	2036      	movs	r0, #54	; 0x36
 80017e0:	f003 f9ae 	bl	8004b40 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017e4:	4b14      	ldr	r3, [pc, #80]	; (8001838 <HAL_InitTick+0x68>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017e6:	a901      	add	r1, sp, #4
 80017e8:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017ec:	4c13      	ldr	r4, [pc, #76]	; (800183c <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017ee:	f042 0210 	orr.w	r2, r2, #16
 80017f2:	641a      	str	r2, [r3, #64]	; 0x40
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	9302      	str	r3, [sp, #8]
 80017fc:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017fe:	f005 f881 	bl	8006904 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001802:	f005 f86f 	bl	80068e4 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001808:	0040      	lsls	r0, r0, #1
  htim6.Instance = TIM6;
 800180a:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800180c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001810:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <HAL_InitTick+0x74>)
 8001814:	fbb0 f0f3 	udiv	r0, r0, r3
 8001818:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 800181a:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 800181c:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800181e:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001820:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001822:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001824:	f005 fcc4 	bl	80071b0 <HAL_TIM_Base_Init>
 8001828:	b920      	cbnz	r0, 8001834 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800182a:	4620      	mov	r0, r4
 800182c:	f005 fb68 	bl	8006f00 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001830:	b008      	add	sp, #32
 8001832:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8001834:	2001      	movs	r0, #1
 8001836:	e7fb      	b.n	8001830 <HAL_InitTick+0x60>
 8001838:	40023800 	.word	0x40023800
 800183c:	2002bd20 	.word	0x2002bd20
 8001840:	40001000 	.word	0x40001000
 8001844:	000f4240 	.word	0x000f4240

08001848 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001848:	4770      	bx	lr

0800184a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <HardFault_Handler>

0800184c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <MemManage_Handler>

0800184e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <BusFault_Handler>

08001850 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <UsageFault_Handler>

08001852 <DebugMon_Handler>:
 8001852:	4770      	bx	lr

08001854 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001854:	4801      	ldr	r0, [pc, #4]	; (800185c <TIM6_DAC_IRQHandler+0x8>)
 8001856:	f005 bb95 	b.w	8006f84 <HAL_TIM_IRQHandler>
 800185a:	bf00      	nop
 800185c:	2002bd20 	.word	0x2002bd20

08001860 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001860:	4801      	ldr	r0, [pc, #4]	; (8001868 <LTDC_IRQHandler+0x8>)
 8001862:	f004 b9b3 	b.w	8005bcc <HAL_LTDC_IRQHandler>
 8001866:	bf00      	nop
 8001868:	2002bbb0 	.word	0x2002bbb0

0800186c <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800186c:	4801      	ldr	r0, [pc, #4]	; (8001874 <DMA2D_IRQHandler+0x8>)
 800186e:	f003 baa0 	b.w	8004db2 <HAL_DMA2D_IRQHandler>
 8001872:	bf00      	nop
 8001874:	2002bc5c 	.word	0x2002bc5c

08001878 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001878:	2001      	movs	r0, #1
 800187a:	4770      	bx	lr

0800187c <_kill>:

int _kill(int pid, int sig)
{
 800187c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800187e:	f028 fb19 	bl	8029eb4 <__errno>
 8001882:	2316      	movs	r3, #22
 8001884:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001886:	f04f 30ff 	mov.w	r0, #4294967295
 800188a:	bd08      	pop	{r3, pc}

0800188c <_exit>:

void _exit (int status)
{
 800188c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800188e:	f028 fb11 	bl	8029eb4 <__errno>
 8001892:	2316      	movs	r3, #22
 8001894:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001896:	e7fe      	b.n	8001896 <_exit+0xa>

08001898 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001898:	b570      	push	{r4, r5, r6, lr}
 800189a:	460e      	mov	r6, r1
 800189c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189e:	2500      	movs	r5, #0
 80018a0:	42a5      	cmp	r5, r4
 80018a2:	db01      	blt.n	80018a8 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80018a4:	4620      	mov	r0, r4
 80018a6:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80018a8:	f3af 8000 	nop.w
 80018ac:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ae:	3501      	adds	r5, #1
 80018b0:	e7f6      	b.n	80018a0 <_read+0x8>

080018b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018b2:	b570      	push	{r4, r5, r6, lr}
 80018b4:	460e      	mov	r6, r1
 80018b6:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b8:	2500      	movs	r5, #0
 80018ba:	42a5      	cmp	r5, r4
 80018bc:	db01      	blt.n	80018c2 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80018be:	4620      	mov	r0, r4
 80018c0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80018c2:	5d70      	ldrb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c4:	3501      	adds	r5, #1
		__io_putchar(*ptr++);
 80018c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ca:	e7f6      	b.n	80018ba <_write+0x8>

080018cc <_close>:

int _close(int file)
{
	return -1;
}
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	4770      	bx	lr

080018d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80018d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80018d6:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80018d8:	604b      	str	r3, [r1, #4]
}
 80018da:	4770      	bx	lr

080018dc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80018dc:	2001      	movs	r0, #1
 80018de:	4770      	bx	lr

080018e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80018e0:	2000      	movs	r0, #0
 80018e2:	4770      	bx	lr

080018e4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <_sbrk+0x30>)
{
 80018e6:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 80018e8:	6819      	ldr	r1, [r3, #0]
{
 80018ea:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80018ec:	b909      	cbnz	r1, 80018f2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80018ee:	490a      	ldr	r1, [pc, #40]	; (8001918 <_sbrk+0x34>)
 80018f0:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f2:	6818      	ldr	r0, [r3, #0]
 80018f4:	4909      	ldr	r1, [pc, #36]	; (800191c <_sbrk+0x38>)
 80018f6:	4c0a      	ldr	r4, [pc, #40]	; (8001920 <_sbrk+0x3c>)
 80018f8:	4402      	add	r2, r0
 80018fa:	1b09      	subs	r1, r1, r4
 80018fc:	428a      	cmp	r2, r1
 80018fe:	d906      	bls.n	800190e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001900:	f028 fad8 	bl	8029eb4 <__errno>
 8001904:	230c      	movs	r3, #12
 8001906:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001908:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800190c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800190e:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8001910:	e7fc      	b.n	800190c <_sbrk+0x28>
 8001912:	bf00      	nop
 8001914:	20016dd4 	.word	0x20016dd4
 8001918:	2002be10 	.word	0x2002be10
 800191c:	20050000 	.word	0x20050000
 8001920:	00000a00 	.word	0x00000a00

08001924 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8001924:	4770      	bx	lr
	...

08001928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001960 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800192c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800192e:	e003      	b.n	8001938 <LoopCopyDataInit>

08001930 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001932:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001934:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001936:	3104      	adds	r1, #4

08001938 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001938:	480b      	ldr	r0, [pc, #44]	; (8001968 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800193c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800193e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001940:	d3f6      	bcc.n	8001930 <CopyDataInit>
  ldr  r2, =_sbss
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001944:	e002      	b.n	800194c <LoopFillZerobss>

08001946 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001946:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001948:	f842 3b04 	str.w	r3, [r2], #4

0800194c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800194e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001950:	d3f9      	bcc.n	8001946 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001952:	f002 ff91 	bl	8004878 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001956:	f028 fac5 	bl	8029ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800195a:	f7ff fa9b 	bl	8000e94 <main>
  bx  lr    
 800195e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001960:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001964:	080321bc 	.word	0x080321bc
  ldr  r0, =_sdata
 8001968:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800196c:	20000124 	.word	0x20000124
  ldr  r2, =_sbss
 8001970:	20016da4 	.word	0x20016da4
  ldr  r3, = _ebss
 8001974:	2002be0c 	.word	0x2002be0c

08001978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001978:	e7fe      	b.n	8001978 <ADC_IRQHandler>

0800197a <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800197a:	f000 bfd1 	b.w	8002920 <touchgfx_init>

0800197e <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800197e:	f001 b83f 	b.w	8002a00 <touchgfx_taskEntry>

08001982 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001982:	6840      	ldr	r0, [r0, #4]
    }
 8001984:	4770      	bx	lr

08001986 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001986:	6041      	str	r1, [r0, #4]
    }
 8001988:	4770      	bx	lr
	...

0800198c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 800198c:	4a09      	ldr	r2, [pc, #36]	; (80019b4 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 800198e:	6813      	ldr	r3, [r2, #0]
 8001990:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001994:	6013      	str	r3, [r2, #0]
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 8001996:	f5a2 424e 	sub.w	r2, r2, #52736	; 0xce00
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 800199c:	f852 1c4c 	ldr.w	r1, [r2, #-76]
 80019a0:	3a4c      	subs	r2, #76	; 0x4c
 80019a2:	430b      	orrs	r3, r1
 80019a4:	6013      	str	r3, [r2, #0]
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 80019a6:	f5a2 627b 	sub.w	r2, r2, #4016	; 0xfb0
 80019aa:	6813      	ldr	r3, [r2, #0]
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6013      	str	r3, [r2, #0]
}
 80019b2:	4770      	bx	lr
 80019b4:	e000edfc 	.word	0xe000edfc
 80019b8:	c5acce55 	.word	0xc5acce55

080019bc <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80019bc:	1a51      	subs	r1, r2, r1
 80019be:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 80019c2:	fbb1 f0f3 	udiv	r0, r1, r3
 80019c6:	4770      	bx	lr

080019c8 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 80019c8:	4b01      	ldr	r3, [pc, #4]	; (80019d0 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 80019ca:	6818      	ldr	r0, [r3, #0]
}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e0001004 	.word	0xe0001004

080019d4 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 80019d4:	4770      	bx	lr

080019d6 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 80019d6:	b510      	push	{r4, lr}
 80019d8:	4604      	mov	r4, r0
 80019da:	210c      	movs	r1, #12
 80019dc:	f028 fa0a 	bl	8029df4 <_ZdlPvj>
 80019e0:	4620      	mov	r0, r4
 80019e2:	bd10      	pop	{r4, pc}

080019e4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
 80019e4:	6803      	ldr	r3, [r0, #0]
{
 80019e6:	b510      	push	{r4, lr}
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	4604      	mov	r4, r0
    if (active) //idle task sched out
 80019ec:	b131      	cbz	r1, 80019fc <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 80019ee:	4798      	blx	r3
 80019f0:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 80019f2:	6863      	ldr	r3, [r4, #4]
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	4418      	add	r0, r3
 80019f8:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 80019fa:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 80019fc:	4798      	blx	r3
 80019fe:	60a0      	str	r0, [r4, #8]
}
 8001a00:	e7fb      	b.n	80019fa <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>
	...

08001a04 <_ZN20STM32TouchController4initEv>:
extern I2C_HandleTypeDef hi2c3;

void STM32TouchController::init()
{
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8001a04:	4b02      	ldr	r3, [pc, #8]	; (8001a10 <_ZN20STM32TouchController4initEv+0xc>)

    /* Initialize the TS driver */
    tsDriver->Start(TS_I2C_ADDRESS);
 8001a06:	2070      	movs	r0, #112	; 0x70
    tsDriver = &ft5336_ts_drv;
 8001a08:	4a02      	ldr	r2, [pc, #8]	; (8001a14 <_ZN20STM32TouchController4initEv+0x10>)
 8001a0a:	6013      	str	r3, [r2, #0]
    tsDriver->Start(TS_I2C_ADDRESS);
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	4718      	bx	r3
 8001a10:	20000010 	.word	0x20000010
 8001a14:	20016dd8 	.word	0x20016dd8

08001a18 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001a18:	4770      	bx	lr

08001a1a <_ZN20STM32TouchControllerD0Ev>:
 8001a1a:	b510      	push	{r4, lr}
 8001a1c:	4604      	mov	r4, r0
 8001a1e:	2104      	movs	r1, #4
 8001a20:	f028 f9e8 	bl	8029df4 <_ZdlPvj>
 8001a24:	4620      	mov	r0, r4
 8001a26:	bd10      	pop	{r4, pc}

08001a28 <_ZN20STM32TouchController11sampleTouchERlS0_>:
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (tsDriver)
 8001a2a:	4d0a      	ldr	r5, [pc, #40]	; (8001a54 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001a2c:	460c      	mov	r4, r1
    if (tsDriver)
 8001a2e:	682b      	ldr	r3, [r5, #0]
 8001a30:	b913      	cbnz	r3, 8001a38 <_ZN20STM32TouchController11sampleTouchERlS0_+0x10>
            /* Get each touch coordinates */
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
            return true;
        }
    }
    return false;
 8001a32:	2000      	movs	r0, #0
}
 8001a34:	b003      	add	sp, #12
 8001a36:	bd30      	pop	{r4, r5, pc}
        if (tsDriver->DetectTouch(TS_I2C_ADDRESS))
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	2070      	movs	r0, #112	; 0x70
 8001a3c:	9201      	str	r2, [sp, #4]
 8001a3e:	4798      	blx	r3
 8001a40:	9901      	ldr	r1, [sp, #4]
 8001a42:	2800      	cmp	r0, #0
 8001a44:	d0f5      	beq.n	8001a32 <_ZN20STM32TouchController11sampleTouchERlS0_+0xa>
            tsDriver->GetXY(TS_I2C_ADDRESS, (uint16_t*)&y, (uint16_t*)&x);
 8001a46:	682b      	ldr	r3, [r5, #0]
 8001a48:	2070      	movs	r0, #112	; 0x70
 8001a4a:	4622      	mov	r2, r4
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	4798      	blx	r3
 8001a50:	2001      	movs	r0, #1
 8001a52:	e7ef      	b.n	8001a34 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
 8001a54:	20016dd8 	.word	0x20016dd8

08001a58 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001a58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a5a:	2301      	movs	r3, #1
{
 8001a5c:	f88d 2017 	strb.w	r2, [sp, #23]
    status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a64:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001a68:	f10d 0217 	add.w	r2, sp, #23
 8001a6c:	9200      	str	r2, [sp, #0]
 8001a6e:	460a      	mov	r2, r1
 8001a70:	4601      	mov	r1, r0
 8001a72:	4805      	ldr	r0, [pc, #20]	; (8001a88 <TS_IO_Write+0x30>)
 8001a74:	f003 fdf8 	bl	8005668 <HAL_I2C_Mem_Write>
    if (status != HAL_OK)
 8001a78:	b110      	cbz	r0, 8001a80 <TS_IO_Write+0x28>
    HAL_I2C_DeInit(i2c_handler);
 8001a7a:	4803      	ldr	r0, [pc, #12]	; (8001a88 <TS_IO_Write+0x30>)
 8001a7c:	f003 fddb 	bl	8005636 <HAL_I2C_DeInit>
    I2Cx_WriteMultiple(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&Value, 1);
}
 8001a80:	b007      	add	sp, #28
 8001a82:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a86:	bf00      	nop
 8001a88:	2002bb40 	.word	0x2002bb40

08001a8c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001a8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    uint8_t read_value = 0;
 8001a8e:	2300      	movs	r3, #0
{
 8001a90:	460a      	mov	r2, r1
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    uint8_t read_value = 0;
 8001a96:	f88d 3017 	strb.w	r3, [sp, #23]
    status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001aa0:	f10d 0117 	add.w	r1, sp, #23
 8001aa4:	9100      	str	r1, [sp, #0]
 8001aa6:	4601      	mov	r1, r0
 8001aa8:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <TS_IO_Read+0x34>)
 8001aaa:	f003 fe93 	bl	80057d4 <HAL_I2C_Mem_Read>
    if (status != HAL_OK)
 8001aae:	b110      	cbz	r0, 8001ab6 <TS_IO_Read+0x2a>
    HAL_I2C_DeInit(i2c_handler);
 8001ab0:	4803      	ldr	r0, [pc, #12]	; (8001ac0 <TS_IO_Read+0x34>)
 8001ab2:	f003 fdc0 	bl	8005636 <HAL_I2C_DeInit>

    I2Cx_ReadMultiple(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

    return read_value;
}
 8001ab6:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001aba:	b007      	add	sp, #28
 8001abc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ac0:	2002bb40 	.word	0x2002bb40

08001ac4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{

}
 8001ac4:	4770      	bx	lr

08001ac6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
 8001ac6:	4770      	bx	lr

08001ac8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
 8001ac8:	4770      	bx	lr

08001aca <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001aca:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001acc:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001ad0:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 8001ad4:	4770      	bx	lr

08001ad6 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
    {
        return false;
    }
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	4770      	bx	lr

08001ada <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001ada:	2000      	movs	r0, #0
 8001adc:	4770      	bx	lr

08001ade <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001ade:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001ae0:	b10b      	cbz	r3, 8001ae6 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001ae2:	4608      	mov	r0, r1
 8001ae4:	4718      	bx	r3
        }
    }
 8001ae6:	4770      	bx	lr

08001ae8 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001ae8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001aec:	4770      	bx	lr

08001aee <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001aee:	6840      	ldr	r0, [r0, #4]
 8001af0:	6803      	ldr	r3, [r0, #0]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4718      	bx	r3

08001af6 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001af6:	4770      	bx	lr

08001af8 <_ZN11TouchGFXHAL10initializeEv>:

using namespace touchgfx;
CortexMMCUInstrumentation instrumentation;

void TouchGFXHAL::initialize()
{
 8001af8:	b538      	push	{r3, r4, r5, lr}
 8001afa:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001afc:	f001 f858 	bl	8002bb0 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0xC003FC00, (void*)0xC007F800);  //enable the animation storage to allow slide animations
 8001b00:	4a0a      	ldr	r2, [pc, #40]	; (8001b2c <_ZN11TouchGFXHAL10initializeEv+0x34>)
 8001b02:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001b06:	6823      	ldr	r3, [r4, #0]
 8001b08:	4620      	mov	r0, r4
 8001b0a:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <_ZN11TouchGFXHAL10initializeEv+0x38>)
 8001b10:	47a8      	blx	r5
        lockDMAToPorch = enableLock;
 8001b12:	2300      	movs	r3, #0
    lockDMAToFrontPorch(false);
    instrumentation.init();
 8001b14:	4d07      	ldr	r5, [pc, #28]	; (8001b34 <_ZN11TouchGFXHAL10initializeEv+0x3c>)
 8001b16:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
 8001b1a:	4628      	mov	r0, r5
 8001b1c:	f7ff ff36 	bl	800198c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 8001b20:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001b22:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001b24:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8001b28:	bd38      	pop	{r3, r4, r5, pc}
 8001b2a:	bf00      	nop
 8001b2c:	c003fc00 	.word	0xc003fc00
 8001b30:	c007f800 	.word	0xc007f800
 8001b34:	20016ddc 	.word	0x20016ddc

08001b38 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001b38:	b508      	push	{r3, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001b3a:	b931      	cbnz	r1, 8001b4a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x12>
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 8001b3e:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 8001b44:	480a      	ldr	r0, [pc, #40]	; (8001b70 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 8001b46:	f028 f983 	bl	8029e50 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001b4a:	e9c0 120f 	strd	r1, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001b4e:	3a00      	subs	r2, #0
 8001b50:	4908      	ldr	r1, [pc, #32]	; (8001b74 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001b52:	6443      	str	r3, [r0, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001b54:	bf18      	it	ne
 8001b56:	2201      	movne	r2, #1
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001b58:	3b00      	subs	r3, #0
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001b5a:	700a      	strb	r2, [r1, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001b5c:	bf18      	it	ne
 8001b5e:	2301      	movne	r3, #1
 8001b60:	4a05      	ldr	r2, [pc, #20]	; (8001b78 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
 8001b62:	7013      	strb	r3, [r2, #0]
    }
 8001b64:	bd08      	pop	{r3, pc}
 8001b66:	bf00      	nop
 8001b68:	0802b418 	.word	0x0802b418
 8001b6c:	0802b450 	.word	0x0802b450
 8001b70:	0802b49e 	.word	0x0802b49e
 8001b74:	2002b89e 	.word	0x2002b89e
 8001b78:	2002b89f 	.word	0x2002b89f

08001b7c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001b7c:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	428b      	cmp	r3, r1
 8001b84:	d803      	bhi.n	8001b8e <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d905      	bls.n	8001b9a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001b90:	219e      	movs	r1, #158	; 0x9e
 8001b92:	4a07      	ldr	r2, [pc, #28]	; (8001bb0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001b94:	4807      	ldr	r0, [pc, #28]	; (8001bb4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001b96:	f028 f95b 	bl	8029e50 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001b9c:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001ba0:	801a      	strh	r2, [r3, #0]
    }
 8001ba2:	bd08      	pop	{r3, pc}
 8001ba4:	2002b894 	.word	0x2002b894
 8001ba8:	2002b896 	.word	0x2002b896
 8001bac:	0802b4e3 	.word	0x0802b4e3
 8001bb0:	0802b546 	.word	0x0802b546
 8001bb4:	0802b49e 	.word	0x0802b49e
 8001bb8:	2002b89a 	.word	0x2002b89a
 8001bbc:	2002b89c 	.word	0x2002b89c

08001bc0 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001bc0:	f000 bfd6 	b.w	8002b70 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

08001bc4 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001bc4:	f000 bfda 	b.w	8002b7c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001bc8 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001bc8:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001bca:	f001 f87f 	bl	8002ccc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001bce:	4a10      	ldr	r2, [pc, #64]	; (8001c10 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001bd6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001bda:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001bde:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001be2:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001be6:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001bea:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001bec:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001bf0:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001bf2:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001bf6:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001bf8:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8001bfc:	d2f9      	bcs.n	8001bf2 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 8001bfe:	3b20      	subs	r3, #32
 8001c00:	f113 0f20 	cmn.w	r3, #32
 8001c04:	d1f2      	bne.n	8001bec <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 8001c06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001c0a:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8001c0e:	bd70      	pop	{r4, r5, r6, pc}
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001c14:	f001 b868 	b.w	8002ce8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>

08001c18 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001c18:	f000 bf86 	b.w	8002b28 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001c1c <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001c1c:	f001 b91a 	b.w	8002e54 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001c20 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001c20:	f001 b922 	b.w	8002e68 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001c24 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001c24:	f000 bf8a 	b.w	8002b3c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08001c28 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001c28:	b510      	push	{r4, lr}
 8001c2a:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001c2c:	f016 fbc2 	bl	80183b4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001c30:	6823      	ldr	r3, [r4, #0]
 8001c32:	4620      	mov	r0, r4
 8001c34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    }
 8001c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001c3c:	4718      	bx	r3

08001c3e <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8001c3e:	f015 bd63 	b.w	8017708 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001c42 <_ZN11TouchGFXHALD0Ev>:
 8001c42:	b510      	push	{r4, lr}
 8001c44:	4604      	mov	r4, r0
 8001c46:	217c      	movs	r1, #124	; 0x7c
 8001c48:	f028 f8d4 	bl	8029df4 <_ZdlPvj>
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	bd10      	pop	{r4, pc}

08001c50 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 8001c50:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8001c54:	b11b      	cbz	r3, 8001c5e <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8001c56:	6840      	ldr	r0, [r0, #4]
 8001c58:	6803      	ldr	r3, [r0, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4718      	bx	r3
    }
 8001c5e:	4618      	mov	r0, r3
 8001c60:	4770      	bx	lr
	...

08001c64 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001c64:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
 8001c68:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001c6a:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001c6c:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 8001c70:	781a      	ldrb	r2, [r3, #0]
 8001c72:	428c      	cmp	r4, r1
 8001c74:	d009      	beq.n	8001c8a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001c76:	b93a      	cbnz	r2, 8001c88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001c78:	490a      	ldr	r1, [pc, #40]	; (8001ca4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ca8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001c7c:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c7e:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001c80:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001c82:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c84:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001c86:	701a      	strb	r2, [r3, #0]
        }
    }
 8001c88:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001c8a:	2a00      	cmp	r2, #0
 8001c8c:	d0fc      	beq.n	8001c88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c8e:	4a06      	ldr	r2, [pc, #24]	; (8001ca8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001c90:	4904      	ldr	r1, [pc, #16]	; (8001ca4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c92:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001c94:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c96:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001c98:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	e7f3      	b.n	8001c86 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001c9e:	bf00      	nop
 8001ca0:	2002b898 	.word	0x2002b898
 8001ca4:	2002b896 	.word	0x2002b896
 8001ca8:	2002b894 	.word	0x2002b894

08001cac <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001cac:	4601      	mov	r1, r0
 8001cae:	b508      	push	{r3, lr}
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <IdleTaskHook+0x14>)
 8001cb2:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001cb4:	b101      	cbz	r1, 8001cb8 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001cb6:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001cb8:	f016 fb96 	bl	80183e8 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	bd08      	pop	{r3, pc}
 8001cc0:	2002b8a0 	.word	0x2002b8a0

08001cc4 <_GLOBAL__sub_I_instrumentation>:
          cc_in(0)
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <_GLOBAL__sub_I_instrumentation+0x10>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	4a02      	ldr	r2, [pc, #8]	; (8001cd8 <_GLOBAL__sub_I_instrumentation+0x14>)
 8001cce:	601a      	str	r2, [r3, #0]
}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20016ddc 	.word	0x20016ddc
 8001cd8:	0802b3e0 	.word	0x0802b3e0

08001cdc <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001cdc:	2101      	movs	r1, #1
 8001cde:	2200      	movs	r2, #0
{
 8001ce0:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001ce2:	4608      	mov	r0, r1
 8001ce4:	f005 fc6a 	bl	80075bc <osSemaphoreNew>
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001cea:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001cec:	b928      	cbnz	r0, 8001cfa <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001cf0:	2128      	movs	r1, #40	; 0x28
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001cf4:	480a      	ldr	r0, [pc, #40]	; (8001d20 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001cf6:	f028 f8ab 	bl	8029e50 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2104      	movs	r1, #4
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f005 fd22 	bl	8007748 <osMessageQueueNew>
 8001d04:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001d06:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001d08:	b918      	cbnz	r0, 8001d12 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001d0c:	212c      	movs	r1, #44	; 0x2c
 8001d0e:	4a03      	ldr	r2, [pc, #12]	; (8001d1c <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001d10:	e7f0      	b.n	8001cf4 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001d12:	bd08      	pop	{r3, pc}
 8001d14:	20016dec 	.word	0x20016dec
 8001d18:	0802b65c 	.word	0x0802b65c
 8001d1c:	0802b6a5 	.word	0x0802b6a5
 8001d20:	0802b6d4 	.word	0x0802b6d4
 8001d24:	20016de8 	.word	0x20016de8
 8001d28:	0802b73b 	.word	0x0802b73b

08001d2c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001d2c:	4b02      	ldr	r3, [pc, #8]	; (8001d38 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001d2e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	f005 bc98 	b.w	8007668 <osSemaphoreAcquire>
 8001d38:	20016dec 	.word	0x20016dec

08001d3c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001d3c:	4b01      	ldr	r3, [pc, #4]	; (8001d44 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	f005 bccc 	b.w	80076dc <osSemaphoreRelease>
 8001d44:	20016dec 	.word	0x20016dec

08001d48 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001d48:	4b02      	ldr	r3, [pc, #8]	; (8001d54 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	6818      	ldr	r0, [r3, #0]
 8001d4e:	f005 bc8b 	b.w	8007668 <osSemaphoreAcquire>
 8001d52:	bf00      	nop
 8001d54:	20016dec 	.word	0x20016dec

08001d58 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001d58:	f7ff bff0 	b.w	8001d3c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001d5c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	4803      	ldr	r0, [pc, #12]	; (8001d6c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001d60:	4903      	ldr	r1, [pc, #12]	; (8001d70 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001d62:	461a      	mov	r2, r3
 8001d64:	6800      	ldr	r0, [r0, #0]
 8001d66:	f005 bd35 	b.w	80077d4 <osMessageQueuePut>
 8001d6a:	bf00      	nop
 8001d6c:	20016de8 	.word	0x20016de8
 8001d70:	20000004 	.word	0x20000004

08001d74 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001d74:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001d76:	2300      	movs	r3, #0
 8001d78:	4c07      	ldr	r4, [pc, #28]	; (8001d98 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001d7a:	a901      	add	r1, sp, #4
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	6820      	ldr	r0, [r4, #0]
 8001d80:	f005 fd6a 	bl	8007858 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001d84:	f04f 33ff 	mov.w	r3, #4294967295
 8001d88:	2200      	movs	r2, #0
 8001d8a:	a901      	add	r1, sp, #4
 8001d8c:	6820      	ldr	r0, [r4, #0]
 8001d8e:	f005 fd63 	bl	8007858 <osMessageQueueGet>
}
 8001d92:	b002      	add	sp, #8
 8001d94:	bd10      	pop	{r4, pc}
 8001d96:	bf00      	nop
 8001d98:	20016de8 	.word	0x20016de8

08001d9c <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001d9c:	6803      	ldr	r3, [r0, #0]
 8001d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da0:	4718      	bx	r3

08001da2 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001da2:	2001      	movs	r0, #1
 8001da4:	4770      	bx	lr

08001da6 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001da6:	6803      	ldr	r3, [r0, #0]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	4718      	bx	r3

08001dac <_ZN8STM32DMA10initializeEv>:
}

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001dac:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <_ZN8STM32DMA10initializeEv+0x38>)
{
 8001dae:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001db2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001db6:	631a      	str	r2, [r3, #48]	; 0x30
 8001db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dba:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001dbe:	9201      	str	r2, [sp, #4]
 8001dc0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001dc2:	691a      	ldr	r2, [r3, #16]
 8001dc4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001dc8:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001dd0:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <_ZN8STM32DMA10initializeEv+0x3c>)
 8001dd4:	4a05      	ldr	r2, [pc, #20]	; (8001dec <_ZN8STM32DMA10initializeEv+0x40>)
 8001dd6:	611a      	str	r2, [r3, #16]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dd8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <_ZN8STM32DMA10initializeEv+0x44>)
 8001dde:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8001de0:	b002      	add	sp, #8
 8001de2:	4770      	bx	lr
 8001de4:	40023800 	.word	0x40023800
 8001de8:	2002bc5c 	.word	0x2002bc5c
 8001dec:	08001dfd 	.word	0x08001dfd
 8001df0:	e000e100 	.word	0xe000e100

08001df4 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001df4:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001df8:	4770      	bx	lr
	...

08001dfc <DMA2D_XferCpltCallback>:
        HAL::getInstance()->signalDMAInterrupt();
 8001dfc:	4b02      	ldr	r3, [pc, #8]	; (8001e08 <DMA2D_XferCpltCallback+0xc>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001e02:	6803      	ldr	r3, [r0, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	4718      	bx	r3
 8001e08:	2002b8a0 	.word	0x2002b8a0

08001e0c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8001e0c:	b508      	push	{r3, lr}
 8001e0e:	280b      	cmp	r0, #11
 8001e10:	d80b      	bhi.n	8001e2a <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8001e12:	e8df f000 	tbb	[pc, r0]
 8001e16:	0612      	.short	0x0612
 8001e18:	0a0a0a10 	.word	0x0a0a0a10
 8001e1c:	0808080a 	.word	0x0808080a
 8001e20:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001e22:	2001      	movs	r0, #1
}
 8001e24:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001e26:	2005      	movs	r0, #5
        break;
 8001e28:	e7fc      	b.n	8001e24 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001e2c:	2166      	movs	r1, #102	; 0x66
 8001e2e:	4a05      	ldr	r2, [pc, #20]	; (8001e44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001e30:	4805      	ldr	r0, [pc, #20]	; (8001e48 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8001e32:	f028 f80d 	bl	8029e50 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001e36:	2000      	movs	r0, #0
 8001e38:	e7f4      	b.n	8001e24 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001e3a:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001e3c:	e7f2      	b.n	8001e24 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001e3e:	bf00      	nop
 8001e40:	0802b77d 	.word	0x0802b77d
 8001e44:	0802b798 	.word	0x0802b798
 8001e48:	0802b7e2 	.word	0x0802b7e2

08001e4c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8001e4c:	b508      	push	{r3, lr}
 8001e4e:	280a      	cmp	r0, #10
 8001e50:	d809      	bhi.n	8001e66 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8001e52:	e8df f000 	tbb	[pc, r0]
 8001e56:	0610      	.short	0x0610
 8001e58:	0808080e 	.word	0x0808080e
 8001e5c:	06060608 	.word	0x06060608
 8001e60:	06          	.byte	0x06
 8001e61:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001e62:	2001      	movs	r0, #1
}
 8001e64:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8001e68:	2187      	movs	r1, #135	; 0x87
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8001e6c:	4805      	ldr	r0, [pc, #20]	; (8001e84 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8001e6e:	f027 ffef 	bl	8029e50 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001e72:	2000      	movs	r0, #0
 8001e74:	e7f6      	b.n	8001e64 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001e76:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001e78:	e7f4      	b.n	8001e64 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8001e7a:	bf00      	nop
 8001e7c:	0802b77d 	.word	0x0802b77d
 8001e80:	0802b847 	.word	0x0802b847
 8001e84:	0802b7e2 	.word	0x0802b7e2

08001e88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8001e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001e8c:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8001e90:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001e92:	4640      	mov	r0, r8
 8001e94:	f7ff ffba 	bl	8001e0c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001e98:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001e9a:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001e9c:	4638      	mov	r0, r7
 8001e9e:	f7ff ffb5 	bl	8001e0c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8001ea2:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001ea4:	4638      	mov	r0, r7
 8001ea6:	f7ff ffd1 	bl	8001e4c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001eaa:	8aa1      	ldrh	r1, [r4, #20]
 8001eac:	8b62      	ldrh	r2, [r4, #26]
 8001eae:	4b4b      	ldr	r3, [pc, #300]	; (8001fdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8001eb0:	1a52      	subs	r2, r2, r1
 8001eb2:	469e      	mov	lr, r3
 8001eb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001eb6:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8001eb8:	8b22      	ldrh	r2, [r4, #24]
 8001eba:	1a52      	subs	r2, r2, r1
 8001ebc:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001ebe:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001ec0:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001ec2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001ec6:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001ec8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001eca:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001ecc:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001ece:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8001ed0:	f8d4 c000 	ldr.w	ip, [r4]
 8001ed4:	f894 901c 	ldrb.w	r9, [r4, #28]
 8001ed8:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
 8001edc:	ea4f 6209 	mov.w	r2, r9, lsl #24
 8001ee0:	d030      	beq.n	8001f44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8001ee2:	d814      	bhi.n	8001f0e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x86>
 8001ee4:	f1bc 0f20 	cmp.w	ip, #32
 8001ee8:	ea45 0002 	orr.w	r0, r5, r2
 8001eec:	d069      	beq.n	8001fc2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 8001eee:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 8001ef2:	d066      	beq.n	8001fc2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 8001ef4:	f1bc 0f04 	cmp.w	ip, #4
 8001ef8:	d020      	beq.n	8001f3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001efa:	432a      	orrs	r2, r5
 8001efc:	4b37      	ldr	r3, [pc, #220]	; (8001fdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001efe:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f00:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f04:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001f06:	d148      	bne.n	8001f9a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x112>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001f08:	f240 2201 	movw	r2, #513	; 0x201
 8001f0c:	e014      	b.n	8001f38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb0>
    switch (blitOp.operation)
 8001f0e:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8001f12:	d007      	beq.n	8001f24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
 8001f14:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8001f18:	d1ef      	bne.n	8001efa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x72>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f1a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f1e:	f042 0209 	orr.w	r2, r2, #9
 8001f22:	e003      	b.n	8001f2c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f24:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f28:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f2c:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001f2e:	68e2      	ldr	r2, [r4, #12]
 8001f30:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001f32:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001f34:	6159      	str	r1, [r3, #20]
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001f36:	4a2a      	ldr	r2, [pc, #168]	; (8001fe0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001f38:	601a      	str	r2, [r3, #0]
        }
        break;
    }
}
 8001f3a:	e04d      	b.n	8001fd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f3c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8001f40:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001f42:	e7f6      	b.n	8001f32 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xaa>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8001f44:	68a0      	ldr	r0, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f46:	432a      	orrs	r2, r5
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001f48:	1d04      	adds	r4, r0, #4
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f4a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001f4e:	62dc      	str	r4, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001f50:	61da      	str	r2, [r3, #28]
            switch ((Bitmap::ClutFormat)palette->format)
 8001f52:	7802      	ldrb	r2, [r0, #0]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001f54:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001f56:	6159      	str	r1, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8001f58:	b142      	cbz	r2, 8001f6c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe4>
 8001f5a:	2a01      	cmp	r2, #1
 8001f5c:	d01f      	beq.n	8001f9e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x116>
                assert(0 && "Unsupported format");
 8001f5e:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8001f60:	f240 1111 	movw	r1, #273	; 0x111
 8001f64:	4a20      	ldr	r2, [pc, #128]	; (8001fe8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
 8001f66:	4821      	ldr	r0, [pc, #132]	; (8001fec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>)
 8001f68:	f027 ff72 	bl	8029e50 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001f6c:	8842      	ldrh	r2, [r0, #2]
            bool blend = true;
 8001f6e:	2401      	movs	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001f70:	69d9      	ldr	r1, [r3, #28]
 8001f72:	1e50      	subs	r0, r2, #1
 8001f74:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8001f78:	f022 0210 	bic.w	r2, r2, #16
 8001f7c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001f80:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8001f82:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8001f84:	69da      	ldr	r2, [r3, #28]
 8001f86:	f042 0220 	orr.w	r2, r2, #32
 8001f8a:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8001f8c:	69da      	ldr	r2, [r3, #28]
 8001f8e:	0692      	lsls	r2, r2, #26
 8001f90:	d4fc      	bmi.n	8001f8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8001f92:	2210      	movs	r2, #16
 8001f94:	609a      	str	r2, [r3, #8]
            if (blend)
 8001f96:	2c00      	cmp	r4, #0
 8001f98:	d1cd      	bne.n	8001f36 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8001f9a:	4a15      	ldr	r2, [pc, #84]	; (8001ff0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>)
 8001f9c:	e7cc      	b.n	8001f38 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb0>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001f9e:	8842      	ldrh	r2, [r0, #2]
                if (blitOp.alpha == 255)
 8001fa0:	f1b9 04ff 	subs.w	r4, r9, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001fa4:	69d9      	ldr	r1, [r3, #28]
 8001fa6:	f102 30ff 	add.w	r0, r2, #4294967295
                if (blitOp.alpha == 255)
 8001faa:	bf18      	it	ne
 8001fac:	2401      	movne	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001fae:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8001fb2:	f022 0210 	bic.w	r2, r2, #16
 8001fb6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001fba:	f042 0210 	orr.w	r2, r2, #16
 8001fbe:	61da      	str	r2, [r3, #28]
                break;
 8001fc0:	e7df      	b.n	8001f82 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001fc2:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001fc8:	f8ce 001c 	str.w	r0, [lr, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001fcc:	f8ce 6024 	str.w	r6, [lr, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001fd0:	f8ce 1014 	str.w	r1, [lr, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001fd4:	f8ce 3000 	str.w	r3, [lr]
}
 8001fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fdc:	4002b000 	.word	0x4002b000
 8001fe0:	00020201 	.word	0x00020201
 8001fe4:	0802b892 	.word	0x0802b892
 8001fe8:	0802b8ac 	.word	0x0802b8ac
 8001fec:	0802b7e2 	.word	0x0802b7e2
 8001ff0:	00010201 	.word	0x00010201

08001ff4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8001ff4:	b538      	push	{r3, r4, r5, lr}
 8001ff6:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001ff8:	7f88      	ldrb	r0, [r1, #30]
 8001ffa:	f7ff ff27 	bl	8001e4c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001ffe:	4b17      	ldr	r3, [pc, #92]	; (800205c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002000:	8aa5      	ldrh	r5, [r4, #20]
 8002002:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002004:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002006:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800200a:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800200c:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800200e:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002010:	6921      	ldr	r1, [r4, #16]
 8002012:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002014:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002016:	6825      	ldr	r5, [r4, #0]
 8002018:	2d08      	cmp	r5, #8
 800201a:	d10e      	bne.n	800203a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800201c:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800201e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002020:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, CM_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_BGPFCCR_ALPHA));
 8002022:	4a0f      	ldr	r2, [pc, #60]	; (8002060 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 8002024:	7f20      	ldrb	r0, [r4, #28]
 8002026:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800202a:	61da      	str	r2, [r3, #28]

        /* DMA2D FGCOLR register configuration -------------------------------------*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800202c:	68e2      	ldr	r2, [r4, #12]
 800202e:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002030:	4a0c      	ldr	r2, [pc, #48]	; (8002064 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002032:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002034:	60d9      	str	r1, [r3, #12]

        // set color
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002036:	601a      	str	r2, [r3, #0]
    }
}
 8002038:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 800203a:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800203c:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800203e:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8002040:	68e1      	ldr	r1, [r4, #12]
 8002042:	0a0a      	lsrs	r2, r1, #8
 8002044:	0948      	lsrs	r0, r1, #5
 8002046:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 800204a:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 800204e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8002052:	4302      	orrs	r2, r0
 8002054:	430a      	orrs	r2, r1
 8002056:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8002058:	4a03      	ldr	r2, [pc, #12]	; (8002068 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 800205a:	e7ec      	b.n	8002036 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 800205c:	4002b000 	.word	0x4002b000
 8002060:	00010009 	.word	0x00010009
 8002064:	00020201 	.word	0x00020201
 8002068:	00030201 	.word	0x00030201

0800206c <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002072:	6003      	str	r3, [r0, #0]
 8002074:	4b04      	ldr	r3, [pc, #16]	; (8002088 <_ZN8STM32DMAD1Ev+0x1c>)
 8002076:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800207a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800207e:	f3bf 8f6f 	isb	sy
}
 8002082:	4770      	bx	lr
 8002084:	0802b8f4 	.word	0x0802b8f4
 8002088:	e000e100 	.word	0xe000e100

0800208c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 800208c:	b510      	push	{r4, lr}
 800208e:	4604      	mov	r4, r0
}
 8002090:	f7ff ffec 	bl	800206c <_ZN8STM32DMAD1Ev>
 8002094:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 8002098:	4620      	mov	r0, r4
 800209a:	f027 feab 	bl	8029df4 <_ZdlPvj>
 800209e:	4620      	mov	r0, r4
 80020a0:	bd10      	pop	{r4, pc}
	...

080020a4 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 80020a4:	b570      	push	{r4, r5, r6, lr}
 80020a6:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80020a8:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <_ZN8STM32DMAC1Ev+0x30>)
 80020aa:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80020ac:	2600      	movs	r6, #0
 80020ae:	4625      	mov	r5, r4
 80020b0:	2260      	movs	r2, #96	; 0x60
 80020b2:	6060      	str	r0, [r4, #4]
 80020b4:	7226      	strb	r6, [r4, #8]
 80020b6:	7266      	strb	r6, [r4, #9]
 80020b8:	f845 3b20 	str.w	r3, [r5], #32
 80020bc:	4629      	mov	r1, r5
 80020be:	f016 fafb 	bl	80186b8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80020c2:	f504 6342 	add.w	r3, r4, #3104	; 0xc20
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 80020c6:	60ee      	str	r6, [r5, #12]
 80020c8:	3520      	adds	r5, #32
 80020ca:	42ab      	cmp	r3, r5
 80020cc:	d1fb      	bne.n	80020c6 <_ZN8STM32DMAC1Ev+0x22>
}
 80020ce:	4620      	mov	r0, r4
 80020d0:	bd70      	pop	{r4, r5, r6, pc}
 80020d2:	bf00      	nop
 80020d4:	0802b8f4 	.word	0x0802b8f4

080020d8 <_ZNK20SoftwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual void gotoFrame(uint32_t frameno);

    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 80020d8:	6940      	ldr	r0, [r0, #20]
 80020da:	4770      	bx	lr

080020dc <_ZN20SoftwareMJPEGDecoder12getLastErrorEv>:
    }

    AVIErrors getLastError()
    {
        return lastError;
    }
 80020dc:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
 80020e0:	4770      	bx	lr

080020e2 <_ZN20SoftwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool SoftwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 80020e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80020e4:	b923      	cbnz	r3, 80020f0 <_ZN20SoftwareMJPEGDecoder8hasVideoEv+0xe>
 80020e6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80020e8:	3800      	subs	r0, #0
 80020ea:	bf18      	it	ne
 80020ec:	2001      	movne	r0, #1
 80020ee:	4770      	bx	lr
 80020f0:	2001      	movs	r0, #1
}
 80020f2:	4770      	bx	lr

080020f4 <_ZN20SoftwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t SoftwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 80020f4:	6880      	ldr	r0, [r0, #8]
 80020f6:	4770      	bx	lr

080020f8 <_ZN20SoftwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void SoftwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 80020f8:	3004      	adds	r0, #4
{
 80020fa:	b510      	push	{r4, lr}
 80020fc:	460c      	mov	r4, r1
    *data = videoInfo;
 80020fe:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8002100:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if VIDEO_DECODE_FORMAT == RGB565 || VIDEO_DECODE_FORMAT == RGB888
#else
    data->frame_width = 0;
    data->frame_height = 0;
#endif
}
 8002104:	bd10      	pop	{r4, pc}

08002106 <_ZN20SoftwareMJPEGDecoderD1Ev>:
class SoftwareMJPEGDecoder : public MJPEGDecoder
 8002106:	4770      	bx	lr

08002108 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8002108:	b508      	push	{r3, lr}
    assert(0);
 800210a:	4a03      	ldr	r2, [pc, #12]	; (8002118 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 800210c:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8002110:	4b02      	ldr	r3, [pc, #8]	; (800211c <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 8002112:	4803      	ldr	r0, [pc, #12]	; (8002120 <_ZN20SoftwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 8002114:	f027 fe9c 	bl	8029e50 <__assert_func>
 8002118:	0802b93c 	.word	0x0802b93c
 800211c:	080315aa 	.word	0x080315aa
 8002120:	0802b997 	.word	0x0802b997

08002124 <_ZN20SoftwareMJPEGDecoderD0Ev>:
 8002124:	b510      	push	{r4, lr}
 8002126:	4604      	mov	r4, r0
 8002128:	2148      	movs	r1, #72	; 0x48
 800212a:	f027 fe63 	bl	8029df4 <_ZdlPvj>
 800212e:	4620      	mov	r0, r4
 8002130:	bd10      	pop	{r4, pc}
	...

08002134 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 8002134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002138:	461c      	mov	r4, r3
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 800213a:	6b43      	ldr	r3, [r0, #52]	; 0x34
void SoftwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
 800213c:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 8002140:	4605      	mov	r5, r0
 8002142:	460e      	mov	r6, r1
 8002144:	4617      	mov	r7, r2
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 8002146:	2b00      	cmp	r3, #0
 8002148:	d052      	beq.n	80021f0 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xbc>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 800214a:	2200      	movs	r2, #0
        cinfo.err = jpeg_std_error(&jerr);
 800214c:	a803      	add	r0, sp, #12
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 800214e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80021f8 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xc4>
        JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 8002152:	e9cd 3201 	strd	r3, r2, [sp, #4]
        cinfo.err = jpeg_std_error(&jerr);
 8002156:	f00d fd17 	bl	800fb88 <jpeg_std_error>
        jpeg_create_decompress(&cinfo);
 800215a:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800215e:	2150      	movs	r1, #80	; 0x50
        cinfo.err = jpeg_std_error(&jerr);
 8002160:	9024      	str	r0, [sp, #144]	; 0x90
        jpeg_create_decompress(&cinfo);
 8002162:	a824      	add	r0, sp, #144	; 0x90
 8002164:	f007 fc21 	bl	80099aa <jpeg_CreateDecompress>
        jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 8002168:	463a      	mov	r2, r7
 800216a:	4631      	mov	r1, r6
 800216c:	a824      	add	r0, sp, #144	; 0x90
 800216e:	f008 fbbb 	bl	800a8e8 <jpeg_mem_src>
        jpeg_read_header(&cinfo, TRUE);
 8002172:	2101      	movs	r1, #1
 8002174:	a824      	add	r0, sp, #144	; 0x90
 8002176:	f007 fd21 	bl	8009bbc <jpeg_read_header>
        cinfo.dct_method = JDCT_FLOAT;
 800217a:	2302      	movs	r3, #2
        jpeg_start_decompress(&cinfo);
 800217c:	a824      	add	r0, sp, #144	; 0x90
        cinfo.dct_method = JDCT_FLOAT;
 800217e:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
        jpeg_start_decompress(&cinfo);
 8002182:	f007 fdbf 	bl	8009d04 <jpeg_start_decompress>
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 8002186:	f8bd 6298 	ldrh.w	r6, [sp, #664]	; 0x298
 800218a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 800218c:	f8bd 729c 	ldrh.w	r7, [sp, #668]	; 0x29c
        const uint32_t width = MIN(bufferWidth, cinfo.image_width);
 8002190:	429e      	cmp	r6, r3
 8002192:	bf28      	it	cs
 8002194:	461e      	movcs	r6, r3
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 8002196:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8002198:	429f      	cmp	r7, r3
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 800219a:	eb06 0846 	add.w	r8, r6, r6, lsl #1
        const uint32_t height = MIN(bufferHeight, cinfo.output_height);
 800219e:	bf28      	it	cs
 80021a0:	461f      	movcs	r7, r3
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 80021a2:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
 80021a4:	eba3 0646 	sub.w	r6, r3, r6, lsl #1
        while (cinfo.output_scanline < height)
 80021a8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80021aa:	429f      	cmp	r7, r3
 80021ac:	d91a      	bls.n	80021e4 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb0>
            (void)jpeg_read_scanlines(&cinfo, lines, 1);
 80021ae:	2201      	movs	r2, #1
 80021b0:	a901      	add	r1, sp, #4
 80021b2:	a824      	add	r0, sp, #144	; 0x90
 80021b4:	f007 fdef 	bl	8009d96 <jpeg_read_scanlines>
            JPEG_RGB* RGB_matrix = (JPEG_RGB*)lineBuffer;
 80021b8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
            JPEG_RGB* const RGB_end = RGB_matrix + width;
 80021ba:	eb03 0008 	add.w	r0, r3, r8
            while (RGB_matrix < RGB_end)
 80021be:	4298      	cmp	r0, r3
 80021c0:	d90e      	bls.n	80021e0 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xac>
                const uint16_t pix = ((RGB_matrix->R & 0xF8) << 8) | ((RGB_matrix->G & 0xFC) << 3) | ((RGB_matrix->B & 0xF8) >> 3);
 80021c2:	7859      	ldrb	r1, [r3, #1]
 80021c4:	789a      	ldrb	r2, [r3, #2]
 80021c6:	00c9      	lsls	r1, r1, #3
 80021c8:	ea09 2202 	and.w	r2, r9, r2, lsl #8
 80021cc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80021d0:	430a      	orrs	r2, r1
 80021d2:	f813 1b03 	ldrb.w	r1, [r3], #3
 80021d6:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
                *lineptr++ = pix;
 80021da:	f824 2b02 	strh.w	r2, [r4], #2
            while (RGB_matrix < RGB_end)
 80021de:	e7ee      	b.n	80021be <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x8a>
            lineptr = (uint16_t*)((uint8_t*)lineptr + bufferStride - width * 2); //move to next line
 80021e0:	4434      	add	r4, r6
        while (cinfo.output_scanline < height)
 80021e2:	e7e1      	b.n	80021a8 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x74>
        jpeg_finish_decompress(&cinfo);
 80021e4:	a824      	add	r0, sp, #144	; 0x90
 80021e6:	f007 fd0b 	bl	8009c00 <jpeg_finish_decompress>
        jpeg_destroy_decompress(&cinfo);
 80021ea:	a824      	add	r0, sp, #144	; 0x90
 80021ec:	f007 fc2a 	bl	8009a44 <jpeg_destroy_decompress>
}
 80021f0:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 80021f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80021f8:	fffff800 	.word	0xfffff800

080021fc <_ZN20SoftwareMJPEGDecoderC1EPh>:
      reader(0), lineBuffer(buffer), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80021fc:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <_ZN20SoftwareMJPEGDecoderC1EPh+0x2c>)
 80021fe:	6002      	str	r2, [r0, #0]
 8002200:	2200      	movs	r2, #0
 8002202:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8002206:	e9c0 2207 	strd	r2, r2, [r0, #28]
 800220a:	e9c0 2209 	strd	r2, r2, [r0, #36]	; 0x24
 800220e:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
 8002212:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 8002216:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 800221a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    videoInfo.frame_width = 0;
 800221e:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 8002222:	e9c0 2201 	strd	r2, r2, [r0, #4]
}
 8002226:	4770      	bx	lr
 8002228:	0802bc90 	.word	0x0802bc90

0800222c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>:
{
 800222c:	b420      	push	{r5}
 800222e:	460d      	mov	r5, r1
 8002230:	4611      	mov	r1, r2
 8002232:	461a      	mov	r2, r3
    if (reader != 0)
 8002234:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002236:	b13b      	cbz	r3, 8002248 <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8002238:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800223a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800223c:	1aed      	subs	r5, r5, r3
        src = (const char*)movieData + offset;
 800223e:	4428      	add	r0, r5
}
 8002240:	f85d 5b04 	ldr.w	r5, [sp], #4
    return strncmp(src, str, num);
 8002244:	f028 baa8 	b.w	802a798 <strncmp>
        src = (const char*)movieData + offset;
 8002248:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800224a:	e7f8      	b.n	800223e <_ZN20SoftwareMJPEGDecoder7compareEmPKcm+0x12>

0800224c <_ZN20SoftwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 800224c:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 800224e:	b510      	push	{r4, lr}
    if (reader != 0)
 8002250:	b173      	cbz	r3, 8002270 <_ZN20SoftwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 8002252:	6c03      	ldr	r3, [r0, #64]	; 0x40
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002254:	6b82      	ldr	r2, [r0, #56]	; 0x38
        const uint32_t index = offset - aviBufferStartOffset;
 8002256:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002258:	1853      	adds	r3, r2, r1
 800225a:	5c52      	ldrb	r2, [r2, r1]
 800225c:	7898      	ldrb	r0, [r3, #2]
 800225e:	785c      	ldrb	r4, [r3, #1]
 8002260:	0400      	lsls	r0, r0, #16
 8002262:	78db      	ldrb	r3, [r3, #3]
 8002264:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8002268:	4310      	orrs	r0, r2
 800226a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 800226e:	bd10      	pop	{r4, pc}
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 8002270:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002272:	5858      	ldr	r0, [r3, r1]
 8002274:	e7fb      	b.n	800226e <_ZN20SoftwareMJPEGDecoder6getU32Em+0x22>

08002276 <_ZN20SoftwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 8002276:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002278:	b143      	cbz	r3, 800228c <_ZN20SoftwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 800227a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800227c:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 800227e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002280:	185a      	adds	r2, r3, r1
 8002282:	5c58      	ldrb	r0, [r3, r1]
 8002284:	7852      	ldrb	r2, [r2, #1]
 8002286:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800228a:	4770      	bx	lr
        return d[0] | (d[1] << 8);
 800228c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800228e:	5a58      	ldrh	r0, [r3, r1]
}
 8002290:	4770      	bx	lr
	...

08002294 <_ZN20SoftwareMJPEGDecoder8readDataEmm>:
{
 8002294:	b570      	push	{r4, r5, r6, lr}
 8002296:	4604      	mov	r4, r0
    if (reader != 0)
 8002298:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
 800229a:	460d      	mov	r5, r1
 800229c:	4616      	mov	r6, r2
    if (reader != 0)
 800229e:	b1d8      	cbz	r0, 80022d8 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 80022a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d208      	bcs.n	80022b8 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80022a6:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 80022a8:	4a0d      	ldr	r2, [pc, #52]	; (80022e0 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x4c>)
 80022aa:	2153      	movs	r1, #83	; 0x53
 80022ac:	480d      	ldr	r0, [pc, #52]	; (80022e4 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80022ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            assert(!"Buffer to small");
 80022b2:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x54>)
 80022b4:	f027 fdcc 	bl	8029e50 <__assert_func>
        reader->seek(offset);
 80022b8:	6803      	ldr	r3, [r0, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 80022be:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80022c0:	4632      	mov	r2, r6
 80022c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80022c4:	6803      	ldr	r3, [r0, #0]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	4798      	blx	r3
 80022ca:	b910      	cbnz	r0, 80022d2 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 80022cc:	230d      	movs	r3, #13
 80022ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return aviBuffer;
 80022d2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        aviBufferStartOffset = offset;
 80022d4:	6425      	str	r5, [r4, #64]	; 0x40
}
 80022d6:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 80022d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80022da:	4408      	add	r0, r1
 80022dc:	e7fb      	b.n	80022d6 <_ZN20SoftwareMJPEGDecoder8readDataEmm+0x42>
 80022de:	bf00      	nop
 80022e0:	0802ba1b 	.word	0x0802ba1b
 80022e4:	0802b997 	.word	0x0802b997
 80022e8:	0802ba08 	.word	0x0802ba08

080022ec <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv>:
{
 80022ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 80022f0:	6943      	ldr	r3, [r0, #20]
{
 80022f2:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 80022f4:	b92b      	cbnz	r3, 8002302 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x16>
 80022f6:	4b22      	ldr	r3, [pc, #136]	; (8002380 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 80022f8:	2198      	movs	r1, #152	; 0x98
 80022fa:	4a22      	ldr	r2, [pc, #136]	; (8002384 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80022fc:	4822      	ldr	r0, [pc, #136]	; (8002388 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80022fe:	f027 fda7 	bl	8029e50 <__assert_func>
    readData(currentMovieOffset, 8);
 8002302:	2208      	movs	r2, #8
 8002304:	6981      	ldr	r1, [r0, #24]
 8002306:	f7ff ffc5 	bl	8002294 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800230a:	69a1      	ldr	r1, [r4, #24]
 800230c:	4620      	mov	r0, r4
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 800230e:	f243 0730 	movw	r7, #12336	; 0x3030
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002312:	3104      	adds	r1, #4
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002314:	f246 3664 	movw	r6, #25444	; 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002318:	f7ff ff98 	bl	800224c <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800231c:	4605      	mov	r5, r0
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 800231e:	69a1      	ldr	r1, [r4, #24]
 8002320:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002322:	440d      	add	r5, r1
 8002324:	f105 0208 	add.w	r2, r5, #8
 8002328:	429a      	cmp	r2, r3
 800232a:	d222      	bcs.n	8002372 <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x86>
        frameNumber++;
 800232c:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800232e:	3509      	adds	r5, #9
        readData(currentMovieOffset, 8);
 8002330:	2208      	movs	r2, #8
 8002332:	4620      	mov	r0, r4
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8002334:	f025 0101 	bic.w	r1, r5, #1
        frameNumber++;
 8002338:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 800233a:	61a1      	str	r1, [r4, #24]
        frameNumber++;
 800233c:	6163      	str	r3, [r4, #20]
        readData(currentMovieOffset, 8);
 800233e:	f7ff ffa9 	bl	8002294 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo = getU16(currentMovieOffset);
 8002342:	f8d4 8018 	ldr.w	r8, [r4, #24]
 8002346:	4620      	mov	r0, r4
 8002348:	4641      	mov	r1, r8
 800234a:	f7ff ff94 	bl	8002276 <_ZN20SoftwareMJPEGDecoder6getU16Em>
 800234e:	4681      	mov	r9, r0
        chunkSize = getU32(currentMovieOffset + 4);
 8002350:	f108 0104 	add.w	r1, r8, #4
 8002354:	4620      	mov	r0, r4
 8002356:	f7ff ff79 	bl	800224c <_ZN20SoftwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 800235a:	45b9      	cmp	r9, r7
        chunkSize = getU32(currentMovieOffset + 4);
 800235c:	4605      	mov	r5, r0
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 800235e:	d1de      	bne.n	800231e <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002360:	f108 0102 	add.w	r1, r8, #2
 8002364:	4620      	mov	r0, r4
 8002366:	f7ff ff86 	bl	8002276 <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 800236a:	42b0      	cmp	r0, r6
 800236c:	d1d7      	bne.n	800231e <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x32>
            return true;
 800236e:	2001      	movs	r0, #1
 8002370:	e004      	b.n	800237c <_ZN20SoftwareMJPEGDecoder13gotoNextFrameEv+0x90>
    frameNumber = 1;
 8002372:	2301      	movs	r3, #1
    return false;
 8002374:	2000      	movs	r0, #0
    frameNumber = 1;
 8002376:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; //start over
 8002378:	6a23      	ldr	r3, [r4, #32]
 800237a:	61a3      	str	r3, [r4, #24]
}
 800237c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002380:	0802ba5d 	.word	0x0802ba5d
 8002384:	0802baa6 	.word	0x0802baa6
 8002388:	0802b997 	.word	0x0802b997

0800238c <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 800238c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002390:	4604      	mov	r4, r0
 8002392:	f5ad 7d1f 	sub.w	sp, sp, #636	; 0x27c
 8002396:	468a      	mov	sl, r1
 8002398:	4617      	mov	r7, r2
    readData(currentMovieOffset, 8);
 800239a:	6981      	ldr	r1, [r0, #24]
 800239c:	2208      	movs	r2, #8
{
 800239e:	4698      	mov	r8, r3
    readData(currentMovieOffset, 8);
 80023a0:	f7ff ff78 	bl	8002294 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 80023a4:	69a6      	ldr	r6, [r4, #24]
 80023a6:	4620      	mov	r0, r4
 80023a8:	1d31      	adds	r1, r6, #4
 80023aa:	f7ff ff4f 	bl	800224c <_ZN20SoftwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80023ae:	f106 0108 	add.w	r1, r6, #8
 80023b2:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 80023b4:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80023b6:	4620      	mov	r0, r4
 80023b8:	f7ff ff6c 	bl	8002294 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 80023bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80023be:	4606      	mov	r6, r0
    assert(lineBuffer && "LineBuffer must be assigned prior to decoding directly to framebuffer");
 80023c0:	b933      	cbnz	r3, 80023d0 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x44>
 80023c2:	4b3c      	ldr	r3, [pc, #240]	; (80024b4 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x128>)
 80023c4:	f240 118d 	movw	r1, #397	; 0x18d
 80023c8:	4a3b      	ldr	r2, [pc, #236]	; (80024b8 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x12c>)
 80023ca:	483c      	ldr	r0, [pc, #240]	; (80024bc <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x130>)
 80023cc:	f027 fd40 	bl	8029e50 <__assert_func>
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80023d0:	2200      	movs	r2, #0
    cinfo.err = jpeg_std_error(&jerr);
 80023d2:	a803      	add	r0, sp, #12
    JSAMPROW lines[2] = { lineBuffer, 0 }; /* Output row buffer */
 80023d4:	e9cd 3201 	strd	r3, r2, [sp, #4]
    cinfo.err = jpeg_std_error(&jerr);
 80023d8:	f00d fbd6 	bl	800fb88 <jpeg_std_error>
    jpeg_create_decompress(&cinfo);
 80023dc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80023e0:	2150      	movs	r1, #80	; 0x50
    cinfo.err = jpeg_std_error(&jerr);
 80023e2:	9024      	str	r0, [sp, #144]	; 0x90
    jpeg_create_decompress(&cinfo);
 80023e4:	a824      	add	r0, sp, #144	; 0x90
 80023e6:	f007 fae0 	bl	80099aa <jpeg_CreateDecompress>
    jpeg_mem_src(&cinfo, const_cast<uint8_t*>(mjpgdata), length);
 80023ea:	462a      	mov	r2, r5
 80023ec:	4631      	mov	r1, r6
 80023ee:	a824      	add	r0, sp, #144	; 0x90
 80023f0:	f008 fa7a 	bl	800a8e8 <jpeg_mem_src>
    jpeg_read_header(&cinfo, TRUE);
 80023f4:	2101      	movs	r1, #1
 80023f6:	a824      	add	r0, sp, #144	; 0x90
 80023f8:	f007 fbe0 	bl	8009bbc <jpeg_read_header>
    cinfo.dct_method = JDCT_FLOAT;
 80023fc:	2302      	movs	r3, #2
    jpeg_start_decompress(&cinfo);
 80023fe:	a824      	add	r0, sp, #144	; 0x90
    cinfo.dct_method = JDCT_FLOAT;
 8002400:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
    jpeg_start_decompress(&cinfo);
 8002404:	f007 fc7e 	bl	8009d04 <jpeg_start_decompress>
    const uint32_t startY = area.y;
 8002408:	f9ba 5002 	ldrsh.w	r5, [sl, #2]
    while (cinfo.output_scanline < startY)
 800240c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800240e:	42ab      	cmp	r3, r5
 8002410:	d205      	bcs.n	800241e <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x92>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 8002412:	2201      	movs	r2, #1
 8002414:	a901      	add	r1, sp, #4
 8002416:	a824      	add	r0, sp, #144	; 0x90
 8002418:	f007 fcbd 	bl	8009d96 <jpeg_read_scanlines>
    while (cinfo.output_scanline < startY)
 800241c:	e7f6      	b.n	800240c <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>
    const uint32_t startX = area.x;
 800241e:	f9ba 9000 	ldrsh.w	r9, [sl]
     *
     * @return x coordinate of the right edge (calculated as "x + width").
     */
    FORCE_INLINE_FUNCTION int16_t right() const
    {
        return x + width;
 8002422:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8002426:	f8ba 6004 	ldrh.w	r6, [sl, #4]
 800242a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    lineptr += framebuffer_width * startY;
 800242c:	fb08 7705 	mla	r7, r8, r5, r7
 8002430:	444e      	add	r6, r9
     *
     * @return y coordinate of the bottom edge (calculated as "y + height").
     */
    FORCE_INLINE_FUNCTION int16_t bottom() const
    {
        return y + height;
 8002432:	f8ba 5002 	ldrh.w	r5, [sl, #2]
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 8002436:	f8df b088 	ldr.w	fp, [pc, #136]	; 80024c0 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x134>
    const uint32_t endX = MIN((uint32_t)area.right(), cinfo.image_width);
 800243a:	b236      	sxth	r6, r6
 800243c:	429e      	cmp	r6, r3
 800243e:	bf28      	it	cs
 8002440:	461e      	movcs	r6, r3
 8002442:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8002446:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 800244a:	441d      	add	r5, r3
 800244c:	9b41      	ldr	r3, [sp, #260]	; 0x104
    const uint32_t endY = MIN((uint32_t)area.bottom(), cinfo.output_height);
 800244e:	b22d      	sxth	r5, r5
 8002450:	429d      	cmp	r5, r3
 8002452:	bf28      	it	cs
 8002454:	461d      	movcs	r5, r3
    while (cinfo.output_scanline < endY)
 8002456:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002458:	42ab      	cmp	r3, r5
 800245a:	d21f      	bcs.n	800249c <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x110>
        (void)jpeg_read_scanlines(&cinfo, lines, 1);
 800245c:	2201      	movs	r2, #1
 800245e:	a901      	add	r1, sp, #4
 8002460:	a824      	add	r0, sp, #144	; 0x90
 8002462:	f007 fc98 	bl	8009d96 <jpeg_read_scanlines>
        for (uint32_t counter = startX; counter < endX; counter++)
 8002466:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002468:	464a      	mov	r2, r9
 800246a:	4453      	add	r3, sl
 800246c:	42b2      	cmp	r2, r6
 800246e:	f103 0303 	add.w	r3, r3, #3
 8002472:	d211      	bcs.n	8002498 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10c>
            const uint16_t pix = ((RGB_matrix[counter].R & 0xF8) << 8) | ((RGB_matrix[counter].G & 0xFC) << 3) | ((RGB_matrix[counter].B & 0xF8) >> 3);
 8002474:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 8002478:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800247c:	00c0      	lsls	r0, r0, #3
 800247e:	ea0b 2101 	and.w	r1, fp, r1, lsl #8
 8002482:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8002486:	4301      	orrs	r1, r0
 8002488:	f813 0c03 	ldrb.w	r0, [r3, #-3]
 800248c:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
            *(lineptr + counter) = pix;
 8002490:	f827 1012 	strh.w	r1, [r7, r2, lsl #1]
        for (uint32_t counter = startX; counter < endX; counter++)
 8002494:	3201      	adds	r2, #1
 8002496:	e7e9      	b.n	800246c <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xe0>
        lineptr += framebuffer_width; //move to next line
 8002498:	4447      	add	r7, r8
    while (cinfo.output_scanline < endY)
 800249a:	e7dc      	b.n	8002456 <_ZN20SoftwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xca>
    jpeg_finish_decompress(&cinfo);
 800249c:	a824      	add	r0, sp, #144	; 0x90
 800249e:	f007 fbaf 	bl	8009c00 <jpeg_finish_decompress>
    jpeg_destroy_decompress(&cinfo);
 80024a2:	a824      	add	r0, sp, #144	; 0x90
 80024a4:	f007 face 	bl	8009a44 <jpeg_destroy_decompress>
}
 80024a8:	2001      	movs	r0, #1
 80024aa:	f50d 7d1f 	add.w	sp, sp, #636	; 0x27c
 80024ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024b2:	bf00      	nop
 80024b4:	0802bad9 	.word	0x0802bad9
 80024b8:	0802bb2f 	.word	0x0802bb2f
 80024bc:	0802b997 	.word	0x0802b997
 80024c0:	fffff800 	.word	0xfffff800

080024c4 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 80024c4:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 80024c6:	6803      	ldr	r3, [r0, #0]
 80024c8:	bf38      	it	cc
 80024ca:	2101      	movcc	r1, #1
 80024cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80024ce:	b570      	push	{r4, r5, r6, lr}
 80024d0:	460d      	mov	r5, r1
 80024d2:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 80024d4:	4798      	blx	r3
 80024d6:	42a8      	cmp	r0, r5
 80024d8:	d204      	bcs.n	80024e4 <_ZN20SoftwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	4620      	mov	r0, r4
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	4798      	blx	r3
 80024e2:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80024e4:	1e6b      	subs	r3, r5, #1
 80024e6:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 80024e8:	2210      	movs	r2, #16
 80024ea:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80024ec:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 80024f0:	f106 0108 	add.w	r1, r6, #8
 80024f4:	f7ff fece 	bl	8002294 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80024f8:	f106 0110 	add.w	r1, r6, #16
 80024fc:	4620      	mov	r0, r4
 80024fe:	f7ff fea5 	bl	800224c <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002502:	6a23      	ldr	r3, [r4, #32]
 8002504:	3b04      	subs	r3, #4
 8002506:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 8002508:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 800250c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002510 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>:
{
 8002510:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    currentMovieOffset = 0;
 8002514:	2100      	movs	r1, #0
{
 8002516:	4604      	mov	r4, r0
    readData(0, 72);
 8002518:	2248      	movs	r2, #72	; 0x48
    currentMovieOffset = 0;
 800251a:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 800251c:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
    readData(0, 72);
 8002520:	f7ff feb8 	bl	8002294 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 8002524:	69a7      	ldr	r7, [r4, #24]
 8002526:	2304      	movs	r3, #4
 8002528:	4a62      	ldr	r2, [pc, #392]	; (80026b4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a4>)
 800252a:	4639      	mov	r1, r7
 800252c:	4620      	mov	r0, r4
 800252e:	f7ff fe7d 	bl	800222c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002532:	b140      	cbz	r0, 8002546 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x36>
        lastError = AVI_ERROR_NOT_RIFF;
 8002534:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 8002536:	4a60      	ldr	r2, [pc, #384]	; (80026b8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 8002538:	21e0      	movs	r1, #224	; 0xe0
        lastError = AVI_ERROR_NOT_RIFF;
 800253a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"RIFF header not found");
 800253e:	4b5f      	ldr	r3, [pc, #380]	; (80026bc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
        assert(!"AVI header not found");
 8002540:	485f      	ldr	r0, [pc, #380]	; (80026c0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
 8002542:	f027 fc85 	bl	8029e50 <__assert_func>
    currentMovieOffset += 8;
 8002546:	f107 0108 	add.w	r1, r7, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 800254a:	2304      	movs	r3, #4
 800254c:	4a5d      	ldr	r2, [pc, #372]	; (80026c4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 800254e:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 8002550:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8002552:	f7ff fe6b 	bl	800222c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002556:	b130      	cbz	r0, 8002566 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x56>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002558:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 800255a:	4a57      	ldr	r2, [pc, #348]	; (80026b8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 800255c:	21e8      	movs	r1, #232	; 0xe8
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800255e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI header not found");
 8002562:	4b59      	ldr	r3, [pc, #356]	; (80026c8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8002564:	e7ec      	b.n	8002540 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    currentMovieOffset += 4;
 8002566:	f107 010c 	add.w	r1, r7, #12
    if (compare(currentMovieOffset, "LIST", 4))
 800256a:	2304      	movs	r3, #4
 800256c:	4a57      	ldr	r2, [pc, #348]	; (80026cc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 800256e:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8002570:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 8002572:	f7ff fe5b 	bl	800222c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002576:	4606      	mov	r6, r0
 8002578:	b130      	cbz	r0, 8002588 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x78>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800257a:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 800257c:	4a4e      	ldr	r2, [pc, #312]	; (80026b8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 800257e:	21ef      	movs	r1, #239	; 0xef
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002580:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        assert(!"AVI LIST not found");
 8002584:	4b52      	ldr	r3, [pc, #328]	; (80026d0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 8002586:	e7db      	b.n	8002540 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002588:	f107 0110 	add.w	r1, r7, #16
 800258c:	4620      	mov	r0, r4
 800258e:	f7ff fe5d 	bl	800224c <_ZN20SoftwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 8002592:	4605      	mov	r5, r0
 8002594:	b918      	cbnz	r0, 800259e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x8e>
 8002596:	4b4f      	ldr	r3, [pc, #316]	; (80026d4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002598:	21f5      	movs	r1, #245	; 0xf5
 800259a:	4a47      	ldr	r2, [pc, #284]	; (80026b8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 800259c:	e7d0      	b.n	8002540 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x30>
    uint32_t offset = currentMovieOffset + 8;
 800259e:	f107 0814 	add.w	r8, r7, #20
    if (compare(offset, "hdrl", 4))
 80025a2:	2304      	movs	r3, #4
 80025a4:	4a4c      	ldr	r2, [pc, #304]	; (80026d8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 80025a6:	4620      	mov	r0, r4
 80025a8:	4641      	mov	r1, r8
 80025aa:	f7ff fe3f 	bl	800222c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80025ae:	2800      	cmp	r0, #0
 80025b0:	d04b      	beq.n	800264a <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80025b2:	2306      	movs	r3, #6
 80025b4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    if (compare(offset, "avih", 4))
 80025b8:	2304      	movs	r3, #4
 80025ba:	4a48      	ldr	r2, [pc, #288]	; (80026dc <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 80025bc:	f107 0118 	add.w	r1, r7, #24
 80025c0:	4620      	mov	r0, r4
 80025c2:	f7ff fe33 	bl	800222c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80025c6:	2800      	cmp	r0, #0
 80025c8:	d041      	beq.n	800264e <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 80025ca:	2307      	movs	r3, #7
 80025cc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 80025d0:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80025d2:	4f43      	ldr	r7, [pc, #268]	; (80026e0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
    readData(listOffset, 12);
 80025d4:	220c      	movs	r2, #12
 80025d6:	4620      	mov	r0, r4
 80025d8:	4629      	mov	r1, r5
 80025da:	f7ff fe5b 	bl	8002294 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80025de:	f105 0608 	add.w	r6, r5, #8
 80025e2:	2304      	movs	r3, #4
 80025e4:	463a      	mov	r2, r7
 80025e6:	4620      	mov	r0, r4
 80025e8:	4631      	mov	r1, r6
 80025ea:	f7ff fe1f 	bl	800222c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 80025ee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80025f2:	2800      	cmp	r0, #0
 80025f4:	d04a      	beq.n	800268c <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x17c>
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d14a      	bne.n	8002690 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x180>
 80025fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025fc:	1d29      	adds	r1, r5, #4
 80025fe:	42ab      	cmp	r3, r5
 8002600:	d84a      	bhi.n	8002698 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x188>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8002602:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002606:	1d29      	adds	r1, r5, #4
 8002608:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 800260a:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800260c:	9101      	str	r1, [sp, #4]
 800260e:	f7ff fe1d 	bl	800224c <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002612:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002614:	9901      	ldr	r1, [sp, #4]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002616:	6260      	str	r0, [r4, #36]	; 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002618:	4620      	mov	r0, r4
 800261a:	f7ff fe17 	bl	800224c <_ZN20SoftwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 800261e:	4406      	add	r6, r0
    readData(listOffset, 4);
 8002620:	2204      	movs	r2, #4
 8002622:	4620      	mov	r0, r4
 8002624:	4631      	mov	r1, r6
 8002626:	f7ff fe35 	bl	8002294 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 800262a:	2304      	movs	r3, #4
 800262c:	4a2d      	ldr	r2, [pc, #180]	; (80026e4 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
 800262e:	4631      	mov	r1, r6
 8002630:	4620      	mov	r0, r4
 8002632:	f7ff fdfb 	bl	800222c <_ZN20SoftwareMJPEGDecoder7compareEmPKcm>
 8002636:	2800      	cmp	r0, #0
 8002638:	d139      	bne.n	80026ae <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x19e>
    frameNumber = 1; //next frame number is 1
 800263a:	2301      	movs	r3, #1
        indexOffset = listOffset;
 800263c:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; //next frame number is 1
 800263e:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 8002640:	69a3      	ldr	r3, [r4, #24]
 8002642:	6223      	str	r3, [r4, #32]
}
 8002644:	b002      	add	sp, #8
 8002646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 800264a:	2601      	movs	r6, #1
 800264c:	e7b4      	b.n	80025b8 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xa8>
    if (foundFrame)
 800264e:	2e00      	cmp	r6, #0
 8002650:	d0be      	beq.n	80025d0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc0>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002652:	f107 0120 	add.w	r1, r7, #32
 8002656:	4620      	mov	r0, r4
 8002658:	f7ff fdf8 	bl	800224c <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800265c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 8002660:	f107 0130 	add.w	r1, r7, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002664:	fbb0 f0f3 	udiv	r0, r0, r3
 8002668:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 800266a:	4620      	mov	r0, r4
 800266c:	f7ff fdee 	bl	800224c <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002670:	f107 0140 	add.w	r1, r7, #64	; 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8002674:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8002676:	4620      	mov	r0, r4
 8002678:	f7ff fde8 	bl	800224c <_ZN20SoftwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 800267c:	f107 0144 	add.w	r1, r7, #68	; 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8002680:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8002682:	4620      	mov	r0, r4
 8002684:	f7ff fde2 	bl	800224c <_ZN20SoftwareMJPEGDecoder6getU32Em>
 8002688:	6120      	str	r0, [r4, #16]
 800268a:	e7a1      	b.n	80025d0 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xc0>
    if (lastError != AVI_NO_ERROR)
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0b8      	beq.n	8002602 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xf2>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002690:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002692:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
 8002696:	e7d5      	b.n	8002644 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x134>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002698:	4620      	mov	r0, r4
 800269a:	f7ff fdd7 	bl	800224c <_ZN20SoftwareMJPEGDecoder6getU32Em>
 800269e:	3008      	adds	r0, #8
        readData(listOffset, 12);
 80026a0:	220c      	movs	r2, #12
        listOffset += listSize;
 80026a2:	4405      	add	r5, r0
        readData(listOffset, 12);
 80026a4:	4620      	mov	r0, r4
 80026a6:	4629      	mov	r1, r5
 80026a8:	f7ff fdf4 	bl	8002294 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80026ac:	e797      	b.n	80025de <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0xce>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80026ae:	230b      	movs	r3, #11
 80026b0:	e7ef      	b.n	8002692 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv+0x182>
 80026b2:	bf00      	nop
 80026b4:	0802bb89 	.word	0x0802bb89
 80026b8:	0802bba7 	.word	0x0802bba7
 80026bc:	0802bb8e 	.word	0x0802bb8e
 80026c0:	0802b997 	.word	0x0802b997
 80026c4:	0802bbd4 	.word	0x0802bbd4
 80026c8:	0802bbd9 	.word	0x0802bbd9
 80026cc:	0802bbf1 	.word	0x0802bbf1
 80026d0:	0802bbf6 	.word	0x0802bbf6
 80026d4:	0802bc0c 	.word	0x0802bc0c
 80026d8:	0802bc18 	.word	0x0802bc18
 80026dc:	0802bc1d 	.word	0x0802bc1d
 80026e0:	0802bc22 	.word	0x0802bc22
 80026e4:	0802bc27 	.word	0x0802bc27

080026e8 <_ZN20SoftwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 80026e8:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
 80026ec:	2200      	movs	r2, #0
 80026ee:	6302      	str	r2, [r0, #48]	; 0x30
    readVideoHeader();
 80026f0:	f7ff bf0e 	b.w	8002510 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

080026f4 <_ZN20SoftwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 80026f4:	b510      	push	{r4, lr}
    movieData = 0;
 80026f6:	2300      	movs	r3, #0
{
 80026f8:	4604      	mov	r4, r0
 80026fa:	4608      	mov	r0, r1
    movieData = 0;
 80026fc:	62e3      	str	r3, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
 80026fe:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8002700:	6321      	str	r1, [r4, #48]	; 0x30
    movieLength = reader.getDataLength();
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	4798      	blx	r3
 8002706:	62a0      	str	r0, [r4, #40]	; 0x28
    readVideoHeader();
 8002708:	4620      	mov	r0, r4
}
 800270a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 800270e:	f7ff beff 	b.w	8002510 <_ZN20SoftwareMJPEGDecoder15readVideoHeaderEv>

08002712 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8002712:	b470      	push	{r4, r5, r6}
 8002714:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 8002718:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    if (length == 0)
 800271c:	b12a      	cbz	r2, 800272a <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
    if (outputBuffer && lineBuffer) //only decode if buffers are assigned.
 800271e:	b123      	cbz	r3, 800272a <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x18>
 8002720:	e9cd 5603 	strd	r5, r6, [sp, #12]
}
 8002724:	bc70      	pop	{r4, r5, r6}
 8002726:	f7ff bd05 	b.w	8002134 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
 800272a:	bc70      	pop	{r4, r5, r6}
 800272c:	4770      	bx	lr
	...

08002730 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8002730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002734:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 8002736:	6943      	ldr	r3, [r0, #20]
{
 8002738:	4604      	mov	r4, r0
 800273a:	460f      	mov	r7, r1
 800273c:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "SoftwareMJPEGDecoder decoding without frame data!");
 800273e:	b92b      	cbnz	r3, 800274c <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x1c>
 8002740:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 8002742:	2165      	movs	r1, #101	; 0x65
 8002744:	4a2a      	ldr	r2, [pc, #168]	; (80027f0 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8002746:	482b      	ldr	r0, [pc, #172]	; (80027f4 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>)
 8002748:	f027 fb82 	bl	8029e50 <__assert_func>
    readData(currentMovieOffset, 8);
 800274c:	2208      	movs	r2, #8
 800274e:	6981      	ldr	r1, [r0, #24]
 8002750:	f7ff fda0 	bl	8002294 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo = getU16(currentMovieOffset);
 8002754:	69a6      	ldr	r6, [r4, #24]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002756:	4620      	mov	r0, r4
 8002758:	f106 0a08 	add.w	sl, r6, #8
 800275c:	1d31      	adds	r1, r6, #4
 800275e:	f7ff fd75 	bl	800224c <_ZN20SoftwareMJPEGDecoder6getU32Em>
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002762:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002764:	eb00 020a 	add.w	r2, r0, sl
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002768:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 800276a:	429a      	cmp	r2, r3
 800276c:	d231      	bcs.n	80027d2 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xa2>
    uint32_t streamNo = getU16(currentMovieOffset);
 800276e:	4631      	mov	r1, r6
 8002770:	4620      	mov	r0, r4
 8002772:	f7ff fd80 	bl	8002276 <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002776:	f243 0330 	movw	r3, #12336	; 0x3030
 800277a:	4298      	cmp	r0, r3
 800277c:	d11d      	bne.n	80027ba <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 800277e:	1cb1      	adds	r1, r6, #2
 8002780:	4620      	mov	r0, r4
 8002782:	f7ff fd78 	bl	8002276 <_ZN20SoftwareMJPEGDecoder6getU16Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002786:	f246 3364 	movw	r3, #25444	; 0x6364
 800278a:	4298      	cmp	r0, r3
 800278c:	d115      	bne.n	80027ba <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 800278e:	b1a5      	cbz	r5, 80027ba <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002790:	462a      	mov	r2, r5
 8002792:	4651      	mov	r1, sl
 8002794:	4620      	mov	r0, r4
            currentMovieOffset += 8;
 8002796:	f8c4 a018 	str.w	sl, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 800279a:	f7ff fd7b 	bl	8002294 <_ZN20SoftwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 800279e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 80027a0:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 80027a2:	462a      	mov	r2, r5
 80027a4:	4620      	mov	r0, r4
 80027a6:	f8cd 8000 	str.w	r8, [sp]
 80027aa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80027ae:	463b      	mov	r3, r7
 80027b0:	f7ff ffaf 	bl	8002712 <_ZN20SoftwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 80027b4:	6963      	ldr	r3, [r4, #20]
 80027b6:	3301      	adds	r3, #1
 80027b8:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 80027ba:	69a3      	ldr	r3, [r4, #24]
 80027bc:	442b      	add	r3, r5
        if (chunkSize == 0) // Empty frame - Skip
 80027be:	b18d      	cbz	r5, 80027e4 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
            currentMovieOffset += 8;
 80027c0:	61a3      	str	r3, [r4, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80027c2:	69a3      	ldr	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 80027c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80027c6:	3301      	adds	r3, #1
 80027c8:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 80027cc:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80027ce:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 80027d0:	d10a      	bne.n	80027e8 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>
        frameNumber = 1;
 80027d2:	2001      	movs	r0, #1
        currentMovieOffset = firstFrameOffset; //start over
 80027d4:	6a23      	ldr	r3, [r4, #32]
        frameNumber = 1;
 80027d6:	6160      	str	r0, [r4, #20]
        currentMovieOffset = firstFrameOffset; //start over
 80027d8:	61a3      	str	r3, [r4, #24]
}
 80027da:	f080 0001 	eor.w	r0, r0, #1
 80027de:	b004      	add	sp, #16
 80027e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            currentMovieOffset += 8;
 80027e4:	3308      	adds	r3, #8
 80027e6:	e7eb      	b.n	80027c0 <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        isCurrentFrameLast = false;
 80027e8:	2000      	movs	r0, #0
 80027ea:	e7f6      	b.n	80027da <_ZN20SoftwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 80027ec:	0802ba5d 	.word	0x0802ba5d
 80027f0:	0802bc2c 	.word	0x0802bc2c
 80027f4:	0802b997 	.word	0x0802b997

080027f8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80027f8:	2001      	movs	r0, #1
 80027fa:	4770      	bx	lr

080027fc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80027fc:	200c      	movs	r0, #12
 80027fe:	4770      	bx	lr

08002800 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002800:	230c      	movs	r3, #12
 8002802:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002806:	3008      	adds	r0, #8
 8002808:	4770      	bx	lr

0800280a <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 800280a:	230c      	movs	r3, #12
 800280c:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002810:	3008      	adds	r0, #8
 8002812:	4770      	bx	lr

08002814 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15enterScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002814:	2001      	movs	r0, #1
 8002816:	4770      	bx	lr

08002818 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15enterScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002818:	f240 5044 	movw	r0, #1348	; 0x544
 800281c:	4770      	bx	lr

0800281e <_ZN8touchgfx9PartitionINS_4meta8TypeListI15enterScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800281e:	f240 5344 	movw	r3, #1348	; 0x544
 8002822:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002826:	3008      	adds	r0, #8
 8002828:	4770      	bx	lr

0800282a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15enterScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800282a:	f240 5344 	movw	r3, #1348	; 0x544
 800282e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002832:	3008      	adds	r0, #8
 8002834:	4770      	bx	lr

08002836 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19callScreenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002836:	2001      	movs	r0, #1
 8002838:	4770      	bx	lr

0800283a <_ZN8touchgfx9PartitionINS_4meta8TypeListI19callScreenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 800283a:	2010      	movs	r0, #16
 800283c:	4770      	bx	lr

0800283e <_ZN8touchgfx9PartitionINS_4meta8TypeListI19callScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 800283e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002842:	3008      	adds	r0, #8
 8002844:	4770      	bx	lr

08002846 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI19callScreenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002846:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800284a:	3008      	adds	r0, #8
 800284c:	4770      	bx	lr

0800284e <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoenterScreenScreenNoTransition();
 800284e:	4608      	mov	r0, r1
 8002850:	f000 bcd6 	b.w	8003200 <_ZN23FrontendApplicationBase33gotoenterScreenScreenNoTransitionEv>

08002854 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002854:	4b03      	ldr	r3, [pc, #12]	; (8002864 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002856:	b510      	push	{r4, lr}
 8002858:	4604      	mov	r4, r0
 800285a:	6003      	str	r3, [r0, #0]
 800285c:	f014 fa86 	bl	8016d6c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002860:	4620      	mov	r0, r4
 8002862:	bd10      	pop	{r4, pc}
 8002864:	0802bd38 	.word	0x0802bd38

08002868 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002868:	b510      	push	{r4, lr}
 800286a:	4604      	mov	r4, r0
 800286c:	f7ff fff2 	bl	8002854 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002870:	2114      	movs	r1, #20
 8002872:	4620      	mov	r0, r4
 8002874:	f027 fabe 	bl	8029df4 <_ZdlPvj>
 8002878:	4620      	mov	r0, r4
 800287a:	bd10      	pop	{r4, pc}

0800287c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15enterScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15enterScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800287e:	b510      	push	{r4, lr}
 8002880:	4604      	mov	r4, r0
 8002882:	6003      	str	r3, [r0, #0]
 8002884:	f014 fa72 	bl	8016d6c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002888:	4620      	mov	r0, r4
 800288a:	bd10      	pop	{r4, pc}
 800288c:	0802bd04 	.word	0x0802bd04

08002890 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15enterScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002890:	b510      	push	{r4, lr}
 8002892:	4604      	mov	r4, r0
 8002894:	f7ff fff2 	bl	800287c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15enterScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002898:	f240 514c 	movw	r1, #1356	; 0x54c
 800289c:	4620      	mov	r0, r4
 800289e:	f027 faa9 	bl	8029df4 <_ZdlPvj>
 80028a2:	4620      	mov	r0, r4
 80028a4:	bd10      	pop	{r4, pc}
	...

080028a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19callScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80028a8:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19callScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80028aa:	b510      	push	{r4, lr}
 80028ac:	4604      	mov	r4, r0
 80028ae:	6003      	str	r3, [r0, #0]
 80028b0:	f014 fa5c 	bl	8016d6c <_ZN8touchgfx17AbstractPartitionD1Ev>
 80028b4:	4620      	mov	r0, r4
 80028b6:	bd10      	pop	{r4, pc}
 80028b8:	0802bcd0 	.word	0x0802bcd0

080028bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI19callScreenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80028bc:	b510      	push	{r4, lr}
 80028be:	4604      	mov	r4, r0
 80028c0:	f7ff fff2 	bl	80028a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19callScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80028c4:	2118      	movs	r1, #24
 80028c6:	4620      	mov	r0, r4
 80028c8:	f027 fa94 	bl	8029df4 <_ZdlPvj>
 80028cc:	4620      	mov	r0, r4
 80028ce:	bd10      	pop	{r4, pc}

080028d0 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <_ZN12FrontendHeapD1Ev+0x24>)
 80028d2:	b510      	push	{r4, lr}
 80028d4:	4604      	mov	r4, r0
 80028d6:	6003      	str	r3, [r0, #0]
 80028d8:	f500 60af 	add.w	r0, r0, #1400	; 0x578
 80028dc:	f7ff ffba 	bl	8002854 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80028e0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80028e4:	f7ff ffca 	bl	800287c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15enterScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80028e8:	f104 0014 	add.w	r0, r4, #20
 80028ec:	f7ff ffdc 	bl	80028a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI19callScreenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80028f0:	4620      	mov	r0, r4
 80028f2:	bd10      	pop	{r4, pc}
 80028f4:	0802bd6c 	.word	0x0802bd6c

080028f8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80028f8:	b508      	push	{r3, lr}
 80028fa:	4802      	ldr	r0, [pc, #8]	; (8002904 <__tcf_0+0xc>)
 80028fc:	f7ff ffe8 	bl	80028d0 <_ZN12FrontendHeapD1Ev>
 8002900:	bd08      	pop	{r3, pc}
 8002902:	bf00      	nop
 8002904:	20016df4 	.word	0x20016df4

08002908 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8002908:	b510      	push	{r4, lr}
 800290a:	4604      	mov	r4, r0
 800290c:	f7ff ffe0 	bl	80028d0 <_ZN12FrontendHeapD1Ev>
 8002910:	f44f 61dd 	mov.w	r1, #1768	; 0x6e8
 8002914:	4620      	mov	r0, r4
 8002916:	f027 fa6d 	bl	8029df4 <_ZdlPvj>
 800291a:	4620      	mov	r0, r4
 800291c:	bd10      	pop	{r4, pc}
	...

08002920 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8002920:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8002924:	f000 fbae 	bl	8003084 <_ZN14BitmapDatabase11getInstanceEv>
 8002928:	2400      	movs	r4, #0
 800292a:	4605      	mov	r5, r0
 800292c:	f000 fbae 	bl	800308c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8002930:	4623      	mov	r3, r4
 8002932:	4601      	mov	r1, r0
 8002934:	4622      	mov	r2, r4
 8002936:	4628      	mov	r0, r5
 8002938:	9400      	str	r4, [sp, #0]
 800293a:	f01b f9db 	bl	801dcf4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 800293e:	4b25      	ldr	r3, [pc, #148]	; (80029d4 <touchgfx_init+0xb4>)
 8002940:	4a25      	ldr	r2, [pc, #148]	; (80029d8 <touchgfx_init+0xb8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8002942:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8002944:	4d25      	ldr	r5, [pc, #148]	; (80029dc <touchgfx_init+0xbc>)
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	f000 ff62 	bl	8003810 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800294c:	4824      	ldr	r0, [pc, #144]	; (80029e0 <touchgfx_init+0xc0>)
 800294e:	f01b f913 	bl	801db78 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8002952:	782b      	ldrb	r3, [r5, #0]
 8002954:	f3bf 8f5b 	dmb	ish
 8002958:	07db      	lsls	r3, r3, #31
 800295a:	d435      	bmi.n	80029c8 <touchgfx_init+0xa8>
 800295c:	4628      	mov	r0, r5
 800295e:	f027 fa4b 	bl	8029df8 <__cxa_guard_acquire>
 8002962:	b388      	cbz	r0, 80029c8 <touchgfx_init+0xa8>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8002964:	4c1f      	ldr	r4, [pc, #124]	; (80029e4 <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8002966:	4b20      	ldr	r3, [pc, #128]	; (80029e8 <touchgfx_init+0xc8>)
 8002968:	f504 66b2 	add.w	r6, r4, #1424	; 0x590
 800296c:	f104 0014 	add.w	r0, r4, #20
 8002970:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8002974:	f504 67af 	add.w	r7, r4, #1400	; 0x578
 8002978:	6023      	str	r3, [r4, #0]
 800297a:	6060      	str	r0, [r4, #4]
 800297c:	f8c4 8008 	str.w	r8, [r4, #8]
 8002980:	60e7      	str	r7, [r4, #12]
 8002982:	6126      	str	r6, [r4, #16]
 8002984:	f014 f9f4 	bl	8016d70 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002988:	4b18      	ldr	r3, [pc, #96]	; (80029ec <touchgfx_init+0xcc>)
 800298a:	4640      	mov	r0, r8
 800298c:	6163      	str	r3, [r4, #20]
 800298e:	f014 f9ef 	bl	8016d70 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002992:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <touchgfx_init+0xd0>)
 8002994:	4638      	mov	r0, r7
 8002996:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002998:	f014 f9ea 	bl	8016d70 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800299c:	4b15      	ldr	r3, [pc, #84]	; (80029f4 <touchgfx_init+0xd4>)
 800299e:	f204 508c 	addw	r0, r4, #1420	; 0x58c
 80029a2:	f8c4 3578 	str.w	r3, [r4, #1400]	; 0x578
 80029a6:	f001 fd4b 	bl	8004440 <_ZN5ModelC1Ev>
 80029aa:	4622      	mov	r2, r4
 80029ac:	f204 518c 	addw	r1, r4, #1420	; 0x58c
 80029b0:	4630      	mov	r0, r6
 80029b2:	f001 fd3b 	bl	800442c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80029b6:	4630      	mov	r0, r6
 80029b8:	f000 fc22 	bl	8003200 <_ZN23FrontendApplicationBase33gotoenterScreenScreenNoTransitionEv>
        static FrontendHeap instance;
 80029bc:	4628      	mov	r0, r5
 80029be:	f027 fa27 	bl	8029e10 <__cxa_guard_release>
 80029c2:	480d      	ldr	r0, [pc, #52]	; (80029f8 <touchgfx_init+0xd8>)
 80029c4:	f027 fa62 	bl	8029e8c <atexit>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80029c8:	480c      	ldr	r0, [pc, #48]	; (80029fc <touchgfx_init+0xdc>)
}
 80029ca:	b002      	add	sp, #8
 80029cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 80029d0:	f7ff b892 	b.w	8001af8 <_ZN11TouchGFXHAL10initializeEv>
 80029d4:	2002b8fc 	.word	0x2002b8fc
 80029d8:	2001817c 	.word	0x2001817c
 80029dc:	20016df0 	.word	0x20016df0
 80029e0:	20000008 	.word	0x20000008
 80029e4:	20016df4 	.word	0x20016df4
 80029e8:	0802bd6c 	.word	0x0802bd6c
 80029ec:	0802bcd0 	.word	0x0802bcd0
 80029f0:	0802bd04 	.word	0x0802bd04
 80029f4:	0802bd38 	.word	0x0802bd38
 80029f8:	080028f9 	.word	0x080028f9
 80029fc:	20018100 	.word	0x20018100

08002a00 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002a00:	4801      	ldr	r0, [pc, #4]	; (8002a08 <touchgfx_taskEntry+0x8>)
 8002a02:	f014 bee8 	b.w	80177d6 <_ZN8touchgfx3HAL9taskEntryEv>
 8002a06:	bf00      	nop
 8002a08:	20018100 	.word	0x20018100

08002a0c <_GLOBAL__sub_I_touchgfx_init>:
}
 8002a0c:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8002a0e:	4e24      	ldr	r6, [pc, #144]	; (8002aa0 <_GLOBAL__sub_I_touchgfx_init+0x94>)
{
public:

    STM32TouchController() {}
 8002a10:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <_GLOBAL__sub_I_touchgfx_init+0x98>)
 8002a12:	4c25      	ldr	r4, [pc, #148]	; (8002aa8 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
 8002a14:	4630      	mov	r0, r6
static LCD16bpp display;
 8002a16:	4d25      	ldr	r5, [pc, #148]	; (8002aac <_GLOBAL__sub_I_touchgfx_init+0xa0>)
 8002a18:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8002a1a:	f7ff fb43 	bl	80020a4 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8002a1e:	4628      	mov	r0, r5
 8002a20:	f01e fa3a 	bl	8020e98 <_ZN8touchgfx8LCD16bppC1Ev>
          lastRenderMethod(HARDWARE)
 8002a24:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	f44f 7180 	mov.w	r1, #256	; 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002a2c:	4821      	ldr	r0, [pc, #132]	; (8002ab4 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8002a2e:	851a      	strh	r2, [r3, #40]	; 0x28
 8002a30:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8002a34:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a36:	861a      	strh	r2, [r3, #48]	; 0x30
          lastRenderMethod(HARDWARE)
 8002a38:	661a      	str	r2, [r3, #96]	; 0x60
 8002a3a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002a3e:	671a      	str	r2, [r3, #112]	; 0x70
 8002a40:	60dc      	str	r4, [r3, #12]
 8002a42:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
 8002a46:	491c      	ldr	r1, [pc, #112]	; (8002ab8 <_GLOBAL__sub_I_touchgfx_init+0xac>)
 8002a48:	e9c3 1219 	strd	r1, r2, [r3, #100]	; 0x64
 8002a4c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002a50:	6759      	str	r1, [r3, #116]	; 0x74
 8002a52:	2101      	movs	r1, #1
 8002a54:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 8002a58:	4918      	ldr	r1, [pc, #96]	; (8002abc <_GLOBAL__sub_I_touchgfx_init+0xb0>)
 8002a5a:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002a5c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002a60:	8001      	strh	r1, [r0, #0]
 8002a62:	4817      	ldr	r0, [pc, #92]	; (8002ac0 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          lastRenderMethod(HARDWARE)
 8002a64:	e9c3 2204 	strd	r2, r2, [r3, #16]
              inProgress(false)
 8002a68:	e9c3 2206 	strd	r2, r2, [r3, #24]
 8002a6c:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8002a70:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 8002a74:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
        : x(0), y(0), width(0), height(0)
 8002a78:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
 8002a7c:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
 8002a80:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002a84:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002a86:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002a8a:	480e      	ldr	r0, [pc, #56]	; (8002ac4 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002a90:	8001      	strh	r1, [r0, #0]
 8002a92:	480d      	ldr	r0, [pc, #52]	; (8002ac8 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 8002a94:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 8002a96:	490d      	ldr	r1, [pc, #52]	; (8002acc <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 8002a98:	700a      	strb	r2, [r1, #0]
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8002a9a:	4a0d      	ldr	r2, [pc, #52]	; (8002ad0 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
 8002a9c:	601a      	str	r2, [r3, #0]
}
 8002a9e:	bd70      	pop	{r4, r5, r6, pc}
 8002aa0:	200174e0 	.word	0x200174e0
 8002aa4:	0802b408 	.word	0x0802b408
 8002aa8:	200174dc 	.word	0x200174dc
 8002aac:	20018180 	.word	0x20018180
 8002ab0:	20018100 	.word	0x20018100
 8002ab4:	2002b894 	.word	0x2002b894
 8002ab8:	01000001 	.word	0x01000001
 8002abc:	2002b8a0 	.word	0x2002b8a0
 8002ac0:	2002b89a 	.word	0x2002b89a
 8002ac4:	2002b896 	.word	0x2002b896
 8002ac8:	2002b89c 	.word	0x2002b89c
 8002acc:	2002b898 	.word	0x2002b898
 8002ad0:	0802b594 	.word	0x0802b594

08002ad4 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002ad4:	4801      	ldr	r0, [pc, #4]	; (8002adc <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8002ad6:	f7ff bac9 	b.w	800206c <_ZN8STM32DMAD1Ev>
 8002ada:	bf00      	nop
 8002adc:	200174e0 	.word	0x200174e0

08002ae0 <SCB_CleanInvalidateDCache>:
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002ae0:	4a10      	ldr	r2, [pc, #64]	; (8002b24 <SCB_CleanInvalidateDCache+0x44>)
 8002ae2:	2300      	movs	r3, #0
{
 8002ae4:	b570      	push	{r4, r5, r6, lr}
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002ae6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002aea:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002aee:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002af2:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002af6:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002afa:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002afe:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002b00:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002b04:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002b06:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8002b0a:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002b0c:	f8c2 5274 	str.w	r5, [r2, #628]	; 0x274
      } while (ways-- != 0U);
 8002b10:	d2f9      	bcs.n	8002b06 <SCB_CleanInvalidateDCache+0x26>
    } while(sets-- != 0U);
 8002b12:	3b20      	subs	r3, #32
 8002b14:	f113 0f20 	cmn.w	r3, #32
 8002b18:	d1f2      	bne.n	8002b00 <SCB_CleanInvalidateDCache+0x20>
 8002b1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b1e:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8002b22:	bd70      	pop	{r4, r5, r6, pc}
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8002b2a:	2290      	movs	r2, #144	; 0x90
 8002b2c:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 8002b30:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	e000e100 	.word	0xe000e100

08002b3c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002b3c:	4a09      	ldr	r2, [pc, #36]	; (8002b64 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 8002b3e:	490a      	ldr	r1, [pc, #40]	; (8002b68 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 8002b40:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002b42:	480a      	ldr	r0, [pc, #40]	; (8002b6c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002b44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8002b4e:	6911      	ldr	r1, [r2, #16]
 8002b50:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002b54:	3901      	subs	r1, #1
 8002b56:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8002b58:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8002b5a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002b62:	4770      	bx	lr
 8002b64:	40016800 	.word	0x40016800
 8002b68:	200181fa 	.word	0x200181fa
 8002b6c:	200181f8 	.word	0x200181f8

08002b70 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8002b70:	4b01      	ldr	r3, [pc, #4]	; (8002b78 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 8002b72:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40016884 	.word	0x40016884

08002b7c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002b7c:	4b02      	ldr	r3, [pc, #8]	; (8002b88 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002b7e:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002b80:	6299      	str	r1, [r3, #40]	; 0x28
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002b82:	f843 2c60 	str.w	r2, [r3, #-96]
}
 8002b86:	4770      	bx	lr
 8002b88:	40016884 	.word	0x40016884

08002b8c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x10>)
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	03db      	lsls	r3, r3, #15
 8002b92:	d501      	bpl.n	8002b98 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xc>
    {
        SCB_CleanInvalidateDCache();
 8002b94:	f7ff bfa4 	b.w	8002ae0 <SCB_CleanInvalidateDCache>
    }
}
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
#define SEM_TYPE osSemaphoreId_t
#define SEM_WAIT(s) osSemaphoreAcquire(s, osWaitForever)
#endif

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DedicatedBufferController : public touchgfx::VideoController
 8002ba0:	4770      	bx	lr

08002ba2 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(movie, length);
    }

    void setVideoData(const Handle handle, VideoDataReader& reader)
    {
        mjpegDecoders[handle]->setVideoData(reader);
 8002ba2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	6840      	ldr	r0, [r0, #4]
 8002baa:	6803      	ldr	r3, [r0, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	4718      	bx	r3

08002bb0 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002bb0:	b538      	push	{r3, r4, r5, lr}
 8002bb2:	4604      	mov	r4, r0
    HAL::initialize();
 8002bb4:	f014 fdfd 	bl	80177b2 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8002bb8:	6823      	ldr	r3, [r4, #0]
 8002bba:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8002bbc:	f018 f8da 	bl	801ad74 <_ZN8touchgfx11Application11getInstanceEv>
 8002bc0:	4601      	mov	r1, r0
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0xC003FC00, (void*)0);
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	4a08      	ldr	r2, [pc, #32]	; (8002bec <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8002bca:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002bce:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	47a8      	blx	r5
    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
    {
        // Running in UI thread / main

        assert(index < no_streams);
        mjpegDecoders[index] = &decoder;
 8002bd8:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8002bda:	4a06      	ldr	r2, [pc, #24]	; (8002bf4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8002bdc:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8002bde:	4a06      	ldr	r2, [pc, #24]	; (8002bf8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8002be0:	62da      	str	r2, [r3, #44]	; 0x2c
        topBufferRGB = bufferRGB;
 8002be2:	635a      	str	r2, [r3, #52]	; 0x34
        sizeBufferRGB = sizeOfBuffer;
 8002be4:	4a05      	ldr	r2, [pc, #20]	; (8002bfc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002be8:	bd38      	pop	{r3, r4, r5, pc}
 8002bea:	bf00      	nop
 8002bec:	c003fc00 	.word	0xc003fc00
 8002bf0:	200185a4 	.word	0x200185a4
 8002bf4:	2001855c 	.word	0x2001855c
 8002bf8:	20000124 	.word	0x20000124
 8002bfc:	00016c80 	.word	0x00016c80

08002c00 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
    {
        assert(handle < no_streams);
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    bool getIsPlaying(const Handle handle)
 8002c00:	b508      	push	{r3, lr}
    {
        assert(handle < no_streams);
 8002c02:	b131      	cbz	r1, 8002c12 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x12>
 8002c04:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
 8002c06:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8002c0a:	4a04      	ldr	r2, [pc, #16]	; (8002c1c <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
 8002c0c:	4804      	ldr	r0, [pc, #16]	; (8002c20 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
 8002c0e:	f027 f91f 	bl	8029e50 <__assert_func>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
 8002c12:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
 8002c16:	bd08      	pop	{r3, pc}
 8002c18:	0802bd78 	.word	0x0802bd78
 8002c1c:	0802bd8c 	.word	0x0802bd8c
 8002c20:	0802bf15 	.word	0x0802bf15

08002c24 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
    void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8002c24:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8002c26:	b131      	cbz	r1, 8002c36 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8002c2a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8002c2e:	4a06      	ldr	r2, [pc, #24]	; (8002c48 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8002c30:	4806      	ldr	r0, [pc, #24]	; (8002c4c <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8002c32:	f027 f90d 	bl	8029e50 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8002c36:	6840      	ldr	r0, [r0, #4]
 8002c38:	4611      	mov	r1, r2
 8002c3a:	6803      	ldr	r3, [r0, #0]
    }
 8002c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	4718      	bx	r3
 8002c44:	0802bd78 	.word	0x0802bd78
 8002c48:	0802bf58 	.word	0x0802bf58
 8002c4c:	0802bf15 	.word	0x0802bf15

08002c50 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
    uint32_t getCurrentFrameNumber(const Handle handle)
 8002c50:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002c52:	b129      	cbz	r1, 8002c60 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x10>
 8002c54:	4b03      	ldr	r3, [pc, #12]	; (8002c64 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
 8002c56:	2169      	movs	r1, #105	; 0x69
 8002c58:	4a03      	ldr	r2, [pc, #12]	; (8002c68 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
 8002c5a:	4804      	ldr	r0, [pc, #16]	; (8002c6c <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
 8002c5c:	f027 f8f8 	bl	8029e50 <__assert_func>
    }
 8002c60:	68c0      	ldr	r0, [r0, #12]
 8002c62:	bd08      	pop	{r3, pc}
 8002c64:	0802bd78 	.word	0x0802bd78
 8002c68:	0802c105 	.word	0x0802c105
 8002c6c:	0802bf15 	.word	0x0802bf15

08002c70 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8002c70:	b510      	push	{r4, lr}
 8002c72:	460c      	mov	r4, r1
 8002c74:	4611      	mov	r1, r2
 8002c76:	461a      	mov	r2, r3
        assert(handle < no_streams);
 8002c78:	b12c      	cbz	r4, 8002c86 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x16>
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x24>)
 8002c7c:	2180      	movs	r1, #128	; 0x80
 8002c7e:	4a06      	ldr	r2, [pc, #24]	; (8002c98 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x28>)
 8002c80:	4806      	ldr	r0, [pc, #24]	; (8002c9c <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x2c>)
 8002c82:	f027 f8e5 	bl	8029e50 <__assert_func>
        stream.frameNumber = 0;
 8002c86:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8002c88:	6840      	ldr	r0, [r0, #4]
 8002c8a:	6803      	ldr	r3, [r0, #0]
    }
 8002c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	4718      	bx	r3
 8002c94:	0802bd78 	.word	0x0802bd78
 8002c98:	0802c2b9 	.word	0x0802c2b9
 8002c9c:	0802bf15 	.word	0x0802bf15

08002ca0 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
    void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8002ca0:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8002ca2:	b129      	cbz	r1, 8002cb0 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x10>
 8002ca4:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
 8002ca6:	2172      	movs	r1, #114	; 0x72
 8002ca8:	4a05      	ldr	r2, [pc, #20]	; (8002cc0 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
 8002caa:	4806      	ldr	r0, [pc, #24]	; (8002cc4 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
 8002cac:	f027 f8d0 	bl	8029e50 <__assert_func>
        stream.tickCount = 0;
 8002cb0:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8002cb4:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8002cb8:	bd08      	pop	{r3, pc}
 8002cba:	bf00      	nop
 8002cbc:	0802bd78 	.word	0x0802bd78
 8002cc0:	0802c493 	.word	0x0802c493
 8002cc4:	0802bf15 	.word	0x0802bf15

08002cc8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 8002cc8:	f014 bd5a 	b.w	8017780 <_ZN8touchgfx3HAL10beginFrameEv>

08002ccc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8002ccc:	b508      	push	{r3, lr}
    HAL::flushFrameBuffer(rect);
 8002cce:	f014 fd21 	bl	8017714 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002cd2:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x18>)
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	03db      	lsls	r3, r3, #15
 8002cd8:	d503      	bpl.n	8002ce2 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x16>
}
 8002cda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        SCB_CleanInvalidateDCache();
 8002cde:	f7ff beff 	b.w	8002ae0 <SCB_CleanInvalidateDCache>
}
 8002ce2:	bd08      	pop	{r3, pc}
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    return HAL::blockCopy(dest, src, numBytes);
 8002ce8:	f014 be7f 	b.w	80179ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

08002cec <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 8002cec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8002cf0:	b510      	push	{r4, lr}
 8002cf2:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 8002cf4:	b13b      	cbz	r3, 8002d06 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x1a>
            MUTEX_LOCK(mutexBuffers);
 8002cf6:	f04f 31ff 	mov.w	r1, #4294967295
 8002cfa:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8002cfc:	f004 fc04 	bl	8007508 <osMutexAcquire>
            firstDrawThisFrame = false;
 8002d00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d04:	8723      	strh	r3, [r4, #56]	; 0x38
    }
 8002d06:	bd10      	pop	{r4, pc}

08002d08 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    void unregisterVideoWidget(const Handle handle)
 8002d08:	b538      	push	{r3, r4, r5, lr}
 8002d0a:	460d      	mov	r5, r1
 8002d0c:	4604      	mov	r4, r0
        MUTEX_LOCK(mutexBuffers);
 8002d0e:	f04f 31ff 	mov.w	r1, #4294967295
 8002d12:	6c00      	ldr	r0, [r0, #64]	; 0x40
        streams[handle].isActive = false;
 8002d14:	3501      	adds	r5, #1
        MUTEX_LOCK(mutexBuffers);
 8002d16:	f004 fbf7 	bl	8007508 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8002d1a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002d1c:	f004 fc24 	bl	8007568 <osMutexRelease>
        streams[handle].isActive = false;
 8002d20:	2300      	movs	r3, #0
 8002d22:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8002d26:	712b      	strb	r3, [r5, #4]
        if (oneIsActive == false)
 8002d28:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002d2c:	b90b      	cbnz	r3, 8002d32 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x2a>
            topBufferRGB = bufferRGB;
 8002d2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d30:	6363      	str	r3, [r4, #52]	; 0x34
    }
 8002d32:	bd38      	pop	{r3, r4, r5, pc}

08002d34 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8002d34:	b510      	push	{r4, lr}
 8002d36:	4604      	mov	r4, r0
 8002d38:	2144      	movs	r1, #68	; 0x44
 8002d3a:	f027 f85b 	bl	8029df4 <_ZdlPvj>
 8002d3e:	4620      	mov	r0, r4
 8002d40:	bd10      	pop	{r4, pc}
	...

08002d44 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    void setCommand(const Handle handle, Command cmd, uint32_t param)
 8002d44:	b510      	push	{r4, lr}
 8002d46:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8002d48:	b129      	cbz	r1, 8002d56 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 8002d4a:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x60>)
 8002d4c:	2192      	movs	r1, #146	; 0x92
 8002d4e:	4a16      	ldr	r2, [pc, #88]	; (8002da8 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x64>)
 8002d50:	4816      	ldr	r0, [pc, #88]	; (8002dac <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x68>)
 8002d52:	f027 f87d 	bl	8029e50 <__assert_func>
 8002d56:	2a04      	cmp	r2, #4
 8002d58:	d815      	bhi.n	8002d86 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8002d5a:	e8df f002 	tbb	[pc, r2]
 8002d5e:	1103      	.short	0x1103
 8002d60:	1715      	.short	0x1715
 8002d62:	1d          	.byte	0x1d
 8002d63:	00          	.byte	0x00
            if (mjpegDecoders[handle]->hasVideo())
 8002d64:	6840      	ldr	r0, [r0, #4]
 8002d66:	6803      	ldr	r3, [r0, #0]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	4798      	blx	r3
 8002d6c:	b158      	cbz	r0, 8002d86 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8002d74:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
            stream.frameCount = 0;
 8002d78:	2300      	movs	r3, #0
            stream.tickCount = 0;
 8002d7a:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 8002d7e:	e002      	b.n	8002d86 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    }
 8002d86:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 8002d88:	6203      	str	r3, [r0, #32]
 8002d8a:	e7f5      	b.n	8002d78 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
            stream.seek_to_frame = 1;
 8002d92:	2301      	movs	r3, #1
 8002d94:	6203      	str	r3, [r0, #32]
            break;
 8002d96:	e7f6      	b.n	8002d86 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 8002d98:	3b00      	subs	r3, #0
 8002d9a:	bf18      	it	ne
 8002d9c:	2301      	movne	r3, #1
 8002d9e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    }
 8002da2:	e7f0      	b.n	8002d86 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8002da4:	0802bd78 	.word	0x0802bd78
 8002da8:	0802c64e 	.word	0x0802c64e
 8002dac:	0802bf15 	.word	0x0802bf15

08002db0 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8002db0:	b510      	push	{r4, lr}
 8002db2:	4604      	mov	r4, r0
 8002db4:	4610      	mov	r0, r2
        assert(handle < no_streams);
 8002db6:	b129      	cbz	r1, 8002dc4 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8002db8:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x50>)
 8002dba:	21b9      	movs	r1, #185	; 0xb9
 8002dbc:	4a11      	ldr	r2, [pc, #68]	; (8002e04 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x54>)
 8002dbe:	4812      	ldr	r0, [pc, #72]	; (8002e08 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 8002dc0:	f027 f846 	bl	8029e50 <__assert_func>
        if (stream.isPlaying)
 8002dc4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002dc8:	b113      	cbz	r3, 8002dd0 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x20>
            stream.tickCount++;
 8002dca:	6963      	ldr	r3, [r4, #20]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 8002dd0:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8002dd4:	b90b      	cbnz	r3, 8002dda <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x2a>
        return true;
 8002dd6:	2001      	movs	r0, #1
    }
 8002dd8:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 8002dda:	68a3      	ldr	r3, [r4, #8]
 8002ddc:	6303      	str	r3, [r0, #48]	; 0x30
            widget.invalidate();
 8002dde:	6803      	ldr	r3, [r0, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8002de4:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 8002de6:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
            stream.doInvalidateOnNextTick = false;
 8002dea:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
            if (!stream.hasMoreFrames && !stream.repeat)
 8002dee:	2800      	cmp	r0, #0
 8002df0:	d1f1      	bne.n	8002dd6 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x26>
 8002df2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1ee      	bne.n	8002dd8 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
                stream.isPlaying = false;
 8002dfa:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
 8002dfe:	e7eb      	b.n	8002dd8 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
 8002e00:	0802bd78 	.word	0x0802bd78
 8002e04:	0802c821 	.word	0x0802c821
 8002e08:	0802bf15 	.word	0x0802bf15

08002e0c <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8002e0c:	b510      	push	{r4, lr}
            if (stream.isPlaying)
 8002e0e:	4c10      	ldr	r4, [pc, #64]	; (8002e50 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x44>)
    HAL::endFrame();
 8002e10:	f014 fcc2 	bl	8017798 <_ZN8touchgfx3HAL8endFrameEv>
 8002e14:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8002e18:	b153      	cbz	r3, 8002e30 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x24>
    bool decodeForNextTick(const Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8002e1a:	69e1      	ldr	r1, [r4, #28]
 8002e1c:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8002e20:	435a      	muls	r2, r3
 8002e22:	6923      	ldr	r3, [r4, #16]
 8002e24:	434b      	muls	r3, r1
 8002e26:	429a      	cmp	r2, r3
                    stream.doDecode = true;
 8002e28:	bf24      	itt	cs
 8002e2a:	2301      	movcs	r3, #1
 8002e2c:	f884 3029 	strbcs.w	r3, [r4, #41]	; 0x29
        firstDrawThisFrame = true;
 8002e30:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 8002e32:	6be0      	ldr	r0, [r4, #60]	; 0x3c
        firstDrawThisFrame = true;
 8002e34:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        SEM_POST(semDecode);
 8002e38:	f004 fc50 	bl	80076dc <osSemaphoreRelease>
        if (uiHasMutex)
 8002e3c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002e40:	b12b      	cbz	r3, 8002e4e <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
            MUTEX_UNLOCK(mutexBuffers);
 8002e42:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002e44:	f004 fb90 	bl	8007568 <osMutexRelease>
            uiHasMutex = false;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8002e4e:	bd10      	pop	{r4, pc}
 8002e50:	200185a4 	.word	0x200185a4

08002e54 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e54:	4b03      	ldr	r3, [pc, #12]	; (8002e64 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 8002e56:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e60:	609a      	str	r2, [r3, #8]
}
 8002e62:	4770      	bx	lr
 8002e64:	e000e100 	.word	0xe000e100

08002e68 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e68:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8002e6a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002e72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002e82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002e86:	f3bf 8f6f 	isb	sy
}
 8002e8a:	4770      	bx	lr
 8002e8c:	e000e100 	.word	0xe000e100

08002e90 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8002e90:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8002e94:	b570      	push	{r4, r5, r6, lr}
            if (streams[i].isActive == false)
 8002e96:	b133      	cbz	r3, 8002ea6 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x16>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8002e98:	4b17      	ldr	r3, [pc, #92]	; (8002ef8 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 8002e9a:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8002e9e:	4a17      	ldr	r2, [pc, #92]	; (8002efc <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8002ea0:	4817      	ldr	r0, [pc, #92]	; (8002f00 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 8002ea2:	f026 ffd5 	bl	8029e50 <__assert_func>
                streams[i] = Stream();
 8002ea6:	2201      	movs	r2, #1
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002ea8:	6b45      	ldr	r5, [r0, #52]	; 0x34
                streams[i] = Stream();
 8002eaa:	60c3      	str	r3, [r0, #12]
 8002eac:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        streams[handle].isActive = true;
 8002eb0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002eb4:	f505 32b6 	add.w	r2, r5, #93184	; 0x16c00
                streams[i] = Stream();
 8002eb8:	6103      	str	r3, [r0, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002eba:	3280      	adds	r2, #128	; 0x80
                streams[i] = Stream();
 8002ebc:	6143      	str	r3, [r0, #20]
 8002ebe:	6183      	str	r3, [r0, #24]
 8002ec0:	61c3      	str	r3, [r0, #28]
 8002ec2:	6203      	str	r3, [r0, #32]
 8002ec4:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
 8002ec8:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
 8002ecc:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8002ed0:	e9d0 460b 	ldrd	r4, r6, [r0, #44]	; 0x2c
 8002ed4:	4434      	add	r4, r6
 8002ed6:	42a2      	cmp	r2, r4
 8002ed8:	d903      	bls.n	8002ee2 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x52>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8002eda:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
 8002edc:	2142      	movs	r1, #66	; 0x42
 8002ede:	4a0a      	ldr	r2, [pc, #40]	; (8002f08 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8002ee0:	e7de      	b.n	8002ea0 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x10>
        topBufferRGB += sizeOfOneDecodeBuffer;
 8002ee2:	6342      	str	r2, [r0, #52]	; 0x34
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, uint16_t width, uint16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8002ee4:	22d8      	movs	r2, #216	; 0xd8
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8002ee6:	6085      	str	r5, [r0, #8]
    }
 8002ee8:	4618      	mov	r0, r3
        format = bufferFormat;
 8002eea:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferWidth = width;
 8002eee:	86ca      	strh	r2, [r1, #54]	; 0x36
        bufferHeight = height;
 8002ef0:	870a      	strh	r2, [r1, #56]	; 0x38
        buffer = videoBuffer;
 8002ef2:	630b      	str	r3, [r1, #48]	; 0x30
 8002ef4:	bd70      	pop	{r4, r5, r6, pc}
 8002ef6:	bf00      	nop
 8002ef8:	0802c9c1 	.word	0x0802c9c1
 8002efc:	0802c9f1 	.word	0x0802c9f1
 8002f00:	0802bf15 	.word	0x0802bf15
 8002f04:	0802cb77 	.word	0x0802cb77
 8002f08:	0802cbb2 	.word	0x0802cbb2

08002f0c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
        if (LTDC->LIPCR == lcd_int_active_line)
 8002f0c:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <HAL_LTDC_LineEventCallback+0x50>)
 8002f0e:	4a14      	ldr	r2, [pc, #80]	; (8002f60 <HAL_LTDC_LineEventCallback+0x54>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	8811      	ldrh	r1, [r2, #0]
 8002f14:	428b      	cmp	r3, r1
    {
 8002f16:	b510      	push	{r4, lr}
 8002f18:	4c12      	ldr	r4, [pc, #72]	; (8002f64 <HAL_LTDC_LineEventCallback+0x58>)
        if (LTDC->LIPCR == lcd_int_active_line)
 8002f1a:	d113      	bne.n	8002f44 <HAL_LTDC_LineEventCallback+0x38>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8002f1c:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_LTDC_LineEventCallback+0x5c>)
 8002f1e:	8819      	ldrh	r1, [r3, #0]
 8002f20:	f002 fede 	bl	8005ce0 <HAL_LTDC_ProgramLineEvent>
        return instance;
 8002f24:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8002f26:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8002f30:	f7fe ff14 	bl	8001d5c <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8002f34:	6820      	ldr	r0, [r4, #0]
 8002f36:	f015 fa3d 	bl	80183b4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8002f3a:	2000      	movs	r0, #0
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
            GPIO::clear(GPIO::VSYNC_FREQ);
            HAL::getInstance()->frontPorchEntered();
        }
    }
 8002f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 8002f40:	f7fe bdc0 	b.w	8001ac4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8002f44:	f002 fecc 	bl	8005ce0 <HAL_LTDC_ProgramLineEvent>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002f48:	2000      	movs	r0, #0
 8002f4a:	f7fe fdbc 	bl	8001ac6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        return instance;
 8002f4e:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 8002f50:	6803      	ldr	r3, [r0, #0]
    }
 8002f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	4718      	bx	r3
 8002f5a:	bf00      	nop
 8002f5c:	40016800 	.word	0x40016800
 8002f60:	200181fa 	.word	0x200181fa
 8002f64:	2002b8a0 	.word	0x2002b8a0
 8002f68:	200181f8 	.word	0x200181f8

08002f6c <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8002f6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002f70:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 8002f72:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8002f74:	f44f 77d8 	mov.w	r7, #432	; 0x1b0
            SEM_WAIT(semDecode);
 8002f78:	f04f 31ff 	mov.w	r1, #4294967295
 8002f7c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002f7e:	f004 fb73 	bl	8007668 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 8002f82:	f04f 31ff 	mov.w	r1, #4294967295
 8002f86:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002f88:	f004 fabe 	bl	8007508 <osMutexAcquire>
                if (stream.doDecode)
 8002f8c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8002f90:	b313      	cbz	r3, 8002fd8 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x6c>
                    if (stream.seek_to_frame > 0)
 8002f92:	6a21      	ldr	r1, [r4, #32]
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8002f94:	6865      	ldr	r5, [r4, #4]
                    stream.doInvalidateOnNextTick = true;
 8002f96:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
                    if (stream.seek_to_frame > 0)
 8002f9a:	b129      	cbz	r1, 8002fa8 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x3c>
                        decoder->gotoFrame(stream.seek_to_frame);
 8002f9c:	682b      	ldr	r3, [r5, #0]
 8002f9e:	4628      	mov	r0, r5
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8002fa8:	682b      	ldr	r3, [r5, #0]
 8002faa:	4628      	mov	r0, r5
 8002fac:	9700      	str	r7, [sp, #0]
 8002fae:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8002fb2:	23d8      	movs	r3, #216	; 0xd8
 8002fb4:	68a1      	ldr	r1, [r4, #8]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	47c0      	blx	r8
                    stream.frameCount++;
 8002fba:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8002fbc:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
                    stream.frameCount++;
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8002fc4:	b160      	cbz	r0, 8002fe0 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x74>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8002fc6:	682b      	ldr	r3, [r5, #0]
 8002fc8:	4628      	mov	r0, r5
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	4798      	blx	r3
 8002fce:	3801      	subs	r0, #1
 8002fd0:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
            MUTEX_UNLOCK(mutexBuffers);
 8002fd8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002fda:	f004 fac5 	bl	8007568 <osMutexRelease>
        while (1)
 8002fde:	e7cb      	b.n	8002f78 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc>
                        stream.frameNumber = 1;
 8002fe0:	60e6      	str	r6, [r4, #12]
 8002fe2:	e7f6      	b.n	8002fd2 <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x66>

08002fe4 <videoTaskFunc>:
    videoController.decoderTaskEntry();
 8002fe4:	4801      	ldr	r0, [pc, #4]	; (8002fec <videoTaskFunc+0x8>)
{
 8002fe6:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8002fe8:	f7ff ffc0 	bl	8002f6c <_ZN25DedicatedBufferControllerILm1ELm216ELm216ELm432ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
 8002fec:	200185a4 	.word	0x200185a4

08002ff0 <_GLOBAL__sub_I_lineBuffer>:
}
 8002ff0:	b538      	push	{r3, r4, r5, lr}
SoftwareMJPEGDecoder mjpegdecoder1((uint8_t*)lineBuffer);
 8002ff2:	4912      	ldr	r1, [pc, #72]	; (800303c <_GLOBAL__sub_I_lineBuffer+0x4c>)
            isActive(false), doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8002ff4:	2500      	movs	r5, #0
 8002ff6:	4812      	ldr	r0, [pc, #72]	; (8003040 <_GLOBAL__sub_I_lineBuffer+0x50>)
 8002ff8:	f7ff f900 	bl	80021fc <_ZN20SoftwareMJPEGDecoderC1EPh>
          firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8002ffc:	4c11      	ldr	r4, [pc, #68]	; (8003044 <_GLOBAL__sub_I_lineBuffer+0x54>)
 8002ffe:	4b12      	ldr	r3, [pc, #72]	; (8003048 <_GLOBAL__sub_I_lineBuffer+0x58>)
            isActive(false), doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8003000:	2001      	movs	r0, #1
        semDecode = SEM_CREATE(); // Binary semaphore
 8003002:	462a      	mov	r2, r5
 8003004:	4629      	mov	r1, r5
          firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003006:	6023      	str	r3, [r4, #0]
            isActive(false), doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8003008:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 800300c:	84e5      	strh	r5, [r4, #38]	; 0x26
 800300e:	8520      	strh	r0, [r4, #40]	; 0x28
          firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003010:	6365      	str	r5, [r4, #52]	; 0x34
 8003012:	8720      	strh	r0, [r4, #56]	; 0x38
            isActive(false), doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8003014:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8003018:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800301c:	e9c4 5507 	strd	r5, r5, [r4, #28]
          firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003020:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
 8003024:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
 8003028:	e9c4 5501 	strd	r5, r5, [r4, #4]
        semDecode = SEM_CREATE(); // Binary semaphore
 800302c:	f004 fac6 	bl	80075bc <osSemaphoreNew>
 8003030:	63e0      	str	r0, [r4, #60]	; 0x3c
        mutexBuffers = MUTEX_CREATE();
 8003032:	4628      	mov	r0, r5
 8003034:	f004 fa26 	bl	8007484 <osMutexNew>
 8003038:	6420      	str	r0, [r4, #64]	; 0x40
}
 800303a:	bd38      	pop	{r3, r4, r5, pc}
 800303c:	200181fc 	.word	0x200181fc
 8003040:	2001855c 	.word	0x2001855c
 8003044:	200185a4 	.word	0x200185a4
 8003048:	0802cd5c 	.word	0x0802cd5c

0800304c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800304c:	4770      	bx	lr

0800304e <_ZN23ApplicationFontProviderD0Ev>:
 800304e:	b510      	push	{r4, lr}
 8003050:	4604      	mov	r4, r0
 8003052:	2104      	movs	r1, #4
 8003054:	f026 fece 	bl	8029df4 <_ZdlPvj>
 8003058:	4620      	mov	r0, r4
 800305a:	bd10      	pop	{r4, pc}

0800305c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 800305c:	2901      	cmp	r1, #1
{
 800305e:	b508      	push	{r3, lr}
    switch (typography)
 8003060:	d006      	beq.n	8003070 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8003062:	2902      	cmp	r1, #2
 8003064:	d008      	beq.n	8003078 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8003066:	b959      	cbnz	r1, 8003080 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003068:	f000 fc1e 	bl	80038a8 <_ZN17TypedTextDatabase8getFontsEv>
 800306c:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 800306e:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003070:	f000 fc1a 	bl	80038a8 <_ZN17TypedTextDatabase8getFontsEv>
 8003074:	6840      	ldr	r0, [r0, #4]
 8003076:	e7fa      	b.n	800306e <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003078:	f000 fc16 	bl	80038a8 <_ZN17TypedTextDatabase8getFontsEv>
 800307c:	6880      	ldr	r0, [r0, #8]
 800307e:	e7f6      	b.n	800306e <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8003080:	2000      	movs	r0, #0
 8003082:	e7f4      	b.n	800306e <_ZN23ApplicationFontProvider7getFontEt+0x12>

08003084 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003084:	4800      	ldr	r0, [pc, #0]	; (8003088 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003086:	4770      	bx	lr
 8003088:	0802cda4 	.word	0x0802cda4

0800308c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 800308c:	2008      	movs	r0, #8
 800308e:	4770      	bx	lr

08003090 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003090:	b513      	push	{r0, r1, r4, lr}
 8003092:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003094:	b151      	cbz	r1, 80030ac <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003096:	6803      	ldr	r3, [r0, #0]
 8003098:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 800309a:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 800309c:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80030a0:	689c      	ldr	r4, [r3, #8]
 80030a2:	f10d 0303 	add.w	r3, sp, #3
 80030a6:	47a0      	blx	r4
        return glyph;
    }
 80030a8:	b002      	add	sp, #8
 80030aa:	bd10      	pop	{r4, pc}
            return 0;
 80030ac:	4608      	mov	r0, r1
 80030ae:	e7fb      	b.n	80030a8 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

080030b0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 80030b0:	8940      	ldrh	r0, [r0, #10]
 80030b2:	4770      	bx	lr

080030b4 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 80030b4:	8980      	ldrh	r0, [r0, #12]
 80030b6:	4770      	bx	lr

080030b8 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 80030b8:	8880      	ldrh	r0, [r0, #4]
 80030ba:	4770      	bx	lr

080030bc <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 80030bc:	7983      	ldrb	r3, [r0, #6]
 80030be:	8880      	ldrh	r0, [r0, #4]
 80030c0:	4418      	add	r0, r3
    }
 80030c2:	b280      	uxth	r0, r0
 80030c4:	4770      	bx	lr

080030c6 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80030c6:	79c0      	ldrb	r0, [r0, #7]
    }
 80030c8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80030cc:	4770      	bx	lr

080030ce <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80030ce:	79c0      	ldrb	r0, [r0, #7]
    }
 80030d0:	09c0      	lsrs	r0, r0, #7
 80030d2:	4770      	bx	lr

080030d4 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 80030d4:	4770      	bx	lr

080030d6 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80030d6:	b510      	push	{r4, lr}
 80030d8:	4604      	mov	r4, r0
    }
 80030da:	2108      	movs	r1, #8
 80030dc:	f026 fe8a 	bl	8029df4 <_ZdlPvj>
 80030e0:	4620      	mov	r0, r4
 80030e2:	bd10      	pop	{r4, pc}

080030e4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
    }
 80030e4:	4770      	bx	lr

080030e6 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 80030e6:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 80030ea:	6808      	ldr	r0, [r1, #0]
 80030ec:	6849      	ldr	r1, [r1, #4]
 80030ee:	c303      	stmia	r3!, {r0, r1}
    }
 80030f0:	4770      	bx	lr

080030f2 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80030f2:	4770      	bx	lr

080030f4 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80030f4:	4770      	bx	lr

080030f6 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80030f6:	6041      	str	r1, [r0, #4]
    }
 80030f8:	4770      	bx	lr

080030fa <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80030fa:	4770      	bx	lr

080030fc <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80030fc:	2301      	movs	r3, #1
 80030fe:	7203      	strb	r3, [r0, #8]
    }
 8003100:	4770      	bx	lr

08003102 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003102:	4770      	bx	lr

08003104 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003104:	4770      	bx	lr

08003106 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003106:	b410      	push	{r4}
    {
        (pobject->*pmemfun_0)();
 8003108:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 800310a:	4603      	mov	r3, r0
        (pobject->*pmemfun_0)();
 800310c:	68c2      	ldr	r2, [r0, #12]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	1054      	asrs	r4, r2, #1
 8003112:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003116:	07d2      	lsls	r2, r2, #31
 8003118:	bf48      	it	mi
 800311a:	590a      	ldrmi	r2, [r1, r4]
    }
 800311c:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun_0)();
 8003120:	bf48      	it	mi
 8003122:	58d3      	ldrmi	r3, [r2, r3]
 8003124:	4718      	bx	r3

08003126 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8003126:	6843      	ldr	r3, [r0, #4]
 8003128:	b12b      	cbz	r3, 8003136 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 800312a:	6883      	ldr	r3, [r0, #8]
 800312c:	b92b      	cbnz	r3, 800313a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 800312e:	68c0      	ldr	r0, [r0, #12]
 8003130:	f000 0001 	and.w	r0, r0, #1
 8003134:	4770      	bx	lr
 8003136:	4618      	mov	r0, r3
 8003138:	4770      	bx	lr
 800313a:	2001      	movs	r0, #1
    }
 800313c:	4770      	bx	lr

0800313e <_ZN8touchgfx12NoTransitionD0Ev>:
 800313e:	b510      	push	{r4, lr}
 8003140:	4604      	mov	r4, r0
 8003142:	210c      	movs	r1, #12
 8003144:	f026 fe56 	bl	8029df4 <_ZdlPvj>
 8003148:	4620      	mov	r0, r4
 800314a:	bd10      	pop	{r4, pc}

0800314c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800314c:	b510      	push	{r4, lr}
 800314e:	4604      	mov	r4, r0
 8003150:	2110      	movs	r1, #16
 8003152:	f026 fe4f 	bl	8029df4 <_ZdlPvj>
 8003156:	4620      	mov	r0, r4
 8003158:	bd10      	pop	{r4, pc}

0800315a <_ZN23FrontendApplicationBaseD0Ev>:
 800315a:	b510      	push	{r4, lr}
 800315c:	4604      	mov	r4, r0
 800315e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003162:	f026 fe47 	bl	8029df4 <_ZdlPvj>
 8003166:	4620      	mov	r0, r4
 8003168:	bd10      	pop	{r4, pc}

0800316a <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 800316a:	b510      	push	{r4, lr}
        Application::getInstance()->draw();
 800316c:	f017 fe02 	bl	801ad74 <_ZN8touchgfx11Application11getInstanceEv>
 8003170:	6803      	ldr	r3, [r0, #0]
    }
 8003172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->draw();
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	4718      	bx	r3

0800317a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800317a:	b510      	push	{r4, lr}
 800317c:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800317e:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8003182:	b158      	cbz	r0, 800319c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003184:	6803      	ldr	r3, [r0, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	4798      	blx	r3
 800318a:	b138      	cbz	r0, 800319c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 800318c:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8003190:	6803      	ldr	r3, [r0, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 800319c:	bd10      	pop	{r4, pc}
	...

080031a0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/callscreen_screen/callScreenView.hpp>
#include <gui/callscreen_screen/callScreenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80031a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a2:	4604      	mov	r4, r0
 80031a4:	4617      	mov	r7, r2
 80031a6:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 80031a8:	f017 fe06 	bl	801adb8 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80031ac:	4b10      	ldr	r3, [pc, #64]	; (80031f0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 80031ae:	2500      	movs	r5, #0
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 80031b0:	2101      	movs	r1, #1
        instance = this;
 80031b2:	601c      	str	r4, [r3, #0]
      model(m)
 80031b4:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 80031b6:	e9c4 7654 	strd	r7, r6, [r4, #336]	; 0x150
        return instance;
 80031ba:	4e0f      	ldr	r6, [pc, #60]	; (80031f8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 80031bc:	6023      	str	r3, [r4, #0]
 80031be:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun_0(0)
 80031c0:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 80031c2:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
 80031c6:	e9c4 3550 	strd	r3, r5, [r4, #320]	; 0x140
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 80031ca:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 80031cc:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 80031d4:	4628      	mov	r0, r5
 80031d6:	f000 fb1b 	bl	8003810 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80031da:	6833      	ldr	r3, [r6, #0]
 80031dc:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80031e0:	b10a      	cbz	r2, 80031e6 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 80031e2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80031e4:	b900      	cbnz	r0, 80031e8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 80031e6:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 80031e8:	f01f fca1 	bl	8022b2e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 80031ec:	4620      	mov	r0, r4
 80031ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031f0:	2002b8ec 	.word	0x2002b8ec
 80031f4:	0802d2a8 	.word	0x0802d2a8
 80031f8:	2002b8a0 	.word	0x2002b8a0
 80031fc:	0802d290 	.word	0x0802d290

08003200 <_ZN23FrontendApplicationBase33gotoenterScreenScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003200:	4b06      	ldr	r3, [pc, #24]	; (800321c <_ZN23FrontendApplicationBase33gotoenterScreenScreenNoTransitionEv+0x1c>)
 8003202:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8003206:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 800320a:	2300      	movs	r3, #0
 800320c:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// enterScreen

void FrontendApplicationBase::gotoenterScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoenterScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003210:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8003214:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	08003381 	.word	0x08003381

08003220 <_ZN23FrontendApplicationBase32gotocallScreenScreenNoTransitionEv>:
 8003220:	4b06      	ldr	r3, [pc, #24]	; (800323c <_ZN23FrontendApplicationBase32gotocallScreenScreenNoTransitionEv+0x1c>)
 8003222:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8003226:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 800322a:	2300      	movs	r3, #0
 800322c:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// callScreen

void FrontendApplicationBase::gotocallScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotocallScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003230:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8003234:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	080034e9 	.word	0x080034e9

08003240 <_ZN8touchgfx14makeTransitionI15enterScreenView20enterScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8003240:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003244:	4607      	mov	r7, r0
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003246:	6890      	ldr	r0, [r2, #8]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8003248:	4699      	mov	r9, r3
 800324a:	4688      	mov	r8, r1
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800324c:	6803      	ldr	r3, [r0, #0]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800324e:	4614      	mov	r4, r2
 8003250:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	4798      	blx	r3
 8003258:	f240 5343 	movw	r3, #1347	; 0x543
 800325c:	4298      	cmp	r0, r3
 800325e:	d805      	bhi.n	800326c <_ZN8touchgfx14makeTransitionI15enterScreenView20enterScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x2c>
 8003260:	4b41      	ldr	r3, [pc, #260]	; (8003368 <_ZN8touchgfx14makeTransitionI15enterScreenView20enterScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>)
 8003262:	21a3      	movs	r1, #163	; 0xa3
 8003264:	4a41      	ldr	r2, [pc, #260]	; (800336c <_ZN8touchgfx14makeTransitionI15enterScreenView20enterScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003266:	4842      	ldr	r0, [pc, #264]	; (8003370 <_ZN8touchgfx14makeTransitionI15enterScreenView20enterScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>)
 8003268:	f026 fdf2 	bl	8029e50 <__assert_func>
 800326c:	6860      	ldr	r0, [r4, #4]
 800326e:	6803      	ldr	r3, [r0, #0]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	4798      	blx	r3
 8003274:	280f      	cmp	r0, #15
 8003276:	d803      	bhi.n	8003280 <_ZN8touchgfx14makeTransitionI15enterScreenView20enterScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x40>
 8003278:	4b3e      	ldr	r3, [pc, #248]	; (8003374 <_ZN8touchgfx14makeTransitionI15enterScreenView20enterScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 800327a:	21a4      	movs	r1, #164	; 0xa4
 800327c:	4a3b      	ldr	r2, [pc, #236]	; (800336c <_ZN8touchgfx14makeTransitionI15enterScreenView20enterScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 800327e:	e7f2      	b.n	8003266 <_ZN8touchgfx14makeTransitionI15enterScreenView20enterScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x26>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003280:	68e0      	ldr	r0, [r4, #12]
 8003282:	6803      	ldr	r3, [r0, #0]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	4798      	blx	r3
 8003288:	280b      	cmp	r0, #11
 800328a:	d803      	bhi.n	8003294 <_ZN8touchgfx14makeTransitionI15enterScreenView20enterScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x54>
 800328c:	4b3a      	ldr	r3, [pc, #232]	; (8003378 <_ZN8touchgfx14makeTransitionI15enterScreenView20enterScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 800328e:	21a5      	movs	r1, #165	; 0xa5
 8003290:	4a36      	ldr	r2, [pc, #216]	; (800336c <_ZN8touchgfx14makeTransitionI15enterScreenView20enterScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 8003292:	e7e8      	b.n	8003266 <_ZN8touchgfx14makeTransitionI15enterScreenView20enterScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x26>
    Application::getInstance()->clearAllTimerWidgets();
 8003294:	f017 fd6e 	bl	801ad74 <_ZN8touchgfx11Application11getInstanceEv>
 8003298:	f017 fd72 	bl	801ad80 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800329c:	f8d9 0000 	ldr.w	r0, [r9]
 80032a0:	b110      	cbz	r0, 80032a8 <_ZN8touchgfx14makeTransitionI15enterScreenView20enterScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x68>
        (*currentTrans)->tearDown();
 80032a2:	6803      	ldr	r3, [r0, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	4798      	blx	r3
    if (*currentTrans)
 80032a8:	f8d9 0000 	ldr.w	r0, [r9]
 80032ac:	b110      	cbz	r0, 80032b4 <_ZN8touchgfx14makeTransitionI15enterScreenView20enterScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x74>
        (*currentTrans)->~Transition();
 80032ae:	6803      	ldr	r3, [r0, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4798      	blx	r3
    if (*currentScreen)
 80032b4:	6838      	ldr	r0, [r7, #0]
 80032b6:	b110      	cbz	r0, 80032be <_ZN8touchgfx14makeTransitionI15enterScreenView20enterScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
        (*currentScreen)->tearDownScreen();
 80032b8:	6803      	ldr	r3, [r0, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	4798      	blx	r3
    if (*currentPresenter)
 80032be:	f8d8 0000 	ldr.w	r0, [r8]
 80032c2:	b110      	cbz	r0, 80032ca <_ZN8touchgfx14makeTransitionI15enterScreenView20enterScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x8a>
        (*currentPresenter)->deactivate();
 80032c4:	6803      	ldr	r3, [r0, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	4798      	blx	r3
    if (*currentScreen)
 80032ca:	6838      	ldr	r0, [r7, #0]
 80032cc:	b110      	cbz	r0, 80032d4 <_ZN8touchgfx14makeTransitionI15enterScreenView20enterScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x94>
        (*currentScreen)->~Screen();
 80032ce:	6803      	ldr	r3, [r0, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4798      	blx	r3
    if (*currentPresenter)
 80032d4:	f8d8 0000 	ldr.w	r0, [r8]
 80032d8:	b110      	cbz	r0, 80032e0 <_ZN8touchgfx14makeTransitionI15enterScreenView20enterScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xa0>
        (*currentPresenter)->~Presenter();
 80032da:	6803      	ldr	r3, [r0, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80032e0:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80032e2:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 80032e4:	f04f 0b00 	mov.w	fp, #0
 80032e8:	6803      	ldr	r3, [r0, #0]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	4798      	blx	r3
 80032ee:	4b23      	ldr	r3, [pc, #140]	; (800337c <_ZN8touchgfx14makeTransitionI15enterScreenView20enterScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 80032f0:	4605      	mov	r5, r0
 80032f2:	f8c0 b004 	str.w	fp, [r0, #4]
 80032f6:	6003      	str	r3, [r0, #0]
 80032f8:	4659      	mov	r1, fp
 80032fa:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80032fe:	68a0      	ldr	r0, [r4, #8]
 8003300:	6803      	ldr	r3, [r0, #0]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	4798      	blx	r3
 8003306:	4606      	mov	r6, r0
 8003308:	f001 f8f8 	bl	80044fc <_ZN15enterScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800330c:	6860      	ldr	r0, [r4, #4]
 800330e:	4659      	mov	r1, fp
 8003310:	6803      	ldr	r3, [r0, #0]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	4798      	blx	r3
 8003316:	4604      	mov	r4, r0
 8003318:	4631      	mov	r1, r6
 800331a:	f001 f8d5 	bl	80044c8 <_ZN20enterScreenPresenterC1ER15enterScreenView>
    *currentTrans = newTransition;
 800331e:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
 8003322:	f8c8 4000 	str.w	r4, [r8]
    *currentScreen = newScreen;
 8003326:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 8003328:	b1e4      	cbz	r4, 8003364 <_ZN8touchgfx14makeTransitionI15enterScreenView20enterScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x124>
 800332a:	1d23      	adds	r3, r4, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 800332c:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003330:	4630      	mov	r0, r6
 8003332:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003334:	f8c4 a008 	str.w	sl, [r4, #8]
 8003338:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
    {
        this->presenter = &presenter;
 800333a:	63f4      	str	r4, [r6, #60]	; 0x3c
 800333c:	4798      	blx	r3
    newPresenter->activate();
 800333e:	6823      	ldr	r3, [r4, #0]
 8003340:	4620      	mov	r0, r4
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003346:	4629      	mov	r1, r5
 8003348:	4630      	mov	r0, r6
 800334a:	f019 f8df 	bl	801c50c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800334e:	682b      	ldr	r3, [r5, #0]
 8003350:	4628      	mov	r0, r5
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	4798      	blx	r3
    newTransition->invalidate();
 8003356:	682b      	ldr	r3, [r5, #0]
 8003358:	4628      	mov	r0, r5
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	4798      	blx	r3
    newScreen->bind(*newPresenter);

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
}
 800335e:	4620      	mov	r0, r4
 8003360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    model->bind(newPresenter);
 8003364:	4623      	mov	r3, r4
 8003366:	e7e1      	b.n	800332c <_ZN8touchgfx14makeTransitionI15enterScreenView20enterScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xec>
 8003368:	0802ce54 	.word	0x0802ce54
 800336c:	0802cee2 	.word	0x0802cee2
 8003370:	0802cfee 	.word	0x0802cfee
 8003374:	0802d035 	.word	0x0802d035
 8003378:	0802d0d8 	.word	0x0802d0d8
 800337c:	0802d2ec 	.word	0x0802d2ec

08003380 <_ZN23FrontendApplicationBase37gotoenterScreenScreenNoTransitionImplEv>:
    touchgfx::makeTransition<enterScreenView, enterScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003380:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
{
 8003384:	b507      	push	{r0, r1, r2, lr}
    touchgfx::makeTransition<enterScreenView, enterScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003386:	f500 719c 	add.w	r1, r0, #312	; 0x138
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <_ZN23FrontendApplicationBase37gotoenterScreenScreenNoTransitionImplEv+0x20>)
 800338e:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8003392:	4804      	ldr	r0, [pc, #16]	; (80033a4 <_ZN23FrontendApplicationBase37gotoenterScreenScreenNoTransitionImplEv+0x24>)
 8003394:	f7ff ff54 	bl	8003240 <_ZN8touchgfx14makeTransitionI15enterScreenView20enterScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8003398:	b003      	add	sp, #12
 800339a:	f85d fb04 	ldr.w	pc, [sp], #4
 800339e:	bf00      	nop
 80033a0:	2002b8e0 	.word	0x2002b8e0
 80033a4:	2002b8dc 	.word	0x2002b8dc

080033a8 <_ZN8touchgfx14makeTransitionI14callScreenView19callScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80033a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033ac:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80033ae:	6890      	ldr	r0, [r2, #8]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80033b0:	4699      	mov	r9, r3
 80033b2:	4688      	mov	r8, r1
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80033b4:	6803      	ldr	r3, [r0, #0]
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80033b6:	4614      	mov	r4, r2
 80033b8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	4798      	blx	r3
 80033c0:	f5b0 7fce 	cmp.w	r0, #412	; 0x19c
 80033c4:	d205      	bcs.n	80033d2 <_ZN8touchgfx14makeTransitionI14callScreenView19callScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x2a>
 80033c6:	4b42      	ldr	r3, [pc, #264]	; (80034d0 <_ZN8touchgfx14makeTransitionI14callScreenView19callScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x128>)
 80033c8:	21a3      	movs	r1, #163	; 0xa3
 80033ca:	4a42      	ldr	r2, [pc, #264]	; (80034d4 <_ZN8touchgfx14makeTransitionI14callScreenView19callScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80033cc:	4842      	ldr	r0, [pc, #264]	; (80034d8 <_ZN8touchgfx14makeTransitionI14callScreenView19callScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>)
 80033ce:	f026 fd3f 	bl	8029e50 <__assert_func>
 80033d2:	6860      	ldr	r0, [r4, #4]
 80033d4:	6803      	ldr	r3, [r0, #0]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	4798      	blx	r3
 80033da:	280f      	cmp	r0, #15
 80033dc:	d803      	bhi.n	80033e6 <_ZN8touchgfx14makeTransitionI14callScreenView19callScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x3e>
 80033de:	4b3f      	ldr	r3, [pc, #252]	; (80034dc <_ZN8touchgfx14makeTransitionI14callScreenView19callScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>)
 80033e0:	21a4      	movs	r1, #164	; 0xa4
 80033e2:	4a3c      	ldr	r2, [pc, #240]	; (80034d4 <_ZN8touchgfx14makeTransitionI14callScreenView19callScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 80033e4:	e7f2      	b.n	80033cc <_ZN8touchgfx14makeTransitionI14callScreenView19callScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80033e6:	68e0      	ldr	r0, [r4, #12]
 80033e8:	6803      	ldr	r3, [r0, #0]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	4798      	blx	r3
 80033ee:	280b      	cmp	r0, #11
 80033f0:	d803      	bhi.n	80033fa <_ZN8touchgfx14makeTransitionI14callScreenView19callScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x52>
 80033f2:	4b3b      	ldr	r3, [pc, #236]	; (80034e0 <_ZN8touchgfx14makeTransitionI14callScreenView19callScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x138>)
 80033f4:	21a5      	movs	r1, #165	; 0xa5
 80033f6:	4a37      	ldr	r2, [pc, #220]	; (80034d4 <_ZN8touchgfx14makeTransitionI14callScreenView19callScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>)
 80033f8:	e7e8      	b.n	80033cc <_ZN8touchgfx14makeTransitionI14callScreenView19callScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x24>
    Application::getInstance()->clearAllTimerWidgets();
 80033fa:	f017 fcbb 	bl	801ad74 <_ZN8touchgfx11Application11getInstanceEv>
 80033fe:	f017 fcbf 	bl	801ad80 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8003402:	f8d9 0000 	ldr.w	r0, [r9]
 8003406:	b110      	cbz	r0, 800340e <_ZN8touchgfx14makeTransitionI14callScreenView19callScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x66>
        (*currentTrans)->tearDown();
 8003408:	6803      	ldr	r3, [r0, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	4798      	blx	r3
    if (*currentTrans)
 800340e:	f8d9 0000 	ldr.w	r0, [r9]
 8003412:	b110      	cbz	r0, 800341a <_ZN8touchgfx14makeTransitionI14callScreenView19callScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x72>
        (*currentTrans)->~Transition();
 8003414:	6803      	ldr	r3, [r0, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4798      	blx	r3
    if (*currentScreen)
 800341a:	6838      	ldr	r0, [r7, #0]
 800341c:	b110      	cbz	r0, 8003424 <_ZN8touchgfx14makeTransitionI14callScreenView19callScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
        (*currentScreen)->tearDownScreen();
 800341e:	6803      	ldr	r3, [r0, #0]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	4798      	blx	r3
    if (*currentPresenter)
 8003424:	f8d8 0000 	ldr.w	r0, [r8]
 8003428:	b110      	cbz	r0, 8003430 <_ZN8touchgfx14makeTransitionI14callScreenView19callScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x88>
        (*currentPresenter)->deactivate();
 800342a:	6803      	ldr	r3, [r0, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	4798      	blx	r3
    if (*currentScreen)
 8003430:	6838      	ldr	r0, [r7, #0]
 8003432:	b110      	cbz	r0, 800343a <_ZN8touchgfx14makeTransitionI14callScreenView19callScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x92>
        (*currentScreen)->~Screen();
 8003434:	6803      	ldr	r3, [r0, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4798      	blx	r3
    if (*currentPresenter)
 800343a:	f8d8 0000 	ldr.w	r0, [r8]
 800343e:	b110      	cbz	r0, 8003446 <_ZN8touchgfx14makeTransitionI14callScreenView19callScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x9e>
        (*currentPresenter)->~Presenter();
 8003440:	6803      	ldr	r3, [r0, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003446:	68e0      	ldr	r0, [r4, #12]
 8003448:	2100      	movs	r1, #0
 800344a:	f04f 0b00 	mov.w	fp, #0
 800344e:	6803      	ldr	r3, [r0, #0]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	4798      	blx	r3
 8003454:	4b23      	ldr	r3, [pc, #140]	; (80034e4 <_ZN8touchgfx14makeTransitionI14callScreenView19callScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x13c>)
 8003456:	4605      	mov	r5, r0
 8003458:	f8c0 b004 	str.w	fp, [r0, #4]
 800345c:	6003      	str	r3, [r0, #0]
 800345e:	4659      	mov	r1, fp
 8003460:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003464:	68a0      	ldr	r0, [r4, #8]
 8003466:	6803      	ldr	r3, [r0, #0]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	4798      	blx	r3
 800346c:	4606      	mov	r6, r0
 800346e:	f001 f813 	bl	8004498 <_ZN14callScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003472:	6860      	ldr	r0, [r4, #4]
 8003474:	4659      	mov	r1, fp
 8003476:	6803      	ldr	r3, [r0, #0]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	4798      	blx	r3
 800347c:	4604      	mov	r4, r0
 800347e:	4631      	mov	r1, r6
 8003480:	f000 fff0 	bl	8004464 <_ZN19callScreenPresenterC1ER14callScreenView>
    *currentTrans = newTransition;
 8003484:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
 8003488:	f8c8 4000 	str.w	r4, [r8]
    *currentScreen = newScreen;
 800348c:	603e      	str	r6, [r7, #0]
    model->bind(newPresenter);
 800348e:	b1e4      	cbz	r4, 80034ca <_ZN8touchgfx14makeTransitionI14callScreenView19callScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x122>
 8003490:	1d23      	adds	r3, r4, #4
 8003492:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003496:	4630      	mov	r0, r6
 8003498:	6833      	ldr	r3, [r6, #0]
 800349a:	f8c4 a008 	str.w	sl, [r4, #8]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	63f4      	str	r4, [r6, #60]	; 0x3c
 80034a2:	4798      	blx	r3
    newPresenter->activate();
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	4620      	mov	r0, r4
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80034ac:	4629      	mov	r1, r5
 80034ae:	4630      	mov	r0, r6
 80034b0:	f019 f82c 	bl	801c50c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80034b4:	682b      	ldr	r3, [r5, #0]
 80034b6:	4628      	mov	r0, r5
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	4798      	blx	r3
    newTransition->invalidate();
 80034bc:	682b      	ldr	r3, [r5, #0]
 80034be:	4628      	mov	r0, r5
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	4798      	blx	r3
}
 80034c4:	4620      	mov	r0, r4
 80034c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    model->bind(newPresenter);
 80034ca:	4623      	mov	r3, r4
 80034cc:	e7e1      	b.n	8003492 <_ZN8touchgfx14makeTransitionI14callScreenView19callScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xea>
 80034ce:	bf00      	nop
 80034d0:	0802ce54 	.word	0x0802ce54
 80034d4:	0802d17b 	.word	0x0802d17b
 80034d8:	0802cfee 	.word	0x0802cfee
 80034dc:	0802d035 	.word	0x0802d035
 80034e0:	0802d0d8 	.word	0x0802d0d8
 80034e4:	0802d2ec 	.word	0x0802d2ec

080034e8 <_ZN23FrontendApplicationBase36gotocallScreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotocallScreenScreenNoTransitionImpl()
{
    touchgfx::makeTransition<callScreenView, callScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80034e8:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
{
 80034ec:	b507      	push	{r0, r1, r2, lr}
    touchgfx::makeTransition<callScreenView, callScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80034ee:	f500 719c 	add.w	r1, r0, #312	; 0x138
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	4b04      	ldr	r3, [pc, #16]	; (8003508 <_ZN23FrontendApplicationBase36gotocallScreenScreenNoTransitionImplEv+0x20>)
 80034f6:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 80034fa:	4804      	ldr	r0, [pc, #16]	; (800350c <_ZN23FrontendApplicationBase36gotocallScreenScreenNoTransitionImplEv+0x24>)
 80034fc:	f7ff ff54 	bl	80033a8 <_ZN8touchgfx14makeTransitionI14callScreenView19callScreenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8003500:	b003      	add	sp, #12
 8003502:	f85d fb04 	ldr.w	pc, [sp], #4
 8003506:	bf00      	nop
 8003508:	2002b8e0 	.word	0x2002b8e0
 800350c:	2002b8dc 	.word	0x2002b8dc

08003510 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003510:	6a00      	ldr	r0, [r0, #32]
 8003512:	4770      	bx	lr

08003514 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003514:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003516:	4770      	bx	lr

08003518 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003518:	4770      	bx	lr

0800351a <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800351a:	888b      	ldrh	r3, [r1, #4]
 800351c:	6980      	ldr	r0, [r0, #24]
 800351e:	0adb      	lsrs	r3, r3, #11
 8003520:	680a      	ldr	r2, [r1, #0]
 8003522:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8003526:	4410      	add	r0, r2
 8003528:	4770      	bx	lr

0800352a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800352a:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 800352c:	b1c2      	cbz	r2, 8003560 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 800352e:	7b13      	ldrb	r3, [r2, #12]
 8003530:	b1b3      	cbz	r3, 8003560 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003532:	7b54      	ldrb	r4, [r2, #13]
 8003534:	7ad2      	ldrb	r2, [r2, #11]
 8003536:	0224      	lsls	r4, r4, #8
 8003538:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800353c:	4314      	orrs	r4, r2
 800353e:	69c2      	ldr	r2, [r0, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003540:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003542:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003546:	8813      	ldrh	r3, [r2, #0]
 8003548:	428b      	cmp	r3, r1
 800354a:	d102      	bne.n	8003552 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 800354c:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 8003550:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8003552:	d805      	bhi.n	8003560 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003554:	3801      	subs	r0, #1
 8003556:	3204      	adds	r2, #4
 8003558:	b280      	uxth	r0, r0
 800355a:	2800      	cmp	r0, #0
 800355c:	d1f3      	bne.n	8003546 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800355e:	e7f7      	b.n	8003550 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003560:	2000      	movs	r0, #0
 8003562:	e7f5      	b.n	8003550 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08003564 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003564:	b510      	push	{r4, lr}
 8003566:	4604      	mov	r4, r0
 8003568:	2128      	movs	r1, #40	; 0x28
 800356a:	f026 fc43 	bl	8029df4 <_ZdlPvj>
 800356e:	4620      	mov	r0, r4
 8003570:	bd10      	pop	{r4, pc}
	...

08003574 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003574:	b530      	push	{r4, r5, lr}
 8003576:	b089      	sub	sp, #36	; 0x24
 8003578:	4604      	mov	r4, r0
      arabicTable(formsTable)
 800357a:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 800357e:	9506      	str	r5, [sp, #24]
 8003580:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8003584:	9505      	str	r5, [sp, #20]
 8003586:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 800358a:	9504      	str	r5, [sp, #16]
 800358c:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8003590:	9503      	str	r5, [sp, #12]
 8003592:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8003596:	9502      	str	r5, [sp, #8]
 8003598:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 800359c:	9501      	str	r5, [sp, #4]
 800359e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80035a2:	9500      	str	r5, [sp, #0]
 80035a4:	f018 fc12 	bl	801bdcc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80035a8:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
}
 80035aa:	4620      	mov	r0, r4
      arabicTable(formsTable)
 80035ac:	6023      	str	r3, [r4, #0]
 80035ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80035b0:	61a3      	str	r3, [r4, #24]
 80035b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80035b4:	61e3      	str	r3, [r4, #28]
 80035b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80035b8:	6223      	str	r3, [r4, #32]
 80035ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80035bc:	6263      	str	r3, [r4, #36]	; 0x24
}
 80035be:	b009      	add	sp, #36	; 0x24
 80035c0:	bd30      	pop	{r4, r5, pc}
 80035c2:	bf00      	nop
 80035c4:	0802d310 	.word	0x0802d310

080035c8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80035c8:	4770      	bx	lr
	...

080035cc <_Z23getFont_verdana_10_4bppv>:
{
 80035cc:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80035ce:	4d15      	ldr	r5, [pc, #84]	; (8003624 <_Z23getFont_verdana_10_4bppv+0x58>)
{
 80035d0:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80035d2:	782c      	ldrb	r4, [r5, #0]
 80035d4:	f3bf 8f5b 	dmb	ish
 80035d8:	f014 0401 	ands.w	r4, r4, #1
 80035dc:	d11e      	bne.n	800361c <_Z23getFont_verdana_10_4bppv+0x50>
 80035de:	4628      	mov	r0, r5
 80035e0:	f026 fc0a 	bl	8029df8 <__cxa_guard_acquire>
 80035e4:	b1d0      	cbz	r0, 800361c <_Z23getFont_verdana_10_4bppv+0x50>
 80035e6:	233f      	movs	r3, #63	; 0x3f
 80035e8:	2201      	movs	r2, #1
 80035ea:	490f      	ldr	r1, [pc, #60]	; (8003628 <_Z23getFont_verdana_10_4bppv+0x5c>)
 80035ec:	9307      	str	r3, [sp, #28]
 80035ee:	4b0f      	ldr	r3, [pc, #60]	; (800362c <_Z23getFont_verdana_10_4bppv+0x60>)
 80035f0:	480f      	ldr	r0, [pc, #60]	; (8003630 <_Z23getFont_verdana_10_4bppv+0x64>)
 80035f2:	9306      	str	r3, [sp, #24]
 80035f4:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <_Z23getFont_verdana_10_4bppv+0x68>)
 80035f6:	9408      	str	r4, [sp, #32]
 80035f8:	9403      	str	r4, [sp, #12]
 80035fa:	9400      	str	r4, [sp, #0]
 80035fc:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8003600:	2304      	movs	r3, #4
 8003602:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003606:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800360a:	230a      	movs	r3, #10
 800360c:	f7ff ffb2 	bl	8003574 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003610:	4628      	mov	r0, r5
 8003612:	f026 fbfd 	bl	8029e10 <__cxa_guard_release>
 8003616:	4808      	ldr	r0, [pc, #32]	; (8003638 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8003618:	f026 fc38 	bl	8029e8c <atexit>
    return verdana_10_4bpp;
}
 800361c:	4804      	ldr	r0, [pc, #16]	; (8003630 <_Z23getFont_verdana_10_4bppv+0x64>)
 800361e:	b00d      	add	sp, #52	; 0x34
 8003620:	bd30      	pop	{r4, r5, pc}
 8003622:	bf00      	nop
 8003624:	200185e8 	.word	0x200185e8
 8003628:	90040488 	.word	0x90040488
 800362c:	08032178 	.word	0x08032178
 8003630:	200185ec 	.word	0x200185ec
 8003634:	08032184 	.word	0x08032184
 8003638:	080035c9 	.word	0x080035c9

0800363c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 21, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800363c:	4770      	bx	lr
	...

08003640 <_Z23getFont_verdana_20_4bppv>:
{
 8003640:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 21, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003642:	4d15      	ldr	r5, [pc, #84]	; (8003698 <_Z23getFont_verdana_20_4bppv+0x58>)
{
 8003644:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 21, 20, 4, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003646:	782c      	ldrb	r4, [r5, #0]
 8003648:	f3bf 8f5b 	dmb	ish
 800364c:	f014 0401 	ands.w	r4, r4, #1
 8003650:	d11f      	bne.n	8003692 <_Z23getFont_verdana_20_4bppv+0x52>
 8003652:	4628      	mov	r0, r5
 8003654:	f026 fbd0 	bl	8029df8 <__cxa_guard_acquire>
 8003658:	b1d8      	cbz	r0, 8003692 <_Z23getFont_verdana_20_4bppv+0x52>
 800365a:	233f      	movs	r3, #63	; 0x3f
 800365c:	2201      	movs	r2, #1
 800365e:	490f      	ldr	r1, [pc, #60]	; (800369c <_Z23getFont_verdana_20_4bppv+0x5c>)
 8003660:	9307      	str	r3, [sp, #28]
 8003662:	4b0f      	ldr	r3, [pc, #60]	; (80036a0 <_Z23getFont_verdana_20_4bppv+0x60>)
 8003664:	480f      	ldr	r0, [pc, #60]	; (80036a4 <_Z23getFont_verdana_20_4bppv+0x64>)
 8003666:	9306      	str	r3, [sp, #24]
 8003668:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <_Z23getFont_verdana_20_4bppv+0x68>)
 800366a:	9408      	str	r4, [sp, #32]
 800366c:	9403      	str	r4, [sp, #12]
 800366e:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8003672:	2304      	movs	r3, #4
 8003674:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003678:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	2215      	movs	r2, #21
 8003680:	2314      	movs	r3, #20
 8003682:	f7ff ff77 	bl	8003574 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003686:	4628      	mov	r0, r5
 8003688:	f026 fbc2 	bl	8029e10 <__cxa_guard_release>
 800368c:	4807      	ldr	r0, [pc, #28]	; (80036ac <_Z23getFont_verdana_20_4bppv+0x6c>)
 800368e:	f026 fbfd 	bl	8029e8c <atexit>
    return verdana_20_4bpp;
}
 8003692:	4804      	ldr	r0, [pc, #16]	; (80036a4 <_Z23getFont_verdana_20_4bppv+0x64>)
 8003694:	b00d      	add	sp, #52	; 0x34
 8003696:	bd30      	pop	{r4, r5, pc}
 8003698:	20018614 	.word	0x20018614
 800369c:	90040498 	.word	0x90040498
 80036a0:	0803217c 	.word	0x0803217c
 80036a4:	20018618 	.word	0x20018618
 80036a8:	08032188 	.word	0x08032188
 80036ac:	0800363d 	.word	0x0800363d

080036b0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 16, 40, 1, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80036b0:	4770      	bx	lr
	...

080036b4 <_Z23getFont_verdana_40_4bppv>:
{
 80036b4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 16, 40, 1, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80036b6:	4d15      	ldr	r5, [pc, #84]	; (800370c <_Z23getFont_verdana_40_4bppv+0x58>)
{
 80036b8:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 16, 40, 1, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80036ba:	782c      	ldrb	r4, [r5, #0]
 80036bc:	f3bf 8f5b 	dmb	ish
 80036c0:	f014 0401 	ands.w	r4, r4, #1
 80036c4:	d11f      	bne.n	8003706 <_Z23getFont_verdana_40_4bppv+0x52>
 80036c6:	4628      	mov	r0, r5
 80036c8:	f026 fb96 	bl	8029df8 <__cxa_guard_acquire>
 80036cc:	b1d8      	cbz	r0, 8003706 <_Z23getFont_verdana_40_4bppv+0x52>
 80036ce:	233f      	movs	r3, #63	; 0x3f
 80036d0:	2204      	movs	r2, #4
 80036d2:	490f      	ldr	r1, [pc, #60]	; (8003710 <_Z23getFont_verdana_40_4bppv+0x5c>)
 80036d4:	9307      	str	r3, [sp, #28]
 80036d6:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <_Z23getFont_verdana_40_4bppv+0x60>)
 80036d8:	480f      	ldr	r0, [pc, #60]	; (8003718 <_Z23getFont_verdana_40_4bppv+0x64>)
 80036da:	9306      	str	r3, [sp, #24]
 80036dc:	4b0f      	ldr	r3, [pc, #60]	; (800371c <_Z23getFont_verdana_40_4bppv+0x68>)
 80036de:	9408      	str	r4, [sp, #32]
 80036e0:	9403      	str	r4, [sp, #12]
 80036e2:	e9cd 4304 	strd	r4, r3, [sp, #16]
 80036e6:	2301      	movs	r3, #1
 80036e8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80036ec:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	2210      	movs	r2, #16
 80036f4:	2328      	movs	r3, #40	; 0x28
 80036f6:	f7ff ff3d 	bl	8003574 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80036fa:	4628      	mov	r0, r5
 80036fc:	f026 fb88 	bl	8029e10 <__cxa_guard_release>
 8003700:	4807      	ldr	r0, [pc, #28]	; (8003720 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8003702:	f026 fbc3 	bl	8029e8c <atexit>
    return verdana_40_4bpp;
}
 8003706:	4804      	ldr	r0, [pc, #16]	; (8003718 <_Z23getFont_verdana_40_4bppv+0x64>)
 8003708:	b00d      	add	sp, #52	; 0x34
 800370a:	bd30      	pop	{r4, r5, pc}
 800370c:	20018640 	.word	0x20018640
 8003710:	900405c0 	.word	0x900405c0
 8003714:	08032180 	.word	0x08032180
 8003718:	20018644 	.word	0x20018644
 800371c:	0803218c 	.word	0x0803218c
 8003720:	080036b1 	.word	0x080036b1

08003724 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8003724:	2000      	movs	r0, #0
 8003726:	4770      	bx	lr

08003728 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8003728:	2000      	movs	r0, #0
 800372a:	4770      	bx	lr

0800372c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800372c:	b40e      	push	{r1, r2, r3}
 800372e:	b503      	push	{r0, r1, lr}
 8003730:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003732:	2100      	movs	r1, #0
{
 8003734:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8003738:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800373a:	f018 f97b 	bl	801ba34 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800373e:	b002      	add	sp, #8
 8003740:	f85d eb04 	ldr.w	lr, [sp], #4
 8003744:	b003      	add	sp, #12
 8003746:	4770      	bx	lr

08003748 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003748:	b40c      	push	{r2, r3}
 800374a:	b507      	push	{r0, r1, r2, lr}
 800374c:	ab04      	add	r3, sp, #16
 800374e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003752:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003754:	f018 f96e 	bl	801ba34 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003758:	b003      	add	sp, #12
 800375a:	f85d eb04 	ldr.w	lr, [sp], #4
 800375e:	b002      	add	sp, #8
 8003760:	4770      	bx	lr
	...

08003764 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003764:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8003766:	b510      	push	{r4, lr}
 8003768:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800376a:	b373      	cbz	r3, 80037ca <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800376c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 800376e:	b92b      	cbnz	r3, 800377c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003770:	4b18      	ldr	r3, [pc, #96]	; (80037d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8003772:	21c0      	movs	r1, #192	; 0xc0
 8003774:	4a18      	ldr	r2, [pc, #96]	; (80037d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8003776:	4819      	ldr	r0, [pc, #100]	; (80037dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8003778:	f026 fb6a 	bl	8029e50 <__assert_func>
            return buffer[pos];
 800377c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 800377e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003782:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003784:	b30b      	cbz	r3, 80037ca <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8003786:	f019 fc31 	bl	801cfec <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 800378a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800378c:	2b01      	cmp	r3, #1
 800378e:	d803      	bhi.n	8003798 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8003790:	4b13      	ldr	r3, [pc, #76]	; (80037e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003792:	21c5      	movs	r1, #197	; 0xc5
 8003794:	4a13      	ldr	r2, [pc, #76]	; (80037e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003796:	e7ee      	b.n	8003776 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8003798:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800379a:	f640 103f 	movw	r0, #2367	; 0x93f
 800379e:	1c53      	adds	r3, r2, #1
 80037a0:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 80037a2:	2b09      	cmp	r3, #9
 80037a4:	4619      	mov	r1, r3
 80037a6:	bf88      	it	hi
 80037a8:	f1a3 010a 	subhi.w	r1, r3, #10
 80037ac:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80037b0:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 80037b2:	4281      	cmp	r1, r0
 80037b4:	d109      	bne.n	80037ca <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 80037b6:	2b0a      	cmp	r3, #10
 80037b8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80037bc:	bf28      	it	cs
 80037be:	2300      	movcs	r3, #0
            return buffer[pos];
 80037c0:	8c50      	ldrh	r0, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80037c2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80037c6:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 80037c8:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 80037ca:	4620      	mov	r0, r4
}
 80037cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80037d0:	f019 baf0 	b.w	801cdb4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80037d4:	0802d360 	.word	0x0802d360
 80037d8:	0802d369 	.word	0x0802d369
 80037dc:	0802d414 	.word	0x0802d414
 80037e0:	0802d45e 	.word	0x0802d45e
 80037e4:	0802d46c 	.word	0x0802d46c

080037e8 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 80037e8:	f019 ba9c 	b.w	801cd24 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080037ec <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80037ec:	b510      	push	{r4, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	ac02      	add	r4, sp, #8
 80037f2:	e884 0006 	stmia.w	r4, {r1, r2}
 80037f6:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 80037f8:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80037fa:	4621      	mov	r1, r4
    va_start(pArg, format);
 80037fc:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80037fe:	9301      	str	r3, [sp, #4]
 8003800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	9b08      	ldr	r3, [sp, #32]
 8003806:	f016 fe2b 	bl	801a460 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800380a:	b006      	add	sp, #24
 800380c:	bd10      	pop	{r4, pc}
	...

08003810 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8003810:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8003812:	bb18      	cbnz	r0, 800385c <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003814:	4b12      	ldr	r3, [pc, #72]	; (8003860 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8003816:	4813      	ldr	r0, [pc, #76]	; (8003864 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4913      	ldr	r1, [pc, #76]	; (8003868 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 800381c:	b1b3      	cbz	r3, 800384c <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800381e:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003820:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003822:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8003824:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8003826:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	441a      	add	r2, r3
 800382c:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 800382e:	4b0f      	ldr	r3, [pc, #60]	; (800386c <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8003830:	2200      	movs	r2, #0
 8003832:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8003834:	f000 f838 	bl	80038a8 <_ZN17TypedTextDatabase8getFontsEv>
 8003838:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800383a:	f000 f833 	bl	80038a4 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 800383e:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8003840:	601c      	str	r4, [r3, #0]
        fonts = f;
 8003842:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8003844:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8003846:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8003848:	8018      	strh	r0, [r3, #0]
    }
}
 800384a:	e007      	b.n	800385c <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 800384c:	4b0b      	ldr	r3, [pc, #44]	; (800387c <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 800384e:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8003852:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8003854:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8003856:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8003858:	2c00      	cmp	r4, #0
 800385a:	d1e8      	bne.n	800382e <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 800385c:	bd38      	pop	{r3, r4, r5, pc}
 800385e:	bf00      	nop
 8003860:	2001866c 	.word	0x2001866c
 8003864:	20018670 	.word	0x20018670
 8003868:	20018674 	.word	0x20018674
 800386c:	20018678 	.word	0x20018678
 8003870:	2002b8f0 	.word	0x2002b8f0
 8003874:	2002b8f8 	.word	0x2002b8f8
 8003878:	2002b8f4 	.word	0x2002b8f4
 800387c:	90040700 	.word	0x90040700
 8003880:	900406a0 	.word	0x900406a0
 8003884:	90040780 	.word	0x90040780

08003888 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8003888:	4b04      	ldr	r3, [pc, #16]	; (800389c <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003890:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8003892:	681b      	ldr	r3, [r3, #0]
}
 8003894:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	20018674 	.word	0x20018674
 80038a0:	20018670 	.word	0x20018670

080038a4 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 80038a4:	2018      	movs	r0, #24
 80038a6:	4770      	bx	lr

080038a8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 80038a8:	4800      	ldr	r0, [pc, #0]	; (80038ac <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80038aa:	4770      	bx	lr
 80038ac:	2001867c 	.word	0x2001867c

080038b0 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80038b0:	b510      	push	{r4, lr}
};
 80038b2:	4c05      	ldr	r4, [pc, #20]	; (80038c8 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 80038b4:	f7ff fec4 	bl	8003640 <_Z23getFont_verdana_20_4bppv>
};
 80038b8:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 80038ba:	f7ff fefb 	bl	80036b4 <_Z23getFont_verdana_40_4bppv>
};
 80038be:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 80038c0:	f7ff fe84 	bl	80035cc <_Z23getFont_verdana_10_4bppv>
};
 80038c4:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 80038c6:	bd10      	pop	{r4, pc}
 80038c8:	2001867c 	.word	0x2001867c

080038cc <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 80038cc:	2000      	movs	r0, #0
 80038ce:	4770      	bx	lr

080038d0 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 80038d0:	8081      	strh	r1, [r0, #4]
    }
 80038d2:	4770      	bx	lr

080038d4 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 80038d4:	80c1      	strh	r1, [r0, #6]
    }
 80038d6:	4770      	bx	lr

080038d8 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 80038d8:	8101      	strh	r1, [r0, #8]
    }
 80038da:	4770      	bx	lr

080038dc <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 80038dc:	8141      	strh	r1, [r0, #10]
    }
 80038de:	4770      	bx	lr

080038e0 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 80038e0:	4770      	bx	lr

080038e2 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
    }
 80038e2:	4770      	bx	lr

080038e4 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
    }
 80038e4:	4770      	bx	lr

080038e6 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
    }
 80038e6:	4770      	bx	lr

080038e8 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 80038e8:	4770      	bx	lr

080038ea <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80038ea:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 80038ec:	88c4      	ldrh	r4, [r0, #6]
 80038ee:	6803      	ldr	r3, [r0, #0]
 80038f0:	1b12      	subs	r2, r2, r4
 80038f2:	8884      	ldrh	r4, [r0, #4]
 80038f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f6:	1b09      	subs	r1, r1, r4
 80038f8:	b212      	sxth	r2, r2
    }
 80038fa:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 80038fe:	b209      	sxth	r1, r1
 8003900:	4718      	bx	r3

08003902 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8003902:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003906:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003908:	f04f 33ff 	mov.w	r3, #4294967295
 800390c:	6203      	str	r3, [r0, #32]
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800390e:	6813      	ldr	r3, [r2, #0]
 8003910:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8003912:	6010      	str	r0, [r2, #0]
    }
 8003914:	4770      	bx	lr

08003916 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8003916:	4770      	bx	lr

08003918 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8003918:	4770      	bx	lr

0800391a <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 800391a:	4770      	bx	lr

0800391c <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 800391c:	4770      	bx	lr

0800391e <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
    }
 800391e:	4770      	bx	lr

08003920 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
    {
        (void)x;
        (void)y;
        if (isVisible() && isTouchable())
 8003920:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8003924:	b11a      	cbz	r2, 800392e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8003926:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 800392a:	b102      	cbz	r2, 800392e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 800392c:	6018      	str	r0, [r3, #0]
        }
    }
 800392e:	4770      	bx	lr

08003930 <_ZN18callScreenViewBaseD1Ev>:

class callScreenViewBase : public touchgfx::View<callScreenPresenter>
{
public:
    callScreenViewBase();
    virtual ~callScreenViewBase() {}
 8003930:	4770      	bx	lr

08003932 <_ZN18callScreenViewBase11setupScreenEv>:
}

void callScreenViewBase::setupScreen()
{

}
 8003932:	4770      	bx	lr

08003934 <_ZN8touchgfx8CallbackI18callScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003934:	4770      	bx	lr

08003936 <_ZN8touchgfx8CallbackI18callScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8003936:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003938:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800393a:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 800393c:	68c2      	ldr	r2, [r0, #12]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	1055      	asrs	r5, r2, #1
 8003942:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003946:	07d2      	lsls	r2, r2, #31
 8003948:	bf48      	it	mi
 800394a:	5962      	ldrmi	r2, [r4, r5]
    }
 800394c:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 800394e:	bf48      	it	mi
 8003950:	58d3      	ldrmi	r3, [r2, r3]
 8003952:	4718      	bx	r3

08003954 <_ZNK8touchgfx8CallbackI18callScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 8003954:	6843      	ldr	r3, [r0, #4]
 8003956:	b12b      	cbz	r3, 8003964 <_ZNK8touchgfx8CallbackI18callScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8003958:	6883      	ldr	r3, [r0, #8]
 800395a:	b92b      	cbnz	r3, 8003968 <_ZNK8touchgfx8CallbackI18callScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 800395c:	68c0      	ldr	r0, [r0, #12]
 800395e:	f000 0001 	and.w	r0, r0, #1
 8003962:	4770      	bx	lr
 8003964:	4618      	mov	r0, r3
 8003966:	4770      	bx	lr
 8003968:	2001      	movs	r0, #1
    }
 800396a:	4770      	bx	lr

0800396c <_ZN8touchgfx8CallbackI18callScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800396c:	b510      	push	{r4, lr}
 800396e:	4604      	mov	r4, r0
 8003970:	2110      	movs	r1, #16
 8003972:	f026 fa3f 	bl	8029df4 <_ZdlPvj>
 8003976:	4620      	mov	r0, r4
 8003978:	bd10      	pop	{r4, pc}

0800397a <_ZN18callScreenViewBaseD0Ev>:
 800397a:	b510      	push	{r4, lr}
 800397c:	4604      	mov	r4, r0
 800397e:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8003982:	f026 fa37 	bl	8029df4 <_ZdlPvj>
 8003986:	4620      	mov	r0, r4
 8003988:	bd10      	pop	{r4, pc}

0800398a <_ZN18callScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void callScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &cancelCall)
 800398a:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 800398e:	4288      	cmp	r0, r1
{
 8003990:	b508      	push	{r3, lr}
    if (&src == &cancelCall)
 8003992:	d105      	bne.n	80039a0 <_ZN18callScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x16>
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8003994:	f017 f9ee 	bl	801ad74 <_ZN8touchgfx11Application11getInstanceEv>
        //cancelAndReturn
        //When cancelCall clicked change screen to enterScreen
        //Go to enterScreen with no screen transition
        application().gotoenterScreenScreenNoTransition();
    }
}
 8003998:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoenterScreenScreenNoTransition();
 800399c:	f7ff bc30 	b.w	8003200 <_ZN23FrontendApplicationBase33gotoenterScreenScreenNoTransitionEv>
}
 80039a0:	bd08      	pop	{r3, pc}

080039a2 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 80039a2:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 80039a4:	b570      	push	{r4, r5, r6, lr}
 80039a6:	4604      	mov	r4, r0
        setX(x);
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    void setXY(int16_t x, int16_t y)
 80039aa:	4615      	mov	r5, r2
        setX(x);
 80039ac:	4798      	blx	r3
        setY(y);
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	4620      	mov	r0, r4
 80039b2:	4629      	mov	r1, r5
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    }
 80039b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 80039ba:	4718      	bx	r3

080039bc <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80039bc:	b570      	push	{r4, r5, r6, lr}
 80039be:	4604      	mov	r4, r0
 80039c0:	461d      	mov	r5, r3
 80039c2:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 80039c6:	f7ff ffec 	bl	80039a2 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	4629      	mov	r1, r5
 80039ce:	4620      	mov	r0, r4
 80039d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d2:	4798      	blx	r3
        setHeight(height);
 80039d4:	6823      	ldr	r3, [r4, #0]
 80039d6:	4631      	mov	r1, r6
 80039d8:	4620      	mov	r0, r4
 80039da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    }
 80039dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 80039e0:	4718      	bx	r3
	...

080039e4 <_ZN8touchgfx3BoxC1Ev>:
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 80039e4:	4a09      	ldr	r2, [pc, #36]	; (8003a0c <_ZN8touchgfx3BoxC1Ev+0x28>)
          visible(true)
 80039e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039ea:	6002      	str	r2, [r0, #0]
 80039ec:	2200      	movs	r2, #0
 80039ee:	8481      	strh	r1, [r0, #36]	; 0x24
 80039f0:	21ff      	movs	r1, #255	; 0xff
        : color(col)
 80039f2:	6282      	str	r2, [r0, #40]	; 0x28
 80039f4:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
        : x(0), y(0), width(0), height(0)
 80039f8:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80039fc:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8003a00:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8003a04:	e9c0 2207 	strd	r2, r2, [r0, #28]
    {
    }
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	0803062c 	.word	0x0803062c

08003a10 <_ZN18callScreenViewBaseC1Ev>:
callScreenViewBase::callScreenViewBase() :
 8003a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a14:	4604      	mov	r4, r0
 8003a16:	b08b      	sub	sp, #44	; 0x2c
        : presenter(0)
 8003a18:	2500      	movs	r5, #0
 8003a1a:	f018 fbcb 	bl	801c1b4 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &callScreenViewBase::buttonCallbackHandler)
 8003a1e:	4627      	mov	r7, r4
 8003a20:	4b60      	ldr	r3, [pc, #384]	; (8003ba4 <_ZN18callScreenViewBaseC1Ev+0x194>)
 8003a22:	f104 0b6c 	add.w	fp, r4, #108	; 0x6c
 8003a26:	f104 0698 	add.w	r6, r4, #152	; 0x98
 8003a2a:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003a2c:	f504 7992 	add.w	r9, r4, #292	; 0x124
 8003a30:	f847 3b40 	str.w	r3, [r7], #64
 8003a34:	4638      	mov	r0, r7
 8003a36:	f7ff ffd5 	bl	80039e4 <_ZN8touchgfx3BoxC1Ev>
 8003a3a:	4658      	mov	r0, fp
 8003a3c:	f7ff ffd2 	bl	80039e4 <_ZN8touchgfx3BoxC1Ev>
 8003a40:	4630      	mov	r0, r6
 8003a42:	f013 faef 	bl	8017024 <_ZN8touchgfx12DigitalClockC1Ev>
 8003a46:	f44f 7280 	mov.w	r2, #256	; 0x100
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8003a4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
     * @see setBitmap
     */
    Image(const Bitmap& bitmap = Bitmap())
        : Widget(), bitmap(bitmap), alpha(255)
    {
        Image::setBitmap(bitmap);
 8003a4e:	f10d 0a20 	add.w	sl, sp, #32
 8003a52:	f8a4 2148 	strh.w	r2, [r4, #328]	; 0x148
 8003a56:	f504 78a8 	add.w	r8, r4, #336	; 0x150
        : Widget(), bitmap(bitmap), alpha(255)
 8003a5a:	4a53      	ldr	r2, [pc, #332]	; (8003ba8 <_ZN18callScreenViewBaseC1Ev+0x198>)
        Image::setBitmap(bitmap);
 8003a5c:	4651      	mov	r1, sl
        : Widget(), bitmap(bitmap), alpha(255)
 8003a5e:	f8a4 314a 	strh.w	r3, [r4, #330]	; 0x14a
        Image::setBitmap(bitmap);
 8003a62:	4648      	mov	r0, r9
        : Widget(), bitmap(bitmap), alpha(255)
 8003a64:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8003a68:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
 8003a6c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8003a70:	e9c4 554a 	strd	r5, r5, [r4, #296]	; 0x128
 8003a74:	e9c4 554c 	strd	r5, r5, [r4, #304]	; 0x130
 8003a78:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
 8003a7c:	e9c4 5550 	strd	r5, r5, [r4, #320]	; 0x140
        Image::setBitmap(bitmap);
 8003a80:	f015 fb5b 	bl	801913a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003a84:	4640      	mov	r0, r8
 8003a86:	f015 fb31 	bl	80190ec <_ZN8touchgfx14ButtonWithIconC1Ev>
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8003a8a:	4b48      	ldr	r3, [pc, #288]	; (8003bac <_ZN18callScreenViewBaseC1Ev+0x19c>)
    __background.setPosition(0, 0, 272, 480);
 8003a8c:	462a      	mov	r2, r5
 8003a8e:	4629      	mov	r1, r5
 8003a90:	4638      	mov	r0, r7
 8003a92:	e9c4 3463 	strd	r3, r4, [r4, #396]	; 0x18c
 8003a96:	4b46      	ldr	r3, [pc, #280]	; (8003bb0 <_ZN18callScreenViewBaseC1Ev+0x1a0>)
 8003a98:	e9c4 3565 	strd	r3, r5, [r4, #404]	; 0x194
 8003a9c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003aa6:	f7ff ff89 	bl	80039bc <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFrom24BitRGB
     */
    void setColor(colortype color)
    {
        this->color = color;
 8003aaa:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    background.setPosition(0, 0, 272, 480);
 8003aae:	462a      	mov	r2, r5
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	66a3      	str	r3, [r4, #104]	; 0x68
 8003ab4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003ab8:	4658      	mov	r0, fp
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003ac0:	f7ff ff7c 	bl	80039bc <_ZN8touchgfx8Drawable11setPositionEssss>
 8003ac4:	4b3b      	ldr	r3, [pc, #236]	; (8003bb4 <_ZN18callScreenViewBaseC1Ev+0x1a4>)
    clock.setPosition(76, 20, 120, 50);
 8003ac6:	2214      	movs	r2, #20
 8003ac8:	4630      	mov	r0, r6
 8003aca:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8003ace:	2332      	movs	r3, #50	; 0x32
 8003ad0:	214c      	movs	r1, #76	; 0x4c
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	2378      	movs	r3, #120	; 0x78
 8003ad6:	f7ff ff71 	bl	80039bc <_ZN8touchgfx8Drawable11setPositionEssss>
    clock.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8003ada:	4630      	mov	r0, r6
 8003adc:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
 8003ae0:	f013 f965 	bl	8016dae <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
        : typedTextId(id)
 8003ae4:	4b34      	ldr	r3, [pc, #208]	; (8003bb8 <_ZN18callScreenViewBaseC1Ev+0x1a8>)
    clock.setTypedText(touchgfx::TypedText(T___SINGLEUSE_HEZI));
 8003ae6:	4651      	mov	r1, sl
 8003ae8:	4630      	mov	r0, r6
 8003aea:	9308      	str	r3, [sp, #32]
 8003aec:	2301      	movs	r3, #1
 8003aee:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8003af2:	f013 f9a8 	bl	8016e46 <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
    clock.displayLeadingZeroForHourIndicator(true);
 8003af6:	2301      	movs	r3, #1
 8003af8:	4630      	mov	r0, r6
 8003afa:	4619      	mov	r1, r3
 8003afc:	f013 fad8 	bl	80170b0 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
     *
     * @see DisplayMode, getDisplayMode
     */
    virtual void setDisplayMode(DisplayMode dm)
    {
        displayMode = dm;
 8003b00:	2301      	movs	r3, #1
    clock.setTime24Hour(9, 41, 0);
 8003b02:	4630      	mov	r0, r6
 8003b04:	2229      	movs	r2, #41	; 0x29
 8003b06:	f884 30c7 	strb.w	r3, [r4, #199]	; 0xc7
 8003b0a:	2109      	movs	r1, #9
 8003b0c:	462b      	mov	r3, r5
 8003b0e:	f013 fad2 	bl	80170b6 <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
    userVideo.setXY(8, 76);
 8003b12:	224c      	movs	r2, #76	; 0x4c
 8003b14:	4648      	mov	r0, r9
 8003b16:	2108      	movs	r1, #8
 8003b18:	f7ff ff43 	bl	80039a2 <_ZN8touchgfx8Drawable5setXYEss>
 8003b1c:	2307      	movs	r3, #7
    userVideo.setBitmap(touchgfx::Bitmap(BITMAP_PIKA_ID));
 8003b1e:	4651      	mov	r1, sl
 8003b20:	4648      	mov	r0, r9
 8003b22:	f8ad 3020 	strh.w	r3, [sp, #32]
 8003b26:	f015 fb08 	bl	801913a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    cancelCall.setXY(51, 360);
 8003b2a:	4640      	mov	r0, r8
 8003b2c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8003b30:	2133      	movs	r1, #51	; 0x33
 8003b32:	f7ff ff36 	bl	80039a2 <_ZN8touchgfx8Drawable5setXYEss>
 8003b36:	2302      	movs	r3, #2
    cancelCall.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID), touchgfx::Bitmap(BITMAP_OUTLINE_PHONE_DISABLED_BLACK_18DP_ID), touchgfx::Bitmap(BITMAP_OUTLINE_PHONE_DISABLED_BLACK_18DP_ID));
 8003b38:	aa06      	add	r2, sp, #24
 8003b3a:	a905      	add	r1, sp, #20
 8003b3c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003b40:	2303      	movs	r3, #3
 8003b42:	4640      	mov	r0, r8
 8003b44:	f8cd a000 	str.w	sl, [sp]
 8003b48:	f8ad 3018 	strh.w	r3, [sp, #24]
 8003b4c:	2306      	movs	r3, #6
 8003b4e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8003b52:	f8ad 3020 	strh.w	r3, [sp, #32]
 8003b56:	ab07      	add	r3, sp, #28
 8003b58:	f015 fa25 	bl	8018fa6 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconX(int16_t x)
    {
        iconX = x;
 8003b5c:	2343      	movs	r3, #67	; 0x43
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003b5e:	1d20      	adds	r0, r4, #4
 8003b60:	4639      	mov	r1, r7
 8003b62:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
     * @note The user code must call invalidate() in order to update the button on the display.
     * @note The value set is overwritten on a subsequent call to setBitmaps.
     */
    void setIconY(int16_t y)
    {
        iconY = y;
 8003b66:	230c      	movs	r3, #12
 8003b68:	9003      	str	r0, [sp, #12]
 8003b6a:	f8a4 318a 	strh.w	r3, [r4, #394]	; 0x18a
    cancelCall.setAction(buttonCallback);
 8003b6e:	f504 73c6 	add.w	r3, r4, #396	; 0x18c
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8003b72:	f8c4 3178 	str.w	r3, [r4, #376]	; 0x178
 8003b76:	f013 fb75 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b7a:	4659      	mov	r1, fp
 8003b7c:	9803      	ldr	r0, [sp, #12]
 8003b7e:	f013 fb71 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b82:	4631      	mov	r1, r6
 8003b84:	9803      	ldr	r0, [sp, #12]
 8003b86:	f013 fb6d 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b8a:	4649      	mov	r1, r9
 8003b8c:	9803      	ldr	r0, [sp, #12]
 8003b8e:	f013 fb69 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003b92:	9803      	ldr	r0, [sp, #12]
 8003b94:	4641      	mov	r1, r8
 8003b96:	f013 fb65 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	b00b      	add	sp, #44	; 0x2c
 8003b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ba2:	bf00      	nop
 8003ba4:	0802d560 	.word	0x0802d560
 8003ba8:	080308dc 	.word	0x080308dc
 8003bac:	0802d548 	.word	0x0802d548
 8003bb0:	0800398b 	.word	0x0800398b
 8003bb4:	ffa2f2f0 	.word	0xffa2f2f0
 8003bb8:	0802ce4c 	.word	0x0802ce4c

08003bbc <_ZN19enterScreenViewBaseD1Ev>:

class enterScreenViewBase : public touchgfx::View<enterScreenPresenter>
{
public:
    enterScreenViewBase();
    virtual ~enterScreenViewBase() {}
 8003bbc:	4770      	bx	lr

08003bbe <_ZN19enterScreenViewBase11setupScreenEv>:
}

void enterScreenViewBase::setupScreen()
{

}
 8003bbe:	4770      	bx	lr

08003bc0 <_ZN8touchgfx8CallbackI19enterScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003bc0:	4770      	bx	lr

08003bc2 <_ZN8touchgfx8CallbackI19enterScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8003bc2:	b430      	push	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003bc4:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 8003bc6:	4603      	mov	r3, r0
        (pobject->*pmemfun_1)(t1);
 8003bc8:	68c2      	ldr	r2, [r0, #12]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	1055      	asrs	r5, r2, #1
 8003bce:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8003bd2:	07d2      	lsls	r2, r2, #31
 8003bd4:	bf48      	it	mi
 8003bd6:	5962      	ldrmi	r2, [r4, r5]
    }
 8003bd8:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun_1)(t1);
 8003bda:	bf48      	it	mi
 8003bdc:	58d3      	ldrmi	r3, [r2, r3]
 8003bde:	4718      	bx	r3

08003be0 <_ZNK8touchgfx8CallbackI19enterScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun_1 != 0);
 8003be0:	6843      	ldr	r3, [r0, #4]
 8003be2:	b12b      	cbz	r3, 8003bf0 <_ZNK8touchgfx8CallbackI19enterScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x10>
 8003be4:	6883      	ldr	r3, [r0, #8]
 8003be6:	b92b      	cbnz	r3, 8003bf4 <_ZNK8touchgfx8CallbackI19enterScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8003be8:	68c0      	ldr	r0, [r0, #12]
 8003bea:	f000 0001 	and.w	r0, r0, #1
 8003bee:	4770      	bx	lr
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	4770      	bx	lr
 8003bf4:	2001      	movs	r0, #1
    }
 8003bf6:	4770      	bx	lr

08003bf8 <_ZN8touchgfx8CallbackI19enterScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8003bf8:	b510      	push	{r4, lr}
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	2110      	movs	r1, #16
 8003bfe:	f026 f8f9 	bl	8029df4 <_ZdlPvj>
 8003c02:	4620      	mov	r0, r4
 8003c04:	bd10      	pop	{r4, pc}

08003c06 <_ZN19enterScreenViewBaseD0Ev>:
 8003c06:	b510      	push	{r4, lr}
 8003c08:	4604      	mov	r4, r0
 8003c0a:	f240 5144 	movw	r1, #1348	; 0x544
 8003c0e:	f026 f8f1 	bl	8029df4 <_ZdlPvj>
 8003c12:	4620      	mov	r0, r4
 8003c14:	bd10      	pop	{r4, pc}
	...

08003c18 <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void enterScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8003c18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (&src == &btn1)
 8003c1a:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
 8003c1e:	4299      	cmp	r1, r3
 8003c20:	d116      	bne.n	8003c50 <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x38>
 8003c22:	4b42      	ldr	r3, [pc, #264]	; (8003d2c <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x114>)
    {
        //btn1
        //When btn1 clicked set text textArea
        //Set textArea text to 1
        textArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GAYI));
 8003c24:	f500 609f 	add.w	r0, r0, #1272	; 0x4f8
 8003c28:	9302      	str	r3, [sp, #8]
 8003c2a:	230d      	movs	r3, #13
    else if (&src == &btn2)
    {
        //btn2
        //When btn2 clicked set text textArea
        //Set textArea text to 2
        textArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PKOE));
 8003c2c:	a902      	add	r1, sp, #8
 8003c2e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003c32:	9001      	str	r0, [sp, #4]
 8003c34:	f014 ff4a 	bl	8018acc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        textArea.invalidate();
 8003c38:	9801      	ldr	r0, [sp, #4]
 8003c3a:	f018 f81d 	bl	801bc78 <_ZNK8touchgfx8Drawable10invalidateEv>
        textArea.resizeToCurrentText();
 8003c3e:	9801      	ldr	r0, [sp, #4]
 8003c40:	f014 ff27 	bl	8018a92 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        textArea.invalidate();
 8003c44:	9801      	ldr	r0, [sp, #4]
 8003c46:	f018 f817 	bl	801bc78 <_ZNK8touchgfx8Drawable10invalidateEv>
        //enterToCall
        //When call clicked change screen to callScreen
        //Go to callScreen with no screen transition
        application().gotocallScreenScreenNoTransition();
    }
}
 8003c4a:	b005      	add	sp, #20
 8003c4c:	f85d fb04 	ldr.w	pc, [sp], #4
    else if (&src == &btn2)
 8003c50:	f500 7386 	add.w	r3, r0, #268	; 0x10c
 8003c54:	4299      	cmp	r1, r3
 8003c56:	d105      	bne.n	8003c64 <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x4c>
 8003c58:	4b34      	ldr	r3, [pc, #208]	; (8003d2c <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x114>)
        textArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PKOE));
 8003c5a:	f500 609f 	add.w	r0, r0, #1272	; 0x4f8
 8003c5e:	9302      	str	r3, [sp, #8]
 8003c60:	230e      	movs	r3, #14
 8003c62:	e7e3      	b.n	8003c2c <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    else if (&src == &btn3)
 8003c64:	f500 73aa 	add.w	r3, r0, #340	; 0x154
 8003c68:	4299      	cmp	r1, r3
 8003c6a:	d105      	bne.n	8003c78 <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x60>
 8003c6c:	4b2f      	ldr	r3, [pc, #188]	; (8003d2c <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x114>)
        textArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_333C));
 8003c6e:	f500 609f 	add.w	r0, r0, #1272	; 0x4f8
 8003c72:	9302      	str	r3, [sp, #8]
 8003c74:	230f      	movs	r3, #15
 8003c76:	e7d9      	b.n	8003c2c <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    else if (&src == &btn4)
 8003c78:	f500 73ce 	add.w	r3, r0, #412	; 0x19c
 8003c7c:	4299      	cmp	r1, r3
 8003c7e:	d105      	bne.n	8003c8c <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x74>
 8003c80:	4b2a      	ldr	r3, [pc, #168]	; (8003d2c <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x114>)
        textArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_CYJH));
 8003c82:	f500 609f 	add.w	r0, r0, #1272	; 0x4f8
 8003c86:	9302      	str	r3, [sp, #8]
 8003c88:	2310      	movs	r3, #16
 8003c8a:	e7cf      	b.n	8003c2c <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    else if (&src == &btn5)
 8003c8c:	f500 73f2 	add.w	r3, r0, #484	; 0x1e4
 8003c90:	4299      	cmp	r1, r3
 8003c92:	d105      	bne.n	8003ca0 <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x88>
 8003c94:	4b25      	ldr	r3, [pc, #148]	; (8003d2c <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x114>)
        textArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0V71));
 8003c96:	f500 609f 	add.w	r0, r0, #1272	; 0x4f8
 8003c9a:	9302      	str	r3, [sp, #8]
 8003c9c:	2311      	movs	r3, #17
 8003c9e:	e7c5      	b.n	8003c2c <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    else if (&src == &btn6)
 8003ca0:	f500 730b 	add.w	r3, r0, #556	; 0x22c
 8003ca4:	4299      	cmp	r1, r3
 8003ca6:	d105      	bne.n	8003cb4 <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x9c>
 8003ca8:	4b20      	ldr	r3, [pc, #128]	; (8003d2c <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x114>)
        textArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5DGW));
 8003caa:	f500 609f 	add.w	r0, r0, #1272	; 0x4f8
 8003cae:	9302      	str	r3, [sp, #8]
 8003cb0:	2312      	movs	r3, #18
 8003cb2:	e7bb      	b.n	8003c2c <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    else if (&src == &btn7)
 8003cb4:	f500 731d 	add.w	r3, r0, #628	; 0x274
 8003cb8:	4299      	cmp	r1, r3
 8003cba:	d105      	bne.n	8003cc8 <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xb0>
 8003cbc:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x114>)
        textArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_YJ0K));
 8003cbe:	f500 609f 	add.w	r0, r0, #1272	; 0x4f8
 8003cc2:	9302      	str	r3, [sp, #8]
 8003cc4:	2313      	movs	r3, #19
 8003cc6:	e7b1      	b.n	8003c2c <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    else if (&src == &btn8)
 8003cc8:	f500 732f 	add.w	r3, r0, #700	; 0x2bc
 8003ccc:	4299      	cmp	r1, r3
 8003cce:	d105      	bne.n	8003cdc <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xc4>
 8003cd0:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x114>)
        textArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ABUO));
 8003cd2:	f500 609f 	add.w	r0, r0, #1272	; 0x4f8
 8003cd6:	9302      	str	r3, [sp, #8]
 8003cd8:	2314      	movs	r3, #20
 8003cda:	e7a7      	b.n	8003c2c <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    else if (&src == &btn9)
 8003cdc:	f500 7341 	add.w	r3, r0, #772	; 0x304
 8003ce0:	4299      	cmp	r1, r3
 8003ce2:	d105      	bne.n	8003cf0 <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xd8>
 8003ce4:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x114>)
        textArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0TEM));
 8003ce6:	f500 609f 	add.w	r0, r0, #1272	; 0x4f8
 8003cea:	9302      	str	r3, [sp, #8]
 8003cec:	2315      	movs	r3, #21
 8003cee:	e79d      	b.n	8003c2c <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    else if (&src == &btn0)
 8003cf0:	f500 7353 	add.w	r3, r0, #844	; 0x34c
 8003cf4:	4299      	cmp	r1, r3
 8003cf6:	d105      	bne.n	8003d04 <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xec>
 8003cf8:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x114>)
        textArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_JNCX));
 8003cfa:	f500 609f 	add.w	r0, r0, #1272	; 0x4f8
 8003cfe:	9302      	str	r3, [sp, #8]
 8003d00:	2316      	movs	r3, #22
 8003d02:	e793      	b.n	8003c2c <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    else if (&src == &backspace)
 8003d04:	f500 7365 	add.w	r3, r0, #916	; 0x394
 8003d08:	4299      	cmp	r1, r3
 8003d0a:	d105      	bne.n	8003d18 <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x100>
 8003d0c:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x114>)
        textArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_G5BY));
 8003d0e:	f500 609f 	add.w	r0, r0, #1272	; 0x4f8
 8003d12:	9302      	str	r3, [sp, #8]
 8003d14:	2317      	movs	r3, #23
 8003d16:	e789      	b.n	8003c2c <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    else if (&src == &call)
 8003d18:	f500 7074 	add.w	r0, r0, #976	; 0x3d0
 8003d1c:	4281      	cmp	r1, r0
 8003d1e:	d194      	bne.n	8003c4a <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x32>
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8003d20:	f017 f828 	bl	801ad74 <_ZN8touchgfx11Application11getInstanceEv>
        application().gotocallScreenScreenNoTransition();
 8003d24:	f7ff fa7c 	bl	8003220 <_ZN23FrontendApplicationBase32gotocallScreenScreenNoTransitionEv>
}
 8003d28:	e78f      	b.n	8003c4a <_ZN19enterScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x32>
 8003d2a:	bf00      	nop
 8003d2c:	0802ce4c 	.word	0x0802ce4c

08003d30 <_ZN8touchgfx8DrawableC1Ev>:
 8003d30:	4a07      	ldr	r2, [pc, #28]	; (8003d50 <_ZN8touchgfx8DrawableC1Ev+0x20>)
 8003d32:	6002      	str	r2, [r0, #0]
 8003d34:	2200      	movs	r2, #0
 8003d36:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8003d3a:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8003d3e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8003d42:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8003d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d4a:	8482      	strh	r2, [r0, #36]	; 0x24
    }
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	08030c94 	.word	0x08030c94

08003d54 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 8003d54:	b573      	push	{r0, r1, r4, r5, r6, lr}
    {
        if (typedText.hasValidId())
 8003d56:	f64f 73ff 	movw	r3, #65535	; 0xffff
        return typedTextId != TYPED_TEXT_INVALID;
 8003d5a:	8f01      	ldrh	r1, [r0, #56]	; 0x38
    void updateTextPosition()
 8003d5c:	4606      	mov	r6, r0
        if (typedText.hasValidId())
 8003d5e:	4299      	cmp	r1, r3
 8003d60:	d033      	beq.n	8003dca <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x76>
    }

private:
    FORCE_INLINE_FUNCTION void assertValid() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003d62:	4b1c      	ldr	r3, [pc, #112]	; (8003dd4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	b92b      	cbnz	r3, 8003d74 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 8003d68:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x84>)
 8003d6a:	21ae      	movs	r1, #174	; 0xae
 8003d6c:	4a1b      	ldr	r2, [pc, #108]	; (8003ddc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x88>)
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 8003d6e:	481c      	ldr	r0, [pc, #112]	; (8003de0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x8c>)
 8003d70:	f026 f86e 	bl	8029e50 <__assert_func>
 8003d74:	4a1b      	ldr	r2, [pc, #108]	; (8003de4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x90>)
 8003d76:	8812      	ldrh	r2, [r2, #0]
 8003d78:	428a      	cmp	r2, r1
 8003d7a:	d803      	bhi.n	8003d84 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x30>
 8003d7c:	4b1a      	ldr	r3, [pc, #104]	; (8003de8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x94>)
 8003d7e:	21af      	movs	r1, #175	; 0xaf
 8003d80:	4a16      	ldr	r2, [pc, #88]	; (8003ddc <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x88>)
 8003d82:	e7f4      	b.n	8003d6e <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x1a>
        return fonts[typedTexts[typedTextId].fontIdx];
 8003d84:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8003d88:	4b18      	ldr	r3, [pc, #96]	; (8003dec <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x98>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 8003d90:	4b17      	ldr	r3, [pc, #92]	; (8003df0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x9c>)
 8003d92:	6818      	ldr	r0, [r3, #0]
 8003d94:	f7ff fd78 	bl	8003888 <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 8003d98:	682b      	ldr	r3, [r5, #0]
 8003d9a:	4601      	mov	r1, r0
 8003d9c:	9001      	str	r0, [sp, #4]
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da0:	4628      	mov	r0, r5
 8003da2:	4798      	blx	r3
 8003da4:	682b      	ldr	r3, [r5, #0]
 8003da6:	4604      	mov	r4, r0
 8003da8:	9901      	ldr	r1, [sp, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	4628      	mov	r0, r5
 8003dae:	4798      	blx	r3
 8003db0:	fb14 f400 	smulbb	r4, r4, r0
 8003db4:	682b      	ldr	r3, [r5, #0]
 8003db6:	4628      	mov	r0, r5
 8003db8:	b2e4      	uxtb	r4, r4
 8003dba:	9901      	ldr	r1, [sp, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	4798      	blx	r3
 8003dc0:	4404      	add	r4, r0
 8003dc2:	f886 4045 	strb.w	r4, [r6, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 8003dc6:	b002      	add	sp, #8
 8003dc8:	bd70      	pop	{r4, r5, r6, pc}
            textHeightIncludingSpacing = 0;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
    }
 8003dd0:	e7f9      	b.n	8003dc6 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x72>
 8003dd2:	bf00      	nop
 8003dd4:	2002b8f0 	.word	0x2002b8f0
 8003dd8:	0802d58c 	.word	0x0802d58c
 8003ddc:	0802d5ce 	.word	0x0802d5ce
 8003de0:	0802d5fc 	.word	0x0802d5fc
 8003de4:	2002b8f4 	.word	0x2002b8f4
 8003de8:	0802d643 	.word	0x0802d643
 8003dec:	2002b8f8 	.word	0x2002b8f8
 8003df0:	2002b8fc 	.word	0x2002b8fc

08003df4 <_ZN19enterScreenViewBaseC1Ev>:
enterScreenViewBase::enterScreenViewBase() :
 8003df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df8:	4604      	mov	r4, r0
 8003dfa:	2500      	movs	r5, #0
class Container : public Drawable
{
public:
    Container()
        : Drawable(),
          firstChild(0)
 8003dfc:	4fec      	ldr	r7, [pc, #944]	; (80041b0 <_ZN19enterScreenViewBaseC1Ev+0x3bc>)
    __background.setPosition(0, 0, 272, 480);
 8003dfe:	f44f 7bf0 	mov.w	fp, #480	; 0x1e0
    buttonCallback(this, &enterScreenViewBase::buttonCallbackHandler)
 8003e02:	f104 0698 	add.w	r6, r4, #152	; 0x98
 8003e06:	f104 0ac4 	add.w	sl, r4, #196	; 0xc4
 8003e0a:	f504 7986 	add.w	r9, r4, #268	; 0x10c
 8003e0e:	f504 78aa 	add.w	r8, r4, #340	; 0x154
enterScreenViewBase::enterScreenViewBase() :
 8003e12:	ed2d 8b10 	vpush	{d8-d15}
 8003e16:	b08b      	sub	sp, #44	; 0x2c
 8003e18:	f018 f9cc 	bl	801c1b4 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &enterScreenViewBase::buttonCallbackHandler)
 8003e1c:	4622      	mov	r2, r4
 8003e1e:	4be5      	ldr	r3, [pc, #916]	; (80041b4 <_ZN19enterScreenViewBaseC1Ev+0x3c0>)
 8003e20:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003e22:	f842 3b40 	str.w	r3, [r2], #64
 8003e26:	4610      	mov	r0, r2
 8003e28:	ee08 2a90 	vmov	s17, r2
 8003e2c:	f7ff fdda 	bl	80039e4 <_ZN8touchgfx3BoxC1Ev>
 8003e30:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8003e34:	4618      	mov	r0, r3
 8003e36:	ee0e 3a90 	vmov	s29, r3
 8003e3a:	f7ff fdd3 	bl	80039e4 <_ZN8touchgfx3BoxC1Ev>
 8003e3e:	4630      	mov	r0, r6
 8003e40:	f7ff ff76 	bl	8003d30 <_ZN8touchgfx8DrawableC1Ev>
 8003e44:	f8c4 7098 	str.w	r7, [r4, #152]	; 0x98
 8003e48:	4650      	mov	r0, sl
 8003e4a:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
 8003e4e:	f015 fab9 	bl	80193c4 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e52:	4648      	mov	r0, r9
 8003e54:	f015 fab6 	bl	80193c4 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e58:	4640      	mov	r0, r8
 8003e5a:	f015 fab3 	bl	80193c4 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e5e:	f504 73ce 	add.w	r3, r4, #412	; 0x19c
 8003e62:	4618      	mov	r0, r3
 8003e64:	ee09 3a10 	vmov	s18, r3
 8003e68:	f015 faac 	bl	80193c4 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e6c:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 8003e70:	4618      	mov	r0, r3
 8003e72:	ee09 3a90 	vmov	s19, r3
 8003e76:	f015 faa5 	bl	80193c4 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e7a:	f504 730b 	add.w	r3, r4, #556	; 0x22c
 8003e7e:	4618      	mov	r0, r3
 8003e80:	ee0a 3a10 	vmov	s20, r3
 8003e84:	f015 fa9e 	bl	80193c4 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e88:	f504 731d 	add.w	r3, r4, #628	; 0x274
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	ee0a 3a90 	vmov	s21, r3
 8003e92:	f015 fa97 	bl	80193c4 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003e96:	f504 732f 	add.w	r3, r4, #700	; 0x2bc
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	ee0b 3a10 	vmov	s22, r3
 8003ea0:	f015 fa90 	bl	80193c4 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003ea4:	f504 7341 	add.w	r3, r4, #772	; 0x304
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	ee0b 3a90 	vmov	s23, r3
 8003eae:	f015 fa89 	bl	80193c4 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003eb2:	f504 7353 	add.w	r3, r4, #844	; 0x34c
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	ee0c 3a10 	vmov	s24, r3
 8003ebc:	f015 fa82 	bl	80193c4 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8003ec0:	f504 7365 	add.w	r3, r4, #916	; 0x394
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	ee0d 3a90 	vmov	s27, r3
 8003eca:	f015 f90f 	bl	80190ec <_ZN8touchgfx14ButtonWithIconC1Ev>
 8003ece:	f504 7374 	add.w	r3, r4, #976	; 0x3d0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	ee0e 3a10 	vmov	s28, r3
 8003ed8:	f015 f908 	bl	80190ec <_ZN8touchgfx14ButtonWithIconC1Ev>
 8003edc:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	ee08 3a10 	vmov	s16, r3
 8003ee6:	f013 f89d 	bl	8017024 <_ZN8touchgfx12DigitalClockC1Ev>
 8003eea:	f504 6393 	add.w	r3, r4, #1176	; 0x498
 8003eee:	4618      	mov	r0, r3
 8003ef0:	ee0c 3a90 	vmov	s25, r3
 8003ef4:	f7ff ff1c 	bl	8003d30 <_ZN8touchgfx8DrawableC1Ev>
 8003ef8:	f204 43c4 	addw	r3, r4, #1220	; 0x4c4
 8003efc:	f8c4 7498 	str.w	r7, [r4, #1176]	; 0x498
 8003f00:	f04f 477f 	mov.w	r7, #4278190080	; 0xff000000
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
        : Box(), borderColor(0), borderSize(0)
 8003f04:	4618      	mov	r0, r3
 8003f06:	f8c4 54c0 	str.w	r5, [r4, #1216]	; 0x4c0
 8003f0a:	ee0f 3a10 	vmov	s30, r3
 8003f0e:	f7ff fd69 	bl	80039e4 <_ZN8touchgfx3BoxC1Ev>
 8003f12:	4ba9      	ldr	r3, [pc, #676]	; (80041b8 <_ZN19enterScreenViewBaseC1Ev+0x3c4>)
 */
class TextArea : public Widget
{
public:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 8003f14:	4629      	mov	r1, r5
 8003f16:	2226      	movs	r2, #38	; 0x26
        : color(col)
 8003f18:	f8c4 54f0 	str.w	r5, [r4, #1264]	; 0x4f0
 8003f1c:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
 8003f20:	f504 639f 	add.w	r3, r4, #1272	; 0x4f8
 8003f24:	f8a4 54f4 	strh.w	r5, [r4, #1268]	; 0x4f4
 8003f28:	ee0d 3a10 	vmov	s26, r3
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f026 f81f 	bl	8029f70 <memset>
class Widget : public Drawable
 8003f32:	ee1d 0a10 	vmov	r0, s26
 8003f36:	f7ff fefb 	bl	8003d30 <_ZN8touchgfx8DrawableC1Ev>
 8003f3a:	4ba0      	ldr	r3, [pc, #640]	; (80041bc <_ZN19enterScreenViewBaseC1Ev+0x3c8>)
    __background.setPosition(0, 0, 272, 480);
 8003f3c:	462a      	mov	r2, r5
 8003f3e:	4629      	mov	r1, r5
 8003f40:	f8c4 34f8 	str.w	r3, [r4, #1272]	; 0x4f8
 8003f44:	ee18 0a90 	vmov	r0, s17
        : typedTextId(id)
 8003f48:	4b9d      	ldr	r3, [pc, #628]	; (80041c0 <_ZN19enterScreenViewBaseC1Ev+0x3cc>)
 8003f4a:	f8cd b000 	str.w	fp, [sp]
 8003f4e:	f8c4 3520 	str.w	r3, [r4, #1312]	; 0x520
 8003f52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f56:	f8c4 5528 	str.w	r5, [r4, #1320]	; 0x528
 8003f5a:	f8a4 3524 	strh.w	r3, [r4, #1316]	; 0x524
 8003f5e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8003f62:	f8a4 5530 	strh.w	r5, [r4, #1328]	; 0x530
 8003f66:	f8c4 352c 	str.w	r3, [r4, #1324]	; 0x52c
        : pobject(pobject), pmemfun_1(pmemfun_1)
 8003f6a:	4b96      	ldr	r3, [pc, #600]	; (80041c4 <_ZN19enterScreenViewBaseC1Ev+0x3d0>)
 8003f6c:	f8c4 4538 	str.w	r4, [r4, #1336]	; 0x538
 8003f70:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
 8003f74:	4b94      	ldr	r3, [pc, #592]	; (80041c8 <_ZN19enterScreenViewBaseC1Ev+0x3d4>)
 8003f76:	f8c4 5540 	str.w	r5, [r4, #1344]	; 0x540
 8003f7a:	f8c4 353c 	str.w	r3, [r4, #1340]	; 0x53c
 8003f7e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003f82:	f7ff fd1b 	bl	80039bc <_ZN8touchgfx8Drawable11setPositionEssss>
    background.setPosition(0, 0, 272, 480);
 8003f86:	462a      	mov	r2, r5
 8003f88:	4629      	mov	r1, r5
 8003f8a:	ee1e 0a90 	vmov	r0, s29
 8003f8e:	f8cd b000 	str.w	fp, [sp]
 8003f92:	f44f 7388 	mov.w	r3, #272	; 0x110
 8003f96:	66a7      	str	r7, [r4, #104]	; 0x68
 8003f98:	f04f 0b01 	mov.w	fp, #1
 8003f9c:	f7ff fd0e 	bl	80039bc <_ZN8touchgfx8Drawable11setPositionEssss>
 8003fa0:	4b8a      	ldr	r3, [pc, #552]	; (80041cc <_ZN19enterScreenViewBaseC1Ev+0x3d8>)
    keys.setPosition(36, 160, 200, 300);
 8003fa2:	4630      	mov	r0, r6
 8003fa4:	22a0      	movs	r2, #160	; 0xa0
 8003fa6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8003faa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003fae:	2124      	movs	r1, #36	; 0x24
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	23c8      	movs	r3, #200	; 0xc8
 8003fb4:	f7ff fd02 	bl	80039bc <_ZN8touchgfx8Drawable11setPositionEssss>
    btn1.setXY(0, 0);
 8003fb8:	462a      	mov	r2, r5
 8003fba:	4629      	mov	r1, r5
 8003fbc:	4650      	mov	r0, sl
 8003fbe:	f7ff fcf0 	bl	80039a2 <_ZN8touchgfx8Drawable5setXYEss>
    btn1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8003fc2:	aa08      	add	r2, sp, #32
 8003fc4:	a907      	add	r1, sp, #28
 8003fc6:	4650      	mov	r0, sl
 8003fc8:	f8ad 501c 	strh.w	r5, [sp, #28]
 8003fcc:	f8ad b020 	strh.w	fp, [sp, #32]
 8003fd0:	f014 fdbf 	bl	8018b52 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
class TypedText
 8003fd4:	2303      	movs	r3, #3
        updateTextPosition();
 8003fd6:	4650      	mov	r0, sl
 8003fd8:	f8a4 30fc 	strh.w	r3, [r4, #252]	; 0xfc
 8003fdc:	f7ff feba 	bl	8003d54 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    btn1.setAction(buttonCallback);
 8003fe0:	f204 5234 	addw	r2, r4, #1332	; 0x534
    keys.add(btn1);
 8003fe4:	4651      	mov	r1, sl
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
 8003fec:	f04f 0a05 	mov.w	sl, #5
    btn1.setAction(buttonCallback);
 8003ff0:	9203      	str	r2, [sp, #12]
        colorPressed = col;
 8003ff2:	e9c4 7740 	strd	r7, r7, [r4, #256]	; 0x100
    keys.add(btn1);
 8003ff6:	f013 f935 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    btn2.setXY(70, 0);
 8003ffa:	462a      	mov	r2, r5
 8003ffc:	4648      	mov	r0, r9
 8003ffe:	2146      	movs	r1, #70	; 0x46
 8004000:	f7ff fccf 	bl	80039a2 <_ZN8touchgfx8Drawable5setXYEss>
    btn2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8004004:	aa08      	add	r2, sp, #32
 8004006:	a907      	add	r1, sp, #28
 8004008:	4648      	mov	r0, r9
 800400a:	f8ad 501c 	strh.w	r5, [sp, #28]
 800400e:	f8ad b020 	strh.w	fp, [sp, #32]
 8004012:	f014 fd9e 	bl	8018b52 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004016:	2304      	movs	r3, #4
        updateTextPosition();
 8004018:	4648      	mov	r0, r9
 800401a:	f8a4 3144 	strh.w	r3, [r4, #324]	; 0x144
 800401e:	f7ff fe99 	bl	8003d54 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004022:	9a03      	ldr	r2, [sp, #12]
    keys.add(btn2);
 8004024:	4649      	mov	r1, r9
 8004026:	4630      	mov	r0, r6
 8004028:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
 800402c:	f04f 0909 	mov.w	r9, #9
        colorPressed = col;
 8004030:	e9c4 7752 	strd	r7, r7, [r4, #328]	; 0x148
 8004034:	f013 f916 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    btn3.setXY(140, 0);
 8004038:	462a      	mov	r2, r5
 800403a:	4640      	mov	r0, r8
 800403c:	218c      	movs	r1, #140	; 0x8c
 800403e:	f7ff fcb0 	bl	80039a2 <_ZN8touchgfx8Drawable5setXYEss>
    btn3.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8004042:	aa08      	add	r2, sp, #32
 8004044:	a907      	add	r1, sp, #28
 8004046:	4640      	mov	r0, r8
 8004048:	f8ad 501c 	strh.w	r5, [sp, #28]
 800404c:	f8ad b020 	strh.w	fp, [sp, #32]
 8004050:	f014 fd7f 	bl	8018b52 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8004054:	4640      	mov	r0, r8
 8004056:	f8a4 a18c 	strh.w	sl, [r4, #396]	; 0x18c
 800405a:	f7ff fe7b 	bl	8003d54 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 800405e:	9a03      	ldr	r2, [sp, #12]
    keys.add(btn3);
 8004060:	4641      	mov	r1, r8
 8004062:	4630      	mov	r0, r6
 8004064:	f8c4 217c 	str.w	r2, [r4, #380]	; 0x17c
 8004068:	f04f 080c 	mov.w	r8, #12
        colorPressed = col;
 800406c:	e9c4 7764 	strd	r7, r7, [r4, #400]	; 0x190
 8004070:	f013 f8f8 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    btn4.setXY(0, 80);
 8004074:	4629      	mov	r1, r5
 8004076:	ee19 0a10 	vmov	r0, s18
 800407a:	2250      	movs	r2, #80	; 0x50
 800407c:	f7ff fc91 	bl	80039a2 <_ZN8touchgfx8Drawable5setXYEss>
    btn4.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8004080:	a907      	add	r1, sp, #28
 8004082:	aa08      	add	r2, sp, #32
 8004084:	ee19 0a10 	vmov	r0, s18
 8004088:	f8ad 501c 	strh.w	r5, [sp, #28]
 800408c:	f8ad b020 	strh.w	fp, [sp, #32]
 8004090:	f014 fd5f 	bl	8018b52 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004094:	f04f 0206 	mov.w	r2, #6
        updateTextPosition();
 8004098:	ee19 0a10 	vmov	r0, s18
 800409c:	f8a4 21d4 	strh.w	r2, [r4, #468]	; 0x1d4
 80040a0:	f7ff fe58 	bl	8003d54 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80040a4:	9a03      	ldr	r2, [sp, #12]
    keys.add(btn4);
 80040a6:	ee19 1a10 	vmov	r1, s18
 80040aa:	4630      	mov	r0, r6
 80040ac:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
        colorPressed = col;
 80040b0:	e9c4 7776 	strd	r7, r7, [r4, #472]	; 0x1d8
 80040b4:	f013 f8d6 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    btn5.setXY(70, 80);
 80040b8:	ee19 0a90 	vmov	r0, s19
 80040bc:	2250      	movs	r2, #80	; 0x50
 80040be:	2146      	movs	r1, #70	; 0x46
 80040c0:	f7ff fc6f 	bl	80039a2 <_ZN8touchgfx8Drawable5setXYEss>
    btn5.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80040c4:	a907      	add	r1, sp, #28
 80040c6:	aa08      	add	r2, sp, #32
 80040c8:	ee19 0a90 	vmov	r0, s19
 80040cc:	f8ad 501c 	strh.w	r5, [sp, #28]
 80040d0:	f8ad b020 	strh.w	fp, [sp, #32]
 80040d4:	f014 fd3d 	bl	8018b52 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 80040d8:	2207      	movs	r2, #7
        updateTextPosition();
 80040da:	ee19 0a90 	vmov	r0, s19
 80040de:	f8a4 221c 	strh.w	r2, [r4, #540]	; 0x21c
 80040e2:	f7ff fe37 	bl	8003d54 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80040e6:	9a03      	ldr	r2, [sp, #12]
    keys.add(btn5);
 80040e8:	ee19 1a90 	vmov	r1, s19
 80040ec:	4630      	mov	r0, r6
 80040ee:	f8c4 220c 	str.w	r2, [r4, #524]	; 0x20c
        colorPressed = col;
 80040f2:	e9c4 7788 	strd	r7, r7, [r4, #544]	; 0x220
 80040f6:	f013 f8b5 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    btn6.setXY(140, 80);
 80040fa:	ee1a 0a10 	vmov	r0, s20
 80040fe:	2250      	movs	r2, #80	; 0x50
 8004100:	218c      	movs	r1, #140	; 0x8c
 8004102:	f7ff fc4e 	bl	80039a2 <_ZN8touchgfx8Drawable5setXYEss>
    btn6.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8004106:	a907      	add	r1, sp, #28
 8004108:	aa08      	add	r2, sp, #32
 800410a:	ee1a 0a10 	vmov	r0, s20
 800410e:	f8ad 501c 	strh.w	r5, [sp, #28]
 8004112:	f8ad b020 	strh.w	fp, [sp, #32]
 8004116:	f014 fd1c 	bl	8018b52 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800411a:	2208      	movs	r2, #8
        updateTextPosition();
 800411c:	ee1a 0a10 	vmov	r0, s20
 8004120:	f8a4 2264 	strh.w	r2, [r4, #612]	; 0x264
 8004124:	f7ff fe16 	bl	8003d54 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004128:	9a03      	ldr	r2, [sp, #12]
    keys.add(btn6);
 800412a:	ee1a 1a10 	vmov	r1, s20
 800412e:	4630      	mov	r0, r6
 8004130:	f8c4 2254 	str.w	r2, [r4, #596]	; 0x254
        colorPressed = col;
 8004134:	e9c4 779a 	strd	r7, r7, [r4, #616]	; 0x268
 8004138:	f013 f894 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    btn7.setXY(0, 160);
 800413c:	4629      	mov	r1, r5
 800413e:	ee1a 0a90 	vmov	r0, s21
 8004142:	22a0      	movs	r2, #160	; 0xa0
 8004144:	f7ff fc2d 	bl	80039a2 <_ZN8touchgfx8Drawable5setXYEss>
    btn7.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8004148:	aa08      	add	r2, sp, #32
 800414a:	a907      	add	r1, sp, #28
 800414c:	ee1a 0a90 	vmov	r0, s21
 8004150:	f8ad 501c 	strh.w	r5, [sp, #28]
 8004154:	f8ad b020 	strh.w	fp, [sp, #32]
 8004158:	f014 fcfb 	bl	8018b52 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 800415c:	ee1a 0a90 	vmov	r0, s21
 8004160:	f8a4 92ac 	strh.w	r9, [r4, #684]	; 0x2ac
 8004164:	f7ff fdf6 	bl	8003d54 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004168:	9a03      	ldr	r2, [sp, #12]
    keys.add(btn7);
 800416a:	ee1a 1a90 	vmov	r1, s21
 800416e:	4630      	mov	r0, r6
 8004170:	f8c4 229c 	str.w	r2, [r4, #668]	; 0x29c
        colorPressed = col;
 8004174:	e9c4 77ac 	strd	r7, r7, [r4, #688]	; 0x2b0
 8004178:	f013 f874 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    btn8.setXY(70, 160);
 800417c:	ee1b 0a10 	vmov	r0, s22
 8004180:	22a0      	movs	r2, #160	; 0xa0
 8004182:	2146      	movs	r1, #70	; 0x46
 8004184:	f7ff fc0d 	bl	80039a2 <_ZN8touchgfx8Drawable5setXYEss>
    btn8.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8004188:	a907      	add	r1, sp, #28
 800418a:	aa08      	add	r2, sp, #32
 800418c:	ee1b 0a10 	vmov	r0, s22
 8004190:	f8ad 501c 	strh.w	r5, [sp, #28]
 8004194:	f8ad b020 	strh.w	fp, [sp, #32]
 8004198:	f014 fcdb 	bl	8018b52 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 800419c:	220a      	movs	r2, #10
        updateTextPosition();
 800419e:	ee1b 0a10 	vmov	r0, s22
 80041a2:	f8a4 22f4 	strh.w	r2, [r4, #756]	; 0x2f4
 80041a6:	f7ff fdd5 	bl	8003d54 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 80041aa:	9a03      	ldr	r2, [sp, #12]
 80041ac:	e010      	b.n	80041d0 <_ZN19enterScreenViewBaseC1Ev+0x3dc>
 80041ae:	bf00      	nop
 80041b0:	0802fd04 	.word	0x0802fd04
 80041b4:	0802d6b8 	.word	0x0802d6b8
 80041b8:	080307d0 	.word	0x080307d0
 80041bc:	08030584 	.word	0x08030584
 80041c0:	0802ce4c 	.word	0x0802ce4c
 80041c4:	0802d6a0 	.word	0x0802d6a0
 80041c8:	08003c19 	.word	0x08003c19
 80041cc:	ffa2f2f0 	.word	0xffa2f2f0
    keys.add(btn8);
 80041d0:	ee1b 1a10 	vmov	r1, s22
 80041d4:	4630      	mov	r0, r6
 80041d6:	f8c4 22e4 	str.w	r2, [r4, #740]	; 0x2e4
        colorPressed = col;
 80041da:	e9c4 77be 	strd	r7, r7, [r4, #760]	; 0x2f8
 80041de:	f013 f841 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    btn9.setXY(140, 160);
 80041e2:	ee1b 0a90 	vmov	r0, s23
 80041e6:	22a0      	movs	r2, #160	; 0xa0
 80041e8:	218c      	movs	r1, #140	; 0x8c
 80041ea:	f7ff fbda 	bl	80039a2 <_ZN8touchgfx8Drawable5setXYEss>
    btn9.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 80041ee:	a907      	add	r1, sp, #28
 80041f0:	aa08      	add	r2, sp, #32
 80041f2:	ee1b 0a90 	vmov	r0, s23
 80041f6:	f8ad 501c 	strh.w	r5, [sp, #28]
 80041fa:	f8ad b020 	strh.w	fp, [sp, #32]
 80041fe:	f014 fca8 	bl	8018b52 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8004202:	220b      	movs	r2, #11
        updateTextPosition();
 8004204:	ee1b 0a90 	vmov	r0, s23
 8004208:	f8a4 233c 	strh.w	r2, [r4, #828]	; 0x33c
 800420c:	f7ff fda2 	bl	8003d54 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004210:	9a03      	ldr	r2, [sp, #12]
    keys.add(btn9);
 8004212:	ee1b 1a90 	vmov	r1, s23
 8004216:	4630      	mov	r0, r6
 8004218:	f8c4 232c 	str.w	r2, [r4, #812]	; 0x32c
        colorPressed = col;
 800421c:	e9c4 77d0 	strd	r7, r7, [r4, #832]	; 0x340
 8004220:	f013 f820 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    btn0.setXY(70, 240);
 8004224:	ee1c 0a10 	vmov	r0, s24
 8004228:	22f0      	movs	r2, #240	; 0xf0
 800422a:	2146      	movs	r1, #70	; 0x46
 800422c:	f7ff fbb9 	bl	80039a2 <_ZN8touchgfx8Drawable5setXYEss>
    btn0.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID));
 8004230:	aa08      	add	r2, sp, #32
 8004232:	a907      	add	r1, sp, #28
 8004234:	ee1c 0a10 	vmov	r0, s24
 8004238:	f8ad 501c 	strh.w	r5, [sp, #28]
 800423c:	f8ad b020 	strh.w	fp, [sp, #32]
 8004240:	f014 fc87 	bl	8018b52 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8004244:	ee1c 0a10 	vmov	r0, s24
 8004248:	f8a4 8384 	strh.w	r8, [r4, #900]	; 0x384
 800424c:	f7ff fd82 	bl	8003d54 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
 8004250:	9a03      	ldr	r2, [sp, #12]
    keys.add(btn0);
 8004252:	ee1c 1a10 	vmov	r1, s24
 8004256:	4630      	mov	r0, r6
 8004258:	f8c4 2374 	str.w	r2, [r4, #884]	; 0x374
        colorPressed = col;
 800425c:	e9c4 77e2 	strd	r7, r7, [r4, #904]	; 0x388
 8004260:	f013 f800 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    backspace.setXY(0, 240);
 8004264:	4629      	mov	r1, r5
 8004266:	ee1d 0a90 	vmov	r0, s27
 800426a:	22f0      	movs	r2, #240	; 0xf0
 800426c:	f7ff fb99 	bl	80039a2 <_ZN8touchgfx8Drawable5setXYEss>
    backspace.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_OUTLINE_BACKSPACE_BLACK_18DP_ID), touchgfx::Bitmap(BITMAP_OUTLINE_BACKSPACE_BLACK_18DP_ID));
 8004270:	aa08      	add	r2, sp, #32
 8004272:	2304      	movs	r3, #4
 8004274:	a905      	add	r1, sp, #20
 8004276:	9200      	str	r2, [sp, #0]
 8004278:	aa07      	add	r2, sp, #28
 800427a:	ee1d 0a90 	vmov	r0, s27
 800427e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8004282:	f8ad 3020 	strh.w	r3, [sp, #32]
 8004286:	4613      	mov	r3, r2
 8004288:	aa06      	add	r2, sp, #24
 800428a:	f8ad 5014 	strh.w	r5, [sp, #20]
 800428e:	f8ad b018 	strh.w	fp, [sp, #24]
 8004292:	f014 fe88 	bl	8018fa6 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
 8004296:	9a03      	ldr	r2, [sp, #12]
    keys.add(backspace);
 8004298:	ee1d 1a90 	vmov	r1, s27
 800429c:	4630      	mov	r0, r6
        iconX = x;
 800429e:	f8a4 83cc 	strh.w	r8, [r4, #972]	; 0x3cc
        iconY = y;
 80042a2:	f8a4 83ce 	strh.w	r8, [r4, #974]	; 0x3ce
 80042a6:	f8c4 23bc 	str.w	r2, [r4, #956]	; 0x3bc
 80042aa:	f012 ffdb 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    call.setXY(140, 240);
 80042ae:	ee1e 0a10 	vmov	r0, s28
 80042b2:	22f0      	movs	r2, #240	; 0xf0
 80042b4:	218c      	movs	r1, #140	; 0x8c
 80042b6:	f7ff fb74 	bl	80039a2 <_ZN8touchgfx8Drawable5setXYEss>
    call.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_OUTLINE_CALL_BLACK_18DP_ID), touchgfx::Bitmap(BITMAP_OUTLINE_CALL_BLACK_18DP_ID));
 80042ba:	aa08      	add	r2, sp, #32
 80042bc:	a905      	add	r1, sp, #20
 80042be:	ee1e 0a10 	vmov	r0, s28
 80042c2:	9200      	str	r2, [sp, #0]
 80042c4:	aa07      	add	r2, sp, #28
 80042c6:	f8ad 5014 	strh.w	r5, [sp, #20]
 80042ca:	4613      	mov	r3, r2
 80042cc:	aa06      	add	r2, sp, #24
 80042ce:	f8ad b018 	strh.w	fp, [sp, #24]
 80042d2:	f8ad a01c 	strh.w	sl, [sp, #28]
 80042d6:	f8ad a020 	strh.w	sl, [sp, #32]
 80042da:	f014 fe64 	bl	8018fa6 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
 80042de:	9a03      	ldr	r2, [sp, #12]
    keys.add(call);
 80042e0:	ee1e 1a10 	vmov	r1, s28
        iconX = x;
 80042e4:	f8a4 8408 	strh.w	r8, [r4, #1032]	; 0x408
 80042e8:	4630      	mov	r0, r6
        iconY = y;
 80042ea:	f8a4 840a 	strh.w	r8, [r4, #1034]	; 0x40a
    clock.setPosition(76, 20, 120, 50);
 80042ee:	f04f 0832 	mov.w	r8, #50	; 0x32
 80042f2:	f8c4 23f8 	str.w	r2, [r4, #1016]	; 0x3f8
    keys.add(call);
 80042f6:	f012 ffb5 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    clock.setPosition(76, 20, 120, 50);
 80042fa:	2214      	movs	r2, #20
 80042fc:	2378      	movs	r3, #120	; 0x78
 80042fe:	ee18 0a10 	vmov	r0, s16
 8004302:	f8cd 8000 	str.w	r8, [sp]
 8004306:	214c      	movs	r1, #76	; 0x4c
 8004308:	f7ff fb58 	bl	80039bc <_ZN8touchgfx8Drawable11setPositionEssss>
    clock.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800430c:	4639      	mov	r1, r7
 800430e:	ee18 0a10 	vmov	r0, s16
 8004312:	f012 fd4c 	bl	8016dae <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>
        : typedTextId(id)
 8004316:	4b38      	ldr	r3, [pc, #224]	; (80043f8 <_ZN19enterScreenViewBaseC1Ev+0x604>)
    clock.setTypedText(touchgfx::TypedText(T___SINGLEUSE_E8WY));
 8004318:	a908      	add	r1, sp, #32
 800431a:	ee18 0a10 	vmov	r0, s16
 800431e:	9308      	str	r3, [sp, #32]
 8004320:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
 8004324:	f012 fd8f 	bl	8016e46 <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>
    clock.displayLeadingZeroForHourIndicator(true);
 8004328:	4659      	mov	r1, fp
 800432a:	ee18 0a10 	vmov	r0, s16
 800432e:	f012 febf 	bl	80170b0 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>
    clock.setTime24Hour(9, 41, 0);
 8004332:	462b      	mov	r3, r5
 8004334:	4649      	mov	r1, r9
 8004336:	ee18 0a10 	vmov	r0, s16
 800433a:	2229      	movs	r2, #41	; 0x29
 800433c:	f884 b43b 	strb.w	fp, [r4, #1083]	; 0x43b
 8004340:	f012 feb9 	bl	80170b6 <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>
    enterWindow.setPosition(36, 90, 200, 50);
 8004344:	ee1c 0a90 	vmov	r0, s25
 8004348:	f8cd 8000 	str.w	r8, [sp]
 800434c:	23c8      	movs	r3, #200	; 0xc8
 800434e:	225a      	movs	r2, #90	; 0x5a
 8004350:	2124      	movs	r1, #36	; 0x24
 8004352:	f7ff fb33 	bl	80039bc <_ZN8touchgfx8Drawable11setPositionEssss>
    enterBackground.setPosition(0, 0, 200, 50);
 8004356:	462a      	mov	r2, r5
 8004358:	4629      	mov	r1, r5
 800435a:	ee1f 0a10 	vmov	r0, s30
 800435e:	f8cd 8000 	str.w	r8, [sp]
 8004362:	23c8      	movs	r3, #200	; 0xc8
 8004364:	f7ff fb2a 	bl	80039bc <_ZN8touchgfx8Drawable11setPositionEssss>
 8004368:	4b24      	ldr	r3, [pc, #144]	; (80043fc <_ZN19enterScreenViewBaseC1Ev+0x608>)
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 800436a:	f04f 0802 	mov.w	r8, #2
    enterWindow.add(enterBackground);
 800436e:	ee1f 1a10 	vmov	r1, s30
 8004372:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
 8004376:	ee1c 0a90 	vmov	r0, s25
        borderColor = color;
 800437a:	4b21      	ldr	r3, [pc, #132]	; (8004400 <_ZN19enterScreenViewBaseC1Ev+0x60c>)
        borderSize = size;
 800437c:	f8a4 84f4 	strh.w	r8, [r4, #1268]	; 0x4f4
        borderColor = color;
 8004380:	f8c4 34f0 	str.w	r3, [r4, #1264]	; 0x4f0
 8004384:	f012 ff6e 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea.setXY(6, 13);
 8004388:	220d      	movs	r2, #13
 800438a:	ee1d 0a10 	vmov	r0, s26
 800438e:	2106      	movs	r1, #6
 8004390:	f7ff fb07 	bl	80039a2 <_ZN8touchgfx8Drawable5setXYEss>
 8004394:	4b18      	ldr	r3, [pc, #96]	; (80043f8 <_ZN19enterScreenViewBaseC1Ev+0x604>)
    textArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_AFIN));
 8004396:	a908      	add	r1, sp, #32
 8004398:	ee1d 0a10 	vmov	r0, s26
     *
     * @param  color The color to use.
     */
    FORCE_INLINE_FUNCTION void setColor(colortype color)
    {
        this->color = color;
 800439c:	f8c4 7528 	str.w	r7, [r4, #1320]	; 0x528
     *
     * @see getLinespacing
     */
    FORCE_INLINE_FUNCTION void setLinespacing(int16_t space)
    {
        linespace = space;
 80043a0:	f8a4 552c 	strh.w	r5, [r4, #1324]	; 0x52c
 80043a4:	9308      	str	r3, [sp, #32]
 80043a6:	f8ad 8024 	strh.w	r8, [sp, #36]	; 0x24
 80043aa:	f014 fb8f 	bl	8018acc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
    enterWindow.add(textArea);
 80043ae:	ee1d 1a10 	vmov	r1, s26
 80043b2:	ee1c 0a90 	vmov	r0, s25
 80043b6:	f012 ff55 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80043ba:	1d20      	adds	r0, r4, #4
 80043bc:	ee18 1a90 	vmov	r1, s17
 80043c0:	9003      	str	r0, [sp, #12]
 80043c2:	f012 ff4f 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80043c6:	ee1e 1a90 	vmov	r1, s29
 80043ca:	9803      	ldr	r0, [sp, #12]
 80043cc:	f012 ff4a 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80043d0:	4631      	mov	r1, r6
 80043d2:	9803      	ldr	r0, [sp, #12]
 80043d4:	f012 ff46 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80043d8:	ee18 1a10 	vmov	r1, s16
 80043dc:	9803      	ldr	r0, [sp, #12]
 80043de:	f012 ff41 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80043e2:	9803      	ldr	r0, [sp, #12]
 80043e4:	ee1c 1a90 	vmov	r1, s25
 80043e8:	f012 ff3c 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80043ec:	4620      	mov	r0, r4
 80043ee:	b00b      	add	sp, #44	; 0x2c
 80043f0:	ecbd 8b10 	vpop	{d8-d15}
 80043f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043f8:	0802ce4c 	.word	0x0802ce4c
 80043fc:	ffb9f0ee 	.word	0xffb9f0ee
 8004400:	ff87d6e8 	.word	0xff87d6e8

08004404 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8004404:	4770      	bx	lr

08004406 <_ZN19FrontendApplicationD0Ev>:
 8004406:	b510      	push	{r4, lr}
 8004408:	4604      	mov	r4, r0
 800440a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800440e:	f025 fcf1 	bl	8029df4 <_ZdlPvj>
 8004412:	4620      	mov	r0, r4
 8004414:	bd10      	pop	{r4, pc}

08004416 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8004416:	b510      	push	{r4, lr}
 8004418:	4604      	mov	r4, r0
    {
        model.tick();
 800441a:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 800441e:	f000 f812 	bl	8004446 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8004422:	4620      	mov	r0, r4
    }
 8004424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8004428:	f016 bb78 	b.w	801ab1c <_ZN8touchgfx11Application15handleTickEventEv>

0800442c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800442c:	b510      	push	{r4, lr}
 800442e:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8004430:	f7fe feb6 	bl	80031a0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8004434:	4b01      	ldr	r3, [pc, #4]	; (800443c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8004436:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8004438:	6023      	str	r3, [r4, #0]
}
 800443a:	bd10      	pop	{r4, pc}
 800443c:	0802d6ec 	.word	0x0802d6ec

08004440 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8004440:	2200      	movs	r2, #0
 8004442:	6002      	str	r2, [r0, #0]
{

}
 8004444:	4770      	bx	lr

08004446 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8004446:	4770      	bx	lr

08004448 <_ZN19callScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~callScreenPresenter() {};
 8004448:	4770      	bx	lr

0800444a <_ZThn4_N19callScreenPresenterD1Ev>:
 800444a:	3804      	subs	r0, #4
 800444c:	4770      	bx	lr

0800444e <_ZN19callScreenPresenter10deactivateEv>:
}

void callScreenPresenter::activate()
{

}
 800444e:	4770      	bx	lr

08004450 <_ZN19callScreenPresenterD0Ev>:
 8004450:	b510      	push	{r4, lr}
 8004452:	4604      	mov	r4, r0
 8004454:	2110      	movs	r1, #16
 8004456:	f025 fccd 	bl	8029df4 <_ZdlPvj>
 800445a:	4620      	mov	r0, r4
 800445c:	bd10      	pop	{r4, pc}

0800445e <_ZThn4_N19callScreenPresenterD0Ev>:
 800445e:	f1a0 0004 	sub.w	r0, r0, #4
 8004462:	e7f5      	b.n	8004450 <_ZN19callScreenPresenterD0Ev>

08004464 <_ZN19callScreenPresenterC1ER14callScreenView>:
    ModelListener() : model(0) {}
 8004464:	2200      	movs	r2, #0
    : view(v)
 8004466:	60c1      	str	r1, [r0, #12]
 8004468:	6082      	str	r2, [r0, #8]
 800446a:	4a04      	ldr	r2, [pc, #16]	; (800447c <_ZN19callScreenPresenterC1ER14callScreenView+0x18>)
callScreenPresenter::callScreenPresenter(callScreenView& v)
 800446c:	b510      	push	{r4, lr}
    : view(v)
 800446e:	f102 0408 	add.w	r4, r2, #8
 8004472:	3220      	adds	r2, #32
 8004474:	6004      	str	r4, [r0, #0]
 8004476:	6042      	str	r2, [r0, #4]
}
 8004478:	bd10      	pop	{r4, pc}
 800447a:	bf00      	nop
 800447c:	0802d728 	.word	0x0802d728

08004480 <_ZN14callScreenViewD1Ev>:

class callScreenView : public callScreenViewBase
{
public:
    callScreenView();
    virtual ~callScreenView() {}
 8004480:	4770      	bx	lr

08004482 <_ZN14callScreenView14tearDownScreenEv>:
}

void callScreenView::tearDownScreen()
{
    callScreenViewBase::tearDownScreen();
}
 8004482:	4770      	bx	lr

08004484 <_ZN14callScreenView11setupScreenEv>:
    callScreenViewBase::setupScreen();
 8004484:	f7ff ba55 	b.w	8003932 <_ZN18callScreenViewBase11setupScreenEv>

08004488 <_ZN14callScreenViewD0Ev>:
 8004488:	b510      	push	{r4, lr}
 800448a:	4604      	mov	r4, r0
 800448c:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8004490:	f025 fcb0 	bl	8029df4 <_ZdlPvj>
 8004494:	4620      	mov	r0, r4
 8004496:	bd10      	pop	{r4, pc}

08004498 <_ZN14callScreenViewC1Ev>:
callScreenView::callScreenView()
 8004498:	b510      	push	{r4, lr}
 800449a:	4604      	mov	r4, r0
 800449c:	f7ff fab8 	bl	8003a10 <_ZN18callScreenViewBaseC1Ev>
 80044a0:	4b01      	ldr	r3, [pc, #4]	; (80044a8 <_ZN14callScreenViewC1Ev+0x10>)
}
 80044a2:	4620      	mov	r0, r4
callScreenView::callScreenView()
 80044a4:	6023      	str	r3, [r4, #0]
}
 80044a6:	bd10      	pop	{r4, pc}
 80044a8:	0802d758 	.word	0x0802d758

080044ac <_ZN20enterScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~enterScreenPresenter() {};
 80044ac:	4770      	bx	lr

080044ae <_ZThn4_N20enterScreenPresenterD1Ev>:
 80044ae:	3804      	subs	r0, #4
 80044b0:	4770      	bx	lr

080044b2 <_ZN20enterScreenPresenter10deactivateEv>:
}

void enterScreenPresenter::activate()
{

}
 80044b2:	4770      	bx	lr

080044b4 <_ZN20enterScreenPresenterD0Ev>:
 80044b4:	b510      	push	{r4, lr}
 80044b6:	4604      	mov	r4, r0
 80044b8:	2110      	movs	r1, #16
 80044ba:	f025 fc9b 	bl	8029df4 <_ZdlPvj>
 80044be:	4620      	mov	r0, r4
 80044c0:	bd10      	pop	{r4, pc}

080044c2 <_ZThn4_N20enterScreenPresenterD0Ev>:
 80044c2:	f1a0 0004 	sub.w	r0, r0, #4
 80044c6:	e7f5      	b.n	80044b4 <_ZN20enterScreenPresenterD0Ev>

080044c8 <_ZN20enterScreenPresenterC1ER15enterScreenView>:
 80044c8:	2200      	movs	r2, #0
    : view(v)
 80044ca:	60c1      	str	r1, [r0, #12]
 80044cc:	6082      	str	r2, [r0, #8]
 80044ce:	4a04      	ldr	r2, [pc, #16]	; (80044e0 <_ZN20enterScreenPresenterC1ER15enterScreenView+0x18>)
enterScreenPresenter::enterScreenPresenter(enterScreenView& v)
 80044d0:	b510      	push	{r4, lr}
    : view(v)
 80044d2:	f102 0408 	add.w	r4, r2, #8
 80044d6:	3220      	adds	r2, #32
 80044d8:	6004      	str	r4, [r0, #0]
 80044da:	6042      	str	r2, [r0, #4]
}
 80044dc:	bd10      	pop	{r4, pc}
 80044de:	bf00      	nop
 80044e0:	0802d784 	.word	0x0802d784

080044e4 <_ZN15enterScreenViewD1Ev>:

class enterScreenView : public enterScreenViewBase
{
public:
    enterScreenView();
    virtual ~enterScreenView() {}
 80044e4:	4770      	bx	lr

080044e6 <_ZN15enterScreenView14tearDownScreenEv>:
}

void enterScreenView::tearDownScreen()
{
    enterScreenViewBase::tearDownScreen();
}
 80044e6:	4770      	bx	lr

080044e8 <_ZN15enterScreenView11setupScreenEv>:
    enterScreenViewBase::setupScreen();
 80044e8:	f7ff bb69 	b.w	8003bbe <_ZN19enterScreenViewBase11setupScreenEv>

080044ec <_ZN15enterScreenViewD0Ev>:
 80044ec:	b510      	push	{r4, lr}
 80044ee:	4604      	mov	r4, r0
 80044f0:	f240 5144 	movw	r1, #1348	; 0x544
 80044f4:	f025 fc7e 	bl	8029df4 <_ZdlPvj>
 80044f8:	4620      	mov	r0, r4
 80044fa:	bd10      	pop	{r4, pc}

080044fc <_ZN15enterScreenViewC1Ev>:
enterScreenView::enterScreenView()
 80044fc:	b510      	push	{r4, lr}
 80044fe:	4604      	mov	r4, r0
 8004500:	f7ff fc78 	bl	8003df4 <_ZN19enterScreenViewBaseC1Ev>
 8004504:	4b01      	ldr	r3, [pc, #4]	; (800450c <_ZN15enterScreenViewC1Ev+0x10>)
}
 8004506:	4620      	mov	r0, r4
enterScreenView::enterScreenView()
 8004508:	6023      	str	r3, [r4, #0]
}
 800450a:	bd10      	pop	{r4, pc}
 800450c:	0802d7b4 	.word	0x0802d7b4

08004510 <QSPI_AutoPollingMemReady.constprop.0>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8004510:	b500      	push	{lr}
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004512:	f44f 7280 	mov.w	r2, #256	; 0x100
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8004516:	b095      	sub	sp, #84	; 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8004518:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 800451c:	4603      	mov	r3, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800451e:	920c      	str	r2, [sp, #48]	; 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8004520:	2205      	movs	r2, #5
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8004522:	910f      	str	r1, [sp, #60]	; 0x3c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  s_config.Match           = 0;
  s_config.Mask            = N25Q128A_SR_WIP;
 8004524:	2101      	movs	r1, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8004526:	9206      	str	r2, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004528:	2200      	movs	r2, #0
  s_config.Mask            = N25Q128A_SR_WIP;
 800452a:	9101      	str	r1, [sp, #4]
  s_command.DummyCycles       = 0;
 800452c:	920b      	str	r2, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800452e:	9213      	str	r2, [sp, #76]	; 0x4c
  s_config.Match           = 0;
 8004530:	9200      	str	r2, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8004532:	480b      	ldr	r0, [pc, #44]	; (8004560 <QSPI_AutoPollingMemReady.constprop.0+0x50>)
  s_config.StatusBytesSize = 1;
 8004534:	e9cd 1203 	strd	r1, r2, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004538:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800453c:	e9cd 2211 	strd	r2, r2, [sp, #68]	; 0x44
  s_config.Interval        = 0x10;
 8004540:	2210      	movs	r2, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8004542:	a906      	add	r1, sp, #24
  s_config.Interval        = 0x10;
 8004544:	9202      	str	r2, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004546:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800454a:	9205      	str	r2, [sp, #20]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 800454c:	466a      	mov	r2, sp
 800454e:	f001 fdab 	bl	80060a8 <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 8004552:	3800      	subs	r0, #0
 8004554:	bf18      	it	ne
 8004556:	2001      	movne	r0, #1
 8004558:	b015      	add	sp, #84	; 0x54
 800455a:	f85d fb04 	ldr.w	pc, [sp], #4
 800455e:	bf00      	nop
 8004560:	2002bd6c 	.word	0x2002bd6c

08004564 <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8004564:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004566:	f44f 7380 	mov.w	r3, #256	; 0x100
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 800456a:	b095      	sub	sp, #84	; 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800456c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004570:	4817      	ldr	r0, [pc, #92]	; (80045d0 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004572:	930c      	str	r3, [sp, #48]	; 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8004574:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004576:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8004578:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800457a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800457c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8004580:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = 0;
 8004582:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004584:	9313      	str	r3, [sp, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004586:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800458a:	f001 fd4a 	bl	8006022 <HAL_QSPI_Command>
 800458e:	b9e0      	cbnz	r0, 80045ca <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = N25Q128A_SR_WREN;
 8004590:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 8004592:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8004594:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004598:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800459a:	480d      	ldr	r0, [pc, #52]	; (80045d0 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = N25Q128A_SR_WREN;
 800459c:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 80045a0:	2310      	movs	r3, #16
 80045a2:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 80045a6:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045a8:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 80045aa:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 80045ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045b2:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_1_LINE;
 80045b4:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80045b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80045ba:	f001 fd75 	bl	80060a8 <HAL_QSPI_AutoPolling>
    return QSPI_ERROR;
 80045be:	3800      	subs	r0, #0
 80045c0:	bf18      	it	ne
 80045c2:	2001      	movne	r0, #1
}
 80045c4:	b015      	add	sp, #84	; 0x54
 80045c6:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 80045ca:	2001      	movs	r0, #1
 80045cc:	e7fa      	b.n	80045c4 <QSPI_WriteEnable.constprop.0+0x60>
 80045ce:	bf00      	nop
 80045d0:	2002bd6c 	.word	0x2002bd6c

080045d4 <BSP_QSPI_EnableMemoryMappedMode>:
{
 80045d4:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80045d6:	f44f 7380 	mov.w	r3, #256	; 0x100
{
 80045da:	b091      	sub	sp, #68	; 0x44
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80045dc:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80045e0:	480e      	ldr	r0, [pc, #56]	; (800461c <BSP_QSPI_EnableMemoryMappedMode+0x48>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80045e2:	9308      	str	r3, [sp, #32]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80045e4:	23eb      	movs	r3, #235	; 0xeb
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80045e6:	a902      	add	r1, sp, #8
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 80045e8:	9302      	str	r3, [sp, #8]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80045ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80045ee:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 80045f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045f4:	9305      	str	r3, [sp, #20]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80045f6:	2300      	movs	r3, #0
 80045f8:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 80045fc:	220a      	movs	r2, #10
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80045fe:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8004600:	9207      	str	r2, [sp, #28]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004602:	466a      	mov	r2, sp
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004604:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004608:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800460c:	f001 fd9c 	bl	8006148 <HAL_QSPI_MemoryMapped>
}
 8004610:	3800      	subs	r0, #0
 8004612:	bf18      	it	ne
 8004614:	2001      	movne	r0, #1
 8004616:	b011      	add	sp, #68	; 0x44
 8004618:	f85d fb04 	ldr.w	pc, [sp], #4
 800461c:	2002bd6c 	.word	0x2002bd6c

08004620 <BSP_QSPI_MspInit>:
  QSPI_CLK_ENABLE();
 8004620:	4b45      	ldr	r3, [pc, #276]	; (8004738 <BSP_QSPI_MspInit+0x118>)
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8004622:	2101      	movs	r1, #1
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8004624:	4845      	ldr	r0, [pc, #276]	; (800473c <BSP_QSPI_MspInit+0x11c>)
  QSPI_CLK_ENABLE();
 8004626:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004628:	f042 0202 	orr.w	r2, r2, #2
{
 800462c:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPI_CLK_ENABLE();
 800462e:	639a      	str	r2, [r3, #56]	; 0x38
{
 8004630:	b08d      	sub	sp, #52	; 0x34
  QSPI_CLK_ENABLE();
 8004632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8004634:	2409      	movs	r4, #9
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8004636:	2704      	movs	r7, #4
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004638:	2600      	movs	r6, #0
  QSPI_CLK_ENABLE();
 800463a:	f002 0202 	and.w	r2, r2, #2
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 800463e:	4d40      	ldr	r5, [pc, #256]	; (8004740 <BSP_QSPI_MspInit+0x120>)
  QSPI_CLK_ENABLE();
 8004640:	9200      	str	r2, [sp, #0]
 8004642:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 8004644:	699a      	ldr	r2, [r3, #24]
 8004646:	f042 0202 	orr.w	r2, r2, #2
 800464a:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 800464c:	699a      	ldr	r2, [r3, #24]
 800464e:	f022 0202 	bic.w	r2, r2, #2
 8004652:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 8004654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004656:	f042 0202 	orr.w	r2, r2, #2
 800465a:	631a      	str	r2, [r3, #48]	; 0x30
 800465c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800465e:	f002 0202 	and.w	r2, r2, #2
 8004662:	9201      	str	r2, [sp, #4]
 8004664:	9a01      	ldr	r2, [sp, #4]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8004666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004668:	f042 0202 	orr.w	r2, r2, #2
 800466c:	631a      	str	r2, [r3, #48]	; 0x30
 800466e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004670:	f002 0202 	and.w	r2, r2, #2
 8004674:	9202      	str	r2, [sp, #8]
 8004676:	9a02      	ldr	r2, [sp, #8]
  QSPI_D0_GPIO_CLK_ENABLE();
 8004678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800467a:	f042 0208 	orr.w	r2, r2, #8
 800467e:	631a      	str	r2, [r3, #48]	; 0x30
 8004680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004682:	f002 0208 	and.w	r2, r2, #8
 8004686:	9203      	str	r2, [sp, #12]
 8004688:	9a03      	ldr	r2, [sp, #12]
  QSPI_D1_GPIO_CLK_ENABLE();
 800468a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800468c:	f042 0208 	orr.w	r2, r2, #8
 8004690:	631a      	str	r2, [r3, #48]	; 0x30
 8004692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004694:	f002 0208 	and.w	r2, r2, #8
 8004698:	9204      	str	r2, [sp, #16]
 800469a:	9a04      	ldr	r2, [sp, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 800469c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800469e:	f042 0210 	orr.w	r2, r2, #16
 80046a2:	631a      	str	r2, [r3, #48]	; 0x30
 80046a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046a6:	f002 0210 	and.w	r2, r2, #16
 80046aa:	9205      	str	r2, [sp, #20]
 80046ac:	9a05      	ldr	r2, [sp, #20]
  QSPI_D3_GPIO_CLK_ENABLE();
 80046ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b0:	f042 0208 	orr.w	r2, r2, #8
 80046b4:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80046b6:	2240      	movs	r2, #64	; 0x40
  QSPI_D3_GPIO_CLK_ENABLE();
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	f003 0308 	and.w	r3, r3, #8
 80046be:	9306      	str	r3, [sp, #24]
 80046c0:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80046c2:	2302      	movs	r3, #2
 80046c4:	e9cd 2307 	strd	r2, r3, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80046ce:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80046d0:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80046d2:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 80046d4:	f000 fc40 	bl	8004f58 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80046d8:	a907      	add	r1, sp, #28
 80046da:	4818      	ldr	r0, [pc, #96]	; (800473c <BSP_QSPI_MspInit+0x11c>)
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 80046dc:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80046de:	9609      	str	r6, [sp, #36]	; 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80046e0:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80046e2:	f000 fc39 	bl	8004f58 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 80046e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80046ea:	a907      	add	r1, sp, #28
 80046ec:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80046ee:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 80046f0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 80046f2:	f000 fc31 	bl	8004f58 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 80046f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 80046fa:	a907      	add	r1, sp, #28
 80046fc:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80046fe:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8004700:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8004702:	f000 fc29 	bl	8004f58 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8004706:	a907      	add	r1, sp, #28
 8004708:	480e      	ldr	r0, [pc, #56]	; (8004744 <BSP_QSPI_MspInit+0x124>)
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 800470a:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800470c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 800470e:	f000 fc23 	bl	8004f58 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8004712:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8004716:	a907      	add	r1, sp, #28
 8004718:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800471a:	940b      	str	r4, [sp, #44]	; 0x2c
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 800471c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 800471e:	f000 fc1b 	bl	8004f58 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8004722:	4632      	mov	r2, r6
 8004724:	210f      	movs	r1, #15
 8004726:	205c      	movs	r0, #92	; 0x5c
 8004728:	f000 f9d8 	bl	8004adc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800472c:	205c      	movs	r0, #92	; 0x5c
 800472e:	f000 fa07 	bl	8004b40 <HAL_NVIC_EnableIRQ>
}
 8004732:	b00d      	add	sp, #52	; 0x34
 8004734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004736:	bf00      	nop
 8004738:	40023800 	.word	0x40023800
 800473c:	40020400 	.word	0x40020400
 8004740:	40020c00 	.word	0x40020c00
 8004744:	40021000 	.word	0x40021000

08004748 <BSP_QSPI_Init>:
{ 
 8004748:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 800474a:	4c49      	ldr	r4, [pc, #292]	; (8004870 <BSP_QSPI_Init+0x128>)
{ 
 800474c:	b091      	sub	sp, #68	; 0x44
  QSPIHandle.Instance = QUADSPI;
 800474e:	4b49      	ldr	r3, [pc, #292]	; (8004874 <BSP_QSPI_Init+0x12c>)
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8004750:	4620      	mov	r0, r4
  QSPIHandle.Instance = QUADSPI;
 8004752:	6023      	str	r3, [r4, #0]
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8004754:	f001 fc52 	bl	8005ffc <HAL_QSPI_DeInit>
 8004758:	4605      	mov	r5, r0
 800475a:	b110      	cbz	r0, 8004762 <BSP_QSPI_Init+0x1a>
    return QSPI_ERROR;
 800475c:	2001      	movs	r0, #1
}
 800475e:	b011      	add	sp, #68	; 0x44
 8004760:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8004762:	4601      	mov	r1, r0
 8004764:	4620      	mov	r0, r4
 8004766:	f7ff ff5b 	bl	8004620 <BSP_QSPI_MspInit>
  QSPIHandle.Init.FifoThreshold      = 4;
 800476a:	2601      	movs	r6, #1
 800476c:	2304      	movs	r3, #4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800476e:	f04f 7780 	mov.w	r7, #16777216	; 0x1000000
 8004772:	e9c4 6301 	strd	r6, r3, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8004776:	2310      	movs	r3, #16
 8004778:	60e3      	str	r3, [r4, #12]
 800477a:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 800477e:	fab3 f383 	clz	r3, r3
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8004782:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8004784:	3b01      	subs	r3, #1
 8004786:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8004788:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 800478c:	e9c4 5507 	strd	r5, r5, [r4, #28]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8004790:	e9c4 3505 	strd	r3, r5, [r4, #20]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8004794:	f001 fbde 	bl	8005f54 <HAL_QSPI_Init>
 8004798:	2800      	cmp	r0, #0
 800479a:	d1df      	bne.n	800475c <BSP_QSPI_Init+0x14>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800479c:	f44f 7580 	mov.w	r5, #256	; 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 80047a0:	2366      	movs	r3, #102	; 0x66
  s_command.DataMode          = QSPI_DATA_NONE;
 80047a2:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047a4:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.DummyCycles       = 0;
 80047a8:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047aa:	a902      	add	r1, sp, #8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80047ac:	900f      	str	r0, [sp, #60]	; 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80047ae:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 80047b0:	9302      	str	r3, [sp, #8]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80047b2:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80047b6:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047ba:	4620      	mov	r0, r4
 80047bc:	f001 fc31 	bl	8006022 <HAL_QSPI_Command>
 80047c0:	b108      	cbz	r0, 80047c6 <BSP_QSPI_Init+0x7e>
    return QSPI_NOT_SUPPORTED;
 80047c2:	2004      	movs	r0, #4
 80047c4:	e7cb      	b.n	800475e <BSP_QSPI_Init+0x16>
  s_command.Instruction = RESET_MEMORY_CMD;
 80047c6:	2399      	movs	r3, #153	; 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047cc:	a902      	add	r1, sp, #8
 80047ce:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 80047d0:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047d2:	f001 fc26 	bl	8006022 <HAL_QSPI_Command>
 80047d6:	2800      	cmp	r0, #0
 80047d8:	d1f3      	bne.n	80047c2 <BSP_QSPI_Init+0x7a>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80047da:	f241 3088 	movw	r0, #5000	; 0x1388
 80047de:	f7ff fe97 	bl	8004510 <QSPI_AutoPollingMemReady.constprop.0>
 80047e2:	2800      	cmp	r0, #0
 80047e4:	d1ed      	bne.n	80047c2 <BSP_QSPI_Init+0x7a>
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 80047e6:	2385      	movs	r3, #133	; 0x85
  s_command.DummyCycles       = 0;
 80047e8:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ee:	a902      	add	r1, sp, #8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80047f0:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 80047f2:	9302      	str	r3, [sp, #8]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 80047f4:	970b      	str	r7, [sp, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80047f6:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80047fa:	e9cd 600c 	strd	r6, r0, [sp, #48]	; 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80047fe:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004802:	4620      	mov	r0, r4
 8004804:	f001 fc0d 	bl	8006022 <HAL_QSPI_Command>
 8004808:	2800      	cmp	r0, #0
 800480a:	d1da      	bne.n	80047c2 <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800480c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004810:	f10d 0107 	add.w	r1, sp, #7
 8004814:	4620      	mov	r0, r4
 8004816:	f001 fd77 	bl	8006308 <HAL_QSPI_Receive>
 800481a:	2800      	cmp	r0, #0
 800481c:	d1d1      	bne.n	80047c2 <BSP_QSPI_Init+0x7a>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 800481e:	f7ff fea1 	bl	8004564 <QSPI_WriteEnable.constprop.0>
 8004822:	2800      	cmp	r0, #0
 8004824:	d1cd      	bne.n	80047c2 <BSP_QSPI_Init+0x7a>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 8004826:	2381      	movs	r3, #129	; 0x81
 8004828:	22f0      	movs	r2, #240	; 0xf0
 800482a:	9302      	str	r3, [sp, #8]
 800482c:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004830:	210a      	movs	r1, #10
 8004832:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004836:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800483a:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 800483c:	f003 030f 	and.w	r3, r3, #15
 8004840:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004844:	a902      	add	r1, sp, #8
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 8004846:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004848:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 800484c:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004850:	f001 fbe7 	bl	8006022 <HAL_QSPI_Command>
 8004854:	2800      	cmp	r0, #0
 8004856:	d1b4      	bne.n	80047c2 <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004858:	f241 3288 	movw	r2, #5000	; 0x1388
 800485c:	f10d 0107 	add.w	r1, sp, #7
 8004860:	4620      	mov	r0, r4
 8004862:	f001 fcf5 	bl	8006250 <HAL_QSPI_Transmit>
 8004866:	2800      	cmp	r0, #0
 8004868:	f43f af79 	beq.w	800475e <BSP_QSPI_Init+0x16>
 800486c:	e7a9      	b.n	80047c2 <BSP_QSPI_Init+0x7a>
 800486e:	bf00      	nop
 8004870:	2002bd6c 	.word	0x2002bd6c
 8004874:	a0001000 	.word	0xa0001000

08004878 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004878:	490f      	ldr	r1, [pc, #60]	; (80048b8 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800487a:	2000      	movs	r0, #0
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800487c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8004888:	4b0c      	ldr	r3, [pc, #48]	; (80048bc <SystemInit+0x44>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	f042 0201 	orr.w	r2, r2, #1
 8004890:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004892:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800489a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800489e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80048a0:	4a07      	ldr	r2, [pc, #28]	; (80048c0 <SystemInit+0x48>)
 80048a2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048aa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80048ac:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80048ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048b2:	608b      	str	r3, [r1, #8]
#endif
}
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	e000ed00 	.word	0xe000ed00
 80048bc:	40023800 	.word	0x40023800
 80048c0:	24003010 	.word	0x24003010

080048c4 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80048c4:	4770      	bx	lr

080048c6 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 80048c6:	2000      	movs	r0, #0
 80048c8:	4770      	bx	lr
	...

080048cc <ft5336_ReadID>:
  volatile uint8_t ucReadId = 0;
 80048cc:	2300      	movs	r3, #0
{
 80048ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 80048d0:	f88d 3007 	strb.w	r3, [sp, #7]
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 80048d4:	4b0d      	ldr	r3, [pc, #52]	; (800490c <ft5336_ReadID+0x40>)
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80048d6:	781a      	ldrb	r2, [r3, #0]
 80048d8:	b90a      	cbnz	r2, 80048de <ft5336_ReadID+0x12>
  {
    /* Initialize TS IO BUS layer (I2C) */
    //TS_IO_Init();

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80048da:	2201      	movs	r2, #1
 80048dc:	701a      	strb	r2, [r3, #0]
{
 80048de:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80048e0:	b2c5      	uxtb	r5, r0
 80048e2:	3c01      	subs	r4, #1
 80048e4:	21a8      	movs	r1, #168	; 0xa8
 80048e6:	4628      	mov	r0, r5
 80048e8:	f7fd f8d0 	bl	8001a8c <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80048ec:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80048f0:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 80048f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80048f8:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80048fa:	d103      	bne.n	8004904 <ft5336_ReadID+0x38>
  return (ucReadId);
 80048fc:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8004900:	b003      	add	sp, #12
 8004902:	bd30      	pop	{r4, r5, pc}
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8004904:	2b51      	cmp	r3, #81	; 0x51
 8004906:	d1ec      	bne.n	80048e2 <ft5336_ReadID+0x16>
 8004908:	e7f8      	b.n	80048fc <ft5336_ReadID+0x30>
 800490a:	bf00      	nop
 800490c:	2001868a 	.word	0x2001868a

08004910 <ft5336_TS_DetectTouch>:
{
 8004910:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 8004912:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8004914:	2102      	movs	r1, #2
 8004916:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 8004918:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800491c:	f7fd f8b6 	bl	8001a8c <TS_IO_Read>
 8004920:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 8004924:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004928:	f003 030f 	and.w	r3, r3, #15
 800492c:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8004930:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004934:	2b05      	cmp	r3, #5
 8004936:	d901      	bls.n	800493c <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 8004938:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 800493c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004940:	4b03      	ldr	r3, [pc, #12]	; (8004950 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 8004942:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 8004946:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 8004948:	2200      	movs	r2, #0
 800494a:	709a      	strb	r2, [r3, #2]
}
 800494c:	b002      	add	sp, #8
 800494e:	bd10      	pop	{r4, pc}
 8004950:	2001868a 	.word	0x2001868a

08004954 <ft5336_TS_GetXY>:
{
 8004954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004958:	4d2f      	ldr	r5, [pc, #188]	; (8004a18 <ft5336_TS_GetXY+0xc4>)
{
 800495a:	4616      	mov	r6, r2
  volatile uint8_t ucReadData = 0;
 800495c:	2300      	movs	r3, #0
{
 800495e:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004960:	78ac      	ldrb	r4, [r5, #2]
 8004962:	786a      	ldrb	r2, [r5, #1]
  volatile uint8_t ucReadData = 0;
 8004964:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004968:	42a2      	cmp	r2, r4
 800496a:	d94d      	bls.n	8004a08 <ft5336_TS_GetXY+0xb4>
    switch(ft5336_handle.currActiveTouchIdx)
 800496c:	2c09      	cmp	r4, #9
 800496e:	d84e      	bhi.n	8004a0e <ft5336_TS_GetXY+0xba>
 8004970:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	b2db      	uxtb	r3, r3
 8004978:	1d19      	adds	r1, r3, #4
 800497a:	f103 0b03 	add.w	fp, r3, #3
 800497e:	f103 0a06 	add.w	sl, r3, #6
 8004982:	3305      	adds	r3, #5
 8004984:	b2c9      	uxtb	r1, r1
 8004986:	fa5f fb8b 	uxtb.w	fp, fp
 800498a:	fa5f fa8a 	uxtb.w	sl, sl
 800498e:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8004992:	b2c4      	uxtb	r4, r0
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8004994:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8004a1c <ft5336_TS_GetXY+0xc8>
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8004998:	4620      	mov	r0, r4
 800499a:	f7fd f877 	bl	8001a8c <TS_IO_Read>
 800499e:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80049a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80049a6:	4659      	mov	r1, fp
 80049a8:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80049aa:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80049ae:	f7fd f86d 	bl	8001a8c <TS_IO_Read>
 80049b2:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80049b6:	4651      	mov	r1, sl
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80049b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80049bc:	4620      	mov	r0, r4
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80049be:	f8b9 2000 	ldrh.w	r2, [r9]
 80049c2:	021b      	lsls	r3, r3, #8
 80049c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80049c8:	4313      	orrs	r3, r2
    *X = coord;
 80049ca:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80049cc:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80049d0:	f7fd f85c 	bl	8001a8c <TS_IO_Read>
 80049d4:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80049d8:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80049da:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80049de:	4620      	mov	r0, r4
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80049e0:	f8a9 3000 	strh.w	r3, [r9]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80049e4:	f7fd f852 	bl	8001a8c <TS_IO_Read>
 80049e8:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80049ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80049f0:	f8b9 2000 	ldrh.w	r2, [r9]
 80049f4:	021b      	lsls	r3, r3, #8
 80049f6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f8a9 3000 	strh.w	r3, [r9]
    *Y = coord;
 8004a00:	8033      	strh	r3, [r6, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8004a02:	78ab      	ldrb	r3, [r5, #2]
 8004a04:	3301      	adds	r3, #1
 8004a06:	70ab      	strb	r3, [r5, #2]
}
 8004a08:	b003      	add	sp, #12
 8004a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8004a0e:	4698      	mov	r8, r3
 8004a10:	469a      	mov	sl, r3
 8004a12:	469b      	mov	fp, r3
 8004a14:	4619      	mov	r1, r3
 8004a16:	e7bc      	b.n	8004992 <ft5336_TS_GetXY+0x3e>
 8004a18:	2001868a 	.word	0x2001868a
 8004a1c:	20018688 	.word	0x20018688

08004a20 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8004a20:	2201      	movs	r2, #1
 8004a22:	21a4      	movs	r1, #164	; 0xa4
 8004a24:	b2c0      	uxtb	r0, r0
 8004a26:	f7fd b817 	b.w	8001a58 <TS_IO_Write>

08004a2a <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	21a4      	movs	r1, #164	; 0xa4
 8004a2e:	b2c0      	uxtb	r0, r0
 8004a30:	f7fd b812 	b.w	8001a58 <TS_IO_Write>

08004a34 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 8004a34:	f7ff bff9 	b.w	8004a2a <ft5336_TS_DisableIT>

08004a38 <ft5336_TS_ClearIT>:
 8004a38:	4770      	bx	lr
	...

08004a3c <ft5336_Init>:
  return(ft5336_handle.i2cInitialized);
 8004a3c:	4b02      	ldr	r3, [pc, #8]	; (8004a48 <ft5336_Init+0xc>)
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8004a3e:	781a      	ldrb	r2, [r3, #0]
 8004a40:	b90a      	cbnz	r2, 8004a46 <ft5336_Init+0xa>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8004a42:	2201      	movs	r2, #1
 8004a44:	701a      	strb	r2, [r3, #0]
}
 8004a46:	4770      	bx	lr
 8004a48:	2001868a 	.word	0x2001868a

08004a4c <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a4c:	4a07      	ldr	r2, [pc, #28]	; (8004a6c <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a4e:	2003      	movs	r0, #3
{
 8004a50:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a52:	6813      	ldr	r3, [r2, #0]
 8004a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a58:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a5a:	f000 f82d 	bl	8004ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a5e:	2000      	movs	r0, #0
 8004a60:	f7fc feb6 	bl	80017d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a64:	f7fc fc54 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004a68:	2000      	movs	r0, #0
 8004a6a:	bd08      	pop	{r3, pc}
 8004a6c:	40023c00 	.word	0x40023c00

08004a70 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004a70:	4a03      	ldr	r2, [pc, #12]	; (8004a80 <HAL_IncTick+0x10>)
 8004a72:	4b04      	ldr	r3, [pc, #16]	; (8004a84 <HAL_IncTick+0x14>)
 8004a74:	6811      	ldr	r1, [r2, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	440b      	add	r3, r1
 8004a7a:	6013      	str	r3, [r2, #0]
}
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	2002bdb8 	.word	0x2002bdb8
 8004a84:	20000038 	.word	0x20000038

08004a88 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004a88:	4b01      	ldr	r3, [pc, #4]	; (8004a90 <HAL_GetTick+0x8>)
 8004a8a:	6818      	ldr	r0, [r3, #0]
}
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	2002bdb8 	.word	0x2002bdb8

08004a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a94:	b538      	push	{r3, r4, r5, lr}
 8004a96:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004a98:	f7ff fff6 	bl	8004a88 <HAL_GetTick>
 8004a9c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a9e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8004aa0:	bf1e      	ittt	ne
 8004aa2:	4b04      	ldrne	r3, [pc, #16]	; (8004ab4 <HAL_Delay+0x20>)
 8004aa4:	781b      	ldrbne	r3, [r3, #0]
 8004aa6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004aa8:	f7ff ffee 	bl	8004a88 <HAL_GetTick>
 8004aac:	1b43      	subs	r3, r0, r5
 8004aae:	42a3      	cmp	r3, r4
 8004ab0:	d3fa      	bcc.n	8004aa8 <HAL_Delay+0x14>
  {
  }
}
 8004ab2:	bd38      	pop	{r3, r4, r5, pc}
 8004ab4:	20000038 	.word	0x20000038

08004ab8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ab8:	4907      	ldr	r1, [pc, #28]	; (8004ad8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004aba:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004abc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004abe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ac2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ac6:	0412      	lsls	r2, r2, #16
 8004ac8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004ad4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004ad6:	4770      	bx	lr
 8004ad8:	e000ed00 	.word	0xe000ed00

08004adc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004adc:	4b16      	ldr	r3, [pc, #88]	; (8004b38 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ade:	b530      	push	{r4, r5, lr}
 8004ae0:	68dc      	ldr	r4, [r3, #12]
 8004ae2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ae6:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004aea:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aec:	2d04      	cmp	r5, #4
 8004aee:	bf28      	it	cs
 8004af0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004af2:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004af4:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004af8:	bf8c      	ite	hi
 8004afa:	3c03      	subhi	r4, #3
 8004afc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004afe:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8004b02:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b04:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b08:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b0c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b10:	fa01 f104 	lsl.w	r1, r1, r4
 8004b14:	ea41 0302 	orr.w	r3, r1, r2
 8004b18:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004b1c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8004b1e:	db06      	blt.n	8004b2e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b20:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004b24:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004b28:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004b2c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b2e:	f000 000f 	and.w	r0, r0, #15
 8004b32:	4a02      	ldr	r2, [pc, #8]	; (8004b3c <HAL_NVIC_SetPriority+0x60>)
 8004b34:	5413      	strb	r3, [r2, r0]
 8004b36:	e7f9      	b.n	8004b2c <HAL_NVIC_SetPriority+0x50>
 8004b38:	e000ed00 	.word	0xe000ed00
 8004b3c:	e000ed14 	.word	0xe000ed14

08004b40 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004b40:	2800      	cmp	r0, #0
 8004b42:	db08      	blt.n	8004b56 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b44:	0942      	lsrs	r2, r0, #5
 8004b46:	2301      	movs	r3, #1
 8004b48:	f000 001f 	and.w	r0, r0, #31
 8004b4c:	fa03 f000 	lsl.w	r0, r3, r0
 8004b50:	4b01      	ldr	r3, [pc, #4]	; (8004b58 <HAL_NVIC_EnableIRQ+0x18>)
 8004b52:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004b56:	4770      	bx	lr
 8004b58:	e000e100 	.word	0xe000e100

08004b5c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004b5c:	2800      	cmp	r0, #0
 8004b5e:	db0d      	blt.n	8004b7c <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b60:	0943      	lsrs	r3, r0, #5
 8004b62:	2201      	movs	r2, #1
 8004b64:	f000 001f 	and.w	r0, r0, #31
 8004b68:	3320      	adds	r3, #32
 8004b6a:	fa02 f000 	lsl.w	r0, r2, r0
 8004b6e:	4a04      	ldr	r2, [pc, #16]	; (8004b80 <HAL_NVIC_DisableIRQ+0x24>)
 8004b70:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b78:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	e000e100 	.word	0xe000e100

08004b84 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004b84:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004b88:	4a04      	ldr	r2, [pc, #16]	; (8004b9c <HAL_MPU_Disable+0x18>)
 8004b8a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b90:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004b92:	2200      	movs	r2, #0
 8004b94:	4b02      	ldr	r3, [pc, #8]	; (8004ba0 <HAL_MPU_Disable+0x1c>)
 8004b96:	605a      	str	r2, [r3, #4]
}
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	e000ed00 	.word	0xe000ed00
 8004ba0:	e000ed90 	.word	0xe000ed90

08004ba4 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004ba4:	4a06      	ldr	r2, [pc, #24]	; (8004bc0 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004ba6:	f040 0001 	orr.w	r0, r0, #1
 8004baa:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <HAL_MPU_Enable+0x20>)
 8004bac:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004bae:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004bb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004bba:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004bbe:	4770      	bx	lr
 8004bc0:	e000ed00 	.word	0xe000ed00
 8004bc4:	e000ed90 	.word	0xe000ed90

08004bc8 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004bc8:	7843      	ldrb	r3, [r0, #1]
 8004bca:	4a12      	ldr	r2, [pc, #72]	; (8004c14 <HAL_MPU_ConfigRegion+0x4c>)
{
 8004bcc:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8004bce:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 8004bd0:	7801      	ldrb	r1, [r0, #0]
 8004bd2:	b1d9      	cbz	r1, 8004c0c <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8004bd4:	6843      	ldr	r3, [r0, #4]
 8004bd6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004bd8:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004bda:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004bdc:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004bde:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004be2:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004be4:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004be6:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004bea:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004bec:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004bf0:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004bf2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004bf6:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004bf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004bfc:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004bfe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004c02:	7a01      	ldrb	r1, [r0, #8]
 8004c04:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004c08:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8004c0a:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8004c0c:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8004c0e:	6111      	str	r1, [r2, #16]
}
 8004c10:	e7fb      	b.n	8004c0a <HAL_MPU_ConfigRegion+0x42>
 8004c12:	bf00      	nop
 8004c14:	e000ed90 	.word	0xe000ed90

08004c18 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004c18:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004c1a:	4604      	mov	r4, r0
 8004c1c:	b908      	cbnz	r0, 8004c22 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8004c1e:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8004c20:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004c22:	7f43      	ldrb	r3, [r0, #29]
 8004c24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004c28:	b913      	cbnz	r3, 8004c30 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8004c2a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8004c2c:	f7fc fb8e 	bl	800134c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004c30:	2302      	movs	r3, #2
 8004c32:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004c34:	7923      	ldrb	r3, [r4, #4]
 8004c36:	b9e3      	cbnz	r3, 8004c72 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	4a13      	ldr	r2, [pc, #76]	; (8004c88 <HAL_CRC_Init+0x70>)
 8004c3c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	f022 0218 	bic.w	r2, r2, #24
 8004c44:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004c46:	7962      	ldrb	r2, [r4, #5]
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	b9d2      	cbnz	r2, 8004c82 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004c4c:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004c50:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8004c52:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	6961      	ldr	r1, [r4, #20]
 8004c58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c5c:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004c5e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004c60:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8004c70:	e7d6      	b.n	8004c20 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004c72:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8004c76:	4620      	mov	r0, r4
 8004c78:	f000 f808 	bl	8004c8c <HAL_CRCEx_Polynomial_Set>
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	d0e2      	beq.n	8004c46 <HAL_CRC_Init+0x2e>
 8004c80:	e7cd      	b.n	8004c1e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004c82:	6922      	ldr	r2, [r4, #16]
 8004c84:	e7e4      	b.n	8004c50 <HAL_CRC_Init+0x38>
 8004c86:	bf00      	nop
 8004c88:	04c11db7 	.word	0x04c11db7

08004c8c <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004c8c:	231f      	movs	r3, #31
{
 8004c8e:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004c90:	3b01      	subs	r3, #1
 8004c92:	d306      	bcc.n	8004ca2 <HAL_CRCEx_Polynomial_Set+0x16>
 8004c94:	fa21 f403 	lsr.w	r4, r1, r3
 8004c98:	07e4      	lsls	r4, r4, #31
 8004c9a:	d5f9      	bpl.n	8004c90 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8004c9c:	2a08      	cmp	r2, #8
 8004c9e:	d014      	beq.n	8004cca <HAL_CRCEx_Polynomial_Set+0x3e>
 8004ca0:	d802      	bhi.n	8004ca8 <HAL_CRCEx_Polynomial_Set+0x1c>
 8004ca2:	b13a      	cbz	r2, 8004cb4 <HAL_CRCEx_Polynomial_Set+0x28>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8004ca4:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8004ca6:	e00d      	b.n	8004cc4 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8004ca8:	2a10      	cmp	r2, #16
 8004caa:	d00c      	beq.n	8004cc6 <HAL_CRCEx_Polynomial_Set+0x3a>
 8004cac:	2a18      	cmp	r2, #24
 8004cae:	d1f9      	bne.n	8004ca4 <HAL_CRCEx_Polynomial_Set+0x18>
      if (msb >= HAL_CRC_LENGTH_7B)
 8004cb0:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8004cb2:	d8f7      	bhi.n	8004ca4 <HAL_CRCEx_Polynomial_Set+0x18>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004cb4:	6800      	ldr	r0, [r0, #0]
 8004cb6:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004cb8:	6883      	ldr	r3, [r0, #8]
 8004cba:	f023 0318 	bic.w	r3, r3, #24
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	6082      	str	r2, [r0, #8]
 8004cc2:	2000      	movs	r0, #0
}
 8004cc4:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8004cc6:	2b07      	cmp	r3, #7
 8004cc8:	e7f3      	b.n	8004cb2 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8004cca:	2b0f      	cmp	r3, #15
 8004ccc:	e7f1      	b.n	8004cb2 <HAL_CRCEx_Polynomial_Set+0x26>

08004cce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004cce:	b570      	push	{r4, r5, r6, lr}
 8004cd0:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cd2:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8004cd4:	f7ff fed8 	bl	8004a88 <HAL_GetTick>
 8004cd8:	4605      	mov	r5, r0
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cda:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d006      	beq.n	8004cf0 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ce2:	2380      	movs	r3, #128	; 0x80
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    return HAL_ERROR;
 8004ce4:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ce6:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
  }
  return HAL_OK;
}
 8004cee:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	f022 0216 	bic.w	r2, r2, #22
 8004cf8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cfa:	695a      	ldr	r2, [r3, #20]
 8004cfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d00:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d02:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004d04:	b90a      	cbnz	r2, 8004d0a <HAL_DMA_Abort+0x3c>
 8004d06:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004d08:	b11a      	cbz	r2, 8004d12 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	f022 0208 	bic.w	r2, r2, #8
 8004d10:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	f022 0201 	bic.w	r2, r2, #1
 8004d18:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f013 0301 	ands.w	r3, r3, #1
 8004d22:	d10a      	bne.n	8004d3a <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d24:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004d26:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8004d28:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d2a:	408a      	lsls	r2, r1
 8004d2c:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8004d2e:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 8004d30:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8004d34:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 8004d38:	e7d9      	b.n	8004cee <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d3a:	f7ff fea5 	bl	8004a88 <HAL_GetTick>
 8004d3e:	1b40      	subs	r0, r0, r5
 8004d40:	2805      	cmp	r0, #5
 8004d42:	d9ea      	bls.n	8004d1a <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d44:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d46:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d48:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8004d4a:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d4c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8004d50:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8004d54:	e7cb      	b.n	8004cee <HAL_DMA_Abort+0x20>

08004d56 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004d56:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004d58:	4604      	mov	r4, r0
 8004d5a:	b330      	cbz	r0, 8004daa <HAL_DMA2D_Init+0x54>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004d5c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004d60:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d64:	b91b      	cbnz	r3, 8004d6e <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004d66:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004d6a:	f7fc fb05 	bl	8001378 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004d6e:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004d70:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004d72:	6861      	ldr	r1, [r4, #4]
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004d74:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004d76:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004d7a:	6813      	ldr	r3, [r2, #0]
 8004d7c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004d80:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004d82:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004d84:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004d86:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004d88:	f023 0307 	bic.w	r3, r3, #7
 8004d8c:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004d8e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004d90:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004d92:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004d94:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004d98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	6413      	str	r3, [r2, #64]	; 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004da0:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004da2:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004da4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 8004da8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004daa:	2001      	movs	r0, #1
 8004dac:	e7fc      	b.n	8004da8 <HAL_DMA2D_Init+0x52>

08004dae <HAL_DMA2D_LineEventCallback>:
 8004dae:	4770      	bx	lr

08004db0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8004db0:	4770      	bx	lr

08004db2 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004db2:	6803      	ldr	r3, [r0, #0]
{
 8004db4:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004db6:	685e      	ldr	r6, [r3, #4]
{
 8004db8:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004dba:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004dbc:	07f2      	lsls	r2, r6, #31
 8004dbe:	d514      	bpl.n	8004dea <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004dc0:	05e9      	lsls	r1, r5, #23
 8004dc2:	d512      	bpl.n	8004dea <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dca:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004dcc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004dce:	f042 0201 	orr.w	r2, r2, #1
 8004dd2:	63c2      	str	r2, [r0, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004dd8:	2304      	movs	r3, #4
 8004dda:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004dde:	2300      	movs	r3, #0
 8004de0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004de4:	6943      	ldr	r3, [r0, #20]
 8004de6:	b103      	cbz	r3, 8004dea <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004de8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004dea:	06b2      	lsls	r2, r6, #26
 8004dec:	d516      	bpl.n	8004e1c <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004dee:	04ab      	lsls	r3, r5, #18
 8004df0:	d514      	bpl.n	8004e1c <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dfa:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004e00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e02:	f043 0302 	orr.w	r3, r3, #2
 8004e06:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004e08:	2304      	movs	r3, #4
 8004e0a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004e14:	6963      	ldr	r3, [r4, #20]
 8004e16:	b10b      	cbz	r3, 8004e1c <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004e18:	4620      	mov	r0, r4
 8004e1a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004e1c:	0730      	lsls	r0, r6, #28
 8004e1e:	d516      	bpl.n	8004e4e <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004e20:	0529      	lsls	r1, r5, #20
 8004e22:	d514      	bpl.n	8004e4e <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e2c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004e2e:	2208      	movs	r2, #8
 8004e30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004e32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e34:	f043 0304 	orr.w	r3, r3, #4
 8004e38:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004e3a:	2304      	movs	r3, #4
 8004e3c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004e40:	2300      	movs	r3, #0
 8004e42:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004e46:	6963      	ldr	r3, [r4, #20]
 8004e48:	b10b      	cbz	r3, 8004e4e <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004e4e:	0772      	lsls	r2, r6, #29
 8004e50:	d50b      	bpl.n	8004e6a <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004e52:	056b      	lsls	r3, r5, #21
 8004e54:	d509      	bpl.n	8004e6a <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004e56:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004e58:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e60:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004e62:	2204      	movs	r2, #4
 8004e64:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004e66:	f7ff ffa2 	bl	8004dae <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004e6a:	07b0      	lsls	r0, r6, #30
 8004e6c:	d514      	bpl.n	8004e98 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004e6e:	05a9      	lsls	r1, r5, #22
 8004e70:	d512      	bpl.n	8004e98 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e7a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004e80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e82:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e84:	2301      	movs	r3, #1
 8004e86:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8004e90:	6923      	ldr	r3, [r4, #16]
 8004e92:	b10b      	cbz	r3, 8004e98 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004e94:	4620      	mov	r0, r4
 8004e96:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004e98:	06f2      	lsls	r2, r6, #27
 8004e9a:	d513      	bpl.n	8004ec4 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004e9c:	04eb      	lsls	r3, r5, #19
 8004e9e:	d511      	bpl.n	8004ec4 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004ea0:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004ea2:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004eaa:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004eac:	2210      	movs	r2, #16
 8004eae:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004eb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004eb2:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8004eba:	2300      	movs	r3, #0
 8004ebc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004ec0:	f7ff ff76 	bl	8004db0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004ec4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ec8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004eca:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	f04f 0302 	mov.w	r3, #2
 8004ed4:	d02b      	beq.n	8004f2e <HAL_DMA2D_ConfigLayer+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004ed6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8004eda:	2201      	movs	r2, #1
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004edc:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8004ee0:	4f1c      	ldr	r7, [pc, #112]	; (8004f54 <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
 8004ee2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004ee6:	010e      	lsls	r6, r1, #4
 8004ee8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8004eea:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 8004eee:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004ef2:	3c09      	subs	r4, #9
 8004ef4:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004ef6:	bf96      	itet	ls
 8004ef8:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004efc:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004f00:	431a      	orrls	r2, r3
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004f02:	6803      	ldr	r3, [r0, #0]
 8004f04:	b9a9      	cbnz	r1, 8004f32 <HAL_DMA2D_ConfigLayer+0x6a>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004f06:	6a59      	ldr	r1, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f08:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004f0a:	ea01 0107 	and.w	r1, r1, r7
 8004f0e:	ea42 0201 	orr.w	r2, r2, r1
 8004f12:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004f14:	6982      	ldr	r2, [r0, #24]
 8004f16:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f18:	d803      	bhi.n	8004f22 <HAL_DMA2D_ConfigLayer+0x5a>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004f1a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004f1c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004f20:	629a      	str	r2, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8004f2e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8004f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004f32:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f34:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004f36:	ea01 0107 	and.w	r1, r1, r7
 8004f3a:	ea42 0201 	orr.w	r2, r2, r1
 8004f3e:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004f40:	eb00 0206 	add.w	r2, r0, r6
 8004f44:	6992      	ldr	r2, [r2, #24]
 8004f46:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f48:	d8eb      	bhi.n	8004f22 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004f4a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 8004f4e:	621d      	str	r5, [r3, #32]
 8004f50:	e7e7      	b.n	8004f22 <HAL_DMA2D_ConfigLayer+0x5a>
 8004f52:	bf00      	nop
 8004f54:	00fcfff0 	.word	0x00fcfff0

08004f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004f5c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f5e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 800511c <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f62:	4a6c      	ldr	r2, [pc, #432]	; (8005114 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8004f64:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f66:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8004f68:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f6a:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8004f6e:	43ac      	bics	r4, r5
 8004f70:	f040 80b6 	bne.w	80050e0 <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f74:	684d      	ldr	r5, [r1, #4]
 8004f76:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8004f7a:	2603      	movs	r6, #3
 8004f7c:	f005 0403 	and.w	r4, r5, #3
 8004f80:	fa06 f608 	lsl.w	r6, r6, r8
 8004f84:	1e67      	subs	r7, r4, #1
 8004f86:	43f6      	mvns	r6, r6
 8004f88:	2f01      	cmp	r7, #1
 8004f8a:	d834      	bhi.n	8004ff6 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8004f8c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004f8e:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8004f92:	68cf      	ldr	r7, [r1, #12]
 8004f94:	fa07 f708 	lsl.w	r7, r7, r8
 8004f98:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004f9c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004f9e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fa0:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fa4:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8004fa8:	409f      	lsls	r7, r3
 8004faa:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004fae:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004fb0:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fb2:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004fb4:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004fb8:	688f      	ldr	r7, [r1, #8]
 8004fba:	fa07 f708 	lsl.w	r7, r7, r8
 8004fbe:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8004fc2:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fc4:	d119      	bne.n	8004ffa <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 8004fc6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004fca:	f003 0b07 	and.w	fp, r3, #7
 8004fce:	f04f 0e0f 	mov.w	lr, #15
 8004fd2:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8004fd6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8004fda:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004fde:	fa0e fe0b 	lsl.w	lr, lr, fp
 8004fe2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004fe6:	690f      	ldr	r7, [r1, #16]
 8004fe8:	fa07 f70b 	lsl.w	r7, r7, fp
 8004fec:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8004ff0:	f8ca 7020 	str.w	r7, [sl, #32]
 8004ff4:	e001      	b.n	8004ffa <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ff6:	2c03      	cmp	r4, #3
 8004ff8:	d1da      	bne.n	8004fb0 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 8004ffa:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004ffc:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005000:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005004:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005008:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 800500c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800500e:	d067      	beq.n	80050e0 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005010:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8005014:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005018:	f003 0703 	and.w	r7, r3, #3
 800501c:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005020:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8005024:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005028:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800502a:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800502e:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8005032:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8005036:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 800503a:	9401      	str	r4, [sp, #4]
 800503c:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800503e:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8005042:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005046:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800504a:	4c33      	ldr	r4, [pc, #204]	; (8005118 <HAL_GPIO_Init+0x1c0>)
 800504c:	42a0      	cmp	r0, r4
 800504e:	d04e      	beq.n	80050ee <HAL_GPIO_Init+0x196>
 8005050:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005054:	42a0      	cmp	r0, r4
 8005056:	d04c      	beq.n	80050f2 <HAL_GPIO_Init+0x19a>
 8005058:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800505c:	42a0      	cmp	r0, r4
 800505e:	d04a      	beq.n	80050f6 <HAL_GPIO_Init+0x19e>
 8005060:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005064:	42a0      	cmp	r0, r4
 8005066:	d048      	beq.n	80050fa <HAL_GPIO_Init+0x1a2>
 8005068:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800506c:	42a0      	cmp	r0, r4
 800506e:	d046      	beq.n	80050fe <HAL_GPIO_Init+0x1a6>
 8005070:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005074:	42a0      	cmp	r0, r4
 8005076:	d044      	beq.n	8005102 <HAL_GPIO_Init+0x1aa>
 8005078:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800507c:	42a0      	cmp	r0, r4
 800507e:	d042      	beq.n	8005106 <HAL_GPIO_Init+0x1ae>
 8005080:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005084:	42a0      	cmp	r0, r4
 8005086:	d040      	beq.n	800510a <HAL_GPIO_Init+0x1b2>
 8005088:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800508c:	42a0      	cmp	r0, r4
 800508e:	d03e      	beq.n	800510e <HAL_GPIO_Init+0x1b6>
 8005090:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005094:	42a0      	cmp	r0, r4
 8005096:	bf0c      	ite	eq
 8005098:	2409      	moveq	r4, #9
 800509a:	240a      	movne	r4, #10
 800509c:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800509e:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80050a0:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80050a4:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 80050a6:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 80050aa:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80050ac:	bf54      	ite	pl
 80050ae:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80050b0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80050b4:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 80050b6:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 80050b8:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80050ba:	bf54      	ite	pl
 80050bc:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80050be:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80050c2:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 80050c4:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 80050c6:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80050c8:	bf54      	ite	pl
 80050ca:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80050cc:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80050d0:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 80050d2:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 80050d4:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80050d6:	bf54      	ite	pl
 80050d8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80050da:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80050de:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80050e0:	3301      	adds	r3, #1
 80050e2:	2b10      	cmp	r3, #16
 80050e4:	f47f af3e 	bne.w	8004f64 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80050e8:	b003      	add	sp, #12
 80050ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80050ee:	2400      	movs	r4, #0
 80050f0:	e7d4      	b.n	800509c <HAL_GPIO_Init+0x144>
 80050f2:	2401      	movs	r4, #1
 80050f4:	e7d2      	b.n	800509c <HAL_GPIO_Init+0x144>
 80050f6:	2402      	movs	r4, #2
 80050f8:	e7d0      	b.n	800509c <HAL_GPIO_Init+0x144>
 80050fa:	2403      	movs	r4, #3
 80050fc:	e7ce      	b.n	800509c <HAL_GPIO_Init+0x144>
 80050fe:	2404      	movs	r4, #4
 8005100:	e7cc      	b.n	800509c <HAL_GPIO_Init+0x144>
 8005102:	2405      	movs	r4, #5
 8005104:	e7ca      	b.n	800509c <HAL_GPIO_Init+0x144>
 8005106:	2406      	movs	r4, #6
 8005108:	e7c8      	b.n	800509c <HAL_GPIO_Init+0x144>
 800510a:	2407      	movs	r4, #7
 800510c:	e7c6      	b.n	800509c <HAL_GPIO_Init+0x144>
 800510e:	2408      	movs	r4, #8
 8005110:	e7c4      	b.n	800509c <HAL_GPIO_Init+0x144>
 8005112:	bf00      	nop
 8005114:	40013c00 	.word	0x40013c00
 8005118:	40020000 	.word	0x40020000
 800511c:	40023800 	.word	0x40023800

08005120 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005124:	2200      	movs	r2, #0
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005126:	4c4a      	ldr	r4, [pc, #296]	; (8005250 <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005128:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8005258 <HAL_GPIO_DeInit+0x138>
 800512c:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800525c <HAL_GPIO_DeInit+0x13c>
 8005130:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005260 <HAL_GPIO_DeInit+0x140>
    ioposition = ((uint32_t)0x01) << position;
 8005134:	2301      	movs	r3, #1
 8005136:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 800513a:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 800513e:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 8005142:	d16e      	bne.n	8005222 <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2];
 8005144:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005148:	f002 0c03 	and.w	ip, r2, #3
 800514c:	260f      	movs	r6, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800514e:	4b41      	ldr	r3, [pc, #260]	; (8005254 <HAL_GPIO_DeInit+0x134>)
 8005150:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005154:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005158:	4298      	cmp	r0, r3
 800515a:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800515e:	fa06 f60c 	lsl.w	r6, r6, ip
      tmp = SYSCFG->EXTICR[position >> 2];
 8005162:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005166:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800516a:	d05f      	beq.n	800522c <HAL_GPIO_DeInit+0x10c>
 800516c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005170:	4298      	cmp	r0, r3
 8005172:	d05d      	beq.n	8005230 <HAL_GPIO_DeInit+0x110>
 8005174:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005178:	4298      	cmp	r0, r3
 800517a:	d05b      	beq.n	8005234 <HAL_GPIO_DeInit+0x114>
 800517c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005180:	4298      	cmp	r0, r3
 8005182:	d059      	beq.n	8005238 <HAL_GPIO_DeInit+0x118>
 8005184:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005188:	4298      	cmp	r0, r3
 800518a:	d057      	beq.n	800523c <HAL_GPIO_DeInit+0x11c>
 800518c:	4548      	cmp	r0, r9
 800518e:	d057      	beq.n	8005240 <HAL_GPIO_DeInit+0x120>
 8005190:	4550      	cmp	r0, sl
 8005192:	d057      	beq.n	8005244 <HAL_GPIO_DeInit+0x124>
 8005194:	4558      	cmp	r0, fp
 8005196:	d057      	beq.n	8005248 <HAL_GPIO_DeInit+0x128>
 8005198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800519c:	4298      	cmp	r0, r3
 800519e:	d055      	beq.n	800524c <HAL_GPIO_DeInit+0x12c>
 80051a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051a4:	4298      	cmp	r0, r3
 80051a6:	bf0c      	ite	eq
 80051a8:	2309      	moveq	r3, #9
 80051aa:	230a      	movne	r3, #10
 80051ac:	fa03 f30c 	lsl.w	r3, r3, ip
 80051b0:	4543      	cmp	r3, r8
 80051b2:	d113      	bne.n	80051dc <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	ea23 0307 	bic.w	r3, r3, r7
 80051ba:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80051bc:	6863      	ldr	r3, [r4, #4]
 80051be:	ea23 0307 	bic.w	r3, r3, r7
 80051c2:	6063      	str	r3, [r4, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80051c4:	68e3      	ldr	r3, [r4, #12]
 80051c6:	ea23 0307 	bic.w	r3, r3, r7
 80051ca:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80051cc:	68a3      	ldr	r3, [r4, #8]
 80051ce:	ea23 0707 	bic.w	r7, r3, r7
 80051d2:	60a7      	str	r7, [r4, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80051d4:	68ab      	ldr	r3, [r5, #8]
 80051d6:	ea23 0606 	bic.w	r6, r3, r6
 80051da:	60ae      	str	r6, [r5, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80051dc:	2603      	movs	r6, #3
 80051de:	0053      	lsls	r3, r2, #1
 80051e0:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80051e2:	f002 0c07 	and.w	ip, r2, #7
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80051e6:	fa06 f303 	lsl.w	r3, r6, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80051ea:	270f      	movs	r7, #15
 80051ec:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80051f0:	ea25 0503 	bic.w	r5, r5, r3
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80051f4:	fa07 f70c 	lsl.w	r7, r7, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80051f8:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80051fa:	fa22 f506 	lsr.w	r5, r2, r6
 80051fe:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8005202:	6a2e      	ldr	r6, [r5, #32]
 8005204:	ea26 0707 	bic.w	r7, r6, r7
 8005208:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800520a:	68c5      	ldr	r5, [r0, #12]
 800520c:	ea25 0503 	bic.w	r5, r5, r3
 8005210:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005212:	6845      	ldr	r5, [r0, #4]
 8005214:	ea25 050e 	bic.w	r5, r5, lr
 8005218:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800521a:	6885      	ldr	r5, [r0, #8]
 800521c:	ea25 0303 	bic.w	r3, r5, r3
 8005220:	6083      	str	r3, [r0, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005222:	3201      	adds	r2, #1
 8005224:	2a10      	cmp	r2, #16
 8005226:	d185      	bne.n	8005134 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8005228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800522c:	2300      	movs	r3, #0
 800522e:	e7bd      	b.n	80051ac <HAL_GPIO_DeInit+0x8c>
 8005230:	2301      	movs	r3, #1
 8005232:	e7bb      	b.n	80051ac <HAL_GPIO_DeInit+0x8c>
 8005234:	2302      	movs	r3, #2
 8005236:	e7b9      	b.n	80051ac <HAL_GPIO_DeInit+0x8c>
 8005238:	2303      	movs	r3, #3
 800523a:	e7b7      	b.n	80051ac <HAL_GPIO_DeInit+0x8c>
 800523c:	2304      	movs	r3, #4
 800523e:	e7b5      	b.n	80051ac <HAL_GPIO_DeInit+0x8c>
 8005240:	2305      	movs	r3, #5
 8005242:	e7b3      	b.n	80051ac <HAL_GPIO_DeInit+0x8c>
 8005244:	2306      	movs	r3, #6
 8005246:	e7b1      	b.n	80051ac <HAL_GPIO_DeInit+0x8c>
 8005248:	2307      	movs	r3, #7
 800524a:	e7af      	b.n	80051ac <HAL_GPIO_DeInit+0x8c>
 800524c:	2308      	movs	r3, #8
 800524e:	e7ad      	b.n	80051ac <HAL_GPIO_DeInit+0x8c>
 8005250:	40013c00 	.word	0x40013c00
 8005254:	40020000 	.word	0x40020000
 8005258:	40021400 	.word	0x40021400
 800525c:	40021800 	.word	0x40021800
 8005260:	40021c00 	.word	0x40021c00

08005264 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005264:	b10a      	cbz	r2, 800526a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005266:	6181      	str	r1, [r0, #24]
  }
}
 8005268:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800526a:	0409      	lsls	r1, r1, #16
 800526c:	e7fb      	b.n	8005266 <HAL_GPIO_WritePin+0x2>

0800526e <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800526e:	6803      	ldr	r3, [r0, #0]
 8005270:	699a      	ldr	r2, [r3, #24]
 8005272:	0791      	lsls	r1, r2, #30
 8005274:	d501      	bpl.n	800527a <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005276:	2200      	movs	r2, #0
 8005278:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800527a:	699a      	ldr	r2, [r3, #24]
 800527c:	07d2      	lsls	r2, r2, #31
 800527e:	d403      	bmi.n	8005288 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005280:	699a      	ldr	r2, [r3, #24]
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	619a      	str	r2, [r3, #24]
  }
}
 8005288:	4770      	bx	lr
	...

0800528c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800528c:	b530      	push	{r4, r5, lr}
 800528e:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005290:	f3c1 0109 	ubfx	r1, r1, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005294:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005296:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8005298:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800529a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800529e:	4a05      	ldr	r2, [pc, #20]	; (80052b4 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052a0:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80052a2:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 80052aa:	ea20 0002 	bic.w	r0, r0, r2
 80052ae:	4303      	orrs	r3, r0
 80052b0:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80052b2:	bd30      	pop	{r4, r5, pc}
 80052b4:	03ff63ff 	.word	0x03ff63ff

080052b8 <I2C_IsErrorOccurred>:
{
 80052b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 80052bc:	6803      	ldr	r3, [r0, #0]
{
 80052be:	4604      	mov	r4, r0
 80052c0:	4688      	mov	r8, r1
 80052c2:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 80052c4:	699d      	ldr	r5, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80052c6:	f015 0510 	ands.w	r5, r5, #16
 80052ca:	d079      	beq.n	80053c0 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052cc:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 80052ce:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 80052d0:	f04f 0920 	mov.w	r9, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052d4:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	699a      	ldr	r2, [r3, #24]
 80052da:	0695      	lsls	r5, r2, #26
 80052dc:	d436      	bmi.n	800534c <I2C_IsErrorOccurred+0x94>
 80052de:	b10e      	cbz	r6, 80052e4 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 80052e0:	2504      	movs	r5, #4
 80052e2:	e039      	b.n	8005358 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 80052e4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80052e8:	d0f6      	beq.n	80052d8 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80052ea:	f7ff fbcd 	bl	8004a88 <HAL_GetTick>
 80052ee:	1bc0      	subs	r0, r0, r7
 80052f0:	4540      	cmp	r0, r8
 80052f2:	d802      	bhi.n	80052fa <I2C_IsErrorOccurred+0x42>
 80052f4:	f1b8 0f00 	cmp.w	r8, #0
 80052f8:	d1ed      	bne.n	80052d6 <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 80052fe:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005302:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8005304:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005306:	0400      	lsls	r0, r0, #16
 8005308:	d50a      	bpl.n	8005320 <I2C_IsErrorOccurred+0x68>
 800530a:	0449      	lsls	r1, r1, #17
 800530c:	d408      	bmi.n	8005320 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 800530e:	2a20      	cmp	r2, #32
 8005310:	d006      	beq.n	8005320 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005318:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800531a:	f7ff fbb5 	bl	8004a88 <HAL_GetTick>
 800531e:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	699d      	ldr	r5, [r3, #24]
 8005324:	f015 0520 	ands.w	r5, r5, #32
 8005328:	d1d5      	bne.n	80052d6 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800532a:	f7ff fbad 	bl	8004a88 <HAL_GetTick>
 800532e:	1bc0      	subs	r0, r0, r7
 8005330:	2819      	cmp	r0, #25
 8005332:	d9f5      	bls.n	8005320 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005334:	6c63      	ldr	r3, [r4, #68]	; 0x44
              status = HAL_ERROR;
 8005336:	2601      	movs	r6, #1
              __HAL_UNLOCK(hi2c);
 8005338:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800533c:	f043 0320 	orr.w	r3, r3, #32
 8005340:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005342:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005346:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
              status = HAL_ERROR;
 800534a:	e7e9      	b.n	8005320 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 800534c:	2e00      	cmp	r6, #0
 800534e:	d1c7      	bne.n	80052e0 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005350:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 8005352:	2504      	movs	r5, #4
    status = HAL_ERROR;
 8005354:	2601      	movs	r6, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005356:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800535c:	05d0      	lsls	r0, r2, #23
 800535e:	d505      	bpl.n	800536c <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005360:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8005364:	f045 0501 	orr.w	r5, r5, #1
    status = HAL_ERROR;
 8005368:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800536a:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800536c:	0551      	lsls	r1, r2, #21
 800536e:	d505      	bpl.n	800537c <I2C_IsErrorOccurred+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005370:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8005374:	f045 0508 	orr.w	r5, r5, #8
    status = HAL_ERROR;
 8005378:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800537a:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800537c:	0592      	lsls	r2, r2, #22
 800537e:	d521      	bpl.n	80053c4 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005380:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8005384:	f045 0502 	orr.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005388:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800538a:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 800538c:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 800538e:	f7ff ff6e 	bl	800526e <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8005392:	6822      	ldr	r2, [r4, #0]
 8005394:	6853      	ldr	r3, [r2, #4]
 8005396:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800539a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800539e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80053a2:	f023 0301 	bic.w	r3, r3, #1
 80053a6:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80053a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80053aa:	431d      	orrs	r5, r3
    hi2c->State = HAL_I2C_STATE_READY;
 80053ac:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 80053ae:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80053b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b4:	2300      	movs	r3, #0
 80053b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80053ba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80053be:	e003      	b.n	80053c8 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 80053c0:	462e      	mov	r6, r5
 80053c2:	e7c9      	b.n	8005358 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 80053c4:	2e00      	cmp	r6, #0
 80053c6:	d1e0      	bne.n	800538a <I2C_IsErrorOccurred+0xd2>
}
 80053c8:	4630      	mov	r0, r6
 80053ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080053ce <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80053ce:	b570      	push	{r4, r5, r6, lr}
 80053d0:	4604      	mov	r4, r0
 80053d2:	460d      	mov	r5, r1
 80053d4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	079b      	lsls	r3, r3, #30
 80053dc:	d501      	bpl.n	80053e2 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80053de:	2000      	movs	r0, #0
}
 80053e0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053e2:	4632      	mov	r2, r6
 80053e4:	4629      	mov	r1, r5
 80053e6:	4620      	mov	r0, r4
 80053e8:	f7ff ff66 	bl	80052b8 <I2C_IsErrorOccurred>
 80053ec:	b9a0      	cbnz	r0, 8005418 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80053ee:	1c6a      	adds	r2, r5, #1
 80053f0:	d0f1      	beq.n	80053d6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f2:	f7ff fb49 	bl	8004a88 <HAL_GetTick>
 80053f6:	1b80      	subs	r0, r0, r6
 80053f8:	42a8      	cmp	r0, r5
 80053fa:	d801      	bhi.n	8005400 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80053fc:	2d00      	cmp	r5, #0
 80053fe:	d1ea      	bne.n	80053d6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005400:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005402:	f043 0320 	orr.w	r3, r3, #32
 8005406:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005408:	2320      	movs	r3, #32
 800540a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800540e:	2300      	movs	r3, #0
 8005410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005414:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005418:	2001      	movs	r0, #1
 800541a:	e7e1      	b.n	80053e0 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

0800541c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800541c:	b570      	push	{r4, r5, r6, lr}
 800541e:	4604      	mov	r4, r0
 8005420:	460d      	mov	r5, r1
 8005422:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	069b      	lsls	r3, r3, #26
 800542a:	d501      	bpl.n	8005430 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800542c:	2000      	movs	r0, #0
}
 800542e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005430:	4632      	mov	r2, r6
 8005432:	4629      	mov	r1, r5
 8005434:	4620      	mov	r0, r4
 8005436:	f7ff ff3f 	bl	80052b8 <I2C_IsErrorOccurred>
 800543a:	b990      	cbnz	r0, 8005462 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800543c:	f7ff fb24 	bl	8004a88 <HAL_GetTick>
 8005440:	1b80      	subs	r0, r0, r6
 8005442:	42a8      	cmp	r0, r5
 8005444:	d801      	bhi.n	800544a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8005446:	2d00      	cmp	r5, #0
 8005448:	d1ec      	bne.n	8005424 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800544a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800544c:	f043 0320 	orr.w	r3, r3, #32
 8005450:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005452:	2320      	movs	r3, #32
 8005454:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005458:	2300      	movs	r3, #0
 800545a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800545e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005462:	2001      	movs	r0, #1
 8005464:	e7e3      	b.n	800542e <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08005466 <I2C_WaitOnFlagUntilTimeout>:
{
 8005466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800546a:	9f06      	ldr	r7, [sp, #24]
 800546c:	4604      	mov	r4, r0
 800546e:	4688      	mov	r8, r1
 8005470:	4616      	mov	r6, r2
 8005472:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005474:	6822      	ldr	r2, [r4, #0]
 8005476:	6993      	ldr	r3, [r2, #24]
 8005478:	ea38 0303 	bics.w	r3, r8, r3
 800547c:	bf0c      	ite	eq
 800547e:	2301      	moveq	r3, #1
 8005480:	2300      	movne	r3, #0
 8005482:	42b3      	cmp	r3, r6
 8005484:	d001      	beq.n	800548a <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8005486:	2000      	movs	r0, #0
 8005488:	e015      	b.n	80054b6 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800548a:	1c6b      	adds	r3, r5, #1
 800548c:	d0f3      	beq.n	8005476 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800548e:	f7ff fafb 	bl	8004a88 <HAL_GetTick>
 8005492:	1bc0      	subs	r0, r0, r7
 8005494:	42a8      	cmp	r0, r5
 8005496:	d801      	bhi.n	800549c <I2C_WaitOnFlagUntilTimeout+0x36>
 8005498:	2d00      	cmp	r5, #0
 800549a:	d1eb      	bne.n	8005474 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800549c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800549e:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054a0:	f043 0320 	orr.w	r3, r3, #32
 80054a4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054a6:	2320      	movs	r3, #32
 80054a8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ac:	2300      	movs	r3, #0
 80054ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80054b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80054b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080054bc <I2C_RequestMemoryWrite>:
{
 80054bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80054c0:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80054c2:	4b18      	ldr	r3, [pc, #96]	; (8005524 <I2C_RequestMemoryWrite+0x68>)
{
 80054c4:	4605      	mov	r5, r0
 80054c6:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	b2f2      	uxtb	r2, r6
 80054cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 80054d0:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80054d4:	f7ff feda 	bl	800528c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054d8:	4628      	mov	r0, r5
 80054da:	4642      	mov	r2, r8
 80054dc:	4639      	mov	r1, r7
 80054de:	f7ff ff76 	bl	80053ce <I2C_WaitOnTXISFlagUntilTimeout>
 80054e2:	b118      	cbz	r0, 80054ec <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 80054e4:	2001      	movs	r0, #1
}
 80054e6:	b002      	add	sp, #8
 80054e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054ec:	2e01      	cmp	r6, #1
 80054ee:	682b      	ldr	r3, [r5, #0]
 80054f0:	d10d      	bne.n	800550e <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054f2:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80054f4:	2200      	movs	r2, #0
 80054f6:	2180      	movs	r1, #128	; 0x80
 80054f8:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054fa:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80054fc:	463b      	mov	r3, r7
 80054fe:	f8cd 8000 	str.w	r8, [sp]
 8005502:	f7ff ffb0 	bl	8005466 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8005506:	3800      	subs	r0, #0
 8005508:	bf18      	it	ne
 800550a:	2001      	movne	r0, #1
 800550c:	e7eb      	b.n	80054e6 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800550e:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005510:	4639      	mov	r1, r7
 8005512:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005514:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005516:	4642      	mov	r2, r8
 8005518:	f7ff ff59 	bl	80053ce <I2C_WaitOnTXISFlagUntilTimeout>
 800551c:	2800      	cmp	r0, #0
 800551e:	d1e1      	bne.n	80054e4 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005520:	682b      	ldr	r3, [r5, #0]
 8005522:	e7e6      	b.n	80054f2 <I2C_RequestMemoryWrite+0x36>
 8005524:	80002000 	.word	0x80002000

08005528 <I2C_RequestMemoryRead>:
{
 8005528:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800552c:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800552e:	4b18      	ldr	r3, [pc, #96]	; (8005590 <I2C_RequestMemoryRead+0x68>)
{
 8005530:	4605      	mov	r5, r0
 8005532:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	b2f2      	uxtb	r2, r6
 8005538:	2300      	movs	r3, #0
{
 800553a:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800553e:	f7ff fea5 	bl	800528c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005542:	4628      	mov	r0, r5
 8005544:	4642      	mov	r2, r8
 8005546:	4639      	mov	r1, r7
 8005548:	f7ff ff41 	bl	80053ce <I2C_WaitOnTXISFlagUntilTimeout>
 800554c:	b118      	cbz	r0, 8005556 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 800554e:	2001      	movs	r0, #1
}
 8005550:	b002      	add	sp, #8
 8005552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005556:	2e01      	cmp	r6, #1
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	d10d      	bne.n	8005578 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800555c:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800555e:	2200      	movs	r2, #0
 8005560:	2140      	movs	r1, #64	; 0x40
 8005562:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005564:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005566:	463b      	mov	r3, r7
 8005568:	f8cd 8000 	str.w	r8, [sp]
 800556c:	f7ff ff7b 	bl	8005466 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8005570:	3800      	subs	r0, #0
 8005572:	bf18      	it	ne
 8005574:	2001      	movne	r0, #1
 8005576:	e7eb      	b.n	8005550 <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005578:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800557a:	4639      	mov	r1, r7
 800557c:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800557e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005580:	4642      	mov	r2, r8
 8005582:	f7ff ff24 	bl	80053ce <I2C_WaitOnTXISFlagUntilTimeout>
 8005586:	2800      	cmp	r0, #0
 8005588:	d1e1      	bne.n	800554e <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800558a:	682b      	ldr	r3, [r5, #0]
 800558c:	e7e6      	b.n	800555c <I2C_RequestMemoryRead+0x34>
 800558e:	bf00      	nop
 8005590:	80002000 	.word	0x80002000

08005594 <HAL_I2C_Init>:
{
 8005594:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8005596:	4604      	mov	r4, r0
 8005598:	2800      	cmp	r0, #0
 800559a:	d04a      	beq.n	8005632 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800559c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80055a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80055a4:	b91b      	cbnz	r3, 80055ae <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80055a6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80055aa:	f7fb ff05 	bl	80013b8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80055ae:	2324      	movs	r3, #36	; 0x24
 80055b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	f022 0201 	bic.w	r2, r2, #1
 80055bc:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80055be:	6862      	ldr	r2, [r4, #4]
 80055c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055c4:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055cc:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055ce:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80055d2:	2901      	cmp	r1, #1
 80055d4:	d124      	bne.n	8005620 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80055d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055da:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80055dc:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055de:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80055e0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80055e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055e8:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055f0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055f2:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80055f6:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80055f8:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80055fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80055fe:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005600:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8005604:	430a      	orrs	r2, r1
 8005606:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8005610:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005612:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005614:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005618:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800561a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800561e:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005620:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005624:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005626:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005628:	d1d8      	bne.n	80055dc <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800562a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800562e:	605a      	str	r2, [r3, #4]
 8005630:	e7d4      	b.n	80055dc <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8005632:	2001      	movs	r0, #1
 8005634:	e7f3      	b.n	800561e <HAL_I2C_Init+0x8a>

08005636 <HAL_I2C_DeInit>:
{
 8005636:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8005638:	4604      	mov	r4, r0
 800563a:	b198      	cbz	r0, 8005664 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 800563c:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800563e:	2324      	movs	r3, #36	; 0x24
 8005640:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005644:	6813      	ldr	r3, [r2, #0]
 8005646:	f023 0301 	bic.w	r3, r3, #1
 800564a:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800564c:	f7fb fefa 	bl	8001444 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005650:	2000      	movs	r0, #0
 8005652:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8005654:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8005658:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800565c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800565e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005662:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005664:	2001      	movs	r0, #1
 8005666:	e7fc      	b.n	8005662 <HAL_I2C_DeInit+0x2c>

08005668 <HAL_I2C_Mem_Write>:
{
 8005668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800566c:	b085      	sub	sp, #20
 800566e:	469b      	mov	fp, r3
 8005670:	4604      	mov	r4, r0
 8005672:	460f      	mov	r7, r1
 8005674:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8005678:	4692      	mov	sl, r2
 800567a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 800567e:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005680:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005684:	2b20      	cmp	r3, #32
 8005686:	f040 80a3 	bne.w	80057d0 <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 800568a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800568c:	b10b      	cbz	r3, 8005692 <HAL_I2C_Mem_Write+0x2a>
 800568e:	9b03      	ldr	r3, [sp, #12]
 8005690:	b933      	cbnz	r3, 80056a0 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005692:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005696:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005698:	2001      	movs	r0, #1
}
 800569a:	b005      	add	sp, #20
 800569c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80056a0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	f000 8093 	beq.w	80057d0 <HAL_I2C_Mem_Write+0x168>
 80056aa:	2501      	movs	r5, #1
 80056ac:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80056b0:	f7ff f9ea 	bl	8004a88 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056b4:	2319      	movs	r3, #25
 80056b6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80056b8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056ba:	462a      	mov	r2, r5
 80056bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056c0:	4620      	mov	r0, r4
 80056c2:	f7ff fed0 	bl	8005466 <I2C_WaitOnFlagUntilTimeout>
 80056c6:	4680      	mov	r8, r0
 80056c8:	2800      	cmp	r0, #0
 80056ca:	d1e5      	bne.n	8005698 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056cc:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 80056ce:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056d0:	4652      	mov	r2, sl
 80056d2:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056d8:	2340      	movs	r3, #64	; 0x40
 80056da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80056de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056e0:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056e2:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80056e4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80056e6:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056e8:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 80056ec:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056ee:	465b      	mov	r3, fp
 80056f0:	f7ff fee4 	bl	80054bc <I2C_RequestMemoryWrite>
 80056f4:	b110      	cbz	r0, 80056fc <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 80056f6:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 80056fa:	e7cd      	b.n	8005698 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2bff      	cmp	r3, #255	; 0xff
 8005702:	d955      	bls.n	80057b0 <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005704:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005706:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800570a:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800570c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800570e:	4639      	mov	r1, r7
 8005710:	4620      	mov	r0, r4
 8005712:	f7ff fdbb 	bl	800528c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005716:	4632      	mov	r2, r6
 8005718:	4649      	mov	r1, r9
 800571a:	4620      	mov	r0, r4
 800571c:	f7ff fe57 	bl	80053ce <I2C_WaitOnTXISFlagUntilTimeout>
 8005720:	2800      	cmp	r0, #0
 8005722:	d1b9      	bne.n	8005698 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005724:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005726:	6822      	ldr	r2, [r4, #0]
 8005728:	f813 1b01 	ldrb.w	r1, [r3], #1
 800572c:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800572e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005730:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005732:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005734:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8005736:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8005738:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800573a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800573c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800573e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005740:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005742:	b29b      	uxth	r3, r3
 8005744:	b1ab      	cbz	r3, 8005772 <HAL_I2C_Mem_Write+0x10a>
 8005746:	b9a2      	cbnz	r2, 8005772 <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005748:	464b      	mov	r3, r9
 800574a:	2180      	movs	r1, #128	; 0x80
 800574c:	4620      	mov	r0, r4
 800574e:	9600      	str	r6, [sp, #0]
 8005750:	f7ff fe89 	bl	8005466 <I2C_WaitOnFlagUntilTimeout>
 8005754:	2800      	cmp	r0, #0
 8005756:	d19f      	bne.n	8005698 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005758:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800575a:	b29b      	uxth	r3, r3
 800575c:	2bff      	cmp	r3, #255	; 0xff
 800575e:	d92f      	bls.n	80057c0 <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005760:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005762:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005766:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005768:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800576a:	4639      	mov	r1, r7
 800576c:	4620      	mov	r0, r4
 800576e:	f7ff fd8d 	bl	800528c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005772:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1cd      	bne.n	8005716 <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800577a:	4632      	mov	r2, r6
 800577c:	4649      	mov	r1, r9
 800577e:	4620      	mov	r0, r4
 8005780:	f7ff fe4c 	bl	800541c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005784:	2800      	cmp	r0, #0
 8005786:	d187      	bne.n	8005698 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	2120      	movs	r1, #32
 800578c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005794:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005798:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800579c:	f022 0201 	bic.w	r2, r2, #1
 80057a0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80057a2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80057a6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80057aa:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80057ae:	e774      	b.n	800569a <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80057b0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80057b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057b6:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80057b8:	b292      	uxth	r2, r2
 80057ba:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	e7a6      	b.n	800570e <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 80057c0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057c6:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80057c8:	b292      	uxth	r2, r2
 80057ca:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	e7cc      	b.n	800576a <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 80057d0:	2002      	movs	r0, #2
 80057d2:	e762      	b.n	800569a <HAL_I2C_Mem_Write+0x32>

080057d4 <HAL_I2C_Mem_Read>:
{
 80057d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d8:	b085      	sub	sp, #20
 80057da:	469b      	mov	fp, r3
 80057dc:	4604      	mov	r4, r0
 80057de:	460f      	mov	r7, r1
 80057e0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80057e4:	4692      	mov	sl, r2
 80057e6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80057ea:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80057ec:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80057f0:	2b20      	cmp	r3, #32
 80057f2:	f040 80a7 	bne.w	8005944 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 80057f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057f8:	b10b      	cbz	r3, 80057fe <HAL_I2C_Mem_Read+0x2a>
 80057fa:	9b03      	ldr	r3, [sp, #12]
 80057fc:	b933      	cbnz	r3, 800580c <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80057fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005802:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005804:	2001      	movs	r0, #1
}
 8005806:	b005      	add	sp, #20
 8005808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800580c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005810:	2b01      	cmp	r3, #1
 8005812:	f000 8097 	beq.w	8005944 <HAL_I2C_Mem_Read+0x170>
 8005816:	2501      	movs	r5, #1
 8005818:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800581c:	f7ff f934 	bl	8004a88 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005820:	2319      	movs	r3, #25
 8005822:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8005824:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005826:	462a      	mov	r2, r5
 8005828:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800582c:	4620      	mov	r0, r4
 800582e:	f7ff fe1a 	bl	8005466 <I2C_WaitOnFlagUntilTimeout>
 8005832:	4680      	mov	r8, r0
 8005834:	2800      	cmp	r0, #0
 8005836:	d1e5      	bne.n	8005804 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005838:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 800583a:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800583c:	4652      	mov	r2, sl
 800583e:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005840:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005844:	2340      	movs	r3, #64	; 0x40
 8005846:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800584a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800584c:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800584e:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8005850:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005852:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005854:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8005858:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800585a:	465b      	mov	r3, fp
 800585c:	f7ff fe64 	bl	8005528 <I2C_RequestMemoryRead>
 8005860:	b110      	cbz	r0, 8005868 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8005862:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005866:	e7cd      	b.n	8005804 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005868:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800586a:	b29b      	uxth	r3, r3
 800586c:	2bff      	cmp	r3, #255	; 0xff
 800586e:	4b36      	ldr	r3, [pc, #216]	; (8005948 <HAL_I2C_Mem_Read+0x174>)
 8005870:	d958      	bls.n	8005924 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005872:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800587a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800587c:	4639      	mov	r1, r7
 800587e:	4620      	mov	r0, r4
 8005880:	f7ff fd04 	bl	800528c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005884:	464b      	mov	r3, r9
 8005886:	2200      	movs	r2, #0
 8005888:	2104      	movs	r1, #4
 800588a:	4620      	mov	r0, r4
 800588c:	9600      	str	r6, [sp, #0]
 800588e:	f7ff fdea 	bl	8005466 <I2C_WaitOnFlagUntilTimeout>
 8005892:	2800      	cmp	r0, #0
 8005894:	d1b6      	bne.n	8005804 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800589a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800589c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800589e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80058a0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80058a2:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80058a4:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80058a6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80058a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80058aa:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80058ac:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80058ae:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	b1ab      	cbz	r3, 80058e6 <HAL_I2C_Mem_Read+0x112>
 80058ba:	b9a2      	cbnz	r2, 80058e6 <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058bc:	464b      	mov	r3, r9
 80058be:	2180      	movs	r1, #128	; 0x80
 80058c0:	4620      	mov	r0, r4
 80058c2:	9600      	str	r6, [sp, #0]
 80058c4:	f7ff fdcf 	bl	8005466 <I2C_WaitOnFlagUntilTimeout>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	d19b      	bne.n	8005804 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	2bff      	cmp	r3, #255	; 0xff
 80058d2:	d92f      	bls.n	8005934 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058d4:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80058d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058da:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058dc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058de:	4639      	mov	r1, r7
 80058e0:	4620      	mov	r0, r4
 80058e2:	f7ff fcd3 	bl	800528c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80058e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1ca      	bne.n	8005884 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058ee:	4632      	mov	r2, r6
 80058f0:	4649      	mov	r1, r9
 80058f2:	4620      	mov	r0, r4
 80058f4:	f7ff fd92 	bl	800541c <I2C_WaitOnSTOPFlagUntilTimeout>
 80058f8:	2800      	cmp	r0, #0
 80058fa:	d183      	bne.n	8005804 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058fc:	6823      	ldr	r3, [r4, #0]
 80058fe:	2120      	movs	r1, #32
 8005900:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005908:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800590c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005910:	f022 0201 	bic.w	r2, r2, #1
 8005914:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005916:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800591a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800591e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8005922:	e770      	b.n	8005806 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8005924:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 800592c:	b292      	uxth	r2, r2
 800592e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005930:	b2d2      	uxtb	r2, r2
 8005932:	e7a3      	b.n	800587c <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8005934:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800593a:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800593c:	b292      	uxth	r2, r2
 800593e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005940:	b2d2      	uxtb	r2, r2
 8005942:	e7cc      	b.n	80058de <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 8005944:	2002      	movs	r0, #2
 8005946:	e75e      	b.n	8005806 <HAL_I2C_Mem_Read+0x32>
 8005948:	80002400 	.word	0x80002400

0800594c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800594c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800594e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005952:	2b20      	cmp	r3, #32
 8005954:	b2dc      	uxtb	r4, r3
 8005956:	d11d      	bne.n	8005994 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005958:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800595c:	2b01      	cmp	r3, #1
 800595e:	d019      	beq.n	8005994 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005960:	2324      	movs	r3, #36	; 0x24
 8005962:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005966:	6803      	ldr	r3, [r0, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	f022 0201 	bic.w	r2, r2, #1
 800596e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005976:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	4311      	orrs	r1, r2
 800597c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	f042 0201 	orr.w	r2, r2, #1
 8005984:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005986:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005988:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800598c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005990:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005992:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005994:	2002      	movs	r0, #2
 8005996:	e7fc      	b.n	8005992 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08005998 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005998:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800599a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800599e:	2b20      	cmp	r3, #32
 80059a0:	b2dc      	uxtb	r4, r3
 80059a2:	d11c      	bne.n	80059de <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059a4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d018      	beq.n	80059de <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059ac:	2324      	movs	r3, #36	; 0x24
 80059ae:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059b2:	6803      	ldr	r3, [r0, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	f022 0201 	bic.w	r2, r2, #1
 80059ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80059bc:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80059be:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80059c2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80059c6:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	f042 0201 	orr.w	r2, r2, #1
 80059ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059d0:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80059d2:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80059d6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80059da:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 80059dc:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80059de:	2002      	movs	r0, #2
 80059e0:	e7fc      	b.n	80059dc <HAL_I2CEx_ConfigDigitalFilter+0x44>

080059e2 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80059e2:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80059e4:	f8d1 c000 	ldr.w	ip, [r1]
{
 80059e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80059ec:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80059ee:	6804      	ldr	r4, [r0, #0]
 80059f0:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80059f2:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80059f6:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80059f8:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80059fa:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80059fe:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005a02:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005a04:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005a08:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005a0c:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005a0e:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005a10:	68e0      	ldr	r0, [r4, #12]
 8005a12:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8005a16:	4430      	add	r0, r6
 8005a18:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005a1c:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005a1e:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005a20:	68e0      	ldr	r0, [r4, #12]
 8005a22:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8005a26:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005a28:	6898      	ldr	r0, [r3, #8]
 8005a2a:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8005a2e:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005a30:	6888      	ldr	r0, [r1, #8]
 8005a32:	68e6      	ldr	r6, [r4, #12]
 8005a34:	3001      	adds	r0, #1
 8005a36:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8005a3a:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005a3c:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005a3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8005a42:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005a44:	6918      	ldr	r0, [r3, #16]
 8005a46:	f020 0007 	bic.w	r0, r0, #7
 8005a4a:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005a4c:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005a4e:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005a50:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005a54:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005a58:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005a5c:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8005a60:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8005a64:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8005a68:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8005a6c:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005a6e:	6958      	ldr	r0, [r3, #20]
 8005a70:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8005a74:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005a76:	6948      	ldr	r0, [r1, #20]
 8005a78:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005a7a:	69d8      	ldr	r0, [r3, #28]
 8005a7c:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8005a80:	f020 0007 	bic.w	r0, r0, #7
 8005a84:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005a86:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8005a8a:	4305      	orrs	r5, r0
 8005a8c:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005a8e:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005a90:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005a92:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005a96:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005a98:	b31e      	cbz	r6, 8005ae2 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005a9a:	2e01      	cmp	r6, #1
 8005a9c:	d023      	beq.n	8005ae6 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005a9e:	1eb0      	subs	r0, r6, #2
 8005aa0:	2802      	cmp	r0, #2
 8005aa2:	d922      	bls.n	8005aea <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005aa4:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8005aa6:	bf0c      	ite	eq
 8005aa8:	2002      	moveq	r0, #2
 8005aaa:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005aac:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005aae:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005ab2:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8005ab6:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005ab8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005aba:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005abc:	4345      	muls	r5, r0
 8005abe:	4378      	muls	r0, r7
 8005ac0:	3003      	adds	r0, #3
 8005ac2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8005ac6:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005ac8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005aca:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8005ace:	f020 0007 	bic.w	r0, r0, #7
 8005ad2:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005ad4:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005ad6:	58a3      	ldr	r3, [r4, r2]
 8005ad8:	f043 0301 	orr.w	r3, r3, #1
 8005adc:	50a3      	str	r3, [r4, r2]
}
 8005ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8005ae2:	2004      	movs	r0, #4
 8005ae4:	e7e2      	b.n	8005aac <LTDC_SetConfig+0xca>
    tmp = 3U;
 8005ae6:	2003      	movs	r0, #3
 8005ae8:	e7e0      	b.n	8005aac <LTDC_SetConfig+0xca>
    tmp = 2U;
 8005aea:	2002      	movs	r0, #2
 8005aec:	e7de      	b.n	8005aac <LTDC_SetConfig+0xca>
	...

08005af0 <HAL_LTDC_Init>:
{
 8005af0:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8005af2:	4604      	mov	r4, r0
 8005af4:	2800      	cmp	r0, #0
 8005af6:	d063      	beq.n	8005bc0 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005af8:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8005afc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005b00:	b91b      	cbnz	r3, 8005b0a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8005b02:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8005b06:	f7fb fcb9 	bl	800147c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005b10:	6823      	ldr	r3, [r4, #0]
 8005b12:	699a      	ldr	r2, [r3, #24]
 8005b14:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005b18:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b1a:	6999      	ldr	r1, [r3, #24]
 8005b1c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8005b20:	4302      	orrs	r2, r0
 8005b22:	68e0      	ldr	r0, [r4, #12]
 8005b24:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b26:	6920      	ldr	r0, [r4, #16]
 8005b28:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005b2a:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b2c:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005b2e:	4925      	ldr	r1, [pc, #148]	; (8005bc4 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b30:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	400a      	ands	r2, r1
 8005b36:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005b38:	689a      	ldr	r2, [r3, #8]
 8005b3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005b3e:	69a0      	ldr	r0, [r4, #24]
 8005b40:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005b42:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005b44:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	400a      	ands	r2, r1
 8005b4a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005b52:	6a20      	ldr	r0, [r4, #32]
 8005b54:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005b56:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005b58:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005b5a:	691a      	ldr	r2, [r3, #16]
 8005b5c:	400a      	ands	r2, r1
 8005b5e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005b60:	691a      	ldr	r2, [r3, #16]
 8005b62:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005b66:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005b68:	4302      	orrs	r2, r0
 8005b6a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005b6c:	695a      	ldr	r2, [r3, #20]
 8005b6e:	4011      	ands	r1, r2
 8005b70:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005b72:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005b74:	695a      	ldr	r2, [r3, #20]
 8005b76:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005b7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005b80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005b82:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005b86:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005b8a:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005b8e:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005b90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b92:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8005b96:	430a      	orrs	r2, r1
 8005b98:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005b9c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005ba0:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ba6:	f042 0206 	orr.w	r2, r2, #6
 8005baa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8005bb4:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005bb6:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8005bba:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8005bbe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	e7fc      	b.n	8005bbe <HAL_LTDC_Init+0xce>
 8005bc4:	f000f800 	.word	0xf000f800

08005bc8 <HAL_LTDC_ErrorCallback>:
 8005bc8:	4770      	bx	lr

08005bca <HAL_LTDC_ReloadEventCallback>:
 8005bca:	4770      	bx	lr

08005bcc <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005bcc:	6803      	ldr	r3, [r0, #0]
{
 8005bce:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005bd0:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 8005bd2:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005bd4:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005bd6:	0772      	lsls	r2, r6, #29
 8005bd8:	d514      	bpl.n	8005c04 <HAL_LTDC_IRQHandler+0x38>
 8005bda:	0769      	lsls	r1, r5, #29
 8005bdc:	d512      	bpl.n	8005c04 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005be0:	f022 0204 	bic.w	r2, r2, #4
 8005be4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005be6:	2204      	movs	r2, #4
 8005be8:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005bea:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8005bee:	f043 0301 	orr.w	r3, r3, #1
 8005bf2:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8005bf6:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005bf8:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005bfc:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005c00:	f7ff ffe2 	bl	8005bc8 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005c04:	07b2      	lsls	r2, r6, #30
 8005c06:	d516      	bpl.n	8005c36 <HAL_LTDC_IRQHandler+0x6a>
 8005c08:	07ab      	lsls	r3, r5, #30
 8005c0a:	d514      	bpl.n	8005c36 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005c0c:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8005c0e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c12:	f022 0202 	bic.w	r2, r2, #2
 8005c16:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005c18:	2202      	movs	r2, #2
 8005c1a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005c1c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8005c20:	4313      	orrs	r3, r2
 8005c22:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005c26:	2304      	movs	r3, #4
 8005c28:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005c32:	f7ff ffc9 	bl	8005bc8 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005c36:	07f0      	lsls	r0, r6, #31
 8005c38:	d510      	bpl.n	8005c5c <HAL_LTDC_IRQHandler+0x90>
 8005c3a:	07e9      	lsls	r1, r5, #31
 8005c3c:	d50e      	bpl.n	8005c5c <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005c3e:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8005c40:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c44:	f022 0201 	bic.w	r2, r2, #1
 8005c48:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8005c4e:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8005c50:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005c54:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8005c58:	f7fd f958 	bl	8002f0c <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005c5c:	0732      	lsls	r2, r6, #28
 8005c5e:	d511      	bpl.n	8005c84 <HAL_LTDC_IRQHandler+0xb8>
 8005c60:	072b      	lsls	r3, r5, #28
 8005c62:	d50f      	bpl.n	8005c84 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005c64:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005c66:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c6a:	f022 0208 	bic.w	r2, r2, #8
 8005c6e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005c70:	2208      	movs	r2, #8
 8005c72:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8005c74:	2301      	movs	r3, #1
 8005c76:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005c80:	f7ff ffa3 	bl	8005bca <HAL_LTDC_ReloadEventCallback>
}
 8005c84:	bd70      	pop	{r4, r5, r6, pc}

08005c86 <HAL_LTDC_ConfigLayer>:
{
 8005c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8005c8a:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8005c8e:	4606      	mov	r6, r0
 8005c90:	460f      	mov	r7, r1
 8005c92:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	f04f 0002 	mov.w	r0, #2
 8005c9a:	d01f      	beq.n	8005cdc <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005c9c:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8005c9e:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005ca2:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005ca4:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005ca8:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8005cac:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005cb0:	3438      	adds	r4, #56	; 0x38
 8005cb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005cbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cbe:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	4662      	mov	r2, ip
 8005cc4:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005cc6:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005cc8:	f7ff fe8b 	bl	80059e2 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005ccc:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8005cce:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005cd0:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005cd4:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005cd8:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8005cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005ce0 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8005ce0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	f04f 0302 	mov.w	r3, #2
 8005cea:	d012      	beq.n	8005d12 <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005cec:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005cf0:	6803      	ldr	r3, [r0, #0]
 8005cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cf4:	f022 0201 	bic.w	r2, r2, #1
 8005cf8:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8005cfa:	4a07      	ldr	r2, [pc, #28]	; (8005d18 <HAL_LTDC_ProgramLineEvent+0x38>)
 8005cfc:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005cfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d00:	f042 0201 	orr.w	r2, r2, #1
 8005d04:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8005d06:	2301      	movs	r3, #1
 8005d08:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8005d12:	4618      	mov	r0, r3
}
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40016800 	.word	0x40016800

08005d1c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8005d1c:	4b19      	ldr	r3, [pc, #100]	; (8005d84 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8005d1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005d22:	4c19      	ldr	r4, [pc, #100]	; (8005d88 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d24:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005d28:	641a      	str	r2, [r3, #64]	; 0x40
 8005d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d30:	9301      	str	r3, [sp, #4]
 8005d32:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005d34:	6823      	ldr	r3, [r4, #0]
 8005d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d3a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d3c:	f7fe fea4 	bl	8004a88 <HAL_GetTick>
 8005d40:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d42:	6863      	ldr	r3, [r4, #4]
 8005d44:	03da      	lsls	r2, r3, #15
 8005d46:	d50c      	bpl.n	8005d62 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005d48:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d4a:	4d0f      	ldr	r5, [pc, #60]	; (8005d88 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d50:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8005d52:	f7fe fe99 	bl	8004a88 <HAL_GetTick>
 8005d56:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d58:	686b      	ldr	r3, [r5, #4]
 8005d5a:	039b      	lsls	r3, r3, #14
 8005d5c:	d50a      	bpl.n	8005d74 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8005d5e:	2000      	movs	r0, #0
 8005d60:	e006      	b.n	8005d70 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d62:	f7fe fe91 	bl	8004a88 <HAL_GetTick>
 8005d66:	1b40      	subs	r0, r0, r5
 8005d68:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005d6c:	d9e9      	bls.n	8005d42 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8005d6e:	2003      	movs	r0, #3
}
 8005d70:	b003      	add	sp, #12
 8005d72:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d74:	f7fe fe88 	bl	8004a88 <HAL_GetTick>
 8005d78:	1b00      	subs	r0, r0, r4
 8005d7a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005d7e:	d9eb      	bls.n	8005d58 <HAL_PWREx_EnableOverDrive+0x3c>
 8005d80:	e7f5      	b.n	8005d6e <HAL_PWREx_EnableOverDrive+0x52>
 8005d82:	bf00      	nop
 8005d84:	40023800 	.word	0x40023800
 8005d88:	40007000 	.word	0x40007000

08005d8c <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8005d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8005d90:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8005d92:	b136      	cbz	r6, 8005da2 <QSPI_Config+0x16>
 8005d94:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
 8005d98:	d003      	beq.n	8005da2 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005d9a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8005d9c:	6804      	ldr	r4, [r0, #0]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005da2:	f8d1 a018 	ldr.w	sl, [r1, #24]
 8005da6:	e9d1 7c07 	ldrd	r7, ip, [r1, #28]
 8005daa:	f1ba 0f00 	cmp.w	sl, #0
 8005dae:	d04e      	beq.n	8005e4e <QSPI_Config+0xc2>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005db0:	694b      	ldr	r3, [r1, #20]
 8005db2:	ea46 0a0a 	orr.w	sl, r6, sl
 8005db6:	6805      	ldr	r5, [r0, #0]
 8005db8:	f8d1 8000 	ldr.w	r8, [r1]
 8005dbc:	ea4f 4e83 	mov.w	lr, r3, lsl #18
 8005dc0:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8005dc2:	ea4a 0a02 	orr.w	sl, sl, r2
 8005dc6:	e9d1 490b 	ldrd	r4, r9, [r1, #44]	; 0x2c
 8005dca:	f1bc 0f00 	cmp.w	ip, #0
 8005dce:	d026      	beq.n	8005e1e <QSPI_Config+0x92>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005dd0:	688b      	ldr	r3, [r1, #8]
 8005dd2:	ea4c 0c0a 	orr.w	ip, ip, sl
 8005dd6:	690e      	ldr	r6, [r1, #16]
 8005dd8:	61eb      	str	r3, [r5, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005dda:	b1a7      	cbz	r7, 8005e06 <QSPI_Config+0x7a>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005ddc:	ea48 0307 	orr.w	r3, r8, r7
 8005de0:	4323      	orrs	r3, r4
 8005de2:	ea43 0309 	orr.w	r3, r3, r9
 8005de6:	4303      	orrs	r3, r0
 8005de8:	68c8      	ldr	r0, [r1, #12]
 8005dea:	4333      	orrs	r3, r6
 8005dec:	4303      	orrs	r3, r0
 8005dee:	ea43 030e 	orr.w	r3, r3, lr
 8005df2:	ea43 030c 	orr.w	r3, r3, ip
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005df6:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005dfa:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005dfc:	d001      	beq.n	8005e02 <QSPI_Config+0x76>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005dfe:	684b      	ldr	r3, [r1, #4]
 8005e00:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8005e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005e06:	ea48 0304 	orr.w	r3, r8, r4
 8005e0a:	ea43 0309 	orr.w	r3, r3, r9
 8005e0e:	4303      	orrs	r3, r0
 8005e10:	4333      	orrs	r3, r6
 8005e12:	ea43 030e 	orr.w	r3, r3, lr
 8005e16:	ea43 030c 	orr.w	r3, r3, ip
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005e1a:	616b      	str	r3, [r5, #20]
 8005e1c:	e7f1      	b.n	8005e02 <QSPI_Config+0x76>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005e1e:	b167      	cbz	r7, 8005e3a <QSPI_Config+0xae>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005e20:	ea48 0307 	orr.w	r3, r8, r7
 8005e24:	4323      	orrs	r3, r4
 8005e26:	ea43 0309 	orr.w	r3, r3, r9
 8005e2a:	4303      	orrs	r3, r0
 8005e2c:	68c8      	ldr	r0, [r1, #12]
 8005e2e:	4303      	orrs	r3, r0
 8005e30:	ea43 030e 	orr.w	r3, r3, lr
 8005e34:	ea43 030a 	orr.w	r3, r3, sl
 8005e38:	e7dd      	b.n	8005df6 <QSPI_Config+0x6a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005e3a:	ea48 0304 	orr.w	r3, r8, r4
 8005e3e:	ea43 0309 	orr.w	r3, r3, r9
 8005e42:	4303      	orrs	r3, r0
 8005e44:	ea43 030e 	orr.w	r3, r3, lr
 8005e48:	ea43 030a 	orr.w	r3, r3, sl
 8005e4c:	e7e5      	b.n	8005e1a <QSPI_Config+0x8e>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005e4e:	f1bc 0f00 	cmp.w	ip, #0
 8005e52:	d02c      	beq.n	8005eae <QSPI_Config+0x122>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005e54:	6804      	ldr	r4, [r0, #0]
 8005e56:	688b      	ldr	r3, [r1, #8]
 8005e58:	6908      	ldr	r0, [r1, #16]
 8005e5a:	61e3      	str	r3, [r4, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005e5c:	ea46 030c 	orr.w	r3, r6, ip
 8005e60:	694e      	ldr	r6, [r1, #20]
 8005e62:	ea43 0502 	orr.w	r5, r3, r2
 8005e66:	f8d1 c034 	ldr.w	ip, [r1, #52]	; 0x34
 8005e6a:	04b6      	lsls	r6, r6, #18
 8005e6c:	e9d1 830b 	ldrd	r8, r3, [r1, #44]	; 0x2c
 8005e70:	b1a7      	cbz	r7, 8005e9c <QSPI_Config+0x110>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005e72:	4338      	orrs	r0, r7
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005e74:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005e78:	ea40 0008 	orr.w	r0, r0, r8
 8005e7c:	ea43 0300 	orr.w	r3, r3, r0
 8005e80:	68c8      	ldr	r0, [r1, #12]
 8005e82:	ea43 030c 	orr.w	r3, r3, ip
 8005e86:	ea43 0300 	orr.w	r3, r3, r0
 8005e8a:	ea43 0306 	orr.w	r3, r3, r6
 8005e8e:	ea43 0305 	orr.w	r3, r3, r5
 8005e92:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005e94:	d0b5      	beq.n	8005e02 <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005e96:	684b      	ldr	r3, [r1, #4]
 8005e98:	61a3      	str	r3, [r4, #24]
 8005e9a:	e7b2      	b.n	8005e02 <QSPI_Config+0x76>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005e9c:	ea40 0008 	orr.w	r0, r0, r8
 8005ea0:	4303      	orrs	r3, r0
 8005ea2:	ea43 030c 	orr.w	r3, r3, ip
 8005ea6:	4333      	orrs	r3, r6
 8005ea8:	432b      	orrs	r3, r5
 8005eaa:	6163      	str	r3, [r4, #20]
 8005eac:	e7a9      	b.n	8005e02 <QSPI_Config+0x76>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005eae:	b1d7      	cbz	r7, 8005ee6 <QSPI_Config+0x15a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005eb0:	ea46 0307 	orr.w	r3, r6, r7
 8005eb4:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8005eb6:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005eb8:	f1b2 6f40 	cmp.w	r2, #201326592	; 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005ebc:	ea43 0302 	orr.w	r3, r3, r2
 8005ec0:	ea43 0304 	orr.w	r3, r3, r4
 8005ec4:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8005ec6:	ea43 0304 	orr.w	r3, r3, r4
 8005eca:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8005ecc:	ea43 0304 	orr.w	r3, r3, r4
 8005ed0:	68cc      	ldr	r4, [r1, #12]
 8005ed2:	ea43 0304 	orr.w	r3, r3, r4
 8005ed6:	694c      	ldr	r4, [r1, #20]
 8005ed8:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8005edc:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005ede:	d090      	beq.n	8005e02 <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005ee0:	684b      	ldr	r3, [r1, #4]
 8005ee2:	6183      	str	r3, [r0, #24]
 8005ee4:	e78d      	b.n	8005e02 <QSPI_Config+0x76>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8005ee6:	2e00      	cmp	r6, #0
 8005ee8:	d08b      	beq.n	8005e02 <QSPI_Config+0x76>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005eea:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8005eec:	6800      	ldr	r0, [r0, #0]
 8005eee:	4333      	orrs	r3, r6
 8005ef0:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	694b      	ldr	r3, [r1, #20]
 8005ef6:	4332      	orrs	r2, r6
 8005ef8:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 8005efa:	4332      	orrs	r2, r6
 8005efc:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 8005f00:	6142      	str	r2, [r0, #20]
}
 8005f02:	e77e      	b.n	8005e02 <QSPI_Config+0x76>

08005f04 <QSPI_WaitFlagStateUntilTimeout>:
{
 8005f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f08:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	460e      	mov	r6, r1
 8005f10:	4615      	mov	r5, r2
 8005f12:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005f14:	6822      	ldr	r2, [r4, #0]
 8005f16:	6893      	ldr	r3, [r2, #8]
 8005f18:	4233      	tst	r3, r6
 8005f1a:	bf14      	ite	ne
 8005f1c:	2301      	movne	r3, #1
 8005f1e:	2300      	moveq	r3, #0
 8005f20:	42ab      	cmp	r3, r5
 8005f22:	d101      	bne.n	8005f28 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8005f24:	2000      	movs	r0, #0
 8005f26:	e012      	b.n	8005f4e <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8005f28:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005f2c:	d0f3      	beq.n	8005f16 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f2e:	f7fe fdab 	bl	8004a88 <HAL_GetTick>
 8005f32:	1bc0      	subs	r0, r0, r7
 8005f34:	4540      	cmp	r0, r8
 8005f36:	d802      	bhi.n	8005f3e <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8005f38:	f1b8 0f00 	cmp.w	r8, #0
 8005f3c:	d1ea      	bne.n	8005f14 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005f3e:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005f40:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005f42:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005f46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005f48:	f043 0301 	orr.w	r3, r3, #1
 8005f4c:	6463      	str	r3, [r4, #68]	; 0x44
}
 8005f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005f54 <HAL_QSPI_Init>:
{
 8005f54:	b530      	push	{r4, r5, lr}
 8005f56:	4604      	mov	r4, r0
 8005f58:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8005f5a:	f7fe fd95 	bl	8004a88 <HAL_GetTick>
 8005f5e:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8005f60:	2c00      	cmp	r4, #0
 8005f62:	d047      	beq.n	8005ff4 <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005f64:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8005f68:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8005f6c:	b94a      	cbnz	r2, 8005f82 <HAL_QSPI_Init+0x2e>
 8005f6e:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8005f70:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 8005f72:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8005f76:	f7fb fb31 	bl	80015dc <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8005f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f7e:	9b03      	ldr	r3, [sp, #12]
 8005f80:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005f82:	6820      	ldr	r0, [r4, #0]
 8005f84:	68a1      	ldr	r1, [r4, #8]
 8005f86:	6802      	ldr	r2, [r0, #0]
 8005f88:	3901      	subs	r1, #1
 8005f8a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8005f8e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005f92:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005f94:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005f96:	4620      	mov	r0, r4
 8005f98:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005f9a:	9200      	str	r2, [sp, #0]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f7ff ffb1 	bl	8005f04 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8005fa2:	bb10      	cbnz	r0, 8005fea <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005fa4:	6822      	ldr	r2, [r4, #0]
 8005fa6:	69e5      	ldr	r5, [r4, #28]
 8005fa8:	68e3      	ldr	r3, [r4, #12]
 8005faa:	6811      	ldr	r1, [r2, #0]
 8005fac:	432b      	orrs	r3, r5
 8005fae:	6a25      	ldr	r5, [r4, #32]
 8005fb0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8005fb4:	432b      	orrs	r3, r5
 8005fb6:	6865      	ldr	r5, [r4, #4]
 8005fb8:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8005fbc:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005fc0:	430b      	orrs	r3, r1
 8005fc2:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005fc4:	6855      	ldr	r5, [r2, #4]
 8005fc6:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8005fca:	430b      	orrs	r3, r1
 8005fcc:	6921      	ldr	r1, [r4, #16]
 8005fce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005fd2:	4909      	ldr	r1, [pc, #36]	; (8005ff8 <HAL_QSPI_Init+0xa4>)
 8005fd4:	4029      	ands	r1, r5
 8005fd6:	430b      	orrs	r3, r1
 8005fd8:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8005fda:	6813      	ldr	r3, [r2, #0]
 8005fdc:	f043 0301 	orr.w	r3, r3, #1
 8005fe0:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8005fe2:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005fe4:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8005fe6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8005fea:	2300      	movs	r3, #0
 8005fec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005ff0:	b005      	add	sp, #20
 8005ff2:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005ff4:	2001      	movs	r0, #1
 8005ff6:	e7fb      	b.n	8005ff0 <HAL_QSPI_Init+0x9c>
 8005ff8:	ffe0f8fe 	.word	0xffe0f8fe

08005ffc <HAL_QSPI_DeInit>:
{
 8005ffc:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 8005ffe:	4604      	mov	r4, r0
 8006000:	b168      	cbz	r0, 800601e <HAL_QSPI_DeInit+0x22>
  __HAL_QSPI_DISABLE(hqspi);
 8006002:	6802      	ldr	r2, [r0, #0]
 8006004:	6813      	ldr	r3, [r2, #0]
 8006006:	f023 0301 	bic.w	r3, r3, #1
 800600a:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 800600c:	f7fb fb54 	bl	80016b8 <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006010:	2000      	movs	r0, #0
 8006012:	6460      	str	r0, [r4, #68]	; 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 8006014:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8006018:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 800601c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800601e:	2001      	movs	r0, #1
 8006020:	e7fc      	b.n	800601c <HAL_QSPI_DeInit+0x20>

08006022 <HAL_QSPI_Command>:
{
 8006022:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006026:	4604      	mov	r4, r0
 8006028:	b085      	sub	sp, #20
 800602a:	4617      	mov	r7, r2
 800602c:	4689      	mov	r9, r1
  uint32_t tickstart = HAL_GetTick();
 800602e:	f7fe fd2b 	bl	8004a88 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8006032:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8006036:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8006038:	2a01      	cmp	r2, #1
 800603a:	d033      	beq.n	80060a4 <HAL_QSPI_Command+0x82>
 800603c:	2201      	movs	r2, #1
 800603e:	2602      	movs	r6, #2
 8006040:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006044:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006048:	2a01      	cmp	r2, #1
 800604a:	fa5f f882 	uxtb.w	r8, r2
 800604e:	d127      	bne.n	80060a0 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006050:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006052:	9003      	str	r0, [sp, #12]
 8006054:	2120      	movs	r1, #32
 8006056:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006058:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800605a:	9700      	str	r7, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800605c:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006060:	f7ff ff50 	bl	8005f04 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006064:	4605      	mov	r5, r0
 8006066:	b9a0      	cbnz	r0, 8006092 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006068:	4602      	mov	r2, r0
 800606a:	4649      	mov	r1, r9
 800606c:	4620      	mov	r0, r4
 800606e:	f7ff fe8d 	bl	8005d8c <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8006072:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
 8006076:	9b03      	ldr	r3, [sp, #12]
 8006078:	b94a      	cbnz	r2, 800608e <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800607a:	4642      	mov	r2, r8
 800607c:	4631      	mov	r1, r6
 800607e:	4620      	mov	r0, r4
 8006080:	9700      	str	r7, [sp, #0]
 8006082:	f7ff ff3f 	bl	8005f04 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8006086:	4605      	mov	r5, r0
 8006088:	b918      	cbnz	r0, 8006092 <HAL_QSPI_Command+0x70>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800608e:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8006092:	2300      	movs	r3, #0
 8006094:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006098:	4628      	mov	r0, r5
 800609a:	b005      	add	sp, #20
 800609c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 80060a0:	4635      	mov	r5, r6
 80060a2:	e7f6      	b.n	8006092 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 80060a4:	2502      	movs	r5, #2
 80060a6:	e7f7      	b.n	8006098 <HAL_QSPI_Command+0x76>

080060a8 <HAL_QSPI_AutoPolling>:
{
 80060a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80060ac:	4604      	mov	r4, r0
 80060ae:	4615      	mov	r5, r2
 80060b0:	461e      	mov	r6, r3
 80060b2:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 80060b4:	f7fe fce8 	bl	8004a88 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80060b8:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 80060bc:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80060be:	2a01      	cmp	r2, #1
 80060c0:	d040      	beq.n	8006144 <HAL_QSPI_AutoPolling+0x9c>
 80060c2:	2201      	movs	r2, #1
 80060c4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80060c8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80060cc:	2a01      	cmp	r2, #1
 80060ce:	b2d7      	uxtb	r7, r2
 80060d0:	d136      	bne.n	8006140 <HAL_QSPI_AutoPolling+0x98>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80060d2:	2142      	movs	r1, #66	; 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80060d4:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80060d6:	9003      	str	r0, [sp, #12]
 80060d8:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80060da:	6462      	str	r2, [r4, #68]	; 0x44
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80060dc:	9600      	str	r6, [sp, #0]
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80060de:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80060e2:	2120      	movs	r1, #32
 80060e4:	f7ff ff0e 	bl	8005f04 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80060e8:	bb20      	cbnz	r0, 8006134 <HAL_QSPI_AutoPolling+0x8c>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80060ea:	6821      	ldr	r1, [r4, #0]
 80060ec:	682a      	ldr	r2, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80060ee:	6928      	ldr	r0, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80060f0:	628a      	str	r2, [r1, #40]	; 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80060f2:	686a      	ldr	r2, [r5, #4]
 80060f4:	624a      	str	r2, [r1, #36]	; 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80060f6:	68aa      	ldr	r2, [r5, #8]
 80060f8:	62ca      	str	r2, [r1, #44]	; 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80060fa:	680a      	ldr	r2, [r1, #0]
 80060fc:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8006100:	4302      	orrs	r2, r0
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8006102:	4620      	mov	r0, r4
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8006104:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006108:	600a      	str	r2, [r1, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800610a:	4641      	mov	r1, r8
      cmd->NbData = cfg->StatusBytesSize;
 800610c:	68ea      	ldr	r2, [r5, #12]
 800610e:	f8c8 2028 	str.w	r2, [r8, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8006112:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006116:	f7ff fe39 	bl	8005d8c <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800611a:	9b03      	ldr	r3, [sp, #12]
 800611c:	463a      	mov	r2, r7
 800611e:	2108      	movs	r1, #8
 8006120:	4620      	mov	r0, r4
 8006122:	9600      	str	r6, [sp, #0]
 8006124:	f7ff feee 	bl	8005f04 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8006128:	b920      	cbnz	r0, 8006134 <HAL_QSPI_AutoPolling+0x8c>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	2208      	movs	r2, #8
 800612e:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8006130:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8006134:	2300      	movs	r3, #0
 8006136:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800613a:	b004      	add	sp, #16
 800613c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    status = HAL_BUSY;
 8006140:	2002      	movs	r0, #2
 8006142:	e7f7      	b.n	8006134 <HAL_QSPI_AutoPolling+0x8c>
  __HAL_LOCK(hqspi);
 8006144:	2002      	movs	r0, #2
 8006146:	e7f8      	b.n	800613a <HAL_QSPI_AutoPolling+0x92>

08006148 <HAL_QSPI_MemoryMapped>:
{
 8006148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800614a:	4604      	mov	r4, r0
 800614c:	4616      	mov	r6, r2
 800614e:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8006150:	f7fe fc9a 	bl	8004a88 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8006154:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8006158:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800615a:	2a01      	cmp	r2, #1
 800615c:	d033      	beq.n	80061c6 <HAL_QSPI_MemoryMapped+0x7e>
 800615e:	2201      	movs	r2, #1
 8006160:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006164:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006168:	2a01      	cmp	r2, #1
 800616a:	d12a      	bne.n	80061c2 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800616c:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800616e:	2182      	movs	r1, #130	; 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006170:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006172:	6462      	str	r2, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8006174:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006178:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800617a:	9100      	str	r1, [sp, #0]
 800617c:	2120      	movs	r1, #32
 800617e:	f7ff fec1 	bl	8005f04 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006182:	4605      	mov	r5, r0
 8006184:	b9b8      	cbnz	r0, 80061b6 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8006186:	6823      	ldr	r3, [r4, #0]
 8006188:	6872      	ldr	r2, [r6, #4]
 800618a:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800618c:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800618e:	f020 0008 	bic.w	r0, r0, #8
 8006192:	ea40 0002 	orr.w	r0, r0, r2
 8006196:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8006198:	d107      	bne.n	80061aa <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800619a:	6832      	ldr	r2, [r6, #0]
 800619c:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800619e:	2210      	movs	r2, #16
 80061a0:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80061a8:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 80061aa:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80061ae:	4639      	mov	r1, r7
 80061b0:	4620      	mov	r0, r4
 80061b2:	f7ff fdeb 	bl	8005d8c <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 80061b6:	2300      	movs	r3, #0
 80061b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80061bc:	4628      	mov	r0, r5
 80061be:	b003      	add	sp, #12
 80061c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 80061c2:	2502      	movs	r5, #2
 80061c4:	e7f7      	b.n	80061b6 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 80061c6:	2502      	movs	r5, #2
 80061c8:	e7f8      	b.n	80061bc <HAL_QSPI_MemoryMapped+0x74>

080061ca <HAL_QSPI_Abort>:
{
 80061ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061cc:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80061ce:	f7fe fc5b 	bl	8004a88 <HAL_GetTick>
 80061d2:	4603      	mov	r3, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80061d4:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80061d8:	f012 0002 	ands.w	r0, r2, #2
 80061dc:	d036      	beq.n	800624c <HAL_QSPI_Abort+0x82>
    __HAL_UNLOCK(hqspi);
 80061de:	2200      	movs	r2, #0
 80061e0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80061e4:	6822      	ldr	r2, [r4, #0]
 80061e6:	6811      	ldr	r1, [r2, #0]
 80061e8:	0749      	lsls	r1, r1, #29
 80061ea:	d50d      	bpl.n	8006208 <HAL_QSPI_Abort+0x3e>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80061ec:	6811      	ldr	r1, [r2, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 80061ee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80061f0:	f021 0104 	bic.w	r1, r1, #4
 80061f4:	9303      	str	r3, [sp, #12]
 80061f6:	6011      	str	r1, [r2, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 80061f8:	f7fe fd69 	bl	8004cce <HAL_DMA_Abort>
      if(status != HAL_OK)
 80061fc:	9b03      	ldr	r3, [sp, #12]
 80061fe:	b118      	cbz	r0, 8006208 <HAL_QSPI_Abort+0x3e>
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8006200:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006202:	f042 0204 	orr.w	r2, r2, #4
 8006206:	6462      	str	r2, [r4, #68]	; 0x44
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8006208:	6821      	ldr	r1, [r4, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800620a:	4620      	mov	r0, r4
 800620c:	9303      	str	r3, [sp, #12]
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800620e:	680a      	ldr	r2, [r1, #0]
 8006210:	f042 0202 	orr.w	r2, r2, #2
 8006214:	600a      	str	r2, [r1, #0]
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8006216:	2102      	movs	r1, #2
 8006218:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800621a:	9200      	str	r2, [sp, #0]
 800621c:	2201      	movs	r2, #1
 800621e:	f7ff fe71 	bl	8005f04 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006222:	9b03      	ldr	r3, [sp, #12]
 8006224:	b990      	cbnz	r0, 800624c <HAL_QSPI_Abort+0x82>
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006226:	6822      	ldr	r2, [r4, #0]
 8006228:	2102      	movs	r1, #2
 800622a:	60d1      	str	r1, [r2, #12]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800622c:	2120      	movs	r1, #32
 800622e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006230:	9200      	str	r2, [sp, #0]
 8006232:	4602      	mov	r2, r0
 8006234:	4620      	mov	r0, r4
 8006236:	f7ff fe65 	bl	8005f04 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800623a:	b938      	cbnz	r0, 800624c <HAL_QSPI_Abort+0x82>
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800623c:	6822      	ldr	r2, [r4, #0]
 800623e:	6953      	ldr	r3, [r2, #20]
 8006240:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8006244:	6153      	str	r3, [r2, #20]
      hqspi->State = HAL_QSPI_STATE_READY;
 8006246:	2301      	movs	r3, #1
 8006248:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 800624c:	b004      	add	sp, #16
 800624e:	bd10      	pop	{r4, pc}

08006250 <HAL_QSPI_Transmit>:
{
 8006250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006252:	4604      	mov	r4, r0
 8006254:	b085      	sub	sp, #20
 8006256:	4616      	mov	r6, r2
 8006258:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800625a:	f7fe fc15 	bl	8004a88 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800625e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8006262:	4603      	mov	r3, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8006264:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8006266:	2a01      	cmp	r2, #1
 8006268:	d04c      	beq.n	8006304 <HAL_QSPI_Transmit+0xb4>
 800626a:	2201      	movs	r2, #1
 800626c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006270:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006274:	2a01      	cmp	r2, #1
 8006276:	b2d0      	uxtb	r0, r2
 8006278:	d142      	bne.n	8006300 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800627a:	2200      	movs	r2, #0
 800627c:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800627e:	2f00      	cmp	r7, #0
 8006280:	d039      	beq.n	80062f6 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8006282:	2212      	movs	r2, #18
 8006284:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8006288:	692a      	ldr	r2, [r5, #16]
 800628a:	3201      	adds	r2, #1
 800628c:	62e2      	str	r2, [r4, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800628e:	692a      	ldr	r2, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8006290:	6267      	str	r7, [r4, #36]	; 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006292:	3201      	adds	r2, #1
 8006294:	62a2      	str	r2, [r4, #40]	; 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006296:	696a      	ldr	r2, [r5, #20]
 8006298:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800629c:	616a      	str	r2, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800629e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80062a0:	b9a2      	cbnz	r2, 80062cc <HAL_QSPI_Transmit+0x7c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80062a2:	2201      	movs	r2, #1
 80062a4:	2102      	movs	r1, #2
 80062a6:	4620      	mov	r0, r4
 80062a8:	9600      	str	r6, [sp, #0]
 80062aa:	f7ff fe2b 	bl	8005f04 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80062ae:	b928      	cbnz	r0, 80062bc <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 80062b4:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80062b6:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 80062b8:	f7ff ff87 	bl	80061ca <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 80062bc:	2301      	movs	r3, #1
 80062be:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80062c2:	2300      	movs	r3, #0
 80062c4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80062c8:	b005      	add	sp, #20
 80062ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 80062cc:	2201      	movs	r2, #1
 80062ce:	2104      	movs	r1, #4
 80062d0:	4620      	mov	r0, r4
 80062d2:	9600      	str	r6, [sp, #0]
 80062d4:	9303      	str	r3, [sp, #12]
 80062d6:	f7ff fe15 	bl	8005f04 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 80062da:	2800      	cmp	r0, #0
 80062dc:	d1ee      	bne.n	80062bc <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80062de:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 80062e0:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 80062e2:	7812      	ldrb	r2, [r2, #0]
 80062e4:	f885 2020 	strb.w	r2, [r5, #32]
        hqspi->pTxBuffPtr++;
 80062e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80062ea:	3201      	adds	r2, #1
 80062ec:	6262      	str	r2, [r4, #36]	; 0x24
        hqspi->TxXferCount--;
 80062ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80062f0:	3a01      	subs	r2, #1
 80062f2:	62e2      	str	r2, [r4, #44]	; 0x2c
 80062f4:	e7d3      	b.n	800629e <HAL_QSPI_Transmit+0x4e>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80062f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80062f8:	f043 0308 	orr.w	r3, r3, #8
 80062fc:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 80062fe:	e7e0      	b.n	80062c2 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 8006300:	2002      	movs	r0, #2
 8006302:	e7de      	b.n	80062c2 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 8006304:	2002      	movs	r0, #2
 8006306:	e7df      	b.n	80062c8 <HAL_QSPI_Transmit+0x78>

08006308 <HAL_QSPI_Receive>:
{
 8006308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800630a:	4604      	mov	r4, r0
 800630c:	b085      	sub	sp, #20
 800630e:	4616      	mov	r6, r2
 8006310:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8006312:	f7fe fbb9 	bl	8004a88 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8006316:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8006318:	4603      	mov	r3, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800631a:	f8d5 c018 	ldr.w	ip, [r5, #24]
  __HAL_LOCK(hqspi);
 800631e:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8006322:	2a01      	cmp	r2, #1
 8006324:	d050      	beq.n	80063c8 <HAL_QSPI_Receive+0xc0>
 8006326:	2201      	movs	r2, #1
 8006328:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800632c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006330:	2a01      	cmp	r2, #1
 8006332:	b2d0      	uxtb	r0, r2
 8006334:	d146      	bne.n	80063c4 <HAL_QSPI_Receive+0xbc>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006336:	2200      	movs	r2, #0
 8006338:	6462      	str	r2, [r4, #68]	; 0x44
    if(pData != NULL )
 800633a:	2f00      	cmp	r7, #0
 800633c:	d03d      	beq.n	80063ba <HAL_QSPI_Receive+0xb2>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800633e:	2222      	movs	r2, #34	; 0x22
 8006340:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8006344:	692a      	ldr	r2, [r5, #16]
 8006346:	3201      	adds	r2, #1
 8006348:	63a2      	str	r2, [r4, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800634a:	692a      	ldr	r2, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800634c:	6327      	str	r7, [r4, #48]	; 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800634e:	3201      	adds	r2, #1
 8006350:	6362      	str	r2, [r4, #52]	; 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006352:	6969      	ldr	r1, [r5, #20]
 8006354:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 8006358:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800635c:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800635e:	f8c5 c018 	str.w	ip, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8006362:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006364:	b9a2      	cbnz	r2, 8006390 <HAL_QSPI_Receive+0x88>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006366:	2201      	movs	r2, #1
 8006368:	2102      	movs	r1, #2
 800636a:	4620      	mov	r0, r4
 800636c:	9600      	str	r6, [sp, #0]
 800636e:	f7ff fdc9 	bl	8005f04 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 8006372:	b928      	cbnz	r0, 8006380 <HAL_QSPI_Receive+0x78>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 8006378:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800637a:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 800637c:	f7ff ff25 	bl	80061ca <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 8006380:	2301      	movs	r3, #1
 8006382:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8006386:	2300      	movs	r3, #0
 8006388:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800638c:	b005      	add	sp, #20
 800638e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8006390:	2201      	movs	r2, #1
 8006392:	2106      	movs	r1, #6
 8006394:	4620      	mov	r0, r4
 8006396:	9600      	str	r6, [sp, #0]
 8006398:	9303      	str	r3, [sp, #12]
 800639a:	f7ff fdb3 	bl	8005f04 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800639e:	2800      	cmp	r0, #0
 80063a0:	d1ee      	bne.n	8006380 <HAL_QSPI_Receive+0x78>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80063a2:	f895 1020 	ldrb.w	r1, [r5, #32]
 80063a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80063a8:	9b03      	ldr	r3, [sp, #12]
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80063aa:	7011      	strb	r1, [r2, #0]
        hqspi->pRxBuffPtr++;
 80063ac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80063ae:	3201      	adds	r2, #1
 80063b0:	6322      	str	r2, [r4, #48]	; 0x30
        hqspi->RxXferCount--;
 80063b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80063b4:	3a01      	subs	r2, #1
 80063b6:	63a2      	str	r2, [r4, #56]	; 0x38
 80063b8:	e7d3      	b.n	8006362 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80063ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80063bc:	f043 0308 	orr.w	r3, r3, #8
 80063c0:	6463      	str	r3, [r4, #68]	; 0x44
      status = HAL_ERROR;
 80063c2:	e7e0      	b.n	8006386 <HAL_QSPI_Receive+0x7e>
    status = HAL_BUSY;
 80063c4:	2002      	movs	r0, #2
 80063c6:	e7de      	b.n	8006386 <HAL_QSPI_Receive+0x7e>
  __HAL_LOCK(hqspi);
 80063c8:	2002      	movs	r0, #2
 80063ca:	e7df      	b.n	800638c <HAL_QSPI_Receive+0x84>

080063cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063d0:	4604      	mov	r4, r0
 80063d2:	b340      	cbz	r0, 8006426 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063d4:	6803      	ldr	r3, [r0, #0]
 80063d6:	07d8      	lsls	r0, r3, #31
 80063d8:	d410      	bmi.n	80063fc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	0799      	lsls	r1, r3, #30
 80063de:	d464      	bmi.n	80064aa <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	0719      	lsls	r1, r3, #28
 80063e4:	f100 80aa 	bmi.w	800653c <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	075a      	lsls	r2, r3, #29
 80063ec:	f100 80cb 	bmi.w	8006586 <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063f0:	69a2      	ldr	r2, [r4, #24]
 80063f2:	2a00      	cmp	r2, #0
 80063f4:	f040 8134 	bne.w	8006660 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80063f8:	2000      	movs	r0, #0
 80063fa:	e02b      	b.n	8006454 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063fc:	4b96      	ldr	r3, [pc, #600]	; (8006658 <HAL_RCC_OscConfig+0x28c>)
 80063fe:	689a      	ldr	r2, [r3, #8]
 8006400:	f002 020c 	and.w	r2, r2, #12
 8006404:	2a04      	cmp	r2, #4
 8006406:	d007      	beq.n	8006418 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	f002 020c 	and.w	r2, r2, #12
 800640e:	2a08      	cmp	r2, #8
 8006410:	d10b      	bne.n	800642a <HAL_RCC_OscConfig+0x5e>
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	0252      	lsls	r2, r2, #9
 8006416:	d508      	bpl.n	800642a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006418:	4b8f      	ldr	r3, [pc, #572]	; (8006658 <HAL_RCC_OscConfig+0x28c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	039b      	lsls	r3, r3, #14
 800641e:	d5dc      	bpl.n	80063da <HAL_RCC_OscConfig+0xe>
 8006420:	6863      	ldr	r3, [r4, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1d9      	bne.n	80063da <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8006426:	2001      	movs	r0, #1
 8006428:	e014      	b.n	8006454 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800642a:	6862      	ldr	r2, [r4, #4]
 800642c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006430:	d113      	bne.n	800645a <HAL_RCC_OscConfig+0x8e>
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006438:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800643a:	f7fe fb25 	bl	8004a88 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800643e:	4e86      	ldr	r6, [pc, #536]	; (8006658 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8006440:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006442:	6833      	ldr	r3, [r6, #0]
 8006444:	039f      	lsls	r7, r3, #14
 8006446:	d4c8      	bmi.n	80063da <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006448:	f7fe fb1e 	bl	8004a88 <HAL_GetTick>
 800644c:	1b40      	subs	r0, r0, r5
 800644e:	2864      	cmp	r0, #100	; 0x64
 8006450:	d9f7      	bls.n	8006442 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8006452:	2003      	movs	r0, #3
}
 8006454:	b002      	add	sp, #8
 8006456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800645a:	4d7f      	ldr	r5, [pc, #508]	; (8006658 <HAL_RCC_OscConfig+0x28c>)
 800645c:	682b      	ldr	r3, [r5, #0]
 800645e:	b992      	cbnz	r2, 8006486 <HAL_RCC_OscConfig+0xba>
 8006460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006464:	602b      	str	r3, [r5, #0]
 8006466:	682b      	ldr	r3, [r5, #0]
 8006468:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800646c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800646e:	f7fe fb0b 	bl	8004a88 <HAL_GetTick>
 8006472:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006474:	682b      	ldr	r3, [r5, #0]
 8006476:	0398      	lsls	r0, r3, #14
 8006478:	d5af      	bpl.n	80063da <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800647a:	f7fe fb05 	bl	8004a88 <HAL_GetTick>
 800647e:	1b80      	subs	r0, r0, r6
 8006480:	2864      	cmp	r0, #100	; 0x64
 8006482:	d9f7      	bls.n	8006474 <HAL_RCC_OscConfig+0xa8>
 8006484:	e7e5      	b.n	8006452 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006486:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800648a:	d107      	bne.n	800649c <HAL_RCC_OscConfig+0xd0>
 800648c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006490:	602b      	str	r3, [r5, #0]
 8006492:	682b      	ldr	r3, [r5, #0]
 8006494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006498:	602b      	str	r3, [r5, #0]
 800649a:	e7ce      	b.n	800643a <HAL_RCC_OscConfig+0x6e>
 800649c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064a0:	602b      	str	r3, [r5, #0]
 80064a2:	682b      	ldr	r3, [r5, #0]
 80064a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064a8:	e7f6      	b.n	8006498 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064aa:	4b6b      	ldr	r3, [pc, #428]	; (8006658 <HAL_RCC_OscConfig+0x28c>)
 80064ac:	689a      	ldr	r2, [r3, #8]
 80064ae:	f012 0f0c 	tst.w	r2, #12
 80064b2:	d007      	beq.n	80064c4 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064b4:	689a      	ldr	r2, [r3, #8]
 80064b6:	f002 020c 	and.w	r2, r2, #12
 80064ba:	2a08      	cmp	r2, #8
 80064bc:	d111      	bne.n	80064e2 <HAL_RCC_OscConfig+0x116>
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	0251      	lsls	r1, r2, #9
 80064c2:	d40e      	bmi.n	80064e2 <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064c4:	4b64      	ldr	r3, [pc, #400]	; (8006658 <HAL_RCC_OscConfig+0x28c>)
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	0792      	lsls	r2, r2, #30
 80064ca:	d502      	bpl.n	80064d2 <HAL_RCC_OscConfig+0x106>
 80064cc:	68e2      	ldr	r2, [r4, #12]
 80064ce:	2a01      	cmp	r2, #1
 80064d0:	d1a9      	bne.n	8006426 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	6921      	ldr	r1, [r4, #16]
 80064d6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80064da:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80064de:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064e0:	e77e      	b.n	80063e0 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80064e2:	68e2      	ldr	r2, [r4, #12]
 80064e4:	b1c2      	cbz	r2, 8006518 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 80064e6:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064e8:	4d5b      	ldr	r5, [pc, #364]	; (8006658 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 80064ea:	f042 0201 	orr.w	r2, r2, #1
 80064ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80064f0:	f7fe faca 	bl	8004a88 <HAL_GetTick>
 80064f4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064f6:	682b      	ldr	r3, [r5, #0]
 80064f8:	079f      	lsls	r7, r3, #30
 80064fa:	d507      	bpl.n	800650c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064fc:	682b      	ldr	r3, [r5, #0]
 80064fe:	6922      	ldr	r2, [r4, #16]
 8006500:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006504:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006508:	602b      	str	r3, [r5, #0]
 800650a:	e769      	b.n	80063e0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800650c:	f7fe fabc 	bl	8004a88 <HAL_GetTick>
 8006510:	1b80      	subs	r0, r0, r6
 8006512:	2802      	cmp	r0, #2
 8006514:	d9ef      	bls.n	80064f6 <HAL_RCC_OscConfig+0x12a>
 8006516:	e79c      	b.n	8006452 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8006518:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800651a:	4e4f      	ldr	r6, [pc, #316]	; (8006658 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 800651c:	f022 0201 	bic.w	r2, r2, #1
 8006520:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006522:	f7fe fab1 	bl	8004a88 <HAL_GetTick>
 8006526:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006528:	6833      	ldr	r3, [r6, #0]
 800652a:	0798      	lsls	r0, r3, #30
 800652c:	f57f af58 	bpl.w	80063e0 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006530:	f7fe faaa 	bl	8004a88 <HAL_GetTick>
 8006534:	1b40      	subs	r0, r0, r5
 8006536:	2802      	cmp	r0, #2
 8006538:	d9f6      	bls.n	8006528 <HAL_RCC_OscConfig+0x15c>
 800653a:	e78a      	b.n	8006452 <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800653c:	6963      	ldr	r3, [r4, #20]
 800653e:	4d46      	ldr	r5, [pc, #280]	; (8006658 <HAL_RCC_OscConfig+0x28c>)
 8006540:	b183      	cbz	r3, 8006564 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 8006542:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006544:	f043 0301 	orr.w	r3, r3, #1
 8006548:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800654a:	f7fe fa9d 	bl	8004a88 <HAL_GetTick>
 800654e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006550:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006552:	079b      	lsls	r3, r3, #30
 8006554:	f53f af48 	bmi.w	80063e8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006558:	f7fe fa96 	bl	8004a88 <HAL_GetTick>
 800655c:	1b80      	subs	r0, r0, r6
 800655e:	2802      	cmp	r0, #2
 8006560:	d9f6      	bls.n	8006550 <HAL_RCC_OscConfig+0x184>
 8006562:	e776      	b.n	8006452 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8006564:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006566:	f023 0301 	bic.w	r3, r3, #1
 800656a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800656c:	f7fe fa8c 	bl	8004a88 <HAL_GetTick>
 8006570:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006572:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006574:	079f      	lsls	r7, r3, #30
 8006576:	f57f af37 	bpl.w	80063e8 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800657a:	f7fe fa85 	bl	8004a88 <HAL_GetTick>
 800657e:	1b80      	subs	r0, r0, r6
 8006580:	2802      	cmp	r0, #2
 8006582:	d9f6      	bls.n	8006572 <HAL_RCC_OscConfig+0x1a6>
 8006584:	e765      	b.n	8006452 <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006586:	4b34      	ldr	r3, [pc, #208]	; (8006658 <HAL_RCC_OscConfig+0x28c>)
 8006588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800658a:	00d0      	lsls	r0, r2, #3
 800658c:	d427      	bmi.n	80065de <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 800658e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8006590:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8006592:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006596:	641a      	str	r2, [r3, #64]	; 0x40
 8006598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800659e:	9301      	str	r3, [sp, #4]
 80065a0:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065a2:	4d2e      	ldr	r5, [pc, #184]	; (800665c <HAL_RCC_OscConfig+0x290>)
 80065a4:	682b      	ldr	r3, [r5, #0]
 80065a6:	05d9      	lsls	r1, r3, #23
 80065a8:	d51b      	bpl.n	80065e2 <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065aa:	68a3      	ldr	r3, [r4, #8]
 80065ac:	4d2a      	ldr	r5, [pc, #168]	; (8006658 <HAL_RCC_OscConfig+0x28c>)
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d127      	bne.n	8006602 <HAL_RCC_OscConfig+0x236>
 80065b2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80065b4:	f043 0301 	orr.w	r3, r3, #1
 80065b8:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065ba:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80065be:	f7fe fa63 	bl	8004a88 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065c2:	4e25      	ldr	r6, [pc, #148]	; (8006658 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80065c4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065c6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80065c8:	079b      	lsls	r3, r3, #30
 80065ca:	d53f      	bpl.n	800664c <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 80065cc:	2f00      	cmp	r7, #0
 80065ce:	f43f af0f 	beq.w	80063f0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80065d2:	4a21      	ldr	r2, [pc, #132]	; (8006658 <HAL_RCC_OscConfig+0x28c>)
 80065d4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80065d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065da:	6413      	str	r3, [r2, #64]	; 0x40
 80065dc:	e708      	b.n	80063f0 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 80065de:	2700      	movs	r7, #0
 80065e0:	e7df      	b.n	80065a2 <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 80065e2:	682b      	ldr	r3, [r5, #0]
 80065e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80065ea:	f7fe fa4d 	bl	8004a88 <HAL_GetTick>
 80065ee:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	05da      	lsls	r2, r3, #23
 80065f4:	d4d9      	bmi.n	80065aa <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065f6:	f7fe fa47 	bl	8004a88 <HAL_GetTick>
 80065fa:	1b80      	subs	r0, r0, r6
 80065fc:	2864      	cmp	r0, #100	; 0x64
 80065fe:	d9f7      	bls.n	80065f0 <HAL_RCC_OscConfig+0x224>
 8006600:	e727      	b.n	8006452 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006602:	b9ab      	cbnz	r3, 8006630 <HAL_RCC_OscConfig+0x264>
 8006604:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006606:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800660a:	f023 0301 	bic.w	r3, r3, #1
 800660e:	672b      	str	r3, [r5, #112]	; 0x70
 8006610:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006612:	f023 0304 	bic.w	r3, r3, #4
 8006616:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8006618:	f7fe fa36 	bl	8004a88 <HAL_GetTick>
 800661c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800661e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006620:	0798      	lsls	r0, r3, #30
 8006622:	d5d3      	bpl.n	80065cc <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006624:	f7fe fa30 	bl	8004a88 <HAL_GetTick>
 8006628:	1b80      	subs	r0, r0, r6
 800662a:	4540      	cmp	r0, r8
 800662c:	d9f7      	bls.n	800661e <HAL_RCC_OscConfig+0x252>
 800662e:	e710      	b.n	8006452 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006630:	2b05      	cmp	r3, #5
 8006632:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006634:	d103      	bne.n	800663e <HAL_RCC_OscConfig+0x272>
 8006636:	f043 0304 	orr.w	r3, r3, #4
 800663a:	672b      	str	r3, [r5, #112]	; 0x70
 800663c:	e7b9      	b.n	80065b2 <HAL_RCC_OscConfig+0x1e6>
 800663e:	f023 0301 	bic.w	r3, r3, #1
 8006642:	672b      	str	r3, [r5, #112]	; 0x70
 8006644:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006646:	f023 0304 	bic.w	r3, r3, #4
 800664a:	e7b5      	b.n	80065b8 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800664c:	f7fe fa1c 	bl	8004a88 <HAL_GetTick>
 8006650:	1b40      	subs	r0, r0, r5
 8006652:	4540      	cmp	r0, r8
 8006654:	d9b7      	bls.n	80065c6 <HAL_RCC_OscConfig+0x1fa>
 8006656:	e6fc      	b.n	8006452 <HAL_RCC_OscConfig+0x86>
 8006658:	40023800 	.word	0x40023800
 800665c:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006660:	4d38      	ldr	r5, [pc, #224]	; (8006744 <HAL_RCC_OscConfig+0x378>)
 8006662:	68ab      	ldr	r3, [r5, #8]
 8006664:	f003 030c 	and.w	r3, r3, #12
 8006668:	2b08      	cmp	r3, #8
 800666a:	d041      	beq.n	80066f0 <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 800666c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800666e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8006670:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006674:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006676:	d12e      	bne.n	80066d6 <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8006678:	f7fe fa06 	bl	8004a88 <HAL_GetTick>
 800667c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800667e:	682b      	ldr	r3, [r5, #0]
 8006680:	0199      	lsls	r1, r3, #6
 8006682:	d422      	bmi.n	80066ca <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006684:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006686:	085b      	lsrs	r3, r3, #1
 8006688:	1e5a      	subs	r2, r3, #1
 800668a:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800668e:	430b      	orrs	r3, r1
 8006690:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006694:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006696:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800669a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800669c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80066a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066a4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80066a6:	682b      	ldr	r3, [r5, #0]
 80066a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066ac:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80066ae:	f7fe f9eb 	bl	8004a88 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066b2:	4d24      	ldr	r5, [pc, #144]	; (8006744 <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 80066b4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066b6:	682b      	ldr	r3, [r5, #0]
 80066b8:	019a      	lsls	r2, r3, #6
 80066ba:	f53f ae9d 	bmi.w	80063f8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066be:	f7fe f9e3 	bl	8004a88 <HAL_GetTick>
 80066c2:	1b00      	subs	r0, r0, r4
 80066c4:	2802      	cmp	r0, #2
 80066c6:	d9f6      	bls.n	80066b6 <HAL_RCC_OscConfig+0x2ea>
 80066c8:	e6c3      	b.n	8006452 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066ca:	f7fe f9dd 	bl	8004a88 <HAL_GetTick>
 80066ce:	1b80      	subs	r0, r0, r6
 80066d0:	2802      	cmp	r0, #2
 80066d2:	d9d4      	bls.n	800667e <HAL_RCC_OscConfig+0x2b2>
 80066d4:	e6bd      	b.n	8006452 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80066d6:	f7fe f9d7 	bl	8004a88 <HAL_GetTick>
 80066da:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066dc:	682b      	ldr	r3, [r5, #0]
 80066de:	019b      	lsls	r3, r3, #6
 80066e0:	f57f ae8a 	bpl.w	80063f8 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066e4:	f7fe f9d0 	bl	8004a88 <HAL_GetTick>
 80066e8:	1b00      	subs	r0, r0, r4
 80066ea:	2802      	cmp	r0, #2
 80066ec:	d9f6      	bls.n	80066dc <HAL_RCC_OscConfig+0x310>
 80066ee:	e6b0      	b.n	8006452 <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066f0:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 80066f2:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066f4:	f43f ae97 	beq.w	8006426 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066fc:	69e1      	ldr	r1, [r4, #28]
 80066fe:	428a      	cmp	r2, r1
 8006700:	f47f ae91 	bne.w	8006426 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006704:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006708:	6a21      	ldr	r1, [r4, #32]
 800670a:	428a      	cmp	r2, r1
 800670c:	f47f ae8b 	bne.w	8006426 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006710:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006714:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006716:	401a      	ands	r2, r3
 8006718:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800671c:	f47f ae83 	bne.w	8006426 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006720:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006722:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8006726:	0852      	lsrs	r2, r2, #1
 8006728:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800672a:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800672e:	f47f ae7a 	bne.w	8006426 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006732:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006736:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006738:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800673c:	f43f ae5c 	beq.w	80063f8 <HAL_RCC_OscConfig+0x2c>
 8006740:	e671      	b.n	8006426 <HAL_RCC_OscConfig+0x5a>
 8006742:	bf00      	nop
 8006744:	40023800 	.word	0x40023800

08006748 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006748:	4913      	ldr	r1, [pc, #76]	; (8006798 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800674a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800674c:	688b      	ldr	r3, [r1, #8]
 800674e:	f003 030c 	and.w	r3, r3, #12
 8006752:	2b04      	cmp	r3, #4
 8006754:	d01b      	beq.n	800678e <HAL_RCC_GetSysClockFreq+0x46>
 8006756:	2b08      	cmp	r3, #8
 8006758:	d11b      	bne.n	8006792 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800675a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800675c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800675e:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006760:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006764:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006768:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800676c:	bf1a      	itte	ne
 800676e:	480b      	ldrne	r0, [pc, #44]	; (800679c <HAL_RCC_GetSysClockFreq+0x54>)
 8006770:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006772:	480b      	ldreq	r0, [pc, #44]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x58>)
 8006774:	fba1 0100 	umull	r0, r1, r1, r0
 8006778:	f7fa f9b8 	bl	8000aec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800677c:	4b06      	ldr	r3, [pc, #24]	; (8006798 <HAL_RCC_GetSysClockFreq+0x50>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8006784:	3301      	adds	r3, #1
 8006786:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8006788:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800678c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800678e:	4803      	ldr	r0, [pc, #12]	; (800679c <HAL_RCC_GetSysClockFreq+0x54>)
 8006790:	e7fc      	b.n	800678c <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8006792:	4803      	ldr	r0, [pc, #12]	; (80067a0 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8006794:	e7fa      	b.n	800678c <HAL_RCC_GetSysClockFreq+0x44>
 8006796:	bf00      	nop
 8006798:	40023800 	.word	0x40023800
 800679c:	017d7840 	.word	0x017d7840
 80067a0:	00f42400 	.word	0x00f42400

080067a4 <HAL_RCC_ClockConfig>:
{
 80067a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067a8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80067aa:	4604      	mov	r4, r0
 80067ac:	b910      	cbnz	r0, 80067b4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80067ae:	2001      	movs	r0, #1
}
 80067b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067b4:	4a46      	ldr	r2, [pc, #280]	; (80068d0 <HAL_RCC_ClockConfig+0x12c>)
 80067b6:	6813      	ldr	r3, [r2, #0]
 80067b8:	f003 030f 	and.w	r3, r3, #15
 80067bc:	428b      	cmp	r3, r1
 80067be:	d328      	bcc.n	8006812 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067c0:	6822      	ldr	r2, [r4, #0]
 80067c2:	0797      	lsls	r7, r2, #30
 80067c4:	d430      	bmi.n	8006828 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067c6:	07d0      	lsls	r0, r2, #31
 80067c8:	d444      	bmi.n	8006854 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067ca:	4a41      	ldr	r2, [pc, #260]	; (80068d0 <HAL_RCC_ClockConfig+0x12c>)
 80067cc:	6813      	ldr	r3, [r2, #0]
 80067ce:	f003 030f 	and.w	r3, r3, #15
 80067d2:	42ab      	cmp	r3, r5
 80067d4:	d867      	bhi.n	80068a6 <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067d6:	6822      	ldr	r2, [r4, #0]
 80067d8:	0751      	lsls	r1, r2, #29
 80067da:	d470      	bmi.n	80068be <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067dc:	0713      	lsls	r3, r2, #28
 80067de:	d507      	bpl.n	80067f0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80067e0:	4a3c      	ldr	r2, [pc, #240]	; (80068d4 <HAL_RCC_ClockConfig+0x130>)
 80067e2:	6921      	ldr	r1, [r4, #16]
 80067e4:	6893      	ldr	r3, [r2, #8]
 80067e6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80067ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80067ee:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80067f0:	f7ff ffaa 	bl	8006748 <HAL_RCC_GetSysClockFreq>
 80067f4:	4b37      	ldr	r3, [pc, #220]	; (80068d4 <HAL_RCC_ClockConfig+0x130>)
 80067f6:	4a38      	ldr	r2, [pc, #224]	; (80068d8 <HAL_RCC_ClockConfig+0x134>)
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80067fe:	5cd3      	ldrb	r3, [r2, r3]
 8006800:	40d8      	lsrs	r0, r3
 8006802:	4b36      	ldr	r3, [pc, #216]	; (80068dc <HAL_RCC_ClockConfig+0x138>)
 8006804:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8006806:	4b36      	ldr	r3, [pc, #216]	; (80068e0 <HAL_RCC_ClockConfig+0x13c>)
 8006808:	6818      	ldr	r0, [r3, #0]
 800680a:	f7fa ffe1 	bl	80017d0 <HAL_InitTick>
  return HAL_OK;
 800680e:	2000      	movs	r0, #0
 8006810:	e7ce      	b.n	80067b0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006812:	6813      	ldr	r3, [r2, #0]
 8006814:	f023 030f 	bic.w	r3, r3, #15
 8006818:	430b      	orrs	r3, r1
 800681a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800681c:	6813      	ldr	r3, [r2, #0]
 800681e:	f003 030f 	and.w	r3, r3, #15
 8006822:	428b      	cmp	r3, r1
 8006824:	d1c3      	bne.n	80067ae <HAL_RCC_ClockConfig+0xa>
 8006826:	e7cb      	b.n	80067c0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006828:	f012 0f04 	tst.w	r2, #4
 800682c:	4b29      	ldr	r3, [pc, #164]	; (80068d4 <HAL_RCC_ClockConfig+0x130>)
 800682e:	d003      	beq.n	8006838 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006830:	6899      	ldr	r1, [r3, #8]
 8006832:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8006836:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006838:	0716      	lsls	r6, r2, #28
 800683a:	d503      	bpl.n	8006844 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800683c:	6899      	ldr	r1, [r3, #8]
 800683e:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 8006842:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006844:	4923      	ldr	r1, [pc, #140]	; (80068d4 <HAL_RCC_ClockConfig+0x130>)
 8006846:	68a0      	ldr	r0, [r4, #8]
 8006848:	688b      	ldr	r3, [r1, #8]
 800684a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800684e:	4303      	orrs	r3, r0
 8006850:	608b      	str	r3, [r1, #8]
 8006852:	e7b8      	b.n	80067c6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006854:	6861      	ldr	r1, [r4, #4]
 8006856:	4b1f      	ldr	r3, [pc, #124]	; (80068d4 <HAL_RCC_ClockConfig+0x130>)
 8006858:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800685a:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800685c:	d11b      	bne.n	8006896 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800685e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006862:	d0a4      	beq.n	80067ae <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006864:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006866:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800686a:	4f1a      	ldr	r7, [pc, #104]	; (80068d4 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800686c:	f022 0203 	bic.w	r2, r2, #3
 8006870:	430a      	orrs	r2, r1
 8006872:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8006874:	f7fe f908 	bl	8004a88 <HAL_GetTick>
 8006878:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	6862      	ldr	r2, [r4, #4]
 800687e:	f003 030c 	and.w	r3, r3, #12
 8006882:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006886:	d0a0      	beq.n	80067ca <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006888:	f7fe f8fe 	bl	8004a88 <HAL_GetTick>
 800688c:	1b80      	subs	r0, r0, r6
 800688e:	4540      	cmp	r0, r8
 8006890:	d9f3      	bls.n	800687a <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8006892:	2003      	movs	r0, #3
 8006894:	e78c      	b.n	80067b0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006896:	2902      	cmp	r1, #2
 8006898:	d102      	bne.n	80068a0 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800689a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800689e:	e7e0      	b.n	8006862 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068a0:	f012 0f02 	tst.w	r2, #2
 80068a4:	e7dd      	b.n	8006862 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068a6:	6813      	ldr	r3, [r2, #0]
 80068a8:	f023 030f 	bic.w	r3, r3, #15
 80068ac:	432b      	orrs	r3, r5
 80068ae:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068b0:	6813      	ldr	r3, [r2, #0]
 80068b2:	f003 030f 	and.w	r3, r3, #15
 80068b6:	42ab      	cmp	r3, r5
 80068b8:	f47f af79 	bne.w	80067ae <HAL_RCC_ClockConfig+0xa>
 80068bc:	e78b      	b.n	80067d6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068be:	4905      	ldr	r1, [pc, #20]	; (80068d4 <HAL_RCC_ClockConfig+0x130>)
 80068c0:	68e0      	ldr	r0, [r4, #12]
 80068c2:	688b      	ldr	r3, [r1, #8]
 80068c4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80068c8:	4303      	orrs	r3, r0
 80068ca:	608b      	str	r3, [r1, #8]
 80068cc:	e786      	b.n	80067dc <HAL_RCC_ClockConfig+0x38>
 80068ce:	bf00      	nop
 80068d0:	40023c00 	.word	0x40023c00
 80068d4:	40023800 	.word	0x40023800
 80068d8:	0802d7e0 	.word	0x0802d7e0
 80068dc:	2000000c 	.word	0x2000000c
 80068e0:	2000003c 	.word	0x2000003c

080068e4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80068e4:	4b04      	ldr	r3, [pc, #16]	; (80068f8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80068e6:	4a05      	ldr	r2, [pc, #20]	; (80068fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80068ee:	5cd3      	ldrb	r3, [r2, r3]
 80068f0:	4a03      	ldr	r2, [pc, #12]	; (8006900 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80068f2:	6810      	ldr	r0, [r2, #0]
}
 80068f4:	40d8      	lsrs	r0, r3
 80068f6:	4770      	bx	lr
 80068f8:	40023800 	.word	0x40023800
 80068fc:	0802d7f0 	.word	0x0802d7f0
 8006900:	2000000c 	.word	0x2000000c

08006904 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006904:	230f      	movs	r3, #15
 8006906:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006908:	4b0b      	ldr	r3, [pc, #44]	; (8006938 <HAL_RCC_GetClockConfig+0x34>)
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	f002 0203 	and.w	r2, r2, #3
 8006910:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8006918:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800691a:	689a      	ldr	r2, [r3, #8]
 800691c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8006920:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	08db      	lsrs	r3, r3, #3
 8006926:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800692a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800692c:	4b03      	ldr	r3, [pc, #12]	; (800693c <HAL_RCC_GetClockConfig+0x38>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 030f 	and.w	r3, r3, #15
 8006934:	600b      	str	r3, [r1, #0]
}
 8006936:	4770      	bx	lr
 8006938:	40023800 	.word	0x40023800
 800693c:	40023c00 	.word	0x40023c00

08006940 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006940:	6803      	ldr	r3, [r0, #0]
{
 8006942:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006946:	f013 0601 	ands.w	r6, r3, #1
{
 800694a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800694c:	d00b      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800694e:	4aaa      	ldr	r2, [pc, #680]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006950:	6891      	ldr	r1, [r2, #8]
 8006952:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8006956:	6091      	str	r1, [r2, #8]
 8006958:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800695a:	6891      	ldr	r1, [r2, #8]
 800695c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800695e:	fab6 f686 	clz	r6, r6
 8006962:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006964:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006966:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800696a:	d012      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800696c:	49a2      	ldr	r1, [pc, #648]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800696e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8006970:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006974:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006978:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 800697c:	bf08      	it	eq
 800697e:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006980:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006984:	bf16      	itet	ne
 8006986:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 800698a:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800698c:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800698e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006992:	02df      	lsls	r7, r3, #11
 8006994:	d510      	bpl.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006996:	4898      	ldr	r0, [pc, #608]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006998:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800699a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800699e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80069a2:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80069a6:	ea42 0201 	orr.w	r2, r2, r1
 80069aa:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80069ae:	f000 8184 	beq.w	8006cba <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80069b2:	2900      	cmp	r1, #0
 80069b4:	bf08      	it	eq
 80069b6:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80069b8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80069bc:	bf18      	it	ne
 80069be:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80069c0:	0698      	lsls	r0, r3, #26
 80069c2:	d531      	bpl.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80069c4:	4b8c      	ldr	r3, [pc, #560]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80069c6:	4f8d      	ldr	r7, [pc, #564]	; (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80069c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80069ce:	641a      	str	r2, [r3, #64]	; 0x40
 80069d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069d6:	9301      	str	r3, [sp, #4]
 80069d8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069e0:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069e2:	f7fe f851 	bl	8004a88 <HAL_GetTick>
 80069e6:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	05d9      	lsls	r1, r3, #23
 80069ec:	f140 8167 	bpl.w	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80069f0:	4f81      	ldr	r7, [pc, #516]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80069f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069f4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80069f8:	f040 816c 	bne.w	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80069fe:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006a02:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8006a06:	4a7c      	ldr	r2, [pc, #496]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006a08:	f040 818a 	bne.w	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006a0c:	6891      	ldr	r1, [r2, #8]
 8006a0e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8006a12:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8006a16:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8006a1a:	4301      	orrs	r1, r0
 8006a1c:	6091      	str	r1, [r2, #8]
 8006a1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a22:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8006a24:	430b      	orrs	r3, r1
 8006a26:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006a28:	6823      	ldr	r3, [r4, #0]
 8006a2a:	06d8      	lsls	r0, r3, #27
 8006a2c:	d50c      	bpl.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a2e:	4a72      	ldr	r2, [pc, #456]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006a30:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8006a34:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8006a38:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8006a3c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8006a40:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006a42:	4301      	orrs	r1, r0
 8006a44:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a48:	0459      	lsls	r1, r3, #17
 8006a4a:	d508      	bpl.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a4c:	496a      	ldr	r1, [pc, #424]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006a4e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8006a50:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006a54:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8006a58:	4302      	orrs	r2, r0
 8006a5a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a5e:	041a      	lsls	r2, r3, #16
 8006a60:	d508      	bpl.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a62:	4965      	ldr	r1, [pc, #404]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006a64:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006a66:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006a6a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8006a6e:	4302      	orrs	r2, r0
 8006a70:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a74:	03df      	lsls	r7, r3, #15
 8006a76:	d508      	bpl.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006a78:	495f      	ldr	r1, [pc, #380]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006a7a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006a7c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006a80:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006a84:	4302      	orrs	r2, r0
 8006a86:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a8a:	0398      	lsls	r0, r3, #14
 8006a8c:	d508      	bpl.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a8e:	495a      	ldr	r1, [pc, #360]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006a90:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006a92:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006a96:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8006a9a:	4302      	orrs	r2, r0
 8006a9c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006aa0:	0659      	lsls	r1, r3, #25
 8006aa2:	d508      	bpl.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006aa4:	4954      	ldr	r1, [pc, #336]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006aa6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006aa8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006aac:	f022 0203 	bic.w	r2, r2, #3
 8006ab0:	4302      	orrs	r2, r0
 8006ab2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ab6:	061a      	lsls	r2, r3, #24
 8006ab8:	d508      	bpl.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006aba:	494f      	ldr	r1, [pc, #316]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006abc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006abe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006ac2:	f022 020c 	bic.w	r2, r2, #12
 8006ac6:	4302      	orrs	r2, r0
 8006ac8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006acc:	05df      	lsls	r7, r3, #23
 8006ace:	d508      	bpl.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006ad0:	4949      	ldr	r1, [pc, #292]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006ad2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006ad4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006ad8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8006adc:	4302      	orrs	r2, r0
 8006ade:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ae2:	0598      	lsls	r0, r3, #22
 8006ae4:	d508      	bpl.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ae6:	4944      	ldr	r1, [pc, #272]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006ae8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006aea:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006aee:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006af2:	4302      	orrs	r2, r0
 8006af4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006af8:	0559      	lsls	r1, r3, #21
 8006afa:	d508      	bpl.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006afc:	493e      	ldr	r1, [pc, #248]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006afe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b00:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006b04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006b08:	4302      	orrs	r2, r0
 8006b0a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006b0e:	051a      	lsls	r2, r3, #20
 8006b10:	d508      	bpl.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006b12:	4939      	ldr	r1, [pc, #228]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b16:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006b1a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b1e:	4302      	orrs	r2, r0
 8006b20:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006b24:	04df      	lsls	r7, r3, #19
 8006b26:	d508      	bpl.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006b28:	4933      	ldr	r1, [pc, #204]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006b2a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006b2c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006b30:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006b34:	4302      	orrs	r2, r0
 8006b36:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006b3a:	0498      	lsls	r0, r3, #18
 8006b3c:	d508      	bpl.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006b3e:	492e      	ldr	r1, [pc, #184]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006b40:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8006b42:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006b46:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006b4a:	4302      	orrs	r2, r0
 8006b4c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006b50:	0259      	lsls	r1, r3, #9
 8006b52:	d508      	bpl.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006b54:	4928      	ldr	r1, [pc, #160]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006b56:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006b58:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006b5c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8006b60:	4302      	orrs	r2, r0
 8006b62:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006b66:	029a      	lsls	r2, r3, #10
 8006b68:	d50c      	bpl.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006b6a:	4823      	ldr	r0, [pc, #140]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006b6c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8006b6e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8006b72:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006b76:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8006b7a:	bf08      	it	eq
 8006b7c:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8006b84:	f013 0f08 	tst.w	r3, #8
 8006b88:	bf18      	it	ne
 8006b8a:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b8c:	035f      	lsls	r7, r3, #13
 8006b8e:	d508      	bpl.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b90:	4919      	ldr	r1, [pc, #100]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006b92:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006b94:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006b98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006b9c:	4302      	orrs	r2, r0
 8006b9e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006ba2:	0218      	lsls	r0, r3, #8
 8006ba4:	d509      	bpl.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006ba6:	4914      	ldr	r1, [pc, #80]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006ba8:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006bac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8006bb0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006bb4:	4302      	orrs	r2, r0
 8006bb6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006bba:	2e01      	cmp	r6, #1
 8006bbc:	f000 80b4 	beq.w	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006bc0:	0199      	lsls	r1, r3, #6
 8006bc2:	f100 80b1 	bmi.w	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006bc6:	2d01      	cmp	r5, #1
 8006bc8:	d175      	bne.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006bca:	4d0b      	ldr	r5, [pc, #44]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006bcc:	682b      	ldr	r3, [r5, #0]
 8006bce:	462e      	mov	r6, r5
 8006bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bd4:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bd6:	f7fd ff57 	bl	8004a88 <HAL_GetTick>
 8006bda:	4607      	mov	r7, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006bdc:	682b      	ldr	r3, [r5, #0]
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	f100 8126 	bmi.w	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006be4:	6822      	ldr	r2, [r4, #0]
 8006be6:	0315      	lsls	r5, r2, #12
 8006be8:	d501      	bpl.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8006bea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006bec:	b143      	cbz	r3, 8006c00 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8006bee:	02d0      	lsls	r0, r2, #11
 8006bf0:	d521      	bpl.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bf4:	b9fb      	cbnz	r3, 8006c36 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8006bf6:	e003      	b.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8006bf8:	40023800 	.word	0x40023800
 8006bfc:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006c00:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c04:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006c08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c0c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8006c10:	430b      	orrs	r3, r1
 8006c12:	6961      	ldr	r1, [r4, #20]
 8006c14:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8006c18:	69a1      	ldr	r1, [r4, #24]
 8006c1a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006c1e:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006c22:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8006c26:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006c28:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8006c2c:	3901      	subs	r1, #1
 8006c2e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006c32:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006c36:	0291      	lsls	r1, r2, #10
 8006c38:	d515      	bpl.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8006c3a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006c3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c40:	d111      	bne.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c42:	4982      	ldr	r1, [pc, #520]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006c44:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c48:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006c4c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006c50:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006c54:	4303      	orrs	r3, r0
 8006c56:	6960      	ldr	r0, [r4, #20]
 8006c58:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006c5c:	6a20      	ldr	r0, [r4, #32]
 8006c5e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006c66:	0712      	lsls	r2, r2, #28
 8006c68:	d519      	bpl.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c6a:	4a78      	ldr	r2, [pc, #480]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006c6c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006c70:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006c74:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8006c78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c7c:	430b      	orrs	r3, r1
 8006c7e:	6961      	ldr	r1, [r4, #20]
 8006c80:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8006c84:	69e1      	ldr	r1, [r4, #28]
 8006c86:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8006c8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006c8e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006c92:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006c94:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006c98:	430b      	orrs	r3, r1
 8006c9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006c9e:	4c6b      	ldr	r4, [pc, #428]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ca6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ca8:	f7fd feee 	bl	8004a88 <HAL_GetTick>
 8006cac:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006cae:	6823      	ldr	r3, [r4, #0]
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	f140 80c4 	bpl.w	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8006cb6:	2000      	movs	r0, #0
 8006cb8:	e009      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 8006cba:	2601      	movs	r6, #1
 8006cbc:	e67c      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cbe:	f7fd fee3 	bl	8004a88 <HAL_GetTick>
 8006cc2:	eba0 0008 	sub.w	r0, r0, r8
 8006cc6:	2864      	cmp	r0, #100	; 0x64
 8006cc8:	f67f ae8e 	bls.w	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8006ccc:	2003      	movs	r0, #3
}
 8006cce:	b003      	add	sp, #12
 8006cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006cd4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006cd6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	f43f ae8e 	beq.w	80069fc <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ce2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ce8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006cec:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006cee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006cf0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006cf4:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8006cf6:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006cf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cfa:	07da      	lsls	r2, r3, #31
 8006cfc:	f57f ae7e 	bpl.w	80069fc <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8006d00:	f7fd fec2 	bl	8004a88 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d04:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006d08:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d0c:	079b      	lsls	r3, r3, #30
 8006d0e:	f53f ae75 	bmi.w	80069fc <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d12:	f7fd feb9 	bl	8004a88 <HAL_GetTick>
 8006d16:	eba0 0008 	sub.w	r0, r0, r8
 8006d1a:	4548      	cmp	r0, r9
 8006d1c:	d9f5      	bls.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8006d1e:	e7d5      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d20:	6891      	ldr	r1, [r2, #8]
 8006d22:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8006d26:	e679      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8006d28:	4e48      	ldr	r6, [pc, #288]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006d2a:	6833      	ldr	r3, [r6, #0]
 8006d2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d30:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006d32:	f7fd fea9 	bl	8004a88 <HAL_GetTick>
 8006d36:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d38:	6833      	ldr	r3, [r6, #0]
 8006d3a:	011a      	lsls	r2, r3, #4
 8006d3c:	d472      	bmi.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006d3e:	6822      	ldr	r2, [r4, #0]
 8006d40:	07d3      	lsls	r3, r2, #31
 8006d42:	d512      	bpl.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8006d44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d46:	b983      	cbnz	r3, 8006d6a <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006d48:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006d4c:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d54:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8006d58:	430b      	orrs	r3, r1
 8006d5a:	6861      	ldr	r1, [r4, #4]
 8006d5c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8006d60:	68a1      	ldr	r1, [r4, #8]
 8006d62:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8006d66:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006d6a:	0317      	lsls	r7, r2, #12
 8006d6c:	d503      	bpl.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006d6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006d70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d74:	d005      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006d76:	02d6      	lsls	r6, r2, #11
 8006d78:	d51e      	bpl.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006d7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d80:	d11a      	bne.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006d82:	4932      	ldr	r1, [pc, #200]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006d84:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006d88:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006d8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d90:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006d94:	4303      	orrs	r3, r0
 8006d96:	6860      	ldr	r0, [r4, #4]
 8006d98:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006d9c:	68e0      	ldr	r0, [r4, #12]
 8006d9e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006da2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006da6:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8006daa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dac:	f020 001f 	bic.w	r0, r0, #31
 8006db0:	3b01      	subs	r3, #1
 8006db2:	4303      	orrs	r3, r0
 8006db4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006db8:	01d0      	lsls	r0, r2, #7
 8006dba:	d511      	bpl.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006dbc:	4923      	ldr	r1, [pc, #140]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006dbe:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006dc2:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006dc6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8006dca:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8006dce:	4303      	orrs	r3, r0
 8006dd0:	6860      	ldr	r0, [r4, #4]
 8006dd2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006dd6:	6920      	ldr	r0, [r4, #16]
 8006dd8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006ddc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006de0:	0191      	lsls	r1, r2, #6
 8006de2:	d50d      	bpl.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006de4:	6923      	ldr	r3, [r4, #16]
 8006de6:	6862      	ldr	r2, [r4, #4]
 8006de8:	041b      	lsls	r3, r3, #16
 8006dea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8006dee:	68e2      	ldr	r2, [r4, #12]
 8006df0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006df4:	68a2      	ldr	r2, [r4, #8]
 8006df6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8006dfa:	4a14      	ldr	r2, [pc, #80]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006dfc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8006e00:	4e12      	ldr	r6, [pc, #72]	; (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006e02:	6833      	ldr	r3, [r6, #0]
 8006e04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e08:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006e0a:	f7fd fe3d 	bl	8004a88 <HAL_GetTick>
 8006e0e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e10:	6833      	ldr	r3, [r6, #0]
 8006e12:	011a      	lsls	r2, r3, #4
 8006e14:	f53f aed7 	bmi.w	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e18:	f7fd fe36 	bl	8004a88 <HAL_GetTick>
 8006e1c:	1bc0      	subs	r0, r0, r7
 8006e1e:	2864      	cmp	r0, #100	; 0x64
 8006e20:	d9f6      	bls.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006e22:	e753      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e24:	f7fd fe30 	bl	8004a88 <HAL_GetTick>
 8006e28:	1bc0      	subs	r0, r0, r7
 8006e2a:	2864      	cmp	r0, #100	; 0x64
 8006e2c:	d984      	bls.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006e2e:	e74d      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006e30:	f7fd fe2a 	bl	8004a88 <HAL_GetTick>
 8006e34:	1bc0      	subs	r0, r0, r7
 8006e36:	2864      	cmp	r0, #100	; 0x64
 8006e38:	f67f aed0 	bls.w	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8006e3c:	e746      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006e3e:	f7fd fe23 	bl	8004a88 <HAL_GetTick>
 8006e42:	1b40      	subs	r0, r0, r5
 8006e44:	2864      	cmp	r0, #100	; 0x64
 8006e46:	f67f af32 	bls.w	8006cae <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006e4a:	e73f      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8006e4c:	40023800 	.word	0x40023800

08006e50 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006e50:	b538      	push	{r3, r4, r5, lr}
 8006e52:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006e54:	4604      	mov	r4, r0
 8006e56:	b1c8      	cbz	r0, 8006e8c <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006e58:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006e5c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006e60:	b91b      	cbnz	r3, 8006e6a <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006e62:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006e66:	f7fa fc4b 	bl	8001700 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e6a:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006e6c:	1d21      	adds	r1, r4, #4
 8006e6e:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e70:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006e74:	f000 f9cf 	bl	8007216 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006e78:	6862      	ldr	r2, [r4, #4]
 8006e7a:	4629      	mov	r1, r5
 8006e7c:	6820      	ldr	r0, [r4, #0]
 8006e7e:	f000 fa05 	bl	800728c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006e82:	2301      	movs	r3, #1

  return HAL_OK;
 8006e84:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006e86:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8006e8a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006e8c:	2001      	movs	r0, #1
 8006e8e:	e7fc      	b.n	8006e8a <HAL_SDRAM_Init+0x3a>

08006e90 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006e90:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006e92:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8006e96:	4605      	mov	r5, r0
 8006e98:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006e9a:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006e9c:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8006e9e:	d010      	beq.n	8006ec2 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006ea0:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8006ea4:	2c01      	cmp	r4, #1
 8006ea6:	d110      	bne.n	8006eca <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ea8:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006eaa:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006eac:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006eb0:	f000 fa22 	bl	80072f8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006eb4:	6833      	ldr	r3, [r6, #0]
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d104      	bne.n	8006ec4 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006eba:	2305      	movs	r3, #5
 8006ebc:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006ec0:	2000      	movs	r0, #0
}
 8006ec2:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006ec4:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8006ec8:	e7fa      	b.n	8006ec0 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8006eca:	2001      	movs	r0, #1
 8006ecc:	e7f9      	b.n	8006ec2 <HAL_SDRAM_SendCommand+0x32>

08006ece <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006ece:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006ed0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8006ed4:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	b2d8      	uxtb	r0, r3
 8006eda:	d00d      	beq.n	8006ef8 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006edc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	b2dd      	uxtb	r5, r3
 8006ee4:	d109      	bne.n	8006efa <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ee6:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006ee8:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006eea:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006eee:	f000 fa15 	bl	800731c <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006ef2:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006ef4:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8006ef8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006efa:	2001      	movs	r0, #1
 8006efc:	e7fc      	b.n	8006ef8 <HAL_SDRAM_ProgramRefreshRate+0x2a>

08006efe <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006efe:	4770      	bx	lr

08006f00 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f00:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d133      	bne.n	8006f70 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f08:	2302      	movs	r3, #2
 8006f0a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f0e:	6803      	ldr	r3, [r0, #0]
 8006f10:	68da      	ldr	r2, [r3, #12]
 8006f12:	f042 0201 	orr.w	r2, r2, #1
 8006f16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f18:	4a16      	ldr	r2, [pc, #88]	; (8006f74 <HAL_TIM_Base_Start_IT+0x74>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d01a      	beq.n	8006f54 <HAL_TIM_Base_Start_IT+0x54>
 8006f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f22:	d017      	beq.n	8006f54 <HAL_TIM_Base_Start_IT+0x54>
 8006f24:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d013      	beq.n	8006f54 <HAL_TIM_Base_Start_IT+0x54>
 8006f2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d00f      	beq.n	8006f54 <HAL_TIM_Base_Start_IT+0x54>
 8006f34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d00b      	beq.n	8006f54 <HAL_TIM_Base_Start_IT+0x54>
 8006f3c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d007      	beq.n	8006f54 <HAL_TIM_Base_Start_IT+0x54>
 8006f44:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d003      	beq.n	8006f54 <HAL_TIM_Base_Start_IT+0x54>
 8006f4c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d107      	bne.n	8006f64 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f54:	6899      	ldr	r1, [r3, #8]
 8006f56:	4a08      	ldr	r2, [pc, #32]	; (8006f78 <HAL_TIM_Base_Start_IT+0x78>)
 8006f58:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f5a:	2a06      	cmp	r2, #6
 8006f5c:	d006      	beq.n	8006f6c <HAL_TIM_Base_Start_IT+0x6c>
 8006f5e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006f62:	d003      	beq.n	8006f6c <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	f042 0201 	orr.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f6c:	2000      	movs	r0, #0
}
 8006f6e:	4770      	bx	lr
    return HAL_ERROR;
 8006f70:	2001      	movs	r0, #1
 8006f72:	4770      	bx	lr
 8006f74:	40010000 	.word	0x40010000
 8006f78:	00010007 	.word	0x00010007

08006f7c <HAL_TIM_OC_DelayElapsedCallback>:
 8006f7c:	4770      	bx	lr

08006f7e <HAL_TIM_IC_CaptureCallback>:
 8006f7e:	4770      	bx	lr

08006f80 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006f80:	4770      	bx	lr

08006f82 <HAL_TIM_TriggerCallback>:
 8006f82:	4770      	bx	lr

08006f84 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f84:	6803      	ldr	r3, [r0, #0]
 8006f86:	691a      	ldr	r2, [r3, #16]
 8006f88:	0791      	lsls	r1, r2, #30
{
 8006f8a:	b510      	push	{r4, lr}
 8006f8c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f8e:	d50f      	bpl.n	8006fb0 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f90:	68da      	ldr	r2, [r3, #12]
 8006f92:	0792      	lsls	r2, r2, #30
 8006f94:	d50c      	bpl.n	8006fb0 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f96:	f06f 0202 	mvn.w	r2, #2
 8006f9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	0799      	lsls	r1, r3, #30
 8006fa4:	f000 8085 	beq.w	80070b2 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fa8:	f7ff ffe9 	bl	8006f7e <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fac:	2300      	movs	r3, #0
 8006fae:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	691a      	ldr	r2, [r3, #16]
 8006fb4:	0752      	lsls	r2, r2, #29
 8006fb6:	d510      	bpl.n	8006fda <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fb8:	68da      	ldr	r2, [r3, #12]
 8006fba:	0750      	lsls	r0, r2, #29
 8006fbc:	d50d      	bpl.n	8006fda <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fbe:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fc2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006fd0:	d075      	beq.n	80070be <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006fd2:	f7ff ffd4 	bl	8006f7e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fda:	6823      	ldr	r3, [r4, #0]
 8006fdc:	691a      	ldr	r2, [r3, #16]
 8006fde:	0711      	lsls	r1, r2, #28
 8006fe0:	d50f      	bpl.n	8007002 <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fe2:	68da      	ldr	r2, [r3, #12]
 8006fe4:	0712      	lsls	r2, r2, #28
 8006fe6:	d50c      	bpl.n	8007002 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fe8:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fec:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006fee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ff0:	2204      	movs	r2, #4
 8006ff2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	079b      	lsls	r3, r3, #30
 8006ff8:	d067      	beq.n	80070ca <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8006ffa:	f7ff ffc0 	bl	8006f7e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ffe:	2300      	movs	r3, #0
 8007000:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007002:	6823      	ldr	r3, [r4, #0]
 8007004:	691a      	ldr	r2, [r3, #16]
 8007006:	06d0      	lsls	r0, r2, #27
 8007008:	d510      	bpl.n	800702c <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800700a:	68da      	ldr	r2, [r3, #12]
 800700c:	06d1      	lsls	r1, r2, #27
 800700e:	d50d      	bpl.n	800702c <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007010:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007014:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007016:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007018:	2208      	movs	r2, #8
 800701a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007022:	d058      	beq.n	80070d6 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8007024:	f7ff ffab 	bl	8006f7e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007028:	2300      	movs	r3, #0
 800702a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	691a      	ldr	r2, [r3, #16]
 8007030:	07d2      	lsls	r2, r2, #31
 8007032:	d508      	bpl.n	8007046 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007034:	68da      	ldr	r2, [r3, #12]
 8007036:	07d0      	lsls	r0, r2, #31
 8007038:	d505      	bpl.n	8007046 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800703a:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800703e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007040:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007042:	f7fa f959 	bl	80012f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	691a      	ldr	r2, [r3, #16]
 800704a:	0611      	lsls	r1, r2, #24
 800704c:	d508      	bpl.n	8007060 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800704e:	68da      	ldr	r2, [r3, #12]
 8007050:	0612      	lsls	r2, r2, #24
 8007052:	d505      	bpl.n	8007060 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007054:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007058:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800705a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800705c:	f000 f8d9 	bl	8007212 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	691a      	ldr	r2, [r3, #16]
 8007064:	05d0      	lsls	r0, r2, #23
 8007066:	d508      	bpl.n	800707a <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007068:	68da      	ldr	r2, [r3, #12]
 800706a:	0611      	lsls	r1, r2, #24
 800706c:	d505      	bpl.n	800707a <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800706e:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007072:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007074:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007076:	f000 f8cd 	bl	8007214 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	691a      	ldr	r2, [r3, #16]
 800707e:	0652      	lsls	r2, r2, #25
 8007080:	d508      	bpl.n	8007094 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007082:	68da      	ldr	r2, [r3, #12]
 8007084:	0650      	lsls	r0, r2, #25
 8007086:	d505      	bpl.n	8007094 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007088:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800708c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800708e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007090:	f7ff ff77 	bl	8006f82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	691a      	ldr	r2, [r3, #16]
 8007098:	0691      	lsls	r1, r2, #26
 800709a:	d522      	bpl.n	80070e2 <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800709c:	68da      	ldr	r2, [r3, #12]
 800709e:	0692      	lsls	r2, r2, #26
 80070a0:	d51f      	bpl.n	80070e2 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070a2:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070a6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070a8:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80070ae:	f000 b8af 	b.w	8007210 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070b2:	f7ff ff63 	bl	8006f7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070b6:	4620      	mov	r0, r4
 80070b8:	f7ff ff62 	bl	8006f80 <HAL_TIM_PWM_PulseFinishedCallback>
 80070bc:	e776      	b.n	8006fac <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070be:	f7ff ff5d 	bl	8006f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070c2:	4620      	mov	r0, r4
 80070c4:	f7ff ff5c 	bl	8006f80 <HAL_TIM_PWM_PulseFinishedCallback>
 80070c8:	e785      	b.n	8006fd6 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ca:	f7ff ff57 	bl	8006f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ce:	4620      	mov	r0, r4
 80070d0:	f7ff ff56 	bl	8006f80 <HAL_TIM_PWM_PulseFinishedCallback>
 80070d4:	e793      	b.n	8006ffe <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070d6:	f7ff ff51 	bl	8006f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070da:	4620      	mov	r0, r4
 80070dc:	f7ff ff50 	bl	8006f80 <HAL_TIM_PWM_PulseFinishedCallback>
 80070e0:	e7a2      	b.n	8007028 <HAL_TIM_IRQHandler+0xa4>
}
 80070e2:	bd10      	pop	{r4, pc}

080070e4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070e4:	4a30      	ldr	r2, [pc, #192]	; (80071a8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80070e6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070e8:	4290      	cmp	r0, r2
 80070ea:	d012      	beq.n	8007112 <TIM_Base_SetConfig+0x2e>
 80070ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80070f0:	d00f      	beq.n	8007112 <TIM_Base_SetConfig+0x2e>
 80070f2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80070f6:	4290      	cmp	r0, r2
 80070f8:	d00b      	beq.n	8007112 <TIM_Base_SetConfig+0x2e>
 80070fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80070fe:	4290      	cmp	r0, r2
 8007100:	d007      	beq.n	8007112 <TIM_Base_SetConfig+0x2e>
 8007102:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007106:	4290      	cmp	r0, r2
 8007108:	d003      	beq.n	8007112 <TIM_Base_SetConfig+0x2e>
 800710a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800710e:	4290      	cmp	r0, r2
 8007110:	d119      	bne.n	8007146 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8007112:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007118:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800711a:	4a23      	ldr	r2, [pc, #140]	; (80071a8 <TIM_Base_SetConfig+0xc4>)
 800711c:	4290      	cmp	r0, r2
 800711e:	d029      	beq.n	8007174 <TIM_Base_SetConfig+0x90>
 8007120:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007124:	d026      	beq.n	8007174 <TIM_Base_SetConfig+0x90>
 8007126:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800712a:	4290      	cmp	r0, r2
 800712c:	d022      	beq.n	8007174 <TIM_Base_SetConfig+0x90>
 800712e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007132:	4290      	cmp	r0, r2
 8007134:	d01e      	beq.n	8007174 <TIM_Base_SetConfig+0x90>
 8007136:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800713a:	4290      	cmp	r0, r2
 800713c:	d01a      	beq.n	8007174 <TIM_Base_SetConfig+0x90>
 800713e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007142:	4290      	cmp	r0, r2
 8007144:	d016      	beq.n	8007174 <TIM_Base_SetConfig+0x90>
 8007146:	4a19      	ldr	r2, [pc, #100]	; (80071ac <TIM_Base_SetConfig+0xc8>)
 8007148:	4290      	cmp	r0, r2
 800714a:	d013      	beq.n	8007174 <TIM_Base_SetConfig+0x90>
 800714c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007150:	4290      	cmp	r0, r2
 8007152:	d00f      	beq.n	8007174 <TIM_Base_SetConfig+0x90>
 8007154:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007158:	4290      	cmp	r0, r2
 800715a:	d00b      	beq.n	8007174 <TIM_Base_SetConfig+0x90>
 800715c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8007160:	4290      	cmp	r0, r2
 8007162:	d007      	beq.n	8007174 <TIM_Base_SetConfig+0x90>
 8007164:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007168:	4290      	cmp	r0, r2
 800716a:	d003      	beq.n	8007174 <TIM_Base_SetConfig+0x90>
 800716c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007170:	4290      	cmp	r0, r2
 8007172:	d103      	bne.n	800717c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007178:	68ca      	ldr	r2, [r1, #12]
 800717a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800717c:	694a      	ldr	r2, [r1, #20]
 800717e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007182:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8007184:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007186:	688b      	ldr	r3, [r1, #8]
 8007188:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800718a:	680b      	ldr	r3, [r1, #0]
 800718c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800718e:	4b06      	ldr	r3, [pc, #24]	; (80071a8 <TIM_Base_SetConfig+0xc4>)
 8007190:	4298      	cmp	r0, r3
 8007192:	d003      	beq.n	800719c <TIM_Base_SetConfig+0xb8>
 8007194:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007198:	4298      	cmp	r0, r3
 800719a:	d101      	bne.n	80071a0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800719c:	690b      	ldr	r3, [r1, #16]
 800719e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071a0:	2301      	movs	r3, #1
 80071a2:	6143      	str	r3, [r0, #20]
}
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	40010000 	.word	0x40010000
 80071ac:	40014000 	.word	0x40014000

080071b0 <HAL_TIM_Base_Init>:
{
 80071b0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80071b2:	4604      	mov	r4, r0
 80071b4:	b350      	cbz	r0, 800720c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80071b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80071ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80071be:	b91b      	cbnz	r3, 80071c8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80071c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80071c4:	f7ff fe9b 	bl	8006efe <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80071c8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071ca:	6820      	ldr	r0, [r4, #0]
 80071cc:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80071ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071d2:	f7ff ff87 	bl	80070e4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071d6:	2301      	movs	r3, #1
  return HAL_OK;
 80071d8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071da:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071de:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80071e2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80071e6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80071ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80071ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80071fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071fe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8007202:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007206:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800720a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800720c:	2001      	movs	r0, #1
 800720e:	e7fc      	b.n	800720a <HAL_TIM_Base_Init+0x5a>

08007210 <HAL_TIMEx_CommutCallback>:
 8007210:	4770      	bx	lr

08007212 <HAL_TIMEx_BreakCallback>:
 8007212:	4770      	bx	lr

08007214 <HAL_TIMEx_Break2Callback>:
 8007214:	4770      	bx	lr

08007216 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007216:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800721a:	680a      	ldr	r2, [r1, #0]
 800721c:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8007220:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8007224:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8007228:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 800722c:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8007230:	4323      	orrs	r3, r4
 8007232:	b9a2      	cbnz	r2, 800725e <FMC_SDRAM_Init+0x48>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007234:	ea43 0209 	orr.w	r2, r3, r9
 8007238:	6801      	ldr	r1, [r0, #0]
 800723a:	432a      	orrs	r2, r5
 800723c:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8007240:	ea42 0308 	orr.w	r3, r2, r8
 8007244:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8007248:	ea43 030e 	orr.w	r3, r3, lr
 800724c:	ea43 030c 	orr.w	r3, r3, ip
 8007250:	433b      	orrs	r3, r7
 8007252:	4333      	orrs	r3, r6
 8007254:	430b      	orrs	r3, r1
 8007256:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8007258:	2000      	movs	r0, #0
 800725a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800725e:	6802      	ldr	r2, [r0, #0]
 8007260:	ea43 0309 	orr.w	r3, r3, r9
 8007264:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007268:	4313      	orrs	r3, r2
 800726a:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800726c:	ea45 0308 	orr.w	r3, r5, r8
 8007270:	6842      	ldr	r2, [r0, #4]
 8007272:	ea43 030e 	orr.w	r3, r3, lr
 8007276:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800727a:	ea43 030c 	orr.w	r3, r3, ip
 800727e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8007282:	433b      	orrs	r3, r7
 8007284:	4333      	orrs	r3, r6
 8007286:	4313      	orrs	r3, r2
 8007288:	6043      	str	r3, [r0, #4]
 800728a:	e7e5      	b.n	8007258 <FMC_SDRAM_Init+0x42>

0800728c <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800728c:	68cb      	ldr	r3, [r1, #12]
 800728e:	f103 3cff 	add.w	ip, r3, #4294967295
 8007292:	694b      	ldr	r3, [r1, #20]
{
 8007294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007296:	3b01      	subs	r3, #1
 8007298:	680f      	ldr	r7, [r1, #0]
 800729a:	684c      	ldr	r4, [r1, #4]
 800729c:	688e      	ldr	r6, [r1, #8]
 800729e:	051b      	lsls	r3, r3, #20
 80072a0:	690d      	ldr	r5, [r1, #16]
 80072a2:	3c01      	subs	r4, #1
 80072a4:	6989      	ldr	r1, [r1, #24]
 80072a6:	3e01      	subs	r6, #1
 80072a8:	3d01      	subs	r5, #1
 80072aa:	3f01      	subs	r7, #1
 80072ac:	3901      	subs	r1, #1
 80072ae:	0124      	lsls	r4, r4, #4
 80072b0:	0236      	lsls	r6, r6, #8
 80072b2:	042d      	lsls	r5, r5, #16
 80072b4:	0609      	lsls	r1, r1, #24
 80072b6:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 80072ba:	b95a      	cbnz	r2, 80072d4 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80072bc:	433b      	orrs	r3, r7
 80072be:	6882      	ldr	r2, [r0, #8]
 80072c0:	4323      	orrs	r3, r4
 80072c2:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80072c6:	4333      	orrs	r3, r6
 80072c8:	432b      	orrs	r3, r5
 80072ca:	430b      	orrs	r3, r1
 80072cc:	4313      	orrs	r3, r2
 80072ce:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 80072d0:	2000      	movs	r0, #0
 80072d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80072d4:	6882      	ldr	r2, [r0, #8]
 80072d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80072da:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80072de:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80072e0:	ea44 0306 	orr.w	r3, r4, r6
 80072e4:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80072e6:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80072e8:	68c2      	ldr	r2, [r0, #12]
 80072ea:	432b      	orrs	r3, r5
 80072ec:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80072f0:	430b      	orrs	r3, r1
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60c3      	str	r3, [r0, #12]
 80072f6:	e7eb      	b.n	80072d0 <FMC_SDRAM_Timing_Init+0x44>

080072f8 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80072f8:	6902      	ldr	r2, [r0, #16]
{
 80072fa:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80072fc:	e9d1 3400 	ldrd	r3, r4, [r1]
 8007300:	0d92      	lsrs	r2, r2, #22
 8007302:	4323      	orrs	r3, r4
 8007304:	68cc      	ldr	r4, [r1, #12]
 8007306:	0592      	lsls	r2, r2, #22
 8007308:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800730c:	4313      	orrs	r3, r2
 800730e:	688a      	ldr	r2, [r1, #8]
 8007310:	3a01      	subs	r2, #1
 8007312:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8007316:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8007318:	2000      	movs	r0, #0
 800731a:	bd10      	pop	{r4, pc}

0800731c <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800731c:	6943      	ldr	r3, [r0, #20]
 800731e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007322:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8007326:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800732a:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 800732c:	2000      	movs	r0, #0
 800732e:	4770      	bx	lr

08007330 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007330:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8007334:	b113      	cbz	r3, 800733c <osKernelInitialize+0xc>
    stat = osErrorISR;
 8007336:	f06f 0005 	mvn.w	r0, #5
 800733a:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800733c:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 8007340:	4b07      	ldr	r3, [pc, #28]	; (8007360 <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 8007342:	b912      	cbnz	r2, 800734a <osKernelInitialize+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007344:	f3ef 8211 	mrs	r2, BASEPRI
 8007348:	b112      	cbz	r2, 8007350 <osKernelInitialize+0x20>
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	2a02      	cmp	r2, #2
 800734e:	d0f2      	beq.n	8007336 <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007350:	6818      	ldr	r0, [r3, #0]
 8007352:	b910      	cbnz	r0, 800735a <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007354:	2201      	movs	r2, #1
 8007356:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007358:	4770      	bx	lr
    } else {
      stat = osError;
 800735a:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800735e:	4770      	bx	lr
 8007360:	200188f0 	.word	0x200188f0

08007364 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007364:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007366:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800736a:	b113      	cbz	r3, 8007372 <osKernelStart+0xe>
    stat = osErrorISR;
 800736c:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 8007370:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007372:	f3ef 8210 	mrs	r2, PRIMASK
  return(result);
 8007376:	4b0a      	ldr	r3, [pc, #40]	; (80073a0 <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 8007378:	b912      	cbnz	r2, 8007380 <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800737a:	f3ef 8211 	mrs	r2, BASEPRI
 800737e:	b112      	cbz	r2, 8007386 <osKernelStart+0x22>
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	2a02      	cmp	r2, #2
 8007384:	d0f2      	beq.n	800736c <osKernelStart+0x8>
    if (KernelState == osKernelReady) {
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	2a01      	cmp	r2, #1
 800738a:	d105      	bne.n	8007398 <osKernelStart+0x34>
      KernelState = osKernelRunning;
 800738c:	2202      	movs	r2, #2
 800738e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007390:	f001 fe7a 	bl	8009088 <vTaskStartScheduler>
      stat = osOK;
 8007394:	2000      	movs	r0, #0
 8007396:	e7eb      	b.n	8007370 <osKernelStart+0xc>
      stat = osError;
 8007398:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800739c:	e7e8      	b.n	8007370 <osKernelStart+0xc>
 800739e:	bf00      	nop
 80073a0:	200188f0 	.word	0x200188f0

080073a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80073a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073a6:	4614      	mov	r4, r2
 80073a8:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80073aa:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80073ac:	460b      	mov	r3, r1
  hTask = NULL;
 80073ae:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073b0:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80073b4:	bb22      	cbnz	r2, 8007400 <osThreadNew+0x5c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073b6:	f3ef 8210 	mrs	r2, PRIMASK
 80073ba:	b912      	cbnz	r2, 80073c2 <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80073bc:	f3ef 8211 	mrs	r2, BASEPRI
 80073c0:	b11a      	cbz	r2, 80073ca <osThreadNew+0x26>
 80073c2:	4a22      	ldr	r2, [pc, #136]	; (800744c <osThreadNew+0xa8>)
 80073c4:	6812      	ldr	r2, [r2, #0]
 80073c6:	2a02      	cmp	r2, #2
 80073c8:	d01a      	beq.n	8007400 <osThreadNew+0x5c>
 80073ca:	b1c8      	cbz	r0, 8007400 <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80073cc:	2c00      	cmp	r4, #0
 80073ce:	d02f      	beq.n	8007430 <osThreadNew+0x8c>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80073d0:	69a5      	ldr	r5, [r4, #24]
 80073d2:	2d00      	cmp	r5, #0
 80073d4:	bf08      	it	eq
 80073d6:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80073d8:	1e6a      	subs	r2, r5, #1
 80073da:	46ac      	mov	ip, r5
 80073dc:	2a37      	cmp	r2, #55	; 0x37
 80073de:	d82b      	bhi.n	8007438 <osThreadNew+0x94>
 80073e0:	6862      	ldr	r2, [r4, #4]
 80073e2:	07d2      	lsls	r2, r2, #31
 80073e4:	d428      	bmi.n	8007438 <osThreadNew+0x94>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 80073e6:	6966      	ldr	r6, [r4, #20]
 80073e8:	b16e      	cbz	r6, 8007406 <osThreadNew+0x62>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80073ea:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 80073ec:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80073ee:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 80073f2:	b157      	cbz	r7, 800740a <osThreadNew+0x66>
 80073f4:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 80073f8:	d902      	bls.n	8007400 <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80073fa:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80073fc:	b104      	cbz	r4, 8007400 <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80073fe:	b9ee      	cbnz	r6, 800743c <osThreadNew+0x98>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007400:	9805      	ldr	r0, [sp, #20]
}
 8007402:	b007      	add	sp, #28
 8007404:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8007406:	2280      	movs	r2, #128	; 0x80
 8007408:	e7f0      	b.n	80073ec <osThreadNew+0x48>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800740a:	f1be 0f00 	cmp.w	lr, #0
 800740e:	d1f7      	bne.n	8007400 <osThreadNew+0x5c>
      if (mem == 0) {
 8007410:	6924      	ldr	r4, [r4, #16]
 8007412:	2c00      	cmp	r4, #0
 8007414:	d1f4      	bne.n	8007400 <osThreadNew+0x5c>
 8007416:	460c      	mov	r4, r1
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007418:	a905      	add	r1, sp, #20
 800741a:	b292      	uxth	r2, r2
 800741c:	e9cd c100 	strd	ip, r1, [sp]
 8007420:	4621      	mov	r1, r4
 8007422:	f001 fca5 	bl	8008d70 <xTaskCreate>
 8007426:	2801      	cmp	r0, #1
          hTask = NULL;
 8007428:	bf1c      	itt	ne
 800742a:	2300      	movne	r3, #0
 800742c:	9305      	strne	r3, [sp, #20]
 800742e:	e7e7      	b.n	8007400 <osThreadNew+0x5c>
    prio  = (UBaseType_t)osPriorityNormal;
 8007430:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8007434:	2280      	movs	r2, #128	; 0x80
 8007436:	e7ef      	b.n	8007418 <osThreadNew+0x74>
        return (NULL);
 8007438:	2000      	movs	r0, #0
 800743a:	e7e2      	b.n	8007402 <osThreadNew+0x5e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800743c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8007440:	9500      	str	r5, [sp, #0]
 8007442:	f001 fc57 	bl	8008cf4 <xTaskCreateStatic>
 8007446:	9005      	str	r0, [sp, #20]
 8007448:	e7da      	b.n	8007400 <osThreadNew+0x5c>
 800744a:	bf00      	nop
 800744c:	200188f0 	.word	0x200188f0

08007450 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007450:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007452:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8007456:	b113      	cbz	r3, 800745e <osDelay+0xe>
    stat = osErrorISR;
 8007458:	f06f 0005 	mvn.w	r0, #5
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800745c:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800745e:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8007462:	b913      	cbnz	r3, 800746a <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007464:	f3ef 8311 	mrs	r3, BASEPRI
 8007468:	b11b      	cbz	r3, 8007472 <osDelay+0x22>
 800746a:	4b05      	ldr	r3, [pc, #20]	; (8007480 <osDelay+0x30>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b02      	cmp	r3, #2
 8007470:	d0f2      	beq.n	8007458 <osDelay+0x8>
    if (ticks != 0U) {
 8007472:	2800      	cmp	r0, #0
 8007474:	d0f2      	beq.n	800745c <osDelay+0xc>
      vTaskDelay(ticks);
 8007476:	f001 fdc5 	bl	8009004 <vTaskDelay>
    stat = osOK;
 800747a:	2000      	movs	r0, #0
 800747c:	e7ee      	b.n	800745c <osDelay+0xc>
 800747e:	bf00      	nop
 8007480:	200188f0 	.word	0x200188f0

08007484 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007484:	b570      	push	{r4, r5, r6, lr}
 8007486:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007488:	f3ef 8505 	mrs	r5, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800748c:	b115      	cbz	r5, 8007494 <osMutexNew+0x10>
  hMutex = NULL;
 800748e:	2600      	movs	r6, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8007490:	4630      	mov	r0, r6
 8007492:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007494:	f3ef 8210 	mrs	r2, PRIMASK
  if (!IS_IRQ()) {
 8007498:	b912      	cbnz	r2, 80074a0 <osMutexNew+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800749a:	f3ef 8211 	mrs	r2, BASEPRI
 800749e:	b11a      	cbz	r2, 80074a8 <osMutexNew+0x24>
 80074a0:	4a18      	ldr	r2, [pc, #96]	; (8007504 <osMutexNew+0x80>)
 80074a2:	6812      	ldr	r2, [r2, #0]
 80074a4:	2a02      	cmp	r2, #2
 80074a6:	d0f2      	beq.n	800748e <osMutexNew+0xa>
    if (attr != NULL) {
 80074a8:	b114      	cbz	r4, 80074b0 <osMutexNew+0x2c>
      type = attr->attr_bits;
 80074aa:	6865      	ldr	r5, [r4, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 80074ac:	072b      	lsls	r3, r5, #28
 80074ae:	d4ee      	bmi.n	800748e <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 80074b0:	f005 0501 	and.w	r5, r5, #1
      if (attr != NULL) {
 80074b4:	b17c      	cbz	r4, 80074d6 <osMutexNew+0x52>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80074b6:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 80074ba:	b151      	cbz	r1, 80074d2 <osMutexNew+0x4e>
 80074bc:	2b4f      	cmp	r3, #79	; 0x4f
 80074be:	d9e6      	bls.n	800748e <osMutexNew+0xa>
        if (rmtx != 0U) {
 80074c0:	b1dd      	cbz	r5, 80074fa <osMutexNew+0x76>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80074c2:	2004      	movs	r0, #4
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80074c4:	f000 ff42 	bl	800834c <xQueueCreateMutexStatic>
 80074c8:	4606      	mov	r6, r0
      if (hMutex != NULL) {
 80074ca:	2800      	cmp	r0, #0
 80074cc:	d0df      	beq.n	800748e <osMutexNew+0xa>
          name = attr->name;
 80074ce:	6824      	ldr	r4, [r4, #0]
 80074d0:	e00a      	b.n	80074e8 <osMutexNew+0x64>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1db      	bne.n	800748e <osMutexNew+0xa>
          if (rmtx != 0U) {
 80074d6:	b195      	cbz	r5, 80074fe <osMutexNew+0x7a>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80074d8:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutex ();
 80074da:	f000 ff6c 	bl	80083b6 <xQueueCreateMutex>
 80074de:	4606      	mov	r6, r0
      if (hMutex != NULL) {
 80074e0:	2800      	cmp	r0, #0
 80074e2:	d0d4      	beq.n	800748e <osMutexNew+0xa>
        if (attr != NULL) {
 80074e4:	2c00      	cmp	r4, #0
 80074e6:	d1f2      	bne.n	80074ce <osMutexNew+0x4a>
        vQueueAddToRegistry (hMutex, name);
 80074e8:	4621      	mov	r1, r4
 80074ea:	4630      	mov	r0, r6
 80074ec:	f001 fa32 	bl	8008954 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 80074f0:	2d00      	cmp	r5, #0
 80074f2:	d0cd      	beq.n	8007490 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80074f4:	f046 0601 	orr.w	r6, r6, #1
  return ((osMutexId_t)hMutex);
 80074f8:	e7ca      	b.n	8007490 <osMutexNew+0xc>
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80074fa:	2001      	movs	r0, #1
 80074fc:	e7e2      	b.n	80074c4 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutex ();
 80074fe:	2001      	movs	r0, #1
 8007500:	e7eb      	b.n	80074da <osMutexNew+0x56>
 8007502:	bf00      	nop
 8007504:	200188f0 	.word	0x200188f0

08007508 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007508:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800750a:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800750e:	b510      	push	{r4, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 8007510:	f003 0301 	and.w	r3, r3, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007514:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007516:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800751a:	b112      	cbz	r2, 8007522 <osMutexAcquire+0x1a>
    stat = osErrorISR;
 800751c:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8007520:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007522:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8007526:	b912      	cbnz	r2, 800752e <osMutexAcquire+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007528:	f3ef 8211 	mrs	r2, BASEPRI
 800752c:	b11a      	cbz	r2, 8007536 <osMutexAcquire+0x2e>
 800752e:	4a0d      	ldr	r2, [pc, #52]	; (8007564 <osMutexAcquire+0x5c>)
 8007530:	6812      	ldr	r2, [r2, #0]
 8007532:	2a02      	cmp	r2, #2
 8007534:	d0f2      	beq.n	800751c <osMutexAcquire+0x14>
  else if (hMutex == NULL) {
 8007536:	b188      	cbz	r0, 800755c <osMutexAcquire+0x54>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007538:	4621      	mov	r1, r4
    if (rmtx != 0U) {
 800753a:	b163      	cbz	r3, 8007556 <osMutexAcquire+0x4e>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800753c:	f001 f990 	bl	8008860 <xQueueTakeMutexRecursive>
 8007540:	2801      	cmp	r0, #1
 8007542:	d101      	bne.n	8007548 <osMutexAcquire+0x40>
  stat = osOK;
 8007544:	2000      	movs	r0, #0
 8007546:	e7eb      	b.n	8007520 <osMutexAcquire+0x18>
          stat = osErrorResource;
 8007548:	2c00      	cmp	r4, #0
 800754a:	bf14      	ite	ne
 800754c:	f06f 0001 	mvnne.w	r0, #1
 8007550:	f06f 0002 	mvneq.w	r0, #2
 8007554:	e7e4      	b.n	8007520 <osMutexAcquire+0x18>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007556:	f001 f8b7 	bl	80086c8 <xQueueSemaphoreTake>
 800755a:	e7f1      	b.n	8007540 <osMutexAcquire+0x38>
    stat = osErrorParameter;
 800755c:	f06f 0003 	mvn.w	r0, #3
 8007560:	e7de      	b.n	8007520 <osMutexAcquire+0x18>
 8007562:	bf00      	nop
 8007564:	200188f0 	.word	0x200188f0

08007568 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007568:	b508      	push	{r3, lr}
 800756a:	4603      	mov	r3, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800756c:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 8007570:	f003 0301 	and.w	r3, r3, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007574:	f3ef 8205 	mrs	r2, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8007578:	b112      	cbz	r2, 8007580 <osMutexRelease+0x18>
    stat = osErrorISR;
 800757a:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800757e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007580:	f3ef 8210 	mrs	r2, PRIMASK
  if (IS_IRQ()) {
 8007584:	b912      	cbnz	r2, 800758c <osMutexRelease+0x24>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007586:	f3ef 8211 	mrs	r2, BASEPRI
 800758a:	b11a      	cbz	r2, 8007594 <osMutexRelease+0x2c>
 800758c:	4a0a      	ldr	r2, [pc, #40]	; (80075b8 <osMutexRelease+0x50>)
 800758e:	6812      	ldr	r2, [r2, #0]
 8007590:	2a02      	cmp	r2, #2
 8007592:	d0f2      	beq.n	800757a <osMutexRelease+0x12>
  else if (hMutex == NULL) {
 8007594:	b168      	cbz	r0, 80075b2 <osMutexRelease+0x4a>
    if (rmtx != 0U) {
 8007596:	b13b      	cbz	r3, 80075a8 <osMutexRelease+0x40>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007598:	f000 feed 	bl	8008376 <xQueueGiveMutexRecursive>
 800759c:	2801      	cmp	r0, #1
  stat = osOK;
 800759e:	bf0c      	ite	eq
 80075a0:	2000      	moveq	r0, #0
        stat = osErrorResource;
 80075a2:	f06f 0002 	mvnne.w	r0, #2
 80075a6:	e7ea      	b.n	800757e <osMutexRelease+0x16>
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80075a8:	461a      	mov	r2, r3
 80075aa:	4619      	mov	r1, r3
 80075ac:	f000 fe14 	bl	80081d8 <xQueueGenericSend>
 80075b0:	e7f4      	b.n	800759c <osMutexRelease+0x34>
    stat = osErrorParameter;
 80075b2:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80075b6:	e7e2      	b.n	800757e <osMutexRelease+0x16>
 80075b8:	200188f0 	.word	0x200188f0

080075bc <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80075bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075be:	460e      	mov	r6, r1
 80075c0:	4615      	mov	r5, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075c2:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80075c6:	b11b      	cbz	r3, 80075d0 <osSemaphoreNew+0x14>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 80075c8:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 80075ca:	4620      	mov	r0, r4
 80075cc:	b002      	add	sp, #8
 80075ce:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075d0:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80075d4:	b913      	cbnz	r3, 80075dc <osSemaphoreNew+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075d6:	f3ef 8311 	mrs	r3, BASEPRI
 80075da:	b11b      	cbz	r3, 80075e4 <osSemaphoreNew+0x28>
 80075dc:	4b21      	ldr	r3, [pc, #132]	; (8007664 <osSemaphoreNew+0xa8>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d0f1      	beq.n	80075c8 <osSemaphoreNew+0xc>
 80075e4:	2800      	cmp	r0, #0
 80075e6:	d0ef      	beq.n	80075c8 <osSemaphoreNew+0xc>
 80075e8:	42b0      	cmp	r0, r6
 80075ea:	d3ed      	bcc.n	80075c8 <osSemaphoreNew+0xc>
    if (attr != NULL) {
 80075ec:	b1ed      	cbz	r5, 800762a <osSemaphoreNew+0x6e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80075ee:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80075f2:	b1c3      	cbz	r3, 8007626 <osSemaphoreNew+0x6a>
 80075f4:	2a4f      	cmp	r2, #79	; 0x4f
 80075f6:	d9e7      	bls.n	80075c8 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 80075f8:	2801      	cmp	r0, #1
 80075fa:	d129      	bne.n	8007650 <osSemaphoreNew+0x94>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80075fc:	2203      	movs	r2, #3
 80075fe:	9200      	str	r2, [sp, #0]
 8007600:	2200      	movs	r2, #0
 8007602:	4611      	mov	r1, r2
 8007604:	f000 fd1e 	bl	8008044 <xQueueGenericCreateStatic>
          hSemaphore = xSemaphoreCreateBinary();
 8007608:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800760a:	2800      	cmp	r0, #0
 800760c:	d0dc      	beq.n	80075c8 <osSemaphoreNew+0xc>
 800760e:	b1ce      	cbz	r6, 8007644 <osSemaphoreNew+0x88>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007610:	2300      	movs	r3, #0
 8007612:	461a      	mov	r2, r3
 8007614:	4619      	mov	r1, r3
 8007616:	f000 fddf 	bl	80081d8 <xQueueGenericSend>
 800761a:	2801      	cmp	r0, #1
 800761c:	d012      	beq.n	8007644 <osSemaphoreNew+0x88>
            vSemaphoreDelete (hSemaphore);
 800761e:	4620      	mov	r0, r4
 8007620:	f001 f9c2 	bl	80089a8 <vQueueDelete>
 8007624:	e7d0      	b.n	80075c8 <osSemaphoreNew+0xc>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007626:	2a00      	cmp	r2, #0
 8007628:	d1ce      	bne.n	80075c8 <osSemaphoreNew+0xc>
      if (max_count == 1U) {
 800762a:	2801      	cmp	r0, #1
 800762c:	d104      	bne.n	8007638 <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateBinary();
 800762e:	2203      	movs	r2, #3
 8007630:	2100      	movs	r1, #0
 8007632:	f000 fd5f 	bl	80080f4 <xQueueGenericCreate>
 8007636:	e7e7      	b.n	8007608 <osSemaphoreNew+0x4c>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007638:	4631      	mov	r1, r6
 800763a:	f000 fdaa 	bl	8008192 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800763e:	4604      	mov	r4, r0
 8007640:	2800      	cmp	r0, #0
 8007642:	d0c1      	beq.n	80075c8 <osSemaphoreNew+0xc>
        if (attr != NULL) {
 8007644:	b95d      	cbnz	r5, 800765e <osSemaphoreNew+0xa2>
        vQueueAddToRegistry (hSemaphore, name);
 8007646:	4629      	mov	r1, r5
 8007648:	4620      	mov	r0, r4
 800764a:	f001 f983 	bl	8008954 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800764e:	e7bc      	b.n	80075ca <osSemaphoreNew+0xe>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007650:	461a      	mov	r2, r3
 8007652:	4631      	mov	r1, r6
 8007654:	f000 fd77 	bl	8008146 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8007658:	4604      	mov	r4, r0
 800765a:	2800      	cmp	r0, #0
 800765c:	d0b4      	beq.n	80075c8 <osSemaphoreNew+0xc>
          name = attr->name;
 800765e:	682d      	ldr	r5, [r5, #0]
 8007660:	e7f1      	b.n	8007646 <osSemaphoreNew+0x8a>
 8007662:	bf00      	nop
 8007664:	200188f0 	.word	0x200188f0

08007668 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007668:	b513      	push	{r0, r1, r4, lr}
 800766a:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800766c:	b918      	cbnz	r0, 8007676 <osSemaphoreAcquire+0xe>
    stat = osErrorParameter;
 800766e:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8007672:	b002      	add	sp, #8
 8007674:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007676:	f3ef 8305 	mrs	r3, IPSR
  else if (IS_IRQ()) {
 800767a:	b163      	cbz	r3, 8007696 <osSemaphoreAcquire+0x2e>
    if (timeout != 0U) {
 800767c:	2c00      	cmp	r4, #0
 800767e:	d1f6      	bne.n	800766e <osSemaphoreAcquire+0x6>
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007680:	aa01      	add	r2, sp, #4
 8007682:	4621      	mov	r1, r4
      yield = pdFALSE;
 8007684:	9401      	str	r4, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007686:	f001 f90f 	bl	80088a8 <xQueueReceiveFromISR>
 800768a:	2801      	cmp	r0, #1
 800768c:	d113      	bne.n	80076b6 <osSemaphoreAcquire+0x4e>
        portYIELD_FROM_ISR (yield);
 800768e:	9b01      	ldr	r3, [sp, #4]
 8007690:	b9a3      	cbnz	r3, 80076bc <osSemaphoreAcquire+0x54>
  stat = osOK;
 8007692:	2000      	movs	r0, #0
 8007694:	e7ed      	b.n	8007672 <osSemaphoreAcquire+0xa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007696:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 800769a:	b913      	cbnz	r3, 80076a2 <osSemaphoreAcquire+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800769c:	f3ef 8311 	mrs	r3, BASEPRI
 80076a0:	b11b      	cbz	r3, 80076aa <osSemaphoreAcquire+0x42>
 80076a2:	4b0c      	ldr	r3, [pc, #48]	; (80076d4 <osSemaphoreAcquire+0x6c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d0e8      	beq.n	800767c <osSemaphoreAcquire+0x14>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80076aa:	4621      	mov	r1, r4
 80076ac:	f001 f80c 	bl	80086c8 <xQueueSemaphoreTake>
 80076b0:	2801      	cmp	r0, #1
 80076b2:	d0ee      	beq.n	8007692 <osSemaphoreAcquire+0x2a>
      if (timeout != 0U) {
 80076b4:	b95c      	cbnz	r4, 80076ce <osSemaphoreAcquire+0x66>
        stat = osErrorResource;
 80076b6:	f06f 0002 	mvn.w	r0, #2
 80076ba:	e7da      	b.n	8007672 <osSemaphoreAcquire+0xa>
        portYIELD_FROM_ISR (yield);
 80076bc:	4b06      	ldr	r3, [pc, #24]	; (80076d8 <osSemaphoreAcquire+0x70>)
 80076be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076c2:	601a      	str	r2, [r3, #0]
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	e7e1      	b.n	8007692 <osSemaphoreAcquire+0x2a>
        stat = osErrorTimeout;
 80076ce:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80076d2:	e7ce      	b.n	8007672 <osSemaphoreAcquire+0xa>
 80076d4:	200188f0 	.word	0x200188f0
 80076d8:	e000ed04 	.word	0xe000ed04

080076dc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80076dc:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80076de:	b360      	cbz	r0, 800773a <osSemaphoreRelease+0x5e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076e0:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80076e4:	b14b      	cbz	r3, 80076fa <osSemaphoreRelease+0x1e>
    yield = pdFALSE;
 80076e6:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80076e8:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 80076ea:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80076ec:	f000 fee9 	bl	80084c2 <xQueueGiveFromISR>
 80076f0:	2801      	cmp	r0, #1
 80076f2:	d014      	beq.n	800771e <osSemaphoreRelease+0x42>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 80076f4:	f06f 0002 	mvn.w	r0, #2
 80076f8:	e014      	b.n	8007724 <osSemaphoreRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076fa:	f3ef 8310 	mrs	r3, PRIMASK
  else if (IS_IRQ()) {
 80076fe:	b913      	cbnz	r3, 8007706 <osSemaphoreRelease+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007700:	f3ef 8311 	mrs	r3, BASEPRI
 8007704:	b11b      	cbz	r3, 800770e <osSemaphoreRelease+0x32>
 8007706:	4b0e      	ldr	r3, [pc, #56]	; (8007740 <osSemaphoreRelease+0x64>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2b02      	cmp	r3, #2
 800770c:	d0eb      	beq.n	80076e6 <osSemaphoreRelease+0xa>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800770e:	2300      	movs	r3, #0
 8007710:	461a      	mov	r2, r3
 8007712:	4619      	mov	r1, r3
 8007714:	f000 fd60 	bl	80081d8 <xQueueGenericSend>
 8007718:	2801      	cmp	r0, #1
 800771a:	d002      	beq.n	8007722 <osSemaphoreRelease+0x46>
 800771c:	e7ea      	b.n	80076f4 <osSemaphoreRelease+0x18>
      portYIELD_FROM_ISR (yield);
 800771e:	9b01      	ldr	r3, [sp, #4]
 8007720:	b913      	cbnz	r3, 8007728 <osSemaphoreRelease+0x4c>
  stat = osOK;
 8007722:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8007724:	b002      	add	sp, #8
 8007726:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 8007728:	4b06      	ldr	r3, [pc, #24]	; (8007744 <osSemaphoreRelease+0x68>)
 800772a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800772e:	601a      	str	r2, [r3, #0]
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	e7f3      	b.n	8007722 <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 800773a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800773e:	e7f1      	b.n	8007724 <osSemaphoreRelease+0x48>
 8007740:	200188f0 	.word	0x200188f0
 8007744:	e000ed04 	.word	0xe000ed04

08007748 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007748:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800774a:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800774c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007750:	b11b      	cbz	r3, 800775a <osMessageQueueNew+0x12>
  hQueue = NULL;
 8007752:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8007754:	4628      	mov	r0, r5
 8007756:	b002      	add	sp, #8
 8007758:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800775a:	f3ef 8310 	mrs	r3, PRIMASK
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800775e:	b913      	cbnz	r3, 8007766 <osMessageQueueNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007760:	f3ef 8311 	mrs	r3, BASEPRI
 8007764:	b11b      	cbz	r3, 800776e <osMessageQueueNew+0x26>
 8007766:	4b1a      	ldr	r3, [pc, #104]	; (80077d0 <osMessageQueueNew+0x88>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2b02      	cmp	r3, #2
 800776c:	d0f1      	beq.n	8007752 <osMessageQueueNew+0xa>
 800776e:	2800      	cmp	r0, #0
 8007770:	d0ef      	beq.n	8007752 <osMessageQueueNew+0xa>
 8007772:	2900      	cmp	r1, #0
 8007774:	d0ed      	beq.n	8007752 <osMessageQueueNew+0xa>
    if (attr != NULL) {
 8007776:	b1ec      	cbz	r4, 80077b4 <osMessageQueueNew+0x6c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007778:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800777c:	b193      	cbz	r3, 80077a4 <osMessageQueueNew+0x5c>
 800777e:	2a4f      	cmp	r2, #79	; 0x4f
 8007780:	d9e7      	bls.n	8007752 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007782:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007784:	2a00      	cmp	r2, #0
 8007786:	d0e4      	beq.n	8007752 <osMessageQueueNew+0xa>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007788:	fb01 f500 	mul.w	r5, r1, r0
 800778c:	6966      	ldr	r6, [r4, #20]
 800778e:	42ae      	cmp	r6, r5
 8007790:	d3df      	bcc.n	8007752 <osMessageQueueNew+0xa>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007792:	2500      	movs	r5, #0
 8007794:	9500      	str	r5, [sp, #0]
 8007796:	f000 fc55 	bl	8008044 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800779a:	4605      	mov	r5, r0
 800779c:	2800      	cmp	r0, #0
 800779e:	d0d8      	beq.n	8007752 <osMessageQueueNew+0xa>
        name = attr->name;
 80077a0:	6824      	ldr	r4, [r4, #0]
 80077a2:	e00f      	b.n	80077c4 <osMessageQueueNew+0x7c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80077a4:	2a00      	cmp	r2, #0
 80077a6:	d1d4      	bne.n	8007752 <osMessageQueueNew+0xa>
 80077a8:	6923      	ldr	r3, [r4, #16]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1d1      	bne.n	8007752 <osMessageQueueNew+0xa>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80077ae:	6963      	ldr	r3, [r4, #20]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1ce      	bne.n	8007752 <osMessageQueueNew+0xa>
        hQueue = xQueueCreate (msg_count, msg_size);
 80077b4:	2200      	movs	r2, #0
 80077b6:	f000 fc9d 	bl	80080f4 <xQueueGenericCreate>
    if (hQueue != NULL) {
 80077ba:	4605      	mov	r5, r0
 80077bc:	2800      	cmp	r0, #0
 80077be:	d0c8      	beq.n	8007752 <osMessageQueueNew+0xa>
      if (attr != NULL) {
 80077c0:	2c00      	cmp	r4, #0
 80077c2:	d1ed      	bne.n	80077a0 <osMessageQueueNew+0x58>
      vQueueAddToRegistry (hQueue, name);
 80077c4:	4621      	mov	r1, r4
 80077c6:	4628      	mov	r0, r5
 80077c8:	f001 f8c4 	bl	8008954 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 80077cc:	e7c2      	b.n	8007754 <osMessageQueueNew+0xc>
 80077ce:	bf00      	nop
 80077d0:	200188f0 	.word	0x200188f0

080077d4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80077d4:	b513      	push	{r0, r1, r4, lr}
 80077d6:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077d8:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80077dc:	b123      	cbz	r3, 80077e8 <osMessageQueuePut+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80077de:	b9d8      	cbnz	r0, 8007818 <osMessageQueuePut+0x44>
      stat = osErrorParameter;
 80077e0:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 80077e4:	b002      	add	sp, #8
 80077e6:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077e8:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 80077ec:	b913      	cbnz	r3, 80077f4 <osMessageQueuePut+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077ee:	f3ef 8311 	mrs	r3, BASEPRI
 80077f2:	b11b      	cbz	r3, 80077fc <osMessageQueuePut+0x28>
 80077f4:	4b16      	ldr	r3, [pc, #88]	; (8007850 <osMessageQueuePut+0x7c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d0f0      	beq.n	80077de <osMessageQueuePut+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80077fc:	2800      	cmp	r0, #0
 80077fe:	d0ef      	beq.n	80077e0 <osMessageQueuePut+0xc>
 8007800:	2900      	cmp	r1, #0
 8007802:	d0ed      	beq.n	80077e0 <osMessageQueuePut+0xc>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007804:	2300      	movs	r3, #0
 8007806:	4622      	mov	r2, r4
 8007808:	f000 fce6 	bl	80081d8 <xQueueGenericSend>
 800780c:	2801      	cmp	r0, #1
 800780e:	d010      	beq.n	8007832 <osMessageQueuePut+0x5e>
        if (timeout != 0U) {
 8007810:	b9d4      	cbnz	r4, 8007848 <osMessageQueuePut+0x74>
          stat = osErrorResource;
 8007812:	f06f 0002 	mvn.w	r0, #2
 8007816:	e7e5      	b.n	80077e4 <osMessageQueuePut+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007818:	2900      	cmp	r1, #0
 800781a:	d0e1      	beq.n	80077e0 <osMessageQueuePut+0xc>
 800781c:	2c00      	cmp	r4, #0
 800781e:	d1df      	bne.n	80077e0 <osMessageQueuePut+0xc>
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007820:	4623      	mov	r3, r4
 8007822:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8007824:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007826:	f000 fde3 	bl	80083f0 <xQueueGenericSendFromISR>
 800782a:	2801      	cmp	r0, #1
 800782c:	d1f1      	bne.n	8007812 <osMessageQueuePut+0x3e>
        portYIELD_FROM_ISR (yield);
 800782e:	9b01      	ldr	r3, [sp, #4]
 8007830:	b90b      	cbnz	r3, 8007836 <osMessageQueuePut+0x62>
  stat = osOK;
 8007832:	2000      	movs	r0, #0
 8007834:	e7d6      	b.n	80077e4 <osMessageQueuePut+0x10>
        portYIELD_FROM_ISR (yield);
 8007836:	4b07      	ldr	r3, [pc, #28]	; (8007854 <osMessageQueuePut+0x80>)
 8007838:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800783c:	601a      	str	r2, [r3, #0]
 800783e:	f3bf 8f4f 	dsb	sy
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	e7f4      	b.n	8007832 <osMessageQueuePut+0x5e>
          stat = osErrorTimeout;
 8007848:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800784c:	e7ca      	b.n	80077e4 <osMessageQueuePut+0x10>
 800784e:	bf00      	nop
 8007850:	200188f0 	.word	0x200188f0
 8007854:	e000ed04 	.word	0xe000ed04

08007858 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007858:	b513      	push	{r0, r1, r4, lr}
 800785a:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800785c:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8007860:	b123      	cbz	r3, 800786c <osMessageQueueGet+0x14>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007862:	b9d0      	cbnz	r0, 800789a <osMessageQueueGet+0x42>
      stat = osErrorParameter;
 8007864:	f06f 0003 	mvn.w	r0, #3
      }
    }
  }

  return (stat);
}
 8007868:	b002      	add	sp, #8
 800786a:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800786c:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8007870:	b913      	cbnz	r3, 8007878 <osMessageQueueGet+0x20>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007872:	f3ef 8311 	mrs	r3, BASEPRI
 8007876:	b11b      	cbz	r3, 8007880 <osMessageQueueGet+0x28>
 8007878:	4b15      	ldr	r3, [pc, #84]	; (80078d0 <osMessageQueueGet+0x78>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b02      	cmp	r3, #2
 800787e:	d0f0      	beq.n	8007862 <osMessageQueueGet+0xa>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007880:	2800      	cmp	r0, #0
 8007882:	d0ef      	beq.n	8007864 <osMessageQueueGet+0xc>
 8007884:	2900      	cmp	r1, #0
 8007886:	d0ed      	beq.n	8007864 <osMessageQueueGet+0xc>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007888:	4622      	mov	r2, r4
 800788a:	f000 fe77 	bl	800857c <xQueueReceive>
 800788e:	2801      	cmp	r0, #1
 8007890:	d00f      	beq.n	80078b2 <osMessageQueueGet+0x5a>
        if (timeout != 0U) {
 8007892:	b9cc      	cbnz	r4, 80078c8 <osMessageQueueGet+0x70>
          stat = osErrorResource;
 8007894:	f06f 0002 	mvn.w	r0, #2
 8007898:	e7e6      	b.n	8007868 <osMessageQueueGet+0x10>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800789a:	2900      	cmp	r1, #0
 800789c:	d0e2      	beq.n	8007864 <osMessageQueueGet+0xc>
 800789e:	2c00      	cmp	r4, #0
 80078a0:	d1e0      	bne.n	8007864 <osMessageQueueGet+0xc>
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80078a2:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80078a4:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80078a6:	f000 ffff 	bl	80088a8 <xQueueReceiveFromISR>
 80078aa:	2801      	cmp	r0, #1
 80078ac:	d1f2      	bne.n	8007894 <osMessageQueueGet+0x3c>
        portYIELD_FROM_ISR (yield);
 80078ae:	9b01      	ldr	r3, [sp, #4]
 80078b0:	b90b      	cbnz	r3, 80078b6 <osMessageQueueGet+0x5e>
  stat = osOK;
 80078b2:	2000      	movs	r0, #0
 80078b4:	e7d8      	b.n	8007868 <osMessageQueueGet+0x10>
        portYIELD_FROM_ISR (yield);
 80078b6:	4b07      	ldr	r3, [pc, #28]	; (80078d4 <osMessageQueueGet+0x7c>)
 80078b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078bc:	601a      	str	r2, [r3, #0]
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	e7f4      	b.n	80078b2 <osMessageQueueGet+0x5a>
          stat = osErrorTimeout;
 80078c8:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80078cc:	e7cc      	b.n	8007868 <osMessageQueueGet+0x10>
 80078ce:	bf00      	nop
 80078d0:	200188f0 	.word	0x200188f0
 80078d4:	e000ed04 	.word	0xe000ed04

080078d8 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80078d8:	4b03      	ldr	r3, [pc, #12]	; (80078e8 <vApplicationGetIdleTaskMemory+0x10>)
 80078da:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80078dc:	4b03      	ldr	r3, [pc, #12]	; (80078ec <vApplicationGetIdleTaskMemory+0x14>)
 80078de:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80078e0:	2380      	movs	r3, #128	; 0x80
 80078e2:	6013      	str	r3, [r2, #0]
}
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	20018890 	.word	0x20018890
 80078ec:	20018690 	.word	0x20018690

080078f0 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80078f0:	4b03      	ldr	r3, [pc, #12]	; (8007900 <vApplicationGetTimerTaskMemory+0x10>)
 80078f2:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80078f4:	4b03      	ldr	r3, [pc, #12]	; (8007904 <vApplicationGetTimerTaskMemory+0x14>)
 80078f6:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80078f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078fc:	6013      	str	r3, [r2, #0]
}
 80078fe:	4770      	bx	lr
 8007900:	20018cf4 	.word	0x20018cf4
 8007904:	200188f4 	.word	0x200188f4

08007908 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007908:	4b0f      	ldr	r3, [pc, #60]	; (8007948 <prvInsertBlockIntoFreeList+0x40>)
{
 800790a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800790c:	461a      	mov	r2, r3
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4283      	cmp	r3, r0
 8007912:	d3fb      	bcc.n	800790c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007914:	6854      	ldr	r4, [r2, #4]
 8007916:	1911      	adds	r1, r2, r4
 8007918:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800791a:	bf01      	itttt	eq
 800791c:	6841      	ldreq	r1, [r0, #4]
 800791e:	4610      	moveq	r0, r2
 8007920:	1909      	addeq	r1, r1, r4
 8007922:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007924:	6844      	ldr	r4, [r0, #4]
 8007926:	1901      	adds	r1, r0, r4
 8007928:	428b      	cmp	r3, r1
 800792a:	d107      	bne.n	800793c <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800792c:	4907      	ldr	r1, [pc, #28]	; (800794c <prvInsertBlockIntoFreeList+0x44>)
 800792e:	6809      	ldr	r1, [r1, #0]
 8007930:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007932:	bf1f      	itttt	ne
 8007934:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007936:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007938:	1909      	addne	r1, r1, r4
 800793a:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800793c:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800793e:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007940:	bf18      	it	ne
 8007942:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007944:	bd10      	pop	{r4, pc}
 8007946:	bf00      	nop
 8007948:	2002b25c 	.word	0x2002b25c
 800794c:	20018d54 	.word	0x20018d54

08007950 <pvPortMalloc>:
{
 8007950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007954:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007956:	f001 fa39 	bl	8008dcc <vTaskSuspendAll>
		if( pxEnd == NULL )
 800795a:	4b3d      	ldr	r3, [pc, #244]	; (8007a50 <pvPortMalloc+0x100>)
 800795c:	483d      	ldr	r0, [pc, #244]	; (8007a54 <pvPortMalloc+0x104>)
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	469c      	mov	ip, r3
 8007962:	b9d2      	cbnz	r2, 800799a <pvPortMalloc+0x4a>
	uxAddress = ( size_t ) ucHeap;
 8007964:	4a3c      	ldr	r2, [pc, #240]	; (8007a58 <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 8007966:	2100      	movs	r1, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007968:	4b3c      	ldr	r3, [pc, #240]	; (8007a5c <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800796a:	0755      	lsls	r5, r2, #29
	xStart.xBlockSize = ( size_t ) 0;
 800796c:	6059      	str	r1, [r3, #4]
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800796e:	bf1c      	itt	ne
 8007970:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007972:	f022 0207 	bicne.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007976:	601a      	str	r2, [r3, #0]
	uxAddress -= xHeapStructSize;
 8007978:	4b39      	ldr	r3, [pc, #228]	; (8007a60 <pvPortMalloc+0x110>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800797a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800797e:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007982:	1a99      	subs	r1, r3, r2
	pxEnd = ( void * ) uxAddress;
 8007984:	f8cc 3000 	str.w	r3, [ip]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007988:	e9c2 3100 	strd	r3, r1, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800798c:	4b35      	ldr	r3, [pc, #212]	; (8007a64 <pvPortMalloc+0x114>)
 800798e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007990:	4b35      	ldr	r3, [pc, #212]	; (8007a68 <pvPortMalloc+0x118>)
 8007992:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007994:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007998:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800799a:	6807      	ldr	r7, [r0, #0]
 800799c:	4227      	tst	r7, r4
 800799e:	d152      	bne.n	8007a46 <pvPortMalloc+0xf6>
			if( xWantedSize > 0 )
 80079a0:	2c00      	cmp	r4, #0
 80079a2:	d041      	beq.n	8007a28 <pvPortMalloc+0xd8>
				xWantedSize += xHeapStructSize;
 80079a4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80079a8:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80079aa:	bf1c      	itt	ne
 80079ac:	f023 0307 	bicne.w	r3, r3, #7
 80079b0:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d047      	beq.n	8007a46 <pvPortMalloc+0xf6>
 80079b6:	4a2c      	ldr	r2, [pc, #176]	; (8007a68 <pvPortMalloc+0x118>)
 80079b8:	6816      	ldr	r6, [r2, #0]
 80079ba:	4690      	mov	r8, r2
 80079bc:	429e      	cmp	r6, r3
 80079be:	d342      	bcc.n	8007a46 <pvPortMalloc+0xf6>
				pxBlock = xStart.pxNextFreeBlock;
 80079c0:	4a26      	ldr	r2, [pc, #152]	; (8007a5c <pvPortMalloc+0x10c>)
 80079c2:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80079c4:	6869      	ldr	r1, [r5, #4]
 80079c6:	4299      	cmp	r1, r3
 80079c8:	d201      	bcs.n	80079ce <pvPortMalloc+0x7e>
 80079ca:	6828      	ldr	r0, [r5, #0]
 80079cc:	b9b8      	cbnz	r0, 80079fe <pvPortMalloc+0xae>
				if( pxBlock != pxEnd )
 80079ce:	f8dc 0000 	ldr.w	r0, [ip]
 80079d2:	42a8      	cmp	r0, r5
 80079d4:	d037      	beq.n	8007a46 <pvPortMalloc+0xf6>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079d6:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079d8:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80079da:	6814      	ldr	r4, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079dc:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80079de:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80079e0:	d914      	bls.n	8007a0c <pvPortMalloc+0xbc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80079e2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80079e4:	0742      	lsls	r2, r0, #29
 80079e6:	d00d      	beq.n	8007a04 <pvPortMalloc+0xb4>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80079e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ec:	b672      	cpsid	i
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	b662      	cpsie	i
 80079fc:	e7fe      	b.n	80079fc <pvPortMalloc+0xac>
 80079fe:	462a      	mov	r2, r5
 8007a00:	4605      	mov	r5, r0
 8007a02:	e7df      	b.n	80079c4 <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007a04:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007a06:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007a08:	f7ff ff7e 	bl	8007908 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a0c:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a0e:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a10:	4914      	ldr	r1, [pc, #80]	; (8007a64 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a12:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a14:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a16:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8007a18:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007a1a:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007a1e:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007a20:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007a22:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007a24:	bf38      	it	cc
 8007a26:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8007a28:	f001 fa76 	bl	8008f18 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a2c:	0763      	lsls	r3, r4, #29
 8007a2e:	d00c      	beq.n	8007a4a <pvPortMalloc+0xfa>
 8007a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a34:	b672      	cpsid	i
 8007a36:	f383 8811 	msr	BASEPRI, r3
 8007a3a:	f3bf 8f6f 	isb	sy
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	b662      	cpsie	i
 8007a44:	e7fe      	b.n	8007a44 <pvPortMalloc+0xf4>
void *pvReturn = NULL;
 8007a46:	2400      	movs	r4, #0
 8007a48:	e7ee      	b.n	8007a28 <pvPortMalloc+0xd8>
}
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a50:	20018d54 	.word	0x20018d54
 8007a54:	2002b250 	.word	0x2002b250
 8007a58:	20018d58 	.word	0x20018d58
 8007a5c:	2002b25c 	.word	0x2002b25c
 8007a60:	2002b248 	.word	0x2002b248
 8007a64:	2002b258 	.word	0x2002b258
 8007a68:	2002b254 	.word	0x2002b254

08007a6c <vPortFree>:
{
 8007a6c:	b510      	push	{r4, lr}
	if( pv != NULL )
 8007a6e:	4604      	mov	r4, r0
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d032      	beq.n	8007ada <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a74:	4a19      	ldr	r2, [pc, #100]	; (8007adc <vPortFree+0x70>)
 8007a76:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007a7a:	6812      	ldr	r2, [r2, #0]
 8007a7c:	4213      	tst	r3, r2
 8007a7e:	d10a      	bne.n	8007a96 <vPortFree+0x2a>
 8007a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a84:	b672      	cpsid	i
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	b662      	cpsie	i
 8007a94:	e7fe      	b.n	8007a94 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a96:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007a9a:	b151      	cbz	r1, 8007ab2 <vPortFree+0x46>
 8007a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa0:	b672      	cpsid	i
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	b662      	cpsie	i
 8007ab0:	e7fe      	b.n	8007ab0 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ab2:	ea23 0302 	bic.w	r3, r3, r2
 8007ab6:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007aba:	f001 f987 	bl	8008dcc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007abe:	4a08      	ldr	r2, [pc, #32]	; (8007ae0 <vPortFree+0x74>)
 8007ac0:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ac4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ac8:	6811      	ldr	r1, [r2, #0]
 8007aca:	440b      	add	r3, r1
 8007acc:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ace:	f7ff ff1b 	bl	8007908 <prvInsertBlockIntoFreeList>
}
 8007ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8007ad6:	f001 ba1f 	b.w	8008f18 <xTaskResumeAll>
}
 8007ada:	bd10      	pop	{r4, pc}
 8007adc:	2002b250 	.word	0x2002b250
 8007ae0:	2002b254 	.word	0x2002b254

08007ae4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ae4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007ae8:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007aec:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007aee:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007af0:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007af8:	4770      	bx	lr

08007afa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007afa:	2300      	movs	r3, #0
 8007afc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007afe:	4770      	bx	lr

08007b00 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b00:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b02:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8007b04:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b06:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b08:	689a      	ldr	r2, [r3, #8]
 8007b0a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b0c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007b0e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007b10:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007b12:	3301      	adds	r3, #1
 8007b14:	6003      	str	r3, [r0, #0]
}
 8007b16:	4770      	bx	lr

08007b18 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b18:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b1a:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007b1c:	1c63      	adds	r3, r4, #1
 8007b1e:	d10a      	bne.n	8007b36 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007b20:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007b26:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b28:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b2a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007b2c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007b2e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007b30:	3301      	adds	r3, #1
 8007b32:	6003      	str	r3, [r0, #0]
}
 8007b34:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007b36:	f100 0208 	add.w	r2, r0, #8
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	6852      	ldr	r2, [r2, #4]
 8007b3e:	6815      	ldr	r5, [r2, #0]
 8007b40:	42a5      	cmp	r5, r4
 8007b42:	d9fa      	bls.n	8007b3a <vListInsert+0x22>
 8007b44:	e7ed      	b.n	8007b22 <vListInsert+0xa>

08007b46 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b46:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b48:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8007b4c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b4e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b50:	6859      	ldr	r1, [r3, #4]
 8007b52:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007b54:	bf08      	it	eq
 8007b56:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007b58:	2200      	movs	r2, #0
 8007b5a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	3a01      	subs	r2, #1
 8007b60:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007b62:	6818      	ldr	r0, [r3, #0]
}
 8007b64:	4770      	bx	lr
	...

08007b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b68:	4808      	ldr	r0, [pc, #32]	; (8007b8c <prvPortStartFirstTask+0x24>)
 8007b6a:	6800      	ldr	r0, [r0, #0]
 8007b6c:	6800      	ldr	r0, [r0, #0]
 8007b6e:	f380 8808 	msr	MSP, r0
 8007b72:	f04f 0000 	mov.w	r0, #0
 8007b76:	f380 8814 	msr	CONTROL, r0
 8007b7a:	b662      	cpsie	i
 8007b7c:	b661      	cpsie	f
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	df00      	svc	0
 8007b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b8a:	0000      	.short	0x0000
 8007b8c:	e000ed08 	.word	0xe000ed08

08007b90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ba0 <vPortEnableVFP+0x10>
 8007b94:	6801      	ldr	r1, [r0, #0]
 8007b96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b9a:	6001      	str	r1, [r0, #0]
 8007b9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007b9e:	0000      	.short	0x0000
 8007ba0:	e000ed88 	.word	0xe000ed88

08007ba4 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8007ba4:	2300      	movs	r3, #0
{
 8007ba6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8007ba8:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8007baa:	4b0f      	ldr	r3, [pc, #60]	; (8007be8 <prvTaskExitError+0x44>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	d00a      	beq.n	8007bc8 <prvTaskExitError+0x24>
 8007bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb6:	b672      	cpsid	i
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
 8007bc4:	b662      	cpsie	i
 8007bc6:	e7fe      	b.n	8007bc6 <prvTaskExitError+0x22>
 8007bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bcc:	b672      	cpsid	i
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	b662      	cpsie	i
	while( ulDummy == 0 )
 8007bdc:	9b01      	ldr	r3, [sp, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d0fc      	beq.n	8007bdc <prvTaskExitError+0x38>
}
 8007be2:	b002      	add	sp, #8
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	20000040 	.word	0x20000040

08007bec <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007bec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007bf0:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007bf4:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8007bf8:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007bfa:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007bfc:	4b03      	ldr	r3, [pc, #12]	; (8007c0c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007bfe:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c00:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c02:	f06f 0302 	mvn.w	r3, #2
 8007c06:	6203      	str	r3, [r0, #32]
}
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	08007ba5 	.word	0x08007ba5

08007c10 <SVC_Handler>:
	__asm volatile (
 8007c10:	4b07      	ldr	r3, [pc, #28]	; (8007c30 <pxCurrentTCBConst2>)
 8007c12:	6819      	ldr	r1, [r3, #0]
 8007c14:	6808      	ldr	r0, [r1, #0]
 8007c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1a:	f380 8809 	msr	PSP, r0
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	f04f 0000 	mov.w	r0, #0
 8007c26:	f380 8811 	msr	BASEPRI, r0
 8007c2a:	4770      	bx	lr
 8007c2c:	f3af 8000 	nop.w

08007c30 <pxCurrentTCBConst2>:
 8007c30:	2002b26c 	.word	0x2002b26c

08007c34 <vPortEnterCritical>:
 8007c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c38:	b672      	cpsid	i
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	b662      	cpsie	i
	uxCriticalNesting++;
 8007c48:	4a0b      	ldr	r2, [pc, #44]	; (8007c78 <vPortEnterCritical+0x44>)
 8007c4a:	6813      	ldr	r3, [r2, #0]
 8007c4c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8007c4e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8007c50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8007c52:	d10f      	bne.n	8007c74 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c54:	4b09      	ldr	r3, [pc, #36]	; (8007c7c <vPortEnterCritical+0x48>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007c5c:	d00a      	beq.n	8007c74 <vPortEnterCritical+0x40>
 8007c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c62:	b672      	cpsid	i
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	b662      	cpsie	i
 8007c72:	e7fe      	b.n	8007c72 <vPortEnterCritical+0x3e>
}
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	20000040 	.word	0x20000040
 8007c7c:	e000ed04 	.word	0xe000ed04

08007c80 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007c80:	4a09      	ldr	r2, [pc, #36]	; (8007ca8 <vPortExitCritical+0x28>)
 8007c82:	6813      	ldr	r3, [r2, #0]
 8007c84:	b953      	cbnz	r3, 8007c9c <vPortExitCritical+0x1c>
 8007c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8a:	b672      	cpsid	i
 8007c8c:	f383 8811 	msr	BASEPRI, r3
 8007c90:	f3bf 8f6f 	isb	sy
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	b662      	cpsie	i
 8007c9a:	e7fe      	b.n	8007c9a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ca0:	b90b      	cbnz	r3, 8007ca6 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ca2:	f383 8811 	msr	BASEPRI, r3
}
 8007ca6:	4770      	bx	lr
 8007ca8:	20000040 	.word	0x20000040
 8007cac:	00000000 	.word	0x00000000

08007cb0 <PendSV_Handler>:
	__asm volatile
 8007cb0:	f3ef 8009 	mrs	r0, PSP
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	4b15      	ldr	r3, [pc, #84]	; (8007d10 <pxCurrentTCBConst>)
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	f01e 0f10 	tst.w	lr, #16
 8007cc0:	bf08      	it	eq
 8007cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cca:	6010      	str	r0, [r2, #0]
 8007ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007cd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007cd4:	b672      	cpsid	i
 8007cd6:	f380 8811 	msr	BASEPRI, r0
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	b662      	cpsie	i
 8007ce4:	f001 fa1e 	bl	8009124 <vTaskSwitchContext>
 8007ce8:	f04f 0000 	mov.w	r0, #0
 8007cec:	f380 8811 	msr	BASEPRI, r0
 8007cf0:	bc09      	pop	{r0, r3}
 8007cf2:	6819      	ldr	r1, [r3, #0]
 8007cf4:	6808      	ldr	r0, [r1, #0]
 8007cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cfa:	f01e 0f10 	tst.w	lr, #16
 8007cfe:	bf08      	it	eq
 8007d00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d04:	f380 8809 	msr	PSP, r0
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop

08007d10 <pxCurrentTCBConst>:
 8007d10:	2002b26c 	.word	0x2002b26c

08007d14 <SysTick_Handler>:
{
 8007d14:	b508      	push	{r3, lr}
	__asm volatile
 8007d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1a:	b672      	cpsid	i
 8007d1c:	f383 8811 	msr	BASEPRI, r3
 8007d20:	f3bf 8f6f 	isb	sy
 8007d24:	f3bf 8f4f 	dsb	sy
 8007d28:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8007d2a:	f001 f85d 	bl	8008de8 <xTaskIncrementTick>
 8007d2e:	b118      	cbz	r0, 8007d38 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d30:	4b03      	ldr	r3, [pc, #12]	; (8007d40 <SysTick_Handler+0x2c>)
 8007d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d36:	601a      	str	r2, [r3, #0]
	__asm volatile
 8007d38:	2300      	movs	r3, #0
 8007d3a:	f383 8811 	msr	BASEPRI, r3
}
 8007d3e:	bd08      	pop	{r3, pc}
 8007d40:	e000ed04 	.word	0xe000ed04

08007d44 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d44:	2300      	movs	r3, #0
 8007d46:	4a08      	ldr	r2, [pc, #32]	; (8007d68 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d48:	4908      	ldr	r1, [pc, #32]	; (8007d6c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d4c:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007d52:	4b07      	ldr	r3, [pc, #28]	; (8007d70 <vPortSetupTimerInterrupt+0x2c>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d5a:	4906      	ldr	r1, [pc, #24]	; (8007d74 <vPortSetupTimerInterrupt+0x30>)
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d60:	2307      	movs	r3, #7
 8007d62:	6013      	str	r3, [r2, #0]
}
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	e000e010 	.word	0xe000e010
 8007d6c:	e000e018 	.word	0xe000e018
 8007d70:	2000000c 	.word	0x2000000c
 8007d74:	e000e014 	.word	0xe000e014

08007d78 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d78:	4b2b      	ldr	r3, [pc, #172]	; (8007e28 <xPortStartScheduler+0xb0>)
{
 8007d7a:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d7c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d7e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d80:	b2d2      	uxtb	r2, r2
 8007d82:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d84:	22ff      	movs	r2, #255	; 0xff
 8007d86:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d88:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d8a:	4a28      	ldr	r2, [pc, #160]	; (8007e2c <xPortStartScheduler+0xb4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d92:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007d96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d9a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d9c:	2307      	movs	r3, #7
 8007d9e:	4a24      	ldr	r2, [pc, #144]	; (8007e30 <xPortStartScheduler+0xb8>)
 8007da0:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007da2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8007da6:	1e5c      	subs	r4, r3, #1
 8007da8:	0600      	lsls	r0, r0, #24
 8007daa:	d40e      	bmi.n	8007dca <xPortStartScheduler+0x52>
 8007dac:	b111      	cbz	r1, 8007db4 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007dae:	2b03      	cmp	r3, #3
 8007db0:	6013      	str	r3, [r2, #0]
 8007db2:	d013      	beq.n	8007ddc <xPortStartScheduler+0x64>
	__asm volatile
 8007db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db8:	b672      	cpsid	i
 8007dba:	f383 8811 	msr	BASEPRI, r3
 8007dbe:	f3bf 8f6f 	isb	sy
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	b662      	cpsie	i
 8007dc8:	e7fe      	b.n	8007dc8 <xPortStartScheduler+0x50>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007dca:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8007dce:	2101      	movs	r1, #1
 8007dd0:	005b      	lsls	r3, r3, #1
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	f88d 3003 	strb.w	r3, [sp, #3]
 8007dd8:	4623      	mov	r3, r4
 8007dda:	e7e2      	b.n	8007da2 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ddc:	f44f 7340 	mov.w	r3, #768	; 0x300
	uxCriticalNesting = 0;
 8007de0:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007de2:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007de4:	9b01      	ldr	r3, [sp, #4]
 8007de6:	4a10      	ldr	r2, [pc, #64]	; (8007e28 <xPortStartScheduler+0xb0>)
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007dec:	4b11      	ldr	r3, [pc, #68]	; (8007e34 <xPortStartScheduler+0xbc>)
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8007df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8007dfc:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8007dfe:	f7ff ffa1 	bl	8007d44 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007e02:	4b0d      	ldr	r3, [pc, #52]	; (8007e38 <xPortStartScheduler+0xc0>)
 8007e04:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8007e06:	f7ff fec3 	bl	8007b90 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007e0a:	4a0c      	ldr	r2, [pc, #48]	; (8007e3c <xPortStartScheduler+0xc4>)
 8007e0c:	6813      	ldr	r3, [r2, #0]
 8007e0e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007e12:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8007e14:	f7ff fea8 	bl	8007b68 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007e18:	f001 f984 	bl	8009124 <vTaskSwitchContext>
	prvTaskExitError();
 8007e1c:	f7ff fec2 	bl	8007ba4 <prvTaskExitError>
}
 8007e20:	4620      	mov	r0, r4
 8007e22:	b002      	add	sp, #8
 8007e24:	bd10      	pop	{r4, pc}
 8007e26:	bf00      	nop
 8007e28:	e000e400 	.word	0xe000e400
 8007e2c:	2002b264 	.word	0x2002b264
 8007e30:	2002b268 	.word	0x2002b268
 8007e34:	e000ed20 	.word	0xe000ed20
 8007e38:	20000040 	.word	0x20000040
 8007e3c:	e000ef34 	.word	0xe000ef34

08007e40 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e40:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e44:	2b0f      	cmp	r3, #15
 8007e46:	d910      	bls.n	8007e6a <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e48:	4a12      	ldr	r2, [pc, #72]	; (8007e94 <vPortValidateInterruptPriority+0x54>)
 8007e4a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e4c:	4a12      	ldr	r2, [pc, #72]	; (8007e98 <vPortValidateInterruptPriority+0x58>)
 8007e4e:	7812      	ldrb	r2, [r2, #0]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d90a      	bls.n	8007e6a <vPortValidateInterruptPriority+0x2a>
 8007e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e58:	b672      	cpsid	i
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	b662      	cpsie	i
 8007e68:	e7fe      	b.n	8007e68 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e6a:	4b0c      	ldr	r3, [pc, #48]	; (8007e9c <vPortValidateInterruptPriority+0x5c>)
 8007e6c:	4a0c      	ldr	r2, [pc, #48]	; (8007ea0 <vPortValidateInterruptPriority+0x60>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6812      	ldr	r2, [r2, #0]
 8007e72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d90a      	bls.n	8007e90 <vPortValidateInterruptPriority+0x50>
 8007e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7e:	b672      	cpsid	i
 8007e80:	f383 8811 	msr	BASEPRI, r3
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	b662      	cpsie	i
 8007e8e:	e7fe      	b.n	8007e8e <vPortValidateInterruptPriority+0x4e>
	}
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	e000e3f0 	.word	0xe000e3f0
 8007e98:	2002b264 	.word	0x2002b264
 8007e9c:	e000ed0c 	.word	0xe000ed0c
 8007ea0:	2002b268 	.word	0x2002b268

08007ea4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ea4:	b510      	push	{r4, lr}
 8007ea6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ea8:	f7ff fec4 	bl	8007c34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007eac:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007eae:	f7ff fee7 	bl	8007c80 <vPortExitCritical>

	return xReturn;
}
 8007eb2:	fab4 f084 	clz	r0, r4
 8007eb6:	0940      	lsrs	r0, r0, #5
 8007eb8:	bd10      	pop	{r4, pc}

08007eba <prvCopyDataToQueue>:
{
 8007eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ebc:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ebe:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8007ec0:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ec2:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ec4:	b952      	cbnz	r2, 8007edc <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ec6:	6807      	ldr	r7, [r0, #0]
 8007ec8:	bb47      	cbnz	r7, 8007f1c <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007eca:	6880      	ldr	r0, [r0, #8]
 8007ecc:	f001 fa9e 	bl	800940c <xTaskPriorityDisinherit>
 8007ed0:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ed2:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ed4:	3601      	adds	r6, #1
}
 8007ed6:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ed8:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8007eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007edc:	b965      	cbnz	r5, 8007ef8 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ede:	6840      	ldr	r0, [r0, #4]
 8007ee0:	f022 f838 	bl	8029f54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ee4:	6863      	ldr	r3, [r4, #4]
 8007ee6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007ee8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007eea:	68a2      	ldr	r2, [r4, #8]
 8007eec:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007eee:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ef0:	d3f0      	bcc.n	8007ed4 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ef2:	6823      	ldr	r3, [r4, #0]
 8007ef4:	6063      	str	r3, [r4, #4]
 8007ef6:	e7ed      	b.n	8007ed4 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ef8:	68c0      	ldr	r0, [r0, #12]
 8007efa:	f022 f82b 	bl	8029f54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007efe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007f00:	68e3      	ldr	r3, [r4, #12]
 8007f02:	4251      	negs	r1, r2
 8007f04:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f06:	6822      	ldr	r2, [r4, #0]
 8007f08:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007f0a:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007f0c:	bf3e      	ittt	cc
 8007f0e:	68a3      	ldrcc	r3, [r4, #8]
 8007f10:	185b      	addcc	r3, r3, r1
 8007f12:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007f14:	2d02      	cmp	r5, #2
 8007f16:	d101      	bne.n	8007f1c <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f18:	b116      	cbz	r6, 8007f20 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8007f1a:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8007f1c:	2500      	movs	r5, #0
 8007f1e:	e7d9      	b.n	8007ed4 <prvCopyDataToQueue+0x1a>
 8007f20:	4635      	mov	r5, r6
 8007f22:	e7d7      	b.n	8007ed4 <prvCopyDataToQueue+0x1a>

08007f24 <prvCopyDataFromQueue>:
{
 8007f24:	4603      	mov	r3, r0
 8007f26:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8007f2a:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f2c:	b162      	cbz	r2, 8007f48 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f2e:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f30:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f32:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f34:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f36:	60dc      	str	r4, [r3, #12]
}
 8007f38:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007f3c:	bf24      	itt	cs
 8007f3e:	6819      	ldrcs	r1, [r3, #0]
 8007f40:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f42:	68d9      	ldr	r1, [r3, #12]
 8007f44:	f022 b806 	b.w	8029f54 <memcpy>
}
 8007f48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <prvUnlockQueue>:
{
 8007f4e:	b570      	push	{r4, r5, r6, lr}
 8007f50:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007f52:	f7ff fe6f 	bl	8007c34 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007f56:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f5a:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8007f5e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f60:	2d00      	cmp	r5, #0
 8007f62:	dc14      	bgt.n	8007f8e <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8007f64:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f66:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8007f6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007f6e:	f7ff fe87 	bl	8007c80 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007f72:	f7ff fe5f 	bl	8007c34 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007f76:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8007f7a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f7c:	2d00      	cmp	r5, #0
 8007f7e:	dc12      	bgt.n	8007fa6 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8007f80:	23ff      	movs	r3, #255	; 0xff
 8007f82:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8007f86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007f8a:	f7ff be79 	b.w	8007c80 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d0e7      	beq.n	8007f64 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f94:	4630      	mov	r0, r6
 8007f96:	f001 f949 	bl	800922c <xTaskRemoveFromEventList>
 8007f9a:	b108      	cbz	r0, 8007fa0 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8007f9c:	f001 f9d8 	bl	8009350 <vTaskMissedYield>
			--cTxLock;
 8007fa0:	3d01      	subs	r5, #1
 8007fa2:	b26d      	sxtb	r5, r5
 8007fa4:	e7dc      	b.n	8007f60 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fa6:	6923      	ldr	r3, [r4, #16]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d0e9      	beq.n	8007f80 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fac:	4630      	mov	r0, r6
 8007fae:	f001 f93d 	bl	800922c <xTaskRemoveFromEventList>
 8007fb2:	b108      	cbz	r0, 8007fb8 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8007fb4:	f001 f9cc 	bl	8009350 <vTaskMissedYield>
				--cRxLock;
 8007fb8:	3d01      	subs	r5, #1
 8007fba:	b26d      	sxtb	r5, r5
 8007fbc:	e7de      	b.n	8007f7c <prvUnlockQueue+0x2e>
	...

08007fc0 <xQueueGenericReset>:
{
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	b950      	cbnz	r0, 8007fde <xQueueGenericReset+0x1e>
 8007fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fcc:	b672      	cpsid	i
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	b662      	cpsie	i
 8007fdc:	e7fe      	b.n	8007fdc <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8007fde:	f7ff fe29 	bl	8007c34 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fe2:	6822      	ldr	r2, [r4, #0]
 8007fe4:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fe8:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fea:	434b      	muls	r3, r1
 8007fec:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fee:	1a5b      	subs	r3, r3, r1
 8007ff0:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ff2:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ff4:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ff6:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ff8:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ffa:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8007ffc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008000:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8008004:	b995      	cbnz	r5, 800802c <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008006:	6923      	ldr	r3, [r4, #16]
 8008008:	b163      	cbz	r3, 8008024 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800800a:	f104 0010 	add.w	r0, r4, #16
 800800e:	f001 f90d 	bl	800922c <xTaskRemoveFromEventList>
 8008012:	b138      	cbz	r0, 8008024 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8008014:	4b0a      	ldr	r3, [pc, #40]	; (8008040 <xQueueGenericReset+0x80>)
 8008016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8008024:	f7ff fe2c 	bl	8007c80 <vPortExitCritical>
}
 8008028:	2001      	movs	r0, #1
 800802a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800802c:	f104 0010 	add.w	r0, r4, #16
 8008030:	f7ff fd58 	bl	8007ae4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008034:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008038:	f7ff fd54 	bl	8007ae4 <vListInitialise>
 800803c:	e7f2      	b.n	8008024 <xQueueGenericReset+0x64>
 800803e:	bf00      	nop
 8008040:	e000ed04 	.word	0xe000ed04

08008044 <xQueueGenericCreateStatic>:
	{
 8008044:	b513      	push	{r0, r1, r4, lr}
 8008046:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008048:	b950      	cbnz	r0, 8008060 <xQueueGenericCreateStatic+0x1c>
 800804a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804e:	b672      	cpsid	i
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	b662      	cpsie	i
 800805e:	e7fe      	b.n	800805e <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8008060:	b953      	cbnz	r3, 8008078 <xQueueGenericCreateStatic+0x34>
 8008062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008066:	b672      	cpsid	i
 8008068:	f383 8811 	msr	BASEPRI, r3
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	b662      	cpsie	i
 8008076:	e7fe      	b.n	8008076 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008078:	b15a      	cbz	r2, 8008092 <xQueueGenericCreateStatic+0x4e>
 800807a:	b9b1      	cbnz	r1, 80080aa <xQueueGenericCreateStatic+0x66>
 800807c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008080:	b672      	cpsid	i
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	b662      	cpsie	i
 8008090:	e7fe      	b.n	8008090 <xQueueGenericCreateStatic+0x4c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008092:	b151      	cbz	r1, 80080aa <xQueueGenericCreateStatic+0x66>
 8008094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008098:	b672      	cpsid	i
 800809a:	f383 8811 	msr	BASEPRI, r3
 800809e:	f3bf 8f6f 	isb	sy
 80080a2:	f3bf 8f4f 	dsb	sy
 80080a6:	b662      	cpsie	i
 80080a8:	e7fe      	b.n	80080a8 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80080aa:	2350      	movs	r3, #80	; 0x50
 80080ac:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80080ae:	9b01      	ldr	r3, [sp, #4]
 80080b0:	2b50      	cmp	r3, #80	; 0x50
 80080b2:	d00a      	beq.n	80080ca <xQueueGenericCreateStatic+0x86>
 80080b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b8:	b672      	cpsid	i
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	b662      	cpsie	i
 80080c8:	e7fe      	b.n	80080c8 <xQueueGenericCreateStatic+0x84>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80080ca:	2900      	cmp	r1, #0
 80080cc:	bf08      	it	eq
 80080ce:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80080d0:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80080d2:	2301      	movs	r3, #1
 80080d4:	6022      	str	r2, [r4, #0]
 80080d6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 80080da:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80080de:	4619      	mov	r1, r3
 80080e0:	4620      	mov	r0, r4
 80080e2:	f7ff ff6d 	bl	8007fc0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80080e6:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 80080ea:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80080ec:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 80080f0:	b002      	add	sp, #8
 80080f2:	bd10      	pop	{r4, pc}

080080f4 <xQueueGenericCreate>:
	{
 80080f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f6:	460d      	mov	r5, r1
 80080f8:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80080fa:	4606      	mov	r6, r0
 80080fc:	b950      	cbnz	r0, 8008114 <xQueueGenericCreate+0x20>
 80080fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008102:	b672      	cpsid	i
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	b662      	cpsie	i
 8008112:	e7fe      	b.n	8008112 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008114:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008116:	3050      	adds	r0, #80	; 0x50
 8008118:	f7ff fc1a 	bl	8007950 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800811c:	4604      	mov	r4, r0
 800811e:	b170      	cbz	r0, 800813e <xQueueGenericCreate+0x4a>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008120:	2300      	movs	r3, #0
 8008122:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008126:	b165      	cbz	r5, 8008142 <xQueueGenericCreate+0x4e>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008128:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800812c:	2101      	movs	r1, #1
 800812e:	4620      	mov	r0, r4
 8008130:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8008132:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008136:	f7ff ff43 	bl	8007fc0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800813a:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800813e:	4620      	mov	r0, r4
 8008140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008142:	4603      	mov	r3, r0
 8008144:	e7f2      	b.n	800812c <xQueueGenericCreate+0x38>

08008146 <xQueueCreateCountingSemaphoreStatic>:
	{
 8008146:	b513      	push	{r0, r1, r4, lr}
 8008148:	4613      	mov	r3, r2
 800814a:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800814c:	b950      	cbnz	r0, 8008164 <xQueueCreateCountingSemaphoreStatic+0x1e>
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	b672      	cpsid	i
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	b662      	cpsie	i
 8008162:	e7fe      	b.n	8008162 <xQueueCreateCountingSemaphoreStatic+0x1c>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008164:	4288      	cmp	r0, r1
 8008166:	d20a      	bcs.n	800817e <xQueueCreateCountingSemaphoreStatic+0x38>
 8008168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816c:	b672      	cpsid	i
 800816e:	f383 8811 	msr	BASEPRI, r3
 8008172:	f3bf 8f6f 	isb	sy
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	b662      	cpsie	i
 800817c:	e7fe      	b.n	800817c <xQueueCreateCountingSemaphoreStatic+0x36>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800817e:	2202      	movs	r2, #2
 8008180:	9200      	str	r2, [sp, #0]
 8008182:	2200      	movs	r2, #0
 8008184:	4611      	mov	r1, r2
 8008186:	f7ff ff5d 	bl	8008044 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800818a:	b100      	cbz	r0, 800818e <xQueueCreateCountingSemaphoreStatic+0x48>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800818c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800818e:	b002      	add	sp, #8
 8008190:	bd10      	pop	{r4, pc}

08008192 <xQueueCreateCountingSemaphore>:
	{
 8008192:	b510      	push	{r4, lr}
 8008194:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8008196:	b950      	cbnz	r0, 80081ae <xQueueCreateCountingSemaphore+0x1c>
 8008198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819c:	b672      	cpsid	i
 800819e:	f383 8811 	msr	BASEPRI, r3
 80081a2:	f3bf 8f6f 	isb	sy
 80081a6:	f3bf 8f4f 	dsb	sy
 80081aa:	b662      	cpsie	i
 80081ac:	e7fe      	b.n	80081ac <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80081ae:	4288      	cmp	r0, r1
 80081b0:	d20a      	bcs.n	80081c8 <xQueueCreateCountingSemaphore+0x36>
 80081b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b6:	b672      	cpsid	i
 80081b8:	f383 8811 	msr	BASEPRI, r3
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	b662      	cpsie	i
 80081c6:	e7fe      	b.n	80081c6 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80081c8:	2202      	movs	r2, #2
 80081ca:	2100      	movs	r1, #0
 80081cc:	f7ff ff92 	bl	80080f4 <xQueueGenericCreate>
		if( xHandle != NULL )
 80081d0:	b100      	cbz	r0, 80081d4 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80081d2:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80081d4:	bd10      	pop	{r4, pc}
	...

080081d8 <xQueueGenericSend>:
{
 80081d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081dc:	4688      	mov	r8, r1
 80081de:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80081e0:	4604      	mov	r4, r0
{
 80081e2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80081e4:	b950      	cbnz	r0, 80081fc <xQueueGenericSend+0x24>
 80081e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ea:	b672      	cpsid	i
 80081ec:	f383 8811 	msr	BASEPRI, r3
 80081f0:	f3bf 8f6f 	isb	sy
 80081f4:	f3bf 8f4f 	dsb	sy
 80081f8:	b662      	cpsie	i
 80081fa:	e7fe      	b.n	80081fa <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081fc:	b961      	cbnz	r1, 8008218 <xQueueGenericSend+0x40>
 80081fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008200:	b153      	cbz	r3, 8008218 <xQueueGenericSend+0x40>
 8008202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008206:	b672      	cpsid	i
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	b662      	cpsie	i
 8008216:	e7fe      	b.n	8008216 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008218:	2f02      	cmp	r7, #2
 800821a:	d10d      	bne.n	8008238 <xQueueGenericSend+0x60>
 800821c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800821e:	2b01      	cmp	r3, #1
 8008220:	d00a      	beq.n	8008238 <xQueueGenericSend+0x60>
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	b672      	cpsid	i
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	b662      	cpsie	i
 8008236:	e7fe      	b.n	8008236 <xQueueGenericSend+0x5e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008238:	f001 f896 	bl	8009368 <xTaskGetSchedulerState>
 800823c:	4606      	mov	r6, r0
 800823e:	b960      	cbnz	r0, 800825a <xQueueGenericSend+0x82>
 8008240:	9b01      	ldr	r3, [sp, #4]
 8008242:	b15b      	cbz	r3, 800825c <xQueueGenericSend+0x84>
 8008244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008248:	b672      	cpsid	i
 800824a:	f383 8811 	msr	BASEPRI, r3
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	b662      	cpsie	i
 8008258:	e7fe      	b.n	8008258 <xQueueGenericSend+0x80>
 800825a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800825c:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 8008260:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008348 <xQueueGenericSend+0x170>
 8008264:	e037      	b.n	80082d6 <xQueueGenericSend+0xfe>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008266:	9d01      	ldr	r5, [sp, #4]
 8008268:	b91d      	cbnz	r5, 8008272 <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
 800826a:	f7ff fd09 	bl	8007c80 <vPortExitCritical>
			return errQUEUE_FULL;
 800826e:	2000      	movs	r0, #0
 8008270:	e050      	b.n	8008314 <xQueueGenericSend+0x13c>
				else if( xEntryTimeSet == pdFALSE )
 8008272:	b916      	cbnz	r6, 800827a <xQueueGenericSend+0xa2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008274:	a802      	add	r0, sp, #8
 8008276:	f001 f81f 	bl	80092b8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800827a:	f7ff fd01 	bl	8007c80 <vPortExitCritical>
		vTaskSuspendAll();
 800827e:	f000 fda5 	bl	8008dcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008282:	f7ff fcd7 	bl	8007c34 <vPortEnterCritical>
 8008286:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800828a:	2bff      	cmp	r3, #255	; 0xff
 800828c:	d101      	bne.n	8008292 <xQueueGenericSend+0xba>
 800828e:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8008292:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008296:	2bff      	cmp	r3, #255	; 0xff
 8008298:	d101      	bne.n	800829e <xQueueGenericSend+0xc6>
 800829a:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800829e:	f7ff fcef 	bl	8007c80 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082a2:	a901      	add	r1, sp, #4
 80082a4:	a802      	add	r0, sp, #8
 80082a6:	f001 f813 	bl	80092d0 <xTaskCheckForTimeOut>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	d146      	bne.n	800833c <xQueueGenericSend+0x164>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082ae:	f7ff fcc1 	bl	8007c34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80082b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80082b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d12f      	bne.n	800831a <xQueueGenericSend+0x142>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80082ba:	f7ff fce1 	bl	8007c80 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082be:	9901      	ldr	r1, [sp, #4]
 80082c0:	f104 0010 	add.w	r0, r4, #16
 80082c4:	f000 ff76 	bl	80091b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80082c8:	4620      	mov	r0, r4
 80082ca:	f7ff fe40 	bl	8007f4e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80082ce:	f000 fe23 	bl	8008f18 <xTaskResumeAll>
 80082d2:	b350      	cbz	r0, 800832a <xQueueGenericSend+0x152>
 80082d4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80082d6:	f7ff fcad 	bl	8007c34 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80082dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80082de:	429a      	cmp	r2, r3
 80082e0:	d301      	bcc.n	80082e6 <xQueueGenericSend+0x10e>
 80082e2:	2f02      	cmp	r7, #2
 80082e4:	d1bf      	bne.n	8008266 <xQueueGenericSend+0x8e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082e6:	463a      	mov	r2, r7
 80082e8:	4641      	mov	r1, r8
 80082ea:	4620      	mov	r0, r4
 80082ec:	f7ff fde5 	bl	8007eba <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082f2:	b11b      	cbz	r3, 80082fc <xQueueGenericSend+0x124>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80082f8:	f000 ff98 	bl	800922c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80082fc:	b138      	cbz	r0, 800830e <xQueueGenericSend+0x136>
						queueYIELD_IF_USING_PREEMPTION();
 80082fe:	4b12      	ldr	r3, [pc, #72]	; (8008348 <xQueueGenericSend+0x170>)
 8008300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008304:	601a      	str	r2, [r3, #0]
 8008306:	f3bf 8f4f 	dsb	sy
 800830a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800830e:	f7ff fcb7 	bl	8007c80 <vPortExitCritical>
				return pdPASS;
 8008312:	2001      	movs	r0, #1
}
 8008314:	b004      	add	sp, #16
 8008316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 800831a:	f7ff fcb1 	bl	8007c80 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800831e:	4620      	mov	r0, r4
 8008320:	f7ff fe15 	bl	8007f4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008324:	f000 fdf8 	bl	8008f18 <xTaskResumeAll>
 8008328:	e7d4      	b.n	80082d4 <xQueueGenericSend+0xfc>
					portYIELD_WITHIN_API();
 800832a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800832e:	f8ca 3000 	str.w	r3, [sl]
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	e7cb      	b.n	80082d4 <xQueueGenericSend+0xfc>
			prvUnlockQueue( pxQueue );
 800833c:	4620      	mov	r0, r4
 800833e:	f7ff fe06 	bl	8007f4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008342:	f000 fde9 	bl	8008f18 <xTaskResumeAll>
 8008346:	e792      	b.n	800826e <xQueueGenericSend+0x96>
 8008348:	e000ed04 	.word	0xe000ed04

0800834c <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800834c:	2200      	movs	r2, #0
	{
 800834e:	460b      	mov	r3, r1
 8008350:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008352:	4611      	mov	r1, r2
 8008354:	9000      	str	r0, [sp, #0]
 8008356:	2001      	movs	r0, #1
 8008358:	f7ff fe74 	bl	8008044 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800835c:	4604      	mov	r4, r0
 800835e:	b138      	cbz	r0, 8008370 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008360:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008362:	461a      	mov	r2, r3
 8008364:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008366:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008368:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800836a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800836c:	f7ff ff34 	bl	80081d8 <xQueueGenericSend>
	}
 8008370:	4620      	mov	r0, r4
 8008372:	b002      	add	sp, #8
 8008374:	bd10      	pop	{r4, pc}

08008376 <xQueueGiveMutexRecursive>:
	{
 8008376:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8008378:	4604      	mov	r4, r0
 800837a:	b950      	cbnz	r0, 8008392 <xQueueGiveMutexRecursive+0x1c>
 800837c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008380:	b672      	cpsid	i
 8008382:	f383 8811 	msr	BASEPRI, r3
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	b662      	cpsie	i
 8008390:	e7fe      	b.n	8008390 <xQueueGiveMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008392:	6885      	ldr	r5, [r0, #8]
 8008394:	f000 ffe2 	bl	800935c <xTaskGetCurrentTaskHandle>
 8008398:	4285      	cmp	r5, r0
 800839a:	d10a      	bne.n	80083b2 <xQueueGiveMutexRecursive+0x3c>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800839c:	68e3      	ldr	r3, [r4, #12]
 800839e:	3b01      	subs	r3, #1
 80083a0:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80083a2:	b923      	cbnz	r3, 80083ae <xQueueGiveMutexRecursive+0x38>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80083a4:	461a      	mov	r2, r3
 80083a6:	4619      	mov	r1, r3
 80083a8:	4620      	mov	r0, r4
 80083aa:	f7ff ff15 	bl	80081d8 <xQueueGenericSend>
			xReturn = pdPASS;
 80083ae:	2001      	movs	r0, #1
		return xReturn;
 80083b0:	e000      	b.n	80083b4 <xQueueGiveMutexRecursive+0x3e>
			xReturn = pdFAIL;
 80083b2:	2000      	movs	r0, #0
	}
 80083b4:	bd38      	pop	{r3, r4, r5, pc}

080083b6 <xQueueCreateMutex>:
	{
 80083b6:	b570      	push	{r4, r5, r6, lr}
 80083b8:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80083ba:	2050      	movs	r0, #80	; 0x50
 80083bc:	f7ff fac8 	bl	8007950 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80083c0:	4604      	mov	r4, r0
 80083c2:	b198      	cbz	r0, 80083ec <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80083c4:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 80083c6:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80083c8:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80083ca:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 80083ce:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80083d2:	f7ff fdf5 	bl	8007fc0 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80083d6:	462b      	mov	r3, r5
 80083d8:	462a      	mov	r2, r5
 80083da:	4629      	mov	r1, r5
 80083dc:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80083de:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80083e2:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80083e4:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80083e6:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80083e8:	f7ff fef6 	bl	80081d8 <xQueueGenericSend>
	}
 80083ec:	4620      	mov	r0, r4
 80083ee:	bd70      	pop	{r4, r5, r6, pc}

080083f0 <xQueueGenericSendFromISR>:
{
 80083f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083f4:	4689      	mov	r9, r1
 80083f6:	4690      	mov	r8, r2
 80083f8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80083fa:	4604      	mov	r4, r0
 80083fc:	b950      	cbnz	r0, 8008414 <xQueueGenericSendFromISR+0x24>
 80083fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008402:	b672      	cpsid	i
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	b662      	cpsie	i
 8008412:	e7fe      	b.n	8008412 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008414:	b961      	cbnz	r1, 8008430 <xQueueGenericSendFromISR+0x40>
 8008416:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008418:	b153      	cbz	r3, 8008430 <xQueueGenericSendFromISR+0x40>
 800841a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841e:	b672      	cpsid	i
 8008420:	f383 8811 	msr	BASEPRI, r3
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	b662      	cpsie	i
 800842e:	e7fe      	b.n	800842e <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008430:	2f02      	cmp	r7, #2
 8008432:	d10d      	bne.n	8008450 <xQueueGenericSendFromISR+0x60>
 8008434:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008436:	2b01      	cmp	r3, #1
 8008438:	d00a      	beq.n	8008450 <xQueueGenericSendFromISR+0x60>
 800843a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843e:	b672      	cpsid	i
 8008440:	f383 8811 	msr	BASEPRI, r3
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	b662      	cpsie	i
 800844e:	e7fe      	b.n	800844e <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008450:	f7ff fcf6 	bl	8007e40 <vPortValidateInterruptPriority>
	__asm volatile
 8008454:	f3ef 8611 	mrs	r6, BASEPRI
 8008458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845c:	b672      	cpsid	i
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800846c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800846e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008470:	429a      	cmp	r2, r3
 8008472:	d301      	bcc.n	8008478 <xQueueGenericSendFromISR+0x88>
 8008474:	2f02      	cmp	r7, #2
 8008476:	d122      	bne.n	80084be <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008478:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800847c:	463a      	mov	r2, r7
 800847e:	4649      	mov	r1, r9
 8008480:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8008482:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008484:	f7ff fd19 	bl	8007eba <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8008488:	1c6b      	adds	r3, r5, #1
 800848a:	d113      	bne.n	80084b4 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800848c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800848e:	b90b      	cbnz	r3, 8008494 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 8008490:	2001      	movs	r0, #1
 8008492:	e00b      	b.n	80084ac <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008494:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008498:	f000 fec8 	bl	800922c <xTaskRemoveFromEventList>
 800849c:	2800      	cmp	r0, #0
 800849e:	d0f7      	beq.n	8008490 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 80084a0:	f1b8 0f00 	cmp.w	r8, #0
 80084a4:	d0f4      	beq.n	8008490 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084a6:	2001      	movs	r0, #1
 80084a8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80084ac:	f386 8811 	msr	BASEPRI, r6
}
 80084b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084b4:	3501      	adds	r5, #1
 80084b6:	b26d      	sxtb	r5, r5
 80084b8:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80084bc:	e7e8      	b.n	8008490 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 80084be:	2000      	movs	r0, #0
 80084c0:	e7f4      	b.n	80084ac <xQueueGenericSendFromISR+0xbc>

080084c2 <xQueueGiveFromISR>:
{
 80084c2:	b570      	push	{r4, r5, r6, lr}
 80084c4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80084c6:	4604      	mov	r4, r0
 80084c8:	b950      	cbnz	r0, 80084e0 <xQueueGiveFromISR+0x1e>
	__asm volatile
 80084ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ce:	b672      	cpsid	i
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	b662      	cpsie	i
 80084de:	e7fe      	b.n	80084de <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 80084e0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80084e2:	b153      	cbz	r3, 80084fa <xQueueGiveFromISR+0x38>
 80084e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e8:	b672      	cpsid	i
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	b662      	cpsie	i
 80084f8:	e7fe      	b.n	80084f8 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80084fa:	6803      	ldr	r3, [r0, #0]
 80084fc:	b963      	cbnz	r3, 8008518 <xQueueGiveFromISR+0x56>
 80084fe:	6883      	ldr	r3, [r0, #8]
 8008500:	b153      	cbz	r3, 8008518 <xQueueGiveFromISR+0x56>
 8008502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008506:	b672      	cpsid	i
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	b662      	cpsie	i
 8008516:	e7fe      	b.n	8008516 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008518:	f7ff fc92 	bl	8007e40 <vPortValidateInterruptPriority>
	__asm volatile
 800851c:	f3ef 8611 	mrs	r6, BASEPRI
 8008520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008524:	b672      	cpsid	i
 8008526:	f383 8811 	msr	BASEPRI, r3
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008534:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008536:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008538:	4293      	cmp	r3, r2
 800853a:	d91c      	bls.n	8008576 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800853c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008540:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8008542:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8008544:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008546:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8008548:	d110      	bne.n	800856c <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800854a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800854c:	b90b      	cbnz	r3, 8008552 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800854e:	2001      	movs	r0, #1
 8008550:	e009      	b.n	8008566 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008552:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008556:	f000 fe69 	bl	800922c <xTaskRemoveFromEventList>
 800855a:	2800      	cmp	r0, #0
 800855c:	d0f7      	beq.n	800854e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800855e:	2d00      	cmp	r5, #0
 8008560:	d0f5      	beq.n	800854e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008562:	2001      	movs	r0, #1
 8008564:	6028      	str	r0, [r5, #0]
	__asm volatile
 8008566:	f386 8811 	msr	BASEPRI, r6
}
 800856a:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800856c:	3301      	adds	r3, #1
 800856e:	b25b      	sxtb	r3, r3
 8008570:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008574:	e7eb      	b.n	800854e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8008576:	2000      	movs	r0, #0
 8008578:	e7f5      	b.n	8008566 <xQueueGiveFromISR+0xa4>
	...

0800857c <xQueueReceive>:
{
 800857c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008580:	b085      	sub	sp, #20
 8008582:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8008584:	4604      	mov	r4, r0
{
 8008586:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008588:	b950      	cbnz	r0, 80085a0 <xQueueReceive+0x24>
	__asm volatile
 800858a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858e:	b672      	cpsid	i
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	b662      	cpsie	i
 800859e:	e7fe      	b.n	800859e <xQueueReceive+0x22>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085a0:	b961      	cbnz	r1, 80085bc <xQueueReceive+0x40>
 80085a2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80085a4:	b153      	cbz	r3, 80085bc <xQueueReceive+0x40>
 80085a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085aa:	b672      	cpsid	i
 80085ac:	f383 8811 	msr	BASEPRI, r3
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	b662      	cpsie	i
 80085ba:	e7fe      	b.n	80085ba <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085bc:	f000 fed4 	bl	8009368 <xTaskGetSchedulerState>
 80085c0:	4606      	mov	r6, r0
 80085c2:	b960      	cbnz	r0, 80085de <xQueueReceive+0x62>
 80085c4:	9b01      	ldr	r3, [sp, #4]
 80085c6:	b15b      	cbz	r3, 80085e0 <xQueueReceive+0x64>
 80085c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085cc:	b672      	cpsid	i
 80085ce:	f383 8811 	msr	BASEPRI, r3
 80085d2:	f3bf 8f6f 	isb	sy
 80085d6:	f3bf 8f4f 	dsb	sy
 80085da:	b662      	cpsie	i
 80085dc:	e7fe      	b.n	80085dc <xQueueReceive+0x60>
 80085de:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80085e0:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80085e4:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 80086c4 <xQueueReceive+0x148>
 80085e8:	e03b      	b.n	8008662 <xQueueReceive+0xe6>
				if( xTicksToWait == ( TickType_t ) 0 )
 80085ea:	9d01      	ldr	r5, [sp, #4]
 80085ec:	b91d      	cbnz	r5, 80085f6 <xQueueReceive+0x7a>
					taskEXIT_CRITICAL();
 80085ee:	f7ff fb47 	bl	8007c80 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80085f2:	2000      	movs	r0, #0
 80085f4:	e052      	b.n	800869c <xQueueReceive+0x120>
				else if( xEntryTimeSet == pdFALSE )
 80085f6:	b916      	cbnz	r6, 80085fe <xQueueReceive+0x82>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085f8:	a802      	add	r0, sp, #8
 80085fa:	f000 fe5d 	bl	80092b8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80085fe:	f7ff fb3f 	bl	8007c80 <vPortExitCritical>
		vTaskSuspendAll();
 8008602:	f000 fbe3 	bl	8008dcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008606:	f7ff fb15 	bl	8007c34 <vPortEnterCritical>
 800860a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800860e:	2bff      	cmp	r3, #255	; 0xff
 8008610:	d101      	bne.n	8008616 <xQueueReceive+0x9a>
 8008612:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8008616:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800861a:	2bff      	cmp	r3, #255	; 0xff
 800861c:	d101      	bne.n	8008622 <xQueueReceive+0xa6>
 800861e:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8008622:	f7ff fb2d 	bl	8007c80 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008626:	a901      	add	r1, sp, #4
 8008628:	a802      	add	r0, sp, #8
 800862a:	f000 fe51 	bl	80092d0 <xTaskCheckForTimeOut>
 800862e:	2800      	cmp	r0, #0
 8008630:	d13d      	bne.n	80086ae <xQueueReceive+0x132>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008632:	4620      	mov	r0, r4
 8008634:	f7ff fc36 	bl	8007ea4 <prvIsQueueEmpty>
 8008638:	b398      	cbz	r0, 80086a2 <xQueueReceive+0x126>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800863a:	9901      	ldr	r1, [sp, #4]
 800863c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008640:	f000 fdb8 	bl	80091b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008644:	4620      	mov	r0, r4
 8008646:	f7ff fc82 	bl	8007f4e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800864a:	f000 fc65 	bl	8008f18 <xTaskResumeAll>
 800864e:	b938      	cbnz	r0, 8008660 <xQueueReceive+0xe4>
					portYIELD_WITHIN_API();
 8008650:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008654:	f8c9 3000 	str.w	r3, [r9]
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008662:	f7ff fae7 	bl	8007c34 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008666:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008668:	2d00      	cmp	r5, #0
 800866a:	d0be      	beq.n	80085ea <xQueueReceive+0x6e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800866c:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800866e:	4639      	mov	r1, r7
 8008670:	4620      	mov	r0, r4
 8008672:	f7ff fc57 	bl	8007f24 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008676:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008678:	6923      	ldr	r3, [r4, #16]
 800867a:	b163      	cbz	r3, 8008696 <xQueueReceive+0x11a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800867c:	f104 0010 	add.w	r0, r4, #16
 8008680:	f000 fdd4 	bl	800922c <xTaskRemoveFromEventList>
 8008684:	b138      	cbz	r0, 8008696 <xQueueReceive+0x11a>
						queueYIELD_IF_USING_PREEMPTION();
 8008686:	4b0f      	ldr	r3, [pc, #60]	; (80086c4 <xQueueReceive+0x148>)
 8008688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800868c:	601a      	str	r2, [r3, #0]
 800868e:	f3bf 8f4f 	dsb	sy
 8008692:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008696:	f7ff faf3 	bl	8007c80 <vPortExitCritical>
				return pdPASS;
 800869a:	2001      	movs	r0, #1
}
 800869c:	b005      	add	sp, #20
 800869e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 80086a2:	4620      	mov	r0, r4
 80086a4:	f7ff fc53 	bl	8007f4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086a8:	f000 fc36 	bl	8008f18 <xTaskResumeAll>
 80086ac:	e7d8      	b.n	8008660 <xQueueReceive+0xe4>
			prvUnlockQueue( pxQueue );
 80086ae:	4620      	mov	r0, r4
 80086b0:	f7ff fc4d 	bl	8007f4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086b4:	f000 fc30 	bl	8008f18 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086b8:	4620      	mov	r0, r4
 80086ba:	f7ff fbf3 	bl	8007ea4 <prvIsQueueEmpty>
 80086be:	2800      	cmp	r0, #0
 80086c0:	d0ce      	beq.n	8008660 <xQueueReceive+0xe4>
 80086c2:	e796      	b.n	80085f2 <xQueueReceive+0x76>
 80086c4:	e000ed04 	.word	0xe000ed04

080086c8 <xQueueSemaphoreTake>:
{
 80086c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 80086cc:	4604      	mov	r4, r0
{
 80086ce:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80086d0:	b950      	cbnz	r0, 80086e8 <xQueueSemaphoreTake+0x20>
 80086d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d6:	b672      	cpsid	i
 80086d8:	f383 8811 	msr	BASEPRI, r3
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	b662      	cpsie	i
 80086e6:	e7fe      	b.n	80086e6 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 80086e8:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80086ea:	b155      	cbz	r5, 8008702 <xQueueSemaphoreTake+0x3a>
 80086ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f0:	b672      	cpsid	i
 80086f2:	f383 8811 	msr	BASEPRI, r3
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	b662      	cpsie	i
 8008700:	e7fe      	b.n	8008700 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008702:	f000 fe31 	bl	8009368 <xTaskGetSchedulerState>
 8008706:	4606      	mov	r6, r0
 8008708:	b960      	cbnz	r0, 8008724 <xQueueSemaphoreTake+0x5c>
 800870a:	9b01      	ldr	r3, [sp, #4]
 800870c:	b17b      	cbz	r3, 800872e <xQueueSemaphoreTake+0x66>
 800870e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008712:	b672      	cpsid	i
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	b662      	cpsie	i
 8008722:	e7fe      	b.n	8008722 <xQueueSemaphoreTake+0x5a>
 8008724:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8008726:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8008728:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800885c <xQueueSemaphoreTake+0x194>
 800872c:	e053      	b.n	80087d6 <xQueueSemaphoreTake+0x10e>
 800872e:	4605      	mov	r5, r0
 8008730:	e7f9      	b.n	8008726 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008732:	9b01      	ldr	r3, [sp, #4]
 8008734:	b973      	cbnz	r3, 8008754 <xQueueSemaphoreTake+0x8c>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008736:	b155      	cbz	r5, 800874e <xQueueSemaphoreTake+0x86>
 8008738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873c:	b672      	cpsid	i
 800873e:	f383 8811 	msr	BASEPRI, r3
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	b662      	cpsie	i
 800874c:	e7fe      	b.n	800874c <xQueueSemaphoreTake+0x84>
					taskEXIT_CRITICAL();
 800874e:	f7ff fa97 	bl	8007c80 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008752:	e05e      	b.n	8008812 <xQueueSemaphoreTake+0x14a>
				else if( xEntryTimeSet == pdFALSE )
 8008754:	b916      	cbnz	r6, 800875c <xQueueSemaphoreTake+0x94>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008756:	a802      	add	r0, sp, #8
 8008758:	f000 fdae 	bl	80092b8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800875c:	f7ff fa90 	bl	8007c80 <vPortExitCritical>
		vTaskSuspendAll();
 8008760:	f000 fb34 	bl	8008dcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008764:	f7ff fa66 	bl	8007c34 <vPortEnterCritical>
 8008768:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800876c:	2bff      	cmp	r3, #255	; 0xff
 800876e:	d101      	bne.n	8008774 <xQueueSemaphoreTake+0xac>
 8008770:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8008774:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008778:	2bff      	cmp	r3, #255	; 0xff
 800877a:	d101      	bne.n	8008780 <xQueueSemaphoreTake+0xb8>
 800877c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008780:	f7ff fa7e 	bl	8007c80 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008784:	a901      	add	r1, sp, #4
 8008786:	a802      	add	r0, sp, #8
 8008788:	f000 fda2 	bl	80092d0 <xTaskCheckForTimeOut>
 800878c:	2800      	cmp	r0, #0
 800878e:	d14a      	bne.n	8008826 <xQueueSemaphoreTake+0x15e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008790:	4620      	mov	r0, r4
 8008792:	f7ff fb87 	bl	8007ea4 <prvIsQueueEmpty>
 8008796:	2800      	cmp	r0, #0
 8008798:	d03f      	beq.n	800881a <xQueueSemaphoreTake+0x152>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	b93b      	cbnz	r3, 80087ae <xQueueSemaphoreTake+0xe6>
						taskENTER_CRITICAL();
 800879e:	f7ff fa49 	bl	8007c34 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80087a2:	68a0      	ldr	r0, [r4, #8]
 80087a4:	f000 fdf0 	bl	8009388 <xTaskPriorityInherit>
 80087a8:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80087aa:	f7ff fa69 	bl	8007c80 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80087ae:	9901      	ldr	r1, [sp, #4]
 80087b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80087b4:	f000 fcfe 	bl	80091b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087b8:	4620      	mov	r0, r4
 80087ba:	f7ff fbc8 	bl	8007f4e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087be:	f000 fbab 	bl	8008f18 <xTaskResumeAll>
 80087c2:	b938      	cbnz	r0, 80087d4 <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 80087c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80087c8:	f8c8 3000 	str.w	r3, [r8]
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	f3bf 8f6f 	isb	sy
 80087d4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80087d6:	f7ff fa2d 	bl	8007c34 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80087da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d0a8      	beq.n	8008732 <xQueueSemaphoreTake+0x6a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80087e0:	3b01      	subs	r3, #1
 80087e2:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087e4:	6823      	ldr	r3, [r4, #0]
 80087e6:	b913      	cbnz	r3, 80087ee <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80087e8:	f000 feae 	bl	8009548 <pvTaskIncrementMutexHeldCount>
 80087ec:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087ee:	6923      	ldr	r3, [r4, #16]
 80087f0:	b163      	cbz	r3, 800880c <xQueueSemaphoreTake+0x144>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087f2:	f104 0010 	add.w	r0, r4, #16
 80087f6:	f000 fd19 	bl	800922c <xTaskRemoveFromEventList>
 80087fa:	b138      	cbz	r0, 800880c <xQueueSemaphoreTake+0x144>
						queueYIELD_IF_USING_PREEMPTION();
 80087fc:	4b17      	ldr	r3, [pc, #92]	; (800885c <xQueueSemaphoreTake+0x194>)
 80087fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800880c:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800880e:	f7ff fa37 	bl	8007c80 <vPortExitCritical>
}
 8008812:	4628      	mov	r0, r5
 8008814:	b004      	add	sp, #16
 8008816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800881a:	4620      	mov	r0, r4
 800881c:	f7ff fb97 	bl	8007f4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008820:	f000 fb7a 	bl	8008f18 <xTaskResumeAll>
 8008824:	e7d6      	b.n	80087d4 <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 8008826:	4620      	mov	r0, r4
 8008828:	f7ff fb91 	bl	8007f4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800882c:	f000 fb74 	bl	8008f18 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008830:	4620      	mov	r0, r4
 8008832:	f7ff fb37 	bl	8007ea4 <prvIsQueueEmpty>
 8008836:	2800      	cmp	r0, #0
 8008838:	d0cc      	beq.n	80087d4 <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 800883a:	2d00      	cmp	r5, #0
 800883c:	d0e9      	beq.n	8008812 <xQueueSemaphoreTake+0x14a>
						taskENTER_CRITICAL();
 800883e:	f7ff f9f9 	bl	8007c34 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008842:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008844:	b119      	cbz	r1, 800884e <xQueueSemaphoreTake+0x186>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008846:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008848:	6819      	ldr	r1, [r3, #0]
 800884a:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800884e:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8008850:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008852:	f000 fe23 	bl	800949c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8008856:	f7ff fa13 	bl	8007c80 <vPortExitCritical>
 800885a:	e7da      	b.n	8008812 <xQueueSemaphoreTake+0x14a>
 800885c:	e000ed04 	.word	0xe000ed04

08008860 <xQueueTakeMutexRecursive>:
	{
 8008860:	b537      	push	{r0, r1, r2, r4, r5, lr}
		configASSERT( pxMutex );
 8008862:	4604      	mov	r4, r0
 8008864:	b950      	cbnz	r0, 800887c <xQueueTakeMutexRecursive+0x1c>
 8008866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886a:	b672      	cpsid	i
 800886c:	f383 8811 	msr	BASEPRI, r3
 8008870:	f3bf 8f6f 	isb	sy
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	b662      	cpsie	i
 800887a:	e7fe      	b.n	800887a <xQueueTakeMutexRecursive+0x1a>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800887c:	6885      	ldr	r5, [r0, #8]
 800887e:	9101      	str	r1, [sp, #4]
 8008880:	f000 fd6c 	bl	800935c <xTaskGetCurrentTaskHandle>
 8008884:	4285      	cmp	r5, r0
 8008886:	9901      	ldr	r1, [sp, #4]
 8008888:	d105      	bne.n	8008896 <xQueueTakeMutexRecursive+0x36>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800888a:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800888c:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800888e:	3301      	adds	r3, #1
 8008890:	60e3      	str	r3, [r4, #12]
	}
 8008892:	b003      	add	sp, #12
 8008894:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008896:	4620      	mov	r0, r4
 8008898:	f7ff ff16 	bl	80086c8 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800889c:	2800      	cmp	r0, #0
 800889e:	d0f8      	beq.n	8008892 <xQueueTakeMutexRecursive+0x32>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80088a0:	68e3      	ldr	r3, [r4, #12]
 80088a2:	3301      	adds	r3, #1
 80088a4:	60e3      	str	r3, [r4, #12]
		return xReturn;
 80088a6:	e7f4      	b.n	8008892 <xQueueTakeMutexRecursive+0x32>

080088a8 <xQueueReceiveFromISR>:
{
 80088a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088ac:	4689      	mov	r9, r1
 80088ae:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80088b0:	4605      	mov	r5, r0
 80088b2:	b950      	cbnz	r0, 80088ca <xQueueReceiveFromISR+0x22>
 80088b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b8:	b672      	cpsid	i
 80088ba:	f383 8811 	msr	BASEPRI, r3
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	f3bf 8f4f 	dsb	sy
 80088c6:	b662      	cpsie	i
 80088c8:	e7fe      	b.n	80088c8 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088ca:	b961      	cbnz	r1, 80088e6 <xQueueReceiveFromISR+0x3e>
 80088cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80088ce:	b153      	cbz	r3, 80088e6 <xQueueReceiveFromISR+0x3e>
 80088d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d4:	b672      	cpsid	i
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	b662      	cpsie	i
 80088e4:	e7fe      	b.n	80088e4 <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088e6:	f7ff faab 	bl	8007e40 <vPortValidateInterruptPriority>
	__asm volatile
 80088ea:	f3ef 8711 	mrs	r7, BASEPRI
 80088ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f2:	b672      	cpsid	i
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008902:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008904:	b31c      	cbz	r4, 800894e <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8008906:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800890a:	4649      	mov	r1, r9
 800890c:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800890e:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8008910:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008912:	f7ff fb07 	bl	8007f24 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008916:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8008918:	1c73      	adds	r3, r6, #1
 800891a:	d113      	bne.n	8008944 <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800891c:	692b      	ldr	r3, [r5, #16]
 800891e:	b90b      	cbnz	r3, 8008924 <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 8008920:	2001      	movs	r0, #1
 8008922:	e00b      	b.n	800893c <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008924:	f105 0010 	add.w	r0, r5, #16
 8008928:	f000 fc80 	bl	800922c <xTaskRemoveFromEventList>
 800892c:	2800      	cmp	r0, #0
 800892e:	d0f7      	beq.n	8008920 <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 8008930:	f1b8 0f00 	cmp.w	r8, #0
 8008934:	d0f4      	beq.n	8008920 <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008936:	2001      	movs	r0, #1
 8008938:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800893c:	f387 8811 	msr	BASEPRI, r7
}
 8008940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008944:	3601      	adds	r6, #1
 8008946:	b276      	sxtb	r6, r6
 8008948:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800894c:	e7e8      	b.n	8008920 <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 800894e:	4620      	mov	r0, r4
 8008950:	e7f4      	b.n	800893c <xQueueReceiveFromISR+0x94>
	...

08008954 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008954:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008956:	4a07      	ldr	r2, [pc, #28]	; (8008974 <vQueueAddToRegistry+0x20>)
	{
 8008958:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800895a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800895e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8008962:	b91d      	cbnz	r5, 800896c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008964:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008968:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800896a:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800896c:	3301      	adds	r3, #1
 800896e:	2b08      	cmp	r3, #8
 8008970:	d1f3      	bne.n	800895a <vQueueAddToRegistry+0x6>
 8008972:	e7fa      	b.n	800896a <vQueueAddToRegistry+0x16>
 8008974:	2002bdbc 	.word	0x2002bdbc

08008978 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008978:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800897a:	4909      	ldr	r1, [pc, #36]	; (80089a0 <vQueueUnregisterQueue+0x28>)
	{
 800897c:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800897e:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8008982:	00dc      	lsls	r4, r3, #3
 8008984:	4282      	cmp	r2, r0
 8008986:	d106      	bne.n	8008996 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008988:	4a06      	ldr	r2, [pc, #24]	; (80089a4 <vQueueUnregisterQueue+0x2c>)
 800898a:	2100      	movs	r1, #0
 800898c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008990:	4422      	add	r2, r4
 8008992:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008994:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008996:	3301      	adds	r3, #1
 8008998:	2b08      	cmp	r3, #8
 800899a:	d1f0      	bne.n	800897e <vQueueUnregisterQueue+0x6>
 800899c:	e7fa      	b.n	8008994 <vQueueUnregisterQueue+0x1c>
 800899e:	bf00      	nop
 80089a0:	2002bdc0 	.word	0x2002bdc0
 80089a4:	2002bdbc 	.word	0x2002bdbc

080089a8 <vQueueDelete>:
{
 80089a8:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 80089aa:	b950      	cbnz	r0, 80089c2 <vQueueDelete+0x1a>
	__asm volatile
 80089ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b0:	b672      	cpsid	i
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	b662      	cpsie	i
 80089c0:	e7fe      	b.n	80089c0 <vQueueDelete+0x18>
		vQueueUnregisterQueue( pxQueue );
 80089c2:	f7ff ffd9 	bl	8008978 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80089c6:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 80089ca:	b91b      	cbnz	r3, 80089d4 <vQueueDelete+0x2c>
}
 80089cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 80089d0:	f7ff b84c 	b.w	8007a6c <vPortFree>
}
 80089d4:	bd10      	pop	{r4, pc}

080089d6 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80089d6:	b570      	push	{r4, r5, r6, lr}
 80089d8:	4604      	mov	r4, r0
 80089da:	460d      	mov	r5, r1
 80089dc:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80089de:	f7ff f929 	bl	8007c34 <vPortEnterCritical>
 80089e2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80089e6:	2bff      	cmp	r3, #255	; 0xff
 80089e8:	d102      	bne.n	80089f0 <vQueueWaitForMessageRestricted+0x1a>
 80089ea:	2300      	movs	r3, #0
 80089ec:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80089f0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80089f4:	2bff      	cmp	r3, #255	; 0xff
 80089f6:	d102      	bne.n	80089fe <vQueueWaitForMessageRestricted+0x28>
 80089f8:	2300      	movs	r3, #0
 80089fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089fe:	f7ff f93f 	bl	8007c80 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008a04:	b92b      	cbnz	r3, 8008a12 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a06:	4632      	mov	r2, r6
 8008a08:	4629      	mov	r1, r5
 8008a0a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008a0e:	f000 fbed 	bl	80091ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a12:	4620      	mov	r0, r4
	}
 8008a14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8008a18:	f7ff ba99 	b.w	8007f4e <prvUnlockQueue>

08008a1c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a20:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a22:	f7ff f907 	bl	8007c34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a26:	4b2e      	ldr	r3, [pc, #184]	; (8008ae0 <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 8008a28:	4d2e      	ldr	r5, [pc, #184]	; (8008ae4 <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	4f2e      	ldr	r7, [pc, #184]	; (8008ae8 <prvAddNewTaskToReadyList+0xcc>)
 8008a2e:	3201      	adds	r2, #1
 8008a30:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008a32:	682e      	ldr	r6, [r5, #0]
 8008a34:	2e00      	cmp	r6, #0
 8008a36:	d148      	bne.n	8008aca <prvAddNewTaskToReadyList+0xae>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a38:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d11f      	bne.n	8008a80 <prvAddNewTaskToReadyList+0x64>
 8008a40:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a42:	3601      	adds	r6, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a44:	4640      	mov	r0, r8
 8008a46:	f7ff f84d 	bl	8007ae4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a4a:	f108 0814 	add.w	r8, r8, #20
 8008a4e:	2e38      	cmp	r6, #56	; 0x38
 8008a50:	d1f7      	bne.n	8008a42 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a52:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8008b14 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 8008a56:	4e25      	ldr	r6, [pc, #148]	; (8008aec <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 8008a58:	4640      	mov	r0, r8
 8008a5a:	f7ff f843 	bl	8007ae4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a5e:	4630      	mov	r0, r6
 8008a60:	f7ff f840 	bl	8007ae4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a64:	4822      	ldr	r0, [pc, #136]	; (8008af0 <prvAddNewTaskToReadyList+0xd4>)
 8008a66:	f7ff f83d 	bl	8007ae4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a6a:	4822      	ldr	r0, [pc, #136]	; (8008af4 <prvAddNewTaskToReadyList+0xd8>)
 8008a6c:	f7ff f83a 	bl	8007ae4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a70:	4821      	ldr	r0, [pc, #132]	; (8008af8 <prvAddNewTaskToReadyList+0xdc>)
 8008a72:	f7ff f837 	bl	8007ae4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a76:	4b21      	ldr	r3, [pc, #132]	; (8008afc <prvAddNewTaskToReadyList+0xe0>)
 8008a78:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a7c:	4b20      	ldr	r3, [pc, #128]	; (8008b00 <prvAddNewTaskToReadyList+0xe4>)
 8008a7e:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 8008a80:	4a20      	ldr	r2, [pc, #128]	; (8008b04 <prvAddNewTaskToReadyList+0xe8>)
 8008a82:	6813      	ldr	r3, [r2, #0]
 8008a84:	3301      	adds	r3, #1
 8008a86:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008a88:	4a1f      	ldr	r2, [pc, #124]	; (8008b08 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008a8a:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8008a8c:	6811      	ldr	r1, [r2, #0]
 8008a8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008a90:	428b      	cmp	r3, r1
 8008a92:	d900      	bls.n	8008a96 <prvAddNewTaskToReadyList+0x7a>
 8008a94:	6013      	str	r3, [r2, #0]
 8008a96:	2014      	movs	r0, #20
 8008a98:	1d21      	adds	r1, r4, #4
 8008a9a:	fb00 7003 	mla	r0, r0, r3, r7
 8008a9e:	f7ff f82f 	bl	8007b00 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008aa2:	f7ff f8ed 	bl	8007c80 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008aa6:	4b19      	ldr	r3, [pc, #100]	; (8008b0c <prvAddNewTaskToReadyList+0xf0>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	b163      	cbz	r3, 8008ac6 <prvAddNewTaskToReadyList+0xaa>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008aac:	682b      	ldr	r3, [r5, #0]
 8008aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d207      	bcs.n	8008ac6 <prvAddNewTaskToReadyList+0xaa>
			taskYIELD_IF_USING_PREEMPTION();
 8008ab6:	4b16      	ldr	r3, [pc, #88]	; (8008b10 <prvAddNewTaskToReadyList+0xf4>)
 8008ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008abc:	601a      	str	r2, [r3, #0]
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	f3bf 8f6f 	isb	sy
}
 8008ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8008aca:	4b10      	ldr	r3, [pc, #64]	; (8008b0c <prvAddNewTaskToReadyList+0xf0>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1d6      	bne.n	8008a80 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008ad2:	682b      	ldr	r3, [r5, #0]
 8008ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d8d1      	bhi.n	8008a80 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 8008adc:	602c      	str	r4, [r5, #0]
 8008ade:	e7cf      	b.n	8008a80 <prvAddNewTaskToReadyList+0x64>
 8008ae0:	2002b6d8 	.word	0x2002b6d8
 8008ae4:	2002b26c 	.word	0x2002b26c
 8008ae8:	2002b278 	.word	0x2002b278
 8008aec:	2002b704 	.word	0x2002b704
 8008af0:	2002b720 	.word	0x2002b720
 8008af4:	2002b74c 	.word	0x2002b74c
 8008af8:	2002b738 	.word	0x2002b738
 8008afc:	2002b270 	.word	0x2002b270
 8008b00:	2002b274 	.word	0x2002b274
 8008b04:	2002b6e8 	.word	0x2002b6e8
 8008b08:	2002b6ec 	.word	0x2002b6ec
 8008b0c:	2002b734 	.word	0x2002b734
 8008b10:	e000ed04 	.word	0xe000ed04
 8008b14:	2002b6f0 	.word	0x2002b6f0

08008b18 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b18:	4a06      	ldr	r2, [pc, #24]	; (8008b34 <prvResetNextTaskUnblockTime+0x1c>)
 8008b1a:	6813      	ldr	r3, [r2, #0]
 8008b1c:	6819      	ldr	r1, [r3, #0]
 8008b1e:	4b06      	ldr	r3, [pc, #24]	; (8008b38 <prvResetNextTaskUnblockTime+0x20>)
 8008b20:	b919      	cbnz	r1, 8008b2a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b22:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b26:	601a      	str	r2, [r3, #0]
	}
}
 8008b28:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b2a:	6812      	ldr	r2, [r2, #0]
 8008b2c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b2e:	68d2      	ldr	r2, [r2, #12]
 8008b30:	6852      	ldr	r2, [r2, #4]
 8008b32:	e7f8      	b.n	8008b26 <prvResetNextTaskUnblockTime+0xe>
 8008b34:	2002b270 	.word	0x2002b270
 8008b38:	2002b718 	.word	0x2002b718

08008b3c <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008b40:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008b44:	4606      	mov	r6, r0
 8008b46:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008b48:	21a5      	movs	r1, #165	; 0xa5
 8008b4a:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008b4c:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008b4e:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008b52:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008b56:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008b58:	f021 fa0a 	bl	8029f70 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008b5c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008b5e:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008b60:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8008b64:	2d00      	cmp	r5, #0
 8008b66:	d037      	beq.n	8008bd8 <prvInitialiseNewTask.isra.0+0x9c>
 8008b68:	1e6b      	subs	r3, r5, #1
 8008b6a:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8008b6e:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b70:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8008b74:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8008b78:	7819      	ldrb	r1, [r3, #0]
 8008b7a:	b109      	cbz	r1, 8008b80 <prvInitialiseNewTask.isra.0+0x44>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b7c:	42ab      	cmp	r3, r5
 8008b7e:	d1f7      	bne.n	8008b70 <prvInitialiseNewTask.isra.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b80:	2300      	movs	r3, #0
 8008b82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008b86:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8008b88:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008b8c:	1d20      	adds	r0, r4, #4
 8008b8e:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8008b90:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 8008b94:	bf28      	it	cs
 8008b96:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8008b98:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008b9a:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b9c:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ba0:	f7fe ffab 	bl	8007afa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ba4:	f104 0018 	add.w	r0, r4, #24
 8008ba8:	f7fe ffa7 	bl	8007afa <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8008bac:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008bb0:	463a      	mov	r2, r7
 8008bb2:	4631      	mov	r1, r6
 8008bb4:	4648      	mov	r0, r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008bb6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bb8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008bba:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 8008bbc:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008bc0:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008bc4:	f7ff f812 	bl	8007bec <pxPortInitialiseStack>
 8008bc8:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8008bca:	f1b8 0f00 	cmp.w	r8, #0
 8008bce:	d001      	beq.n	8008bd4 <prvInitialiseNewTask.isra.0+0x98>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008bd0:	f8c8 4000 	str.w	r4, [r8]
}
 8008bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008bd8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8008bdc:	e7d3      	b.n	8008b86 <prvInitialiseNewTask.isra.0+0x4a>

08008bde <prvDeleteTCB>:
	{
 8008bde:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008be0:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
	{
 8008be4:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008be6:	b93b      	cbnz	r3, 8008bf8 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8008be8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008bea:	f7fe ff3f 	bl	8007a6c <vPortFree>
				vPortFree( pxTCB );
 8008bee:	4620      	mov	r0, r4
	}
 8008bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8008bf4:	f7fe bf3a 	b.w	8007a6c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d0f9      	beq.n	8008bf0 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d00a      	beq.n	8008c16 <prvDeleteTCB+0x38>
 8008c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c04:	b672      	cpsid	i
 8008c06:	f383 8811 	msr	BASEPRI, r3
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	b662      	cpsie	i
 8008c14:	e7fe      	b.n	8008c14 <prvDeleteTCB+0x36>
	}
 8008c16:	bd10      	pop	{r4, pc}

08008c18 <prvIdleTask>:
{
 8008c18:	b580      	push	{r7, lr}
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c1a:	4e14      	ldr	r6, [pc, #80]	; (8008c6c <prvIdleTask+0x54>)
				taskYIELD();
 8008c1c:	4f14      	ldr	r7, [pc, #80]	; (8008c70 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c1e:	4c15      	ldr	r4, [pc, #84]	; (8008c74 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8008c20:	4d15      	ldr	r5, [pc, #84]	; (8008c78 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	b96b      	cbnz	r3, 8008c42 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c26:	4b15      	ldr	r3, [pc, #84]	; (8008c7c <prvIdleTask+0x64>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d906      	bls.n	8008c3c <prvIdleTask+0x24>
				taskYIELD();
 8008c2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008c32:	603b      	str	r3, [r7, #0]
 8008c34:	f3bf 8f4f 	dsb	sy
 8008c38:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8008c3c:	f7f8 f8d2 	bl	8000de4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008c40:	e7ed      	b.n	8008c1e <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8008c42:	f7fe fff7 	bl	8007c34 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c46:	68f3      	ldr	r3, [r6, #12]
 8008c48:	f8d3 800c 	ldr.w	r8, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c4c:	f108 0004 	add.w	r0, r8, #4
 8008c50:	f7fe ff79 	bl	8007b46 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c54:	682b      	ldr	r3, [r5, #0]
 8008c56:	3b01      	subs	r3, #1
 8008c58:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c5a:	6823      	ldr	r3, [r4, #0]
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8008c60:	f7ff f80e 	bl	8007c80 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008c64:	4640      	mov	r0, r8
 8008c66:	f7ff ffba 	bl	8008bde <prvDeleteTCB>
 8008c6a:	e7da      	b.n	8008c22 <prvIdleTask+0xa>
 8008c6c:	2002b74c 	.word	0x2002b74c
 8008c70:	e000ed04 	.word	0xe000ed04
 8008c74:	2002b6dc 	.word	0x2002b6dc
 8008c78:	2002b6d8 	.word	0x2002b6d8
 8008c7c:	2002b278 	.word	0x2002b278

08008c80 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c82:	4b16      	ldr	r3, [pc, #88]	; (8008cdc <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8008c84:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c86:	4e16      	ldr	r6, [pc, #88]	; (8008ce0 <prvAddCurrentTaskToDelayedList+0x60>)
{
 8008c88:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8008c8a:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c8c:	6830      	ldr	r0, [r6, #0]
 8008c8e:	3004      	adds	r0, #4
 8008c90:	f7fe ff59 	bl	8007b46 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c94:	1c63      	adds	r3, r4, #1
 8008c96:	4633      	mov	r3, r6
 8008c98:	d107      	bne.n	8008caa <prvAddCurrentTaskToDelayedList+0x2a>
 8008c9a:	b137      	cbz	r7, 8008caa <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c9c:	6831      	ldr	r1, [r6, #0]
 8008c9e:	4811      	ldr	r0, [pc, #68]	; (8008ce4 <prvAddCurrentTaskToDelayedList+0x64>)
 8008ca0:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ca2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ca6:	f7fe bf2b 	b.w	8007b00 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008caa:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8008cb0:	d307      	bcc.n	8008cc2 <prvAddCurrentTaskToDelayedList+0x42>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cb2:	4a0d      	ldr	r2, [pc, #52]	; (8008ce8 <prvAddCurrentTaskToDelayedList+0x68>)
 8008cb4:	6810      	ldr	r0, [r2, #0]
 8008cb6:	6819      	ldr	r1, [r3, #0]
}
 8008cb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cbc:	3104      	adds	r1, #4
 8008cbe:	f7fe bf2b 	b.w	8007b18 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cc2:	4a0a      	ldr	r2, [pc, #40]	; (8008cec <prvAddCurrentTaskToDelayedList+0x6c>)
 8008cc4:	6810      	ldr	r0, [r2, #0]
 8008cc6:	6819      	ldr	r1, [r3, #0]
 8008cc8:	3104      	adds	r1, #4
 8008cca:	f7fe ff25 	bl	8007b18 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008cce:	4b08      	ldr	r3, [pc, #32]	; (8008cf0 <prvAddCurrentTaskToDelayedList+0x70>)
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	42a2      	cmp	r2, r4
 8008cd4:	d900      	bls.n	8008cd8 <prvAddCurrentTaskToDelayedList+0x58>
					xNextTaskUnblockTime = xTimeToWake;
 8008cd6:	601c      	str	r4, [r3, #0]
}
 8008cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	2002b760 	.word	0x2002b760
 8008ce0:	2002b26c 	.word	0x2002b26c
 8008ce4:	2002b738 	.word	0x2002b738
 8008ce8:	2002b274 	.word	0x2002b274
 8008cec:	2002b270 	.word	0x2002b270
 8008cf0:	2002b718 	.word	0x2002b718

08008cf4 <xTaskCreateStatic>:
	{
 8008cf4:	b570      	push	{r4, r5, r6, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008cfc:	b955      	cbnz	r5, 8008d14 <xTaskCreateStatic+0x20>
 8008cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d02:	b672      	cpsid	i
 8008d04:	f383 8811 	msr	BASEPRI, r3
 8008d08:	f3bf 8f6f 	isb	sy
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	b662      	cpsie	i
 8008d12:	e7fe      	b.n	8008d12 <xTaskCreateStatic+0x1e>
		configASSERT( pxTaskBuffer != NULL );
 8008d14:	b954      	cbnz	r4, 8008d2c <xTaskCreateStatic+0x38>
 8008d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1a:	b672      	cpsid	i
 8008d1c:	f383 8811 	msr	BASEPRI, r3
 8008d20:	f3bf 8f6f 	isb	sy
 8008d24:	f3bf 8f4f 	dsb	sy
 8008d28:	b662      	cpsie	i
 8008d2a:	e7fe      	b.n	8008d2a <xTaskCreateStatic+0x36>
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d2c:	2660      	movs	r6, #96	; 0x60
 8008d2e:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d30:	9e05      	ldr	r6, [sp, #20]
 8008d32:	2e60      	cmp	r6, #96	; 0x60
 8008d34:	d00a      	beq.n	8008d4c <xTaskCreateStatic+0x58>
 8008d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3a:	b672      	cpsid	i
 8008d3c:	f383 8811 	msr	BASEPRI, r3
 8008d40:	f3bf 8f6f 	isb	sy
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	b662      	cpsie	i
 8008d4a:	e7fe      	b.n	8008d4a <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d4c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d4e:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d50:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d52:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d56:	ad04      	add	r5, sp, #16
 8008d58:	9402      	str	r4, [sp, #8]
 8008d5a:	9501      	str	r5, [sp, #4]
 8008d5c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008d5e:	9500      	str	r5, [sp, #0]
 8008d60:	f7ff feec 	bl	8008b3c <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d64:	4620      	mov	r0, r4
 8008d66:	f7ff fe59 	bl	8008a1c <prvAddNewTaskToReadyList>
	}
 8008d6a:	9804      	ldr	r0, [sp, #16]
 8008d6c:	b006      	add	sp, #24
 8008d6e:	bd70      	pop	{r4, r5, r6, pc}

08008d70 <xTaskCreate>:
	{
 8008d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d74:	4607      	mov	r7, r0
 8008d76:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d78:	0090      	lsls	r0, r2, #2
	{
 8008d7a:	4688      	mov	r8, r1
 8008d7c:	4616      	mov	r6, r2
 8008d7e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d80:	f7fe fde6 	bl	8007950 <pvPortMalloc>
			if( pxStack != NULL )
 8008d84:	4605      	mov	r5, r0
 8008d86:	b1e8      	cbz	r0, 8008dc4 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d88:	2060      	movs	r0, #96	; 0x60
 8008d8a:	f7fe fde1 	bl	8007950 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008d8e:	4604      	mov	r4, r0
 8008d90:	b1a8      	cbz	r0, 8008dbe <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d92:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 8008d94:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d96:	4632      	mov	r2, r6
 8008d98:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008d9a:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008d9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008da0:	9002      	str	r0, [sp, #8]
 8008da2:	4638      	mov	r0, r7
 8008da4:	9301      	str	r3, [sp, #4]
 8008da6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008da8:	9300      	str	r3, [sp, #0]
 8008daa:	464b      	mov	r3, r9
 8008dac:	f7ff fec6 	bl	8008b3c <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008db0:	4620      	mov	r0, r4
 8008db2:	f7ff fe33 	bl	8008a1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008db6:	2001      	movs	r0, #1
	}
 8008db8:	b005      	add	sp, #20
 8008dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	f7fe fe54 	bl	8007a6c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008dc4:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8008dc8:	e7f6      	b.n	8008db8 <xTaskCreate+0x48>
	...

08008dcc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008dcc:	4a02      	ldr	r2, [pc, #8]	; (8008dd8 <vTaskSuspendAll+0xc>)
 8008dce:	6813      	ldr	r3, [r2, #0]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	6013      	str	r3, [r2, #0]
}
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	2002b6e4 	.word	0x2002b6e4

08008ddc <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008ddc:	4b01      	ldr	r3, [pc, #4]	; (8008de4 <xTaskGetTickCount+0x8>)
 8008dde:	6818      	ldr	r0, [r3, #0]
}
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	2002b760 	.word	0x2002b760

08008de8 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008de8:	4b40      	ldr	r3, [pc, #256]	; (8008eec <xTaskIncrementTick+0x104>)
 8008dea:	681b      	ldr	r3, [r3, #0]
{
 8008dec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d174      	bne.n	8008ede <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008df4:	4b3e      	ldr	r3, [pc, #248]	; (8008ef0 <xTaskIncrementTick+0x108>)
 8008df6:	681d      	ldr	r5, [r3, #0]
 8008df8:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8008dfa:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008dfc:	b9cd      	cbnz	r5, 8008e32 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8008dfe:	4b3d      	ldr	r3, [pc, #244]	; (8008ef4 <xTaskIncrementTick+0x10c>)
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	6812      	ldr	r2, [r2, #0]
 8008e04:	b152      	cbz	r2, 8008e1c <xTaskIncrementTick+0x34>
 8008e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0a:	b672      	cpsid	i
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	b662      	cpsie	i
 8008e1a:	e7fe      	b.n	8008e1a <xTaskIncrementTick+0x32>
 8008e1c:	4a36      	ldr	r2, [pc, #216]	; (8008ef8 <xTaskIncrementTick+0x110>)
 8008e1e:	6819      	ldr	r1, [r3, #0]
 8008e20:	6810      	ldr	r0, [r2, #0]
 8008e22:	6018      	str	r0, [r3, #0]
 8008e24:	6011      	str	r1, [r2, #0]
 8008e26:	4a35      	ldr	r2, [pc, #212]	; (8008efc <xTaskIncrementTick+0x114>)
 8008e28:	6813      	ldr	r3, [r2, #0]
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	6013      	str	r3, [r2, #0]
 8008e2e:	f7ff fe73 	bl	8008b18 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e32:	4e33      	ldr	r6, [pc, #204]	; (8008f00 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8008e34:	2400      	movs	r4, #0
 8008e36:	4f33      	ldr	r7, [pc, #204]	; (8008f04 <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e38:	6833      	ldr	r3, [r6, #0]
 8008e3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8008f10 <xTaskIncrementTick+0x128>
 8008e3e:	42ab      	cmp	r3, r5
 8008e40:	d911      	bls.n	8008e66 <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e42:	f8d8 3000 	ldr.w	r3, [r8]
 8008e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e48:	2314      	movs	r3, #20
 8008e4a:	4353      	muls	r3, r2
 8008e4c:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	bf28      	it	cs
 8008e52:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8008e54:	4b2c      	ldr	r3, [pc, #176]	; (8008f08 <xTaskIncrementTick+0x120>)
 8008e56:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8008e58:	2b00      	cmp	r3, #0
}
 8008e5a:	bf0c      	ite	eq
 8008e5c:	4620      	moveq	r0, r4
 8008e5e:	2001      	movne	r0, #1
 8008e60:	b003      	add	sp, #12
 8008e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e66:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008ef4 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 8008e6a:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8008f14 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e6e:	f8d9 3000 	ldr.w	r3, [r9]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	b91b      	cbnz	r3, 8008e7e <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e76:	f04f 33ff 	mov.w	r3, #4294967295
 8008e7a:	6033      	str	r3, [r6, #0]
					break;
 8008e7c:	e7e1      	b.n	8008e42 <xTaskIncrementTick+0x5a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e7e:	f8d9 3000 	ldr.w	r3, [r9]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e88:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8008e8c:	4295      	cmp	r5, r2
 8008e8e:	d201      	bcs.n	8008e94 <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 8008e90:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008e92:	e7d6      	b.n	8008e42 <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e94:	f10b 0104 	add.w	r1, fp, #4
 8008e98:	4608      	mov	r0, r1
 8008e9a:	9101      	str	r1, [sp, #4]
 8008e9c:	f7fe fe53 	bl	8007b46 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ea0:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8008ea4:	9901      	ldr	r1, [sp, #4]
 8008ea6:	b122      	cbz	r2, 8008eb2 <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ea8:	f10b 0018 	add.w	r0, fp, #24
 8008eac:	f7fe fe4b 	bl	8007b46 <uxListRemove>
 8008eb0:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8008eb2:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8008eb6:	f8da 2000 	ldr.w	r2, [sl]
 8008eba:	4290      	cmp	r0, r2
 8008ebc:	d901      	bls.n	8008ec2 <xTaskIncrementTick+0xda>
 8008ebe:	f8ca 0000 	str.w	r0, [sl]
 8008ec2:	2314      	movs	r3, #20
 8008ec4:	fb03 7000 	mla	r0, r3, r0, r7
 8008ec8:	f7fe fe1a 	bl	8007b00 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ecc:	f8d8 1000 	ldr.w	r1, [r8]
 8008ed0:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8008ed4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	bf28      	it	cs
 8008eda:	2401      	movcs	r4, #1
 8008edc:	e7c7      	b.n	8008e6e <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 8008ede:	4a0b      	ldr	r2, [pc, #44]	; (8008f0c <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 8008ee0:	2400      	movs	r4, #0
		++uxPendedTicks;
 8008ee2:	6813      	ldr	r3, [r2, #0]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	6013      	str	r3, [r2, #0]
 8008ee8:	e7b4      	b.n	8008e54 <xTaskIncrementTick+0x6c>
 8008eea:	bf00      	nop
 8008eec:	2002b6e4 	.word	0x2002b6e4
 8008ef0:	2002b760 	.word	0x2002b760
 8008ef4:	2002b270 	.word	0x2002b270
 8008ef8:	2002b274 	.word	0x2002b274
 8008efc:	2002b71c 	.word	0x2002b71c
 8008f00:	2002b718 	.word	0x2002b718
 8008f04:	2002b278 	.word	0x2002b278
 8008f08:	2002b764 	.word	0x2002b764
 8008f0c:	2002b6e0 	.word	0x2002b6e0
 8008f10:	2002b26c 	.word	0x2002b26c
 8008f14:	2002b6ec 	.word	0x2002b6ec

08008f18 <xTaskResumeAll>:
{
 8008f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8008f1a:	4c31      	ldr	r4, [pc, #196]	; (8008fe0 <xTaskResumeAll+0xc8>)
 8008f1c:	6823      	ldr	r3, [r4, #0]
 8008f1e:	b953      	cbnz	r3, 8008f36 <xTaskResumeAll+0x1e>
 8008f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f24:	b672      	cpsid	i
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	b662      	cpsie	i
 8008f34:	e7fe      	b.n	8008f34 <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 8008f36:	f7fe fe7d 	bl	8007c34 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f40:	6824      	ldr	r4, [r4, #0]
 8008f42:	b12c      	cbz	r4, 8008f50 <xTaskResumeAll+0x38>
BaseType_t xAlreadyYielded = pdFALSE;
 8008f44:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008f46:	f7fe fe9b 	bl	8007c80 <vPortExitCritical>
}
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	b003      	add	sp, #12
 8008f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f50:	4b24      	ldr	r3, [pc, #144]	; (8008fe4 <xTaskResumeAll+0xcc>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d0f5      	beq.n	8008f44 <xTaskResumeAll+0x2c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f58:	4d23      	ldr	r5, [pc, #140]	; (8008fe8 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8008f5a:	4e24      	ldr	r6, [pc, #144]	; (8008fec <xTaskResumeAll+0xd4>)
 8008f5c:	4f24      	ldr	r7, [pc, #144]	; (8008ff0 <xTaskResumeAll+0xd8>)
 8008f5e:	e01e      	b.n	8008f9e <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f60:	68eb      	ldr	r3, [r5, #12]
 8008f62:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f64:	f104 0018 	add.w	r0, r4, #24
 8008f68:	f7fe fded 	bl	8007b46 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f6c:	1d21      	adds	r1, r4, #4
 8008f6e:	4608      	mov	r0, r1
 8008f70:	9101      	str	r1, [sp, #4]
 8008f72:	f7fe fde8 	bl	8007b46 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008f78:	6832      	ldr	r2, [r6, #0]
 8008f7a:	9901      	ldr	r1, [sp, #4]
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d900      	bls.n	8008f82 <xTaskResumeAll+0x6a>
 8008f80:	6033      	str	r3, [r6, #0]
 8008f82:	2014      	movs	r0, #20
 8008f84:	fb00 7003 	mla	r0, r0, r3, r7
 8008f88:	f7fe fdba 	bl	8007b00 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f8c:	4b19      	ldr	r3, [pc, #100]	; (8008ff4 <xTaskResumeAll+0xdc>)
 8008f8e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d302      	bcc.n	8008f9e <xTaskResumeAll+0x86>
						xYieldPending = pdTRUE;
 8008f98:	4b17      	ldr	r3, [pc, #92]	; (8008ff8 <xTaskResumeAll+0xe0>)
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f9e:	682b      	ldr	r3, [r5, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1dd      	bne.n	8008f60 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8008fa4:	b10c      	cbz	r4, 8008faa <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 8008fa6:	f7ff fdb7 	bl	8008b18 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008faa:	4d14      	ldr	r5, [pc, #80]	; (8008ffc <xTaskResumeAll+0xe4>)
 8008fac:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008fae:	b144      	cbz	r4, 8008fc2 <xTaskResumeAll+0xaa>
								xYieldPending = pdTRUE;
 8008fb0:	4e11      	ldr	r6, [pc, #68]	; (8008ff8 <xTaskResumeAll+0xe0>)
 8008fb2:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8008fb4:	f7ff ff18 	bl	8008de8 <xTaskIncrementTick>
 8008fb8:	b100      	cbz	r0, 8008fbc <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8008fba:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008fbc:	3c01      	subs	r4, #1
 8008fbe:	d1f9      	bne.n	8008fb4 <xTaskResumeAll+0x9c>
						uxPendedTicks = 0;
 8008fc0:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8008fc2:	4b0d      	ldr	r3, [pc, #52]	; (8008ff8 <xTaskResumeAll+0xe0>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d0bc      	beq.n	8008f44 <xTaskResumeAll+0x2c>
					taskYIELD_IF_USING_PREEMPTION();
 8008fca:	4b0d      	ldr	r3, [pc, #52]	; (8009000 <xTaskResumeAll+0xe8>)
 8008fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fd0:	601a      	str	r2, [r3, #0]
 8008fd2:	f3bf 8f4f 	dsb	sy
 8008fd6:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008fda:	2401      	movs	r4, #1
 8008fdc:	e7b3      	b.n	8008f46 <xTaskResumeAll+0x2e>
 8008fde:	bf00      	nop
 8008fe0:	2002b6e4 	.word	0x2002b6e4
 8008fe4:	2002b6d8 	.word	0x2002b6d8
 8008fe8:	2002b720 	.word	0x2002b720
 8008fec:	2002b6ec 	.word	0x2002b6ec
 8008ff0:	2002b278 	.word	0x2002b278
 8008ff4:	2002b26c 	.word	0x2002b26c
 8008ff8:	2002b764 	.word	0x2002b764
 8008ffc:	2002b6e0 	.word	0x2002b6e0
 8009000:	e000ed04 	.word	0xe000ed04

08009004 <vTaskDelay>:
	{
 8009004:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009006:	b940      	cbnz	r0, 800901a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8009008:	4b0f      	ldr	r3, [pc, #60]	; (8009048 <vTaskDelay+0x44>)
 800900a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800900e:	601a      	str	r2, [r3, #0]
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	f3bf 8f6f 	isb	sy
	}
 8009018:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800901a:	4b0c      	ldr	r3, [pc, #48]	; (800904c <vTaskDelay+0x48>)
 800901c:	6819      	ldr	r1, [r3, #0]
 800901e:	b151      	cbz	r1, 8009036 <vTaskDelay+0x32>
 8009020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009024:	b672      	cpsid	i
 8009026:	f383 8811 	msr	BASEPRI, r3
 800902a:	f3bf 8f6f 	isb	sy
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	b662      	cpsie	i
 8009034:	e7fe      	b.n	8009034 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8009036:	f7ff fec9 	bl	8008dcc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800903a:	f7ff fe21 	bl	8008c80 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800903e:	f7ff ff6b 	bl	8008f18 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009042:	2800      	cmp	r0, #0
 8009044:	d0e0      	beq.n	8009008 <vTaskDelay+0x4>
 8009046:	e7e7      	b.n	8009018 <vTaskDelay+0x14>
 8009048:	e000ed04 	.word	0xe000ed04
 800904c:	2002b6e4 	.word	0x2002b6e4

08009050 <vTaskSetApplicationTaskTag>:
	{
 8009050:	b538      	push	{r3, r4, r5, lr}
 8009052:	460d      	mov	r5, r1
		if( xTask == NULL )
 8009054:	4604      	mov	r4, r0
 8009056:	b908      	cbnz	r0, 800905c <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8009058:	4b04      	ldr	r3, [pc, #16]	; (800906c <vTaskSetApplicationTaskTag+0x1c>)
 800905a:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800905c:	f7fe fdea 	bl	8007c34 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8009060:	6565      	str	r5, [r4, #84]	; 0x54
	}
 8009062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 8009066:	f7fe be0b 	b.w	8007c80 <vPortExitCritical>
 800906a:	bf00      	nop
 800906c:	2002b26c 	.word	0x2002b26c

08009070 <xTaskCallApplicationTaskHook>:
	{
 8009070:	4603      	mov	r3, r0
 8009072:	4608      	mov	r0, r1
		if( xTask == NULL )
 8009074:	b90b      	cbnz	r3, 800907a <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 8009076:	4b03      	ldr	r3, [pc, #12]	; (8009084 <xTaskCallApplicationTaskHook+0x14>)
 8009078:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800907a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800907c:	b103      	cbz	r3, 8009080 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800907e:	4718      	bx	r3
	}
 8009080:	4618      	mov	r0, r3
 8009082:	4770      	bx	lr
 8009084:	2002b26c 	.word	0x2002b26c

08009088 <vTaskStartScheduler>:
{
 8009088:	b510      	push	{r4, lr}
 800908a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800908c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800908e:	aa07      	add	r2, sp, #28
 8009090:	a906      	add	r1, sp, #24
 8009092:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009094:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009098:	f7fe fc1e 	bl	80078d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800909c:	9b05      	ldr	r3, [sp, #20]
 800909e:	9a07      	ldr	r2, [sp, #28]
 80090a0:	9302      	str	r3, [sp, #8]
 80090a2:	9b06      	ldr	r3, [sp, #24]
 80090a4:	4919      	ldr	r1, [pc, #100]	; (800910c <vTaskStartScheduler+0x84>)
 80090a6:	481a      	ldr	r0, [pc, #104]	; (8009110 <vTaskStartScheduler+0x88>)
 80090a8:	e9cd 4300 	strd	r4, r3, [sp]
 80090ac:	4623      	mov	r3, r4
 80090ae:	f7ff fe21 	bl	8008cf4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80090b2:	b1e0      	cbz	r0, 80090ee <vTaskStartScheduler+0x66>
			xReturn = xTimerCreateTimerTask();
 80090b4:	f000 faa6 	bl	8009604 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80090b8:	2801      	cmp	r0, #1
 80090ba:	d11a      	bne.n	80090f2 <vTaskStartScheduler+0x6a>
 80090bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c0:	b672      	cpsid	i
 80090c2:	f383 8811 	msr	BASEPRI, r3
 80090c6:	f3bf 8f6f 	isb	sy
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 80090d0:	4b10      	ldr	r3, [pc, #64]	; (8009114 <vTaskStartScheduler+0x8c>)
 80090d2:	f04f 32ff 	mov.w	r2, #4294967295
		traceTASK_SWITCHED_IN();
 80090d6:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 80090d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80090da:	4b0f      	ldr	r3, [pc, #60]	; (8009118 <vTaskStartScheduler+0x90>)
 80090dc:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80090de:	4b0f      	ldr	r3, [pc, #60]	; (800911c <vTaskStartScheduler+0x94>)
 80090e0:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 80090e2:	4b0f      	ldr	r3, [pc, #60]	; (8009120 <vTaskStartScheduler+0x98>)
 80090e4:	6818      	ldr	r0, [r3, #0]
 80090e6:	f7ff ffc3 	bl	8009070 <xTaskCallApplicationTaskHook>
		if( xPortStartScheduler() != pdFALSE )
 80090ea:	f7fe fe45 	bl	8007d78 <xPortStartScheduler>
}
 80090ee:	b008      	add	sp, #32
 80090f0:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80090f2:	3001      	adds	r0, #1
 80090f4:	d1fb      	bne.n	80090ee <vTaskStartScheduler+0x66>
 80090f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fa:	b672      	cpsid	i
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	b662      	cpsie	i
 800910a:	e7fe      	b.n	800910a <vTaskStartScheduler+0x82>
 800910c:	0802d7f8 	.word	0x0802d7f8
 8009110:	08008c19 	.word	0x08008c19
 8009114:	2002b718 	.word	0x2002b718
 8009118:	2002b734 	.word	0x2002b734
 800911c:	2002b760 	.word	0x2002b760
 8009120:	2002b26c 	.word	0x2002b26c

08009124 <vTaskSwitchContext>:
{
 8009124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009126:	4b1e      	ldr	r3, [pc, #120]	; (80091a0 <vTaskSwitchContext+0x7c>)
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	4b1e      	ldr	r3, [pc, #120]	; (80091a4 <vTaskSwitchContext+0x80>)
 800912c:	b112      	cbz	r2, 8009134 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800912e:	2201      	movs	r2, #1
 8009130:	601a      	str	r2, [r3, #0]
}
 8009132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 8009134:	4e1c      	ldr	r6, [pc, #112]	; (80091a8 <vTaskSwitchContext+0x84>)
 8009136:	2101      	movs	r1, #1
		xYieldPending = pdFALSE;
 8009138:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800913a:	6830      	ldr	r0, [r6, #0]
 800913c:	f7ff ff98 	bl	8009070 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009140:	4d1a      	ldr	r5, [pc, #104]	; (80091ac <vTaskSwitchContext+0x88>)
 8009142:	4a1b      	ldr	r2, [pc, #108]	; (80091b0 <vTaskSwitchContext+0x8c>)
 8009144:	f04f 0c14 	mov.w	ip, #20
 8009148:	682b      	ldr	r3, [r5, #0]
 800914a:	4617      	mov	r7, r2
 800914c:	fb0c f103 	mul.w	r1, ip, r3
 8009150:	5854      	ldr	r4, [r2, r1]
 8009152:	1850      	adds	r0, r2, r1
 8009154:	b1ac      	cbz	r4, 8009182 <vTaskSwitchContext+0x5e>
 8009156:	6844      	ldr	r4, [r0, #4]
 8009158:	3108      	adds	r1, #8
 800915a:	6864      	ldr	r4, [r4, #4]
 800915c:	440a      	add	r2, r1
		traceTASK_SWITCHED_IN();
 800915e:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009160:	4294      	cmp	r4, r2
 8009162:	6044      	str	r4, [r0, #4]
 8009164:	bf04      	itt	eq
 8009166:	6862      	ldreq	r2, [r4, #4]
 8009168:	6042      	streq	r2, [r0, #4]
 800916a:	2214      	movs	r2, #20
 800916c:	fb02 7203 	mla	r2, r2, r3, r7
 8009170:	6852      	ldr	r2, [r2, #4]
 8009172:	68d2      	ldr	r2, [r2, #12]
 8009174:	6032      	str	r2, [r6, #0]
 8009176:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
 8009178:	6830      	ldr	r0, [r6, #0]
}
 800917a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800917e:	f7ff bf77 	b.w	8009070 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009182:	b953      	cbnz	r3, 800919a <vTaskSwitchContext+0x76>
 8009184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009188:	b672      	cpsid	i
 800918a:	f383 8811 	msr	BASEPRI, r3
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f3bf 8f4f 	dsb	sy
 8009196:	b662      	cpsie	i
 8009198:	e7fe      	b.n	8009198 <vTaskSwitchContext+0x74>
 800919a:	3b01      	subs	r3, #1
 800919c:	e7d6      	b.n	800914c <vTaskSwitchContext+0x28>
 800919e:	bf00      	nop
 80091a0:	2002b6e4 	.word	0x2002b6e4
 80091a4:	2002b764 	.word	0x2002b764
 80091a8:	2002b26c 	.word	0x2002b26c
 80091ac:	2002b6ec 	.word	0x2002b6ec
 80091b0:	2002b278 	.word	0x2002b278

080091b4 <vTaskPlaceOnEventList>:
{
 80091b4:	b510      	push	{r4, lr}
 80091b6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80091b8:	b950      	cbnz	r0, 80091d0 <vTaskPlaceOnEventList+0x1c>
 80091ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091be:	b672      	cpsid	i
 80091c0:	f383 8811 	msr	BASEPRI, r3
 80091c4:	f3bf 8f6f 	isb	sy
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	b662      	cpsie	i
 80091ce:	e7fe      	b.n	80091ce <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80091d0:	4b05      	ldr	r3, [pc, #20]	; (80091e8 <vTaskPlaceOnEventList+0x34>)
 80091d2:	6819      	ldr	r1, [r3, #0]
 80091d4:	3118      	adds	r1, #24
 80091d6:	f7fe fc9f 	bl	8007b18 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80091da:	4620      	mov	r0, r4
 80091dc:	2101      	movs	r1, #1
}
 80091de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80091e2:	f7ff bd4d 	b.w	8008c80 <prvAddCurrentTaskToDelayedList>
 80091e6:	bf00      	nop
 80091e8:	2002b26c 	.word	0x2002b26c

080091ec <vTaskPlaceOnEventListRestricted>:
	{
 80091ec:	b538      	push	{r3, r4, r5, lr}
 80091ee:	460d      	mov	r5, r1
 80091f0:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 80091f2:	b950      	cbnz	r0, 800920a <vTaskPlaceOnEventListRestricted+0x1e>
 80091f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f8:	b672      	cpsid	i
 80091fa:	f383 8811 	msr	BASEPRI, r3
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	b662      	cpsie	i
 8009208:	e7fe      	b.n	8009208 <vTaskPlaceOnEventListRestricted+0x1c>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800920a:	4b07      	ldr	r3, [pc, #28]	; (8009228 <vTaskPlaceOnEventListRestricted+0x3c>)
 800920c:	6819      	ldr	r1, [r3, #0]
 800920e:	3118      	adds	r1, #24
 8009210:	f7fe fc76 	bl	8007b00 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8009214:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009216:	4621      	mov	r1, r4
 8009218:	bf0c      	ite	eq
 800921a:	4628      	moveq	r0, r5
 800921c:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8009220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009224:	f7ff bd2c 	b.w	8008c80 <prvAddCurrentTaskToDelayedList>
 8009228:	2002b26c 	.word	0x2002b26c

0800922c <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800922c:	68c3      	ldr	r3, [r0, #12]
{
 800922e:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009230:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8009232:	b954      	cbnz	r4, 800924a <xTaskRemoveFromEventList+0x1e>
 8009234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009238:	b672      	cpsid	i
 800923a:	f383 8811 	msr	BASEPRI, r3
 800923e:	f3bf 8f6f 	isb	sy
 8009242:	f3bf 8f4f 	dsb	sy
 8009246:	b662      	cpsie	i
 8009248:	e7fe      	b.n	8009248 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800924a:	f104 0118 	add.w	r1, r4, #24
 800924e:	4608      	mov	r0, r1
 8009250:	9101      	str	r1, [sp, #4]
 8009252:	f7fe fc78 	bl	8007b46 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009256:	4b12      	ldr	r3, [pc, #72]	; (80092a0 <xTaskRemoveFromEventList+0x74>)
 8009258:	9901      	ldr	r1, [sp, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	b9e3      	cbnz	r3, 8009298 <xTaskRemoveFromEventList+0x6c>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800925e:	1d21      	adds	r1, r4, #4
 8009260:	4608      	mov	r0, r1
 8009262:	9101      	str	r1, [sp, #4]
 8009264:	f7fe fc6f 	bl	8007b46 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009268:	4a0e      	ldr	r2, [pc, #56]	; (80092a4 <xTaskRemoveFromEventList+0x78>)
 800926a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800926c:	6810      	ldr	r0, [r2, #0]
 800926e:	9901      	ldr	r1, [sp, #4]
 8009270:	4283      	cmp	r3, r0
 8009272:	d900      	bls.n	8009276 <xTaskRemoveFromEventList+0x4a>
 8009274:	6013      	str	r3, [r2, #0]
 8009276:	4a0c      	ldr	r2, [pc, #48]	; (80092a8 <xTaskRemoveFromEventList+0x7c>)
 8009278:	2014      	movs	r0, #20
 800927a:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800927e:	f7fe fc3f 	bl	8007b00 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009282:	4b0a      	ldr	r3, [pc, #40]	; (80092ac <xTaskRemoveFromEventList+0x80>)
 8009284:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928a:	429a      	cmp	r2, r3
 800928c:	d906      	bls.n	800929c <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 800928e:	2001      	movs	r0, #1
 8009290:	4b07      	ldr	r3, [pc, #28]	; (80092b0 <xTaskRemoveFromEventList+0x84>)
 8009292:	6018      	str	r0, [r3, #0]
}
 8009294:	b002      	add	sp, #8
 8009296:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009298:	4806      	ldr	r0, [pc, #24]	; (80092b4 <xTaskRemoveFromEventList+0x88>)
 800929a:	e7f0      	b.n	800927e <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
 800929c:	2000      	movs	r0, #0
	return xReturn;
 800929e:	e7f9      	b.n	8009294 <xTaskRemoveFromEventList+0x68>
 80092a0:	2002b6e4 	.word	0x2002b6e4
 80092a4:	2002b6ec 	.word	0x2002b6ec
 80092a8:	2002b278 	.word	0x2002b278
 80092ac:	2002b26c 	.word	0x2002b26c
 80092b0:	2002b764 	.word	0x2002b764
 80092b4:	2002b720 	.word	0x2002b720

080092b8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80092b8:	4b03      	ldr	r3, [pc, #12]	; (80092c8 <vTaskInternalSetTimeOutState+0x10>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80092be:	4b03      	ldr	r3, [pc, #12]	; (80092cc <vTaskInternalSetTimeOutState+0x14>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	6043      	str	r3, [r0, #4]
}
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	2002b71c 	.word	0x2002b71c
 80092cc:	2002b760 	.word	0x2002b760

080092d0 <xTaskCheckForTimeOut>:
{
 80092d0:	b570      	push	{r4, r5, r6, lr}
 80092d2:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80092d4:	4605      	mov	r5, r0
 80092d6:	b950      	cbnz	r0, 80092ee <xTaskCheckForTimeOut+0x1e>
 80092d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092dc:	b672      	cpsid	i
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	b662      	cpsie	i
 80092ec:	e7fe      	b.n	80092ec <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 80092ee:	b951      	cbnz	r1, 8009306 <xTaskCheckForTimeOut+0x36>
 80092f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f4:	b672      	cpsid	i
 80092f6:	f383 8811 	msr	BASEPRI, r3
 80092fa:	f3bf 8f6f 	isb	sy
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	b662      	cpsie	i
 8009304:	e7fe      	b.n	8009304 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8009306:	f7fe fc95 	bl	8007c34 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800930a:	4b0f      	ldr	r3, [pc, #60]	; (8009348 <xTaskCheckForTimeOut+0x78>)
 800930c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800930e:	6823      	ldr	r3, [r4, #0]
 8009310:	1c5a      	adds	r2, r3, #1
 8009312:	d010      	beq.n	8009336 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009314:	480d      	ldr	r0, [pc, #52]	; (800934c <xTaskCheckForTimeOut+0x7c>)
 8009316:	682e      	ldr	r6, [r5, #0]
 8009318:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800931a:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800931c:	4286      	cmp	r6, r0
 800931e:	d001      	beq.n	8009324 <xTaskCheckForTimeOut+0x54>
 8009320:	428a      	cmp	r2, r1
 8009322:	d90f      	bls.n	8009344 <xTaskCheckForTimeOut+0x74>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009324:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009326:	4283      	cmp	r3, r0
 8009328:	d90a      	bls.n	8009340 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= xElapsedTime;
 800932a:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800932c:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800932e:	4413      	add	r3, r2
 8009330:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009332:	f7ff ffc1 	bl	80092b8 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8009336:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009338:	f7fe fca2 	bl	8007c80 <vPortExitCritical>
}
 800933c:	4620      	mov	r0, r4
 800933e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8009340:	2300      	movs	r3, #0
 8009342:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009344:	2401      	movs	r4, #1
 8009346:	e7f7      	b.n	8009338 <xTaskCheckForTimeOut+0x68>
 8009348:	2002b760 	.word	0x2002b760
 800934c:	2002b71c 	.word	0x2002b71c

08009350 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009350:	4b01      	ldr	r3, [pc, #4]	; (8009358 <vTaskMissedYield+0x8>)
 8009352:	2201      	movs	r2, #1
 8009354:	601a      	str	r2, [r3, #0]
}
 8009356:	4770      	bx	lr
 8009358:	2002b764 	.word	0x2002b764

0800935c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800935c:	4b01      	ldr	r3, [pc, #4]	; (8009364 <xTaskGetCurrentTaskHandle+0x8>)
 800935e:	6818      	ldr	r0, [r3, #0]
	}
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	2002b26c 	.word	0x2002b26c

08009368 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009368:	4b05      	ldr	r3, [pc, #20]	; (8009380 <xTaskGetSchedulerState+0x18>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	b133      	cbz	r3, 800937c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800936e:	4b05      	ldr	r3, [pc, #20]	; (8009384 <xTaskGetSchedulerState+0x1c>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8009374:	bf0c      	ite	eq
 8009376:	2002      	moveq	r0, #2
 8009378:	2000      	movne	r0, #0
 800937a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800937c:	2001      	movs	r0, #1
	}
 800937e:	4770      	bx	lr
 8009380:	2002b734 	.word	0x2002b734
 8009384:	2002b6e4 	.word	0x2002b6e4

08009388 <xTaskPriorityInherit>:
	{
 8009388:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800938a:	4604      	mov	r4, r0
 800938c:	b348      	cbz	r0, 80093e2 <xTaskPriorityInherit+0x5a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800938e:	4a1c      	ldr	r2, [pc, #112]	; (8009400 <xTaskPriorityInherit+0x78>)
 8009390:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009392:	6811      	ldr	r1, [r2, #0]
 8009394:	4616      	mov	r6, r2
 8009396:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8009398:	428b      	cmp	r3, r1
 800939a:	d228      	bcs.n	80093ee <xTaskPriorityInherit+0x66>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800939c:	6982      	ldr	r2, [r0, #24]
 800939e:	2a00      	cmp	r2, #0
 80093a0:	db04      	blt.n	80093ac <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093a2:	6832      	ldr	r2, [r6, #0]
 80093a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80093a6:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80093aa:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80093ac:	2214      	movs	r2, #20
 80093ae:	4d15      	ldr	r5, [pc, #84]	; (8009404 <xTaskPriorityInherit+0x7c>)
 80093b0:	fb02 5303 	mla	r3, r2, r3, r5
 80093b4:	6962      	ldr	r2, [r4, #20]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d115      	bne.n	80093e6 <xTaskPriorityInherit+0x5e>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093ba:	1d21      	adds	r1, r4, #4
 80093bc:	4608      	mov	r0, r1
 80093be:	9101      	str	r1, [sp, #4]
 80093c0:	f7fe fbc1 	bl	8007b46 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80093c4:	6833      	ldr	r3, [r6, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80093c6:	4a10      	ldr	r2, [pc, #64]	; (8009408 <xTaskPriorityInherit+0x80>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80093c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80093ca:	6810      	ldr	r0, [r2, #0]
 80093cc:	9901      	ldr	r1, [sp, #4]
 80093ce:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80093d0:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80093d2:	d900      	bls.n	80093d6 <xTaskPriorityInherit+0x4e>
 80093d4:	6013      	str	r3, [r2, #0]
 80093d6:	2014      	movs	r0, #20
 80093d8:	fb00 5003 	mla	r0, r0, r3, r5
 80093dc:	f7fe fb90 	bl	8007b00 <vListInsertEnd>
				xReturn = pdTRUE;
 80093e0:	2001      	movs	r0, #1
	}
 80093e2:	b002      	add	sp, #8
 80093e4:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80093e6:	6833      	ldr	r3, [r6, #0]
 80093e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093ec:	e7f8      	b.n	80093e0 <xTaskPriorityInherit+0x58>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80093ee:	6813      	ldr	r3, [r2, #0]
 80093f0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80093f2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80093f4:	42a0      	cmp	r0, r4
 80093f6:	bf2c      	ite	cs
 80093f8:	2000      	movcs	r0, #0
 80093fa:	2001      	movcc	r0, #1
 80093fc:	e7f1      	b.n	80093e2 <xTaskPriorityInherit+0x5a>
 80093fe:	bf00      	nop
 8009400:	2002b26c 	.word	0x2002b26c
 8009404:	2002b278 	.word	0x2002b278
 8009408:	2002b6ec 	.word	0x2002b6ec

0800940c <xTaskPriorityDisinherit>:
	{
 800940c:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800940e:	b910      	cbnz	r0, 8009416 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8009410:	2000      	movs	r0, #0
	}
 8009412:	b002      	add	sp, #8
 8009414:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8009416:	4b1e      	ldr	r3, [pc, #120]	; (8009490 <xTaskPriorityDisinherit+0x84>)
 8009418:	681c      	ldr	r4, [r3, #0]
 800941a:	4284      	cmp	r4, r0
 800941c:	d00a      	beq.n	8009434 <xTaskPriorityDisinherit+0x28>
 800941e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009422:	b672      	cpsid	i
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	b662      	cpsie	i
 8009432:	e7fe      	b.n	8009432 <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 8009434:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8009436:	b953      	cbnz	r3, 800944e <xTaskPriorityDisinherit+0x42>
 8009438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943c:	b672      	cpsid	i
 800943e:	f383 8811 	msr	BASEPRI, r3
 8009442:	f3bf 8f6f 	isb	sy
 8009446:	f3bf 8f4f 	dsb	sy
 800944a:	b662      	cpsie	i
 800944c:	e7fe      	b.n	800944c <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800944e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8009450:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009452:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8009454:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009456:	4291      	cmp	r1, r2
 8009458:	d0da      	beq.n	8009410 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1d8      	bne.n	8009410 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800945e:	1d21      	adds	r1, r4, #4
 8009460:	4608      	mov	r0, r1
 8009462:	9101      	str	r1, [sp, #4]
 8009464:	f7fe fb6f 	bl	8007b46 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009468:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800946a:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800946c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009470:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009472:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009474:	4a07      	ldr	r2, [pc, #28]	; (8009494 <xTaskPriorityDisinherit+0x88>)
 8009476:	6810      	ldr	r0, [r2, #0]
 8009478:	4283      	cmp	r3, r0
 800947a:	d900      	bls.n	800947e <xTaskPriorityDisinherit+0x72>
 800947c:	6013      	str	r3, [r2, #0]
 800947e:	4a06      	ldr	r2, [pc, #24]	; (8009498 <xTaskPriorityDisinherit+0x8c>)
 8009480:	2014      	movs	r0, #20
 8009482:	fb00 2003 	mla	r0, r0, r3, r2
 8009486:	f7fe fb3b 	bl	8007b00 <vListInsertEnd>
					xReturn = pdTRUE;
 800948a:	2001      	movs	r0, #1
		return xReturn;
 800948c:	e7c1      	b.n	8009412 <xTaskPriorityDisinherit+0x6>
 800948e:	bf00      	nop
 8009490:	2002b26c 	.word	0x2002b26c
 8009494:	2002b6ec 	.word	0x2002b6ec
 8009498:	2002b278 	.word	0x2002b278

0800949c <vTaskPriorityDisinheritAfterTimeout>:
	{
 800949c:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800949e:	4604      	mov	r4, r0
 80094a0:	2800      	cmp	r0, #0
 80094a2:	d048      	beq.n	8009536 <vTaskPriorityDisinheritAfterTimeout+0x9a>
			configASSERT( pxTCB->uxMutexesHeld );
 80094a4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80094a6:	b952      	cbnz	r2, 80094be <vTaskPriorityDisinheritAfterTimeout+0x22>
 80094a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ac:	b672      	cpsid	i
 80094ae:	f383 8811 	msr	BASEPRI, r3
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	b662      	cpsie	i
 80094bc:	e7fe      	b.n	80094bc <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80094be:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80094c0:	4299      	cmp	r1, r3
 80094c2:	bf38      	it	cc
 80094c4:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 80094c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80094c8:	428b      	cmp	r3, r1
 80094ca:	d034      	beq.n	8009536 <vTaskPriorityDisinheritAfterTimeout+0x9a>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80094cc:	2a01      	cmp	r2, #1
 80094ce:	d132      	bne.n	8009536 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					configASSERT( pxTCB != pxCurrentTCB );
 80094d0:	4a1a      	ldr	r2, [pc, #104]	; (800953c <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 80094d2:	6812      	ldr	r2, [r2, #0]
 80094d4:	4282      	cmp	r2, r0
 80094d6:	d10a      	bne.n	80094ee <vTaskPriorityDisinheritAfterTimeout+0x52>
 80094d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094dc:	b672      	cpsid	i
 80094de:	f383 8811 	msr	BASEPRI, r3
 80094e2:	f3bf 8f6f 	isb	sy
 80094e6:	f3bf 8f4f 	dsb	sy
 80094ea:	b662      	cpsie	i
 80094ec:	e7fe      	b.n	80094ec <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094ee:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80094f0:	4d13      	ldr	r5, [pc, #76]	; (8009540 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094f2:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80094f4:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 80094f8:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80094fa:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094fe:	bfa8      	it	ge
 8009500:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009504:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009506:	bfa8      	it	ge
 8009508:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800950a:	429a      	cmp	r2, r3
 800950c:	d113      	bne.n	8009536 <vTaskPriorityDisinheritAfterTimeout+0x9a>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800950e:	1d01      	adds	r1, r0, #4
 8009510:	4608      	mov	r0, r1
 8009512:	9101      	str	r1, [sp, #4]
 8009514:	f7fe fb17 	bl	8007b46 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8009518:	4a0a      	ldr	r2, [pc, #40]	; (8009544 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 800951a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800951c:	6810      	ldr	r0, [r2, #0]
 800951e:	9901      	ldr	r1, [sp, #4]
 8009520:	4283      	cmp	r3, r0
 8009522:	d900      	bls.n	8009526 <vTaskPriorityDisinheritAfterTimeout+0x8a>
 8009524:	6013      	str	r3, [r2, #0]
 8009526:	2014      	movs	r0, #20
 8009528:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800952c:	b003      	add	sp, #12
 800952e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8009532:	f7fe bae5 	b.w	8007b00 <vListInsertEnd>
	}
 8009536:	b003      	add	sp, #12
 8009538:	bd30      	pop	{r4, r5, pc}
 800953a:	bf00      	nop
 800953c:	2002b26c 	.word	0x2002b26c
 8009540:	2002b278 	.word	0x2002b278
 8009544:	2002b6ec 	.word	0x2002b6ec

08009548 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8009548:	4b04      	ldr	r3, [pc, #16]	; (800955c <pvTaskIncrementMutexHeldCount+0x14>)
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	b11a      	cbz	r2, 8009556 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800954e:	6819      	ldr	r1, [r3, #0]
 8009550:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8009552:	3201      	adds	r2, #1
 8009554:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8009556:	6818      	ldr	r0, [r3, #0]
	}
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	2002b26c 	.word	0x2002b26c

08009560 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8009562:	4c11      	ldr	r4, [pc, #68]	; (80095a8 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8009564:	f7fe fb66 	bl	8007c34 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8009568:	6825      	ldr	r5, [r4, #0]
 800956a:	b9bd      	cbnz	r5, 800959c <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800956c:	4f0f      	ldr	r7, [pc, #60]	; (80095ac <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800956e:	4e10      	ldr	r6, [pc, #64]	; (80095b0 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8009570:	4638      	mov	r0, r7
 8009572:	f7fe fab7 	bl	8007ae4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009576:	4630      	mov	r0, r6
 8009578:	f7fe fab4 	bl	8007ae4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800957c:	4b0d      	ldr	r3, [pc, #52]	; (80095b4 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800957e:	4a0e      	ldr	r2, [pc, #56]	; (80095b8 <prvCheckForValidListAndQueue+0x58>)
 8009580:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8009582:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009584:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8009586:	4b0d      	ldr	r3, [pc, #52]	; (80095bc <prvCheckForValidListAndQueue+0x5c>)
 8009588:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800958a:	4b0d      	ldr	r3, [pc, #52]	; (80095c0 <prvCheckForValidListAndQueue+0x60>)
 800958c:	9500      	str	r5, [sp, #0]
 800958e:	f7fe fd59 	bl	8008044 <xQueueGenericCreateStatic>
 8009592:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009594:	b110      	cbz	r0, 800959c <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009596:	490b      	ldr	r1, [pc, #44]	; (80095c4 <prvCheckForValidListAndQueue+0x64>)
 8009598:	f7ff f9dc 	bl	8008954 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800959c:	b003      	add	sp, #12
 800959e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80095a2:	f7fe bb6d 	b.w	8007c80 <vPortExitCritical>
 80095a6:	bf00      	nop
 80095a8:	2002b88c 	.word	0x2002b88c
 80095ac:	2002b810 	.word	0x2002b810
 80095b0:	2002b824 	.word	0x2002b824
 80095b4:	2002b768 	.word	0x2002b768
 80095b8:	2002b770 	.word	0x2002b770
 80095bc:	2002b76c 	.word	0x2002b76c
 80095c0:	2002b83c 	.word	0x2002b83c
 80095c4:	0802d7fd 	.word	0x0802d7fd

080095c8 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 80095c8:	4291      	cmp	r1, r2
{
 80095ca:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80095cc:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095ce:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80095d0:	d80a      	bhi.n	80095e8 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095d2:	1ad2      	subs	r2, r2, r3
 80095d4:	6983      	ldr	r3, [r0, #24]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d20d      	bcs.n	80095f6 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80095da:	1d01      	adds	r1, r0, #4
 80095dc:	4b07      	ldr	r3, [pc, #28]	; (80095fc <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095de:	6818      	ldr	r0, [r3, #0]
 80095e0:	f7fe fa9a 	bl	8007b18 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80095e4:	2000      	movs	r0, #0
}
 80095e6:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d201      	bcs.n	80095f0 <prvInsertTimerInActiveList+0x28>
 80095ec:	4299      	cmp	r1, r3
 80095ee:	d202      	bcs.n	80095f6 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095f0:	1d01      	adds	r1, r0, #4
 80095f2:	4b03      	ldr	r3, [pc, #12]	; (8009600 <prvInsertTimerInActiveList+0x38>)
 80095f4:	e7f3      	b.n	80095de <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80095f6:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80095f8:	e7f5      	b.n	80095e6 <prvInsertTimerInActiveList+0x1e>
 80095fa:	bf00      	nop
 80095fc:	2002b76c 	.word	0x2002b76c
 8009600:	2002b768 	.word	0x2002b768

08009604 <xTimerCreateTimerTask>:
{
 8009604:	b510      	push	{r4, lr}
 8009606:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009608:	f7ff ffaa 	bl	8009560 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800960c:	4b13      	ldr	r3, [pc, #76]	; (800965c <xTimerCreateTimerTask+0x58>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	b1b3      	cbz	r3, 8009640 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009612:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009614:	aa07      	add	r2, sp, #28
 8009616:	a906      	add	r1, sp, #24
 8009618:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800961a:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800961e:	f7fe f967 	bl	80078f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009622:	9b05      	ldr	r3, [sp, #20]
 8009624:	9a07      	ldr	r2, [sp, #28]
 8009626:	9302      	str	r3, [sp, #8]
 8009628:	9b06      	ldr	r3, [sp, #24]
 800962a:	490d      	ldr	r1, [pc, #52]	; (8009660 <xTimerCreateTimerTask+0x5c>)
 800962c:	9301      	str	r3, [sp, #4]
 800962e:	2302      	movs	r3, #2
 8009630:	480c      	ldr	r0, [pc, #48]	; (8009664 <xTimerCreateTimerTask+0x60>)
 8009632:	9300      	str	r3, [sp, #0]
 8009634:	4623      	mov	r3, r4
 8009636:	f7ff fb5d 	bl	8008cf4 <xTaskCreateStatic>
 800963a:	4b0b      	ldr	r3, [pc, #44]	; (8009668 <xTimerCreateTimerTask+0x64>)
 800963c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800963e:	b950      	cbnz	r0, 8009656 <xTimerCreateTimerTask+0x52>
 8009640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009644:	b672      	cpsid	i
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	b662      	cpsie	i
	configASSERT( xReturn );
 8009654:	e7fe      	b.n	8009654 <xTimerCreateTimerTask+0x50>
}
 8009656:	2001      	movs	r0, #1
 8009658:	b008      	add	sp, #32
 800965a:	bd10      	pop	{r4, pc}
 800965c:	2002b88c 	.word	0x2002b88c
 8009660:	0802d802 	.word	0x0802d802
 8009664:	08009745 	.word	0x08009745
 8009668:	2002b890 	.word	0x2002b890

0800966c <xTimerGenericCommand>:
{
 800966c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800966e:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8009670:	4604      	mov	r4, r0
{
 8009672:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8009674:	b950      	cbnz	r0, 800968c <xTimerGenericCommand+0x20>
 8009676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967a:	b672      	cpsid	i
 800967c:	f383 8811 	msr	BASEPRI, r3
 8009680:	f3bf 8f6f 	isb	sy
 8009684:	f3bf 8f4f 	dsb	sy
 8009688:	b662      	cpsie	i
 800968a:	e7fe      	b.n	800968a <xTimerGenericCommand+0x1e>
	if( xTimerQueue != NULL )
 800968c:	4d0c      	ldr	r5, [pc, #48]	; (80096c0 <xTimerGenericCommand+0x54>)
 800968e:	6828      	ldr	r0, [r5, #0]
 8009690:	b178      	cbz	r0, 80096b2 <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009692:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009694:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009696:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800969a:	dc0c      	bgt.n	80096b6 <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800969c:	f7ff fe64 	bl	8009368 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80096a0:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80096a2:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80096a4:	4669      	mov	r1, sp
 80096a6:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80096a8:	bf0c      	ite	eq
 80096aa:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80096ac:	461a      	movne	r2, r3
 80096ae:	f7fe fd93 	bl	80081d8 <xQueueGenericSend>
}
 80096b2:	b004      	add	sp, #16
 80096b4:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80096b6:	2300      	movs	r3, #0
 80096b8:	4669      	mov	r1, sp
 80096ba:	f7fe fe99 	bl	80083f0 <xQueueGenericSendFromISR>
 80096be:	e7f8      	b.n	80096b2 <xTimerGenericCommand+0x46>
 80096c0:	2002b88c 	.word	0x2002b88c

080096c4 <prvSwitchTimerLists>:
{
 80096c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096c6:	4d1d      	ldr	r5, [pc, #116]	; (800973c <prvSwitchTimerLists+0x78>)
{
 80096c8:	b085      	sub	sp, #20
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096ca:	2700      	movs	r7, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096cc:	682b      	ldr	r3, [r5, #0]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	b92a      	cbnz	r2, 80096de <prvSwitchTimerLists+0x1a>
	pxCurrentTimerList = pxOverflowTimerList;
 80096d2:	4a1b      	ldr	r2, [pc, #108]	; (8009740 <prvSwitchTimerLists+0x7c>)
 80096d4:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80096d6:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 80096d8:	6029      	str	r1, [r5, #0]
}
 80096da:	b005      	add	sp, #20
 80096dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096de:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096e0:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096e2:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096e4:	1d21      	adds	r1, r4, #4
 80096e6:	4608      	mov	r0, r1
 80096e8:	9103      	str	r1, [sp, #12]
 80096ea:	f7fe fa2c 	bl	8007b46 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096ee:	6a23      	ldr	r3, [r4, #32]
 80096f0:	4620      	mov	r0, r4
 80096f2:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096f4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80096f8:	9903      	ldr	r1, [sp, #12]
 80096fa:	f013 0f04 	tst.w	r3, #4
 80096fe:	d0e5      	beq.n	80096cc <prvSwitchTimerLists+0x8>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009700:	69a3      	ldr	r3, [r4, #24]
 8009702:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8009704:	429e      	cmp	r6, r3
 8009706:	d205      	bcs.n	8009714 <prvSwitchTimerLists+0x50>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009708:	6828      	ldr	r0, [r5, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800970a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800970c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800970e:	f7fe fa03 	bl	8007b18 <vListInsert>
 8009712:	e7db      	b.n	80096cc <prvSwitchTimerLists+0x8>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009714:	2300      	movs	r3, #0
 8009716:	4632      	mov	r2, r6
 8009718:	4620      	mov	r0, r4
 800971a:	9700      	str	r7, [sp, #0]
 800971c:	4619      	mov	r1, r3
 800971e:	f7ff ffa5 	bl	800966c <xTimerGenericCommand>
				configASSERT( xResult );
 8009722:	2800      	cmp	r0, #0
 8009724:	d1d2      	bne.n	80096cc <prvSwitchTimerLists+0x8>
 8009726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972a:	b672      	cpsid	i
 800972c:	f383 8811 	msr	BASEPRI, r3
 8009730:	f3bf 8f6f 	isb	sy
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	b662      	cpsie	i
 800973a:	e7fe      	b.n	800973a <prvSwitchTimerLists+0x76>
 800973c:	2002b768 	.word	0x2002b768
 8009740:	2002b76c 	.word	0x2002b76c

08009744 <prvTimerTask>:
{
 8009744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009748:	4f7a      	ldr	r7, [pc, #488]	; (8009934 <prvTimerTask+0x1f0>)
{
 800974a:	b087      	sub	sp, #28
					portYIELD_WITHIN_API();
 800974c:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 8009944 <prvTimerTask+0x200>
 8009750:	46b9      	mov	r9, r7
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	f8d3 b000 	ldr.w	fp, [r3]
 8009758:	f1bb 0f00 	cmp.w	fp, #0
 800975c:	d028      	beq.n	80097b0 <prvTimerTask+0x6c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800975e:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009760:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009762:	f8d3 b000 	ldr.w	fp, [r3]
	if( xTimeNow < xLastTime )
 8009766:	4e74      	ldr	r6, [pc, #464]	; (8009938 <prvTimerTask+0x1f4>)
	vTaskSuspendAll();
 8009768:	f7ff fb30 	bl	8008dcc <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800976c:	f7ff fb36 	bl	8008ddc <xTaskGetTickCount>
 8009770:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8009772:	6833      	ldr	r3, [r6, #0]
 8009774:	46b0      	mov	r8, r6
 8009776:	4298      	cmp	r0, r3
 8009778:	d31c      	bcc.n	80097b4 <prvTimerTask+0x70>
	xLastTime = xTimeNow;
 800977a:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800977c:	b31c      	cbz	r4, 80097c6 <prvTimerTask+0x82>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800977e:	4b6f      	ldr	r3, [pc, #444]	; (800993c <prvTimerTask+0x1f8>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681c      	ldr	r4, [r3, #0]
 8009784:	fab4 f484 	clz	r4, r4
 8009788:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800978a:	4b6d      	ldr	r3, [pc, #436]	; (8009940 <prvTimerTask+0x1fc>)
 800978c:	4622      	mov	r2, r4
 800978e:	ebab 0105 	sub.w	r1, fp, r5
 8009792:	6818      	ldr	r0, [r3, #0]
 8009794:	f7ff f91f 	bl	80089d6 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009798:	f7ff fbbe 	bl	8008f18 <xTaskResumeAll>
 800979c:	b978      	cbnz	r0, 80097be <prvTimerTask+0x7a>
					portYIELD_WITHIN_API();
 800979e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80097a2:	f8ca 3000 	str.w	r3, [sl]
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	f3bf 8f6f 	isb	sy
 80097ae:	e006      	b.n	80097be <prvTimerTask+0x7a>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80097b0:	2401      	movs	r4, #1
 80097b2:	e7d8      	b.n	8009766 <prvTimerTask+0x22>
		prvSwitchTimerLists();
 80097b4:	f7ff ff86 	bl	80096c4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 80097b8:	6035      	str	r5, [r6, #0]
			( void ) xTaskResumeAll();
 80097ba:	f7ff fbad 	bl	8008f18 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097be:	4e60      	ldr	r6, [pc, #384]	; (8009940 <prvTimerTask+0x1fc>)
 80097c0:	f04f 0b00 	mov.w	fp, #0
 80097c4:	e037      	b.n	8009836 <prvTimerTask+0xf2>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80097c6:	4583      	cmp	fp, r0
 80097c8:	d8df      	bhi.n	800978a <prvTimerTask+0x46>
				( void ) xTaskResumeAll();
 80097ca:	f7ff fba5 	bl	8008f18 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ce:	f8d9 3000 	ldr.w	r3, [r9]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	68de      	ldr	r6, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097d6:	1d30      	adds	r0, r6, #4
 80097d8:	f7fe f9b5 	bl	8007b46 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097dc:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 80097e0:	0758      	lsls	r0, r3, #29
 80097e2:	d51a      	bpl.n	800981a <prvTimerTask+0xd6>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80097e4:	69b1      	ldr	r1, [r6, #24]
 80097e6:	465b      	mov	r3, fp
 80097e8:	462a      	mov	r2, r5
 80097ea:	4630      	mov	r0, r6
 80097ec:	4459      	add	r1, fp
 80097ee:	f7ff feeb 	bl	80095c8 <prvInsertTimerInActiveList>
 80097f2:	b1b0      	cbz	r0, 8009822 <prvTimerTask+0xde>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097f4:	4623      	mov	r3, r4
 80097f6:	465a      	mov	r2, fp
 80097f8:	4621      	mov	r1, r4
 80097fa:	4630      	mov	r0, r6
 80097fc:	9400      	str	r4, [sp, #0]
 80097fe:	f7ff ff35 	bl	800966c <xTimerGenericCommand>
			configASSERT( xResult );
 8009802:	b970      	cbnz	r0, 8009822 <prvTimerTask+0xde>
 8009804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009808:	b672      	cpsid	i
 800980a:	f383 8811 	msr	BASEPRI, r3
 800980e:	f3bf 8f6f 	isb	sy
 8009812:	f3bf 8f4f 	dsb	sy
 8009816:	b662      	cpsie	i
 8009818:	e7fe      	b.n	8009818 <prvTimerTask+0xd4>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800981a:	f023 0301 	bic.w	r3, r3, #1
 800981e:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009822:	6a33      	ldr	r3, [r6, #32]
 8009824:	4630      	mov	r0, r6
 8009826:	4798      	blx	r3
}
 8009828:	e7c9      	b.n	80097be <prvTimerTask+0x7a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800982a:	9b03      	ldr	r3, [sp, #12]
 800982c:	9905      	ldr	r1, [sp, #20]
 800982e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009830:	9b02      	ldr	r3, [sp, #8]
 8009832:	2b00      	cmp	r3, #0
 8009834:	da0a      	bge.n	800984c <prvTimerTask+0x108>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009836:	2200      	movs	r2, #0
 8009838:	a902      	add	r1, sp, #8
 800983a:	6830      	ldr	r0, [r6, #0]
 800983c:	f7fe fe9e 	bl	800857c <xQueueReceive>
 8009840:	2800      	cmp	r0, #0
 8009842:	d086      	beq.n	8009752 <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009844:	9b02      	ldr	r3, [sp, #8]
 8009846:	9804      	ldr	r0, [sp, #16]
 8009848:	2b00      	cmp	r3, #0
 800984a:	dbee      	blt.n	800982a <prvTimerTask+0xe6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800984c:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800984e:	6963      	ldr	r3, [r4, #20]
 8009850:	b9a3      	cbnz	r3, 800987c <prvTimerTask+0x138>
	xTimeNow = xTaskGetTickCount();
 8009852:	f7ff fac3 	bl	8008ddc <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8009856:	f8d8 3000 	ldr.w	r3, [r8]
	xTimeNow = xTaskGetTickCount();
 800985a:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800985c:	4298      	cmp	r0, r3
 800985e:	d201      	bcs.n	8009864 <prvTimerTask+0x120>
		prvSwitchTimerLists();
 8009860:	f7ff ff30 	bl	80096c4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8009864:	9b02      	ldr	r3, [sp, #8]
 8009866:	f8c8 5000 	str.w	r5, [r8]
			switch( xMessage.xMessageID )
 800986a:	2b09      	cmp	r3, #9
 800986c:	d8e3      	bhi.n	8009836 <prvTimerTask+0xf2>
 800986e:	e8df f003 	tbb	[pc, r3]
 8009872:	0909      	.short	0x0909
 8009874:	583d3609 	.word	0x583d3609
 8009878:	3d360909 	.word	0x3d360909
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800987c:	1d20      	adds	r0, r4, #4
 800987e:	f7fe f962 	bl	8007b46 <uxListRemove>
 8009882:	e7e6      	b.n	8009852 <prvTimerTask+0x10e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009884:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009888:	462a      	mov	r2, r5
 800988a:	69a1      	ldr	r1, [r4, #24]
 800988c:	4620      	mov	r0, r4
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800988e:	f043 0301 	orr.w	r3, r3, #1
 8009892:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009896:	9b03      	ldr	r3, [sp, #12]
 8009898:	4419      	add	r1, r3
 800989a:	f7ff fe95 	bl	80095c8 <prvInsertTimerInActiveList>
 800989e:	2800      	cmp	r0, #0
 80098a0:	d0c9      	beq.n	8009836 <prvTimerTask+0xf2>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098a2:	6a23      	ldr	r3, [r4, #32]
 80098a4:	4620      	mov	r0, r4
 80098a6:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098a8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80098ac:	0759      	lsls	r1, r3, #29
 80098ae:	d5c2      	bpl.n	8009836 <prvTimerTask+0xf2>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80098b0:	69a2      	ldr	r2, [r4, #24]
 80098b2:	2300      	movs	r3, #0
 80098b4:	9903      	ldr	r1, [sp, #12]
 80098b6:	4620      	mov	r0, r4
 80098b8:	f8cd b000 	str.w	fp, [sp]
 80098bc:	440a      	add	r2, r1
 80098be:	4619      	mov	r1, r3
 80098c0:	f7ff fed4 	bl	800966c <xTimerGenericCommand>
							configASSERT( xResult );
 80098c4:	2800      	cmp	r0, #0
 80098c6:	d1b6      	bne.n	8009836 <prvTimerTask+0xf2>
 80098c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098cc:	b672      	cpsid	i
 80098ce:	f383 8811 	msr	BASEPRI, r3
 80098d2:	f3bf 8f6f 	isb	sy
 80098d6:	f3bf 8f4f 	dsb	sy
 80098da:	b662      	cpsie	i
 80098dc:	e7fe      	b.n	80098dc <prvTimerTask+0x198>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098de:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098e2:	f023 0301 	bic.w	r3, r3, #1
 80098e6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80098ea:	e7a4      	b.n	8009836 <prvTimerTask+0xf2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80098ec:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80098f0:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80098f2:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80098f6:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80098f8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80098fc:	b951      	cbnz	r1, 8009914 <prvTimerTask+0x1d0>
 80098fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009902:	b672      	cpsid	i
 8009904:	f383 8811 	msr	BASEPRI, r3
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	f3bf 8f4f 	dsb	sy
 8009910:	b662      	cpsie	i
 8009912:	e7fe      	b.n	8009912 <prvTimerTask+0x1ce>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009914:	462b      	mov	r3, r5
 8009916:	462a      	mov	r2, r5
 8009918:	4429      	add	r1, r5
 800991a:	4620      	mov	r0, r4
 800991c:	f7ff fe54 	bl	80095c8 <prvInsertTimerInActiveList>
					break;
 8009920:	e789      	b.n	8009836 <prvTimerTask+0xf2>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009922:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009926:	079a      	lsls	r2, r3, #30
 8009928:	d4db      	bmi.n	80098e2 <prvTimerTask+0x19e>
							vPortFree( pxTimer );
 800992a:	4620      	mov	r0, r4
 800992c:	f7fe f89e 	bl	8007a6c <vPortFree>
 8009930:	e781      	b.n	8009836 <prvTimerTask+0xf2>
 8009932:	bf00      	nop
 8009934:	2002b768 	.word	0x2002b768
 8009938:	2002b838 	.word	0x2002b838
 800993c:	2002b76c 	.word	0x2002b76c
 8009940:	2002b88c 	.word	0x2002b88c
 8009944:	e000ed04 	.word	0xe000ed04

08009948 <jpeg_abort>:
jpeg_abort (j_common_ptr cinfo)
{
  int pool;

  /* Do nothing if called on a not-initialized or destroyed JPEG object. */
  if (cinfo->mem == NULL)
 8009948:	6843      	ldr	r3, [r0, #4]
{
 800994a:	b510      	push	{r4, lr}
 800994c:	4604      	mov	r4, r0
  if (cinfo->mem == NULL)
 800994e:	b14b      	cbz	r3, 8009964 <jpeg_abort+0x1c>

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
    (*cinfo->mem->free_pool) (cinfo, pool);
 8009950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009952:	2101      	movs	r1, #1
 8009954:	4798      	blx	r3
  }

  /* Reset overall state for possible reuse of object */
  if (cinfo->is_decompressor) {
 8009956:	6923      	ldr	r3, [r4, #16]
 8009958:	b12b      	cbz	r3, 8009966 <jpeg_abort+0x1e>
    cinfo->global_state = DSTATE_START;
 800995a:	23c8      	movs	r3, #200	; 0xc8
 800995c:	6163      	str	r3, [r4, #20]
    /* Try to keep application from accessing now-deleted marker list.
     * A bit kludgy to do it here, but this is the most central place.
     */
    ((j_decompress_ptr) cinfo)->marker_list = NULL;
 800995e:	2300      	movs	r3, #0
 8009960:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
  } else {
    cinfo->global_state = CSTATE_START;
  }
}
 8009964:	bd10      	pop	{r4, pc}
    cinfo->global_state = CSTATE_START;
 8009966:	2364      	movs	r3, #100	; 0x64
 8009968:	6163      	str	r3, [r4, #20]
 800996a:	e7fb      	b.n	8009964 <jpeg_abort+0x1c>

0800996c <jpeg_destroy>:
GLOBAL(void)
jpeg_destroy (j_common_ptr cinfo)
{
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
 800996c:	6843      	ldr	r3, [r0, #4]
{
 800996e:	b510      	push	{r4, lr}
 8009970:	4604      	mov	r4, r0
  if (cinfo->mem != NULL)
 8009972:	b10b      	cbz	r3, 8009978 <jpeg_destroy+0xc>
    (*cinfo->mem->self_destruct) (cinfo);
 8009974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009976:	4798      	blx	r3
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
 8009978:	2300      	movs	r3, #0
 800997a:	6063      	str	r3, [r4, #4]
  cinfo->global_state = 0;	/* mark it destroyed */
 800997c:	6163      	str	r3, [r4, #20]
}
 800997e:	bd10      	pop	{r4, pc}

08009980 <jpeg_alloc_quant_table>:
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL(JQUANT_TBL *)
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
 8009980:	b508      	push	{r3, lr}
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
 8009982:	6843      	ldr	r3, [r0, #4]
 8009984:	2284      	movs	r2, #132	; 0x84
 8009986:	2100      	movs	r1, #0
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 800998c:	2200      	movs	r2, #0
 800998e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  return tbl;
}
 8009992:	bd08      	pop	{r3, pc}

08009994 <jpeg_alloc_huff_table>:


GLOBAL(JHUFF_TBL *)
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
 8009994:	b508      	push	{r3, lr}
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
 8009996:	6843      	ldr	r3, [r0, #4]
 8009998:	f44f 728c 	mov.w	r2, #280	; 0x118
 800999c:	2100      	movs	r1, #0
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4798      	blx	r3
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 80099a2:	2200      	movs	r2, #0
 80099a4:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
  return tbl;
}
 80099a8:	bd08      	pop	{r3, pc}

080099aa <jpeg_CreateDecompress>:
jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
{
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 80099aa:	2300      	movs	r3, #0
  if (version != JPEG_LIB_VERSION)
 80099ac:	2950      	cmp	r1, #80	; 0x50
{
 80099ae:	b570      	push	{r4, r5, r6, lr}
 80099b0:	4604      	mov	r4, r0
 80099b2:	4615      	mov	r5, r2
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 80099b4:	6043      	str	r3, [r0, #4]
  if (version != JPEG_LIB_VERSION)
 80099b6:	d007      	beq.n	80099c8 <jpeg_CreateDecompress+0x1e>
 80099b8:	6803      	ldr	r3, [r0, #0]
    ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
 80099ba:	260d      	movs	r6, #13
 80099bc:	2250      	movs	r2, #80	; 0x50
 80099be:	61d9      	str	r1, [r3, #28]
 80099c0:	e9c3 6205 	strd	r6, r2, [r3, #20]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4798      	blx	r3
  if (structsize != SIZEOF(struct jpeg_decompress_struct))
 80099c8:	f5b5 7ff4 	cmp.w	r5, #488	; 0x1e8
 80099cc:	d009      	beq.n	80099e2 <jpeg_CreateDecompress+0x38>
 80099ce:	6823      	ldr	r3, [r4, #0]
    ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
 80099d0:	2116      	movs	r1, #22
 80099d2:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80099d6:	4620      	mov	r0, r4
 80099d8:	61dd      	str	r5, [r3, #28]
 80099da:	e9c3 1205 	strd	r1, r2, [r3, #20]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4798      	blx	r3
   * complain here.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 80099e2:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80099e6:	2100      	movs	r1, #0
 80099e8:	4620      	mov	r0, r4
    struct jpeg_error_mgr * err = cinfo->err;
 80099ea:	6826      	ldr	r6, [r4, #0]
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
 80099ec:	68e5      	ldr	r5, [r4, #12]
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 80099ee:	f020 fabf 	bl	8029f70 <memset>
    cinfo->err = err;
    cinfo->client_data = client_data;
  }
  cinfo->is_decompressor = TRUE;
 80099f2:	2301      	movs	r3, #1

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);
 80099f4:	4620      	mov	r0, r4
    cinfo->err = err;
 80099f6:	6026      	str	r6, [r4, #0]
  cinfo->is_decompressor = TRUE;
 80099f8:	6123      	str	r3, [r4, #16]
    cinfo->client_data = client_data;
 80099fa:	60e5      	str	r5, [r4, #12]
  jinit_memory_mgr((j_common_ptr) cinfo);
 80099fc:	f00b fef4 	bl	80157e8 <jinit_memory_mgr>

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
 8009a00:	2300      	movs	r3, #0

  /* Initialize marker processor so application can override methods
   * for COM, APPn markers before calling jpeg_read_header.
   */
  cinfo->marker_list = NULL;
  jinit_marker_reader(cinfo);
 8009a02:	4620      	mov	r0, r4
  cinfo->progress = NULL;
 8009a04:	60a3      	str	r3, [r4, #8]
  cinfo->src = NULL;
 8009a06:	61a3      	str	r3, [r4, #24]
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8009a08:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009a0c:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8009a10:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009a14:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8009a18:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009a1c:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 8009a20:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 8009a24:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  cinfo->marker_list = NULL;
 8009a28:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    cinfo->quant_tbl_ptrs[i] = NULL;
 8009a2c:	e9c4 3329 	strd	r3, r3, [r4, #164]	; 0xa4
 8009a30:	e9c4 332b 	strd	r3, r3, [r4, #172]	; 0xac
  jinit_marker_reader(cinfo);
 8009a34:	f005 f8cc 	bl	800ebd0 <jinit_marker_reader>

  /* And initialize the overall input controller. */
  jinit_input_controller(cinfo);
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f003 fdd7 	bl	800d5ec <jinit_input_controller>

  /* OK, I'm ready */
  cinfo->global_state = DSTATE_START;
 8009a3e:	23c8      	movs	r3, #200	; 0xc8
 8009a40:	6163      	str	r3, [r4, #20]
}
 8009a42:	bd70      	pop	{r4, r5, r6, pc}

08009a44 <jpeg_destroy_decompress>:
 */

GLOBAL(void)
jpeg_destroy_decompress (j_decompress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
 8009a44:	f7ff bf92 	b.w	800996c <jpeg_destroy>

08009a48 <jpeg_consume_input>:
jpeg_consume_input (j_decompress_ptr cinfo)
{
  int retcode = JPEG_SUSPENDED;

  /* NB: every possible DSTATE value should be listed in this switch */
  switch (cinfo->global_state) {
 8009a48:	6942      	ldr	r2, [r0, #20]
 8009a4a:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
{
 8009a4e:	b570      	push	{r4, r5, r6, lr}
 8009a50:	4604      	mov	r4, r0
 8009a52:	2b0a      	cmp	r3, #10
 8009a54:	f200 80a5 	bhi.w	8009ba2 <jpeg_consume_input+0x15a>
 8009a58:	e8df f003 	tbb	[pc, r3]
 8009a5c:	9dab1006 	.word	0x9dab1006
 8009a60:	9d9d9d9d 	.word	0x9d9d9d9d
 8009a64:	a39d      	.short	0xa39d
 8009a66:	9d          	.byte	0x9d
 8009a67:	00          	.byte	0x00
  case DSTATE_START:
    /* Start-of-datastream actions: reset appropriate modules */
    (*cinfo->inputctl->reset_input_controller) (cinfo);
 8009a68:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	4798      	blx	r3
    /* Initialize application's data source module */
    (*cinfo->src->init_source) (cinfo);
 8009a70:	69a3      	ldr	r3, [r4, #24]
 8009a72:	4620      	mov	r0, r4
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	4798      	blx	r3
    cinfo->global_state = DSTATE_INHEADER;
 8009a78:	23c9      	movs	r3, #201	; 0xc9
 8009a7a:	6163      	str	r3, [r4, #20]
    /*FALLTHROUGH*/
  case DSTATE_INHEADER:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009a7c:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8009a80:	4620      	mov	r0, r4
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4798      	blx	r3
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 8009a86:	2801      	cmp	r0, #1
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009a88:	4606      	mov	r6, r0
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 8009a8a:	d146      	bne.n	8009b1a <jpeg_consume_input+0xd2>
  switch (cinfo->num_components) {
 8009a8c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009a8e:	2d03      	cmp	r5, #3
 8009a90:	d007      	beq.n	8009aa2 <jpeg_consume_input+0x5a>
 8009a92:	2d04      	cmp	r5, #4
 8009a94:	d064      	beq.n	8009b60 <jpeg_consume_input+0x118>
 8009a96:	2d01      	cmp	r5, #1
 8009a98:	d17b      	bne.n	8009b92 <jpeg_consume_input+0x14a>
    cinfo->jpeg_color_space = JCS_GRAYSCALE;
 8009a9a:	f240 1301 	movw	r3, #257	; 0x101
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 8009a9e:	8523      	strh	r3, [r4, #40]	; 0x28
    break;
 8009aa0:	e01c      	b.n	8009adc <jpeg_consume_input+0x94>
    if (cinfo->saw_JFIF_marker) {
 8009aa2:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8009aa6:	b10b      	cbz	r3, 8009aac <jpeg_consume_input+0x64>
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	e056      	b.n	8009b5a <jpeg_consume_input+0x112>
    } else if (cinfo->saw_Adobe_marker) {
 8009aac:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d034      	beq.n	8009b1e <jpeg_consume_input+0xd6>
      switch (cinfo->Adobe_transform) {
 8009ab4:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 8009ab8:	2a00      	cmp	r2, #0
 8009aba:	d04d      	beq.n	8009b58 <jpeg_consume_input+0x110>
 8009abc:	2a01      	cmp	r2, #1
 8009abe:	d008      	beq.n	8009ad2 <jpeg_consume_input+0x8a>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8009ac0:	6823      	ldr	r3, [r4, #0]
 8009ac2:	2174      	movs	r1, #116	; 0x74
 8009ac4:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 8009ac6:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	f04f 31ff 	mov.w	r1, #4294967295
 8009ad0:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 8009ad2:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_RGB;
 8009ad6:	2302      	movs	r3, #2
    cinfo->out_color_space = JCS_CMYK;
 8009ad8:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  cinfo->scale_num = cinfo->block_size;		/* 1:1 scaling */
 8009adc:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  cinfo->output_gamma = 1.0;
 8009ae0:	2200      	movs	r2, #0
  cinfo->dither_mode = JDITHER_FS;
 8009ae2:	2102      	movs	r1, #2
  cinfo->scale_denom = cinfo->block_size;
 8009ae4:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  cinfo->output_gamma = 1.0;
 8009ae8:	4b33      	ldr	r3, [pc, #204]	; (8009bb8 <jpeg_consume_input+0x170>)
  cinfo->dither_mode = JDITHER_FS;
 8009aea:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
  cinfo->output_gamma = 1.0;
 8009aee:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
  cinfo->buffered_image = FALSE;
 8009af2:	2300      	movs	r3, #0
  cinfo->do_fancy_upsampling = TRUE;
 8009af4:	2201      	movs	r2, #1
  cinfo->raw_data_out = FALSE;
 8009af6:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  cinfo->dct_method = JDCT_DEFAULT;
 8009afa:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  cinfo->quantize_colors = FALSE;
 8009afe:	6563      	str	r3, [r4, #84]	; 0x54
  cinfo->two_pass_quantize = TRUE;
 8009b00:	65e2      	str	r2, [r4, #92]	; 0x5c
  cinfo->colormap = NULL;
 8009b02:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  cinfo->enable_2pass_quant = FALSE;
 8009b06:	66e3      	str	r3, [r4, #108]	; 0x6c
  cinfo->do_block_smoothing = TRUE;
 8009b08:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
  cinfo->enable_external_quant = FALSE;
 8009b0c:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  cinfo->desired_number_of_colors = 256;
 8009b10:	f44f 7280 	mov.w	r2, #256	; 0x100
      /* Set up default parameters based on header data */
      default_decompress_parms(cinfo);
      /* Set global state: ready for start_decompress */
      cinfo->global_state = DSTATE_READY;
 8009b14:	23ca      	movs	r3, #202	; 0xca
  cinfo->desired_number_of_colors = 256;
 8009b16:	6622      	str	r2, [r4, #96]	; 0x60
      cinfo->global_state = DSTATE_READY;
 8009b18:	6163      	str	r3, [r4, #20]
    break;
  default:
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  return retcode;
}
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	bd70      	pop	{r4, r5, r6, pc}
      int cid0 = cinfo->comp_info[0].component_id;
 8009b1e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8009b22:	6818      	ldr	r0, [r3, #0]
      int cid1 = cinfo->comp_info[1].component_id;
 8009b24:	6d99      	ldr	r1, [r3, #88]	; 0x58
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 8009b26:	2801      	cmp	r0, #1
      int cid2 = cinfo->comp_info[2].component_id;
 8009b28:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 8009b2c:	d10e      	bne.n	8009b4c <jpeg_consume_input+0x104>
 8009b2e:	2902      	cmp	r1, #2
 8009b30:	d101      	bne.n	8009b36 <jpeg_consume_input+0xee>
 8009b32:	2a03      	cmp	r2, #3
 8009b34:	d0b8      	beq.n	8009aa8 <jpeg_consume_input+0x60>
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
 8009b36:	6823      	ldr	r3, [r4, #0]
 8009b38:	621a      	str	r2, [r3, #32]
 8009b3a:	2271      	movs	r2, #113	; 0x71
 8009b3c:	e9c3 0106 	strd	r0, r1, [r3, #24]
 8009b40:	615a      	str	r2, [r3, #20]
 8009b42:	2101      	movs	r1, #1
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	4620      	mov	r0, r4
 8009b48:	4798      	blx	r3
 8009b4a:	e7ad      	b.n	8009aa8 <jpeg_consume_input+0x60>
      else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
 8009b4c:	2852      	cmp	r0, #82	; 0x52
 8009b4e:	d1f2      	bne.n	8009b36 <jpeg_consume_input+0xee>
 8009b50:	2947      	cmp	r1, #71	; 0x47
 8009b52:	d1f0      	bne.n	8009b36 <jpeg_consume_input+0xee>
 8009b54:	2a42      	cmp	r2, #66	; 0x42
 8009b56:	d1ee      	bne.n	8009b36 <jpeg_consume_input+0xee>
	cinfo->jpeg_color_space = JCS_RGB; /* ASCII 'R', 'G', 'B' */
 8009b58:	2302      	movs	r3, #2
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 8009b5a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8009b5e:	e7ba      	b.n	8009ad6 <jpeg_consume_input+0x8e>
    if (cinfo->saw_Adobe_marker) {
 8009b60:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8009b64:	b193      	cbz	r3, 8009b8c <jpeg_consume_input+0x144>
      switch (cinfo->Adobe_transform) {
 8009b66:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
 8009b6a:	b17a      	cbz	r2, 8009b8c <jpeg_consume_input+0x144>
 8009b6c:	2a02      	cmp	r2, #2
 8009b6e:	d008      	beq.n	8009b82 <jpeg_consume_input+0x13a>
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8009b70:	6823      	ldr	r3, [r4, #0]
 8009b72:	2174      	movs	r1, #116	; 0x74
 8009b74:	4620      	mov	r0, r4
      switch (cinfo->Adobe_transform) {
 8009b76:	e9c3 1205 	strd	r1, r2, [r3, #20]
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8009b80:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
 8009b82:	2305      	movs	r3, #5
 8009b84:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    cinfo->out_color_space = JCS_CMYK;
 8009b88:	2304      	movs	r3, #4
 8009b8a:	e7a5      	b.n	8009ad8 <jpeg_consume_input+0x90>
      cinfo->jpeg_color_space = JCS_CMYK;
 8009b8c:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 8009b90:	e7fa      	b.n	8009b88 <jpeg_consume_input+0x140>
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 8009b92:	2300      	movs	r3, #0
 8009b94:	e783      	b.n	8009a9e <jpeg_consume_input+0x56>
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009b96:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
}
 8009b9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4718      	bx	r3
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009ba2:	6803      	ldr	r3, [r0, #0]
 8009ba4:	2115      	movs	r1, #21
  int retcode = JPEG_SUSPENDED;
 8009ba6:	2600      	movs	r6, #0
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009ba8:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4798      	blx	r3
 8009bb0:	e7b3      	b.n	8009b1a <jpeg_consume_input+0xd2>
  switch (cinfo->global_state) {
 8009bb2:	2601      	movs	r6, #1
  return retcode;
 8009bb4:	e7b1      	b.n	8009b1a <jpeg_consume_input+0xd2>
 8009bb6:	bf00      	nop
 8009bb8:	3ff00000 	.word	0x3ff00000

08009bbc <jpeg_read_header>:
  if (cinfo->global_state != DSTATE_START &&
 8009bbc:	6942      	ldr	r2, [r0, #20]
 8009bbe:	f1a2 03c8 	sub.w	r3, r2, #200	; 0xc8
 8009bc2:	2b01      	cmp	r3, #1
{
 8009bc4:	b570      	push	{r4, r5, r6, lr}
 8009bc6:	4604      	mov	r4, r0
 8009bc8:	460e      	mov	r6, r1
  if (cinfo->global_state != DSTATE_START &&
 8009bca:	d905      	bls.n	8009bd8 <jpeg_read_header+0x1c>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009bcc:	6803      	ldr	r3, [r0, #0]
 8009bce:	2115      	movs	r1, #21
 8009bd0:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4798      	blx	r3
  retcode = jpeg_consume_input(cinfo);
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f7ff ff35 	bl	8009a48 <jpeg_consume_input>
  switch (retcode) {
 8009bde:	2801      	cmp	r0, #1
  retcode = jpeg_consume_input(cinfo);
 8009be0:	4605      	mov	r5, r0
  switch (retcode) {
 8009be2:	d00b      	beq.n	8009bfc <jpeg_read_header+0x40>
 8009be4:	2802      	cmp	r0, #2
 8009be6:	d109      	bne.n	8009bfc <jpeg_read_header+0x40>
    if (require_image)		/* Complain if application wanted an image */
 8009be8:	b12e      	cbz	r6, 8009bf6 <jpeg_read_header+0x3a>
      ERREXIT(cinfo, JERR_NO_IMAGE);
 8009bea:	6823      	ldr	r3, [r4, #0]
 8009bec:	2235      	movs	r2, #53	; 0x35
 8009bee:	4620      	mov	r0, r4
 8009bf0:	615a      	str	r2, [r3, #20]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4798      	blx	r3
    jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	f7ff fea6 	bl	8009948 <jpeg_abort>
}
 8009bfc:	4628      	mov	r0, r5
 8009bfe:	bd70      	pop	{r4, r5, r6, pc}

08009c00 <jpeg_finish_decompress>:
 */

GLOBAL(boolean)
jpeg_finish_decompress (j_decompress_ptr cinfo)
{
  if ((cinfo->global_state == DSTATE_SCANNING ||
 8009c00:	6943      	ldr	r3, [r0, #20]
 8009c02:	f1a3 02cd 	sub.w	r2, r3, #205	; 0xcd
 8009c06:	2a01      	cmp	r2, #1
{
 8009c08:	b510      	push	{r4, lr}
 8009c0a:	4604      	mov	r4, r0
  if ((cinfo->global_state == DSTATE_SCANNING ||
 8009c0c:	d81f      	bhi.n	8009c4e <jpeg_finish_decompress+0x4e>
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
 8009c0e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8009c10:	bb0a      	cbnz	r2, 8009c56 <jpeg_finish_decompress+0x56>
    /* Terminate final pass of non-buffered mode */
    if (cinfo->output_scanline < cinfo->output_height)
 8009c12:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8009c16:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d204      	bcs.n	8009c26 <jpeg_finish_decompress+0x26>
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
 8009c1c:	6803      	ldr	r3, [r0, #0]
 8009c1e:	2245      	movs	r2, #69	; 0x45
 8009c20:	615a      	str	r2, [r3, #20]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4798      	blx	r3
    (*cinfo->master->finish_output_pass) (cinfo);
 8009c26:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	4798      	blx	r3
    cinfo->global_state = DSTATE_STOPPING;
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
    /* Finishing after a buffered-image operation */
    cinfo->global_state = DSTATE_STOPPING;
 8009c30:	23d2      	movs	r3, #210	; 0xd2
 8009c32:	6163      	str	r3, [r4, #20]
  } else if (cinfo->global_state != DSTATE_STOPPING) {
    /* STOPPING = repeat call after a suspension, anything else is error */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  /* Read until EOI */
  while (! cinfo->inputctl->eoi_reached) {
 8009c34:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8009c38:	695a      	ldr	r2, [r3, #20]
 8009c3a:	b1a2      	cbz	r2, 8009c66 <jpeg_finish_decompress+0x66>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
      return FALSE;		/* Suspend, come back later */
  }
  /* Do final cleanup */
  (*cinfo->src->term_source) (cinfo);
 8009c3c:	69a3      	ldr	r3, [r4, #24]
 8009c3e:	4620      	mov	r0, r4
 8009c40:	699b      	ldr	r3, [r3, #24]
 8009c42:	4798      	blx	r3
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
 8009c44:	4620      	mov	r0, r4
 8009c46:	f7ff fe7f 	bl	8009948 <jpeg_abort>
  return TRUE;
 8009c4a:	2001      	movs	r0, #1
 8009c4c:	e010      	b.n	8009c70 <jpeg_finish_decompress+0x70>
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
 8009c4e:	2bcf      	cmp	r3, #207	; 0xcf
 8009c50:	d0ee      	beq.n	8009c30 <jpeg_finish_decompress+0x30>
  } else if (cinfo->global_state != DSTATE_STOPPING) {
 8009c52:	2bd2      	cmp	r3, #210	; 0xd2
 8009c54:	d0ee      	beq.n	8009c34 <jpeg_finish_decompress+0x34>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009c56:	6822      	ldr	r2, [r4, #0]
 8009c58:	2115      	movs	r1, #21
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	e9c2 1305 	strd	r1, r3, [r2, #20]
 8009c60:	6813      	ldr	r3, [r2, #0]
 8009c62:	4798      	blx	r3
 8009c64:	e7e6      	b.n	8009c34 <jpeg_finish_decompress+0x34>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4620      	mov	r0, r4
 8009c6a:	4798      	blx	r3
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d1e1      	bne.n	8009c34 <jpeg_finish_decompress+0x34>
}
 8009c70:	bd10      	pop	{r4, pc}

08009c72 <output_pass_setup>:
 */

LOCAL(boolean)
output_pass_setup (j_decompress_ptr cinfo)
{
  if (cinfo->global_state != DSTATE_PRESCAN) {
 8009c72:	6943      	ldr	r3, [r0, #20]
 8009c74:	2bcc      	cmp	r3, #204	; 0xcc
{
 8009c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c7a:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_PRESCAN) {
 8009c7c:	d008      	beq.n	8009c90 <output_pass_setup+0x1e>
    /* First call: do pass setup */
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 8009c7e:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4798      	blx	r3
    cinfo->output_scanline = 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    cinfo->global_state = DSTATE_PRESCAN;
 8009c8c:	23cc      	movs	r3, #204	; 0xcc
 8009c8e:	6163      	str	r3, [r4, #20]
	cinfo->progress->pass_limit = (long) cinfo->output_height;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
      }
      /* Process some data */
      last_scanline = cinfo->output_scanline;
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 8009c90:	f104 058c 	add.w	r5, r4, #140	; 0x8c
 8009c94:	2600      	movs	r6, #0
  while (cinfo->master->is_dummy_pass) {
 8009c96:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	b9f3      	cbnz	r3, 8009cdc <output_pass_setup+0x6a>
#endif /* QUANT_2PASS_SUPPORTED */
  }
  /* Ready for application to drive output pass through
   * jpeg_read_scanlines or jpeg_read_raw_data.
   */
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 8009c9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  return TRUE;
 8009ca0:	2001      	movs	r0, #1
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	bf14      	ite	ne
 8009ca6:	23ce      	movne	r3, #206	; 0xce
 8009ca8:	23cd      	moveq	r3, #205	; 0xcd
 8009caa:	6163      	str	r3, [r4, #20]
}
 8009cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (cinfo->progress != NULL) {
 8009cb0:	68a3      	ldr	r3, [r4, #8]
 8009cb2:	b123      	cbz	r3, 8009cbe <output_pass_setup+0x4c>
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009cb4:	4620      	mov	r0, r4
	cinfo->progress->pass_limit = (long) cinfo->output_height;
 8009cb6:	e9c3 1201 	strd	r1, r2, [r3, #4]
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4798      	blx	r3
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 8009cbe:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 8009cc2:	462a      	mov	r2, r5
 8009cc4:	4620      	mov	r0, r4
      last_scanline = cinfo->output_scanline;
 8009cc6:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 8009cca:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8009cce:	2300      	movs	r3, #0
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	47c0      	blx	r8
      if (cinfo->output_scanline == last_scanline)
 8009cd4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009cd8:	42bb      	cmp	r3, r7
 8009cda:	d011      	beq.n	8009d00 <output_pass_setup+0x8e>
    while (cinfo->output_scanline < cinfo->output_height) {
 8009cdc:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8009ce0:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8009ce2:	4291      	cmp	r1, r2
 8009ce4:	d3e4      	bcc.n	8009cb0 <output_pass_setup+0x3e>
    (*cinfo->master->finish_output_pass) (cinfo);
 8009ce6:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009cea:	4620      	mov	r0, r4
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	4798      	blx	r3
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 8009cf0:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4798      	blx	r3
    cinfo->output_scanline = 0;
 8009cfa:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
 8009cfe:	e7ca      	b.n	8009c96 <output_pass_setup+0x24>
	return FALSE;		/* No progress made, must suspend */
 8009d00:	2000      	movs	r0, #0
 8009d02:	e7d3      	b.n	8009cac <output_pass_setup+0x3a>

08009d04 <jpeg_start_decompress>:
  if (cinfo->global_state == DSTATE_READY) {
 8009d04:	6943      	ldr	r3, [r0, #20]
 8009d06:	2bca      	cmp	r3, #202	; 0xca
{
 8009d08:	b510      	push	{r4, lr}
 8009d0a:	4604      	mov	r4, r0
  if (cinfo->global_state == DSTATE_READY) {
 8009d0c:	d109      	bne.n	8009d22 <jpeg_start_decompress+0x1e>
    jinit_master_decompress(cinfo);
 8009d0e:	f005 f903 	bl	800ef18 <jinit_master_decompress>
    if (cinfo->buffered_image) {
 8009d12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d14:	b11b      	cbz	r3, 8009d1e <jpeg_start_decompress+0x1a>
      cinfo->global_state = DSTATE_BUFIMAGE;
 8009d16:	23cf      	movs	r3, #207	; 0xcf
      return TRUE;
 8009d18:	2001      	movs	r0, #1
      cinfo->global_state = DSTATE_BUFIMAGE;
 8009d1a:	6163      	str	r3, [r4, #20]
}
 8009d1c:	bd10      	pop	{r4, pc}
    cinfo->global_state = DSTATE_PRELOAD;
 8009d1e:	23cb      	movs	r3, #203	; 0xcb
 8009d20:	6163      	str	r3, [r4, #20]
  if (cinfo->global_state == DSTATE_PRELOAD) {
 8009d22:	6962      	ldr	r2, [r4, #20]
 8009d24:	2acb      	cmp	r2, #203	; 0xcb
 8009d26:	d12c      	bne.n	8009d82 <jpeg_start_decompress+0x7e>
    if (cinfo->inputctl->has_multiple_scans) {
 8009d28:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8009d2c:	691b      	ldr	r3, [r3, #16]
 8009d2e:	b1fb      	cbz	r3, 8009d70 <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL)
 8009d30:	68a3      	ldr	r3, [r4, #8]
 8009d32:	b113      	cbz	r3, 8009d3a <jpeg_start_decompress+0x36>
	  (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4620      	mov	r0, r4
 8009d38:	4798      	blx	r3
	retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8009d3a:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 8009d3e:	4620      	mov	r0, r4
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4798      	blx	r3
	if (retcode == JPEG_SUSPENDED)
 8009d44:	2800      	cmp	r0, #0
 8009d46:	d0e9      	beq.n	8009d1c <jpeg_start_decompress+0x18>
	if (retcode == JPEG_REACHED_EOI)
 8009d48:	2802      	cmp	r0, #2
 8009d4a:	d011      	beq.n	8009d70 <jpeg_start_decompress+0x6c>
	if (cinfo->progress != NULL &&
 8009d4c:	68a3      	ldr	r3, [r4, #8]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d0ee      	beq.n	8009d30 <jpeg_start_decompress+0x2c>
	    (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
 8009d52:	f020 0002 	bic.w	r0, r0, #2
 8009d56:	2801      	cmp	r0, #1
 8009d58:	d1ea      	bne.n	8009d30 <jpeg_start_decompress+0x2c>
	  if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
 8009d5a:	685a      	ldr	r2, [r3, #4]
 8009d5c:	6899      	ldr	r1, [r3, #8]
 8009d5e:	3201      	adds	r2, #1
 8009d60:	428a      	cmp	r2, r1
 8009d62:	605a      	str	r2, [r3, #4]
 8009d64:	dbe4      	blt.n	8009d30 <jpeg_start_decompress+0x2c>
	    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
 8009d66:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 8009d6a:	440a      	add	r2, r1
 8009d6c:	609a      	str	r2, [r3, #8]
 8009d6e:	e7df      	b.n	8009d30 <jpeg_start_decompress+0x2c>
    cinfo->output_scan_number = cinfo->input_scan_number;
 8009d70:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009d74:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  return output_pass_setup(cinfo);
 8009d78:	4620      	mov	r0, r4
}
 8009d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return output_pass_setup(cinfo);
 8009d7e:	f7ff bf78 	b.w	8009c72 <output_pass_setup>
  } else if (cinfo->global_state != DSTATE_PRESCAN)
 8009d82:	2acc      	cmp	r2, #204	; 0xcc
 8009d84:	d0f8      	beq.n	8009d78 <jpeg_start_decompress+0x74>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009d86:	6823      	ldr	r3, [r4, #0]
 8009d88:	2115      	movs	r1, #21
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4798      	blx	r3
 8009d94:	e7f0      	b.n	8009d78 <jpeg_start_decompress+0x74>

08009d96 <jpeg_read_scanlines>:
 */

GLOBAL(JDIMENSION)
jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
		     JDIMENSION max_lines)
{
 8009d96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d98:	4616      	mov	r6, r2
  JDIMENSION row_ctr;

  if (cinfo->global_state != DSTATE_SCANNING)
 8009d9a:	6942      	ldr	r2, [r0, #20]
{
 8009d9c:	4604      	mov	r4, r0
 8009d9e:	460d      	mov	r5, r1
  if (cinfo->global_state != DSTATE_SCANNING)
 8009da0:	2acd      	cmp	r2, #205	; 0xcd
 8009da2:	d005      	beq.n	8009db0 <jpeg_read_scanlines+0x1a>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8009da4:	6803      	ldr	r3, [r0, #0]
 8009da6:	2115      	movs	r1, #21
 8009da8:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4798      	blx	r3
  if (cinfo->output_scanline >= cinfo->output_height) {
 8009db0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8009db4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d30a      	bcc.n	8009dd0 <jpeg_read_scanlines+0x3a>
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	227e      	movs	r2, #126	; 0x7e
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8009dc4:	615a      	str	r2, [r3, #20]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	4798      	blx	r3
    return 0;
 8009dca:	2000      	movs	r0, #0
  /* Process some data */
  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
  cinfo->output_scanline += row_ctr;
  return row_ctr;
}
 8009dcc:	b003      	add	sp, #12
 8009dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (cinfo->progress != NULL) {
 8009dd0:	68a0      	ldr	r0, [r4, #8]
 8009dd2:	b120      	cbz	r0, 8009dde <jpeg_read_scanlines+0x48>
    cinfo->progress->pass_limit = (long) cinfo->output_height;
 8009dd4:	e9c0 2301 	strd	r2, r3, [r0, #4]
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8009dd8:	6803      	ldr	r3, [r0, #0]
 8009dda:	4620      	mov	r0, r4
 8009ddc:	4798      	blx	r3
  row_ctr = 0;
 8009dde:	2300      	movs	r3, #0
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 8009de0:	4620      	mov	r0, r4
 8009de2:	aa01      	add	r2, sp, #4
 8009de4:	4629      	mov	r1, r5
  row_ctr = 0;
 8009de6:	9301      	str	r3, [sp, #4]
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 8009de8:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 8009dec:	685f      	ldr	r7, [r3, #4]
 8009dee:	4633      	mov	r3, r6
 8009df0:	47b8      	blx	r7
  cinfo->output_scanline += row_ctr;
 8009df2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009df6:	9801      	ldr	r0, [sp, #4]
 8009df8:	4403      	add	r3, r0
 8009dfa:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  return row_ctr;
 8009dfe:	e7e5      	b.n	8009dcc <jpeg_read_scanlines+0x36>

08009e00 <get_byte>:


LOCAL(int)
get_byte (j_decompress_ptr cinfo)
/* Read next input byte; we do not support suspension in this module. */
{
 8009e00:	b538      	push	{r3, r4, r5, lr}
  struct jpeg_source_mgr * src = cinfo->src;
 8009e02:	6984      	ldr	r4, [r0, #24]
{
 8009e04:	4605      	mov	r5, r0

  if (src->bytes_in_buffer == 0)
 8009e06:	6863      	ldr	r3, [r4, #4]
 8009e08:	b943      	cbnz	r3, 8009e1c <get_byte+0x1c>
    if (! (*src->fill_input_buffer) (cinfo))
 8009e0a:	68e3      	ldr	r3, [r4, #12]
 8009e0c:	4798      	blx	r3
 8009e0e:	b928      	cbnz	r0, 8009e1c <get_byte+0x1c>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8009e10:	682b      	ldr	r3, [r5, #0]
 8009e12:	2219      	movs	r2, #25
 8009e14:	4628      	mov	r0, r5
 8009e16:	615a      	str	r2, [r3, #20]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4798      	blx	r3
  src->bytes_in_buffer--;
 8009e1c:	6863      	ldr	r3, [r4, #4]
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	6063      	str	r3, [r4, #4]
  return GETJOCTET(*src->next_input_byte++);
 8009e22:	6823      	ldr	r3, [r4, #0]
 8009e24:	1c5a      	adds	r2, r3, #1
 8009e26:	6022      	str	r2, [r4, #0]
}
 8009e28:	7818      	ldrb	r0, [r3, #0]
 8009e2a:	bd38      	pop	{r3, r4, r5, pc}

08009e2c <arith_decode>:
 * derived from Markus Kuhn's JBIG implementation.
 */

LOCAL(int)
arith_decode (j_decompress_ptr cinfo, unsigned char *st)
{
 8009e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e30:	4680      	mov	r8, r0
 8009e32:	460e      	mov	r6, r1
  register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 8009e34:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
      e->c = (e->c << 8) | data; /* insert data into C register */
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
	/* Need more initial bytes */
	if (++e->ct == 0)
	  /* Got 2 initial bytes -> re-init A and exit loop */
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 8009e38:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  while (e->a < 0x8000L) {
 8009e3c:	e9d4 5103 	ldrd	r5, r1, [r4, #12]
 8009e40:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8009e44:	db20      	blt.n	8009e88 <arith_decode+0x5c>
  }

  /* Fetch values from our compact representation of Table D.3(D.2):
   * Qe values and probability estimation state machine
   */
  sv = *st;
 8009e46:	7830      	ldrb	r0, [r6, #0]
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 8009e48:	4b2e      	ldr	r3, [pc, #184]	; (8009f04 <arith_decode+0xd8>)
 8009e4a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8009e4e:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]

  /* Decode & estimation procedures per sections D.2.4 & D.2.5 */
  temp = e->a - qe;
  e->a = temp;
  temp <<= e->ct;
  if (e->c >= temp) {
 8009e52:	68a2      	ldr	r2, [r4, #8]
  temp = e->a - qe;
 8009e54:	eba5 4527 	sub.w	r5, r5, r7, asr #16
  nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 8009e58:	ea4f 2e27 	mov.w	lr, r7, asr #8
  temp <<= e->ct;
 8009e5c:	fa05 f101 	lsl.w	r1, r5, r1
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 8009e60:	ea4f 4c27 	mov.w	ip, r7, asr #16
  e->a = temp;
 8009e64:	60e5      	str	r5, [r4, #12]
  if (e->c >= temp) {
 8009e66:	428a      	cmp	r2, r1
 8009e68:	db3c      	blt.n	8009ee4 <arith_decode+0xb8>
    e->c -= temp;
 8009e6a:	1a51      	subs	r1, r2, r1
    /* Conditional LPS (less probable symbol) exchange */
    if (e->a < qe) {
 8009e6c:	45ac      	cmp	ip, r5
      e->a = qe;
 8009e6e:	f8c4 c00c 	str.w	ip, [r4, #12]
    e->c -= temp;
 8009e72:	60a1      	str	r1, [r4, #8]
    if (e->a < qe) {
 8009e74:	f020 017f 	bic.w	r1, r0, #127	; 0x7f
 8009e78:	b24a      	sxtb	r2, r1
 8009e7a:	dd2e      	ble.n	8009eda <arith_decode+0xae>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009e7c:	ea82 020e 	eor.w	r2, r2, lr
 8009e80:	7032      	strb	r2, [r6, #0]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
    }
  }

  return sv >> 7;
}
 8009e82:	09c0      	lsrs	r0, r0, #7
 8009e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (--e->ct < 0) {
 8009e88:	3901      	subs	r1, #1
 8009e8a:	2900      	cmp	r1, #0
 8009e8c:	6121      	str	r1, [r4, #16]
 8009e8e:	da1a      	bge.n	8009ec6 <arith_decode+0x9a>
      if (cinfo->unread_marker)
 8009e90:	f8d8 31b4 	ldr.w	r3, [r8, #436]	; 0x1b4
 8009e94:	b96b      	cbnz	r3, 8009eb2 <arith_decode+0x86>
	data = get_byte(cinfo);	/* read next input byte */
 8009e96:	4640      	mov	r0, r8
 8009e98:	f7ff ffb2 	bl	8009e00 <get_byte>
	if (data == 0xFF) {	/* zero stuff or marker code */
 8009e9c:	28ff      	cmp	r0, #255	; 0xff
	data = get_byte(cinfo);	/* read next input byte */
 8009e9e:	4605      	mov	r5, r0
	if (data == 0xFF) {	/* zero stuff or marker code */
 8009ea0:	d108      	bne.n	8009eb4 <arith_decode+0x88>
	  do data = get_byte(cinfo);
 8009ea2:	4640      	mov	r0, r8
 8009ea4:	f7ff ffac 	bl	8009e00 <get_byte>
	  while (data == 0xFF);	/* swallow extra 0xFF bytes */
 8009ea8:	28ff      	cmp	r0, #255	; 0xff
 8009eaa:	d0fa      	beq.n	8009ea2 <arith_decode+0x76>
	  if (data == 0)
 8009eac:	b110      	cbz	r0, 8009eb4 <arith_decode+0x88>
	    cinfo->unread_marker = data;
 8009eae:	f8c8 01b4 	str.w	r0, [r8, #436]	; 0x1b4
	data = 0;		/* stuff zero data */
 8009eb2:	2500      	movs	r5, #0
      e->c = (e->c << 8) | data; /* insert data into C register */
 8009eb4:	68a0      	ldr	r0, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 8009eb6:	6923      	ldr	r3, [r4, #16]
      e->c = (e->c << 8) | data; /* insert data into C register */
 8009eb8:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 8009ebc:	f113 0208 	adds.w	r2, r3, #8
      e->c = (e->c << 8) | data; /* insert data into C register */
 8009ec0:	60a5      	str	r5, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 8009ec2:	d404      	bmi.n	8009ece <arith_decode+0xa2>
 8009ec4:	6122      	str	r2, [r4, #16]
    e->a <<= 1;
 8009ec6:	68e3      	ldr	r3, [r4, #12]
 8009ec8:	005b      	lsls	r3, r3, #1
 8009eca:	60e3      	str	r3, [r4, #12]
 8009ecc:	e7b6      	b.n	8009e3c <arith_decode+0x10>
	if (++e->ct == 0)
 8009ece:	3309      	adds	r3, #9
 8009ed0:	6123      	str	r3, [r4, #16]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d1f7      	bne.n	8009ec6 <arith_decode+0x9a>
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 8009ed6:	60e7      	str	r7, [r4, #12]
 8009ed8:	e7f5      	b.n	8009ec6 <arith_decode+0x9a>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 8009eda:	407a      	eors	r2, r7
 8009edc:	7032      	strb	r2, [r6, #0]
      sv ^= 0x80;		/* Exchange LPS/MPS */
 8009ede:	f080 0080 	eor.w	r0, r0, #128	; 0x80
 8009ee2:	e7ce      	b.n	8009e82 <arith_decode+0x56>
  } else if (e->a < 0x8000L) {
 8009ee4:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 8009ee8:	dacb      	bge.n	8009e82 <arith_decode+0x56>
    if (e->a < qe) {
 8009eea:	f020 027f 	bic.w	r2, r0, #127	; 0x7f
 8009eee:	45ac      	cmp	ip, r5
 8009ef0:	b253      	sxtb	r3, r2
 8009ef2:	dd02      	ble.n	8009efa <arith_decode+0xce>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 8009ef4:	407b      	eors	r3, r7
 8009ef6:	7033      	strb	r3, [r6, #0]
 8009ef8:	e7f1      	b.n	8009ede <arith_decode+0xb2>
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 8009efa:	ea83 030e 	eor.w	r3, r3, lr
 8009efe:	7033      	strb	r3, [r6, #0]
 8009f00:	e7bf      	b.n	8009e82 <arith_decode+0x56>
 8009f02:	bf00      	nop
 8009f04:	0802d80c 	.word	0x0802d80c

08009f08 <start_pass>:
 * Initialize for an arithmetic-compressed scan.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 8009f08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
  int ci, tbl;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 8009f0c:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
{
 8009f10:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8009f12:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->progressive_mode) {
 8009f16:	f500 77aa 	add.w	r7, r0, #340	; 0x154
 8009f1a:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f000 8088 	beq.w	800a034 <start_pass+0x12c>
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 8009f24:	e9d0 1667 	ldrd	r1, r6, [r0, #412]	; 0x19c
 8009f28:	f8d0 01a4 	ldr.w	r0, [r0, #420]	; 0x1a4
 8009f2c:	b962      	cbnz	r2, 8009f48 <start_pass+0x40>
      if (cinfo->Se != 0)
 8009f2e:	b1a9      	cbz	r1, 8009f5c <start_pass+0x54>
      if (cinfo->Ah-1 != cinfo->Al)
	goto bad;
    }
    if (cinfo->Al > 13) {	/* need not check for < 0 */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 8009f30:	6823      	ldr	r3, [r4, #0]
 8009f32:	f04f 0c11 	mov.w	ip, #17
 8009f36:	e9c3 1607 	strd	r1, r6, [r3, #28]
 8009f3a:	e9c3 c205 	strd	ip, r2, [r3, #20]
 8009f3e:	6258      	str	r0, [r3, #36]	; 0x24
 8009f40:	4620      	mov	r0, r4
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4798      	blx	r3
 8009f46:	e00f      	b.n	8009f68 <start_pass+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 8009f48:	4291      	cmp	r1, r2
 8009f4a:	dbf1      	blt.n	8009f30 <start_pass+0x28>
 8009f4c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 8009f50:	428b      	cmp	r3, r1
 8009f52:	dbed      	blt.n	8009f30 <start_pass+0x28>
      if (cinfo->comps_in_scan != 1)
 8009f54:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d1e9      	bne.n	8009f30 <start_pass+0x28>
    if (cinfo->Ah != 0) {
 8009f5c:	b116      	cbz	r6, 8009f64 <start_pass+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 8009f5e:	1e73      	subs	r3, r6, #1
 8009f60:	4283      	cmp	r3, r0
 8009f62:	d1e5      	bne.n	8009f30 <start_pass+0x28>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 8009f64:	280d      	cmp	r0, #13
 8009f66:	dce3      	bgt.n	8009f30 <start_pass+0x28>
 8009f68:	46ba      	mov	sl, r7
{
 8009f6a:	f04f 0800 	mov.w	r8, #0
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009f6e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8009f72:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
 8009f76:	4543      	cmp	r3, r8
 8009f78:	dc1b      	bgt.n	8009fb2 <start_pass+0xaa>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }
    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 8009f7a:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d153      	bne.n	800a02a <start_pass+0x122>
      if (cinfo->Ss == 0)
 8009f82:	2a00      	cmp	r2, #0
 8009f84:	d14f      	bne.n	800a026 <start_pass+0x11e>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 8009f86:	4b63      	ldr	r3, [pc, #396]	; (800a114 <start_pass+0x20c>)
{
 8009f88:	f04f 0800 	mov.w	r8, #0
 8009f8c:	f105 0914 	add.w	r9, r5, #20
     */
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
    /* Select MCU decoding routine */
    entropy->pub.decode_mcu = decode_mcu;
 8009f90:	606b      	str	r3, [r5, #4]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
      if (entropy->ac_stats[tbl] == NULL)
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 8009f92:	46c2      	mov	sl, r8
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009f94:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8009f98:	4543      	cmp	r3, r8
 8009f9a:	dc64      	bgt.n	800a066 <start_pass+0x15e>
    }
  }

  /* Initialize arithmetic decoding variables */
  entropy->c = 0;
 8009f9c:	2300      	movs	r3, #0
  entropy->a = 0;
 8009f9e:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 8009fa2:	f06f 030f 	mvn.w	r3, #15
 8009fa6:	612b      	str	r3, [r5, #16]

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 8009fa8:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8009fac:	636b      	str	r3, [r5, #52]	; 0x34
}
 8009fae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 8009fb2:	f85a 3b04 	ldr.w	r3, [sl], #4
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 8009fb6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 8009fba:	f8d3 9004 	ldr.w	r9, [r3, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 8009fbe:	ea4f 2009 	mov.w	r0, r9, lsl #8
 8009fc2:	eb01 2b09 	add.w	fp, r1, r9, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 8009fc6:	b16a      	cbz	r2, 8009fe4 <start_pass+0xdc>
 8009fc8:	580a      	ldr	r2, [r1, r0]
 8009fca:	2a00      	cmp	r2, #0
 8009fcc:	da0a      	bge.n	8009fe4 <start_pass+0xdc>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 8009fce:	6822      	ldr	r2, [r4, #0]
 8009fd0:	2376      	movs	r3, #118	; 0x76
 8009fd2:	f04f 31ff 	mov.w	r1, #4294967295
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	e9c2 3905 	strd	r3, r9, [r2, #20]
 8009fdc:	2300      	movs	r3, #0
 8009fde:	61d3      	str	r3, [r2, #28]
 8009fe0:	6852      	ldr	r2, [r2, #4]
 8009fe2:	4790      	blx	r2
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8009fe4:	f8d4 6198 	ldr.w	r6, [r4, #408]	; 0x198
 8009fe8:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 8009fec:	42b2      	cmp	r2, r6
 8009fee:	da02      	bge.n	8009ff6 <start_pass+0xee>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009ff0:	f108 0801 	add.w	r8, r8, #1
 8009ff4:	e7bb      	b.n	8009f6e <start_pass+0x66>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 8009ff6:	f85b 2026 	ldr.w	r2, [fp, r6, lsl #2]
	if (cinfo->Ah != expected)
 8009ffa:	f8d4 11a0 	ldr.w	r1, [r4, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 8009ffe:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (cinfo->Ah != expected)
 800a002:	4291      	cmp	r1, r2
 800a004:	d009      	beq.n	800a01a <start_pass+0x112>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800a006:	6822      	ldr	r2, [r4, #0]
 800a008:	2376      	movs	r3, #118	; 0x76
 800a00a:	f04f 31ff 	mov.w	r1, #4294967295
 800a00e:	4620      	mov	r0, r4
 800a010:	61d6      	str	r6, [r2, #28]
 800a012:	e9c2 3905 	strd	r3, r9, [r2, #20]
 800a016:	6852      	ldr	r2, [r2, #4]
 800a018:	4790      	blx	r2
	coef_bit_ptr[coefi] = cinfo->Al;
 800a01a:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 800a01e:	f84b 2026 	str.w	r2, [fp, r6, lsl #2]
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800a022:	3601      	adds	r6, #1
 800a024:	e7e0      	b.n	8009fe8 <start_pass+0xe0>
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800a026:	4b3c      	ldr	r3, [pc, #240]	; (800a118 <start_pass+0x210>)
 800a028:	e7ae      	b.n	8009f88 <start_pass+0x80>
      if (cinfo->Ss == 0)
 800a02a:	b90a      	cbnz	r2, 800a030 <start_pass+0x128>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800a02c:	4b3b      	ldr	r3, [pc, #236]	; (800a11c <start_pass+0x214>)
 800a02e:	e7ab      	b.n	8009f88 <start_pass+0x80>
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 800a030:	4b3b      	ldr	r3, [pc, #236]	; (800a120 <start_pass+0x218>)
 800a032:	e7a9      	b.n	8009f88 <start_pass+0x80>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800a034:	b96a      	cbnz	r2, 800a052 <start_pass+0x14a>
 800a036:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 800a03a:	b953      	cbnz	r3, 800a052 <start_pass+0x14a>
 800a03c:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800a040:	b93b      	cbnz	r3, 800a052 <start_pass+0x14a>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 800a042:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800a046:	2b3f      	cmp	r3, #63	; 0x3f
 800a048:	dc0b      	bgt.n	800a062 <start_pass+0x15a>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 800a04a:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
 800a04e:	4293      	cmp	r3, r2
 800a050:	d007      	beq.n	800a062 <start_pass+0x15a>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800a052:	6823      	ldr	r3, [r4, #0]
 800a054:	227d      	movs	r2, #125	; 0x7d
 800a056:	f04f 31ff 	mov.w	r1, #4294967295
 800a05a:	4620      	mov	r0, r4
 800a05c:	615a      	str	r2, [r3, #20]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	4798      	blx	r3
    entropy->pub.decode_mcu = decode_mcu;
 800a062:	4b30      	ldr	r3, [pc, #192]	; (800a124 <start_pass+0x21c>)
 800a064:	e790      	b.n	8009f88 <start_pass+0x80>
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800a066:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 800a06a:	f857 bb04 	ldr.w	fp, [r7], #4
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800a06e:	b133      	cbz	r3, 800a07e <start_pass+0x176>
 800a070:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800a074:	bb43      	cbnz	r3, 800a0c8 <start_pass+0x1c0>
 800a076:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d13a      	bne.n	800a0f4 <start_pass+0x1ec>
      tbl = compptr->dc_tbl_no;
 800a07e:	f8db 6014 	ldr.w	r6, [fp, #20]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 800a082:	2e0f      	cmp	r6, #15
 800a084:	d906      	bls.n	800a094 <start_pass+0x18c>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 800a086:	6823      	ldr	r3, [r4, #0]
 800a088:	2232      	movs	r2, #50	; 0x32
 800a08a:	4620      	mov	r0, r4
 800a08c:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4798      	blx	r3
      if (entropy->dc_stats[tbl] == NULL)
 800a094:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 800a098:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800a09a:	b933      	cbnz	r3, 800a0aa <start_pass+0x1a2>
	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 800a09c:	6863      	ldr	r3, [r4, #4]
 800a09e:	2240      	movs	r2, #64	; 0x40
 800a0a0:	2101      	movs	r1, #1
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4798      	blx	r3
 800a0a8:	63b0      	str	r0, [r6, #56]	; 0x38
      MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 800a0aa:	2240      	movs	r2, #64	; 0x40
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 800a0b0:	f01f ff5e 	bl	8029f70 <memset>
      entropy->last_dc_val[ci] = 0;
 800a0b4:	f8c9 a000 	str.w	sl, [r9]
      entropy->dc_context[ci] = 0;
 800a0b8:	f8c9 a010 	str.w	sl, [r9, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800a0bc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a0c0:	b9eb      	cbnz	r3, 800a0fe <start_pass+0x1f6>
 800a0c2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a0c6:	b1ab      	cbz	r3, 800a0f4 <start_pass+0x1ec>
      tbl = compptr->ac_tbl_no;
 800a0c8:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 800a0cc:	2e0f      	cmp	r6, #15
 800a0ce:	d819      	bhi.n	800a104 <start_pass+0x1fc>
      if (entropy->ac_stats[tbl] == NULL)
 800a0d0:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 800a0d4:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 800a0d6:	b93b      	cbnz	r3, 800a0e8 <start_pass+0x1e0>
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 800a0d8:	6863      	ldr	r3, [r4, #4]
 800a0da:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a0de:	2101      	movs	r1, #1
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4798      	blx	r3
 800a0e6:	67b0      	str	r0, [r6, #120]	; 0x78
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 800a0e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a0ec:	2100      	movs	r1, #0
 800a0ee:	6fb0      	ldr	r0, [r6, #120]	; 0x78
 800a0f0:	f01f ff3e 	bl	8029f70 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a0f4:	f108 0801 	add.w	r8, r8, #1
 800a0f8:	f109 0904 	add.w	r9, r9, #4
 800a0fc:	e74a      	b.n	8009f94 <start_pass+0x8c>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800a0fe:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800a102:	e7e0      	b.n	800a0c6 <start_pass+0x1be>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 800a104:	6823      	ldr	r3, [r4, #0]
 800a106:	2232      	movs	r2, #50	; 0x32
 800a108:	4620      	mov	r0, r4
 800a10a:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4798      	blx	r3
 800a112:	e7dd      	b.n	800a0d0 <start_pass+0x1c8>
 800a114:	0800a6cf 	.word	0x0800a6cf
 800a118:	0800a59b 	.word	0x0800a59b
 800a11c:	0800a549 	.word	0x0800a549
 800a120:	0800a41f 	.word	0x0800a41f
 800a124:	0800a1cb 	.word	0x0800a1cb

0800a128 <process_restart>:
{
 800a128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800a12c:	e9d0 3573 	ldrd	r3, r5, [r0, #460]	; 0x1cc
{
 800a130:	4604      	mov	r4, r0
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	4798      	blx	r3
 800a136:	b928      	cbnz	r0, 800a144 <process_restart+0x1c>
    ERREXIT(cinfo, JERR_CANT_SUSPEND);
 800a138:	6823      	ldr	r3, [r4, #0]
 800a13a:	2219      	movs	r2, #25
 800a13c:	4620      	mov	r0, r4
 800a13e:	615a      	str	r2, [r3, #20]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4798      	blx	r3
{
 800a144:	2600      	movs	r6, #0
 800a146:	f105 0714 	add.w	r7, r5, #20
 800a14a:	f504 78aa 	add.w	r8, r4, #340	; 0x154
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 800a14e:	46b1      	mov	r9, r6
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a150:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800a154:	42b3      	cmp	r3, r6
 800a156:	dc0a      	bgt.n	800a16e <process_restart+0x46>
  entropy->c = 0;
 800a158:	2300      	movs	r3, #0
  entropy->a = 0;
 800a15a:	e9c5 3302 	strd	r3, r3, [r5, #8]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 800a15e:	f06f 030f 	mvn.w	r3, #15
 800a162:	612b      	str	r3, [r5, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800a164:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800a168:	636b      	str	r3, [r5, #52]	; 0x34
}
 800a16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800a16e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    compptr = cinfo->cur_comp_info[ci];
 800a172:	f858 ab04 	ldr.w	sl, [r8], #4
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 800a176:	b12b      	cbz	r3, 800a184 <process_restart+0x5c>
 800a178:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800a17c:	b9ab      	cbnz	r3, 800a1aa <process_restart+0x82>
 800a17e:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800a182:	b9e3      	cbnz	r3, 800a1be <process_restart+0x96>
      MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 800a184:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a188:	2240      	movs	r2, #64	; 0x40
 800a18a:	2100      	movs	r1, #0
 800a18c:	330e      	adds	r3, #14
 800a18e:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800a192:	f01f feed 	bl	8029f70 <memset>
      entropy->last_dc_val[ci] = 0;
 800a196:	f8c7 9000 	str.w	r9, [r7]
      entropy->dc_context[ci] = 0;
 800a19a:	f8c7 9010 	str.w	r9, [r7, #16]
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800a19e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a1a2:	b97b      	cbnz	r3, 800a1c4 <process_restart+0x9c>
 800a1a4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a1a8:	b14b      	cbz	r3, 800a1be <process_restart+0x96>
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 800a1aa:	f8da 3018 	ldr.w	r3, [sl, #24]
 800a1ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	331e      	adds	r3, #30
 800a1b6:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 800a1ba:	f01f fed9 	bl	8029f70 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a1be:	3601      	adds	r6, #1
 800a1c0:	3704      	adds	r7, #4
 800a1c2:	e7c5      	b.n	800a150 <process_restart+0x28>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800a1c4:	f8d4 3198 	ldr.w	r3, [r4, #408]	; 0x198
 800a1c8:	e7ee      	b.n	800a1a8 <process_restart+0x80>

0800a1ca <decode_mcu>:
{
 800a1ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 800a1ce:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a1d2:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a1d4:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800a1d8:	ed2d 8b02 	vpush	{d8}
 800a1dc:	b087      	sub	sp, #28
 800a1de:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800a1e0:	b133      	cbz	r3, 800a1f0 <decode_mcu+0x26>
    if (entropy->restarts_to_go == 0)
 800a1e2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a1e4:	b90b      	cbnz	r3, 800a1ea <decode_mcu+0x20>
      process_restart(cinfo);
 800a1e6:	f7ff ff9f 	bl	800a128 <process_restart>
    entropy->restarts_to_go--;
 800a1ea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	636b      	str	r3, [r5, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a1f0:	692b      	ldr	r3, [r5, #16]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	f000 809f 	beq.w	800a336 <decode_mcu+0x16c>
  natural_order = cinfo->natural_order;
 800a1f8:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a1fc:	2700      	movs	r7, #0
  natural_order = cinfo->natural_order;
 800a1fe:	9304      	str	r3, [sp, #16]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a200:	f504 73b8 	add.w	r3, r4, #368	; 0x170
 800a204:	9303      	str	r3, [sp, #12]
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800a206:	f105 03b8 	add.w	r3, r5, #184	; 0xb8
 800a20a:	ee08 3a10 	vmov	s16, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a20e:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800a212:	42bb      	cmp	r3, r7
 800a214:	f340 808f 	ble.w	800a336 <decode_mcu+0x16c>
    block = MCU_data[blkn];
 800a218:	9b05      	ldr	r3, [sp, #20]
    if (arith_decode(cinfo, st) == 0)
 800a21a:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 800a21c:	9a03      	ldr	r2, [sp, #12]
    block = MCU_data[blkn];
 800a21e:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800a222:	9300      	str	r3, [sp, #0]
    ci = cinfo->MCU_membership[blkn];
 800a224:	f852 3b04 	ldr.w	r3, [r2], #4
 800a228:	9203      	str	r2, [sp, #12]
    compptr = cinfo->cur_comp_info[ci];
 800a22a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a22e:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 800a232:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a236:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
    compptr = cinfo->cur_comp_info[ci];
 800a23a:	9201      	str	r2, [sp, #4]
    tbl = compptr->dc_tbl_no;
 800a23c:	6952      	ldr	r2, [r2, #20]
 800a23e:	eb05 0982 	add.w	r9, r5, r2, lsl #2
 800a242:	9202      	str	r2, [sp, #8]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a244:	f8d9 6038 	ldr.w	r6, [r9, #56]	; 0x38
 800a248:	440e      	add	r6, r1
    if (arith_decode(cinfo, st) == 0)
 800a24a:	4631      	mov	r1, r6
 800a24c:	f7ff fdee 	bl	8009e2c <arith_decode>
 800a250:	bb68      	cbnz	r0, 800a2ae <decode_mcu+0xe4>
      entropy->dc_context[ci] = 0;
 800a252:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
    (*block)[0] = (JCOEF) entropy->last_dc_val[ci];
 800a256:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a25a:	9a00      	ldr	r2, [sp, #0]
 800a25c:	8013      	strh	r3, [r2, #0]
    if (cinfo->lim_Se == 0) continue;
 800a25e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a262:	2b00      	cmp	r3, #0
 800a264:	f000 80c4 	beq.w	800a3f0 <decode_mcu+0x226>
    tbl = compptr->ac_tbl_no;
 800a268:	9b01      	ldr	r3, [sp, #4]
    k = 0;
 800a26a:	2600      	movs	r6, #0
    tbl = compptr->ac_tbl_no;
 800a26c:	699b      	ldr	r3, [r3, #24]
    k = 0;
 800a26e:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a272:	eb04 0a03 	add.w	sl, r4, r3
      st = entropy->ac_stats[tbl] + 3 * k;
 800a276:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800a27a:	f8db 3078 	ldr.w	r3, [fp, #120]	; 0x78
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800a27e:	4620      	mov	r0, r4
      st = entropy->ac_stats[tbl] + 3 * k;
 800a280:	eb03 0901 	add.w	r9, r3, r1
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800a284:	4649      	mov	r1, r9
 800a286:	f7ff fdd1 	bl	8009e2c <arith_decode>
 800a28a:	2800      	cmp	r0, #0
 800a28c:	f040 80b0 	bne.w	800a3f0 <decode_mcu+0x226>
	if (arith_decode(cinfo, st + 1)) break;
 800a290:	f109 0101 	add.w	r1, r9, #1
 800a294:	4620      	mov	r0, r4
	k++;
 800a296:	3601      	adds	r6, #1
	if (arith_decode(cinfo, st + 1)) break;
 800a298:	f7ff fdc8 	bl	8009e2c <arith_decode>
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d16e      	bne.n	800a37e <decode_mcu+0x1b4>
	if (k >= cinfo->lim_Se) {
 800a2a0:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
	st += 3;
 800a2a4:	f109 0903 	add.w	r9, r9, #3
	if (k >= cinfo->lim_Se) {
 800a2a8:	42b2      	cmp	r2, r6
 800a2aa:	dcf1      	bgt.n	800a290 <decode_mcu+0xc6>
 800a2ac:	e038      	b.n	800a320 <decode_mcu+0x156>
      sign = arith_decode(cinfo, st + 1);
 800a2ae:	1c71      	adds	r1, r6, #1
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f7ff fdbb 	bl	8009e2c <arith_decode>
      st += 2; st += sign;
 800a2b6:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 800a2b8:	4680      	mov	r8, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a2ba:	4620      	mov	r0, r4
      st += 2; st += sign;
 800a2bc:	eb06 0a01 	add.w	sl, r6, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a2c0:	4651      	mov	r1, sl
 800a2c2:	f7ff fdb3 	bl	8009e2c <arith_decode>
 800a2c6:	4606      	mov	r6, r0
 800a2c8:	b140      	cbz	r0, 800a2dc <decode_mcu+0x112>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 800a2ca:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 800a2ce:	f101 0a14 	add.w	sl, r1, #20
	while (arith_decode(cinfo, st)) {
 800a2d2:	4651      	mov	r1, sl
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f7ff fda9 	bl	8009e2c <arith_decode>
 800a2da:	b9e8      	cbnz	r0, 800a318 <decode_mcu+0x14e>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800a2dc:	9b02      	ldr	r3, [sp, #8]
 800a2de:	4423      	add	r3, r4
 800a2e0:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 800a2e4:	4699      	mov	r9, r3
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	fa03 f202 	lsl.w	r2, r3, r2
 800a2ec:	ebb6 0f62 	cmp.w	r6, r2, asr #1
 800a2f0:	da2a      	bge.n	800a348 <decode_mcu+0x17e>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 800a2f2:	2200      	movs	r2, #0
      st += 14;
 800a2f4:	f10a 010e 	add.w	r1, sl, #14
      while (m >>= 1)
 800a2f8:	46b1      	mov	r9, r6
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800a2fa:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
      while (m >>= 1)
 800a2fe:	1076      	asrs	r6, r6, #1
 800a300:	d130      	bne.n	800a364 <decode_mcu+0x19a>
      v += 1; if (sign) v = -v;
 800a302:	f1b8 0f00 	cmp.w	r8, #0
 800a306:	d137      	bne.n	800a378 <decode_mcu+0x1ae>
 800a308:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 800a30c:	f8db 2014 	ldr.w	r2, [fp, #20]
 800a310:	444a      	add	r2, r9
 800a312:	f8cb 2014 	str.w	r2, [fp, #20]
 800a316:	e79e      	b.n	800a256 <decode_mcu+0x8c>
	  if ((m <<= 1) == 0x8000) {
 800a318:	0076      	lsls	r6, r6, #1
 800a31a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 800a31e:	d110      	bne.n	800a342 <decode_mcu+0x178>
	      WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a320:	6823      	ldr	r3, [r4, #0]
 800a322:	2275      	movs	r2, #117	; 0x75
 800a324:	f04f 31ff 	mov.w	r1, #4294967295
 800a328:	4620      	mov	r0, r4
 800a32a:	615a      	str	r2, [r3, #20]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	4798      	blx	r3
	      entropy->ct = -1;			/* magnitude overflow */
 800a330:	f04f 33ff 	mov.w	r3, #4294967295
 800a334:	612b      	str	r3, [r5, #16]
}
 800a336:	2001      	movs	r0, #1
 800a338:	b007      	add	sp, #28
 800a33a:	ecbd 8b02 	vpop	{d8}
 800a33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 800a342:	f10a 0a01 	add.w	sl, sl, #1
 800a346:	e7c4      	b.n	800a2d2 <decode_mcu+0x108>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800a348:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 800a34c:	2301      	movs	r3, #1
 800a34e:	fa03 f202 	lsl.w	r2, r3, r2
 800a352:	ebb6 0f62 	cmp.w	r6, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800a356:	bfcc      	ite	gt
 800a358:	f108 0203 	addgt.w	r2, r8, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800a35c:	f108 0201 	addle.w	r2, r8, #1
 800a360:	0092      	lsls	r2, r2, #2
 800a362:	e7c7      	b.n	800a2f4 <decode_mcu+0x12a>
	if (arith_decode(cinfo, st)) v |= m;
 800a364:	4620      	mov	r0, r4
 800a366:	9102      	str	r1, [sp, #8]
 800a368:	f7ff fd60 	bl	8009e2c <arith_decode>
 800a36c:	9902      	ldr	r1, [sp, #8]
 800a36e:	2800      	cmp	r0, #0
 800a370:	d0c5      	beq.n	800a2fe <decode_mcu+0x134>
 800a372:	ea49 0906 	orr.w	r9, r9, r6
 800a376:	e7c2      	b.n	800a2fe <decode_mcu+0x134>
      v += 1; if (sign) v = -v;
 800a378:	ea6f 0909 	mvn.w	r9, r9
 800a37c:	e7c6      	b.n	800a30c <decode_mcu+0x142>
      st += 2;
 800a37e:	f109 0902 	add.w	r9, r9, #2
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800a382:	ee18 1a10 	vmov	r1, s16
 800a386:	4620      	mov	r0, r4
 800a388:	f7ff fd50 	bl	8009e2c <arith_decode>
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a38c:	4649      	mov	r1, r9
      sign = arith_decode(cinfo, entropy->fixed_bin);
 800a38e:	9001      	str	r0, [sp, #4]
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a390:	4620      	mov	r0, r4
 800a392:	f7ff fd4b 	bl	8009e2c <arith_decode>
 800a396:	4680      	mov	r8, r0
 800a398:	b1a8      	cbz	r0, 800a3c6 <decode_mcu+0x1fc>
	if (arith_decode(cinfo, st)) {
 800a39a:	4649      	mov	r1, r9
 800a39c:	4620      	mov	r0, r4
 800a39e:	f7ff fd45 	bl	8009e2c <arith_decode>
 800a3a2:	b180      	cbz	r0, 800a3c6 <decode_mcu+0x1fc>
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a3a4:	f89a 1108 	ldrb.w	r1, [sl, #264]	; 0x108
	  m <<= 1;
 800a3a8:	ea4f 0848 	mov.w	r8, r8, lsl #1
	  st = entropy->ac_stats[tbl] +
 800a3ac:	f8db 2078 	ldr.w	r2, [fp, #120]	; 0x78
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a3b0:	42b1      	cmp	r1, r6
 800a3b2:	bfac      	ite	ge
 800a3b4:	21bd      	movge	r1, #189	; 0xbd
 800a3b6:	21d9      	movlt	r1, #217	; 0xd9
	  st = entropy->ac_stats[tbl] +
 800a3b8:	eb02 0901 	add.w	r9, r2, r1
	  while (arith_decode(cinfo, st)) {
 800a3bc:	4649      	mov	r1, r9
 800a3be:	4620      	mov	r0, r4
 800a3c0:	f7ff fd34 	bl	8009e2c <arith_decode>
 800a3c4:	b9b0      	cbnz	r0, 800a3f4 <decode_mcu+0x22a>
      st += 14;
 800a3c6:	f109 010e 	add.w	r1, r9, #14
      v = m;
 800a3ca:	46c1      	mov	r9, r8
      while (m >>= 1)
 800a3cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a3d0:	d118      	bne.n	800a404 <decode_mcu+0x23a>
      v += 1; if (sign) v = -v;
 800a3d2:	9b01      	ldr	r3, [sp, #4]
 800a3d4:	bb03      	cbnz	r3, 800a418 <decode_mcu+0x24e>
 800a3d6:	f109 0201 	add.w	r2, r9, #1
      (*block)[natural_order[k]] = (JCOEF) v;
 800a3da:	9b04      	ldr	r3, [sp, #16]
 800a3dc:	9900      	ldr	r1, [sp, #0]
 800a3de:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800a3e2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    } while (k < cinfo->lim_Se);
 800a3e6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800a3ea:	42b3      	cmp	r3, r6
 800a3ec:	f73f af43 	bgt.w	800a276 <decode_mcu+0xac>
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a3f0:	3701      	adds	r7, #1
 800a3f2:	e70c      	b.n	800a20e <decode_mcu+0x44>
	    if ((m <<= 1) == 0x8000) {
 800a3f4:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800a3f8:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
 800a3fc:	d090      	beq.n	800a320 <decode_mcu+0x156>
	    st += 1;
 800a3fe:	f109 0901 	add.w	r9, r9, #1
 800a402:	e7db      	b.n	800a3bc <decode_mcu+0x1f2>
	if (arith_decode(cinfo, st)) v |= m;
 800a404:	4620      	mov	r0, r4
 800a406:	9102      	str	r1, [sp, #8]
 800a408:	f7ff fd10 	bl	8009e2c <arith_decode>
 800a40c:	9902      	ldr	r1, [sp, #8]
 800a40e:	2800      	cmp	r0, #0
 800a410:	d0dc      	beq.n	800a3cc <decode_mcu+0x202>
 800a412:	ea49 0908 	orr.w	r9, r9, r8
 800a416:	e7d9      	b.n	800a3cc <decode_mcu+0x202>
      v += 1; if (sign) v = -v;
 800a418:	ea6f 0209 	mvn.w	r2, r9
 800a41c:	e7dd      	b.n	800a3da <decode_mcu+0x210>

0800a41e <decode_mcu_AC_refine>:
  if (cinfo->restart_interval) {
 800a41e:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a422:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a426:	4604      	mov	r4, r0
 800a428:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a42a:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 800a42e:	ed2d 8b02 	vpush	{d8}
 800a432:	b085      	sub	sp, #20
  if (cinfo->restart_interval) {
 800a434:	b133      	cbz	r3, 800a444 <decode_mcu_AC_refine+0x26>
    if (entropy->restarts_to_go == 0)
 800a436:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a438:	b90b      	cbnz	r3, 800a43e <decode_mcu_AC_refine+0x20>
      process_restart(cinfo);
 800a43a:	f7ff fe75 	bl	800a128 <process_restart>
    entropy->restarts_to_go--;
 800a43e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a440:	3b01      	subs	r3, #1
 800a442:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a444:	6933      	ldr	r3, [r6, #16]
 800a446:	3301      	adds	r3, #1
 800a448:	d078      	beq.n	800a53c <decode_mcu_AC_refine+0x11e>
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a44a:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a44e:	2101      	movs	r1, #1
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800a450:	f04f 38ff 	mov.w	r8, #4294967295
  natural_order = cinfo->natural_order;
 800a454:	f8d4 b1ac 	ldr.w	fp, [r4, #428]	; 0x1ac
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a458:	699a      	ldr	r2, [r3, #24]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a45a:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
  block = MCU_data[0];
 800a45e:	f8d5 9000 	ldr.w	r9, [r5]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a462:	4099      	lsls	r1, r3
  for (kex = cinfo->Se; kex > 0; kex--)
 800a464:	f8d4 719c 	ldr.w	r7, [r4, #412]	; 0x19c
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800a468:	fa08 f303 	lsl.w	r3, r8, r3
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a46c:	9101      	str	r1, [sp, #4]
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800a46e:	9302      	str	r3, [sp, #8]
  for (kex = cinfo->Se; kex > 0; kex--)
 800a470:	2f00      	cmp	r7, #0
 800a472:	dc37      	bgt.n	800a4e4 <decode_mcu_AC_refine+0xc6>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a474:	f102 031e 	add.w	r3, r2, #30
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a478:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a47c:	9303      	str	r3, [sp, #12]
	if (arith_decode(cinfo, entropy->fixed_bin))
 800a47e:	f106 03b8 	add.w	r3, r6, #184	; 0xb8
 800a482:	ee08 3a10 	vmov	s16, r3
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a486:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800a48a:	42ab      	cmp	r3, r5
 800a48c:	db56      	blt.n	800a53c <decode_mcu_AC_refine+0x11e>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a48e:	1e6b      	subs	r3, r5, #1
 800a490:	9a03      	ldr	r2, [sp, #12]
    if (k > kex)
 800a492:	42bd      	cmp	r5, r7
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a494:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a498:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 800a49c:	eb02 0a03 	add.w	sl, r2, r3
    if (k > kex)
 800a4a0:	dd05      	ble.n	800a4ae <decode_mcu_AC_refine+0x90>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 800a4a2:	4651      	mov	r1, sl
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	f7ff fcc1 	bl	8009e2c <arith_decode>
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	d146      	bne.n	800a53c <decode_mcu_AC_refine+0x11e>
      thiscoef = *block + natural_order[k];
 800a4ae:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800a4b2:	3501      	adds	r5, #1
 800a4b4:	eb09 0841 	add.w	r8, r9, r1, lsl #1
      if (*thiscoef) {				/* previously nonzero coef */
 800a4b8:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 800a4bc:	b1d1      	cbz	r1, 800a4f4 <decode_mcu_AC_refine+0xd6>
	if (arith_decode(cinfo, st + 2)) {
 800a4be:	f10a 0102 	add.w	r1, sl, #2
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	f7ff fcb2 	bl	8009e2c <arith_decode>
 800a4c8:	2800      	cmp	r0, #0
 800a4ca:	d0dc      	beq.n	800a486 <decode_mcu_AC_refine+0x68>
	  if (*thiscoef < 0)
 800a4cc:	f9b8 1000 	ldrsh.w	r1, [r8]
 800a4d0:	f8b8 3000 	ldrh.w	r3, [r8]
 800a4d4:	2900      	cmp	r1, #0
	    *thiscoef += m1;
 800a4d6:	bfb4      	ite	lt
 800a4d8:	9a02      	ldrlt	r2, [sp, #8]
	    *thiscoef += p1;
 800a4da:	9a01      	ldrge	r2, [sp, #4]
 800a4dc:	4413      	add	r3, r2
 800a4de:	f8a8 3000 	strh.w	r3, [r8]
 800a4e2:	e7d0      	b.n	800a486 <decode_mcu_AC_refine+0x68>
    if ((*block)[natural_order[kex]]) break;
 800a4e4:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800a4e8:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1c1      	bne.n	800a474 <decode_mcu_AC_refine+0x56>
  for (kex = cinfo->Se; kex > 0; kex--)
 800a4f0:	3f01      	subs	r7, #1
 800a4f2:	e7bd      	b.n	800a470 <decode_mcu_AC_refine+0x52>
      if (arith_decode(cinfo, st + 1)) {	/* newly nonzero coef */
 800a4f4:	f10a 0101 	add.w	r1, sl, #1
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	f7ff fc97 	bl	8009e2c <arith_decode>
 800a4fe:	b160      	cbz	r0, 800a51a <decode_mcu_AC_refine+0xfc>
	if (arith_decode(cinfo, entropy->fixed_bin))
 800a500:	ee18 1a10 	vmov	r1, s16
 800a504:	4620      	mov	r0, r4
 800a506:	f7ff fc91 	bl	8009e2c <arith_decode>
	  *thiscoef = m1;
 800a50a:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 800a50e:	2800      	cmp	r0, #0
 800a510:	bf18      	it	ne
 800a512:	4613      	movne	r3, r2
 800a514:	f8a8 3000 	strh.w	r3, [r8]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a518:	e7b5      	b.n	800a486 <decode_mcu_AC_refine+0x68>
      if (k > cinfo->Se) {
 800a51a:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 800a51e:	f10a 0a03 	add.w	sl, sl, #3
      if (k > cinfo->Se) {
 800a522:	42aa      	cmp	r2, r5
 800a524:	dac3      	bge.n	800a4ae <decode_mcu_AC_refine+0x90>
	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a526:	6823      	ldr	r3, [r4, #0]
 800a528:	2275      	movs	r2, #117	; 0x75
 800a52a:	f04f 31ff 	mov.w	r1, #4294967295
 800a52e:	4620      	mov	r0, r4
 800a530:	615a      	str	r2, [r3, #20]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	4798      	blx	r3
	entropy->ct = -1;			/* spectral overflow */
 800a536:	f04f 33ff 	mov.w	r3, #4294967295
 800a53a:	6133      	str	r3, [r6, #16]
}
 800a53c:	2001      	movs	r0, #1
 800a53e:	b005      	add	sp, #20
 800a540:	ecbd 8b02 	vpop	{d8}
 800a544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a548 <decode_mcu_DC_refine>:
  if (cinfo->restart_interval) {
 800a548:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a550:	4604      	mov	r4, r0
 800a552:	4688      	mov	r8, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a554:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800a558:	b133      	cbz	r3, 800a568 <decode_mcu_DC_refine+0x20>
    if (entropy->restarts_to_go == 0)
 800a55a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a55c:	b90b      	cbnz	r3, 800a562 <decode_mcu_DC_refine+0x1a>
      process_restart(cinfo);
 800a55e:	f7ff fde3 	bl	800a128 <process_restart>
    entropy->restarts_to_go--;
 800a562:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a564:	3b01      	subs	r3, #1
 800a566:	6373      	str	r3, [r6, #52]	; 0x34
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a568:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800a56c:	2701      	movs	r7, #1
  st = entropy->fixed_bin;	/* use fixed probability estimation */
 800a56e:	36b8      	adds	r6, #184	; 0xb8
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a570:	2500      	movs	r5, #0
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 800a572:	409f      	lsls	r7, r3
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a574:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800a578:	42ab      	cmp	r3, r5
 800a57a:	dc02      	bgt.n	800a582 <decode_mcu_DC_refine+0x3a>
}
 800a57c:	2001      	movs	r0, #1
 800a57e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (arith_decode(cinfo, st))
 800a582:	4631      	mov	r1, r6
 800a584:	4620      	mov	r0, r4
 800a586:	f7ff fc51 	bl	8009e2c <arith_decode>
 800a58a:	b120      	cbz	r0, 800a596 <decode_mcu_DC_refine+0x4e>
      MCU_data[blkn][0][0] |= p1;
 800a58c:	f858 2025 	ldr.w	r2, [r8, r5, lsl #2]
 800a590:	8813      	ldrh	r3, [r2, #0]
 800a592:	433b      	orrs	r3, r7
 800a594:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a596:	3501      	adds	r5, #1
 800a598:	e7ec      	b.n	800a574 <decode_mcu_DC_refine+0x2c>

0800a59a <decode_mcu_AC_first>:
  if (cinfo->restart_interval) {
 800a59a:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a59e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	b087      	sub	sp, #28
 800a5a6:	460d      	mov	r5, r1
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a5a8:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800a5ac:	b133      	cbz	r3, 800a5bc <decode_mcu_AC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800a5ae:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a5b0:	b90b      	cbnz	r3, 800a5b6 <decode_mcu_AC_first+0x1c>
      process_restart(cinfo);
 800a5b2:	f7ff fdb9 	bl	800a128 <process_restart>
    entropy->restarts_to_go--;
 800a5b6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a5bc:	6933      	ldr	r3, [r6, #16]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	d01d      	beq.n	800a5fe <decode_mcu_AC_first+0x64>
  block = MCU_data[0];
 800a5c2:	682b      	ldr	r3, [r5, #0]
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800a5c4:	f106 0bb8 	add.w	fp, r6, #184	; 0xb8
  natural_order = cinfo->natural_order;
 800a5c8:	f8d4 a1ac 	ldr.w	sl, [r4, #428]	; 0x1ac
  block = MCU_data[0];
 800a5cc:	9302      	str	r3, [sp, #8]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a5ce:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a5d2:	f8d4 5198 	ldr.w	r5, [r4, #408]	; 0x198
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 800a5d6:	699b      	ldr	r3, [r3, #24]
 800a5d8:	eb06 0983 	add.w	r9, r6, r3, lsl #2
 800a5dc:	9301      	str	r3, [sp, #4]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a5de:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800a5e2:	42ab      	cmp	r3, r5
 800a5e4:	db0b      	blt.n	800a5fe <decode_mcu_AC_first+0x64>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a5e6:	1e69      	subs	r1, r5, #1
 800a5e8:	f8d9 3078 	ldr.w	r3, [r9, #120]	; 0x78
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800a5ec:	4620      	mov	r0, r4
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800a5ee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800a5f2:	eb03 0801 	add.w	r8, r3, r1
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 800a5f6:	4641      	mov	r1, r8
 800a5f8:	f7ff fc18 	bl	8009e2c <arith_decode>
 800a5fc:	b1b0      	cbz	r0, 800a62c <decode_mcu_AC_first+0x92>
}
 800a5fe:	2001      	movs	r0, #1
 800a600:	b007      	add	sp, #28
 800a602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      st += 3; k++;
 800a606:	3501      	adds	r5, #1
      if (k > cinfo->Se) {
 800a608:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
      st += 3; k++;
 800a60c:	f108 0803 	add.w	r8, r8, #3
      if (k > cinfo->Se) {
 800a610:	42aa      	cmp	r2, r5
 800a612:	da0b      	bge.n	800a62c <decode_mcu_AC_first+0x92>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a614:	6823      	ldr	r3, [r4, #0]
 800a616:	2275      	movs	r2, #117	; 0x75
 800a618:	f04f 31ff 	mov.w	r1, #4294967295
 800a61c:	4620      	mov	r0, r4
 800a61e:	615a      	str	r2, [r3, #20]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800a624:	f04f 33ff 	mov.w	r3, #4294967295
 800a628:	6133      	str	r3, [r6, #16]
	    return TRUE;
 800a62a:	e7e8      	b.n	800a5fe <decode_mcu_AC_first+0x64>
    while (arith_decode(cinfo, st + 1) == 0) {
 800a62c:	f108 0101 	add.w	r1, r8, #1
 800a630:	4620      	mov	r0, r4
 800a632:	f7ff fbfb 	bl	8009e2c <arith_decode>
 800a636:	2800      	cmp	r0, #0
 800a638:	d0e5      	beq.n	800a606 <decode_mcu_AC_first+0x6c>
    st += 2;
 800a63a:	f108 0802 	add.w	r8, r8, #2
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800a63e:	4659      	mov	r1, fp
 800a640:	4620      	mov	r0, r4
 800a642:	f7ff fbf3 	bl	8009e2c <arith_decode>
    if ((m = arith_decode(cinfo, st)) != 0) {
 800a646:	4641      	mov	r1, r8
    sign = arith_decode(cinfo, entropy->fixed_bin);
 800a648:	9003      	str	r0, [sp, #12]
    if ((m = arith_decode(cinfo, st)) != 0) {
 800a64a:	4620      	mov	r0, r4
 800a64c:	f7ff fbee 	bl	8009e2c <arith_decode>
 800a650:	4607      	mov	r7, r0
 800a652:	b1b0      	cbz	r0, 800a682 <decode_mcu_AC_first+0xe8>
      if (arith_decode(cinfo, st)) {
 800a654:	4641      	mov	r1, r8
 800a656:	4620      	mov	r0, r4
 800a658:	f7ff fbe8 	bl	8009e2c <arith_decode>
 800a65c:	b188      	cbz	r0, 800a682 <decode_mcu_AC_first+0xe8>
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a65e:	9b01      	ldr	r3, [sp, #4]
	m <<= 1;
 800a660:	007f      	lsls	r7, r7, #1
	st = entropy->ac_stats[tbl] +
 800a662:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 800a666:	18e1      	adds	r1, r4, r3
 800a668:	f891 1108 	ldrb.w	r1, [r1, #264]	; 0x108
 800a66c:	42a9      	cmp	r1, r5
 800a66e:	bfac      	ite	ge
 800a670:	21bd      	movge	r1, #189	; 0xbd
 800a672:	21d9      	movlt	r1, #217	; 0xd9
	st = entropy->ac_stats[tbl] +
 800a674:	eb02 0801 	add.w	r8, r2, r1
	while (arith_decode(cinfo, st)) {
 800a678:	4641      	mov	r1, r8
 800a67a:	4620      	mov	r0, r4
 800a67c:	f7ff fbd6 	bl	8009e2c <arith_decode>
 800a680:	b988      	cbnz	r0, 800a6a6 <decode_mcu_AC_first+0x10c>
    st += 14;
 800a682:	f108 010e 	add.w	r1, r8, #14
    v = m;
 800a686:	463a      	mov	r2, r7
    while (m >>= 1)
 800a688:	107f      	asrs	r7, r7, #1
 800a68a:	d113      	bne.n	800a6b4 <decode_mcu_AC_first+0x11a>
    v += 1; if (sign) v = -v;
 800a68c:	9b03      	ldr	r3, [sp, #12]
 800a68e:	b9e3      	cbnz	r3, 800a6ca <decode_mcu_AC_first+0x130>
 800a690:	3201      	adds	r2, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800a692:	f8d4 11a4 	ldr.w	r1, [r4, #420]	; 0x1a4
 800a696:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a69a:	3501      	adds	r5, #1
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 800a69c:	408a      	lsls	r2, r1
 800a69e:	9902      	ldr	r1, [sp, #8]
 800a6a0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800a6a4:	e79b      	b.n	800a5de <decode_mcu_AC_first+0x44>
	  if ((m <<= 1) == 0x8000) {
 800a6a6:	007f      	lsls	r7, r7, #1
 800a6a8:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
 800a6ac:	d0b2      	beq.n	800a614 <decode_mcu_AC_first+0x7a>
	  st += 1;
 800a6ae:	f108 0801 	add.w	r8, r8, #1
 800a6b2:	e7e1      	b.n	800a678 <decode_mcu_AC_first+0xde>
      if (arith_decode(cinfo, st)) v |= m;
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800a6ba:	f7ff fbb7 	bl	8009e2c <arith_decode>
 800a6be:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	d0e0      	beq.n	800a688 <decode_mcu_AC_first+0xee>
 800a6c6:	433a      	orrs	r2, r7
 800a6c8:	e7de      	b.n	800a688 <decode_mcu_AC_first+0xee>
    v += 1; if (sign) v = -v;
 800a6ca:	43d2      	mvns	r2, r2
 800a6cc:	e7e1      	b.n	800a692 <decode_mcu_AC_first+0xf8>

0800a6ce <decode_mcu_DC_first>:
{
 800a6ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->restart_interval) {
 800a6d2:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800a6d6:	b085      	sub	sp, #20
 800a6d8:	4604      	mov	r4, r0
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800a6da:	f8d0 61d0 	ldr.w	r6, [r0, #464]	; 0x1d0
{
 800a6de:	9103      	str	r1, [sp, #12]
  if (cinfo->restart_interval) {
 800a6e0:	b133      	cbz	r3, 800a6f0 <decode_mcu_DC_first+0x22>
    if (entropy->restarts_to_go == 0)
 800a6e2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a6e4:	b90b      	cbnz	r3, 800a6ea <decode_mcu_DC_first+0x1c>
      process_restart(cinfo);
 800a6e6:	f7ff fd1f 	bl	800a128 <process_restart>
    entropy->restarts_to_go--;
 800a6ea:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800a6ec:	3b01      	subs	r3, #1
 800a6ee:	6373      	str	r3, [r6, #52]	; 0x34
  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800a6f0:	6933      	ldr	r3, [r6, #16]
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	d073      	beq.n	800a7de <decode_mcu_DC_first+0x110>
 800a6f6:	f504 73b8 	add.w	r3, r4, #368	; 0x170
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a6fa:	f04f 0800 	mov.w	r8, #0
 800a6fe:	9301      	str	r3, [sp, #4]
 800a700:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800a704:	4543      	cmp	r3, r8
 800a706:	dd6a      	ble.n	800a7de <decode_mcu_DC_first+0x110>
    block = MCU_data[blkn];
 800a708:	9b03      	ldr	r3, [sp, #12]
    if (arith_decode(cinfo, st) == 0)
 800a70a:	4620      	mov	r0, r4
    ci = cinfo->MCU_membership[blkn];
 800a70c:	9a01      	ldr	r2, [sp, #4]
    block = MCU_data[blkn];
 800a70e:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800a712:	9302      	str	r3, [sp, #8]
    ci = cinfo->MCU_membership[blkn];
 800a714:	f852 3b04 	ldr.w	r3, [r2], #4
 800a718:	9201      	str	r2, [sp, #4]
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 800a71a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a71e:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
 800a722:	f8d2 2154 	ldr.w	r2, [r2, #340]	; 0x154
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a726:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 800a72a:	6952      	ldr	r2, [r2, #20]
 800a72c:	eb06 0982 	add.w	r9, r6, r2, lsl #2
 800a730:	9200      	str	r2, [sp, #0]
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 800a732:	f8d9 5038 	ldr.w	r5, [r9, #56]	; 0x38
 800a736:	440d      	add	r5, r1
    if (arith_decode(cinfo, st) == 0)
 800a738:	4629      	mov	r1, r5
 800a73a:	f7ff fb77 	bl	8009e2c <arith_decode>
 800a73e:	b958      	cbnz	r0, 800a758 <decode_mcu_DC_first+0x8a>
      entropy->dc_context[ci] = 0;
 800a740:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 800a744:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a748:	f108 0801 	add.w	r8, r8, #1
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 800a74c:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a750:	4093      	lsls	r3, r2
 800a752:	9a02      	ldr	r2, [sp, #8]
 800a754:	8013      	strh	r3, [r2, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800a756:	e7d3      	b.n	800a700 <decode_mcu_DC_first+0x32>
      sign = arith_decode(cinfo, st + 1);
 800a758:	1c69      	adds	r1, r5, #1
 800a75a:	4620      	mov	r0, r4
 800a75c:	f7ff fb66 	bl	8009e2c <arith_decode>
      st += 2; st += sign;
 800a760:	1c81      	adds	r1, r0, #2
      sign = arith_decode(cinfo, st + 1);
 800a762:	4607      	mov	r7, r0
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a764:	4620      	mov	r0, r4
      st += 2; st += sign;
 800a766:	eb05 0b01 	add.w	fp, r5, r1
      if ((m = arith_decode(cinfo, st)) != 0) {
 800a76a:	4659      	mov	r1, fp
 800a76c:	f7ff fb5e 	bl	8009e2c <arith_decode>
 800a770:	4605      	mov	r5, r0
 800a772:	b140      	cbz	r0, 800a786 <decode_mcu_DC_first+0xb8>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 800a774:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
 800a778:	f101 0b14 	add.w	fp, r1, #20
	while (arith_decode(cinfo, st)) {
 800a77c:	4659      	mov	r1, fp
 800a77e:	4620      	mov	r0, r4
 800a780:	f7ff fb54 	bl	8009e2c <arith_decode>
 800a784:	b9e0      	cbnz	r0, 800a7c0 <decode_mcu_DC_first+0xf2>
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 800a786:	9b00      	ldr	r3, [sp, #0]
 800a788:	4423      	add	r3, r4
 800a78a:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
 800a78e:	4699      	mov	r9, r3
 800a790:	2301      	movs	r3, #1
 800a792:	fa03 f202 	lsl.w	r2, r3, r2
 800a796:	ebb5 0f62 	cmp.w	r5, r2, asr #1
 800a79a:	da27      	bge.n	800a7ec <decode_mcu_DC_first+0x11e>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 800a79c:	2300      	movs	r3, #0
 800a79e:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
      st += 14;
 800a7a2:	f10b 010e 	add.w	r1, fp, #14
      while (m >>= 1)
 800a7a6:	46a9      	mov	r9, r5
 800a7a8:	106d      	asrs	r5, r5, #1
 800a7aa:	d12d      	bne.n	800a808 <decode_mcu_DC_first+0x13a>
      v += 1; if (sign) v = -v;
 800a7ac:	2f00      	cmp	r7, #0
 800a7ae:	d135      	bne.n	800a81c <decode_mcu_DC_first+0x14e>
 800a7b0:	f109 0901 	add.w	r9, r9, #1
      entropy->last_dc_val[ci] += v;
 800a7b4:	f8da 2014 	ldr.w	r2, [sl, #20]
 800a7b8:	444a      	add	r2, r9
 800a7ba:	f8ca 2014 	str.w	r2, [sl, #20]
 800a7be:	e7c1      	b.n	800a744 <decode_mcu_DC_first+0x76>
	  if ((m <<= 1) == 0x8000) {
 800a7c0:	006d      	lsls	r5, r5, #1
 800a7c2:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800a7c6:	d10e      	bne.n	800a7e6 <decode_mcu_DC_first+0x118>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800a7c8:	6823      	ldr	r3, [r4, #0]
 800a7ca:	2275      	movs	r2, #117	; 0x75
 800a7cc:	f04f 31ff 	mov.w	r1, #4294967295
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	615a      	str	r2, [r3, #20]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 800a7d8:	f04f 33ff 	mov.w	r3, #4294967295
 800a7dc:	6133      	str	r3, [r6, #16]
}
 800a7de:	2001      	movs	r0, #1
 800a7e0:	b005      	add	sp, #20
 800a7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  st += 1;
 800a7e6:	f10b 0b01 	add.w	fp, fp, #1
 800a7ea:	e7c7      	b.n	800a77c <decode_mcu_DC_first+0xae>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 800a7ec:	f899 20f8 	ldrb.w	r2, [r9, #248]	; 0xf8
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	fa03 f202 	lsl.w	r2, r3, r2
 800a7f6:	ebb5 0f62 	cmp.w	r5, r2, asr #1
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800a7fa:	bfcc      	ite	gt
 800a7fc:	1cfa      	addgt	r2, r7, #3
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 800a7fe:	1c7a      	addle	r2, r7, #1
 800a800:	0092      	lsls	r2, r2, #2
 800a802:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
 800a806:	e7cc      	b.n	800a7a2 <decode_mcu_DC_first+0xd4>
	if (arith_decode(cinfo, st)) v |= m;
 800a808:	4620      	mov	r0, r4
 800a80a:	9100      	str	r1, [sp, #0]
 800a80c:	f7ff fb0e 	bl	8009e2c <arith_decode>
 800a810:	9900      	ldr	r1, [sp, #0]
 800a812:	2800      	cmp	r0, #0
 800a814:	d0c8      	beq.n	800a7a8 <decode_mcu_DC_first+0xda>
 800a816:	ea49 0905 	orr.w	r9, r9, r5
 800a81a:	e7c5      	b.n	800a7a8 <decode_mcu_DC_first+0xda>
      v += 1; if (sign) v = -v;
 800a81c:	ea6f 0909 	mvn.w	r9, r9
 800a820:	e7c8      	b.n	800a7b4 <decode_mcu_DC_first+0xe6>
	...

0800a824 <jinit_arith_decoder>:
 * Module initialization routine for arithmetic entropy decoding.
 */

GLOBAL(void)
jinit_arith_decoder (j_decompress_ptr cinfo)
{
 800a824:	b538      	push	{r3, r4, r5, lr}
  arith_entropy_ptr entropy;
  int i;

  entropy = (arith_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a826:	6843      	ldr	r3, [r0, #4]
 800a828:	22bc      	movs	r2, #188	; 0xbc
 800a82a:	2101      	movs	r1, #1
{
 800a82c:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4798      	blx	r3
				SIZEOF(arith_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass;
 800a832:	4a18      	ldr	r2, [pc, #96]	; (800a894 <jinit_arith_decoder+0x70>)
 800a834:	4603      	mov	r3, r0
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800a836:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
  entropy->pub.start_pass = start_pass;
 800a83a:	f100 0178 	add.w	r1, r0, #120	; 0x78
 800a83e:	f843 2b38 	str.w	r2, [r3], #56

  /* Mark tables unallocated */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
    entropy->dc_stats[i] = NULL;
 800a842:	2200      	movs	r2, #0
 800a844:	f843 2b04 	str.w	r2, [r3], #4
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
 800a848:	428b      	cmp	r3, r1
    entropy->ac_stats[i] = NULL;
 800a84a:	63da      	str	r2, [r3, #60]	; 0x3c
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
 800a84c:	d1fa      	bne.n	800a844 <jinit_arith_decoder+0x20>
  }

  /* Initialize index for fixed probability estimation */
  entropy->fixed_bin[0] = 113;
 800a84e:	2371      	movs	r3, #113	; 0x71
 800a850:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8

  if (cinfo->progressive_mode) {
 800a854:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a858:	b193      	cbz	r3, 800a880 <jinit_arith_decoder+0x5c>
    /* Create progression status table */
    int *coef_bit_ptr, ci;
    cinfo->coef_bits = (int (*)[DCTSIZE2])
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a85a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a85c:	2101      	movs	r1, #1
 800a85e:	6863      	ldr	r3, [r4, #4]
 800a860:	4620      	mov	r0, r4
 800a862:	0212      	lsls	r2, r2, #8
				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
    coef_bit_ptr = & cinfo->coef_bits[0][0];
    for (ci = 0; ci < cinfo->num_components; ci++) 
      for (i = 0; i < DCTSIZE2; i++)
	*coef_bit_ptr++ = -1;
 800a864:	f04f 35ff 	mov.w	r5, #4294967295
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4798      	blx	r3
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800a86c:	2300      	movs	r3, #0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800a86e:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800a872:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800a876:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a878:	f5a0 7280 	sub.w	r2, r0, #256	; 0x100
 800a87c:	4299      	cmp	r1, r3
 800a87e:	dc00      	bgt.n	800a882 <jinit_arith_decoder+0x5e>
  }
}
 800a880:	bd38      	pop	{r3, r4, r5, pc}
	*coef_bit_ptr++ = -1;
 800a882:	f842 5b04 	str.w	r5, [r2], #4
      for (i = 0; i < DCTSIZE2; i++)
 800a886:	4282      	cmp	r2, r0
 800a888:	d1fb      	bne.n	800a882 <jinit_arith_decoder+0x5e>
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800a88a:	3301      	adds	r3, #1
 800a88c:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800a890:	e7f1      	b.n	800a876 <jinit_arith_decoder+0x52>
 800a892:	bf00      	nop
 800a894:	08009f09 	.word	0x08009f09

0800a898 <init_mem_source>:

METHODDEF(void)
init_mem_source (j_decompress_ptr cinfo)
{
  /* no work necessary here */
}
 800a898:	4770      	bx	lr
	...

0800a89c <fill_mem_input_buffer>:

  /* The whole JPEG data is expected to reside in the supplied memory
   * buffer, so any request for more data beyond the given buffer size
   * is treated as an error.
   */
  WARNMS(cinfo, JWRN_JPEG_EOF);
 800a89c:	6803      	ldr	r3, [r0, #0]
 800a89e:	227b      	movs	r2, #123	; 0x7b
 800a8a0:	f04f 31ff 	mov.w	r1, #4294967295
{
 800a8a4:	b510      	push	{r4, lr}
 800a8a6:	4604      	mov	r4, r0
  WARNMS(cinfo, JWRN_JPEG_EOF);
 800a8a8:	615a      	str	r2, [r3, #20]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	4798      	blx	r3

  /* Insert a fake EOI marker */

  cinfo->src->next_input_byte = mybuffer;
 800a8ae:	69a3      	ldr	r3, [r4, #24]
 800a8b0:	4a02      	ldr	r2, [pc, #8]	; (800a8bc <fill_mem_input_buffer+0x20>)
  cinfo->src->bytes_in_buffer = 2;

  return TRUE;
}
 800a8b2:	2001      	movs	r0, #1
  cinfo->src->next_input_byte = mybuffer;
 800a8b4:	601a      	str	r2, [r3, #0]
  cinfo->src->bytes_in_buffer = 2;
 800a8b6:	2202      	movs	r2, #2
 800a8b8:	605a      	str	r2, [r3, #4]
}
 800a8ba:	bd10      	pop	{r4, pc}
 800a8bc:	0802d9d4 	.word	0x0802d9d4

0800a8c0 <skip_input_data>:
 * buffer is the application writer's problem.
 */

METHODDEF(void)
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
 800a8c0:	b570      	push	{r4, r5, r6, lr}

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
 800a8c2:	1e0c      	subs	r4, r1, #0
{
 800a8c4:	4606      	mov	r6, r0
  if (num_bytes > 0) {
 800a8c6:	dd08      	ble.n	800a8da <skip_input_data+0x1a>
  struct jpeg_source_mgr * src = cinfo->src;
 800a8c8:	6985      	ldr	r5, [r0, #24]
    while (num_bytes > (long) src->bytes_in_buffer) {
 800a8ca:	6869      	ldr	r1, [r5, #4]
 800a8cc:	42a1      	cmp	r1, r4
 800a8ce:	db05      	blt.n	800a8dc <skip_input_data+0x1c>
      (void) (*src->fill_input_buffer) (cinfo);
      /* note we assume that fill_input_buffer will never return FALSE,
       * so suspension need not be handled.
       */
    }
    src->next_input_byte += (size_t) num_bytes;
 800a8d0:	682b      	ldr	r3, [r5, #0]
    src->bytes_in_buffer -= (size_t) num_bytes;
 800a8d2:	1b09      	subs	r1, r1, r4
    src->next_input_byte += (size_t) num_bytes;
 800a8d4:	4423      	add	r3, r4
    src->bytes_in_buffer -= (size_t) num_bytes;
 800a8d6:	6069      	str	r1, [r5, #4]
    src->next_input_byte += (size_t) num_bytes;
 800a8d8:	602b      	str	r3, [r5, #0]
  }
}
 800a8da:	bd70      	pop	{r4, r5, r6, pc}
      (void) (*src->fill_input_buffer) (cinfo);
 800a8dc:	68eb      	ldr	r3, [r5, #12]
 800a8de:	4630      	mov	r0, r6
      num_bytes -= (long) src->bytes_in_buffer;
 800a8e0:	1a64      	subs	r4, r4, r1
      (void) (*src->fill_input_buffer) (cinfo);
 800a8e2:	4798      	blx	r3
 800a8e4:	e7f1      	b.n	800a8ca <skip_input_data+0xa>

0800a8e6 <term_source>:
 800a8e6:	4770      	bx	lr

0800a8e8 <jpeg_mem_src>:
 */

GLOBAL(void)
jpeg_mem_src (j_decompress_ptr cinfo,
	      unsigned char * inbuffer, unsigned long insize)
{
 800a8e8:	b570      	push	{r4, r5, r6, lr}
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	4616      	mov	r6, r2
  struct jpeg_source_mgr * src;

  if (inbuffer == NULL || insize == 0)	/* Treat empty input as fatal error */
 800a8ee:	460d      	mov	r5, r1
 800a8f0:	b101      	cbz	r1, 800a8f4 <jpeg_mem_src+0xc>
 800a8f2:	b92a      	cbnz	r2, 800a900 <jpeg_mem_src+0x18>
    ERREXIT(cinfo, JERR_INPUT_EMPTY);
 800a8f4:	6823      	ldr	r3, [r4, #0]
 800a8f6:	222b      	movs	r2, #43	; 0x2b
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	615a      	str	r2, [r3, #20]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4798      	blx	r3

  /* The source object is made permanent so that a series of JPEG images
   * can be read from the same buffer by calling jpeg_mem_src only before
   * the first one.
   */
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
 800a900:	69a1      	ldr	r1, [r4, #24]
 800a902:	b929      	cbnz	r1, 800a910 <jpeg_mem_src+0x28>
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800a904:	6863      	ldr	r3, [r4, #4]
 800a906:	221c      	movs	r2, #28
 800a908:	4620      	mov	r0, r4
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4798      	blx	r3
    cinfo->src = (struct jpeg_source_mgr *)
 800a90e:	61a0      	str	r0, [r4, #24]
				  SIZEOF(struct jpeg_source_mgr));
  }

  src = cinfo->src;
 800a910:	69a3      	ldr	r3, [r4, #24]
  src->init_source = init_mem_source;
 800a912:	4a06      	ldr	r2, [pc, #24]	; (800a92c <jpeg_mem_src+0x44>)
 800a914:	609a      	str	r2, [r3, #8]
  src->fill_input_buffer = fill_mem_input_buffer;
 800a916:	4a06      	ldr	r2, [pc, #24]	; (800a930 <jpeg_mem_src+0x48>)
 800a918:	60da      	str	r2, [r3, #12]
  src->skip_input_data = skip_input_data;
 800a91a:	4a06      	ldr	r2, [pc, #24]	; (800a934 <jpeg_mem_src+0x4c>)
 800a91c:	611a      	str	r2, [r3, #16]
  src->resync_to_restart = jpeg_resync_to_restart; /* use default method */
 800a91e:	4a06      	ldr	r2, [pc, #24]	; (800a938 <jpeg_mem_src+0x50>)
 800a920:	615a      	str	r2, [r3, #20]
  src->term_source = term_source;
 800a922:	4a06      	ldr	r2, [pc, #24]	; (800a93c <jpeg_mem_src+0x54>)
  src->bytes_in_buffer = (size_t) insize;
  src->next_input_byte = (JOCTET *) inbuffer;
 800a924:	e9c3 5600 	strd	r5, r6, [r3]
  src->term_source = term_source;
 800a928:	619a      	str	r2, [r3, #24]
}
 800a92a:	bd70      	pop	{r4, r5, r6, pc}
 800a92c:	0800a899 	.word	0x0800a899
 800a930:	0800a89d 	.word	0x0800a89d
 800a934:	0800a8c1 	.word	0x0800a8c1
 800a938:	0800eb2f 	.word	0x0800eb2f
 800a93c:	0800a8e7 	.word	0x0800a8e7

0800a940 <start_iMCU_row>:

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
 800a940:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a944:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
  if (cinfo->comps_in_scan > 1) {
 800a948:	2a01      	cmp	r2, #1
 800a94a:	dd05      	ble.n	800a958 <start_iMCU_row+0x18>
    coef->MCU_rows_per_iMCU_row = 1;
 800a94c:	2201      	movs	r2, #1
  } else {
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800a94e:	61da      	str	r2, [r3, #28]
  }

  coef->MCU_ctr = 0;
 800a950:	2200      	movs	r2, #0
  coef->MCU_vert_offset = 0;
 800a952:	e9c3 2205 	strd	r2, r2, [r3, #20]
}
 800a956:	4770      	bx	lr
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800a958:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
 800a95c:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
 800a960:	3a01      	subs	r2, #1
 800a962:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 800a966:	4290      	cmp	r0, r2
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 800a968:	bf34      	ite	cc
 800a96a:	68ca      	ldrcc	r2, [r1, #12]
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800a96c:	6cca      	ldrcs	r2, [r1, #76]	; 0x4c
 800a96e:	e7ee      	b.n	800a94e <start_iMCU_row+0xe>

0800a970 <start_input_pass>:
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
  cinfo->input_iMCU_row = 0;
 800a970:	2200      	movs	r2, #0
 800a972:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  start_iMCU_row(cinfo);
 800a976:	f7ff bfe3 	b.w	800a940 <start_iMCU_row>

0800a97a <dummy_consume_data>:

METHODDEF(int)
dummy_consume_data (j_decompress_ptr cinfo)
{
  return JPEG_SUSPENDED;	/* Always indicate nothing was done */
}
 800a97a:	2000      	movs	r0, #0
 800a97c:	4770      	bx	lr

0800a97e <consume_data>:
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 */

METHODDEF(int)
consume_data (j_decompress_ptr cinfo)
{
 800a97e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a982:	f500 7baa 	add.w	fp, r0, #340	; 0x154
 800a986:	4604      	mov	r4, r0
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800a988:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a98c:	2600      	movs	r6, #0
 800a98e:	465f      	mov	r7, fp
    compptr = cinfo->cur_comp_info[ci];
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800a990:	f04f 0801 	mov.w	r8, #1
{
 800a994:	ed2d 8b02 	vpush	{d8}
 800a998:	b08f      	sub	sp, #60	; 0x3c
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800a99a:	f10d 0928 	add.w	r9, sp, #40	; 0x28
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a99e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800a9a2:	42b3      	cmp	r3, r6
 800a9a4:	dc17      	bgt.n	800a9d6 <consume_data+0x58>
     * because we requested a pre-zeroed array.
     */
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800a9a6:	69ae      	ldr	r6, [r5, #24]
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
	  }
	}
      }
      /* Try to fetch the MCU. */
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800a9a8:	f105 0320 	add.w	r3, r5, #32
 800a9ac:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800a9b0:	ee08 3a10 	vmov	s16, r3
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800a9b4:	69eb      	ldr	r3, [r5, #28]
 800a9b6:	42b3      	cmp	r3, r6
 800a9b8:	dc22      	bgt.n	800aa00 <consume_data+0x82>
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800a9ba:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a9be:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800a9ca:	d275      	bcs.n	800aab8 <consume_data+0x13a>
    start_iMCU_row(cinfo);
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	f7ff ffb7 	bl	800a940 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800a9d2:	2003      	movs	r0, #3
 800a9d4:	e047      	b.n	800aa66 <consume_data+0xe8>
    compptr = cinfo->cur_comp_info[ci];
 800a9d6:	f857 1b04 	ldr.w	r1, [r7], #4
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800a9da:	6860      	ldr	r0, [r4, #4]
       cinfo->input_iMCU_row * compptr->v_samp_factor,
 800a9dc:	68cb      	ldr	r3, [r1, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800a9de:	6849      	ldr	r1, [r1, #4]
 800a9e0:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800a9e4:	3112      	adds	r1, #18
 800a9e6:	f8cd 8000 	str.w	r8, [sp]
 800a9ea:	435a      	muls	r2, r3
 800a9ec:	f8d0 a020 	ldr.w	sl, [r0, #32]
 800a9f0:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	47d0      	blx	sl
 800a9f8:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a9fc:	3601      	adds	r6, #1
 800a9fe:	e7ce      	b.n	800a99e <consume_data+0x20>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
 800aa00:	696f      	ldr	r7, [r5, #20]
 800aa02:	f8d4 3164 	ldr.w	r3, [r4, #356]	; 0x164
 800aa06:	42bb      	cmp	r3, r7
 800aa08:	d950      	bls.n	800aaac <consume_data+0x12e>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800aa0a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800aa0e:	9307      	str	r3, [sp, #28]
 800aa10:	ab0a      	add	r3, sp, #40	; 0x28
 800aa12:	e9cd 3b03 	strd	r3, fp, [sp, #12]
 800aa16:	2300      	movs	r3, #0
      blkn = 0;			/* index of current DCT block within MCU */
 800aa18:	469a      	mov	sl, r3
 800aa1a:	e017      	b.n	800aa4c <consume_data+0xce>
	compptr = cinfo->cur_comp_info[ci];
 800aa1c:	9904      	ldr	r1, [sp, #16]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800aa1e:	46c1      	mov	r9, r8
 800aa20:	f04f 0c00 	mov.w	ip, #0
	compptr = cinfo->cur_comp_info[ci];
 800aa24:	f851 2b04 	ldr.w	r2, [r1], #4
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800aa28:	e9d2 e20e 	ldrd	lr, r2, [r2, #56]	; 0x38
	compptr = cinfo->cur_comp_info[ci];
 800aa2c:	9104      	str	r1, [sp, #16]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800aa2e:	9206      	str	r2, [sp, #24]
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800aa30:	fb07 f20e 	mul.w	r2, r7, lr
 800aa34:	01d2      	lsls	r2, r2, #7
 800aa36:	9205      	str	r2, [sp, #20]
 800aa38:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
 800aa3c:	9209      	str	r2, [sp, #36]	; 0x24
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800aa3e:	9a06      	ldr	r2, [sp, #24]
 800aa40:	4562      	cmp	r2, ip
 800aa42:	dc15      	bgt.n	800aa70 <consume_data+0xf2>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800aa44:	9a03      	ldr	r2, [sp, #12]
 800aa46:	3301      	adds	r3, #1
 800aa48:	3204      	adds	r2, #4
 800aa4a:	9203      	str	r2, [sp, #12]
 800aa4c:	9a07      	ldr	r2, [sp, #28]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	dce4      	bgt.n	800aa1c <consume_data+0x9e>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800aa52:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800aa56:	ee18 1a10 	vmov	r1, s16
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	4798      	blx	r3
 800aa60:	bb10      	cbnz	r0, 800aaa8 <consume_data+0x12a>
	coef->MCU_ctr = MCU_col_num;
 800aa62:	e9c5 7605 	strd	r7, r6, [r5, #20]
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
  return JPEG_SCAN_COMPLETED;
}
 800aa66:	b00f      	add	sp, #60	; 0x3c
 800aa68:	ecbd 8b02 	vpop	{d8}
 800aa6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 800aa70:	9a03      	ldr	r2, [sp, #12]
 800aa72:	9905      	ldr	r1, [sp, #20]
 800aa74:	6812      	ldr	r2, [r2, #0]
 800aa76:	f852 2009 	ldr.w	r2, [r2, r9]
 800aa7a:	440a      	add	r2, r1
 800aa7c:	f10a 0108 	add.w	r1, sl, #8
 800aa80:	9208      	str	r2, [sp, #32]
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800aa82:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800aa86:	2200      	movs	r2, #0
 800aa88:	9808      	ldr	r0, [sp, #32]
 800aa8a:	4596      	cmp	lr, r2
 800aa8c:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
 800aa90:	dc06      	bgt.n	800aaa0 <consume_data+0x122>
 800aa92:	9a09      	ldr	r2, [sp, #36]	; 0x24
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800aa94:	f10c 0c01 	add.w	ip, ip, #1
 800aa98:	f109 0904 	add.w	r9, r9, #4
 800aa9c:	4492      	add	sl, r2
 800aa9e:	e7ce      	b.n	800aa3e <consume_data+0xc0>
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800aaa0:	3201      	adds	r2, #1
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
 800aaa2:	f841 0b04 	str.w	r0, [r1], #4
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 800aaa6:	e7ef      	b.n	800aa88 <consume_data+0x10a>
	 MCU_col_num++) {
 800aaa8:	3701      	adds	r7, #1
 800aaaa:	e7aa      	b.n	800aa02 <consume_data+0x84>
    coef->MCU_ctr = 0;
 800aaac:	2300      	movs	r3, #0
       yoffset++) {
 800aaae:	3601      	adds	r6, #1
 800aab0:	f108 0804 	add.w	r8, r8, #4
    coef->MCU_ctr = 0;
 800aab4:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800aab6:	e77d      	b.n	800a9b4 <consume_data+0x36>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800aab8:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800aabc:	4620      	mov	r0, r4
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800aac2:	2004      	movs	r0, #4
 800aac4:	e7cf      	b.n	800aa66 <consume_data+0xe8>

0800aac6 <decompress_data>:
 * NB: output_buf contains a plane for each component in image.
 */

METHODDEF(int)
decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800aac6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaca:	4604      	mov	r4, r0
 800aacc:	b08b      	sub	sp, #44	; 0x2c
 800aace:	468b      	mov	fp, r1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800aad0:	f8d0 71c0 	ldr.w	r7, [r0, #448]	; 0x1c0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800aad4:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 800aad8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800aadc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800aae0:	429a      	cmp	r2, r3
 800aae2:	db1d      	blt.n	800ab20 <decompress_data+0x5a>
 800aae4:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800aae8:	d103      	bne.n	800aaf2 <decompress_data+0x2c>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 800aaea:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d916      	bls.n	800ab20 <decompress_data+0x5a>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800aaf2:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800aaf4:	2600      	movs	r6, #0
 800aaf6:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800aafa:	9304      	str	r3, [sp, #16]
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
      continue;
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
 800aafc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ab00:	9308      	str	r3, [sp, #32]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ab02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab04:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800ab08:	42b3      	cmp	r3, r6
 800ab0a:	dc13      	bgt.n	800ab34 <decompress_data+0x6e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800ab0c:	1c50      	adds	r0, r2, #1
 800ab0e:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 800ab12:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800ab16:	4290      	cmp	r0, r2
 800ab18:	bf2c      	ite	cs
 800ab1a:	2004      	movcs	r0, #4
 800ab1c:	2003      	movcc	r0, #3
 800ab1e:	e006      	b.n	800ab2e <decompress_data+0x68>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800ab20:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800ab24:	4620      	mov	r0, r4
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4798      	blx	r3
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	d1d4      	bne.n	800aad8 <decompress_data+0x12>
  return JPEG_SCAN_COMPLETED;
}
 800ab2e:	b00b      	add	sp, #44	; 0x2c
 800ab30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800ab34:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ab36:	b913      	cbnz	r3, 800ab3e <decompress_data+0x78>
       ci++, compptr++) {
 800ab38:	3601      	adds	r6, #1
 800ab3a:	3558      	adds	r5, #88	; 0x58
 800ab3c:	e7e1      	b.n	800ab02 <decompress_data+0x3c>
    buffer = (*cinfo->mem->access_virt_barray)
 800ab3e:	6861      	ldr	r1, [r4, #4]
 800ab40:	2000      	movs	r0, #0
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800ab42:	68eb      	ldr	r3, [r5, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800ab44:	9000      	str	r0, [sp, #0]
 800ab46:	4620      	mov	r0, r4
 800ab48:	6a0f      	ldr	r7, [r1, #32]
 800ab4a:	435a      	muls	r2, r3
 800ab4c:	9908      	ldr	r1, [sp, #32]
 800ab4e:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800ab52:	47b8      	blx	r7
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800ab54:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800ab58:	9a04      	ldr	r2, [sp, #16]
    buffer = (*cinfo->mem->access_virt_barray)
 800ab5a:	9005      	str	r0, [sp, #20]
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	68eb      	ldr	r3, [r5, #12]
 800ab60:	d221      	bcs.n	800aba6 <decompress_data+0xe0>
      block_rows = compptr->v_samp_factor;
 800ab62:	469a      	mov	sl, r3
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800ab64:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
    for (block_row = 0; block_row < block_rows; block_row++) {
 800ab68:	2200      	movs	r2, #0
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800ab6a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	9306      	str	r3, [sp, #24]
    output_ptr = output_buf[ci];
 800ab72:	f85b 3026 	ldr.w	r3, [fp, r6, lsl #2]
    for (block_row = 0; block_row < block_rows; block_row++) {
 800ab76:	9203      	str	r2, [sp, #12]
 800ab78:	9a03      	ldr	r2, [sp, #12]
 800ab7a:	4552      	cmp	r2, sl
 800ab7c:	dadc      	bge.n	800ab38 <decompress_data+0x72>
      buffer_ptr = buffer[block_row];
 800ab7e:	9a05      	ldr	r2, [sp, #20]
      output_col = 0;
 800ab80:	f04f 0900 	mov.w	r9, #0
      buffer_ptr = buffer[block_row];
 800ab84:	9903      	ldr	r1, [sp, #12]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800ab86:	46c8      	mov	r8, r9
      buffer_ptr = buffer[block_row];
 800ab88:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ab8c:	9207      	str	r2, [sp, #28]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800ab8e:	69e9      	ldr	r1, [r5, #28]
 800ab90:	9a07      	ldr	r2, [sp, #28]
 800ab92:	4541      	cmp	r1, r8
 800ab94:	eb02 12c8 	add.w	r2, r2, r8, lsl #7
 800ab98:	d80f      	bhi.n	800abba <decompress_data+0xf4>
      output_ptr += compptr->DCT_v_scaled_size;
 800ab9a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800ab9c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (block_row = 0; block_row < block_rows; block_row++) {
 800aba0:	9a03      	ldr	r2, [sp, #12]
 800aba2:	3201      	adds	r2, #1
 800aba4:	e7e7      	b.n	800ab76 <decompress_data+0xb0>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800aba6:	6a2a      	ldr	r2, [r5, #32]
 800aba8:	fbb2 f1f3 	udiv	r1, r2, r3
 800abac:	fb03 2a11 	mls	sl, r3, r1, r2
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800abb0:	f1ba 0f00 	cmp.w	sl, #0
 800abb4:	bf08      	it	eq
 800abb6:	469a      	moveq	sl, r3
 800abb8:	e7d4      	b.n	800ab64 <decompress_data+0x9e>
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 800abba:	f8cd 9000 	str.w	r9, [sp]
 800abbe:	4629      	mov	r1, r5
 800abc0:	9309      	str	r3, [sp, #36]	; 0x24
 800abc2:	4620      	mov	r0, r4
 800abc4:	9f06      	ldr	r7, [sp, #24]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800abc6:	f108 0801 	add.w	r8, r8, #1
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 800abca:	47b8      	blx	r7
	output_col += compptr->DCT_h_scaled_size;
 800abcc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800abce:	9b09      	ldr	r3, [sp, #36]	; 0x24
	output_col += compptr->DCT_h_scaled_size;
 800abd0:	4491      	add	r9, r2
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 800abd2:	e7dc      	b.n	800ab8e <decompress_data+0xc8>

0800abd4 <start_output_pass>:
{
 800abd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800abd8:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 800abdc:	4604      	mov	r4, r0
  if (coef->pub.coef_arrays != NULL) {
 800abde:	692b      	ldr	r3, [r5, #16]
 800abe0:	b323      	cbz	r3, 800ac2c <start_output_pass+0x58>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800abe2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d04b      	beq.n	800ac80 <start_output_pass+0xac>
  jpeg_component_info *compptr;
  JQUANT_TBL * qtable;
  int * coef_bits;
  int * coef_bits_latch;

  if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
 800abe8:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d047      	beq.n	800ac80 <start_output_pass+0xac>
 800abf0:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d043      	beq.n	800ac80 <start_output_pass+0xac>
    return FALSE;

  /* Allocate latch area if not already done */
  if (coef->coef_bits_latch == NULL)
 800abf8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800abfa:	b93b      	cbnz	r3, 800ac0c <start_output_pass+0x38>
    coef->coef_bits_latch = (int *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800abfc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800abfe:	2118      	movs	r1, #24
 800ac00:	6843      	ldr	r3, [r0, #4]
 800ac02:	434a      	muls	r2, r1
 800ac04:	2101      	movs	r1, #1
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4798      	blx	r3
    coef->coef_bits_latch = (int *)
 800ac0a:	6728      	str	r0, [r5, #112]	; 0x70
				  cinfo->num_components *
				  (SAVED_COEFS * SIZEOF(int)));
  coef_bits_latch = coef->coef_bits_latch;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ac0c:	2300      	movs	r3, #0
  coef_bits_latch = coef->coef_bits_latch;
 800ac0e:	f8d5 c070 	ldr.w	ip, [r5, #112]	; 0x70
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ac12:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 800ac16:	f04f 0e18 	mov.w	lr, #24
  boolean smoothing_useful = FALSE;
 800ac1a:	4619      	mov	r1, r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ac1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ac1e:	fb0e c703 	mla	r7, lr, r3, ip
 800ac22:	4293      	cmp	r3, r2
 800ac24:	db07      	blt.n	800ac36 <start_output_pass+0x62>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 800ac26:	b359      	cbz	r1, 800ac80 <start_output_pass+0xac>
      coef->pub.decompress_data = decompress_smooth_data;
 800ac28:	4b16      	ldr	r3, [pc, #88]	; (800ac84 <start_output_pass+0xb0>)
      coef->pub.decompress_data = decompress_data;
 800ac2a:	60eb      	str	r3, [r5, #12]
  cinfo->output_iMCU_row = 0;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
}
 800ac32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       ci++, compptr++) {
    /* All components' quantization values must already be latched. */
    if ((qtable = compptr->quant_table) == NULL)
 800ac36:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800ac38:	b312      	cbz	r2, 800ac80 <start_output_pass+0xac>
      return FALSE;
    /* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
    if (qtable->quantval[0] == 0 ||
 800ac3a:	8816      	ldrh	r6, [r2, #0]
 800ac3c:	b306      	cbz	r6, 800ac80 <start_output_pass+0xac>
 800ac3e:	8856      	ldrh	r6, [r2, #2]
 800ac40:	b1f6      	cbz	r6, 800ac80 <start_output_pass+0xac>
	qtable->quantval[Q01_POS] == 0 ||
 800ac42:	8a16      	ldrh	r6, [r2, #16]
 800ac44:	b1e6      	cbz	r6, 800ac80 <start_output_pass+0xac>
	qtable->quantval[Q10_POS] == 0 ||
 800ac46:	8c16      	ldrh	r6, [r2, #32]
 800ac48:	b1d6      	cbz	r6, 800ac80 <start_output_pass+0xac>
	qtable->quantval[Q20_POS] == 0 ||
 800ac4a:	8a56      	ldrh	r6, [r2, #18]
 800ac4c:	b1c6      	cbz	r6, 800ac80 <start_output_pass+0xac>
	qtable->quantval[Q11_POS] == 0 ||
 800ac4e:	8892      	ldrh	r2, [r2, #4]
 800ac50:	b1b2      	cbz	r2, 800ac80 <start_output_pass+0xac>
	qtable->quantval[Q02_POS] == 0)
      return FALSE;
    /* DC values must be at least partly known for all components. */
    coef_bits = cinfo->coef_bits[ci];
 800ac52:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
 800ac56:	021a      	lsls	r2, r3, #8
    if (coef_bits[0] < 0)
 800ac58:	58b2      	ldr	r2, [r6, r2]
    coef_bits = cinfo->coef_bits[ci];
 800ac5a:	eb06 2803 	add.w	r8, r6, r3, lsl #8
    if (coef_bits[0] < 0)
 800ac5e:	2a00      	cmp	r2, #0
 800ac60:	db0e      	blt.n	800ac80 <start_output_pass+0xac>
      return FALSE;
    /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
    for (coefi = 1; coefi <= 5; coefi++) {
 800ac62:	2201      	movs	r2, #1
      coef_bits_latch[coefi] = coef_bits[coefi];
 800ac64:	f858 6022 	ldr.w	r6, [r8, r2, lsl #2]
      if (coef_bits[coefi] != 0)
	smoothing_useful = TRUE;
 800ac68:	2e00      	cmp	r6, #0
      coef_bits_latch[coefi] = coef_bits[coefi];
 800ac6a:	f847 6022 	str.w	r6, [r7, r2, lsl #2]
    for (coefi = 1; coefi <= 5; coefi++) {
 800ac6e:	f102 0201 	add.w	r2, r2, #1
	smoothing_useful = TRUE;
 800ac72:	bf18      	it	ne
 800ac74:	2101      	movne	r1, #1
    for (coefi = 1; coefi <= 5; coefi++) {
 800ac76:	2a06      	cmp	r2, #6
 800ac78:	d1f4      	bne.n	800ac64 <start_output_pass+0x90>
       ci++, compptr++) {
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	3058      	adds	r0, #88	; 0x58
 800ac7e:	e7cd      	b.n	800ac1c <start_output_pass+0x48>
      coef->pub.decompress_data = decompress_data;
 800ac80:	4b01      	ldr	r3, [pc, #4]	; (800ac88 <start_output_pass+0xb4>)
 800ac82:	e7d2      	b.n	800ac2a <start_output_pass+0x56>
 800ac84:	0800ae0d 	.word	0x0800ae0d
 800ac88:	0800aac7 	.word	0x0800aac7

0800ac8c <decompress_onepass>:
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800ac8c:	f8d0 3164 	ldr.w	r3, [r0, #356]	; 0x164
{
 800ac90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800ac94:	3b01      	subs	r3, #1
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800ac96:	f8d0 51c0 	ldr.w	r5, [r0, #448]	; 0x1c0
{
 800ac9a:	4604      	mov	r4, r0
 800ac9c:	ed2d 8b02 	vpush	{d8}
 800aca0:	b08f      	sub	sp, #60	; 0x3c
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 800aca2:	9307      	str	r3, [sp, #28]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800aca4:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
{
 800aca8:	910b      	str	r1, [sp, #44]	; 0x2c
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800acaa:	3b01      	subs	r3, #1
 800acac:	9308      	str	r3, [sp, #32]
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800acae:	69ab      	ldr	r3, [r5, #24]
 800acb0:	9302      	str	r3, [sp, #8]
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800acb2:	f105 0320 	add.w	r3, r5, #32
 800acb6:	ee08 3a10 	vmov	s16, r3
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800acba:	69eb      	ldr	r3, [r5, #28]
 800acbc:	9a02      	ldr	r2, [sp, #8]
 800acbe:	4293      	cmp	r3, r2
 800acc0:	dc13      	bgt.n	800acea <decompress_onepass+0x5e>
  cinfo->output_iMCU_row++;
 800acc2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800acc6:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  cinfo->output_iMCU_row++;
 800acca:	3301      	adds	r3, #1
 800accc:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 800acd0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800acd4:	3301      	adds	r3, #1
 800acd6:	4293      	cmp	r3, r2
 800acd8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800acdc:	f080 808f 	bcs.w	800adfe <decompress_onepass+0x172>
    start_iMCU_row(cinfo);
 800ace0:	4620      	mov	r0, r4
 800ace2:	f7ff fe2d 	bl	800a940 <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 800ace6:	2003      	movs	r0, #3
 800ace8:	e02a      	b.n	800ad40 <decompress_onepass+0xb4>
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 800acea:	696f      	ldr	r7, [r5, #20]
 800acec:	9b07      	ldr	r3, [sp, #28]
 800acee:	429f      	cmp	r7, r3
 800acf0:	d905      	bls.n	800acfe <decompress_onepass+0x72>
    coef->MCU_ctr = 0;
 800acf2:	2300      	movs	r3, #0
 800acf4:	616b      	str	r3, [r5, #20]
       yoffset++) {
 800acf6:	9b02      	ldr	r3, [sp, #8]
 800acf8:	3301      	adds	r3, #1
 800acfa:	9302      	str	r3, [sp, #8]
 800acfc:	e7dd      	b.n	800acba <decompress_onepass+0x2e>
      if (cinfo->lim_Se)	/* can bypass in DC only case */
 800acfe:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 800ad02:	b133      	cbz	r3, 800ad12 <decompress_onepass+0x86>
	FMEMZERO((void FAR *) coef->MCU_buffer[0],
 800ad04:	f8d4 216c 	ldr.w	r2, [r4, #364]	; 0x16c
 800ad08:	2100      	movs	r1, #0
 800ad0a:	6a28      	ldr	r0, [r5, #32]
 800ad0c:	01d2      	lsls	r2, r2, #7
 800ad0e:	f01f f92f 	bl	8029f70 <memset>
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 800ad12:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800ad16:	ee18 1a10 	vmov	r1, s16
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	4798      	blx	r3
 800ad20:	b158      	cbz	r0, 800ad3a <decompress_onepass+0xae>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ad22:	f04f 0b00 	mov.w	fp, #0
 800ad26:	f504 73aa 	add.w	r3, r4, #340	; 0x154
      blkn = 0;			/* index of current DCT block within MCU */
 800ad2a:	46da      	mov	sl, fp
 800ad2c:	9304      	str	r3, [sp, #16]
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ad2e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800ad32:	455b      	cmp	r3, fp
 800ad34:	dc09      	bgt.n	800ad4a <decompress_onepass+0xbe>
	 MCU_col_num++) {
 800ad36:	3701      	adds	r7, #1
 800ad38:	e7d8      	b.n	800acec <decompress_onepass+0x60>
	coef->MCU_vert_offset = yoffset;
 800ad3a:	9b02      	ldr	r3, [sp, #8]
	coef->MCU_ctr = MCU_col_num;
 800ad3c:	e9c5 7305 	strd	r7, r3, [r5, #20]
}
 800ad40:	b00f      	add	sp, #60	; 0x3c
 800ad42:	ecbd 8b02 	vpop	{d8}
 800ad46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	compptr = cinfo->cur_comp_info[ci];
 800ad4a:	9b04      	ldr	r3, [sp, #16]
 800ad4c:	f853 1b04 	ldr.w	r1, [r3], #4
 800ad50:	9304      	str	r3, [sp, #16]
	if (! compptr->component_needed) {
 800ad52:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800ad54:	b923      	cbnz	r3, 800ad60 <decompress_onepass+0xd4>
	  blkn += compptr->MCU_blocks;
 800ad56:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad58:	449a      	add	sl, r3
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ad5a:	f10b 0b01 	add.w	fp, fp, #1
 800ad5e:	e7e6      	b.n	800ad2e <decompress_onepass+0xa2>
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800ad60:	684a      	ldr	r2, [r1, #4]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800ad62:	f04f 0800 	mov.w	r8, #0
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800ad66:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
	  yoffset * compptr->DCT_v_scaled_size;
 800ad6a:	9802      	ldr	r0, [sp, #8]
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800ad6c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	9309      	str	r3, [sp, #36]	; 0x24
						    : compptr->last_col_width;
 800ad74:	9b07      	ldr	r3, [sp, #28]
 800ad76:	429f      	cmp	r7, r3
 800ad78:	bf34      	ite	cc
 800ad7a:	6b8b      	ldrcc	r3, [r1, #56]	; 0x38
 800ad7c:	6c8b      	ldrcs	r3, [r1, #72]	; 0x48
 800ad7e:	9305      	str	r3, [sp, #20]
	  yoffset * compptr->DCT_v_scaled_size;
 800ad80:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800ad82:	4343      	muls	r3, r0
	output_ptr = output_buf[compptr->component_index] +
 800ad84:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ad86:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800ad8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	start_col = MCU_col_num * compptr->MCU_sample_width;
 800ad8e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 800ad90:	437a      	muls	r2, r7
 800ad92:	920a      	str	r2, [sp, #40]	; 0x28
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800ad94:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800ad96:	4542      	cmp	r2, r8
 800ad98:	dddf      	ble.n	800ad5a <decompress_onepass+0xce>
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 800ad9a:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 800ad9e:	9808      	ldr	r0, [sp, #32]
 800ada0:	4282      	cmp	r2, r0
 800ada2:	d304      	bcc.n	800adae <decompress_onepass+0x122>
 800ada4:	9a02      	ldr	r2, [sp, #8]
 800ada6:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800ada8:	4442      	add	r2, r8
 800adaa:	4290      	cmp	r0, r2
 800adac:	dd0b      	ble.n	800adc6 <decompress_onepass+0x13a>
 800adae:	f10a 0908 	add.w	r9, sl, #8
 800adb2:	eb05 0289 	add.w	r2, r5, r9, lsl #2
{
 800adb6:	f04f 0900 	mov.w	r9, #0
 800adba:	9206      	str	r2, [sp, #24]
 800adbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adbe:	9203      	str	r2, [sp, #12]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800adc0:	9a05      	ldr	r2, [sp, #20]
 800adc2:	4591      	cmp	r9, r2
 800adc4:	db07      	blt.n	800add6 <decompress_onepass+0x14a>
	  blkn += compptr->MCU_width;
 800adc6:	6b8a      	ldr	r2, [r1, #56]	; 0x38
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800adc8:	f108 0801 	add.w	r8, r8, #1
	  blkn += compptr->MCU_width;
 800adcc:	4492      	add	sl, r2
	  output_ptr += compptr->DCT_v_scaled_size;
 800adce:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800add0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 800add4:	e7de      	b.n	800ad94 <decompress_onepass+0x108>
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 800add6:	9806      	ldr	r0, [sp, #24]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800add8:	f109 0901 	add.w	r9, r9, #1
	      (*inverse_DCT) (cinfo, compptr,
 800addc:	9e09      	ldr	r6, [sp, #36]	; 0x24
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 800adde:	f850 2b04 	ldr.w	r2, [r0], #4
 800ade2:	9006      	str	r0, [sp, #24]
	      (*inverse_DCT) (cinfo, compptr,
 800ade4:	9803      	ldr	r0, [sp, #12]
 800ade6:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
 800adea:	9000      	str	r0, [sp, #0]
 800adec:	4620      	mov	r0, r4
 800adee:	47b0      	blx	r6
	      output_col += compptr->DCT_h_scaled_size;
 800adf0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800adf2:	9b03      	ldr	r3, [sp, #12]
 800adf4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800adf6:	4413      	add	r3, r2
 800adf8:	9303      	str	r3, [sp, #12]
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800adfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adfc:	e7e0      	b.n	800adc0 <decompress_onepass+0x134>
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800adfe:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800ae02:	4620      	mov	r0, r4
 800ae04:	68db      	ldr	r3, [r3, #12]
 800ae06:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 800ae08:	2004      	movs	r0, #4
 800ae0a:	e799      	b.n	800ad40 <decompress_onepass+0xb4>

0800ae0c <decompress_smooth_data>:
 * Variant of decompress_data for use when doing block smoothing.
 */

METHODDEF(int)
decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 800ae0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800ae10:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
{
 800ae14:	b0c5      	sub	sp, #276	; 0x114
 800ae16:	4604      	mov	r4, r0
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800ae18:	f8d0 5148 	ldr.w	r5, [r0, #328]	; 0x148
{
 800ae1c:	9121      	str	r1, [sp, #132]	; 0x84
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 800ae1e:	931d      	str	r3, [sp, #116]	; 0x74
  INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
  int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
  int Al, pred;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800ae20:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ae24:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800ae28:	428b      	cmp	r3, r1
 800ae2a:	dc03      	bgt.n	800ae34 <decompress_smooth_data+0x28>
	 ! cinfo->inputctl->eoi_reached) {
 800ae2c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 800ae30:	6950      	ldr	r0, [r2, #20]
 800ae32:	b1c0      	cbz	r0, 800ae66 <decompress_smooth_data+0x5a>
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800ae34:	1e6b      	subs	r3, r5, #1
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
      return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ae36:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 800ae3a:	931f      	str	r3, [sp, #124]	; 0x7c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	9302      	str	r3, [sp, #8]
 800ae40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae42:	3348      	adds	r3, #72	; 0x48
 800ae44:	9323      	str	r3, [sp, #140]	; 0x8c
 800ae46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae48:	9902      	ldr	r1, [sp, #8]
 800ae4a:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800ae4e:	428b      	cmp	r3, r1
 800ae50:	dc1e      	bgt.n	800ae90 <decompress_smooth_data+0x84>
      }
      output_ptr += compptr->DCT_v_scaled_size;
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800ae52:	3201      	adds	r2, #1
 800ae54:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
 800ae58:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    return JPEG_ROW_COMPLETED;
 800ae5c:	4282      	cmp	r2, r0
 800ae5e:	bf2c      	ite	cs
 800ae60:	2004      	movcs	r0, #4
 800ae62:	2003      	movcc	r0, #3
 800ae64:	e011      	b.n	800ae8a <decompress_smooth_data+0x7e>
    if (cinfo->input_scan_number == cinfo->output_scan_number) {
 800ae66:	428b      	cmp	r3, r1
 800ae68:	d10a      	bne.n	800ae80 <decompress_smooth_data+0x74>
      JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
 800ae6a:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
      if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
 800ae6e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800ae72:	2900      	cmp	r1, #0
 800ae74:	bf08      	it	eq
 800ae76:	3301      	addeq	r3, #1
 800ae78:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800ae7c:	4299      	cmp	r1, r3
 800ae7e:	d8d9      	bhi.n	800ae34 <decompress_smooth_data+0x28>
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 800ae80:	6813      	ldr	r3, [r2, #0]
 800ae82:	4620      	mov	r0, r4
 800ae84:	4798      	blx	r3
 800ae86:	2800      	cmp	r0, #0
 800ae88:	d1ca      	bne.n	800ae20 <decompress_smooth_data+0x14>
  return JPEG_SCAN_COMPLETED;
}
 800ae8a:	b045      	add	sp, #276	; 0x114
 800ae8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (! compptr->component_needed)
 800ae90:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ae92:	b923      	cbnz	r3, 800ae9e <decompress_smooth_data+0x92>
       ci++, compptr++) {
 800ae94:	9b02      	ldr	r3, [sp, #8]
 800ae96:	3558      	adds	r5, #88	; 0x58
 800ae98:	3301      	adds	r3, #1
 800ae9a:	9302      	str	r3, [sp, #8]
 800ae9c:	e7d3      	b.n	800ae46 <decompress_smooth_data+0x3a>
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 800ae9e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800aea0:	68e8      	ldr	r0, [r5, #12]
 800aea2:	4293      	cmp	r3, r2
 800aea4:	f240 8152 	bls.w	800b14c <decompress_smooth_data+0x340>
      access_rows = block_rows * 2; /* this and next iMCU row */
 800aea8:	0043      	lsls	r3, r0, #1
      block_rows = compptr->v_samp_factor;
 800aeaa:	4681      	mov	r9, r0
      last_row = FALSE;
 800aeac:	2100      	movs	r1, #0
      last_row = TRUE;
 800aeae:	910d      	str	r1, [sp, #52]	; 0x34
    if (cinfo->output_iMCU_row > 0) {
 800aeb0:	6861      	ldr	r1, [r4, #4]
 800aeb2:	9e02      	ldr	r6, [sp, #8]
 800aeb4:	f8d1 8020 	ldr.w	r8, [r1, #32]
 800aeb8:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800aeba:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800aebe:	2a00      	cmp	r2, #0
 800aec0:	f000 8152 	beq.w	800b168 <decompress_smooth_data+0x35c>
      buffer = (*cinfo->mem->access_virt_barray)
 800aec4:	2600      	movs	r6, #0
	 (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
 800aec6:	3a01      	subs	r2, #1
      buffer = (*cinfo->mem->access_virt_barray)
 800aec8:	4403      	add	r3, r0
 800aeca:	4342      	muls	r2, r0
 800aecc:	4620      	mov	r0, r4
 800aece:	9600      	str	r6, [sp, #0]
 800aed0:	47c0      	blx	r8
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800aed2:	68eb      	ldr	r3, [r5, #12]
      first_row = FALSE;
 800aed4:	961c      	str	r6, [sp, #112]	; 0x70
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 800aed6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800aeda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aedc:	2218      	movs	r2, #24
 800aede:	9902      	ldr	r1, [sp, #8]
 800aee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800aee2:	9f02      	ldr	r7, [sp, #8]
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 800aee4:	fb02 3301 	mla	r3, r2, r1, r3
 800aee8:	9304      	str	r3, [sp, #16]
    quanttbl = compptr->quant_table;
 800aeea:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    Q00 = quanttbl->quantval[0];
 800aeec:	881a      	ldrh	r2, [r3, #0]
    Q20 = quanttbl->quantval[Q20_POS];
 800aeee:	8c1e      	ldrh	r6, [r3, #32]
    Q01 = quanttbl->quantval[Q01_POS];
 800aef0:	f8b3 e002 	ldrh.w	lr, [r3, #2]
    Q10 = quanttbl->quantval[Q10_POS];
 800aef4:	f8b3 c010 	ldrh.w	ip, [r3, #16]
    Q11 = quanttbl->quantval[Q11_POS];
 800aef8:	8a59      	ldrh	r1, [r3, #18]
    Q00 = quanttbl->quantval[0];
 800aefa:	9205      	str	r2, [sp, #20]
    Q02 = quanttbl->quantval[Q02_POS];
 800aefc:	889a      	ldrh	r2, [r3, #4]
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800aefe:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800af02:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	9320      	str	r3, [sp, #128]	; 0x80
    output_ptr = output_buf[ci];
 800af0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af0c:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800af10:	930c      	str	r3, [sp, #48]	; 0x30
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800af12:	ea4f 13ce 	mov.w	r3, lr, lsl #7
 800af16:	9312      	str	r3, [sp, #72]	; 0x48
 800af18:	ea4f 230e 	mov.w	r3, lr, lsl #8
 800af1c:	9313      	str	r3, [sp, #76]	; 0x4c
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800af1e:	ea4f 13cc 	mov.w	r3, ip, lsl #7
 800af22:	9314      	str	r3, [sp, #80]	; 0x50
 800af24:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800af28:	9315      	str	r3, [sp, #84]	; 0x54
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800af2a:	01f3      	lsls	r3, r6, #7
 800af2c:	9316      	str	r3, [sp, #88]	; 0x58
 800af2e:	0233      	lsls	r3, r6, #8
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800af30:	2601      	movs	r6, #1
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800af32:	9317      	str	r3, [sp, #92]	; 0x5c
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800af34:	01cb      	lsls	r3, r1, #7
 800af36:	9318      	str	r3, [sp, #96]	; 0x60
 800af38:	020b      	lsls	r3, r1, #8
 800af3a:	9319      	str	r3, [sp, #100]	; 0x64
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800af3c:	01d3      	lsls	r3, r2, #7
 800af3e:	931a      	str	r3, [sp, #104]	; 0x68
 800af40:	0213      	lsls	r3, r2, #8
 800af42:	931b      	str	r3, [sp, #108]	; 0x6c
 800af44:	1f03      	subs	r3, r0, #4
 800af46:	930a      	str	r3, [sp, #40]	; 0x28
    for (block_row = 0; block_row < block_rows; block_row++) {
 800af48:	2300      	movs	r3, #0
 800af4a:	9303      	str	r3, [sp, #12]
      if (last_row && block_row == block_rows-1)
 800af4c:	f109 33ff 	add.w	r3, r9, #4294967295
 800af50:	9322      	str	r3, [sp, #136]	; 0x88
    for (block_row = 0; block_row < block_rows; block_row++) {
 800af52:	9b03      	ldr	r3, [sp, #12]
 800af54:	454b      	cmp	r3, r9
 800af56:	da9d      	bge.n	800ae94 <decompress_smooth_data+0x88>
      buffer_ptr = buffer[block_row];
 800af58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af5a:	f853 8f04 	ldr.w	r8, [r3, #4]!
 800af5e:	930a      	str	r3, [sp, #40]	; 0x28
      if (first_row && block_row == 0)
 800af60:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800af62:	b11b      	cbz	r3, 800af6c <decompress_smooth_data+0x160>
 800af64:	9b03      	ldr	r3, [sp, #12]
 800af66:	2b00      	cmp	r3, #0
 800af68:	f000 8104 	beq.w	800b174 <decompress_smooth_data+0x368>
	prev_block_row = buffer[block_row-1];
 800af6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af6e:	f853 3c04 	ldr.w	r3, [r3, #-4]
      if (last_row && block_row == block_rows-1)
 800af72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af74:	b122      	cbz	r2, 800af80 <decompress_smooth_data+0x174>
 800af76:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800af78:	9903      	ldr	r1, [sp, #12]
 800af7a:	428a      	cmp	r2, r1
 800af7c:	f000 80fc 	beq.w	800b178 <decompress_smooth_data+0x36c>
	next_block_row = buffer[block_row+1];
 800af80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af82:	6852      	ldr	r2, [r2, #4]
 800af84:	920b      	str	r2, [sp, #44]	; 0x2c
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800af86:	461a      	mov	r2, r3
 800af88:	f932 3b80 	ldrsh.w	r3, [r2], #128
 800af8c:	9211      	str	r2, [sp, #68]	; 0x44
 800af8e:	461f      	mov	r7, r3
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800af90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800af92:	f9b8 3000 	ldrsh.w	r3, [r8]
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 800af96:	46bb      	mov	fp, r7
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800af98:	f9b2 2000 	ldrsh.w	r2, [r2]
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 800af9c:	469a      	mov	sl, r3
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800af9e:	9210      	str	r2, [sp, #64]	; 0x40
      last_block_column = compptr->width_in_blocks - 1;
 800afa0:	69ea      	ldr	r2, [r5, #28]
 800afa2:	3a01      	subs	r2, #1
 800afa4:	921e      	str	r2, [sp, #120]	; 0x78
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 800afa6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800afa8:	9207      	str	r2, [sp, #28]
      output_col = 0;
 800afaa:	2200      	movs	r2, #0
 800afac:	9209      	str	r2, [sp, #36]	; 0x24
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800afae:	9206      	str	r2, [sp, #24]
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 800afb0:	2201      	movs	r2, #1
 800afb2:	a924      	add	r1, sp, #144	; 0x90
 800afb4:	4640      	mov	r0, r8
 800afb6:	9308      	str	r3, [sp, #32]
 800afb8:	f00b fe4f 	bl	8016c5a <jcopy_block_row>
	if (block_num < last_block_column) {
 800afbc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800afbe:	9a06      	ldr	r2, [sp, #24]
 800afc0:	4293      	cmp	r3, r2
 800afc2:	9b08      	ldr	r3, [sp, #32]
 800afc4:	f240 80e2 	bls.w	800b18c <decompress_smooth_data+0x380>
	  DC3 = (int) prev_block_row[1][0];
 800afc8:	01d2      	lsls	r2, r2, #7
 800afca:	9911      	ldr	r1, [sp, #68]	; 0x44
 800afcc:	5e89      	ldrsh	r1, [r1, r2]
 800afce:	910e      	str	r1, [sp, #56]	; 0x38
	  DC6 = (int) buffer_ptr[1][0];
 800afd0:	f9b8 1080 	ldrsh.w	r1, [r8, #128]	; 0x80
 800afd4:	9108      	str	r1, [sp, #32]
	  DC9 = (int) next_block_row[1][0];
 800afd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800afd8:	3180      	adds	r1, #128	; 0x80
 800afda:	5e8a      	ldrsh	r2, [r1, r2]
 800afdc:	920f      	str	r2, [sp, #60]	; 0x3c
	if ((Al=coef_bits[1]) != 0 && workspace[1] == 0) {
 800afde:	9a04      	ldr	r2, [sp, #16]
 800afe0:	6851      	ldr	r1, [r2, #4]
 800afe2:	b1c1      	cbz	r1, 800b016 <decompress_smooth_data+0x20a>
 800afe4:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
 800afe8:	b9aa      	cbnz	r2, 800b016 <decompress_smooth_data+0x20a>
	  num = 36 * Q00 * (DC4 - DC6);
 800afea:	9a08      	ldr	r2, [sp, #32]
 800afec:	1a98      	subs	r0, r3, r2
 800afee:	9a05      	ldr	r2, [sp, #20]
 800aff0:	4350      	muls	r0, r2
 800aff2:	2224      	movs	r2, #36	; 0x24
	  if (num >= 0) {
 800aff4:	4342      	muls	r2, r0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800aff6:	9812      	ldr	r0, [sp, #72]	; 0x48
	  if (num >= 0) {
 800aff8:	f100 80cf 	bmi.w	800b19a <decompress_smooth_data+0x38e>
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800affc:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800affe:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 800b000:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800b002:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b006:	dd04      	ble.n	800b012 <decompress_smooth_data+0x206>
 800b008:	fa06 f101 	lsl.w	r1, r6, r1
 800b00c:	4291      	cmp	r1, r2
 800b00e:	dc00      	bgt.n	800b012 <decompress_smooth_data+0x206>
	      pred = (1<<Al)-1;
 800b010:	1e4a      	subs	r2, r1, #1
	  workspace[1] = (JCOEF) pred;
 800b012:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
	if ((Al=coef_bits[2]) != 0 && workspace[8] == 0) {
 800b016:	9a04      	ldr	r2, [sp, #16]
 800b018:	6891      	ldr	r1, [r2, #8]
 800b01a:	b1c9      	cbz	r1, 800b050 <decompress_smooth_data+0x244>
 800b01c:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 800b020:	b9b2      	cbnz	r2, 800b050 <decompress_smooth_data+0x244>
	  num = 36 * Q00 * (DC2 - DC8);
 800b022:	9a07      	ldr	r2, [sp, #28]
 800b024:	ebab 0002 	sub.w	r0, fp, r2
 800b028:	9a05      	ldr	r2, [sp, #20]
 800b02a:	4350      	muls	r0, r2
 800b02c:	2224      	movs	r2, #36	; 0x24
	  if (num >= 0) {
 800b02e:	4342      	muls	r2, r0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800b030:	9814      	ldr	r0, [sp, #80]	; 0x50
	  if (num >= 0) {
 800b032:	f100 80c0 	bmi.w	800b1b6 <decompress_smooth_data+0x3aa>
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800b036:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b038:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 800b03a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b03c:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b040:	dd04      	ble.n	800b04c <decompress_smooth_data+0x240>
 800b042:	fa06 f101 	lsl.w	r1, r6, r1
 800b046:	4291      	cmp	r1, r2
 800b048:	dc00      	bgt.n	800b04c <decompress_smooth_data+0x240>
	      pred = (1<<Al)-1;
 800b04a:	1e4a      	subs	r2, r1, #1
	  workspace[8] = (JCOEF) pred;
 800b04c:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	if ((Al=coef_bits[3]) != 0 && workspace[16] == 0) {
 800b050:	9a04      	ldr	r2, [sp, #16]
 800b052:	68d1      	ldr	r1, [r2, #12]
 800b054:	b1d1      	cbz	r1, 800b08c <decompress_smooth_data+0x280>
 800b056:	f9bd 20b0 	ldrsh.w	r2, [sp, #176]	; 0xb0
 800b05a:	b9ba      	cbnz	r2, 800b08c <decompress_smooth_data+0x280>
	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
 800b05c:	9a07      	ldr	r2, [sp, #28]
 800b05e:	9805      	ldr	r0, [sp, #20]
 800b060:	445a      	add	r2, fp
 800b062:	eba2 024a 	sub.w	r2, r2, sl, lsl #1
 800b066:	4342      	muls	r2, r0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800b068:	9816      	ldr	r0, [sp, #88]	; 0x58
	  if (num >= 0) {
 800b06a:	eb12 02c2 	adds.w	r2, r2, r2, lsl #3
 800b06e:	f100 80b0 	bmi.w	800b1d2 <decompress_smooth_data+0x3c6>
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800b072:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b074:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 800b076:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b078:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b07c:	dd04      	ble.n	800b088 <decompress_smooth_data+0x27c>
 800b07e:	fa06 f101 	lsl.w	r1, r6, r1
 800b082:	4291      	cmp	r1, r2
 800b084:	dc00      	bgt.n	800b088 <decompress_smooth_data+0x27c>
	      pred = (1<<Al)-1;
 800b086:	1e4a      	subs	r2, r1, #1
	  workspace[16] = (JCOEF) pred;
 800b088:	f8ad 20b0 	strh.w	r2, [sp, #176]	; 0xb0
	if ((Al=coef_bits[4]) != 0 && workspace[9] == 0) {
 800b08c:	9a04      	ldr	r2, [sp, #16]
 800b08e:	6911      	ldr	r1, [r2, #16]
 800b090:	b1e1      	cbz	r1, 800b0cc <decompress_smooth_data+0x2c0>
 800b092:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 800b096:	b9ca      	cbnz	r2, 800b0cc <decompress_smooth_data+0x2c0>
	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
 800b098:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b09a:	1a3a      	subs	r2, r7, r0
 800b09c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b09e:	1a12      	subs	r2, r2, r0
 800b0a0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b0a2:	4402      	add	r2, r0
 800b0a4:	9805      	ldr	r0, [sp, #20]
 800b0a6:	4342      	muls	r2, r0
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800b0a8:	9818      	ldr	r0, [sp, #96]	; 0x60
	  if (num >= 0) {
 800b0aa:	eb12 0282 	adds.w	r2, r2, r2, lsl #2
 800b0ae:	f100 809e 	bmi.w	800b1ee <decompress_smooth_data+0x3e2>
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800b0b2:	4402      	add	r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b0b4:	2900      	cmp	r1, #0
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 800b0b6:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b0b8:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b0bc:	dd04      	ble.n	800b0c8 <decompress_smooth_data+0x2bc>
 800b0be:	fa06 f101 	lsl.w	r1, r6, r1
 800b0c2:	4291      	cmp	r1, r2
 800b0c4:	dc00      	bgt.n	800b0c8 <decompress_smooth_data+0x2bc>
	      pred = (1<<Al)-1;
 800b0c6:	1e4a      	subs	r2, r1, #1
	  workspace[9] = (JCOEF) pred;
 800b0c8:	f8ad 20a2 	strh.w	r2, [sp, #162]	; 0xa2
	if ((Al=coef_bits[5]) != 0 && workspace[2] == 0) {
 800b0cc:	9a04      	ldr	r2, [sp, #16]
 800b0ce:	6952      	ldr	r2, [r2, #20]
 800b0d0:	b1d2      	cbz	r2, 800b108 <decompress_smooth_data+0x2fc>
 800b0d2:	f9bd 1094 	ldrsh.w	r1, [sp, #148]	; 0x94
 800b0d6:	b9b9      	cbnz	r1, 800b108 <decompress_smooth_data+0x2fc>
	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
 800b0d8:	9908      	ldr	r1, [sp, #32]
 800b0da:	440b      	add	r3, r1
 800b0dc:	9905      	ldr	r1, [sp, #20]
 800b0de:	eba3 034a 	sub.w	r3, r3, sl, lsl #1
 800b0e2:	434b      	muls	r3, r1
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800b0e4:	991a      	ldr	r1, [sp, #104]	; 0x68
	  if (num >= 0) {
 800b0e6:	eb13 03c3 	adds.w	r3, r3, r3, lsl #3
 800b0ea:	f100 808e 	bmi.w	800b20a <decompress_smooth_data+0x3fe>
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800b0ee:	440b      	add	r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b0f0:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 800b0f2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800b0f4:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b0f8:	dd04      	ble.n	800b104 <decompress_smooth_data+0x2f8>
 800b0fa:	fa06 f202 	lsl.w	r2, r6, r2
 800b0fe:	429a      	cmp	r2, r3
 800b100:	dc00      	bgt.n	800b104 <decompress_smooth_data+0x2f8>
	      pred = (1<<Al)-1;
 800b102:	1e53      	subs	r3, r2, #1
	  workspace[2] = (JCOEF) pred;
 800b104:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800b108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b10a:	aa24      	add	r2, sp, #144	; 0x90
 800b10c:	4629      	mov	r1, r5
 800b10e:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800b110:	9300      	str	r3, [sp, #0]
 800b112:	4620      	mov	r0, r4
 800b114:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	buffer_ptr++, prev_block_row++, next_block_row++;
 800b116:	f108 0880 	add.w	r8, r8, #128	; 0x80
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800b11a:	47b8      	blx	r7
	output_col += compptr->DCT_h_scaled_size;
 800b11c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b11e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b120:	465f      	mov	r7, fp
 800b122:	18d3      	adds	r3, r2, r3
 800b124:	9a07      	ldr	r2, [sp, #28]
 800b126:	9309      	str	r3, [sp, #36]	; 0x24
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800b128:	9b06      	ldr	r3, [sp, #24]
 800b12a:	9210      	str	r2, [sp, #64]	; 0x40
 800b12c:	3301      	adds	r3, #1
 800b12e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b130:	9306      	str	r3, [sp, #24]
 800b132:	4653      	mov	r3, sl
 800b134:	9906      	ldr	r1, [sp, #24]
 800b136:	428a      	cmp	r2, r1
 800b138:	d221      	bcs.n	800b17e <decompress_smooth_data+0x372>
      output_ptr += compptr->DCT_v_scaled_size;
 800b13a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b13c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800b13e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b142:	930c      	str	r3, [sp, #48]	; 0x30
    for (block_row = 0; block_row < block_rows; block_row++) {
 800b144:	9b03      	ldr	r3, [sp, #12]
 800b146:	3301      	adds	r3, #1
 800b148:	9303      	str	r3, [sp, #12]
 800b14a:	e702      	b.n	800af52 <decompress_smooth_data+0x146>
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800b14c:	6a2b      	ldr	r3, [r5, #32]
 800b14e:	fbb3 f1f0 	udiv	r1, r3, r0
 800b152:	fb00 3911 	mls	r9, r0, r1, r3
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 800b156:	f1b9 0f00 	cmp.w	r9, #0
 800b15a:	d103      	bne.n	800b164 <decompress_smooth_data+0x358>
 800b15c:	4603      	mov	r3, r0
 800b15e:	4681      	mov	r9, r0
      last_row = TRUE;
 800b160:	2101      	movs	r1, #1
 800b162:	e6a4      	b.n	800aeae <decompress_smooth_data+0xa2>
 800b164:	464b      	mov	r3, r9
 800b166:	e7fb      	b.n	800b160 <decompress_smooth_data+0x354>
      buffer = (*cinfo->mem->access_virt_barray)
 800b168:	4620      	mov	r0, r4
 800b16a:	9200      	str	r2, [sp, #0]
 800b16c:	47c0      	blx	r8
      first_row = TRUE;
 800b16e:	2301      	movs	r3, #1
 800b170:	931c      	str	r3, [sp, #112]	; 0x70
 800b172:	e6b2      	b.n	800aeda <decompress_smooth_data+0xce>
      buffer_ptr = buffer[block_row];
 800b174:	4643      	mov	r3, r8
 800b176:	e6fc      	b.n	800af72 <decompress_smooth_data+0x166>
 800b178:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800b17c:	e703      	b.n	800af86 <decompress_smooth_data+0x17a>
	DC7 = DC8; DC8 = DC9;
 800b17e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
	DC4 = DC5; DC5 = DC6;
 800b180:	f8dd a020 	ldr.w	sl, [sp, #32]
	DC1 = DC2; DC2 = DC3;
 800b184:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
	DC7 = DC8; DC8 = DC9;
 800b188:	9207      	str	r2, [sp, #28]
 800b18a:	e711      	b.n	800afb0 <decompress_smooth_data+0x1a4>
 800b18c:	9a07      	ldr	r2, [sp, #28]
 800b18e:	f8cd a020 	str.w	sl, [sp, #32]
 800b192:	920f      	str	r2, [sp, #60]	; 0x3c
 800b194:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800b198:	e721      	b.n	800afde <decompress_smooth_data+0x1d2>
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800b19a:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800b19c:	2900      	cmp	r1, #0
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 800b19e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800b1a0:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b1a4:	dd05      	ble.n	800b1b2 <decompress_smooth_data+0x3a6>
 800b1a6:	fa06 f101 	lsl.w	r1, r6, r1
 800b1aa:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800b1ac:	bfd8      	it	le
 800b1ae:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800b1b2:	4252      	negs	r2, r2
 800b1b4:	e72d      	b.n	800b012 <decompress_smooth_data+0x206>
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800b1b6:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800b1b8:	2900      	cmp	r1, #0
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 800b1ba:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b1bc:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b1c0:	dd05      	ble.n	800b1ce <decompress_smooth_data+0x3c2>
 800b1c2:	fa06 f101 	lsl.w	r1, r6, r1
 800b1c6:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800b1c8:	bfd8      	it	le
 800b1ca:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800b1ce:	4252      	negs	r2, r2
 800b1d0:	e73c      	b.n	800b04c <decompress_smooth_data+0x240>
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800b1d2:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800b1d4:	2900      	cmp	r1, #0
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800b1d6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b1d8:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b1dc:	dd05      	ble.n	800b1ea <decompress_smooth_data+0x3de>
 800b1de:	fa06 f101 	lsl.w	r1, r6, r1
 800b1e2:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800b1e4:	bfd8      	it	le
 800b1e6:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800b1ea:	4252      	negs	r2, r2
 800b1ec:	e74c      	b.n	800b088 <decompress_smooth_data+0x27c>
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800b1ee:	1a82      	subs	r2, r0, r2
	    if (Al > 0 && pred >= (1<<Al))
 800b1f0:	2900      	cmp	r1, #0
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800b1f2:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b1f4:	fbb2 f2f0 	udiv	r2, r2, r0
	    if (Al > 0 && pred >= (1<<Al))
 800b1f8:	dd05      	ble.n	800b206 <decompress_smooth_data+0x3fa>
 800b1fa:	fa06 f101 	lsl.w	r1, r6, r1
 800b1fe:	4291      	cmp	r1, r2
	      pred = (1<<Al)-1;
 800b200:	bfd8      	it	le
 800b202:	f101 32ff 	addle.w	r2, r1, #4294967295
	    pred = -pred;
 800b206:	4252      	negs	r2, r2
 800b208:	e75e      	b.n	800b0c8 <decompress_smooth_data+0x2bc>
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800b20a:	1acb      	subs	r3, r1, r3
	    if (Al > 0 && pred >= (1<<Al))
 800b20c:	2a00      	cmp	r2, #0
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 800b20e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800b210:	fbb3 f3f1 	udiv	r3, r3, r1
	    if (Al > 0 && pred >= (1<<Al))
 800b214:	dd05      	ble.n	800b222 <decompress_smooth_data+0x416>
 800b216:	fa06 f202 	lsl.w	r2, r6, r2
 800b21a:	429a      	cmp	r2, r3
	      pred = (1<<Al)-1;
 800b21c:	bfd8      	it	le
 800b21e:	f102 33ff 	addle.w	r3, r2, #4294967295
	    pred = -pred;
 800b222:	425b      	negs	r3, r3
 800b224:	e76e      	b.n	800b104 <decompress_smooth_data+0x2f8>
	...

0800b228 <jinit_d_coef_controller>:
jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b228:	6843      	ldr	r3, [r0, #4]
 800b22a:	2274      	movs	r2, #116	; 0x74
{
 800b22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b230:	681b      	ldr	r3, [r3, #0]
{
 800b232:	b085      	sub	sp, #20
 800b234:	460e      	mov	r6, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b236:	2101      	movs	r1, #1
{
 800b238:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b23a:	4798      	blx	r3
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
  coef->pub.start_input_pass = start_input_pass;
 800b23c:	4b2c      	ldr	r3, [pc, #176]	; (800b2f0 <jinit_d_coef_controller+0xc8>)
  coef->pub.start_output_pass = start_output_pass;
#ifdef BLOCK_SMOOTHING_SUPPORTED
  coef->coef_bits_latch = NULL;
 800b23e:	2700      	movs	r7, #0
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
 800b240:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b244:	4604      	mov	r4, r0
  coef->pub.start_input_pass = start_input_pass;
 800b246:	6003      	str	r3, [r0, #0]
  coef->pub.start_output_pass = start_output_pass;
 800b248:	f100 0948 	add.w	r9, r0, #72	; 0x48
 800b24c:	4b29      	ldr	r3, [pc, #164]	; (800b2f4 <jinit_d_coef_controller+0xcc>)
  coef->coef_bits_latch = NULL;
 800b24e:	6707      	str	r7, [r0, #112]	; 0x70
  coef->pub.start_output_pass = start_output_pass;
 800b250:	6083      	str	r3, [r0, #8]
#endif

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
 800b252:	b37e      	cbz	r6, 800b2b4 <jinit_d_coef_controller+0x8c>
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    /* Note we ask for a pre-zeroed array. */
    int ci, access_rows;
    jpeg_component_info *compptr;

    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b254:	f8d5 60d8 	ldr.w	r6, [r5, #216]	; 0xd8
 800b258:	46ca      	mov	sl, r9
 800b25a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b25c:	42bb      	cmp	r3, r7
 800b25e:	dc07      	bgt.n	800b270 <jinit_d_coef_controller+0x48>
				(long) compptr->h_samp_factor),
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
				(long) compptr->v_samp_factor),
	 (JDIMENSION) access_rows);
    }
    coef->pub.consume_data = consume_data;
 800b260:	4b25      	ldr	r3, [pc, #148]	; (800b2f8 <jinit_d_coef_controller+0xd0>)
 800b262:	6063      	str	r3, [r4, #4]
    coef->pub.decompress_data = decompress_data;
 800b264:	4b25      	ldr	r3, [pc, #148]	; (800b2fc <jinit_d_coef_controller+0xd4>)
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 800b266:	e9c4 3903 	strd	r3, r9, [r4, #12]
	       (size_t) (D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK)));
    coef->pub.consume_data = dummy_consume_data;
    coef->pub.decompress_data = decompress_onepass;
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
  }
}
 800b26a:	b005      	add	sp, #20
 800b26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (cinfo->progressive_mode)
 800b270:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
      access_rows = compptr->v_samp_factor;
 800b274:	f8d6 800c 	ldr.w	r8, [r6, #12]
      if (cinfo->progressive_mode)
 800b278:	b10b      	cbz	r3, 800b27e <jinit_d_coef_controller+0x56>
	access_rows *= 3;
 800b27a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800b27e:	686b      	ldr	r3, [r5, #4]
	 ci++, compptr++) {
 800b280:	3701      	adds	r7, #1
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800b282:	68b1      	ldr	r1, [r6, #8]
	 ci++, compptr++) {
 800b284:	3658      	adds	r6, #88	; 0x58
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800b286:	f856 0c3c 	ldr.w	r0, [r6, #-60]
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800b28a:	f8d3 b014 	ldr.w	fp, [r3, #20]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800b28e:	f00b fcca 	bl	8016c26 <jround_up>
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800b292:	f856 1c4c 	ldr.w	r1, [r6, #-76]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800b296:	9003      	str	r0, [sp, #12]
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800b298:	f856 0c38 	ldr.w	r0, [r6, #-56]
 800b29c:	f00b fcc3 	bl	8016c26 <jround_up>
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	9b03      	ldr	r3, [sp, #12]
 800b2a4:	4611      	mov	r1, r2
 800b2a6:	e9cd 0800 	strd	r0, r8, [sp]
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	47d8      	blx	fp
 800b2ae:	f84a 0b04 	str.w	r0, [sl], #4
	 ci++, compptr++) {
 800b2b2:	e7d2      	b.n	800b25a <jinit_d_coef_controller+0x32>
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b2b4:	686b      	ldr	r3, [r5, #4]
 800b2b6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800b2ba:	2101      	movs	r1, #1
 800b2bc:	4628      	mov	r0, r5
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	4798      	blx	r3
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800b2c2:	f104 0320 	add.w	r3, r4, #32
 800b2c6:	4602      	mov	r2, r0
      coef->MCU_buffer[i] = buffer + i;
 800b2c8:	f843 2b04 	str.w	r2, [r3], #4
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 800b2cc:	454b      	cmp	r3, r9
 800b2ce:	f102 0280 	add.w	r2, r2, #128	; 0x80
 800b2d2:	d1f9      	bne.n	800b2c8 <jinit_d_coef_controller+0xa0>
    if (cinfo->lim_Se == 0)	/* DC only case: want to bypass later */
 800b2d4:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
 800b2d8:	b919      	cbnz	r1, 800b2e2 <jinit_d_coef_controller+0xba>
      FMEMZERO((void FAR *) buffer,
 800b2da:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800b2de:	f01e fe47 	bl	8029f70 <memset>
    coef->pub.consume_data = dummy_consume_data;
 800b2e2:	4b07      	ldr	r3, [pc, #28]	; (800b300 <jinit_d_coef_controller+0xd8>)
 800b2e4:	6063      	str	r3, [r4, #4]
    coef->pub.decompress_data = decompress_onepass;
 800b2e6:	4b07      	ldr	r3, [pc, #28]	; (800b304 <jinit_d_coef_controller+0xdc>)
 800b2e8:	60e3      	str	r3, [r4, #12]
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	6123      	str	r3, [r4, #16]
}
 800b2ee:	e7bc      	b.n	800b26a <jinit_d_coef_controller+0x42>
 800b2f0:	0800a971 	.word	0x0800a971
 800b2f4:	0800abd5 	.word	0x0800abd5
 800b2f8:	0800a97f 	.word	0x0800a97f
 800b2fc:	0800aac7 	.word	0x0800aac7
 800b300:	0800a97b 	.word	0x0800a97b
 800b304:	0800ac8d 	.word	0x0800ac8d

0800b308 <build_ycc_rgb_table>:
  int i;
  INT32 x;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b308:	6843      	ldr	r3, [r0, #4]
 800b30a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b30e:	2101      	movs	r1, #1
 800b310:	681b      	ldr	r3, [r3, #0]
{
 800b312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b316:	4604      	mov	r4, r0
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b318:	f8d0 51dc 	ldr.w	r5, [r0, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b31c:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b31e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b322:	6863      	ldr	r3, [r4, #4]
 800b324:	2101      	movs	r1, #1
  cconvert->Cr_r_tab = (int *)
 800b326:	60a8      	str	r0, [r5, #8]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b328:	4620      	mov	r0, r4
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4798      	blx	r3
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b32e:	6863      	ldr	r3, [r4, #4]
  cconvert->Cb_b_tab = (int *)
 800b330:	60e8      	str	r0, [r5, #12]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b332:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2101      	movs	r1, #1
 800b33a:	4620      	mov	r0, r4
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800b33c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800b3bc <build_ycc_rgb_table+0xb4>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b340:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b342:	6863      	ldr	r3, [r4, #4]
  cconvert->Cr_g_tab = (INT32 *)
 800b344:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b346:	2101      	movs	r1, #1
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4620      	mov	r0, r4
 800b34c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    /* Cb=>B value is nearest int to 1.77200 * x */
    cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800b350:	4f17      	ldr	r7, [pc, #92]	; (800b3b0 <build_ycc_rgb_table+0xa8>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b352:	4798      	blx	r3
    /* Cr=>G value is scaled-up -0.71414 * x */
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800b354:	692c      	ldr	r4, [r5, #16]
  cconvert->Cb_g_tab = (INT32 *)
 800b356:	6168      	str	r0, [r5, #20]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800b358:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800b35a:	f8df e064 	ldr.w	lr, [pc, #100]	; 800b3c0 <build_ycc_rgb_table+0xb8>
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800b35e:	4915      	ldr	r1, [pc, #84]	; (800b3b4 <build_ycc_rgb_table+0xac>)
    cconvert->Cb_b_tab[i] = (int)
 800b360:	e9d5 c602 	ldrd	ip, r6, [r5, #8]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800b364:	4d14      	ldr	r5, [pc, #80]	; (800b3b8 <build_ycc_rgb_table+0xb0>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800b366:	fb08 e203 	mla	r2, r8, r3, lr
 800b36a:	1412      	asrs	r2, r2, #16
    cconvert->Cr_r_tab[i] = (int)
 800b36c:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800b370:	fb07 f203 	mul.w	r2, r7, r3
 800b374:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800b378:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800b37c:	1412      	asrs	r2, r2, #16
    cconvert->Cb_b_tab[i] = (int)
 800b37e:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800b382:	fb05 f203 	mul.w	r2, r5, r3
 800b386:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800b38a:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800b38e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800b392:	fb01 f203 	mul.w	r2, r1, r3
 800b396:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800b39a:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800b39e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3a8:	d1dd      	bne.n	800b366 <build_ycc_rgb_table+0x5e>
  }
}
 800b3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3ae:	bf00      	nop
 800b3b0:	0001c5a2 	.word	0x0001c5a2
 800b3b4:	ffffa7e6 	.word	0xffffa7e6
 800b3b8:	ffff492e 	.word	0xffff492e
 800b3bc:	000166e9 	.word	0x000166e9
 800b3c0:	ff4d0b80 	.word	0xff4d0b80

0800b3c4 <ycc_rgb_convert>:

METHODDEF(void)
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
 800b3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b3c8:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800b3cc:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b3ce:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800b3d0:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800b3d4:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800b3d8:	f8d4 e014 	ldr.w	lr, [r4, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800b3dc:	9002      	str	r0, [sp, #8]
  JDIMENSION num_cols = cinfo->output_width;
 800b3de:	9501      	str	r5, [sp, #4]
  register int * Crrtab = cconvert->Cr_r_tab;
 800b3e0:	9205      	str	r2, [sp, #20]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800b3e2:	e9d4 6002 	ldrd	r6, r0, [r4, #8]
 800b3e6:	9003      	str	r0, [sp, #12]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800b3e8:	6920      	ldr	r0, [r4, #16]
 800b3ea:	9004      	str	r0, [sp, #16]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800b3ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b3ee:	3a01      	subs	r2, #1
 800b3f0:	9210      	str	r2, [sp, #64]	; 0x40
 800b3f2:	d502      	bpl.n	800b3fa <ycc_rgb_convert+0x36>
						 SCALEBITS))];
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800b3f4:	b007      	add	sp, #28
 800b3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800b3fa:	9a05      	ldr	r2, [sp, #20]
 800b3fc:	680c      	ldr	r4, [r1, #0]
 800b3fe:	189d      	adds	r5, r3, r2
    for (col = 0; col < num_cols; col++) {
 800b400:	f853 0b04 	ldr.w	r0, [r3], #4
 800b404:	f854 8005 	ldr.w	r8, [r4, r5]
    inptr1 = input_buf[1][input_row];
 800b408:	684c      	ldr	r4, [r1, #4]
 800b40a:	5964      	ldr	r4, [r4, r5]
 800b40c:	f104 3cff 	add.w	ip, r4, #4294967295
    inptr2 = input_buf[2][input_row];
 800b410:	688c      	ldr	r4, [r1, #8]
 800b412:	5967      	ldr	r7, [r4, r5]
 800b414:	9c01      	ldr	r4, [sp, #4]
 800b416:	3f01      	subs	r7, #1
 800b418:	eb04 0a08 	add.w	sl, r4, r8
    for (col = 0; col < num_cols; col++) {
 800b41c:	45d0      	cmp	r8, sl
 800b41e:	f100 0003 	add.w	r0, r0, #3
 800b422:	d0e3      	beq.n	800b3ec <ycc_rgb_convert+0x28>
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800b424:	f817 9f01 	ldrb.w	r9, [r7, #1]!
      y  = GETJSAMPLE(inptr0[col]);
 800b428:	f818 4b01 	ldrb.w	r4, [r8], #1
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800b42c:	9a02      	ldr	r2, [sp, #8]
      cb = GETJSAMPLE(inptr1[col]);
 800b42e:	f81c bf01 	ldrb.w	fp, [ip, #1]!
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800b432:	f856 5029 	ldr.w	r5, [r6, r9, lsl #2]
 800b436:	4414      	add	r4, r2
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b438:	fa0f fb8b 	sxth.w	fp, fp
 800b43c:	9a04      	ldr	r2, [sp, #16]
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 800b43e:	5d65      	ldrb	r5, [r4, r5]
 800b440:	f800 5c01 	strb.w	r5, [r0, #-1]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b444:	f852 5029 	ldr.w	r5, [r2, r9, lsl #2]
 800b448:	f85e 202b 	ldr.w	r2, [lr, fp, lsl #2]
 800b44c:	4415      	add	r5, r2
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800b44e:	9a03      	ldr	r2, [sp, #12]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b450:	142d      	asrs	r5, r5, #16
      outptr[RGB_GREEN] = range_limit[y +
 800b452:	5d65      	ldrb	r5, [r4, r5]
 800b454:	f800 5c02 	strb.w	r5, [r0, #-2]
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 800b458:	f852 502b 	ldr.w	r5, [r2, fp, lsl #2]
 800b45c:	5d64      	ldrb	r4, [r4, r5]
 800b45e:	f800 4c03 	strb.w	r4, [r0, #-3]
    for (col = 0; col < num_cols; col++) {
 800b462:	e7db      	b.n	800b41c <ycc_rgb_convert+0x58>

0800b464 <rgb_gray_convert>:

METHODDEF(void)
rgb_gray_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800b464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_y_tab;
 800b468:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
 800b46c:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
{
 800b470:	9d09      	ldr	r5, [sp, #36]	; 0x24
  register INT32 * ctab = cconvert->rgb_y_tab;
 800b472:	69a6      	ldr	r6, [r4, #24]
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b474:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800b476:	3d01      	subs	r5, #1
 800b478:	d501      	bpl.n	800b47e <rgb_gray_convert+0x1a>
      outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
    }
  }
}
 800b47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800b47e:	189c      	adds	r4, r3, r2
 800b480:	6808      	ldr	r0, [r1, #0]
    outptr = *output_buf++;
 800b482:	f853 9b04 	ldr.w	r9, [r3], #4
    inptr0 = input_buf[0][input_row];
 800b486:	f850 c004 	ldr.w	ip, [r0, r4]
    inptr1 = input_buf[1][input_row];
 800b48a:	6848      	ldr	r0, [r1, #4]
 800b48c:	f850 e004 	ldr.w	lr, [r0, r4]
    inptr2 = input_buf[2][input_row];
 800b490:	6888      	ldr	r0, [r1, #8]
 800b492:	f850 8004 	ldr.w	r8, [r0, r4]
    for (col = 0; col < num_cols; col++) {
 800b496:	2000      	movs	r0, #0
 800b498:	42b8      	cmp	r0, r7
 800b49a:	d0ec      	beq.n	800b476 <rgb_gray_convert+0x12>
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 800b49c:	f81e 4000 	ldrb.w	r4, [lr, r0]
 800b4a0:	f81c b000 	ldrb.w	fp, [ip, r0]
 800b4a4:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800b4a8:	f856 a024 	ldr.w	sl, [r6, r4, lsl #2]
 800b4ac:	f856 402b 	ldr.w	r4, [r6, fp, lsl #2]
 800b4b0:	4454      	add	r4, sl
 800b4b2:	f818 a000 	ldrb.w	sl, [r8, r0]
 800b4b6:	f50a 7a00 	add.w	sl, sl, #512	; 0x200
 800b4ba:	f856 a02a 	ldr.w	sl, [r6, sl, lsl #2]
 800b4be:	4454      	add	r4, sl
		 >> SCALEBITS);
 800b4c0:	1424      	asrs	r4, r4, #16
      outptr[col] = (JSAMPLE)
 800b4c2:	f809 4000 	strb.w	r4, [r9, r0]
    for (col = 0; col < num_cols; col++) {
 800b4c6:	3001      	adds	r0, #1
 800b4c8:	e7e6      	b.n	800b498 <rgb_gray_convert+0x34>

0800b4ca <rgb_convert>:

METHODDEF(void)
rgb_convert (j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION input_row,
	     JSAMPARRAY output_buf, int num_rows)
{
 800b4ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ce:	9d06      	ldr	r5, [sp, #24]
 800b4d0:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b4d4:	6f06      	ldr	r6, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800b4d6:	3d01      	subs	r5, #1
 800b4d8:	d501      	bpl.n	800b4de <rgb_convert+0x14>
      outptr[RGB_GREEN] = inptr1[col];
      outptr[RGB_BLUE]  = inptr2[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800b4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    inptr0 = input_buf[0][input_row];
 800b4de:	1898      	adds	r0, r3, r2
 800b4e0:	680c      	ldr	r4, [r1, #0]
 800b4e2:	5827      	ldr	r7, [r4, r0]
    inptr1 = input_buf[1][input_row];
 800b4e4:	684c      	ldr	r4, [r1, #4]
 800b4e6:	f854 c000 	ldr.w	ip, [r4, r0]
    inptr2 = input_buf[2][input_row];
 800b4ea:	688c      	ldr	r4, [r1, #8]
 800b4ec:	f854 e000 	ldr.w	lr, [r4, r0]
    for (col = 0; col < num_cols; col++) {
 800b4f0:	2000      	movs	r0, #0
 800b4f2:	f853 4b04 	ldr.w	r4, [r3], #4
 800b4f6:	42b0      	cmp	r0, r6
 800b4f8:	f104 0403 	add.w	r4, r4, #3
 800b4fc:	d0eb      	beq.n	800b4d6 <rgb_convert+0xc>
      outptr[RGB_RED]   = inptr0[col];
 800b4fe:	f817 8000 	ldrb.w	r8, [r7, r0]
 800b502:	f804 8c01 	strb.w	r8, [r4, #-1]
      outptr[RGB_GREEN] = inptr1[col];
 800b506:	f81c 8000 	ldrb.w	r8, [ip, r0]
 800b50a:	f804 8c02 	strb.w	r8, [r4, #-2]
      outptr[RGB_BLUE]  = inptr2[col];
 800b50e:	f81e 8000 	ldrb.w	r8, [lr, r0]
    for (col = 0; col < num_cols; col++) {
 800b512:	3001      	adds	r0, #1
      outptr[RGB_BLUE]  = inptr2[col];
 800b514:	f804 8c03 	strb.w	r8, [r4, #-3]
    for (col = 0; col < num_cols; col++) {
 800b518:	e7ed      	b.n	800b4f6 <rgb_convert+0x2c>

0800b51a <null_convert>:

METHODDEF(void)
null_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
 800b51a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b51e:	9e07      	ldr	r6, [sp, #28]
 800b520:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->num_components;
 800b524:	6a47      	ldr	r7, [r0, #36]	; 0x24
  JDIMENSION num_cols = cinfo->output_width;
 800b526:	f8d0 e070 	ldr.w	lr, [r0, #112]	; 0x70
  int ci;

  while (--num_rows >= 0) {
 800b52a:	3e01      	subs	r6, #1
 800b52c:	d418      	bmi.n	800b560 <null_convert+0x46>
    for (ci = 0; ci < num_components; ci++) {
      inptr = input_buf[ci][input_row];
 800b52e:	eb03 0c02 	add.w	ip, r3, r2
    for (ci = 0; ci < num_components; ci++) {
 800b532:	2000      	movs	r0, #0
 800b534:	e00a      	b.n	800b54c <null_convert+0x32>
      inptr = input_buf[ci][input_row];
 800b536:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 800b53a:	f854 500c 	ldr.w	r5, [r4, ip]
      outptr = output_buf[0] + ci;
 800b53e:	681c      	ldr	r4, [r3, #0]
 800b540:	eb05 080e 	add.w	r8, r5, lr
 800b544:	4404      	add	r4, r0
      for (count = num_cols; count > 0; count--) {
 800b546:	4545      	cmp	r5, r8
 800b548:	d104      	bne.n	800b554 <null_convert+0x3a>
    for (ci = 0; ci < num_components; ci++) {
 800b54a:	3001      	adds	r0, #1
 800b54c:	42b8      	cmp	r0, r7
 800b54e:	dbf2      	blt.n	800b536 <null_convert+0x1c>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
	outptr += num_components;
      }
    }
    input_row++;
    output_buf++;
 800b550:	3304      	adds	r3, #4
 800b552:	e7ea      	b.n	800b52a <null_convert+0x10>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
 800b554:	f815 9b01 	ldrb.w	r9, [r5], #1
 800b558:	f884 9000 	strb.w	r9, [r4]
	outptr += num_components;
 800b55c:	443c      	add	r4, r7
      for (count = num_cols; count > 0; count--) {
 800b55e:	e7f2      	b.n	800b546 <null_convert+0x2c>
  }
}
 800b560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800b564 <gray_rgb_convert>:

METHODDEF(void)
gray_rgb_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 800b564:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b566:	9d05      	ldr	r5, [sp, #20]
 800b568:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b56c:	6f07      	ldr	r7, [r0, #112]	; 0x70

  while (--num_rows >= 0) {
 800b56e:	3d01      	subs	r5, #1
 800b570:	d500      	bpl.n	800b574 <gray_rgb_convert+0x10>
      /* We can dispense with GETJSAMPLE() here */
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
      outptr += RGB_PIXELSIZE;
    }
  }
}
 800b572:	bdf0      	pop	{r4, r5, r6, r7, pc}
    inptr = input_buf[0][input_row++];
 800b574:	6808      	ldr	r0, [r1, #0]
 800b576:	181c      	adds	r4, r3, r0
    for (col = 0; col < num_cols; col++) {
 800b578:	f853 0b04 	ldr.w	r0, [r3], #4
 800b57c:	58a4      	ldr	r4, [r4, r2]
 800b57e:	eb04 0c07 	add.w	ip, r4, r7
 800b582:	4564      	cmp	r4, ip
 800b584:	f100 0003 	add.w	r0, r0, #3
 800b588:	d0f1      	beq.n	800b56e <gray_rgb_convert+0xa>
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
 800b58a:	f814 6b01 	ldrb.w	r6, [r4], #1
 800b58e:	f800 6c03 	strb.w	r6, [r0, #-3]
 800b592:	f800 6c02 	strb.w	r6, [r0, #-2]
 800b596:	f800 6c01 	strb.w	r6, [r0, #-1]
    for (col = 0; col < num_cols; col++) {
 800b59a:	e7f2      	b.n	800b582 <gray_rgb_convert+0x1e>

0800b59c <ycck_cmyk_convert>:

METHODDEF(void)
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
 800b59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b5a0:	f8d0 41dc 	ldr.w	r4, [r0, #476]	; 0x1dc
{
 800b5a4:	b087      	sub	sp, #28
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800b5a6:	6f05      	ldr	r5, [r0, #112]	; 0x70
 800b5a8:	ebc3 0882 	rsb	r8, r3, r2, lsl #2
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800b5ac:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800b5b0:	f8d4 e014 	ldr.w	lr, [r4, #20]
  JDIMENSION num_cols = cinfo->output_width;
 800b5b4:	9500      	str	r5, [sp, #0]
  register int * Cbbtab = cconvert->Cb_b_tab;
 800b5b6:	e9d4 c002 	ldrd	ip, r0, [r4, #8]
 800b5ba:	9001      	str	r0, [sp, #4]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 800b5bc:	6920      	ldr	r0, [r4, #16]
 800b5be:	9002      	str	r0, [sp, #8]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 800b5c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b5c2:	3a01      	subs	r2, #1
 800b5c4:	9210      	str	r2, [sp, #64]	; 0x40
 800b5c6:	d502      	bpl.n	800b5ce <ycck_cmyk_convert+0x32>
      /* K passes through unchanged */
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
      outptr += 4;
    }
  }
}
 800b5c8:	b007      	add	sp, #28
 800b5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr0 = input_buf[0][input_row];
 800b5ce:	eb03 0008 	add.w	r0, r3, r8
 800b5d2:	680a      	ldr	r2, [r1, #0]
 800b5d4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b5d8:	5812      	ldr	r2, [r2, r0]
 800b5da:	9203      	str	r2, [sp, #12]
    inptr1 = input_buf[1][input_row];
 800b5dc:	684a      	ldr	r2, [r1, #4]
 800b5de:	5812      	ldr	r2, [r2, r0]
 800b5e0:	9204      	str	r2, [sp, #16]
    inptr2 = input_buf[2][input_row];
 800b5e2:	688a      	ldr	r2, [r1, #8]
 800b5e4:	f852 9000 	ldr.w	r9, [r2, r0]
    inptr3 = input_buf[3][input_row];
 800b5e8:	68ca      	ldr	r2, [r1, #12]
 800b5ea:	f852 a000 	ldr.w	sl, [r2, r0]
    for (col = 0; col < num_cols; col++) {
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	9800      	ldr	r0, [sp, #0]
 800b5f2:	3504      	adds	r5, #4
 800b5f4:	4282      	cmp	r2, r0
 800b5f6:	d0e3      	beq.n	800b5c0 <ycck_cmyk_convert+0x24>
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800b5f8:	f819 7002 	ldrb.w	r7, [r9, r2]
      cb = GETJSAMPLE(inptr1[col]);
 800b5fc:	9c04      	ldr	r4, [sp, #16]
      y  = GETJSAMPLE(inptr0[col]);
 800b5fe:	9803      	ldr	r0, [sp, #12]
      cb = GETJSAMPLE(inptr1[col]);
 800b600:	f814 b002 	ldrb.w	fp, [r4, r2]
      y  = GETJSAMPLE(inptr0[col]);
 800b604:	5c80      	ldrb	r0, [r0, r2]
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800b606:	f85c 4027 	ldr.w	r4, [ip, r7, lsl #2]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b60a:	fa0f fb8b 	sxth.w	fp, fp
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 800b60e:	4404      	add	r4, r0
 800b610:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800b614:	5d34      	ldrb	r4, [r6, r4]
 800b616:	f805 4c04 	strb.w	r4, [r5, #-4]
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 800b61a:	f85e 402b 	ldr.w	r4, [lr, fp, lsl #2]
 800b61e:	9405      	str	r4, [sp, #20]
 800b620:	9c02      	ldr	r4, [sp, #8]
 800b622:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800b626:	9c05      	ldr	r4, [sp, #20]
 800b628:	443c      	add	r4, r7
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
 800b62a:	eb00 4424 	add.w	r4, r0, r4, asr #16
 800b62e:	f1c4 04ff 	rsb	r4, r4, #255	; 0xff
 800b632:	5d34      	ldrb	r4, [r6, r4]
 800b634:	f805 4c03 	strb.w	r4, [r5, #-3]
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
 800b638:	9c01      	ldr	r4, [sp, #4]
 800b63a:	f854 402b 	ldr.w	r4, [r4, fp, lsl #2]
 800b63e:	4420      	add	r0, r4
 800b640:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800b644:	5c30      	ldrb	r0, [r6, r0]
 800b646:	f805 0c02 	strb.w	r0, [r5, #-2]
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800b64a:	f81a 0002 	ldrb.w	r0, [sl, r2]
    for (col = 0; col < num_cols; col++) {
 800b64e:	3201      	adds	r2, #1
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 800b650:	f805 0c01 	strb.w	r0, [r5, #-1]
    for (col = 0; col < num_cols; col++) {
 800b654:	e7cc      	b.n	800b5f0 <ycck_cmyk_convert+0x54>

0800b656 <start_pass_dcolor>:

METHODDEF(void)
start_pass_dcolor (j_decompress_ptr cinfo)
{
  /* no work needed */
}
 800b656:	4770      	bx	lr

0800b658 <grayscale_convert>:
{
 800b658:	b513      	push	{r0, r1, r4, lr}
 800b65a:	460c      	mov	r4, r1
 800b65c:	4611      	mov	r1, r2
 800b65e:	461a      	mov	r2, r3
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
 800b660:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800b662:	6820      	ldr	r0, [r4, #0]
 800b664:	9301      	str	r3, [sp, #4]
 800b666:	9b04      	ldr	r3, [sp, #16]
 800b668:	9300      	str	r3, [sp, #0]
 800b66a:	2300      	movs	r3, #0
 800b66c:	f00b fae3 	bl	8016c36 <jcopy_sample_rows>
}
 800b670:	b002      	add	sp, #8
 800b672:	bd10      	pop	{r4, pc}

0800b674 <jinit_color_deconverter>:
{
  my_cconvert_ptr cconvert;
  int ci;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b674:	6843      	ldr	r3, [r0, #4]
 800b676:	221c      	movs	r2, #28
 800b678:	2101      	movs	r1, #1
 800b67a:	681b      	ldr	r3, [r3, #0]
{
 800b67c:	b570      	push	{r4, r5, r6, lr}
 800b67e:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b680:	4798      	blx	r3
				SIZEOF(my_color_deconverter));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
  cconvert->pub.start_pass = start_pass_dcolor;
 800b682:	4b4a      	ldr	r3, [pc, #296]	; (800b7ac <jinit_color_deconverter+0x138>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b684:	4605      	mov	r5, r0
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
 800b686:	f8c4 01dc 	str.w	r0, [r4, #476]	; 0x1dc
  cconvert->pub.start_pass = start_pass_dcolor;
 800b68a:	6003      	str	r3, [r0, #0]

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
 800b68c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b690:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b692:	2b03      	cmp	r3, #3
 800b694:	d821      	bhi.n	800b6da <jinit_color_deconverter+0x66>
 800b696:	2b01      	cmp	r3, #1
 800b698:	d82d      	bhi.n	800b6f6 <jinit_color_deconverter+0x82>
 800b69a:	d023      	beq.n	800b6e4 <jinit_color_deconverter+0x70>
    if (cinfo->num_components != 4)
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
    break;

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->num_components < 1)
 800b69c:	2a00      	cmp	r2, #0
 800b69e:	dd23      	ble.n	800b6e8 <jinit_color_deconverter+0x74>
  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
 800b6a0:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 800b6a4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b6a8:	2902      	cmp	r1, #2
 800b6aa:	d055      	beq.n	800b758 <jinit_color_deconverter+0xe4>
 800b6ac:	2904      	cmp	r1, #4
 800b6ae:	d066      	beq.n	800b77e <jinit_color_deconverter+0x10a>
 800b6b0:	2901      	cmp	r1, #1
 800b6b2:	d16d      	bne.n	800b790 <jinit_color_deconverter+0x11c>
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800b6b4:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
    cinfo->out_color_components = 1;
 800b6b8:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 800b6ba:	2a01      	cmp	r2, #1
 800b6bc:	d124      	bne.n	800b708 <jinit_color_deconverter+0x94>
	cinfo->jpeg_color_space == JCS_YCbCr) {
      cconvert->pub.color_convert = grayscale_convert;
 800b6be:	4b3c      	ldr	r3, [pc, #240]	; (800b7b0 <jinit_color_deconverter+0x13c>)
      /* For color->grayscale conversion, only the Y (0) component is needed */
      for (ci = 1; ci < cinfo->num_components; ci++)
	cinfo->comp_info[ci].component_needed = FALSE;
 800b6c0:	2058      	movs	r0, #88	; 0x58
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b6c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
      cconvert->pub.color_convert = grayscale_convert;
 800b6c4:	606b      	str	r3, [r5, #4]
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b6c6:	4613      	mov	r3, r2
	cinfo->comp_info[ci].component_needed = FALSE;
 800b6c8:	2500      	movs	r5, #0
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b6ca:	4299      	cmp	r1, r3
 800b6cc:	dc15      	bgt.n	800b6fa <jinit_color_deconverter+0x86>
    } else			/* unsupported non-null conversion */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
  }

  if (cinfo->quantize_colors)
 800b6ce:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d169      	bne.n	800b7a8 <jinit_color_deconverter+0x134>
    cinfo->output_components = 1; /* single colormapped output component */
  else
    cinfo->output_components = cinfo->out_color_components;
 800b6d4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b6d6:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 800b6d8:	bd70      	pop	{r4, r5, r6, pc}
  switch (cinfo->jpeg_color_space) {
 800b6da:	3b04      	subs	r3, #4
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d8dd      	bhi.n	800b69c <jinit_color_deconverter+0x28>
    if (cinfo->num_components != 4)
 800b6e0:	2a04      	cmp	r2, #4
 800b6e2:	e000      	b.n	800b6e6 <jinit_color_deconverter+0x72>
    if (cinfo->num_components != 1)
 800b6e4:	2a01      	cmp	r2, #1
    if (cinfo->num_components != 4)
 800b6e6:	d0db      	beq.n	800b6a0 <jinit_color_deconverter+0x2c>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 800b6e8:	6823      	ldr	r3, [r4, #0]
 800b6ea:	220b      	movs	r2, #11
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	615a      	str	r2, [r3, #20]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4798      	blx	r3
 800b6f4:	e7d4      	b.n	800b6a0 <jinit_color_deconverter+0x2c>
    if (cinfo->num_components != 3)
 800b6f6:	2a03      	cmp	r2, #3
 800b6f8:	e7f5      	b.n	800b6e6 <jinit_color_deconverter+0x72>
	cinfo->comp_info[ci].component_needed = FALSE;
 800b6fa:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
 800b6fe:	fb00 2203 	mla	r2, r0, r3, r2
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b702:	3301      	adds	r3, #1
	cinfo->comp_info[ci].component_needed = FALSE;
 800b704:	6355      	str	r5, [r2, #52]	; 0x34
      for (ci = 1; ci < cinfo->num_components; ci++)
 800b706:	e7e0      	b.n	800b6ca <jinit_color_deconverter+0x56>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800b708:	2b02      	cmp	r3, #2
 800b70a:	d146      	bne.n	800b79a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_gray_convert;
 800b70c:	4b29      	ldr	r3, [pc, #164]	; (800b7b4 <jinit_color_deconverter+0x140>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b70e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800b712:	4620      	mov	r0, r4
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800b714:	f644 468b 	movw	r6, #19595	; 0x4c8b
      cconvert->pub.color_convert = rgb_gray_convert;
 800b718:	606b      	str	r3, [r5, #4]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b71a:	6863      	ldr	r3, [r4, #4]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 800b71c:	f8d4 51dc 	ldr.w	r5, [r4, #476]	; 0x1dc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4798      	blx	r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b724:	2300      	movs	r3, #0
  cconvert->rgb_y_tab = rgb_y_tab = (INT32 *)
 800b726:	61a8      	str	r0, [r5, #24]
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b728:	f641 512f 	movw	r1, #7471	; 0x1d2f
 800b72c:	3804      	subs	r0, #4
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800b72e:	f249 6546 	movw	r5, #38470	; 0x9646
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 800b732:	fb06 f203 	mul.w	r2, r6, r3
 800b736:	f840 2f04 	str.w	r2, [r0, #4]!
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800b73a:	fb05 f203 	mul.w	r2, r5, r3
 800b73e:	f8c0 2400 	str.w	r2, [r0, #1024]	; 0x400
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b742:	fb01 f203 	mul.w	r2, r1, r3
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b746:	3301      	adds	r3, #1
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b748:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b74c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 800b750:	f8c0 2800 	str.w	r2, [r0, #2048]	; 0x800
  for (i = 0; i <= MAXJSAMPLE; i++) {
 800b754:	d1ed      	bne.n	800b732 <jinit_color_deconverter+0xbe>
 800b756:	e7ba      	b.n	800b6ce <jinit_color_deconverter+0x5a>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800b758:	2203      	movs	r2, #3
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800b75a:	4293      	cmp	r3, r2
    cinfo->out_color_components = RGB_PIXELSIZE;
 800b75c:	67a2      	str	r2, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 800b75e:	d105      	bne.n	800b76c <jinit_color_deconverter+0xf8>
      cconvert->pub.color_convert = ycc_rgb_convert;
 800b760:	4b15      	ldr	r3, [pc, #84]	; (800b7b8 <jinit_color_deconverter+0x144>)
      build_ycc_rgb_table(cinfo);
 800b762:	4620      	mov	r0, r4
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800b764:	606b      	str	r3, [r5, #4]
      build_ycc_rgb_table(cinfo);
 800b766:	f7ff fdcf 	bl	800b308 <build_ycc_rgb_table>
 800b76a:	e7b0      	b.n	800b6ce <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	d102      	bne.n	800b776 <jinit_color_deconverter+0x102>
      cconvert->pub.color_convert = gray_rgb_convert;
 800b770:	4b12      	ldr	r3, [pc, #72]	; (800b7bc <jinit_color_deconverter+0x148>)
      cconvert->pub.color_convert = null_convert;
 800b772:	606b      	str	r3, [r5, #4]
 800b774:	e7ab      	b.n	800b6ce <jinit_color_deconverter+0x5a>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 800b776:	2b02      	cmp	r3, #2
 800b778:	d10f      	bne.n	800b79a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = rgb_convert;
 800b77a:	4b11      	ldr	r3, [pc, #68]	; (800b7c0 <jinit_color_deconverter+0x14c>)
 800b77c:	e7f9      	b.n	800b772 <jinit_color_deconverter+0xfe>
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800b77e:	2b05      	cmp	r3, #5
    cinfo->out_color_components = 4;
 800b780:	67a1      	str	r1, [r4, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 800b782:	d101      	bne.n	800b788 <jinit_color_deconverter+0x114>
      cconvert->pub.color_convert = ycck_cmyk_convert;
 800b784:	4b0f      	ldr	r3, [pc, #60]	; (800b7c4 <jinit_color_deconverter+0x150>)
 800b786:	e7ec      	b.n	800b762 <jinit_color_deconverter+0xee>
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
 800b788:	2b04      	cmp	r3, #4
 800b78a:	d106      	bne.n	800b79a <jinit_color_deconverter+0x126>
      cconvert->pub.color_convert = null_convert;
 800b78c:	4b0e      	ldr	r3, [pc, #56]	; (800b7c8 <jinit_color_deconverter+0x154>)
 800b78e:	e7f0      	b.n	800b772 <jinit_color_deconverter+0xfe>
    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
 800b790:	4299      	cmp	r1, r3
 800b792:	d102      	bne.n	800b79a <jinit_color_deconverter+0x126>
      cinfo->out_color_components = cinfo->num_components;
 800b794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b796:	67a3      	str	r3, [r4, #120]	; 0x78
 800b798:	e7f8      	b.n	800b78c <jinit_color_deconverter+0x118>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 800b79a:	6823      	ldr	r3, [r4, #0]
 800b79c:	221c      	movs	r2, #28
 800b79e:	4620      	mov	r0, r4
 800b7a0:	615a      	str	r2, [r3, #20]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4798      	blx	r3
 800b7a6:	e792      	b.n	800b6ce <jinit_color_deconverter+0x5a>
    cinfo->output_components = 1; /* single colormapped output component */
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	e794      	b.n	800b6d6 <jinit_color_deconverter+0x62>
 800b7ac:	0800b657 	.word	0x0800b657
 800b7b0:	0800b659 	.word	0x0800b659
 800b7b4:	0800b465 	.word	0x0800b465
 800b7b8:	0800b3c5 	.word	0x0800b3c5
 800b7bc:	0800b565 	.word	0x0800b565
 800b7c0:	0800b4cb 	.word	0x0800b4cb
 800b7c4:	0800b59d 	.word	0x0800b59d
 800b7c8:	0800b51b 	.word	0x0800b51b

0800b7cc <start_pass>:
 * a matching multiplier table.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 800b7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d0:	f8d0 31d4 	ldr.w	r3, [r0, #468]	; 0x1d4
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
  int ci, i;
  jpeg_component_info *compptr;
  int method = 0;
  inverse_DCT_method_ptr method_ptr = NULL;
 800b7d4:	2500      	movs	r5, #0
{
 800b7d6:	4682      	mov	sl, r0
  JQUANT_TBL * qtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b7d8:	f8d0 b0d8 	ldr.w	fp, [r0, #216]	; 0xd8
 800b7dc:	f103 0804 	add.w	r8, r3, #4
  int method = 0;
 800b7e0:	462c      	mov	r4, r5
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b7e2:	46a9      	mov	r9, r5
{
 800b7e4:	ed2d 8b04 	vpush	{d8-d9}
 800b7e8:	b087      	sub	sp, #28
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b7ea:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800b7ee:	454b      	cmp	r3, r9
 800b7f0:	dc04      	bgt.n	800b7fc <start_pass+0x30>
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
      break;
    }
  }
}
 800b7f2:	b007      	add	sp, #28
 800b7f4:	ecbd 8b04 	vpop	{d8-d9}
 800b7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b7fc:	e9db 1209 	ldrd	r1, r2, [fp, #36]	; 0x24
 800b800:	f240 700e 	movw	r0, #1806	; 0x70e
 800b804:	eb02 2301 	add.w	r3, r2, r1, lsl #8
 800b808:	4283      	cmp	r3, r0
 800b80a:	f000 80dc 	beq.w	800b9c6 <start_pass+0x1fa>
 800b80e:	dc5b      	bgt.n	800b8c8 <start_pass+0xfc>
 800b810:	f240 4004 	movw	r0, #1028	; 0x404
 800b814:	4283      	cmp	r3, r0
 800b816:	f000 80d9 	beq.w	800b9cc <start_pass+0x200>
 800b81a:	dc30      	bgt.n	800b87e <start_pass+0xb2>
 800b81c:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800b820:	f000 80d6 	beq.w	800b9d0 <start_pass+0x204>
 800b824:	dc1b      	bgt.n	800b85e <start_pass+0x92>
 800b826:	f240 2001 	movw	r0, #513	; 0x201
 800b82a:	4283      	cmp	r3, r0
 800b82c:	f000 80d2 	beq.w	800b9d4 <start_pass+0x208>
 800b830:	dc0f      	bgt.n	800b852 <start_pass+0x86>
 800b832:	f240 1001 	movw	r0, #257	; 0x101
 800b836:	4283      	cmp	r3, r0
 800b838:	f000 80ce 	beq.w	800b9d8 <start_pass+0x20c>
 800b83c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800b840:	f000 80cc 	beq.w	800b9dc <start_pass+0x210>
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800b844:	f8da 3000 	ldr.w	r3, [sl]
 800b848:	2007      	movs	r0, #7
 800b84a:	61da      	str	r2, [r3, #28]
 800b84c:	e9c3 0105 	strd	r0, r1, [r3, #20]
 800b850:	e0b5      	b.n	800b9be <start_pass+0x1f2>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b852:	f240 2002 	movw	r0, #514	; 0x202
 800b856:	4283      	cmp	r3, r0
 800b858:	d1f4      	bne.n	800b844 <start_pass+0x78>
 800b85a:	4da0      	ldr	r5, [pc, #640]	; (800badc <start_pass+0x310>)
 800b85c:	e0b4      	b.n	800b9c8 <start_pass+0x1fc>
 800b85e:	f240 3006 	movw	r0, #774	; 0x306
 800b862:	4283      	cmp	r3, r0
 800b864:	f000 80bc 	beq.w	800b9e0 <start_pass+0x214>
 800b868:	f240 4002 	movw	r0, #1026	; 0x402
 800b86c:	4283      	cmp	r3, r0
 800b86e:	f000 80b9 	beq.w	800b9e4 <start_pass+0x218>
 800b872:	f240 3003 	movw	r0, #771	; 0x303
 800b876:	4283      	cmp	r3, r0
 800b878:	d1e4      	bne.n	800b844 <start_pass+0x78>
      method_ptr = jpeg_idct_3x3;
 800b87a:	4d99      	ldr	r5, [pc, #612]	; (800bae0 <start_pass+0x314>)
 800b87c:	e0a4      	b.n	800b9c8 <start_pass+0x1fc>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b87e:	f240 6003 	movw	r0, #1539	; 0x603
 800b882:	4283      	cmp	r3, r0
 800b884:	f000 80b0 	beq.w	800b9e8 <start_pass+0x21c>
 800b888:	dc0e      	bgt.n	800b8a8 <start_pass+0xdc>
 800b88a:	f240 5005 	movw	r0, #1285	; 0x505
 800b88e:	4283      	cmp	r3, r0
 800b890:	f000 80ac 	beq.w	800b9ec <start_pass+0x220>
 800b894:	f240 500a 	movw	r0, #1290	; 0x50a
 800b898:	4283      	cmp	r3, r0
 800b89a:	f000 80a9 	beq.w	800b9f0 <start_pass+0x224>
 800b89e:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800b8a2:	d1cf      	bne.n	800b844 <start_pass+0x78>
      method_ptr = jpeg_idct_4x8;
 800b8a4:	4d8f      	ldr	r5, [pc, #572]	; (800bae4 <start_pass+0x318>)
 800b8a6:	e08f      	b.n	800b9c8 <start_pass+0x1fc>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b8a8:	f240 600c 	movw	r0, #1548	; 0x60c
 800b8ac:	4283      	cmp	r3, r0
 800b8ae:	f000 80a1 	beq.w	800b9f4 <start_pass+0x228>
 800b8b2:	f240 7007 	movw	r0, #1799	; 0x707
 800b8b6:	4283      	cmp	r3, r0
 800b8b8:	f000 809e 	beq.w	800b9f8 <start_pass+0x22c>
 800b8bc:	f240 6006 	movw	r0, #1542	; 0x606
 800b8c0:	4283      	cmp	r3, r0
 800b8c2:	d1bf      	bne.n	800b844 <start_pass+0x78>
      method_ptr = jpeg_idct_6x6;
 800b8c4:	4d88      	ldr	r5, [pc, #544]	; (800bae8 <start_pass+0x31c>)
 800b8c6:	e07f      	b.n	800b9c8 <start_pass+0x1fc>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b8c8:	f640 4006 	movw	r0, #3078	; 0xc06
 800b8cc:	4283      	cmp	r3, r0
 800b8ce:	f000 8095 	beq.w	800b9fc <start_pass+0x230>
 800b8d2:	dc22      	bgt.n	800b91a <start_pass+0x14e>
 800b8d4:	f640 1009 	movw	r0, #2313	; 0x909
 800b8d8:	4283      	cmp	r3, r0
 800b8da:	f000 8091 	beq.w	800ba00 <start_pass+0x234>
 800b8de:	dc0d      	bgt.n	800b8fc <start_pass+0x130>
 800b8e0:	f640 0008 	movw	r0, #2056	; 0x808
 800b8e4:	4283      	cmp	r3, r0
 800b8e6:	d03a      	beq.n	800b95e <start_pass+0x192>
 800b8e8:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800b8ec:	f000 808a 	beq.w	800ba04 <start_pass+0x238>
 800b8f0:	f640 0004 	movw	r0, #2052	; 0x804
 800b8f4:	4283      	cmp	r3, r0
 800b8f6:	d1a5      	bne.n	800b844 <start_pass+0x78>
      method_ptr = jpeg_idct_8x4;
 800b8f8:	4d7c      	ldr	r5, [pc, #496]	; (800baec <start_pass+0x320>)
 800b8fa:	e065      	b.n	800b9c8 <start_pass+0x1fc>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b8fc:	f640 200a 	movw	r0, #2570	; 0xa0a
 800b900:	4283      	cmp	r3, r0
 800b902:	f000 8081 	beq.w	800ba08 <start_pass+0x23c>
 800b906:	f640 300b 	movw	r0, #2827	; 0xb0b
 800b90a:	4283      	cmp	r3, r0
 800b90c:	d07e      	beq.n	800ba0c <start_pass+0x240>
 800b90e:	f640 2005 	movw	r0, #2565	; 0xa05
 800b912:	4283      	cmp	r3, r0
 800b914:	d196      	bne.n	800b844 <start_pass+0x78>
      method_ptr = jpeg_idct_10x5;
 800b916:	4d76      	ldr	r5, [pc, #472]	; (800baf0 <start_pass+0x324>)
 800b918:	e056      	b.n	800b9c8 <start_pass+0x1fc>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b91a:	f640 600e 	movw	r0, #3598	; 0xe0e
 800b91e:	4283      	cmp	r3, r0
 800b920:	d076      	beq.n	800ba10 <start_pass+0x244>
 800b922:	dc0d      	bgt.n	800b940 <start_pass+0x174>
 800b924:	f640 500d 	movw	r0, #3341	; 0xd0d
 800b928:	4283      	cmp	r3, r0
 800b92a:	d073      	beq.n	800ba14 <start_pass+0x248>
 800b92c:	f640 6007 	movw	r0, #3591	; 0xe07
 800b930:	4283      	cmp	r3, r0
 800b932:	d071      	beq.n	800ba18 <start_pass+0x24c>
 800b934:	f640 400c 	movw	r0, #3084	; 0xc0c
 800b938:	4283      	cmp	r3, r0
 800b93a:	d183      	bne.n	800b844 <start_pass+0x78>
      method_ptr = jpeg_idct_12x12;
 800b93c:	4d6d      	ldr	r5, [pc, #436]	; (800baf4 <start_pass+0x328>)
 800b93e:	e043      	b.n	800b9c8 <start_pass+0x1fc>
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 800b940:	f241 0008 	movw	r0, #4104	; 0x1008
 800b944:	4283      	cmp	r3, r0
 800b946:	d069      	beq.n	800ba1c <start_pass+0x250>
 800b948:	f241 0010 	movw	r0, #4112	; 0x1010
 800b94c:	4283      	cmp	r3, r0
 800b94e:	d067      	beq.n	800ba20 <start_pass+0x254>
 800b950:	f640 700f 	movw	r0, #3855	; 0xf0f
 800b954:	4283      	cmp	r3, r0
 800b956:	f47f af75 	bne.w	800b844 <start_pass+0x78>
      method_ptr = jpeg_idct_15x15;
 800b95a:	4d67      	ldr	r5, [pc, #412]	; (800baf8 <start_pass+0x32c>)
 800b95c:	e034      	b.n	800b9c8 <start_pass+0x1fc>
      switch (cinfo->dct_method) {
 800b95e:	f89a 3048 	ldrb.w	r3, [sl, #72]	; 0x48
 800b962:	2b02      	cmp	r3, #2
 800b964:	d827      	bhi.n	800b9b6 <start_pass+0x1ea>
 800b966:	461c      	mov	r4, r3
 800b968:	4b64      	ldr	r3, [pc, #400]	; (800bafc <start_pass+0x330>)
 800b96a:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800b96e:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
    idct->pub.inverse_DCT[ci] = method_ptr;
 800b972:	f848 5b04 	str.w	r5, [r8], #4
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 800b976:	b1cb      	cbz	r3, 800b9ac <start_pass+0x1e0>
 800b978:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800b97c:	42a3      	cmp	r3, r4
 800b97e:	d015      	beq.n	800b9ac <start_pass+0x1e0>
    qtbl = compptr->quant_table;
 800b980:	f8db 6050 	ldr.w	r6, [fp, #80]	; 0x50
    if (qtbl == NULL)		/* happens if no data yet for component */
 800b984:	b196      	cbz	r6, 800b9ac <start_pass+0x1e0>
    switch (method) {
 800b986:	2c01      	cmp	r4, #1
    idct->cur_method[ci] = method;
 800b988:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    switch (method) {
 800b98c:	d04a      	beq.n	800ba24 <start_pass+0x258>
 800b98e:	2c02      	cmp	r4, #2
 800b990:	d05a      	beq.n	800ba48 <start_pass+0x27c>
 800b992:	2c00      	cmp	r4, #0
 800b994:	f040 8099 	bne.w	800baca <start_pass+0x2fe>
	ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800b998:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800b99c:	4623      	mov	r3, r4
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 800b99e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 800b9a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	2b40      	cmp	r3, #64	; 0x40
 800b9aa:	d1f8      	bne.n	800b99e <start_pass+0x1d2>
       ci++, compptr++) {
 800b9ac:	f109 0901 	add.w	r9, r9, #1
 800b9b0:	f10b 0b58 	add.w	fp, fp, #88	; 0x58
 800b9b4:	e719      	b.n	800b7ea <start_pass+0x1e>
	ERREXIT(cinfo, JERR_NOT_COMPILED);
 800b9b6:	f8da 3000 	ldr.w	r3, [sl]
 800b9ba:	2231      	movs	r2, #49	; 0x31
 800b9bc:	615a      	str	r2, [r3, #20]
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4650      	mov	r0, sl
 800b9c2:	4798      	blx	r3
      break;
 800b9c4:	e7d3      	b.n	800b96e <start_pass+0x1a2>
      method_ptr = jpeg_idct_7x14;
 800b9c6:	4d4e      	ldr	r5, [pc, #312]	; (800bb00 <start_pass+0x334>)
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800b9c8:	2400      	movs	r4, #0
 800b9ca:	e7d0      	b.n	800b96e <start_pass+0x1a2>
      method_ptr = jpeg_idct_4x4;
 800b9cc:	4d4d      	ldr	r5, [pc, #308]	; (800bb04 <start_pass+0x338>)
 800b9ce:	e7fb      	b.n	800b9c8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_2x4;
 800b9d0:	4d4d      	ldr	r5, [pc, #308]	; (800bb08 <start_pass+0x33c>)
 800b9d2:	e7f9      	b.n	800b9c8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_2x1;
 800b9d4:	4d4d      	ldr	r5, [pc, #308]	; (800bb0c <start_pass+0x340>)
 800b9d6:	e7f7      	b.n	800b9c8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_1x1;
 800b9d8:	4d4d      	ldr	r5, [pc, #308]	; (800bb10 <start_pass+0x344>)
 800b9da:	e7f5      	b.n	800b9c8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_1x2;
 800b9dc:	4d4d      	ldr	r5, [pc, #308]	; (800bb14 <start_pass+0x348>)
 800b9de:	e7f3      	b.n	800b9c8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_3x6;
 800b9e0:	4d4d      	ldr	r5, [pc, #308]	; (800bb18 <start_pass+0x34c>)
 800b9e2:	e7f1      	b.n	800b9c8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_4x2;
 800b9e4:	4d4d      	ldr	r5, [pc, #308]	; (800bb1c <start_pass+0x350>)
 800b9e6:	e7ef      	b.n	800b9c8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_6x3;
 800b9e8:	4d4d      	ldr	r5, [pc, #308]	; (800bb20 <start_pass+0x354>)
 800b9ea:	e7ed      	b.n	800b9c8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_5x5;
 800b9ec:	4d4d      	ldr	r5, [pc, #308]	; (800bb24 <start_pass+0x358>)
 800b9ee:	e7eb      	b.n	800b9c8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_5x10;
 800b9f0:	4d4d      	ldr	r5, [pc, #308]	; (800bb28 <start_pass+0x35c>)
 800b9f2:	e7e9      	b.n	800b9c8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_6x12;
 800b9f4:	4d4d      	ldr	r5, [pc, #308]	; (800bb2c <start_pass+0x360>)
 800b9f6:	e7e7      	b.n	800b9c8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_7x7;
 800b9f8:	4d4d      	ldr	r5, [pc, #308]	; (800bb30 <start_pass+0x364>)
 800b9fa:	e7e5      	b.n	800b9c8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_12x6;
 800b9fc:	4d4d      	ldr	r5, [pc, #308]	; (800bb34 <start_pass+0x368>)
 800b9fe:	e7e3      	b.n	800b9c8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_9x9;
 800ba00:	4d4d      	ldr	r5, [pc, #308]	; (800bb38 <start_pass+0x36c>)
 800ba02:	e7e1      	b.n	800b9c8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_8x16;
 800ba04:	4d4d      	ldr	r5, [pc, #308]	; (800bb3c <start_pass+0x370>)
 800ba06:	e7df      	b.n	800b9c8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_10x10;
 800ba08:	4d4d      	ldr	r5, [pc, #308]	; (800bb40 <start_pass+0x374>)
 800ba0a:	e7dd      	b.n	800b9c8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_11x11;
 800ba0c:	4d4d      	ldr	r5, [pc, #308]	; (800bb44 <start_pass+0x378>)
 800ba0e:	e7db      	b.n	800b9c8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_14x14;
 800ba10:	4d4d      	ldr	r5, [pc, #308]	; (800bb48 <start_pass+0x37c>)
 800ba12:	e7d9      	b.n	800b9c8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_13x13;
 800ba14:	4d4d      	ldr	r5, [pc, #308]	; (800bb4c <start_pass+0x380>)
 800ba16:	e7d7      	b.n	800b9c8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_14x7;
 800ba18:	4d4d      	ldr	r5, [pc, #308]	; (800bb50 <start_pass+0x384>)
 800ba1a:	e7d5      	b.n	800b9c8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_16x8;
 800ba1c:	4d4d      	ldr	r5, [pc, #308]	; (800bb54 <start_pass+0x388>)
 800ba1e:	e7d3      	b.n	800b9c8 <start_pass+0x1fc>
      method_ptr = jpeg_idct_16x16;
 800ba20:	4d4d      	ldr	r5, [pc, #308]	; (800bb58 <start_pass+0x38c>)
 800ba22:	e7d1      	b.n	800b9c8 <start_pass+0x1fc>
	IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
 800ba24:	f8db 0054 	ldr.w	r0, [fp, #84]	; 0x54
	for (i = 0; i < DCTSIZE2; i++) {
 800ba28:	2200      	movs	r2, #0
 800ba2a:	494c      	ldr	r1, [pc, #304]	; (800bb5c <start_pass+0x390>)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 800ba2c:	f836 7012 	ldrh.w	r7, [r6, r2, lsl #1]
 800ba30:	f931 3b02 	ldrsh.w	r3, [r1], #2
 800ba34:	437b      	muls	r3, r7
 800ba36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba3a:	131b      	asrs	r3, r3, #12
	  ifmtbl[i] = (IFAST_MULT_TYPE)
 800ba3c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (i = 0; i < DCTSIZE2; i++) {
 800ba40:	3201      	adds	r2, #1
 800ba42:	2a40      	cmp	r2, #64	; 0x40
 800ba44:	d1f2      	bne.n	800ba2c <start_pass+0x260>
 800ba46:	e7b1      	b.n	800b9ac <start_pass+0x1e0>
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800ba48:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
 800ba4c:	3610      	adds	r6, #16
	i = 0;
 800ba4e:	2700      	movs	r7, #0
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800ba50:	9305      	str	r3, [sp, #20]
 800ba52:	4b43      	ldr	r3, [pc, #268]	; (800bb60 <start_pass+0x394>)
 800ba54:	9304      	str	r3, [sp, #16]
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800ba56:	9b04      	ldr	r3, [sp, #16]
 800ba58:	ecb3 7b02 	vldmia	r3!, {d7}
 800ba5c:	9304      	str	r3, [sp, #16]
 800ba5e:	f1a6 0310 	sub.w	r3, r6, #16
 800ba62:	eeb0 8a47 	vmov.f32	s16, s14
 800ba66:	eef0 8a67 	vmov.f32	s17, s15
 800ba6a:	9301      	str	r3, [sp, #4]
 800ba6c:	9b05      	ldr	r3, [sp, #20]
 800ba6e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800ba72:	9302      	str	r3, [sp, #8]
 800ba74:	4b3a      	ldr	r3, [pc, #232]	; (800bb60 <start_pass+0x394>)
 800ba76:	9303      	str	r3, [sp, #12]
 800ba78:	9b03      	ldr	r3, [sp, #12]
 800ba7a:	ecb3 7b02 	vldmia	r3!, {d7}
 800ba7e:	9303      	str	r3, [sp, #12]
 800ba80:	eeb0 9a47 	vmov.f32	s18, s14
 800ba84:	eef0 9a67 	vmov.f32	s19, s15
	      ((double) qtbl->quantval[i] *
 800ba88:	9b01      	ldr	r3, [sp, #4]
 800ba8a:	f833 0b02 	ldrh.w	r0, [r3], #2
 800ba8e:	9301      	str	r3, [sp, #4]
 800ba90:	f7f4 fd50 	bl	8000534 <__aeabi_ui2d>
 800ba94:	ec53 2b18 	vmov	r2, r3, d8
 800ba98:	f7f4 fdc6 	bl	8000628 <__aeabi_dmul>
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 800ba9c:	ec53 2b19 	vmov	r2, r3, d9
 800baa0:	f7f4 fdc2 	bl	8000628 <__aeabi_dmul>
 800baa4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800baa8:	2200      	movs	r2, #0
 800baaa:	f7f4 fdbd 	bl	8000628 <__aeabi_dmul>
	    fmtbl[i] = (FLOAT_MULT_TYPE)
 800baae:	f7f4 ffcd 	bl	8000a4c <__aeabi_d2f>
 800bab2:	9b02      	ldr	r3, [sp, #8]
 800bab4:	f843 0b04 	str.w	r0, [r3], #4
 800bab8:	9302      	str	r3, [sp, #8]
	  for (col = 0; col < DCTSIZE; col++) {
 800baba:	9b01      	ldr	r3, [sp, #4]
 800babc:	42b3      	cmp	r3, r6
 800babe:	d1db      	bne.n	800ba78 <start_pass+0x2ac>
 800bac0:	3708      	adds	r7, #8
	for (row = 0; row < DCTSIZE; row++) {
 800bac2:	3610      	adds	r6, #16
 800bac4:	2f40      	cmp	r7, #64	; 0x40
 800bac6:	d1c6      	bne.n	800ba56 <start_pass+0x28a>
 800bac8:	e770      	b.n	800b9ac <start_pass+0x1e0>
      ERREXIT(cinfo, JERR_NOT_COMPILED);
 800baca:	f8da 3000 	ldr.w	r3, [sl]
 800bace:	2231      	movs	r2, #49	; 0x31
 800bad0:	4650      	mov	r0, sl
 800bad2:	615a      	str	r2, [r3, #20]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4798      	blx	r3
      break;
 800bad8:	e768      	b.n	800b9ac <start_pass+0x1e0>
 800bada:	bf00      	nop
 800badc:	08010c8d 	.word	0x08010c8d
 800bae0:	08010b99 	.word	0x08010b99
 800bae4:	08014b75 	.word	0x08014b75
 800bae8:	08010739 	.word	0x08010739
 800baec:	08013aad 	.word	0x08013aad
 800baf0:	08013851 	.word	0x08013851
 800baf4:	0801170d 	.word	0x0801170d
 800baf8:	080123b9 	.word	0x080123b9
 800bafc:	0802d9d8 	.word	0x0802d9d8
 800bb00:	08014305 	.word	0x08014305
 800bb04:	08010a6d 	.word	0x08010a6d
 800bb08:	08014ee5 	.word	0x08014ee5
 800bb0c:	08013ec5 	.word	0x08013ec5
 800bb10:	08010d01 	.word	0x08010d01
 800bb14:	08014fb9 	.word	0x08014fb9
 800bb18:	08014d99 	.word	0x08014d99
 800bb1c:	08013df5 	.word	0x08013df5
 800bb20:	08013c99 	.word	0x08013c99
 800bb24:	080108e9 	.word	0x080108e9
 800bb28:	08014939 	.word	0x08014939
 800bb2c:	08014679 	.word	0x08014679
 800bb30:	08010499 	.word	0x08010499
 800bb34:	0801358d 	.word	0x0801358d
 800bb38:	08010d25 	.word	0x08010d25
 800bb3c:	08013efd 	.word	0x08013efd
 800bb40:	08011001 	.word	0x08011001
 800bb44:	08011321 	.word	0x08011321
 800bb48:	08011f75 	.word	0x08011f75
 800bb4c:	08011ab5 	.word	0x08011ab5
 800bb50:	0801320d 	.word	0x0801320d
 800bb54:	08012dad 	.word	0x08012dad
 800bb58:	0801284d 	.word	0x0801284d
 800bb5c:	0802da28 	.word	0x0802da28
 800bb60:	0802d9e8 	.word	0x0802d9e8

0800bb64 <jinit_inverse_dct>:
 * Initialize IDCT manager.
 */

GLOBAL(void)
jinit_inverse_dct (j_decompress_ptr cinfo)
{
 800bb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bb66:	6843      	ldr	r3, [r0, #4]
{
 800bb68:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bb6a:	2254      	movs	r2, #84	; 0x54
 800bb6c:	2101      	movs	r1, #1
 800bb6e:	681b      	ldr	r3, [r3, #0]
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
  idct->pub.start_pass = start_pass;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bb70:	2600      	movs	r6, #0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bb72:	4798      	blx	r3
  idct->pub.start_pass = start_pass;
 800bb74:	4b0f      	ldr	r3, [pc, #60]	; (800bbb4 <jinit_inverse_dct+0x50>)
 800bb76:	4604      	mov	r4, r0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bb78:	f8d5 70d8 	ldr.w	r7, [r5, #216]	; 0xd8
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
 800bb7c:	f8c5 01d4 	str.w	r0, [r5, #468]	; 0x1d4
  idct->pub.start_pass = start_pass;
 800bb80:	f844 3b2c 	str.w	r3, [r4], #44
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800bb84:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb86:	42b3      	cmp	r3, r6
 800bb88:	dc00      	bgt.n	800bb8c <jinit_inverse_dct+0x28>
				  SIZEOF(multiplier_table));
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
    /* Mark multiplier table not yet set up for any method */
    idct->cur_method[ci] = -1;
  }
}
 800bb8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bb8c:	686b      	ldr	r3, [r5, #4]
 800bb8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bb92:	2101      	movs	r1, #1
 800bb94:	4628      	mov	r0, r5
 800bb96:	681b      	ldr	r3, [r3, #0]
       ci++, compptr++) {
 800bb98:	3601      	adds	r6, #1
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800bb9a:	4798      	blx	r3
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800bb9c:	f44f 7280 	mov.w	r2, #256	; 0x100
    compptr->dct_table =
 800bba0:	6578      	str	r0, [r7, #84]	; 0x54
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 800bba2:	2100      	movs	r1, #0
 800bba4:	f01e f9e4 	bl	8029f70 <memset>
    idct->cur_method[ci] = -1;
 800bba8:	f04f 33ff 	mov.w	r3, #4294967295
       ci++, compptr++) {
 800bbac:	3758      	adds	r7, #88	; 0x58
    idct->cur_method[ci] = -1;
 800bbae:	f844 3b04 	str.w	r3, [r4], #4
       ci++, compptr++) {
 800bbb2:	e7e7      	b.n	800bb84 <jinit_inverse_dct+0x20>
 800bbb4:	0800b7cd 	.word	0x0800b7cd

0800bbb8 <jpeg_fill_bit_buffer>:
LOCAL(boolean)
jpeg_fill_bit_buffer (bitread_working_state * state,
		      register bit_buf_type get_buffer, register int bits_left,
		      int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
 800bbb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
  register size_t bytes_in_buffer = state->bytes_in_buffer;
  j_decompress_ptr cinfo = state->cinfo;
 800bbbc:	6905      	ldr	r5, [r0, #16]
{
 800bbbe:	4607      	mov	r7, r0
 800bbc0:	4688      	mov	r8, r1
 800bbc2:	4616      	mov	r6, r2

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */
  /* We fail to do so only if we hit a marker or are forced to suspend. */

  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800bbc4:	f8d5 b1b4 	ldr.w	fp, [r5, #436]	; 0x1b4
{
 800bbc8:	4699      	mov	r9, r3
  register size_t bytes_in_buffer = state->bytes_in_buffer;
 800bbca:	e9d0 4a00 	ldrd	r4, sl, [r0]
  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 800bbce:	f1bb 0f00 	cmp.w	fp, #0
 800bbd2:	d042      	beq.n	800bc5a <jpeg_fill_bit_buffer+0xa2>
  no_more_bytes:
    /* We get here if we've read the marker that terminates the compressed
     * data segment.  There should be enough bits in the buffer register
     * to satisfy the request; if so, no problem.
     */
    if (nbits > bits_left) {
 800bbd4:	454e      	cmp	r6, r9
 800bbd6:	da42      	bge.n	800bc5e <jpeg_fill_bit_buffer+0xa6>
      /* Uh-oh.  Report corrupted data to user and stuff zeroes into
       * the data stream, so that we can produce some kind of image.
       * We use a nonvolatile flag to ensure that only one warning message
       * appears per data segment.
       */
      if (! ((huff_entropy_ptr) cinfo->entropy)->insufficient_data) {
 800bbd8:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800bbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbde:	b95b      	cbnz	r3, 800bbf8 <jpeg_fill_bit_buffer+0x40>
	WARNMS(cinfo, JWRN_HIT_MARKER);
 800bbe0:	682b      	ldr	r3, [r5, #0]
 800bbe2:	2278      	movs	r2, #120	; 0x78
 800bbe4:	f04f 31ff 	mov.w	r1, #4294967295
 800bbe8:	4628      	mov	r0, r5
 800bbea:	615a      	str	r2, [r3, #20]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	4798      	blx	r3
	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 800bbf0:	f8d5 31d0 	ldr.w	r3, [r5, #464]	; 0x1d0
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	625a      	str	r2, [r3, #36]	; 0x24
      }
      /* Fill the buffer with zero bits */
      get_buffer <<= MIN_GET_BITS - bits_left;
 800bbf8:	f1c6 0619 	rsb	r6, r6, #25
 800bbfc:	fa08 f806 	lsl.w	r8, r8, r6
      bits_left = MIN_GET_BITS;
 800bc00:	2619      	movs	r6, #25
 800bc02:	e02c      	b.n	800bc5e <jpeg_fill_bit_buffer+0xa6>
      if (bytes_in_buffer == 0) {
 800bc04:	f1ba 0f00 	cmp.w	sl, #0
 800bc08:	d107      	bne.n	800bc1a <jpeg_fill_bit_buffer+0x62>
	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800bc0a:	69ab      	ldr	r3, [r5, #24]
 800bc0c:	4628      	mov	r0, r5
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	4798      	blx	r3
 800bc12:	b350      	cbz	r0, 800bc6a <jpeg_fill_bit_buffer+0xb2>
	next_input_byte = cinfo->src->next_input_byte;
 800bc14:	69ab      	ldr	r3, [r5, #24]
	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800bc16:	e9d3 4a00 	ldrd	r4, sl, [r3]
      c = GETJOCTET(*next_input_byte++);
 800bc1a:	f814 2b01 	ldrb.w	r2, [r4], #1
      bytes_in_buffer--;
 800bc1e:	f10a 3aff 	add.w	sl, sl, #4294967295
      if (c == 0xFF) {
 800bc22:	2aff      	cmp	r2, #255	; 0xff
 800bc24:	d116      	bne.n	800bc54 <jpeg_fill_bit_buffer+0x9c>
	  if (bytes_in_buffer == 0) {
 800bc26:	f1ba 0f00 	cmp.w	sl, #0
 800bc2a:	d109      	bne.n	800bc40 <jpeg_fill_bit_buffer+0x88>
	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 800bc2c:	69ab      	ldr	r3, [r5, #24]
 800bc2e:	4628      	mov	r0, r5
 800bc30:	9201      	str	r2, [sp, #4]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	4798      	blx	r3
 800bc36:	b1c0      	cbz	r0, 800bc6a <jpeg_fill_bit_buffer+0xb2>
	    next_input_byte = cinfo->src->next_input_byte;
 800bc38:	69ab      	ldr	r3, [r5, #24]
 800bc3a:	9a01      	ldr	r2, [sp, #4]
	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800bc3c:	e9d3 4a00 	ldrd	r4, sl, [r3]
	  c = GETJOCTET(*next_input_byte++);
 800bc40:	f814 3b01 	ldrb.w	r3, [r4], #1
	  bytes_in_buffer--;
 800bc44:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (c == 0xFF);
 800bc48:	2bff      	cmp	r3, #255	; 0xff
 800bc4a:	d0ec      	beq.n	800bc26 <jpeg_fill_bit_buffer+0x6e>
	if (c == 0) {
 800bc4c:	b113      	cbz	r3, 800bc54 <jpeg_fill_bit_buffer+0x9c>
	  cinfo->unread_marker = c;
 800bc4e:	f8c5 31b4 	str.w	r3, [r5, #436]	; 0x1b4
	  goto no_more_bytes;
 800bc52:	e7bf      	b.n	800bbd4 <jpeg_fill_bit_buffer+0x1c>
      get_buffer = (get_buffer << 8) | c;
 800bc54:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
      bits_left += 8;
 800bc58:	3608      	adds	r6, #8
    while (bits_left < MIN_GET_BITS) {
 800bc5a:	2e18      	cmp	r6, #24
 800bc5c:	ddd2      	ble.n	800bc04 <jpeg_fill_bit_buffer+0x4c>
  state->next_input_byte = next_input_byte;
  state->bytes_in_buffer = bytes_in_buffer;
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  return TRUE;
 800bc5e:	f04f 0b01 	mov.w	fp, #1
  state->bytes_in_buffer = bytes_in_buffer;
 800bc62:	e9c7 4a00 	strd	r4, sl, [r7]
  state->bits_left = bits_left;
 800bc66:	e9c7 8602 	strd	r8, r6, [r7, #8]
}
 800bc6a:	4658      	mov	r0, fp
 800bc6c:	b003      	add	sp, #12
 800bc6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800bc74 <jpeg_huff_decode>:

LOCAL(int)
jpeg_huff_decode (bitread_working_state * state,
		  register bit_buf_type get_buffer, register int bits_left,
		  d_derived_tbl * htbl, int min_bits)
{
 800bc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc76:	9d06      	ldr	r5, [sp, #24]
 800bc78:	4606      	mov	r6, r0
 800bc7a:	468c      	mov	ip, r1
 800bc7c:	4614      	mov	r4, r2
  register INT32 code;

  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  CHECK_BIT_BUFFER(*state, l, return -1);
 800bc7e:	4295      	cmp	r5, r2
{
 800bc80:	461f      	mov	r7, r3
  CHECK_BIT_BUFFER(*state, l, return -1);
 800bc82:	dd08      	ble.n	800bc96 <jpeg_huff_decode+0x22>
 800bc84:	462b      	mov	r3, r5
 800bc86:	f7ff ff97 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800bc8a:	b910      	cbnz	r0, 800bc92 <jpeg_huff_decode+0x1e>
 800bc8c:	f04f 30ff 	mov.w	r0, #4294967295
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
    return 0;			/* fake a zero as the safest result */
  }

  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
}
 800bc90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  CHECK_BIT_BUFFER(*state, l, return -1);
 800bc92:	e9d6 c402 	ldrd	ip, r4, [r6, #8]
  code = GET_BITS(l);
 800bc96:	1b62      	subs	r2, r4, r5
 800bc98:	4b1a      	ldr	r3, [pc, #104]	; (800bd04 <jpeg_huff_decode+0x90>)
 800bc9a:	fa4c f002 	asr.w	r0, ip, r2
 800bc9e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800bca2:	4018      	ands	r0, r3
  while (code > htbl->maxcode[l]) {
 800bca4:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800bca8:	4283      	cmp	r3, r0
 800bcaa:	db0d      	blt.n	800bcc8 <jpeg_huff_decode+0x54>
  if (l > 16) {
 800bcac:	2d10      	cmp	r5, #16
  state->bits_left = bits_left;
 800bcae:	e9c6 c202 	strd	ip, r2, [r6, #8]
  if (l > 16) {
 800bcb2:	dd1e      	ble.n	800bcf2 <jpeg_huff_decode+0x7e>
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 800bcb4:	6930      	ldr	r0, [r6, #16]
 800bcb6:	2279      	movs	r2, #121	; 0x79
 800bcb8:	f04f 31ff 	mov.w	r1, #4294967295
 800bcbc:	6803      	ldr	r3, [r0, #0]
 800bcbe:	615a      	str	r2, [r3, #20]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	4798      	blx	r3
    return 0;			/* fake a zero as the safest result */
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	e7e3      	b.n	800bc90 <jpeg_huff_decode+0x1c>
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800bcc8:	2a00      	cmp	r2, #0
    code <<= 1;
 800bcca:	ea4f 0440 	mov.w	r4, r0, lsl #1
    CHECK_BIT_BUFFER(*state, 1, return -1);
 800bcce:	dc08      	bgt.n	800bce2 <jpeg_huff_decode+0x6e>
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	4661      	mov	r1, ip
 800bcd4:	4630      	mov	r0, r6
 800bcd6:	f7ff ff6f 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	d0d6      	beq.n	800bc8c <jpeg_huff_decode+0x18>
 800bcde:	e9d6 c202 	ldrd	ip, r2, [r6, #8]
    code |= GET_BITS(1);
 800bce2:	3a01      	subs	r2, #1
    l++;
 800bce4:	3501      	adds	r5, #1
    code |= GET_BITS(1);
 800bce6:	fa4c f002 	asr.w	r0, ip, r2
 800bcea:	f000 0001 	and.w	r0, r0, #1
 800bcee:	4320      	orrs	r0, r4
    l++;
 800bcf0:	e7d8      	b.n	800bca4 <jpeg_huff_decode+0x30>
  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
 800bcf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bcf6:	3512      	adds	r5, #18
 800bcf8:	4418      	add	r0, r3
 800bcfa:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
 800bcfe:	4410      	add	r0, r2
 800bd00:	7c40      	ldrb	r0, [r0, #17]
 800bd02:	e7c5      	b.n	800bc90 <jpeg_huff_decode+0x1c>
 800bd04:	0802daa8 	.word	0x0802daa8

0800bd08 <process_restart>:
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
 800bd08:	b570      	push	{r4, r5, r6, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800bd0a:	e9d0 2673 	ldrd	r2, r6, [r0, #460]	; 0x1cc
  entropy->bitstate.bits_left = 0;
 800bd0e:	2500      	movs	r5, #0
{
 800bd10:	4604      	mov	r4, r0
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 800bd12:	68f3      	ldr	r3, [r6, #12]
 800bd14:	6991      	ldr	r1, [r2, #24]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	bfb8      	it	lt
 800bd1a:	3307      	addlt	r3, #7
 800bd1c:	eb01 03e3 	add.w	r3, r1, r3, asr #3
 800bd20:	6193      	str	r3, [r2, #24]

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800bd22:	6893      	ldr	r3, [r2, #8]
  entropy->bitstate.bits_left = 0;
 800bd24:	60f5      	str	r5, [r6, #12]
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 800bd26:	4798      	blx	r3
 800bd28:	b180      	cbz	r0, 800bd4c <process_restart+0x44>
    return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
 800bd2a:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
 800bd2e:	f106 0114 	add.w	r1, r6, #20
 800bd32:	462b      	mov	r3, r5
 800bd34:	462a      	mov	r2, r5
 800bd36:	4298      	cmp	r0, r3
 800bd38:	dc09      	bgt.n	800bd4e <process_restart+0x46>
    entropy->saved.last_dc_val[ci] = 0;
  /* Re-init EOB run count, too */
  entropy->saved.EOBRUN = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800bd3a:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
  entropy->saved.EOBRUN = 0;
 800bd3e:	6132      	str	r2, [r6, #16]
  entropy->restarts_to_go = cinfo->restart_interval;
 800bd40:	62b3      	str	r3, [r6, #40]	; 0x28
  /* Reset out-of-data flag, unless read_restart_marker left us smack up
   * against a marker.  In that case we will end up treating the next data
   * segment as empty, and we can avoid producing bogus output pixels by
   * leaving the flag set.
   */
  if (cinfo->unread_marker == 0)
 800bd42:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800bd46:	b903      	cbnz	r3, 800bd4a <process_restart+0x42>
    entropy->insufficient_data = FALSE;
 800bd48:	6273      	str	r3, [r6, #36]	; 0x24

  return TRUE;
 800bd4a:	2001      	movs	r0, #1
}
 800bd4c:	bd70      	pop	{r4, r5, r6, pc}
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
 800bd4e:	3301      	adds	r3, #1
    entropy->saved.last_dc_val[ci] = 0;
 800bd50:	f841 2b04 	str.w	r2, [r1], #4
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
 800bd54:	e7ef      	b.n	800bd36 <process_restart+0x2e>
	...

0800bd58 <decode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800bd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int Al = cinfo->Al;
 800bd5c:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
{   
 800bd60:	b091      	sub	sp, #68	; 0x44
 800bd62:	4605      	mov	r5, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800bd64:	f8d0 41d0 	ldr.w	r4, [r0, #464]	; 0x1d0
  int Al = cinfo->Al;
 800bd68:	9303      	str	r3, [sp, #12]
  savable_state state;
  d_derived_tbl * tbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800bd6a:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800bd6e:	9105      	str	r1, [sp, #20]
  if (cinfo->restart_interval) {
 800bd70:	b933      	cbnz	r3, 800bd80 <decode_mcu_DC_first+0x28>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800bd72:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bd74:	b17e      	cbz	r6, 800bd96 <decode_mcu_DC_first+0x3e>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800bd76:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  return TRUE;
 800bd78:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800bd7a:	3b01      	subs	r3, #1
 800bd7c:	62a3      	str	r3, [r4, #40]	; 0x28
  return TRUE;
 800bd7e:	e007      	b.n	800bd90 <decode_mcu_DC_first+0x38>
    if (entropy->restarts_to_go == 0)
 800bd80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d1f5      	bne.n	800bd72 <decode_mcu_DC_first+0x1a>
      if (! process_restart(cinfo))
 800bd86:	f7ff ffbf 	bl	800bd08 <process_restart>
 800bd8a:	2800      	cmp	r0, #0
 800bd8c:	d1f1      	bne.n	800bd72 <decode_mcu_DC_first+0x1a>
	return FALSE;
 800bd8e:	2000      	movs	r0, #0
}
 800bd90:	b011      	add	sp, #68	; 0x44
 800bd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bd96:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(state, entropy->saved);
 800bd98:	f104 0810 	add.w	r8, r4, #16
 800bd9c:	af0b      	add	r7, sp, #44	; 0x2c
 800bd9e:	f505 79b8 	add.w	r9, r5, #368	; 0x170
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	f104 0b10 	add.w	fp, r4, #16
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	9206      	str	r2, [sp, #24]
 800bdac:	9307      	str	r3, [sp, #28]
	r = GET_BITS(s);
 800bdae:	f8df a118 	ldr.w	sl, [pc, #280]	; 800bec8 <decode_mcu_DC_first+0x170>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bdb2:	950a      	str	r5, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800bdb4:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bdb8:	e9d4 ec02 	ldrd	lr, ip, [r4, #8]
    ASSIGN_STATE(state, entropy->saved);
 800bdbc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800bdbe:	f8d8 3000 	ldr.w	r3, [r8]
 800bdc2:	603b      	str	r3, [r7, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bdc4:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
 800bdc8:	42b3      	cmp	r3, r6
 800bdca:	dc0d      	bgt.n	800bde8 <decode_mcu_DC_first+0x90>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bdcc:	69ab      	ldr	r3, [r5, #24]
    ASSIGN_STATE(entropy->saved, state);
 800bdce:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bdd0:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800bdd2:	465d      	mov	r5, fp
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bdd4:	601a      	str	r2, [r3, #0]
 800bdd6:	9a07      	ldr	r2, [sp, #28]
 800bdd8:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800bdda:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800bddc:	e9c4 ec02 	strd	lr, ip, [r4, #8]
    ASSIGN_STATE(entropy->saved, state);
 800bde0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bde2:	6833      	ldr	r3, [r6, #0]
 800bde4:	602b      	str	r3, [r5, #0]
 800bde6:	e7c6      	b.n	800bd76 <decode_mcu_DC_first+0x1e>
      block = MCU_data[blkn];
 800bde8:	9b05      	ldr	r3, [sp, #20]
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800bdea:	f1bc 0f07 	cmp.w	ip, #7
      ci = cinfo->MCU_membership[blkn];
 800bdee:	f859 7b04 	ldr.w	r7, [r9], #4
      block = MCU_data[blkn];
 800bdf2:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 800bdf6:	9304      	str	r3, [sp, #16]
      compptr = cinfo->cur_comp_info[ci];
 800bdf8:	eb05 0387 	add.w	r3, r5, r7, lsl #2
      tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 800bdfc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800be00:	695b      	ldr	r3, [r3, #20]
 800be02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be06:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800be0a:	dc0c      	bgt.n	800be26 <decode_mcu_DC_first+0xce>
 800be0c:	2300      	movs	r3, #0
 800be0e:	4662      	mov	r2, ip
 800be10:	4671      	mov	r1, lr
 800be12:	a806      	add	r0, sp, #24
 800be14:	f7ff fed0 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800be18:	2800      	cmp	r0, #0
 800be1a:	d0b8      	beq.n	800bd8e <decode_mcu_DC_first+0x36>
 800be1c:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800be20:	f1bc 0f07 	cmp.w	ip, #7
 800be24:	dd3e      	ble.n	800bea4 <decode_mcu_DC_first+0x14c>
 800be26:	f1ac 0308 	sub.w	r3, ip, #8
 800be2a:	fa4e f303 	asr.w	r3, lr, r3
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800be34:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800be38:	2a00      	cmp	r2, #0
 800be3a:	d042      	beq.n	800bec2 <decode_mcu_DC_first+0x16a>
 800be3c:	4498      	add	r8, r3
 800be3e:	ebac 0c02 	sub.w	ip, ip, r2
 800be42:	f898 8490 	ldrb.w	r8, [r8, #1168]	; 0x490
      if (s) {
 800be46:	f1b8 0f00 	cmp.w	r8, #0
 800be4a:	d01b      	beq.n	800be84 <decode_mcu_DC_first+0x12c>
	CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800be4c:	45e0      	cmp	r8, ip
 800be4e:	dd09      	ble.n	800be64 <decode_mcu_DC_first+0x10c>
 800be50:	4643      	mov	r3, r8
 800be52:	4662      	mov	r2, ip
 800be54:	4671      	mov	r1, lr
 800be56:	a806      	add	r0, sp, #24
 800be58:	f7ff feae 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d096      	beq.n	800bd8e <decode_mcu_DC_first+0x36>
 800be60:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	r = GET_BITS(s);
 800be64:	ebac 0c08 	sub.w	ip, ip, r8
 800be68:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
	s = HUFF_EXTEND(r, s);
 800be6c:	f108 38ff 	add.w	r8, r8, #4294967295
	r = GET_BITS(s);
 800be70:	fa4e f20c 	asr.w	r2, lr, ip
	s = HUFF_EXTEND(r, s);
 800be74:	f85a 3028 	ldr.w	r3, [sl, r8, lsl #2]
	r = GET_BITS(s);
 800be78:	400a      	ands	r2, r1
	s = HUFF_EXTEND(r, s);
 800be7a:	4293      	cmp	r3, r2
 800be7c:	bfac      	ite	ge
 800be7e:	eba2 0801 	subge.w	r8, r2, r1
 800be82:	4690      	movlt	r8, r2
      s += state.last_dc_val[ci];
 800be84:	ab10      	add	r3, sp, #64	; 0x40
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800be86:	3601      	adds	r6, #1
      s += state.last_dc_val[ci];
 800be88:	eb03 0787 	add.w	r7, r3, r7, lsl #2
      (*block)[0] = (JCOEF) (s << Al);
 800be8c:	9b03      	ldr	r3, [sp, #12]
      s += state.last_dc_val[ci];
 800be8e:	f857 0c10 	ldr.w	r0, [r7, #-16]
 800be92:	4440      	add	r0, r8
      (*block)[0] = (JCOEF) (s << Al);
 800be94:	fa00 f803 	lsl.w	r8, r0, r3
 800be98:	9b04      	ldr	r3, [sp, #16]
      state.last_dc_val[ci] = s;
 800be9a:	f847 0c10 	str.w	r0, [r7, #-16]
      (*block)[0] = (JCOEF) (s << Al);
 800be9e:	f8a3 8000 	strh.w	r8, [r3]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800bea2:	e78f      	b.n	800bdc4 <decode_mcu_DC_first+0x6c>
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 800bea4:	2301      	movs	r3, #1
 800bea6:	9300      	str	r3, [sp, #0]
 800bea8:	4662      	mov	r2, ip
 800beaa:	4643      	mov	r3, r8
 800beac:	4671      	mov	r1, lr
 800beae:	a806      	add	r0, sp, #24
 800beb0:	f7ff fee0 	bl	800bc74 <jpeg_huff_decode>
 800beb4:	f1b0 0800 	subs.w	r8, r0, #0
 800beb8:	f6ff af69 	blt.w	800bd8e <decode_mcu_DC_first+0x36>
 800bebc:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800bec0:	e7c1      	b.n	800be46 <decode_mcu_DC_first+0xee>
 800bec2:	2309      	movs	r3, #9
 800bec4:	e7ef      	b.n	800bea6 <decode_mcu_DC_first+0x14e>
 800bec6:	bf00      	nop
 800bec8:	0802daa8 	.word	0x0802daa8

0800becc <decode_mcu_AC_first>:
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800becc:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800bed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed4:	4607      	mov	r7, r0
 800bed6:	b08d      	sub	sp, #52	; 0x34
 800bed8:	460c      	mov	r4, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800beda:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800bede:	b933      	cbnz	r3, 800beee <decode_mcu_AC_first+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800bee0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bee2:	b17b      	cbz	r3, 800bf04 <decode_mcu_AC_first+0x38>
    /* Completed MCU, so update state */
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800bee4:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800bee6:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800bee8:	3b01      	subs	r3, #1
 800beea:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800beec:	e007      	b.n	800befe <decode_mcu_AC_first+0x32>
    if (entropy->restarts_to_go == 0)
 800beee:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d1f5      	bne.n	800bee0 <decode_mcu_AC_first+0x14>
      if (! process_restart(cinfo))
 800bef4:	f7ff ff08 	bl	800bd08 <process_restart>
 800bef8:	2800      	cmp	r0, #0
 800befa:	d1f1      	bne.n	800bee0 <decode_mcu_AC_first+0x14>
	return FALSE;
 800befc:	2000      	movs	r0, #0
}
 800befe:	b00d      	add	sp, #52	; 0x34
 800bf00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
 800bf04:	692e      	ldr	r6, [r5, #16]
    if (EOBRUN > 0)		/* if it's a band of zeroes... */
 800bf06:	b116      	cbz	r6, 800bf0e <decode_mcu_AC_first+0x42>
      EOBRUN--;			/* ...process it now (we do nothing) */
 800bf08:	3e01      	subs	r6, #1
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
 800bf0a:	612e      	str	r6, [r5, #16]
 800bf0c:	e7ea      	b.n	800bee4 <decode_mcu_AC_first+0x18>
    Se = cinfo->Se;
 800bf0e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
    natural_order = cinfo->natural_order;
 800bf12:	f8d7 b1ac 	ldr.w	fp, [r7, #428]	; 0x1ac
    Se = cinfo->Se;
 800bf16:	9303      	str	r3, [sp, #12]
    Al = cinfo->Al;
 800bf18:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
      tbl = entropy->ac_derived_tbl;
 800bf1c:	f8d5 903c 	ldr.w	r9, [r5, #60]	; 0x3c
    Al = cinfo->Al;
 800bf20:	9304      	str	r3, [sp, #16]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bf22:	69bb      	ldr	r3, [r7, #24]
      for (k = cinfo->Ss; k <= Se; k++) {
 800bf24:	f8d7 8198 	ldr.w	r8, [r7, #408]	; 0x198
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	9207      	str	r2, [sp, #28]
 800bf2e:	9308      	str	r3, [sp, #32]
	  r = GET_BITS(s);
 800bf30:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 800c030 <decode_mcu_AC_first+0x164>
      block = MCU_data[0];
 800bf34:	6823      	ldr	r3, [r4, #0]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bf36:	970b      	str	r7, [sp, #44]	; 0x2c
      block = MCU_data[0];
 800bf38:	9305      	str	r3, [sp, #20]
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800bf3a:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
      for (k = cinfo->Ss; k <= Se; k++) {
 800bf3e:	9b03      	ldr	r3, [sp, #12]
 800bf40:	4598      	cmp	r8, r3
 800bf42:	dc6c      	bgt.n	800c01e <decode_mcu_AC_first+0x152>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800bf44:	2a07      	cmp	r2, #7
 800bf46:	dc09      	bgt.n	800bf5c <decode_mcu_AC_first+0x90>
 800bf48:	2300      	movs	r3, #0
 800bf4a:	a807      	add	r0, sp, #28
 800bf4c:	f7ff fe34 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	d0d3      	beq.n	800befc <decode_mcu_AC_first+0x30>
 800bf54:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800bf58:	2a07      	cmp	r2, #7
 800bf5a:	dd36      	ble.n	800bfca <decode_mcu_AC_first+0xfe>
 800bf5c:	f1a2 0308 	sub.w	r3, r2, #8
 800bf60:	fa41 f303 	asr.w	r3, r1, r3
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800bf6a:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800bf6e:	b3b8      	cbz	r0, 800bfe0 <decode_mcu_AC_first+0x114>
 800bf70:	444b      	add	r3, r9
 800bf72:	1a12      	subs	r2, r2, r0
 800bf74:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800bf78:	f010 040f 	ands.w	r4, r0, #15
	r = s >> 4;
 800bf7c:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800bf80:	d030      	beq.n	800bfe4 <decode_mcu_AC_first+0x118>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bf82:	42a2      	cmp	r2, r4
	  k += r;
 800bf84:	4498      	add	r8, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800bf86:	da07      	bge.n	800bf98 <decode_mcu_AC_first+0xcc>
 800bf88:	4623      	mov	r3, r4
 800bf8a:	a807      	add	r0, sp, #28
 800bf8c:	f7ff fe14 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800bf90:	2800      	cmp	r0, #0
 800bf92:	d0b3      	beq.n	800befc <decode_mcu_AC_first+0x30>
 800bf94:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	  r = GET_BITS(s);
 800bf98:	1b12      	subs	r2, r2, r4
 800bf9a:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800bf9e:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800bfa0:	fa41 fc02 	asr.w	ip, r1, r2
	  s = HUFF_EXTEND(r, s);
 800bfa4:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800bfa8:	ea0c 0c03 	and.w	ip, ip, r3
	  s = HUFF_EXTEND(r, s);
 800bfac:	4560      	cmp	r0, ip
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800bfae:	9804      	ldr	r0, [sp, #16]
	  s = HUFF_EXTEND(r, s);
 800bfb0:	bfa8      	it	ge
 800bfb2:	ebac 0c03 	subge.w	ip, ip, r3
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 800bfb6:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 800bfba:	fa0c fc00 	lsl.w	ip, ip, r0
 800bfbe:	9805      	ldr	r0, [sp, #20]
 800bfc0:	f820 c013 	strh.w	ip, [r0, r3, lsl #1]
      for (k = cinfo->Ss; k <= Se; k++) {
 800bfc4:	f108 0801 	add.w	r8, r8, #1
 800bfc8:	e7b9      	b.n	800bf3e <decode_mcu_AC_first+0x72>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 800bfca:	2301      	movs	r3, #1
 800bfcc:	9300      	str	r3, [sp, #0]
 800bfce:	a807      	add	r0, sp, #28
 800bfd0:	464b      	mov	r3, r9
 800bfd2:	f7ff fe4f 	bl	800bc74 <jpeg_huff_decode>
 800bfd6:	2800      	cmp	r0, #0
 800bfd8:	db90      	blt.n	800befc <decode_mcu_AC_first+0x30>
 800bfda:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
 800bfde:	e7cb      	b.n	800bf78 <decode_mcu_AC_first+0xac>
 800bfe0:	2309      	movs	r3, #9
 800bfe2:	e7f3      	b.n	800bfcc <decode_mcu_AC_first+0x100>
	  if (r == 15) {	/* ZRL */
 800bfe4:	2b0f      	cmp	r3, #15
 800bfe6:	d102      	bne.n	800bfee <decode_mcu_AC_first+0x122>
	    k += 15;		/* skip 15 zeroes in band */
 800bfe8:	f108 080f 	add.w	r8, r8, #15
 800bfec:	e7ea      	b.n	800bfc4 <decode_mcu_AC_first+0xf8>
	    EOBRUN = 1 << r;
 800bfee:	2601      	movs	r6, #1
 800bff0:	409e      	lsls	r6, r3
	    if (r) {		/* EOBr, r > 0 */
 800bff2:	b19b      	cbz	r3, 800c01c <decode_mcu_AC_first+0x150>
	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 800bff4:	429a      	cmp	r2, r3
 800bff6:	da09      	bge.n	800c00c <decode_mcu_AC_first+0x140>
 800bff8:	a807      	add	r0, sp, #28
 800bffa:	9303      	str	r3, [sp, #12]
 800bffc:	f7ff fddc 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800c000:	2800      	cmp	r0, #0
 800c002:	f43f af7b 	beq.w	800befc <decode_mcu_AC_first+0x30>
 800c006:	9b03      	ldr	r3, [sp, #12]
 800c008:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	; 0x24
	      r = GET_BITS(r);
 800c00c:	1ad2      	subs	r2, r2, r3
 800c00e:	4808      	ldr	r0, [pc, #32]	; (800c030 <decode_mcu_AC_first+0x164>)
 800c010:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c014:	fa41 f302 	asr.w	r3, r1, r2
 800c018:	4003      	ands	r3, r0
	      EOBRUN += r;
 800c01a:	441e      	add	r6, r3
	    EOBRUN--;		/* this band is processed at this moment */
 800c01c:	3e01      	subs	r6, #1
      BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	9807      	ldr	r0, [sp, #28]
 800c022:	6018      	str	r0, [r3, #0]
 800c024:	9808      	ldr	r0, [sp, #32]
 800c026:	6058      	str	r0, [r3, #4]
 800c028:	e9c5 1202 	strd	r1, r2, [r5, #8]
 800c02c:	e76d      	b.n	800bf0a <decode_mcu_AC_first+0x3e>
 800c02e:	bf00      	nop
 800c030:	0802daa8 	.word	0x0802daa8

0800c034 <decode_mcu_DC_refine>:
 * is not very clear on the point.
 */

METHODDEF(boolean)
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 800c034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c038:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800c03c:	2701      	movs	r7, #1
{   
 800c03e:	b087      	sub	sp, #28
 800c040:	4604      	mov	r4, r0
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c042:	409f      	lsls	r7, r3
  int blkn;
  JBLOCKROW block;
  BITREAD_STATE_VARS;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800c044:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800c048:	4688      	mov	r8, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c04a:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800c04e:	b9c3      	cbnz	r3, 800c082 <decode_mcu_DC_refine+0x4e>
  /* Not worth the cycles to check insufficient_data here,
   * since we will not change the data anyway if we read zeroes.
   */

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c050:	69a3      	ldr	r3, [r4, #24]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c052:	2600      	movs	r6, #0
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c054:	9405      	str	r4, [sp, #20]
 800c056:	681a      	ldr	r2, [r3, #0]
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	9201      	str	r2, [sp, #4]
 800c05c:	9302      	str	r3, [sp, #8]
 800c05e:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c062:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800c066:	42b3      	cmp	r3, r6
 800c068:	dc16      	bgt.n	800c098 <decode_mcu_DC_refine+0x64>
      (*block)[0] |= p1;
    /* Note: since we use |=, repeating the assignment later is safe */
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c06a:	69a3      	ldr	r3, [r4, #24]
 800c06c:	9801      	ldr	r0, [sp, #4]
 800c06e:	6018      	str	r0, [r3, #0]
 800c070:	9802      	ldr	r0, [sp, #8]
 800c072:	6058      	str	r0, [r3, #4]

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
 800c074:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800c076:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c078:	3b01      	subs	r3, #1
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c07a:	e9c5 1202 	strd	r1, r2, [r5, #8]
  entropy->restarts_to_go--;
 800c07e:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800c080:	e007      	b.n	800c092 <decode_mcu_DC_refine+0x5e>
    if (entropy->restarts_to_go == 0)
 800c082:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c084:	2b00      	cmp	r3, #0
 800c086:	d1e3      	bne.n	800c050 <decode_mcu_DC_refine+0x1c>
      if (! process_restart(cinfo))
 800c088:	f7ff fe3e 	bl	800bd08 <process_restart>
 800c08c:	2800      	cmp	r0, #0
 800c08e:	d1df      	bne.n	800c050 <decode_mcu_DC_refine+0x1c>
	return FALSE;
 800c090:	2000      	movs	r0, #0
}
 800c092:	b007      	add	sp, #28
 800c094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800c098:	2a00      	cmp	r2, #0
    block = MCU_data[blkn];
 800c09a:	f858 9026 	ldr.w	r9, [r8, r6, lsl #2]
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 800c09e:	dc07      	bgt.n	800c0b0 <decode_mcu_DC_refine+0x7c>
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	a801      	add	r0, sp, #4
 800c0a4:	f7ff fd88 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	d0f1      	beq.n	800c090 <decode_mcu_DC_refine+0x5c>
 800c0ac:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    if (GET_BITS(1))
 800c0b0:	3a01      	subs	r2, #1
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c0b2:	3601      	adds	r6, #1
    if (GET_BITS(1))
 800c0b4:	fa41 f302 	asr.w	r3, r1, r2
 800c0b8:	07db      	lsls	r3, r3, #31
      (*block)[0] |= p1;
 800c0ba:	bf42      	ittt	mi
 800c0bc:	f8b9 3000 	ldrhmi.w	r3, [r9]
 800c0c0:	433b      	orrmi	r3, r7
 800c0c2:	f8a9 3000 	strhmi.w	r3, [r9]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c0c6:	e7cc      	b.n	800c062 <decode_mcu_DC_refine+0x2e>

0800c0c8 <decode_mcu_AC_refine>:
  d_derived_tbl * tbl;
  int num_newnz;
  int newnz_pos[DCTSIZE2];

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800c0c8:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{   
 800c0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d0:	4606      	mov	r6, r0
 800c0d2:	b0d1      	sub	sp, #324	; 0x144
 800c0d4:	460f      	mov	r7, r1
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c0d6:	f8d0 81d0 	ldr.w	r8, [r0, #464]	; 0x1d0
  if (cinfo->restart_interval) {
 800c0da:	b95b      	cbnz	r3, 800c0f4 <decode_mcu_AC_refine+0x2c>
	return FALSE;
  }

  /* If we've run out of data, don't modify the MCU.
   */
  if (! entropy->insufficient_data) {
 800c0dc:	f8d8 b024 	ldr.w	fp, [r8, #36]	; 0x24
 800c0e0:	f1bb 0f00 	cmp.w	fp, #0
 800c0e4:	d012      	beq.n	800c10c <decode_mcu_AC_refine+0x44>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800c0e6:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28

  return TRUE;
 800c0ea:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800c0ec:	3b01      	subs	r3, #1
 800c0ee:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  return TRUE;
 800c0f2:	e008      	b.n	800c106 <decode_mcu_AC_refine+0x3e>
    if (entropy->restarts_to_go == 0)
 800c0f4:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1ef      	bne.n	800c0dc <decode_mcu_AC_refine+0x14>
      if (! process_restart(cinfo))
 800c0fc:	f7ff fe04 	bl	800bd08 <process_restart>
 800c100:	2800      	cmp	r0, #0
 800c102:	d1eb      	bne.n	800c0dc <decode_mcu_AC_refine+0x14>
	return FALSE;
 800c104:	2000      	movs	r0, #0
  /* Re-zero any output coefficients that we made newly nonzero */
  while (num_newnz > 0)
    (*block)[newnz_pos[--num_newnz]] = 0;

  return FALSE;
}
 800c106:	b051      	add	sp, #324	; 0x144
 800c108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Se = cinfo->Se;
 800c10c:	f8d6 319c 	ldr.w	r3, [r6, #412]	; 0x19c
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c110:	2201      	movs	r2, #1
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c112:	ad0b      	add	r5, sp, #44	; 0x2c
    block = MCU_data[0];
 800c114:	f8d7 9000 	ldr.w	r9, [r7]
    Se = cinfo->Se;
 800c118:	9306      	str	r3, [sp, #24]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c11a:	f8d6 31a4 	ldr.w	r3, [r6, #420]	; 0x1a4
    k = cinfo->Ss;
 800c11e:	f8d6 7198 	ldr.w	r7, [r6, #408]	; 0x198
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c122:	409a      	lsls	r2, r3
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c124:	612e      	str	r6, [r5, #16]
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 800c126:	9203      	str	r2, [sp, #12]
    m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 800c128:	f04f 32ff 	mov.w	r2, #4294967295
 800c12c:	fa02 f303 	lsl.w	r3, r2, r3
 800c130:	9307      	str	r3, [sp, #28]
    natural_order = cinfo->natural_order;
 800c132:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
 800c136:	9308      	str	r3, [sp, #32]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c138:	69b3      	ldr	r3, [r6, #24]
 800c13a:	681a      	ldr	r2, [r3, #0]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	602a      	str	r2, [r5, #0]
 800c140:	606b      	str	r3, [r5, #4]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800c142:	f8d8 3010 	ldr.w	r3, [r8, #16]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c146:	e9d8 4202 	ldrd	r4, r2, [r8, #8]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 800c14a:	9302      	str	r3, [sp, #8]
    if (EOBRUN == 0) {
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	f040 80bf 	bne.w	800c2d0 <decode_mcu_AC_refine+0x208>
    tbl = entropy->ac_derived_tbl;
 800c152:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800c156:	9309      	str	r3, [sp, #36]	; 0x24
      for (; k <= Se; k++) {
 800c158:	9b06      	ldr	r3, [sp, #24]
 800c15a:	429f      	cmp	r7, r3
 800c15c:	dd0a      	ble.n	800c174 <decode_mcu_AC_refine+0xac>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c15e:	69b3      	ldr	r3, [r6, #24]
 800c160:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c162:	6019      	str	r1, [r3, #0]
 800c164:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c166:	6059      	str	r1, [r3, #4]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800c168:	9b02      	ldr	r3, [sp, #8]
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c16a:	e9c8 4202 	strd	r4, r2, [r8, #8]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 800c16e:	f8c8 3010 	str.w	r3, [r8, #16]
 800c172:	e7b8      	b.n	800c0e6 <decode_mcu_AC_refine+0x1e>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800c174:	2a07      	cmp	r2, #7
 800c176:	dc0a      	bgt.n	800c18e <decode_mcu_AC_refine+0xc6>
 800c178:	2300      	movs	r3, #0
 800c17a:	4621      	mov	r1, r4
 800c17c:	4628      	mov	r0, r5
 800c17e:	f7ff fd1b 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800c182:	2800      	cmp	r0, #0
 800c184:	d06e      	beq.n	800c264 <decode_mcu_AC_refine+0x19c>
 800c186:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
 800c18a:	2a07      	cmp	r2, #7
 800c18c:	dd61      	ble.n	800c252 <decode_mcu_AC_refine+0x18a>
 800c18e:	f1a2 0308 	sub.w	r3, r2, #8
 800c192:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c194:	fa44 f303 	asr.w	r3, r4, r3
 800c198:	b2db      	uxtb	r3, r3
 800c19a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800c19e:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 800c1a2:	2900      	cmp	r1, #0
 800c1a4:	d06b      	beq.n	800c27e <decode_mcu_AC_refine+0x1b6>
 800c1a6:	4403      	add	r3, r0
 800c1a8:	1a52      	subs	r2, r2, r1
 800c1aa:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800c1ae:	f010 030f 	ands.w	r3, r0, #15
	r = s >> 4;
 800c1b2:	ea4f 1a20 	mov.w	sl, r0, asr #4
	if (s) {
 800c1b6:	9304      	str	r3, [sp, #16]
 800c1b8:	d066      	beq.n	800c288 <decode_mcu_AC_refine+0x1c0>
	  if (s != 1)		/* size of new coef should always be 1 */
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d009      	beq.n	800c1d2 <decode_mcu_AC_refine+0x10a>
	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
 800c1be:	6833      	ldr	r3, [r6, #0]
 800c1c0:	2179      	movs	r1, #121	; 0x79
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	9204      	str	r2, [sp, #16]
 800c1c6:	6159      	str	r1, [r3, #20]
 800c1c8:	f04f 31ff 	mov.w	r1, #4294967295
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	4798      	blx	r3
 800c1d0:	9a04      	ldr	r2, [sp, #16]
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800c1d2:	2a00      	cmp	r2, #0
 800c1d4:	dc08      	bgt.n	800c1e8 <decode_mcu_AC_refine+0x120>
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	4621      	mov	r1, r4
 800c1da:	4628      	mov	r0, r5
 800c1dc:	f7ff fcec 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800c1e0:	2800      	cmp	r0, #0
 800c1e2:	d03f      	beq.n	800c264 <decode_mcu_AC_refine+0x19c>
 800c1e4:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
	  if (GET_BITS(1))
 800c1e8:	3a01      	subs	r2, #1
	    s = m1;		/* newly nonzero coef is negative */
 800c1ea:	9907      	ldr	r1, [sp, #28]
	  if (GET_BITS(1))
 800c1ec:	fa44 f302 	asr.w	r3, r4, r2
	    s = m1;		/* newly nonzero coef is negative */
 800c1f0:	f013 0f01 	tst.w	r3, #1
 800c1f4:	9b03      	ldr	r3, [sp, #12]
 800c1f6:	bf08      	it	eq
 800c1f8:	460b      	moveq	r3, r1
 800c1fa:	9304      	str	r3, [sp, #16]
	  thiscoef = *block + natural_order[k];
 800c1fc:	9b08      	ldr	r3, [sp, #32]
 800c1fe:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800c202:	9305      	str	r3, [sp, #20]
	  if (*thiscoef != 0) {
 800c204:	f939 3013 	ldrsh.w	r3, [r9, r3, lsl #1]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d068      	beq.n	800c2de <decode_mcu_AC_refine+0x216>
	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800c20c:	2a00      	cmp	r2, #0
 800c20e:	dc07      	bgt.n	800c220 <decode_mcu_AC_refine+0x158>
 800c210:	2301      	movs	r3, #1
 800c212:	4621      	mov	r1, r4
 800c214:	4628      	mov	r0, r5
 800c216:	f7ff fccf 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800c21a:	b318      	cbz	r0, 800c264 <decode_mcu_AC_refine+0x19c>
 800c21c:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
	    if (GET_BITS(1)) {
 800c220:	3a01      	subs	r2, #1
 800c222:	fa44 f302 	asr.w	r3, r4, r2
 800c226:	07d9      	lsls	r1, r3, #31
 800c228:	d50e      	bpl.n	800c248 <decode_mcu_AC_refine+0x180>
	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
 800c22a:	9b05      	ldr	r3, [sp, #20]
 800c22c:	f939 1013 	ldrsh.w	r1, [r9, r3, lsl #1]
 800c230:	9b03      	ldr	r3, [sp, #12]
 800c232:	4219      	tst	r1, r3
 800c234:	d108      	bne.n	800c248 <decode_mcu_AC_refine+0x180>
		if (*thiscoef >= 0)
 800c236:	2900      	cmp	r1, #0
		  *thiscoef += p1;
 800c238:	b28b      	uxth	r3, r1
 800c23a:	bfac      	ite	ge
 800c23c:	9903      	ldrge	r1, [sp, #12]
		  *thiscoef += m1;
 800c23e:	9907      	ldrlt	r1, [sp, #28]
 800c240:	440b      	add	r3, r1
 800c242:	9905      	ldr	r1, [sp, #20]
 800c244:	f829 3011 	strh.w	r3, [r9, r1, lsl #1]
	  k++;
 800c248:	3701      	adds	r7, #1
	} while (k <= Se);
 800c24a:	9b06      	ldr	r3, [sp, #24]
 800c24c:	42bb      	cmp	r3, r7
 800c24e:	dad5      	bge.n	800c1fc <decode_mcu_AC_refine+0x134>
 800c250:	e048      	b.n	800c2e4 <decode_mcu_AC_refine+0x21c>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800c252:	2301      	movs	r3, #1
 800c254:	9300      	str	r3, [sp, #0]
 800c256:	4621      	mov	r1, r4
 800c258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c25a:	4628      	mov	r0, r5
 800c25c:	f7ff fd0a 	bl	800bc74 <jpeg_huff_decode>
 800c260:	2800      	cmp	r0, #0
 800c262:	da0e      	bge.n	800c282 <decode_mcu_AC_refine+0x1ba>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800c264:	ab10      	add	r3, sp, #64	; 0x40
 800c266:	2200      	movs	r2, #0
  while (num_newnz > 0)
 800c268:	f1bb 0f00 	cmp.w	fp, #0
 800c26c:	f43f af4a 	beq.w	800c104 <decode_mcu_AC_refine+0x3c>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800c270:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c274:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
 800c278:	f829 2011 	strh.w	r2, [r9, r1, lsl #1]
 800c27c:	e7f4      	b.n	800c268 <decode_mcu_AC_refine+0x1a0>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 800c27e:	2309      	movs	r3, #9
 800c280:	e7e8      	b.n	800c254 <decode_mcu_AC_refine+0x18c>
 800c282:	e9d5 4202 	ldrd	r4, r2, [r5, #8]
 800c286:	e792      	b.n	800c1ae <decode_mcu_AC_refine+0xe6>
	  if (r != 15) {
 800c288:	f1ba 0f0f 	cmp.w	sl, #15
 800c28c:	d0b6      	beq.n	800c1fc <decode_mcu_AC_refine+0x134>
	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 800c28e:	2301      	movs	r3, #1
 800c290:	fa03 f30a 	lsl.w	r3, r3, sl
 800c294:	9302      	str	r3, [sp, #8]
	    if (r) {
 800c296:	f1ba 0f00 	cmp.w	sl, #0
 800c29a:	d015      	beq.n	800c2c8 <decode_mcu_AC_refine+0x200>
	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 800c29c:	4552      	cmp	r2, sl
 800c29e:	da08      	bge.n	800c2b2 <decode_mcu_AC_refine+0x1ea>
 800c2a0:	4653      	mov	r3, sl
 800c2a2:	4621      	mov	r1, r4
 800c2a4:	a80b      	add	r0, sp, #44	; 0x2c
 800c2a6:	f7ff fc87 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	d0da      	beq.n	800c264 <decode_mcu_AC_refine+0x19c>
 800c2ae:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	      r = GET_BITS(r);
 800c2b2:	4b26      	ldr	r3, [pc, #152]	; (800c34c <decode_mcu_AC_refine+0x284>)
 800c2b4:	eba2 020a 	sub.w	r2, r2, sl
 800c2b8:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800c2bc:	fa44 f302 	asr.w	r3, r4, r2
 800c2c0:	400b      	ands	r3, r1
	      EOBRUN += r;
 800c2c2:	9902      	ldr	r1, [sp, #8]
 800c2c4:	4419      	add	r1, r3
 800c2c6:	9102      	str	r1, [sp, #8]
    if (EOBRUN > 0) {
 800c2c8:	9b02      	ldr	r3, [sp, #8]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	f43f af47 	beq.w	800c15e <decode_mcu_AC_refine+0x96>
      for (; k <= Se; k++) {
 800c2d0:	9b06      	ldr	r3, [sp, #24]
 800c2d2:	429f      	cmp	r7, r3
 800c2d4:	dd15      	ble.n	800c302 <decode_mcu_AC_refine+0x23a>
      EOBRUN--;
 800c2d6:	9b02      	ldr	r3, [sp, #8]
 800c2d8:	3b01      	subs	r3, #1
 800c2da:	9302      	str	r3, [sp, #8]
 800c2dc:	e73f      	b.n	800c15e <decode_mcu_AC_refine+0x96>
	    if (--r < 0)
 800c2de:	f1ba 0a01 	subs.w	sl, sl, #1
 800c2e2:	d2b1      	bcs.n	800c248 <decode_mcu_AC_refine+0x180>
	if (s) {
 800c2e4:	9b04      	ldr	r3, [sp, #16]
 800c2e6:	b153      	cbz	r3, 800c2fe <decode_mcu_AC_refine+0x236>
	  int pos = natural_order[k];
 800c2e8:	9b08      	ldr	r3, [sp, #32]
	  (*block)[pos] = (JCOEF) s;
 800c2ea:	9904      	ldr	r1, [sp, #16]
	  int pos = natural_order[k];
 800c2ec:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
	  (*block)[pos] = (JCOEF) s;
 800c2f0:	f829 1013 	strh.w	r1, [r9, r3, lsl #1]
	  newnz_pos[num_newnz++] = pos;
 800c2f4:	a910      	add	r1, sp, #64	; 0x40
 800c2f6:	f841 302b 	str.w	r3, [r1, fp, lsl #2]
 800c2fa:	f10b 0b01 	add.w	fp, fp, #1
      for (; k <= Se; k++) {
 800c2fe:	3701      	adds	r7, #1
 800c300:	e72a      	b.n	800c158 <decode_mcu_AC_refine+0x90>
	thiscoef = *block + natural_order[k];
 800c302:	9b08      	ldr	r3, [sp, #32]
 800c304:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
	if (*thiscoef != 0) {
 800c308:	f939 3015 	ldrsh.w	r3, [r9, r5, lsl #1]
 800c30c:	b1e3      	cbz	r3, 800c348 <decode_mcu_AC_refine+0x280>
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800c30e:	2a00      	cmp	r2, #0
 800c310:	dc08      	bgt.n	800c324 <decode_mcu_AC_refine+0x25c>
 800c312:	2301      	movs	r3, #1
 800c314:	4621      	mov	r1, r4
 800c316:	a80b      	add	r0, sp, #44	; 0x2c
 800c318:	f7ff fc4e 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800c31c:	2800      	cmp	r0, #0
 800c31e:	d0a1      	beq.n	800c264 <decode_mcu_AC_refine+0x19c>
 800c320:	e9dd 420d 	ldrd	r4, r2, [sp, #52]	; 0x34
	  if (GET_BITS(1)) {
 800c324:	3a01      	subs	r2, #1
 800c326:	fa44 f302 	asr.w	r3, r4, r2
 800c32a:	07db      	lsls	r3, r3, #31
 800c32c:	d50c      	bpl.n	800c348 <decode_mcu_AC_refine+0x280>
	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 800c32e:	f939 1015 	ldrsh.w	r1, [r9, r5, lsl #1]
 800c332:	9b03      	ldr	r3, [sp, #12]
 800c334:	4219      	tst	r1, r3
 800c336:	d107      	bne.n	800c348 <decode_mcu_AC_refine+0x280>
	      if (*thiscoef >= 0)
 800c338:	2900      	cmp	r1, #0
		*thiscoef += p1;
 800c33a:	b28b      	uxth	r3, r1
 800c33c:	bfac      	ite	ge
 800c33e:	9903      	ldrge	r1, [sp, #12]
		*thiscoef += m1;
 800c340:	9907      	ldrlt	r1, [sp, #28]
 800c342:	440b      	add	r3, r1
 800c344:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
      for (; k <= Se; k++) {
 800c348:	3701      	adds	r7, #1
 800c34a:	e7c1      	b.n	800c2d0 <decode_mcu_AC_refine+0x208>
 800c34c:	0802daa8 	.word	0x0802daa8

0800c350 <decode_mcu_sub>:
 * partial blocks.
 */

METHODDEF(boolean)
decode_mcu_sub (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800c350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int Se, blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800c354:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800c358:	b093      	sub	sp, #76	; 0x4c
 800c35a:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c35c:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800c360:	9106      	str	r1, [sp, #24]
  if (cinfo->restart_interval) {
 800c362:	b933      	cbnz	r3, 800c372 <decode_mcu_sub+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800c364:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800c366:	b17f      	cbz	r7, 800c388 <decode_mcu_sub+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800c368:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800c36a:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800c36c:	3b01      	subs	r3, #1
 800c36e:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800c370:	e007      	b.n	800c382 <decode_mcu_sub+0x32>
    if (entropy->restarts_to_go == 0)
 800c372:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c374:	2b00      	cmp	r3, #0
 800c376:	d1f5      	bne.n	800c364 <decode_mcu_sub+0x14>
      if (! process_restart(cinfo))
 800c378:	f7ff fcc6 	bl	800bd08 <process_restart>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	d1f1      	bne.n	800c364 <decode_mcu_sub+0x14>
	return FALSE;
 800c380:	2000      	movs	r0, #0
}
 800c382:	b013      	add	sp, #76	; 0x4c
 800c384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    natural_order = cinfo->natural_order;
 800c388:	f8d6 31ac 	ldr.w	r3, [r6, #428]	; 0x1ac
    ASSIGN_STATE(state, entropy->saved);
 800c38c:	f105 0810 	add.w	r8, r5, #16
 800c390:	ac0d      	add	r4, sp, #52	; 0x34
 800c392:	f105 0960 	add.w	r9, r5, #96	; 0x60
    natural_order = cinfo->natural_order;
 800c396:	9304      	str	r3, [sp, #16]
    Se = cinfo->lim_Se;
 800c398:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
	    r = GET_BITS(s);
 800c39c:	f8df a29c 	ldr.w	sl, [pc, #668]	; 800c63c <decode_mcu_sub+0x2ec>
    Se = cinfo->lim_Se;
 800c3a0:	9305      	str	r3, [sp, #20]
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c3a2:	69b3      	ldr	r3, [r6, #24]
 800c3a4:	960c      	str	r6, [sp, #48]	; 0x30
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	9208      	str	r2, [sp, #32]
 800c3ac:	9309      	str	r3, [sp, #36]	; 0x24
    ASSIGN_STATE(state, entropy->saved);
 800c3ae:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c3b2:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800c3b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c3b8:	f8d8 3000 	ldr.w	r3, [r8]
 800c3bc:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c3be:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800c3c2:	42bb      	cmp	r3, r7
 800c3c4:	dc0e      	bgt.n	800c3e4 <decode_mcu_sub+0x94>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c3c6:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800c3c8:	ae0d      	add	r6, sp, #52	; 0x34
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c3ca:	9a08      	ldr	r2, [sp, #32]
    ASSIGN_STATE(entropy->saved, state);
 800c3cc:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c3d0:	601a      	str	r2, [r3, #0]
 800c3d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3d4:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800c3d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c3d8:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800c3dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c3de:	6833      	ldr	r3, [r6, #0]
 800c3e0:	6023      	str	r3, [r4, #0]
 800c3e2:	e7c1      	b.n	800c368 <decode_mcu_sub+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800c3e4:	9b06      	ldr	r3, [sp, #24]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c3e6:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800c3ea:	f859 4b04 	ldr.w	r4, [r9], #4
      JBLOCKROW block = MCU_data[blkn];
 800c3ee:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c3f2:	dc0c      	bgt.n	800c40e <decode_mcu_sub+0xbe>
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	4662      	mov	r2, ip
 800c3f8:	4671      	mov	r1, lr
 800c3fa:	a808      	add	r0, sp, #32
 800c3fc:	f7ff fbdc 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800c400:	2800      	cmp	r0, #0
 800c402:	d0bd      	beq.n	800c380 <decode_mcu_sub+0x30>
 800c404:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c408:	f1bc 0f07 	cmp.w	ip, #7
 800c40c:	dd4a      	ble.n	800c4a4 <decode_mcu_sub+0x154>
 800c40e:	f1ac 0308 	sub.w	r3, ip, #8
 800c412:	fa4e f303 	asr.w	r3, lr, r3
 800c416:	b2db      	uxtb	r3, r3
 800c418:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c41c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c420:	2a00      	cmp	r2, #0
 800c422:	d04d      	beq.n	800c4c0 <decode_mcu_sub+0x170>
 800c424:	441c      	add	r4, r3
 800c426:	ebac 0c02 	sub.w	ip, ip, r2
 800c42a:	f894 4490 	ldrb.w	r4, [r4, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800c42e:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      htbl = entropy->ac_cur_tbls[blkn];
 800c432:	f8d9 8024 	ldr.w	r8, [r9, #36]	; 0x24
      coef_limit = entropy->coef_limit[blkn];
 800c436:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800c438:	2b00      	cmp	r3, #0
 800c43a:	f000 80a0 	beq.w	800c57e <decode_mcu_sub+0x22e>
	if (s) {
 800c43e:	b1cc      	cbz	r4, 800c474 <decode_mcu_sub+0x124>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c440:	45a4      	cmp	ip, r4
 800c442:	da09      	bge.n	800c458 <decode_mcu_sub+0x108>
 800c444:	4623      	mov	r3, r4
 800c446:	4662      	mov	r2, ip
 800c448:	4671      	mov	r1, lr
 800c44a:	a808      	add	r0, sp, #32
 800c44c:	f7ff fbb4 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800c450:	2800      	cmp	r0, #0
 800c452:	d095      	beq.n	800c380 <decode_mcu_sub+0x30>
 800c454:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  r = GET_BITS(s);
 800c458:	ebac 0c04 	sub.w	ip, ip, r4
 800c45c:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800c460:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800c462:	fa4e f20c 	asr.w	r2, lr, ip
	  s = HUFF_EXTEND(r, s);
 800c466:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800c46a:	400a      	ands	r2, r1
	  s = HUFF_EXTEND(r, s);
 800c46c:	4293      	cmp	r3, r2
 800c46e:	bfac      	ite	ge
 800c470:	1a54      	subge	r4, r2, r1
 800c472:	4614      	movlt	r4, r2
	ci = cinfo->MCU_membership[blkn];
 800c474:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800c478:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800c47c:	ab12      	add	r3, sp, #72	; 0x48
 800c47e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c482:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800c486:	441c      	add	r4, r3
	state.last_dc_val[ci] = s;
 800c488:	f842 4c10 	str.w	r4, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800c48c:	f8ab 4000 	strh.w	r4, [fp]
      k = 1;
 800c490:	2401      	movs	r4, #1
	for (; k < coef_limit; k++) {
 800c492:	9b03      	ldr	r3, [sp, #12]
 800c494:	429c      	cmp	r4, r3
 800c496:	db15      	blt.n	800c4c4 <decode_mcu_sub+0x174>
      for (; k <= Se; k++) {
 800c498:	9b05      	ldr	r3, [sp, #20]
 800c49a:	429c      	cmp	r4, r3
 800c49c:	f340 8081 	ble.w	800c5a2 <decode_mcu_sub+0x252>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c4a0:	3701      	adds	r7, #1
 800c4a2:	e78c      	b.n	800c3be <decode_mcu_sub+0x6e>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	9300      	str	r3, [sp, #0]
 800c4a8:	4662      	mov	r2, ip
 800c4aa:	4623      	mov	r3, r4
 800c4ac:	4671      	mov	r1, lr
 800c4ae:	a808      	add	r0, sp, #32
 800c4b0:	f7ff fbe0 	bl	800bc74 <jpeg_huff_decode>
 800c4b4:	1e04      	subs	r4, r0, #0
 800c4b6:	f6ff af63 	blt.w	800c380 <decode_mcu_sub+0x30>
 800c4ba:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c4be:	e7b6      	b.n	800c42e <decode_mcu_sub+0xde>
 800c4c0:	2309      	movs	r3, #9
 800c4c2:	e7f0      	b.n	800c4a6 <decode_mcu_sub+0x156>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c4c4:	f1bc 0f07 	cmp.w	ip, #7
 800c4c8:	dc0d      	bgt.n	800c4e6 <decode_mcu_sub+0x196>
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	4662      	mov	r2, ip
 800c4ce:	4671      	mov	r1, lr
 800c4d0:	a808      	add	r0, sp, #32
 800c4d2:	f7ff fb71 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	f43f af52 	beq.w	800c380 <decode_mcu_sub+0x30>
 800c4dc:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c4e0:	f1bc 0f07 	cmp.w	ip, #7
 800c4e4:	dd37      	ble.n	800c556 <decode_mcu_sub+0x206>
 800c4e6:	f1ac 0308 	sub.w	r3, ip, #8
 800c4ea:	fa4e f303 	asr.w	r3, lr, r3
 800c4ee:	b2db      	uxtb	r3, r3
 800c4f0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c4f4:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c4f8:	2a00      	cmp	r2, #0
 800c4fa:	d03a      	beq.n	800c572 <decode_mcu_sub+0x222>
 800c4fc:	4443      	add	r3, r8
 800c4fe:	ebac 0c02 	sub.w	ip, ip, r2
 800c502:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800c506:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800c50a:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800c50e:	d032      	beq.n	800c576 <decode_mcu_sub+0x226>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c510:	459c      	cmp	ip, r3
	    k += r;
 800c512:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c514:	da0b      	bge.n	800c52e <decode_mcu_sub+0x1de>
 800c516:	4662      	mov	r2, ip
 800c518:	4671      	mov	r1, lr
 800c51a:	a808      	add	r0, sp, #32
 800c51c:	9307      	str	r3, [sp, #28]
 800c51e:	f7ff fb4b 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800c522:	2800      	cmp	r0, #0
 800c524:	f43f af2c 	beq.w	800c380 <decode_mcu_sub+0x30>
 800c528:	9b07      	ldr	r3, [sp, #28]
 800c52a:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	    r = GET_BITS(s);
 800c52e:	ebac 0c03 	sub.w	ip, ip, r3
 800c532:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800c536:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800c538:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800c53c:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800c540:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800c542:	4293      	cmp	r3, r2
	    (*block)[natural_order[k]] = (JCOEF) s;
 800c544:	9b04      	ldr	r3, [sp, #16]
	    s = HUFF_EXTEND(r, s);
 800c546:	bfa8      	it	ge
 800c548:	1a52      	subge	r2, r2, r1
	    (*block)[natural_order[k]] = (JCOEF) s;
 800c54a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c54e:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800c552:	3401      	adds	r4, #1
 800c554:	e79d      	b.n	800c492 <decode_mcu_sub+0x142>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c556:	2301      	movs	r3, #1
 800c558:	9300      	str	r3, [sp, #0]
 800c55a:	4662      	mov	r2, ip
 800c55c:	4643      	mov	r3, r8
 800c55e:	4671      	mov	r1, lr
 800c560:	a808      	add	r0, sp, #32
 800c562:	f7ff fb87 	bl	800bc74 <jpeg_huff_decode>
 800c566:	2800      	cmp	r0, #0
 800c568:	f6ff af0a 	blt.w	800c380 <decode_mcu_sub+0x30>
 800c56c:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c570:	e7c9      	b.n	800c506 <decode_mcu_sub+0x1b6>
 800c572:	2309      	movs	r3, #9
 800c574:	e7f0      	b.n	800c558 <decode_mcu_sub+0x208>
	    if (r != 15)
 800c576:	2a0f      	cmp	r2, #15
 800c578:	d192      	bne.n	800c4a0 <decode_mcu_sub+0x150>
	    k += 15;
 800c57a:	340f      	adds	r4, #15
 800c57c:	e7e9      	b.n	800c552 <decode_mcu_sub+0x202>
	if (s) {
 800c57e:	b174      	cbz	r4, 800c59e <decode_mcu_sub+0x24e>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c580:	45a4      	cmp	ip, r4
 800c582:	da0a      	bge.n	800c59a <decode_mcu_sub+0x24a>
 800c584:	4623      	mov	r3, r4
 800c586:	4662      	mov	r2, ip
 800c588:	4671      	mov	r1, lr
 800c58a:	a808      	add	r0, sp, #32
 800c58c:	f7ff fb14 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800c590:	2800      	cmp	r0, #0
 800c592:	f43f aef5 	beq.w	800c380 <decode_mcu_sub+0x30>
 800c596:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800c59a:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800c59e:	2401      	movs	r4, #1
 800c5a0:	e77a      	b.n	800c498 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800c5a2:	f1bc 0f07 	cmp.w	ip, #7
 800c5a6:	dc0d      	bgt.n	800c5c4 <decode_mcu_sub+0x274>
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	4662      	mov	r2, ip
 800c5ac:	4671      	mov	r1, lr
 800c5ae:	a808      	add	r0, sp, #32
 800c5b0:	f7ff fb02 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	f43f aee3 	beq.w	800c380 <decode_mcu_sub+0x30>
 800c5ba:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c5be:	f1bc 0f07 	cmp.w	ip, #7
 800c5c2:	dd25      	ble.n	800c610 <decode_mcu_sub+0x2c0>
 800c5c4:	f1ac 0308 	sub.w	r3, ip, #8
 800c5c8:	fa4e f303 	asr.w	r3, lr, r3
 800c5cc:	b2db      	uxtb	r3, r3
 800c5ce:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c5d2:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c5d6:	b34a      	cbz	r2, 800c62c <decode_mcu_sub+0x2dc>
 800c5d8:	4443      	add	r3, r8
 800c5da:	ebac 0c02 	sub.w	ip, ip, r2
 800c5de:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800c5e2:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800c5e6:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800c5ea:	d021      	beq.n	800c630 <decode_mcu_sub+0x2e0>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c5ec:	45dc      	cmp	ip, fp
	  k += r;
 800c5ee:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c5f0:	da0a      	bge.n	800c608 <decode_mcu_sub+0x2b8>
 800c5f2:	465b      	mov	r3, fp
 800c5f4:	4662      	mov	r2, ip
 800c5f6:	4671      	mov	r1, lr
 800c5f8:	a808      	add	r0, sp, #32
 800c5fa:	f7ff fadd 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800c5fe:	2800      	cmp	r0, #0
 800c600:	f43f aebe 	beq.w	800c380 <decode_mcu_sub+0x30>
 800c604:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
	  DROP_BITS(s);
 800c608:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k <= Se; k++) {
 800c60c:	3401      	adds	r4, #1
 800c60e:	e743      	b.n	800c498 <decode_mcu_sub+0x148>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800c610:	2301      	movs	r3, #1
 800c612:	9300      	str	r3, [sp, #0]
 800c614:	4662      	mov	r2, ip
 800c616:	4643      	mov	r3, r8
 800c618:	4671      	mov	r1, lr
 800c61a:	a808      	add	r0, sp, #32
 800c61c:	f7ff fb2a 	bl	800bc74 <jpeg_huff_decode>
 800c620:	2800      	cmp	r0, #0
 800c622:	f6ff aead 	blt.w	800c380 <decode_mcu_sub+0x30>
 800c626:	e9dd ec0a 	ldrd	lr, ip, [sp, #40]	; 0x28
 800c62a:	e7da      	b.n	800c5e2 <decode_mcu_sub+0x292>
 800c62c:	2309      	movs	r3, #9
 800c62e:	e7f0      	b.n	800c612 <decode_mcu_sub+0x2c2>
	  if (r != 15)
 800c630:	2b0f      	cmp	r3, #15
 800c632:	f47f af35 	bne.w	800c4a0 <decode_mcu_sub+0x150>
	  k += 15;
 800c636:	340f      	adds	r4, #15
 800c638:	e7e8      	b.n	800c60c <decode_mcu_sub+0x2bc>
 800c63a:	bf00      	nop
 800c63c:	0802daa8 	.word	0x0802daa8

0800c640 <decode_mcu>:
 * full-size blocks.
 */

METHODDEF(boolean)
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800c640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 800c644:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
{
 800c648:	b091      	sub	sp, #68	; 0x44
 800c64a:	4606      	mov	r6, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800c64c:	f8d0 51d0 	ldr.w	r5, [r0, #464]	; 0x1d0
{
 800c650:	9104      	str	r1, [sp, #16]
  if (cinfo->restart_interval) {
 800c652:	b933      	cbnz	r3, 800c662 <decode_mcu+0x22>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800c654:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 800c656:	b17f      	cbz	r7, 800c678 <decode_mcu+0x38>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
    ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800c658:	6aab      	ldr	r3, [r5, #40]	; 0x28

  return TRUE;
 800c65a:	2001      	movs	r0, #1
  entropy->restarts_to_go--;
 800c65c:	3b01      	subs	r3, #1
 800c65e:	62ab      	str	r3, [r5, #40]	; 0x28
  return TRUE;
 800c660:	e007      	b.n	800c672 <decode_mcu+0x32>
    if (entropy->restarts_to_go == 0)
 800c662:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c664:	2b00      	cmp	r3, #0
 800c666:	d1f5      	bne.n	800c654 <decode_mcu+0x14>
      if (! process_restart(cinfo))
 800c668:	f7ff fb4e 	bl	800bd08 <process_restart>
 800c66c:	2800      	cmp	r0, #0
 800c66e:	d1f1      	bne.n	800c654 <decode_mcu+0x14>
	return FALSE;
 800c670:	2000      	movs	r0, #0
}
 800c672:	b011      	add	sp, #68	; 0x44
 800c674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c678:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(state, entropy->saved);
 800c67a:	f105 0810 	add.w	r8, r5, #16
 800c67e:	ac0b      	add	r4, sp, #44	; 0x2c
 800c680:	f105 0960 	add.w	r9, r5, #96	; 0x60
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c684:	681a      	ldr	r2, [r3, #0]
 800c686:	685b      	ldr	r3, [r3, #4]
 800c688:	9206      	str	r2, [sp, #24]
 800c68a:	9307      	str	r3, [sp, #28]
	    r = GET_BITS(s);
 800c68c:	f8df a290 	ldr.w	sl, [pc, #656]	; 800c920 <decode_mcu+0x2e0>
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c690:	960a      	str	r6, [sp, #40]	; 0x28
    ASSIGN_STATE(state, entropy->saved);
 800c692:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 800c696:	e9d5 ec02 	ldrd	lr, ip, [r5, #8]
    ASSIGN_STATE(state, entropy->saved);
 800c69a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c69c:	f8d8 3000 	ldr.w	r3, [r8]
 800c6a0:	6023      	str	r3, [r4, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c6a2:	f8d6 316c 	ldr.w	r3, [r6, #364]	; 0x16c
 800c6a6:	42bb      	cmp	r3, r7
 800c6a8:	dc0e      	bgt.n	800c6c8 <decode_mcu+0x88>
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c6aa:	69b3      	ldr	r3, [r6, #24]
    ASSIGN_STATE(entropy->saved, state);
 800c6ac:	ae0b      	add	r6, sp, #44	; 0x2c
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c6ae:	9a06      	ldr	r2, [sp, #24]
    ASSIGN_STATE(entropy->saved, state);
 800c6b0:	f105 0410 	add.w	r4, r5, #16
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c6b4:	601a      	str	r2, [r3, #0]
 800c6b6:	9a07      	ldr	r2, [sp, #28]
 800c6b8:	605a      	str	r2, [r3, #4]
    ASSIGN_STATE(entropy->saved, state);
 800c6ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 800c6bc:	e9c5 ec02 	strd	lr, ip, [r5, #8]
    ASSIGN_STATE(entropy->saved, state);
 800c6c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c6c2:	6833      	ldr	r3, [r6, #0]
 800c6c4:	6023      	str	r3, [r4, #0]
 800c6c6:	e7c7      	b.n	800c658 <decode_mcu+0x18>
      JBLOCKROW block = MCU_data[blkn];
 800c6c8:	9b04      	ldr	r3, [sp, #16]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c6ca:	f1bc 0f07 	cmp.w	ip, #7
      htbl = entropy->dc_cur_tbls[blkn];
 800c6ce:	f859 4b04 	ldr.w	r4, [r9], #4
      JBLOCKROW block = MCU_data[blkn];
 800c6d2:	f853 b027 	ldr.w	fp, [r3, r7, lsl #2]
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c6d6:	dc0c      	bgt.n	800c6f2 <decode_mcu+0xb2>
 800c6d8:	2300      	movs	r3, #0
 800c6da:	4662      	mov	r2, ip
 800c6dc:	4671      	mov	r1, lr
 800c6de:	a806      	add	r0, sp, #24
 800c6e0:	f7ff fa6a 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	d0c3      	beq.n	800c670 <decode_mcu+0x30>
 800c6e8:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c6ec:	f1bc 0f07 	cmp.w	ip, #7
 800c6f0:	dd49      	ble.n	800c786 <decode_mcu+0x146>
 800c6f2:	f1ac 0308 	sub.w	r3, ip, #8
 800c6f6:	fa4e f303 	asr.w	r3, lr, r3
 800c6fa:	b2db      	uxtb	r3, r3
 800c6fc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c700:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c704:	2a00      	cmp	r2, #0
 800c706:	d04c      	beq.n	800c7a2 <decode_mcu+0x162>
 800c708:	441c      	add	r4, r3
 800c70a:	ebac 0c02 	sub.w	ip, ip, r2
 800c70e:	f894 4490 	ldrb.w	r4, [r4, #1168]	; 0x490
      coef_limit = entropy->coef_limit[blkn];
 800c712:	f8d9 304c 	ldr.w	r3, [r9, #76]	; 0x4c
      htbl = entropy->ac_cur_tbls[blkn];
 800c716:	f8d9 8024 	ldr.w	r8, [r9, #36]	; 0x24
      coef_limit = entropy->coef_limit[blkn];
 800c71a:	9303      	str	r3, [sp, #12]
      if (coef_limit) {
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	f000 809f 	beq.w	800c860 <decode_mcu+0x220>
	if (s) {
 800c722:	b1cc      	cbz	r4, 800c758 <decode_mcu+0x118>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c724:	45a4      	cmp	ip, r4
 800c726:	da09      	bge.n	800c73c <decode_mcu+0xfc>
 800c728:	4623      	mov	r3, r4
 800c72a:	4662      	mov	r2, ip
 800c72c:	4671      	mov	r1, lr
 800c72e:	a806      	add	r0, sp, #24
 800c730:	f7ff fa42 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800c734:	2800      	cmp	r0, #0
 800c736:	d09b      	beq.n	800c670 <decode_mcu+0x30>
 800c738:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  r = GET_BITS(s);
 800c73c:	ebac 0c04 	sub.w	ip, ip, r4
 800c740:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
	  s = HUFF_EXTEND(r, s);
 800c744:	3c01      	subs	r4, #1
	  r = GET_BITS(s);
 800c746:	fa4e f20c 	asr.w	r2, lr, ip
	  s = HUFF_EXTEND(r, s);
 800c74a:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
	  r = GET_BITS(s);
 800c74e:	400a      	ands	r2, r1
	  s = HUFF_EXTEND(r, s);
 800c750:	4293      	cmp	r3, r2
 800c752:	bfac      	ite	ge
 800c754:	1a54      	subge	r4, r2, r1
 800c756:	4614      	movlt	r4, r2
	ci = cinfo->MCU_membership[blkn];
 800c758:	f506 73b8 	add.w	r3, r6, #368	; 0x170
 800c75c:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
	s += state.last_dc_val[ci];
 800c760:	ab10      	add	r3, sp, #64	; 0x40
 800c762:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800c766:	f852 3c10 	ldr.w	r3, [r2, #-16]
 800c76a:	441c      	add	r4, r3
	state.last_dc_val[ci] = s;
 800c76c:	f842 4c10 	str.w	r4, [r2, #-16]
	(*block)[0] = (JCOEF) s;
 800c770:	f8ab 4000 	strh.w	r4, [fp]
      k = 1;
 800c774:	2401      	movs	r4, #1
	for (; k < coef_limit; k++) {
 800c776:	9b03      	ldr	r3, [sp, #12]
 800c778:	429c      	cmp	r4, r3
 800c77a:	db14      	blt.n	800c7a6 <decode_mcu+0x166>
      for (; k < DCTSIZE2; k++) {
 800c77c:	2c3f      	cmp	r4, #63	; 0x3f
 800c77e:	f340 8081 	ble.w	800c884 <decode_mcu+0x244>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800c782:	3701      	adds	r7, #1
 800c784:	e78d      	b.n	800c6a2 <decode_mcu+0x62>
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 800c786:	2301      	movs	r3, #1
 800c788:	9300      	str	r3, [sp, #0]
 800c78a:	4662      	mov	r2, ip
 800c78c:	4623      	mov	r3, r4
 800c78e:	4671      	mov	r1, lr
 800c790:	a806      	add	r0, sp, #24
 800c792:	f7ff fa6f 	bl	800bc74 <jpeg_huff_decode>
 800c796:	1e04      	subs	r4, r0, #0
 800c798:	f6ff af6a 	blt.w	800c670 <decode_mcu+0x30>
 800c79c:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c7a0:	e7b7      	b.n	800c712 <decode_mcu+0xd2>
 800c7a2:	2309      	movs	r3, #9
 800c7a4:	e7f0      	b.n	800c788 <decode_mcu+0x148>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c7a6:	f1bc 0f07 	cmp.w	ip, #7
 800c7aa:	dc0d      	bgt.n	800c7c8 <decode_mcu+0x188>
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	4662      	mov	r2, ip
 800c7b0:	4671      	mov	r1, lr
 800c7b2:	a806      	add	r0, sp, #24
 800c7b4:	f7ff fa00 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800c7b8:	2800      	cmp	r0, #0
 800c7ba:	f43f af59 	beq.w	800c670 <decode_mcu+0x30>
 800c7be:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c7c2:	f1bc 0f07 	cmp.w	ip, #7
 800c7c6:	dd37      	ble.n	800c838 <decode_mcu+0x1f8>
 800c7c8:	f1ac 0308 	sub.w	r3, ip, #8
 800c7cc:	fa4e f303 	asr.w	r3, lr, r3
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c7d6:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c7da:	2a00      	cmp	r2, #0
 800c7dc:	d03a      	beq.n	800c854 <decode_mcu+0x214>
 800c7de:	4443      	add	r3, r8
 800c7e0:	ebac 0c02 	sub.w	ip, ip, r2
 800c7e4:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	  if (s) {
 800c7e8:	f010 030f 	ands.w	r3, r0, #15
	  r = s >> 4;
 800c7ec:	ea4f 1220 	mov.w	r2, r0, asr #4
	  if (s) {
 800c7f0:	d032      	beq.n	800c858 <decode_mcu+0x218>
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c7f2:	459c      	cmp	ip, r3
	    k += r;
 800c7f4:	4414      	add	r4, r2
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c7f6:	da0b      	bge.n	800c810 <decode_mcu+0x1d0>
 800c7f8:	4662      	mov	r2, ip
 800c7fa:	4671      	mov	r1, lr
 800c7fc:	a806      	add	r0, sp, #24
 800c7fe:	9305      	str	r3, [sp, #20]
 800c800:	f7ff f9da 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800c804:	2800      	cmp	r0, #0
 800c806:	f43f af33 	beq.w	800c670 <decode_mcu+0x30>
 800c80a:	9b05      	ldr	r3, [sp, #20]
 800c80c:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	    r = GET_BITS(s);
 800c810:	ebac 0c03 	sub.w	ip, ip, r3
 800c814:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
	    s = HUFF_EXTEND(r, s);
 800c818:	3b01      	subs	r3, #1
	    r = GET_BITS(s);
 800c81a:	fa4e f20c 	asr.w	r2, lr, ip
	    s = HUFF_EXTEND(r, s);
 800c81e:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
	    r = GET_BITS(s);
 800c822:	400a      	ands	r2, r1
	    s = HUFF_EXTEND(r, s);
 800c824:	4293      	cmp	r3, r2
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800c826:	4b3d      	ldr	r3, [pc, #244]	; (800c91c <decode_mcu+0x2dc>)
	    s = HUFF_EXTEND(r, s);
 800c828:	bfa8      	it	ge
 800c82a:	1a52      	subge	r2, r2, r1
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 800c82c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c830:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
	for (; k < coef_limit; k++) {
 800c834:	3401      	adds	r4, #1
 800c836:	e79e      	b.n	800c776 <decode_mcu+0x136>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 800c838:	2301      	movs	r3, #1
 800c83a:	9300      	str	r3, [sp, #0]
 800c83c:	4662      	mov	r2, ip
 800c83e:	4643      	mov	r3, r8
 800c840:	4671      	mov	r1, lr
 800c842:	a806      	add	r0, sp, #24
 800c844:	f7ff fa16 	bl	800bc74 <jpeg_huff_decode>
 800c848:	2800      	cmp	r0, #0
 800c84a:	f6ff af11 	blt.w	800c670 <decode_mcu+0x30>
 800c84e:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c852:	e7c9      	b.n	800c7e8 <decode_mcu+0x1a8>
 800c854:	2309      	movs	r3, #9
 800c856:	e7f0      	b.n	800c83a <decode_mcu+0x1fa>
	    if (r != 15)
 800c858:	2a0f      	cmp	r2, #15
 800c85a:	d192      	bne.n	800c782 <decode_mcu+0x142>
	    k += 15;
 800c85c:	340f      	adds	r4, #15
 800c85e:	e7e9      	b.n	800c834 <decode_mcu+0x1f4>
	if (s) {
 800c860:	b174      	cbz	r4, 800c880 <decode_mcu+0x240>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c862:	45a4      	cmp	ip, r4
 800c864:	da0a      	bge.n	800c87c <decode_mcu+0x23c>
 800c866:	4623      	mov	r3, r4
 800c868:	4662      	mov	r2, ip
 800c86a:	4671      	mov	r1, lr
 800c86c:	a806      	add	r0, sp, #24
 800c86e:	f7ff f9a3 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800c872:	2800      	cmp	r0, #0
 800c874:	f43f aefc 	beq.w	800c670 <decode_mcu+0x30>
 800c878:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800c87c:	ebac 0c04 	sub.w	ip, ip, r4
      k = 1;
 800c880:	2401      	movs	r4, #1
 800c882:	e77b      	b.n	800c77c <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800c884:	f1bc 0f07 	cmp.w	ip, #7
 800c888:	dc0d      	bgt.n	800c8a6 <decode_mcu+0x266>
 800c88a:	2300      	movs	r3, #0
 800c88c:	4662      	mov	r2, ip
 800c88e:	4671      	mov	r1, lr
 800c890:	a806      	add	r0, sp, #24
 800c892:	f7ff f991 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800c896:	2800      	cmp	r0, #0
 800c898:	f43f aeea 	beq.w	800c670 <decode_mcu+0x30>
 800c89c:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c8a0:	f1bc 0f07 	cmp.w	ip, #7
 800c8a4:	dd25      	ble.n	800c8f2 <decode_mcu+0x2b2>
 800c8a6:	f1ac 0308 	sub.w	r3, ip, #8
 800c8aa:	fa4e f303 	asr.w	r3, lr, r3
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c8b4:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800c8b8:	b34a      	cbz	r2, 800c90e <decode_mcu+0x2ce>
 800c8ba:	4443      	add	r3, r8
 800c8bc:	ebac 0c02 	sub.w	ip, ip, r2
 800c8c0:	f893 0490 	ldrb.w	r0, [r3, #1168]	; 0x490
	if (s) {
 800c8c4:	f010 0b0f 	ands.w	fp, r0, #15
	r = s >> 4;
 800c8c8:	ea4f 1320 	mov.w	r3, r0, asr #4
	if (s) {
 800c8cc:	d021      	beq.n	800c912 <decode_mcu+0x2d2>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c8ce:	45dc      	cmp	ip, fp
	  k += r;
 800c8d0:	441c      	add	r4, r3
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800c8d2:	da0a      	bge.n	800c8ea <decode_mcu+0x2aa>
 800c8d4:	465b      	mov	r3, fp
 800c8d6:	4662      	mov	r2, ip
 800c8d8:	4671      	mov	r1, lr
 800c8da:	a806      	add	r0, sp, #24
 800c8dc:	f7ff f96c 	bl	800bbb8 <jpeg_fill_bit_buffer>
 800c8e0:	2800      	cmp	r0, #0
 800c8e2:	f43f aec5 	beq.w	800c670 <decode_mcu+0x30>
 800c8e6:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
	  DROP_BITS(s);
 800c8ea:	ebac 0c0b 	sub.w	ip, ip, fp
      for (; k < DCTSIZE2; k++) {
 800c8ee:	3401      	adds	r4, #1
 800c8f0:	e744      	b.n	800c77c <decode_mcu+0x13c>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	9300      	str	r3, [sp, #0]
 800c8f6:	4662      	mov	r2, ip
 800c8f8:	4643      	mov	r3, r8
 800c8fa:	4671      	mov	r1, lr
 800c8fc:	a806      	add	r0, sp, #24
 800c8fe:	f7ff f9b9 	bl	800bc74 <jpeg_huff_decode>
 800c902:	2800      	cmp	r0, #0
 800c904:	f6ff aeb4 	blt.w	800c670 <decode_mcu+0x30>
 800c908:	e9dd ec08 	ldrd	lr, ip, [sp, #32]
 800c90c:	e7da      	b.n	800c8c4 <decode_mcu+0x284>
 800c90e:	2309      	movs	r3, #9
 800c910:	e7f0      	b.n	800c8f4 <decode_mcu+0x2b4>
	  if (r != 15)
 800c912:	2b0f      	cmp	r3, #15
 800c914:	f47f af35 	bne.w	800c782 <decode_mcu+0x142>
	  k += 15;
 800c918:	340f      	adds	r4, #15
 800c91a:	e7e8      	b.n	800c8ee <decode_mcu+0x2ae>
 800c91c:	0802f380 	.word	0x0802f380
 800c920:	0802daa8 	.word	0x0802daa8

0800c924 <jpeg_make_d_derived_tbl>:
{
 800c924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800c928:	2a03      	cmp	r2, #3
{
 800c92a:	f2ad 5d24 	subw	sp, sp, #1316	; 0x524
 800c92e:	4604      	mov	r4, r0
 800c930:	4616      	mov	r6, r2
 800c932:	461f      	mov	r7, r3
 800c934:	9101      	str	r1, [sp, #4]
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 800c936:	d905      	bls.n	800c944 <jpeg_make_d_derived_tbl+0x20>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800c938:	6803      	ldr	r3, [r0, #0]
 800c93a:	2234      	movs	r2, #52	; 0x34
 800c93c:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4798      	blx	r3
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800c944:	9b01      	ldr	r3, [sp, #4]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d045      	beq.n	800c9d6 <jpeg_make_d_derived_tbl+0xb2>
 800c94a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c94e:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
  if (htbl == NULL)
 800c952:	b935      	cbnz	r5, 800c962 <jpeg_make_d_derived_tbl+0x3e>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800c954:	6823      	ldr	r3, [r4, #0]
 800c956:	2234      	movs	r2, #52	; 0x34
 800c958:	4620      	mov	r0, r4
 800c95a:	e9c3 2605 	strd	r2, r6, [r3, #20]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4798      	blx	r3
  if (*pdtbl == NULL)
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	b93b      	cbnz	r3, 800c976 <jpeg_make_d_derived_tbl+0x52>
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800c966:	6863      	ldr	r3, [r4, #4]
 800c968:	f44f 62b2 	mov.w	r2, #1424	; 0x590
 800c96c:	2101      	movs	r1, #1
 800c96e:	4620      	mov	r0, r4
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4798      	blx	r3
    *pdtbl = (d_derived_tbl *)
 800c974:	6038      	str	r0, [r7, #0]
  dtbl = *pdtbl;
 800c976:	683f      	ldr	r7, [r7, #0]
  for (l = 1; l <= 16; l++) {
 800c978:	f04f 0801 	mov.w	r8, #1
  p = 0;
 800c97c:	2600      	movs	r6, #0
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800c97e:	f04f 0b09 	mov.w	fp, #9
  dtbl->pub = htbl;		/* fill in back link */
 800c982:	f8c7 508c 	str.w	r5, [r7, #140]	; 0x8c
    i = (int) htbl->bits[l];
 800c986:	f815 9008 	ldrb.w	r9, [r5, r8]
    if (i < 0 || p + i > 256)	/* protect against table overrun */
 800c98a:	46b2      	mov	sl, r6
 800c98c:	444e      	add	r6, r9
 800c98e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800c992:	dd05      	ble.n	800c9a0 <jpeg_make_d_derived_tbl+0x7c>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800c994:	6823      	ldr	r3, [r4, #0]
 800c996:	4620      	mov	r0, r4
 800c998:	f8c3 b014 	str.w	fp, [r3, #20]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	4798      	blx	r3
 800c9a0:	ab06      	add	r3, sp, #24
 800c9a2:	4453      	add	r3, sl
    while (i--)
 800c9a4:	f1b9 0901 	subs.w	r9, r9, #1
 800c9a8:	d21a      	bcs.n	800c9e0 <jpeg_make_d_derived_tbl+0xbc>
  for (l = 1; l <= 16; l++) {
 800c9aa:	f108 0801 	add.w	r8, r8, #1
 800c9ae:	f1b8 0f11 	cmp.w	r8, #17
 800c9b2:	d1e8      	bne.n	800c986 <jpeg_make_d_derived_tbl+0x62>
  huffsize[p] = 0;
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	ab06      	add	r3, sp, #24
      huffcode[p++] = code;
 800c9b8:	f50d 7a8e 	add.w	sl, sp, #284	; 0x11c
    if (((INT32) code) >= (((INT32) 1) << si))
 800c9bc:	f04f 0b01 	mov.w	fp, #1
  huffsize[p] = 0;
 800c9c0:	559a      	strb	r2, [r3, r6]
  p = 0;
 800c9c2:	4691      	mov	r9, r2
  si = huffsize[0];
 800c9c4:	f89d 8018 	ldrb.w	r8, [sp, #24]
  while (huffsize[p]) {
 800c9c8:	ab06      	add	r3, sp, #24
 800c9ca:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c9ce:	b31b      	cbz	r3, 800ca18 <jpeg_make_d_derived_tbl+0xf4>
 800c9d0:	4649      	mov	r1, r9
 800c9d2:	1a52      	subs	r2, r2, r1
 800c9d4:	e00a      	b.n	800c9ec <jpeg_make_d_derived_tbl+0xc8>
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 800c9d6:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c9da:	f8d3 50c4 	ldr.w	r5, [r3, #196]	; 0xc4
 800c9de:	e7b8      	b.n	800c952 <jpeg_make_d_derived_tbl+0x2e>
      huffsize[p++] = (char) l;
 800c9e0:	f803 8b01 	strb.w	r8, [r3], #1
 800c9e4:	e7de      	b.n	800c9a4 <jpeg_make_d_derived_tbl+0x80>
      huffcode[p++] = code;
 800c9e6:	f84a 3021 	str.w	r3, [sl, r1, lsl #2]
      code++;
 800c9ea:	3101      	adds	r1, #1
    while (((int) huffsize[p]) == si) {
 800c9ec:	a806      	add	r0, sp, #24
 800c9ee:	1853      	adds	r3, r2, r1
 800c9f0:	4689      	mov	r9, r1
 800c9f2:	5c40      	ldrb	r0, [r0, r1]
 800c9f4:	4540      	cmp	r0, r8
 800c9f6:	d0f6      	beq.n	800c9e6 <jpeg_make_d_derived_tbl+0xc2>
    if (((INT32) code) >= (((INT32) 1) << si))
 800c9f8:	fa0b f208 	lsl.w	r2, fp, r8
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	dc07      	bgt.n	800ca10 <jpeg_make_d_derived_tbl+0xec>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800ca00:	6822      	ldr	r2, [r4, #0]
 800ca02:	2109      	movs	r1, #9
 800ca04:	4620      	mov	r0, r4
 800ca06:	9300      	str	r3, [sp, #0]
 800ca08:	6151      	str	r1, [r2, #20]
 800ca0a:	6812      	ldr	r2, [r2, #0]
 800ca0c:	4790      	blx	r2
 800ca0e:	9b00      	ldr	r3, [sp, #0]
    code <<= 1;
 800ca10:	005a      	lsls	r2, r3, #1
    si++;
 800ca12:	f108 0801 	add.w	r8, r8, #1
 800ca16:	e7d7      	b.n	800c9c8 <jpeg_make_d_derived_tbl+0xa4>
 800ca18:	1c68      	adds	r0, r5, #1
 800ca1a:	1d3a      	adds	r2, r7, #4
 800ca1c:	f105 0b11 	add.w	fp, r5, #17
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 800ca20:	f04f 3eff 	mov.w	lr, #4294967295
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800ca24:	f50d 7c8e 	add.w	ip, sp, #284	; 0x11c
    if (htbl->bits[l]) {
 800ca28:	f810 8b01 	ldrb.w	r8, [r0], #1
 800ca2c:	f1b8 0f00 	cmp.w	r8, #0
 800ca30:	d02a      	beq.n	800ca88 <jpeg_make_d_derived_tbl+0x164>
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800ca32:	f85c 1023 	ldr.w	r1, [ip, r3, lsl #2]
 800ca36:	1a59      	subs	r1, r3, r1
      p += htbl->bits[l];
 800ca38:	4443      	add	r3, r8
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 800ca3a:	6491      	str	r1, [r2, #72]	; 0x48
      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 800ca3c:	1e59      	subs	r1, r3, #1
 800ca3e:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800ca42:	6011      	str	r1, [r2, #0]
  for (l = 1; l <= 16; l++) {
 800ca44:	4583      	cmp	fp, r0
 800ca46:	f102 0204 	add.w	r2, r2, #4
 800ca4a:	d1ed      	bne.n	800ca28 <jpeg_make_d_derived_tbl+0x104>
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800ca4c:	4b2b      	ldr	r3, [pc, #172]	; (800cafc <jpeg_make_d_derived_tbl+0x1d8>)
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800ca4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ca52:	2100      	movs	r1, #0
 800ca54:	f107 0090 	add.w	r0, r7, #144	; 0x90
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 800ca58:	647b      	str	r3, [r7, #68]	; 0x44
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800ca5a:	f50d 7a8e 	add.w	sl, sp, #284	; 0x11c
  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800ca5e:	f01d fa87 	bl	8029f70 <memset>
  p = 0;
 800ca62:	2200      	movs	r2, #0
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800ca64:	2301      	movs	r3, #1
  p = 0;
 800ca66:	9200      	str	r2, [sp, #0]
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800ca68:	f105 0211 	add.w	r2, r5, #17
 800ca6c:	9205      	str	r2, [sp, #20]
 800ca6e:	f1c3 0908 	rsb	r9, r3, #8
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800ca72:	2201      	movs	r2, #1
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800ca74:	f815 8003 	ldrb.w	r8, [r5, r3]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800ca78:	fa02 f209 	lsl.w	r2, r2, r9
 800ca7c:	9900      	ldr	r1, [sp, #0]
 800ca7e:	9203      	str	r2, [sp, #12]
 800ca80:	9a00      	ldr	r2, [sp, #0]
 800ca82:	4442      	add	r2, r8
 800ca84:	9204      	str	r2, [sp, #16]
 800ca86:	e01b      	b.n	800cac0 <jpeg_make_d_derived_tbl+0x19c>
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 800ca88:	f8c2 e000 	str.w	lr, [r2]
 800ca8c:	e7da      	b.n	800ca44 <jpeg_make_d_derived_tbl+0x120>
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800ca8e:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800ca92:	9805      	ldr	r0, [sp, #20]
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 800ca94:	fa02 f209 	lsl.w	r2, r2, r9
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800ca98:	f8dd e00c 	ldr.w	lr, [sp, #12]
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800ca9c:	5c40      	ldrb	r0, [r0, r1]
 800ca9e:	f102 0c24 	add.w	ip, r2, #36	; 0x24
 800caa2:	f502 6292 	add.w	r2, r2, #1168	; 0x490
 800caa6:	9002      	str	r0, [sp, #8]
 800caa8:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 800caac:	443a      	add	r2, r7
 800caae:	9802      	ldr	r0, [sp, #8]
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800cab0:	f1be 0e01 	subs.w	lr, lr, #1
	dtbl->look_nbits[lookbits] = l;
 800cab4:	f84c 3b04 	str.w	r3, [ip], #4
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 800cab8:	f802 0b01 	strb.w	r0, [r2], #1
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800cabc:	d1f7      	bne.n	800caae <jpeg_make_d_derived_tbl+0x18a>
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 800cabe:	3101      	adds	r1, #1
 800cac0:	9a04      	ldr	r2, [sp, #16]
 800cac2:	4291      	cmp	r1, r2
 800cac4:	d1e3      	bne.n	800ca8e <jpeg_make_d_derived_tbl+0x16a>
 800cac6:	9a00      	ldr	r2, [sp, #0]
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800cac8:	3301      	adds	r3, #1
 800caca:	4442      	add	r2, r8
 800cacc:	2b09      	cmp	r3, #9
 800cace:	9200      	str	r2, [sp, #0]
 800cad0:	d1cd      	bne.n	800ca6e <jpeg_make_d_derived_tbl+0x14a>
  if (isDC) {
 800cad2:	9a01      	ldr	r2, [sp, #4]
 800cad4:	b122      	cbz	r2, 800cae0 <jpeg_make_d_derived_tbl+0x1bc>
 800cad6:	3511      	adds	r5, #17
 800cad8:	445e      	add	r6, fp
	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800cada:	461f      	mov	r7, r3
    for (i = 0; i < numsymbols; i++) {
 800cadc:	42b5      	cmp	r5, r6
 800cade:	d103      	bne.n	800cae8 <jpeg_make_d_derived_tbl+0x1c4>
}
 800cae0:	f20d 5d24 	addw	sp, sp, #1316	; 0x524
 800cae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int sym = htbl->huffval[i];
 800cae8:	f815 3b01 	ldrb.w	r3, [r5], #1
      if (sym < 0 || sym > 15)
 800caec:	2b0f      	cmp	r3, #15
 800caee:	d9f5      	bls.n	800cadc <jpeg_make_d_derived_tbl+0x1b8>
	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800caf0:	6823      	ldr	r3, [r4, #0]
 800caf2:	4620      	mov	r0, r4
 800caf4:	615f      	str	r7, [r3, #20]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4798      	blx	r3
    for (i = 0; i < numsymbols; i++) {
 800cafa:	e7ef      	b.n	800cadc <jpeg_make_d_derived_tbl+0x1b8>
 800cafc:	000fffff 	.word	0x000fffff

0800cb00 <start_pass_huff_decoder>:
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
 800cb00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, blkn, tbl, i;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 800cb04:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
{
 800cb08:	4682      	mov	sl, r0
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 800cb0a:	f8d0 b1d0 	ldr.w	fp, [r0, #464]	; 0x1d0
  if (cinfo->progressive_mode) {
 800cb0e:	f500 74aa 	add.w	r4, r0, #340	; 0x154
 800cb12:	f8d0 2198 	ldr.w	r2, [r0, #408]	; 0x198
 800cb16:	2d00      	cmp	r5, #0
 800cb18:	f000 80ae 	beq.w	800cc78 <start_pass_huff_decoder+0x178>
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 800cb1c:	f8d0 51a4 	ldr.w	r5, [r0, #420]	; 0x1a4
 800cb20:	e9d0 1667 	ldrd	r1, r6, [r0, #412]	; 0x19c
 800cb24:	b962      	cbnz	r2, 800cb40 <start_pass_huff_decoder+0x40>
      if (cinfo->Se != 0)
 800cb26:	b1a9      	cbz	r1, 800cb54 <start_pass_huff_decoder+0x54>
       * accept.  Note: large Al values could result in out-of-range DC
       * coefficients during early scans, leading to bizarre displays due to
       * overflows in the IDCT math.  But we won't crash.
       */
      bad:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800cb28:	f8da 3000 	ldr.w	r3, [sl]
 800cb2c:	2711      	movs	r7, #17
 800cb2e:	4650      	mov	r0, sl
 800cb30:	625d      	str	r5, [r3, #36]	; 0x24
 800cb32:	e9c3 7205 	strd	r7, r2, [r3, #20]
 800cb36:	e9c3 1607 	strd	r1, r6, [r3, #28]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4798      	blx	r3
 800cb3e:	e00f      	b.n	800cb60 <start_pass_huff_decoder+0x60>
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 800cb40:	4291      	cmp	r1, r2
 800cb42:	dbf1      	blt.n	800cb28 <start_pass_huff_decoder+0x28>
 800cb44:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
 800cb48:	428b      	cmp	r3, r1
 800cb4a:	dbed      	blt.n	800cb28 <start_pass_huff_decoder+0x28>
      if (cinfo->comps_in_scan != 1)
 800cb4c:	f8d0 3150 	ldr.w	r3, [r0, #336]	; 0x150
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d1e9      	bne.n	800cb28 <start_pass_huff_decoder+0x28>
    if (cinfo->Ah != 0) {
 800cb54:	b116      	cbz	r6, 800cb5c <start_pass_huff_decoder+0x5c>
      if (cinfo->Ah-1 != cinfo->Al)
 800cb56:	1e73      	subs	r3, r6, #1
 800cb58:	42ab      	cmp	r3, r5
 800cb5a:	d1e5      	bne.n	800cb28 <start_pass_huff_decoder+0x28>
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 800cb5c:	2d0d      	cmp	r5, #13
 800cb5e:	dce3      	bgt.n	800cb28 <start_pass_huff_decoder+0x28>
{
 800cb60:	46a0      	mov	r8, r4
 800cb62:	2600      	movs	r6, #0
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cb64:	f8da 2150 	ldr.w	r2, [sl, #336]	; 0x150
 800cb68:	f8da 3198 	ldr.w	r3, [sl, #408]	; 0x198
 800cb6c:	42b2      	cmp	r2, r6
 800cb6e:	dc1e      	bgt.n	800cbae <start_pass_huff_decoder+0xae>
	coef_bit_ptr[coefi] = cinfo->Al;
      }
    }

    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 800cb70:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800cb74:	2a00      	cmp	r2, #0
 800cb76:	d155      	bne.n	800cc24 <start_pass_huff_decoder+0x124>
      if (cinfo->Ss == 0)
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d151      	bne.n	800cc20 <start_pass_huff_decoder+0x120>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 800cb7c:	4bb8      	ldr	r3, [pc, #736]	; (800ce60 <start_pass_huff_decoder+0x360>)
{
 800cb7e:	2600      	movs	r6, #0
 800cb80:	f10b 0714 	add.w	r7, fp, #20
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
    } else {
      if (cinfo->Ss == 0)
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800cb84:	f8cb 3004 	str.w	r3, [fp, #4]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
				  & entropy->derived_tbls[tbl]);
	}
      } else {
	tbl = compptr->ac_tbl_no;
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800cb88:	46b0      	mov	r8, r6
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cb8a:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800cb8e:	42b3      	cmp	r3, r6
 800cb90:	dc4d      	bgt.n	800cc2e <start_pass_huff_decoder+0x12e>
      /* Initialize DC predictions to 0 */
      entropy->saved.last_dc_val[ci] = 0;
    }

    /* Initialize private state variables */
    entropy->saved.EOBRUN = 0;
 800cb92:	2300      	movs	r3, #0
 800cb94:	f8cb 3010 	str.w	r3, [fp, #16]
      }
    }
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
 800cb98:	2300      	movs	r3, #0
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
 800cb9a:	e9cb 3302 	strd	r3, r3, [fp, #8]
  entropy->insufficient_data = FALSE;
 800cb9e:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 800cba2:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
 800cba6:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
}
 800cbaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 800cbae:	f858 2b04 	ldr.w	r2, [r8], #4
 800cbb2:	6857      	ldr	r7, [r2, #4]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 800cbb4:	f8da 20a0 	ldr.w	r2, [sl, #160]	; 0xa0
 800cbb8:	0239      	lsls	r1, r7, #8
 800cbba:	eb02 2907 	add.w	r9, r2, r7, lsl #8
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 800cbbe:	b173      	cbz	r3, 800cbde <start_pass_huff_decoder+0xde>
 800cbc0:	5853      	ldr	r3, [r2, r1]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	da0b      	bge.n	800cbde <start_pass_huff_decoder+0xde>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 800cbc6:	f8da 3000 	ldr.w	r3, [sl]
 800cbca:	2276      	movs	r2, #118	; 0x76
 800cbcc:	f04f 31ff 	mov.w	r1, #4294967295
 800cbd0:	4650      	mov	r0, sl
 800cbd2:	e9c3 2705 	strd	r2, r7, [r3, #20]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	61da      	str	r2, [r3, #28]
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800cbde:	f8da 5198 	ldr.w	r5, [sl, #408]	; 0x198
 800cbe2:	f8da 319c 	ldr.w	r3, [sl, #412]	; 0x19c
 800cbe6:	42ab      	cmp	r3, r5
 800cbe8:	da01      	bge.n	800cbee <start_pass_huff_decoder+0xee>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cbea:	3601      	adds	r6, #1
 800cbec:	e7ba      	b.n	800cb64 <start_pass_huff_decoder+0x64>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800cbee:	f859 3025 	ldr.w	r3, [r9, r5, lsl #2]
	if (cinfo->Ah != expected)
 800cbf2:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 800cbf6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	if (cinfo->Ah != expected)
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d00a      	beq.n	800cc14 <start_pass_huff_decoder+0x114>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 800cbfe:	f8da 3000 	ldr.w	r3, [sl]
 800cc02:	2276      	movs	r2, #118	; 0x76
 800cc04:	f04f 31ff 	mov.w	r1, #4294967295
 800cc08:	4650      	mov	r0, sl
 800cc0a:	61dd      	str	r5, [r3, #28]
 800cc0c:	e9c3 2705 	strd	r2, r7, [r3, #20]
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 800cc14:	f8da 31a4 	ldr.w	r3, [sl, #420]	; 0x1a4
 800cc18:	f849 3025 	str.w	r3, [r9, r5, lsl #2]
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 800cc1c:	3501      	adds	r5, #1
 800cc1e:	e7e0      	b.n	800cbe2 <start_pass_huff_decoder+0xe2>
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 800cc20:	4b90      	ldr	r3, [pc, #576]	; (800ce64 <start_pass_huff_decoder+0x364>)
 800cc22:	e7ac      	b.n	800cb7e <start_pass_huff_decoder+0x7e>
      if (cinfo->Ss == 0)
 800cc24:	b90b      	cbnz	r3, 800cc2a <start_pass_huff_decoder+0x12a>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 800cc26:	4b90      	ldr	r3, [pc, #576]	; (800ce68 <start_pass_huff_decoder+0x368>)
 800cc28:	e7a9      	b.n	800cb7e <start_pass_huff_decoder+0x7e>
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 800cc2a:	4b90      	ldr	r3, [pc, #576]	; (800ce6c <start_pass_huff_decoder+0x36c>)
 800cc2c:	e7a7      	b.n	800cb7e <start_pass_huff_decoder+0x7e>
      if (cinfo->Ss == 0) {
 800cc2e:	f8da 2198 	ldr.w	r2, [sl, #408]	; 0x198
      compptr = cinfo->cur_comp_info[ci];
 800cc32:	f854 3b04 	ldr.w	r3, [r4], #4
      if (cinfo->Ss == 0) {
 800cc36:	b97a      	cbnz	r2, 800cc58 <start_pass_huff_decoder+0x158>
	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 800cc38:	f8da 21a0 	ldr.w	r2, [sl, #416]	; 0x1a0
 800cc3c:	b942      	cbnz	r2, 800cc50 <start_pass_huff_decoder+0x150>
	  tbl = compptr->dc_tbl_no;
 800cc3e:	695a      	ldr	r2, [r3, #20]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800cc40:	2101      	movs	r1, #1
 800cc42:	4650      	mov	r0, sl
 800cc44:	f102 030b 	add.w	r3, r2, #11
 800cc48:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800cc4c:	f7ff fe6a 	bl	800c924 <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cc50:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800cc52:	f847 8b04 	str.w	r8, [r7], #4
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cc56:	e798      	b.n	800cb8a <start_pass_huff_decoder+0x8a>
	tbl = compptr->ac_tbl_no;
 800cc58:	699d      	ldr	r5, [r3, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800cc5a:	2100      	movs	r1, #0
 800cc5c:	4650      	mov	r0, sl
 800cc5e:	f105 030b 	add.w	r3, r5, #11
 800cc62:	462a      	mov	r2, r5
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800cc64:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800cc68:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800cc6c:	f7ff fe5a 	bl	800c924 <jpeg_make_d_derived_tbl>
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 800cc70:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800cc72:	f8cb 303c 	str.w	r3, [fp, #60]	; 0x3c
 800cc76:	e7eb      	b.n	800cc50 <start_pass_huff_decoder+0x150>
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 800cc78:	b982      	cbnz	r2, 800cc9c <start_pass_huff_decoder+0x19c>
 800cc7a:	f8d0 31a0 	ldr.w	r3, [r0, #416]	; 0x1a0
 800cc7e:	b96b      	cbnz	r3, 800cc9c <start_pass_huff_decoder+0x19c>
 800cc80:	f8d0 31a4 	ldr.w	r3, [r0, #420]	; 0x1a4
 800cc84:	b953      	cbnz	r3, 800cc9c <start_pass_huff_decoder+0x19c>
 800cc86:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
 800cc8a:	f8d0 319c 	ldr.w	r3, [r0, #412]	; 0x19c
 800cc8e:	b90a      	cbnz	r2, 800cc94 <start_pass_huff_decoder+0x194>
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 800cc90:	2b3f      	cmp	r3, #63	; 0x3f
 800cc92:	dc0c      	bgt.n	800ccae <start_pass_huff_decoder+0x1ae>
 800cc94:	f8da 21b0 	ldr.w	r2, [sl, #432]	; 0x1b0
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d008      	beq.n	800ccae <start_pass_huff_decoder+0x1ae>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 800cc9c:	f8da 3000 	ldr.w	r3, [sl]
 800cca0:	227d      	movs	r2, #125	; 0x7d
 800cca2:	f04f 31ff 	mov.w	r1, #4294967295
 800cca6:	4650      	mov	r0, sl
 800cca8:	615a      	str	r2, [r3, #20]
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	4798      	blx	r3
    if (cinfo->lim_Se != DCTSIZE2-1)
 800ccae:	f8da 11b0 	ldr.w	r1, [sl, #432]	; 0x1b0
      entropy->pub.decode_mcu = decode_mcu;
 800ccb2:	2600      	movs	r6, #0
 800ccb4:	4b6e      	ldr	r3, [pc, #440]	; (800ce70 <start_pass_huff_decoder+0x370>)
 800ccb6:	f10b 0714 	add.w	r7, fp, #20
 800ccba:	4a6e      	ldr	r2, [pc, #440]	; (800ce74 <start_pass_huff_decoder+0x374>)
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800ccbc:	46b0      	mov	r8, r6
      entropy->pub.decode_mcu = decode_mcu;
 800ccbe:	293f      	cmp	r1, #63	; 0x3f
 800ccc0:	bf08      	it	eq
 800ccc2:	4613      	moveq	r3, r2
 800ccc4:	f8cb 3004 	str.w	r3, [fp, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800ccc8:	f8da 3150 	ldr.w	r3, [sl, #336]	; 0x150
 800cccc:	42b3      	cmp	r3, r6
 800ccce:	dc3c      	bgt.n	800cd4a <start_pass_huff_decoder+0x24a>
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800ccd0:	f8da 016c 	ldr.w	r0, [sl, #364]	; 0x16c
 800ccd4:	f10b 0160 	add.w	r1, fp, #96	; 0x60
 800ccd8:	f50a 76b8 	add.w	r6, sl, #368	; 0x170
 800ccdc:	f04f 0c06 	mov.w	ip, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800cce0:	4f65      	ldr	r7, [pc, #404]	; (800ce78 <start_pass_huff_decoder+0x378>)
	  entropy->coef_limit[blkn] = 1;
 800cce2:	f04f 0801 	mov.w	r8, #1
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800cce6:	42a8      	cmp	r0, r5
 800cce8:	f77f af56 	ble.w	800cb98 <start_pass_huff_decoder+0x98>
      ci = cinfo->MCU_membership[blkn];
 800ccec:	f856 3b04 	ldr.w	r3, [r6], #4
      compptr = cinfo->cur_comp_info[ci];
 800ccf0:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800ccf4:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
      entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
 800ccf8:	6953      	ldr	r3, [r2, #20]
 800ccfa:	3310      	adds	r3, #16
 800ccfc:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800cd00:	f841 3b04 	str.w	r3, [r1], #4
      entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 800cd04:	6993      	ldr	r3, [r2, #24]
 800cd06:	3314      	adds	r3, #20
 800cd08:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800cd0c:	624b      	str	r3, [r1, #36]	; 0x24
      if (compptr->component_needed) {
 800cd0e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d052      	beq.n	800cdba <start_pass_huff_decoder+0x2ba>
	switch (cinfo->lim_Se) {
 800cd14:	f8da 41b0 	ldr.w	r4, [sl, #432]	; 0x1b0
 800cd18:	2c0f      	cmp	r4, #15
	i = compptr->DCT_h_scaled_size;
 800cd1a:	e9d2 2309 	ldrd	r2, r3, [r2, #36]	; 0x24
	switch (cinfo->lim_Se) {
 800cd1e:	d073      	beq.n	800ce08 <start_pass_huff_decoder+0x308>
 800cd20:	dc30      	bgt.n	800cd84 <start_pass_huff_decoder+0x284>
 800cd22:	2c03      	cmp	r4, #3
 800cd24:	d04f      	beq.n	800cdc6 <start_pass_huff_decoder+0x2c6>
 800cd26:	2c08      	cmp	r4, #8
 800cd28:	d05d      	beq.n	800cde6 <start_pass_huff_decoder+0x2e6>
 800cd2a:	2c00      	cmp	r4, #0
 800cd2c:	d047      	beq.n	800cdbe <start_pass_huff_decoder+0x2be>
	  if (ci <= 0 || ci > 8) ci = 8;
 800cd2e:	1e5c      	subs	r4, r3, #1
 800cd30:	2c08      	cmp	r4, #8
	  if (i <= 0 || i > 8) i = 8;
 800cd32:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 8) ci = 8;
 800cd36:	bf28      	it	cs
 800cd38:	2308      	movcs	r3, #8
	  if (i <= 0 || i > 8) i = 8;
 800cd3a:	2c08      	cmp	r4, #8
 800cd3c:	bf28      	it	cs
 800cd3e:	2208      	movcs	r2, #8
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800cd40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cd44:	4a4d      	ldr	r2, [pc, #308]	; (800ce7c <start_pass_huff_decoder+0x37c>)
 800cd46:	3b09      	subs	r3, #9
 800cd48:	e04a      	b.n	800cde0 <start_pass_huff_decoder+0x2e0>
      compptr = cinfo->cur_comp_info[ci];
 800cd4a:	f854 9b04 	ldr.w	r9, [r4], #4
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800cd4e:	2101      	movs	r1, #1
 800cd50:	4650      	mov	r0, sl
      tbl = compptr->dc_tbl_no;
 800cd52:	f8d9 2014 	ldr.w	r2, [r9, #20]
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 800cd56:	f102 0310 	add.w	r3, r2, #16
 800cd5a:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800cd5e:	f7ff fde1 	bl	800c924 <jpeg_make_d_derived_tbl>
      if (cinfo->lim_Se) {	/* AC needs no table when not present */
 800cd62:	f8da 31b0 	ldr.w	r3, [sl, #432]	; 0x1b0
 800cd66:	b14b      	cbz	r3, 800cd7c <start_pass_huff_decoder+0x27c>
	tbl = compptr->ac_tbl_no;
 800cd68:	f8d9 2018 	ldr.w	r2, [r9, #24]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 800cd6c:	2100      	movs	r1, #0
 800cd6e:	4650      	mov	r0, sl
 800cd70:	f102 0314 	add.w	r3, r2, #20
 800cd74:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800cd78:	f7ff fdd4 	bl	800c924 <jpeg_make_d_derived_tbl>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cd7c:	3601      	adds	r6, #1
      entropy->saved.last_dc_val[ci] = 0;
 800cd7e:	f847 8b04 	str.w	r8, [r7], #4
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cd82:	e7a1      	b.n	800ccc8 <start_pass_huff_decoder+0x1c8>
	switch (cinfo->lim_Se) {
 800cd84:	2c23      	cmp	r4, #35	; 0x23
 800cd86:	f103 3eff 	add.w	lr, r3, #4294967295
 800cd8a:	f102 39ff 	add.w	r9, r2, #4294967295
 800cd8e:	d049      	beq.n	800ce24 <start_pass_huff_decoder+0x324>
 800cd90:	2c30      	cmp	r4, #48	; 0x30
 800cd92:	d055      	beq.n	800ce40 <start_pass_huff_decoder+0x340>
 800cd94:	2c18      	cmp	r4, #24
 800cd96:	d1ca      	bne.n	800cd2e <start_pass_huff_decoder+0x22e>
	  if (ci <= 0 || ci > 5) ci = 5;
 800cd98:	f1be 0f05 	cmp.w	lr, #5
 800cd9c:	bf28      	it	cs
 800cd9e:	2305      	movcs	r3, #5
	  if (i <= 0 || i > 5) i = 5;
 800cda0:	f1b9 0f05 	cmp.w	r9, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800cda4:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 5) i = 5;
 800cda8:	bf28      	it	cs
 800cdaa:	2205      	movcs	r2, #5
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 800cdac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800cdb0:	3a01      	subs	r2, #1
 800cdb2:	4413      	add	r3, r2
 800cdb4:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800cdb8:	3301      	adds	r3, #1
	entropy->coef_limit[blkn] = 0;
 800cdba:	64cb      	str	r3, [r1, #76]	; 0x4c
 800cdbc:	e001      	b.n	800cdc2 <start_pass_huff_decoder+0x2c2>
	  entropy->coef_limit[blkn] = 1;
 800cdbe:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 800cdc2:	3501      	adds	r5, #1
 800cdc4:	e78f      	b.n	800cce6 <start_pass_huff_decoder+0x1e6>
	  if (ci <= 0 || ci > 2) ci = 2;
 800cdc6:	1e5c      	subs	r4, r3, #1
 800cdc8:	2c02      	cmp	r4, #2
	  if (i <= 0 || i > 2) i = 2;
 800cdca:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 2) ci = 2;
 800cdce:	bf28      	it	cs
 800cdd0:	2302      	movcs	r3, #2
	  if (i <= 0 || i > 2) i = 2;
 800cdd2:	2c02      	cmp	r4, #2
 800cdd4:	bf28      	it	cs
 800cdd6:	2202      	movcs	r2, #2
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 800cdd8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800cddc:	4a28      	ldr	r2, [pc, #160]	; (800ce80 <start_pass_huff_decoder+0x380>)
 800cdde:	3b03      	subs	r3, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800cde0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cde4:	e7e8      	b.n	800cdb8 <start_pass_huff_decoder+0x2b8>
	  if (ci <= 0 || ci > 3) ci = 3;
 800cde6:	1e5c      	subs	r4, r3, #1
 800cde8:	2c03      	cmp	r4, #3
	  if (i <= 0 || i > 3) i = 3;
 800cdea:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 3) ci = 3;
 800cdee:	bf28      	it	cs
 800cdf0:	2303      	movcs	r3, #3
	  if (i <= 0 || i > 3) i = 3;
 800cdf2:	2c03      	cmp	r4, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800cdf4:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 3) i = 3;
 800cdf8:	bf28      	it	cs
 800cdfa:	2203      	movcs	r2, #3
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800cdfc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ce00:	3a01      	subs	r2, #1
 800ce02:	4413      	add	r3, r2
 800ce04:	4a1f      	ldr	r2, [pc, #124]	; (800ce84 <start_pass_huff_decoder+0x384>)
 800ce06:	e7eb      	b.n	800cde0 <start_pass_huff_decoder+0x2e0>
	  if (ci <= 0 || ci > 4) ci = 4;
 800ce08:	1e5c      	subs	r4, r3, #1
 800ce0a:	2c04      	cmp	r4, #4
	  if (i <= 0 || i > 4) i = 4;
 800ce0c:	f102 34ff 	add.w	r4, r2, #4294967295
	  if (ci <= 0 || ci > 4) ci = 4;
 800ce10:	bf28      	it	cs
 800ce12:	2304      	movcs	r3, #4
	  if (i <= 0 || i > 4) i = 4;
 800ce14:	2c04      	cmp	r4, #4
 800ce16:	bf28      	it	cs
 800ce18:	2204      	movcs	r2, #4
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 800ce1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ce1e:	4a1a      	ldr	r2, [pc, #104]	; (800ce88 <start_pass_huff_decoder+0x388>)
 800ce20:	3b05      	subs	r3, #5
 800ce22:	e7dd      	b.n	800cde0 <start_pass_huff_decoder+0x2e0>
	  if (ci <= 0 || ci > 6) ci = 6;
 800ce24:	f1be 0f06 	cmp.w	lr, #6
 800ce28:	bf28      	it	cs
 800ce2a:	2306      	movcs	r3, #6
	  if (i <= 0 || i > 6) i = 6;
 800ce2c:	f1b9 0f06 	cmp.w	r9, #6
 800ce30:	bf28      	it	cs
 800ce32:	2206      	movcs	r2, #6
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 800ce34:	3b01      	subs	r3, #1
 800ce36:	3a01      	subs	r2, #1
 800ce38:	fb0c 2303 	mla	r3, ip, r3, r2
 800ce3c:	4a13      	ldr	r2, [pc, #76]	; (800ce8c <start_pass_huff_decoder+0x38c>)
 800ce3e:	e7cf      	b.n	800cde0 <start_pass_huff_decoder+0x2e0>
	  if (ci <= 0 || ci > 7) ci = 7;
 800ce40:	f1be 0f07 	cmp.w	lr, #7
 800ce44:	bf28      	it	cs
 800ce46:	2307      	movcs	r3, #7
	  if (i <= 0 || i > 7) i = 7;
 800ce48:	f1b9 0f07 	cmp.w	r9, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800ce4c:	f103 33ff 	add.w	r3, r3, #4294967295
	  if (i <= 0 || i > 7) i = 7;
 800ce50:	bf28      	it	cs
 800ce52:	2207      	movcs	r2, #7
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 800ce54:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ce58:	3a01      	subs	r2, #1
 800ce5a:	4413      	add	r3, r2
 800ce5c:	4a0c      	ldr	r2, [pc, #48]	; (800ce90 <start_pass_huff_decoder+0x390>)
 800ce5e:	e7bf      	b.n	800cde0 <start_pass_huff_decoder+0x2e0>
 800ce60:	0800bd59 	.word	0x0800bd59
 800ce64:	0800becd 	.word	0x0800becd
 800ce68:	0800c035 	.word	0x0800c035
 800ce6c:	0800c0c9 	.word	0x0800c0c9
 800ce70:	0800c351 	.word	0x0800c351
 800ce74:	0800c641 	.word	0x0800c641
 800ce78:	0802dc5c 	.word	0x0802dc5c
 800ce7c:	0802dae8 	.word	0x0802dae8
 800ce80:	0802dbe8 	.word	0x0802dbe8
 800ce84:	0802dbf8 	.word	0x0802dbf8
 800ce88:	0802dc1c 	.word	0x0802dc1c
 800ce8c:	0802dcc0 	.word	0x0802dcc0
 800ce90:	0802dd50 	.word	0x0802dd50

0800ce94 <jinit_huff_decoder>:
{
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ce94:	6843      	ldr	r3, [r0, #4]
 800ce96:	22d8      	movs	r2, #216	; 0xd8
 800ce98:	2101      	movs	r1, #1
 800ce9a:	681b      	ldr	r3, [r3, #0]
{
 800ce9c:	b570      	push	{r4, r5, r6, lr}
 800ce9e:	4605      	mov	r5, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cea0:	4798      	blx	r3
				SIZEOF(huff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_huff_decoder;
 800cea2:	4b19      	ldr	r3, [pc, #100]	; (800cf08 <jinit_huff_decoder+0x74>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cea4:	4604      	mov	r4, r0
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 800cea6:	f8c5 01d0 	str.w	r0, [r5, #464]	; 0x1d0
  entropy->pub.start_pass = start_pass_huff_decoder;
 800ceaa:	6003      	str	r3, [r0, #0]

  if (cinfo->progressive_mode) {
 800ceac:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800ceb0:	b943      	cbnz	r3, 800cec4 <jinit_huff_decoder+0x30>
      entropy->derived_tbls[i] = NULL;
    }
  } else {
    /* Mark tables unallocated */
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
      entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 800ceb2:	6503      	str	r3, [r0, #80]	; 0x50
 800ceb4:	6403      	str	r3, [r0, #64]	; 0x40
 800ceb6:	6543      	str	r3, [r0, #84]	; 0x54
 800ceb8:	6443      	str	r3, [r0, #68]	; 0x44
 800ceba:	6583      	str	r3, [r0, #88]	; 0x58
 800cebc:	6483      	str	r3, [r0, #72]	; 0x48
 800cebe:	65c3      	str	r3, [r0, #92]	; 0x5c
 800cec0:	64c3      	str	r3, [r0, #76]	; 0x4c
    }
  }
}
 800cec2:	bd70      	pop	{r4, r5, r6, pc}
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800cec4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800cec6:	2101      	movs	r1, #1
 800cec8:	686b      	ldr	r3, [r5, #4]
 800ceca:	4628      	mov	r0, r5
 800cecc:	0212      	lsls	r2, r2, #8
	*coef_bit_ptr++ = -1;
 800cece:	f04f 36ff 	mov.w	r6, #4294967295
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4798      	blx	r3
    for (ci = 0; ci < cinfo->num_components; ci++)
 800ced6:	2300      	movs	r3, #0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800ced8:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
    for (ci = 0; ci < cinfo->num_components; ci++)
 800cedc:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800cee0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800cee2:	f5a0 7280 	sub.w	r2, r0, #256	; 0x100
 800cee6:	4299      	cmp	r1, r3
 800cee8:	dc05      	bgt.n	800cef6 <jinit_huff_decoder+0x62>
      entropy->derived_tbls[i] = NULL;
 800ceea:	2300      	movs	r3, #0
 800ceec:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 800cef0:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
}
 800cef4:	e7e5      	b.n	800cec2 <jinit_huff_decoder+0x2e>
	*coef_bit_ptr++ = -1;
 800cef6:	f842 6b04 	str.w	r6, [r2], #4
      for (i = 0; i < DCTSIZE2; i++)
 800cefa:	4282      	cmp	r2, r0
 800cefc:	d1fb      	bne.n	800cef6 <jinit_huff_decoder+0x62>
    for (ci = 0; ci < cinfo->num_components; ci++)
 800cefe:	3301      	adds	r3, #1
 800cf00:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800cf04:	e7ec      	b.n	800cee0 <jinit_huff_decoder+0x4c>
 800cf06:	bf00      	nop
 800cf08:	0800cb01 	.word	0x0800cb01

0800cf0c <finish_input_pass>:
 */

METHODDEF(void)
finish_input_pass (j_decompress_ptr cinfo)
{
  cinfo->inputctl->consume_input = consume_markers;
 800cf0c:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
 800cf10:	4a01      	ldr	r2, [pc, #4]	; (800cf18 <finish_input_pass+0xc>)
 800cf12:	601a      	str	r2, [r3, #0]
}
 800cf14:	4770      	bx	lr
 800cf16:	bf00      	nop
 800cf18:	0800d0d5 	.word	0x0800d0d5

0800cf1c <reset_input_controller>:
 * Reset state to begin a fresh datastream.
 */

METHODDEF(void)
reset_input_controller (j_decompress_ptr cinfo)
{
 800cf1c:	b538      	push	{r3, r4, r5, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;

  inputctl->pub.consume_input = consume_markers;
 800cf1e:	4a0a      	ldr	r2, [pc, #40]	; (800cf48 <reset_input_controller+0x2c>)
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800cf20:	2500      	movs	r5, #0
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800cf22:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
{
 800cf26:	4604      	mov	r4, r0
  inputctl->pub.consume_input = consume_markers;
 800cf28:	601a      	str	r2, [r3, #0]
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = 1;
 800cf2a:	2201      	movs	r2, #1
  inputctl->pub.eoi_reached = FALSE;
 800cf2c:	e9c3 5504 	strd	r5, r5, [r3, #16]
  inputctl->inheaders = 1;
 800cf30:	619a      	str	r2, [r3, #24]
  /* Reset other modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 800cf32:	6803      	ldr	r3, [r0, #0]
 800cf34:	691b      	ldr	r3, [r3, #16]
 800cf36:	4798      	blx	r3
  (*cinfo->marker->reset_marker_reader) (cinfo);
 800cf38:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4798      	blx	r3
  /* Reset progression state -- would be cleaner if entropy decoder did this */
  cinfo->coef_bits = NULL;
 800cf42:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
}
 800cf46:	bd38      	pop	{r3, r4, r5, pc}
 800cf48:	0800d0d5 	.word	0x0800d0d5

0800cf4c <start_input_pass>:
  if (cinfo->comps_in_scan == 1) {
 800cf4c:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800cf50:	2a01      	cmp	r2, #1
{
 800cf52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf56:	4604      	mov	r4, r0
 800cf58:	f500 77aa 	add.w	r7, r0, #340	; 0x154
  if (cinfo->comps_in_scan == 1) {
 800cf5c:	d135      	bne.n	800cfca <start_input_pass+0x7e>
    compptr = cinfo->cur_comp_info[0];
 800cf5e:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
    cinfo->MCUs_per_row = compptr->width_in_blocks;
 800cf62:	69d9      	ldr	r1, [r3, #28]
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 800cf64:	6a1d      	ldr	r5, [r3, #32]
    cinfo->MCUs_per_row = compptr->width_in_blocks;
 800cf66:	f8c0 1164 	str.w	r1, [r0, #356]	; 0x164
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 800cf6a:	f8c0 5168 	str.w	r5, [r0, #360]	; 0x168
    compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
 800cf6e:	6a59      	ldr	r1, [r3, #36]	; 0x24
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800cf70:	68d8      	ldr	r0, [r3, #12]
    compptr->MCU_blocks = 1;
 800cf72:	641a      	str	r2, [r3, #64]	; 0x40
    compptr->last_col_width = 1;
 800cf74:	e9c3 1211 	strd	r1, r2, [r3, #68]	; 0x44
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800cf78:	fbb5 f1f0 	udiv	r1, r5, r0
 800cf7c:	fb00 5111 	mls	r1, r0, r1, r5
    if (tmp == 0) tmp = compptr->v_samp_factor;
 800cf80:	2900      	cmp	r1, #0
 800cf82:	bf08      	it	eq
 800cf84:	4601      	moveq	r1, r0
    compptr->MCU_height = 1;
 800cf86:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
    compptr->last_row_height = tmp;
 800cf8a:	64d9      	str	r1, [r3, #76]	; 0x4c
    cinfo->MCU_membership[0] = 0;
 800cf8c:	2300      	movs	r3, #0
    cinfo->blocks_in_MCU = 1;
 800cf8e:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
    cinfo->MCU_membership[0] = 0;
 800cf92:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
 800cf96:	46b9      	mov	r9, r7
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cf98:	2600      	movs	r6, #0
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800cf9a:	f04f 0a36 	mov.w	sl, #54	; 0x36
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800cf9e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800cfa2:	429e      	cmp	r6, r3
 800cfa4:	db72      	blt.n	800d08c <start_input_pass+0x140>
  (*cinfo->entropy->start_pass) (cinfo);
 800cfa6:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
 800cfaa:	4620      	mov	r0, r4
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	4798      	blx	r3
  (*cinfo->coef->start_input_pass) (cinfo);
 800cfb0:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800cfb4:	4620      	mov	r0, r4
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4798      	blx	r3
  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
 800cfba:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
 800cfbe:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800cfc2:	6852      	ldr	r2, [r2, #4]
 800cfc4:	601a      	str	r2, [r3, #0]
}
 800cfc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
 800cfca:	1e53      	subs	r3, r2, #1
 800cfcc:	2b03      	cmp	r3, #3
 800cfce:	d907      	bls.n	800cfe0 <start_input_pass+0x94>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
 800cfd0:	6803      	ldr	r3, [r0, #0]
 800cfd2:	211b      	movs	r1, #27
 800cfd4:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800cfd8:	2204      	movs	r2, #4
 800cfda:	61da      	str	r2, [r3, #28]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4798      	blx	r3
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800cfe0:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    cinfo->blocks_in_MCU = 0;
 800cfe4:	2500      	movs	r5, #0
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800cfe6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800cfea:	46b8      	mov	r8, r7
      jdiv_round_up((long) cinfo->image_width,
 800cfec:	69e0      	ldr	r0, [r4, #28]
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800cfee:	f04f 090e 	mov.w	r9, #14
      jdiv_round_up((long) cinfo->image_width,
 800cff2:	4359      	muls	r1, r3
 800cff4:	f009 fe12 	bl	8016c1c <jdiv_round_up>
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800cff8:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800cffc:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->MCUs_per_row = (JDIMENSION)
 800d000:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
      jdiv_round_up((long) cinfo->image_height,
 800d004:	4359      	muls	r1, r3
 800d006:	6a20      	ldr	r0, [r4, #32]
 800d008:	f009 fe08 	bl	8016c1c <jdiv_round_up>
    cinfo->blocks_in_MCU = 0;
 800d00c:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
    cinfo->MCU_rows_in_scan = (JDIMENSION)
 800d010:	f8c4 0168 	str.w	r0, [r4, #360]	; 0x168
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d014:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d018:	429d      	cmp	r5, r3
 800d01a:	dabc      	bge.n	800cf96 <start_input_pass+0x4a>
      compptr = cinfo->cur_comp_info[ci];
 800d01c:	f858 3b04 	ldr.w	r3, [r8], #4
      compptr->MCU_width = compptr->h_samp_factor;
 800d020:	6899      	ldr	r1, [r3, #8]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800d022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800d024:	f8d3 c01c 	ldr.w	ip, [r3, #28]
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800d028:	434a      	muls	r2, r1
      compptr->MCU_height = compptr->v_samp_factor;
 800d02a:	68d8      	ldr	r0, [r3, #12]
      compptr->MCU_width = compptr->h_samp_factor;
 800d02c:	6399      	str	r1, [r3, #56]	; 0x38
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800d02e:	645a      	str	r2, [r3, #68]	; 0x44
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800d030:	fb00 f601 	mul.w	r6, r0, r1
      compptr->MCU_height = compptr->v_samp_factor;
 800d034:	63d8      	str	r0, [r3, #60]	; 0x3c
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800d036:	641e      	str	r6, [r3, #64]	; 0x40
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800d038:	fbbc f2f1 	udiv	r2, ip, r1
 800d03c:	fb01 c212 	mls	r2, r1, r2, ip
      if (tmp == 0) tmp = compptr->MCU_width;
 800d040:	2a00      	cmp	r2, #0
 800d042:	bf08      	it	eq
 800d044:	460a      	moveq	r2, r1
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 800d046:	6a19      	ldr	r1, [r3, #32]
      compptr->last_col_width = tmp;
 800d048:	649a      	str	r2, [r3, #72]	; 0x48
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 800d04a:	fbb1 f2f0 	udiv	r2, r1, r0
 800d04e:	fb00 1212 	mls	r2, r0, r2, r1
      if (tmp == 0) tmp = compptr->MCU_height;
 800d052:	2a00      	cmp	r2, #0
 800d054:	bf08      	it	eq
 800d056:	4602      	moveq	r2, r0
      compptr->last_row_height = tmp;
 800d058:	64da      	str	r2, [r3, #76]	; 0x4c
      if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
 800d05a:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800d05e:	4433      	add	r3, r6
 800d060:	2b0a      	cmp	r3, #10
 800d062:	dd05      	ble.n	800d070 <start_input_pass+0x124>
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800d064:	6823      	ldr	r3, [r4, #0]
 800d066:	4620      	mov	r0, r4
 800d068:	f8c3 9014 	str.w	r9, [r3, #20]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4798      	blx	r3
      while (mcublks-- > 0) {
 800d070:	2e00      	cmp	r6, #0
 800d072:	dc01      	bgt.n	800d078 <start_input_pass+0x12c>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d074:	3501      	adds	r5, #1
 800d076:	e7cd      	b.n	800d014 <start_input_pass+0xc8>
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
 800d078:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 800d07c:	3e01      	subs	r6, #1
 800d07e:	1c5a      	adds	r2, r3, #1
 800d080:	335c      	adds	r3, #92	; 0x5c
 800d082:	f8c4 216c 	str.w	r2, [r4, #364]	; 0x16c
 800d086:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800d08a:	e7f1      	b.n	800d070 <start_input_pass+0x124>
    compptr = cinfo->cur_comp_info[ci];
 800d08c:	f859 7b04 	ldr.w	r7, [r9], #4
    if (compptr->quant_table != NULL)
 800d090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d092:	b9eb      	cbnz	r3, 800d0d0 <start_input_pass+0x184>
    qtblno = compptr->quant_tbl_no;
 800d094:	693a      	ldr	r2, [r7, #16]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800d096:	2a03      	cmp	r2, #3
 800d098:	f102 0528 	add.w	r5, r2, #40	; 0x28
 800d09c:	d803      	bhi.n	800d0a6 <start_input_pass+0x15a>
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
 800d09e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	b92b      	cbnz	r3, 800d0b2 <start_input_pass+0x166>
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800d0a6:	6823      	ldr	r3, [r4, #0]
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	e9c3 a205 	strd	sl, r2, [r3, #20]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4798      	blx	r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d0b2:	6863      	ldr	r3, [r4, #4]
 800d0b4:	2284      	movs	r2, #132	; 0x84
 800d0b6:	2101      	movs	r1, #1
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	681b      	ldr	r3, [r3, #0]
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800d0bc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d0c0:	4798      	blx	r3
 800d0c2:	4680      	mov	r8, r0
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800d0c4:	2284      	movs	r2, #132	; 0x84
 800d0c6:	6869      	ldr	r1, [r5, #4]
 800d0c8:	f01c ff44 	bl	8029f54 <memcpy>
    compptr->quant_table = qtbl;
 800d0cc:	f8c7 8050 	str.w	r8, [r7, #80]	; 0x50
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800d0d0:	3601      	adds	r6, #1
 800d0d2:	e764      	b.n	800cf9e <start_input_pass+0x52>

0800d0d4 <consume_markers>:
{
 800d0d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800d0d8:	f8d0 61c8 	ldr.w	r6, [r0, #456]	; 0x1c8
{
 800d0dc:	4604      	mov	r4, r0
  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
 800d0de:	6973      	ldr	r3, [r6, #20]
 800d0e0:	b9eb      	cbnz	r3, 800d11e <consume_markers+0x4a>
  cinfo->max_h_samp_factor = 1;
 800d0e2:	f04f 0901 	mov.w	r9, #1
    cinfo->natural_order = jpeg_natural_order;
 800d0e6:	4db3      	ldr	r5, [pc, #716]	; (800d3b4 <consume_markers+0x2e0>)
    val = (*cinfo->marker->read_markers) (cinfo);
 800d0e8:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	4798      	blx	r3
    switch (val) {
 800d0f2:	2801      	cmp	r0, #1
    val = (*cinfo->marker->read_markers) (cinfo);
 800d0f4:	4607      	mov	r7, r0
    switch (val) {
 800d0f6:	d016      	beq.n	800d126 <consume_markers+0x52>
 800d0f8:	2802      	cmp	r0, #2
 800d0fa:	d111      	bne.n	800d120 <consume_markers+0x4c>
      inputctl->pub.eoi_reached = TRUE;
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	6173      	str	r3, [r6, #20]
      if (inputctl->inheaders) { /* Tables-only datastream, apparently */
 800d100:	69b3      	ldr	r3, [r6, #24]
 800d102:	2b00      	cmp	r3, #0
 800d104:	f000 8175 	beq.w	800d3f2 <consume_markers+0x31e>
	if (cinfo->marker->saw_SOF)
 800d108:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800d10c:	691b      	ldr	r3, [r3, #16]
 800d10e:	b133      	cbz	r3, 800d11e <consume_markers+0x4a>
	  ERREXIT(cinfo, JERR_SOF_NO_SOS);
 800d110:	6823      	ldr	r3, [r4, #0]
 800d112:	223d      	movs	r2, #61	; 0x3d
 800d114:	4620      	mov	r0, r4
 800d116:	615a      	str	r2, [r3, #20]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	4798      	blx	r3
 800d11c:	e000      	b.n	800d120 <consume_markers+0x4c>
    return JPEG_REACHED_EOI;
 800d11e:	2702      	movs	r7, #2
}
 800d120:	4638      	mov	r0, r7
 800d122:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (inputctl->inheaders) { /* 1st SOS */
 800d126:	69b3      	ldr	r3, [r6, #24]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	f000 8151 	beq.w	800d3d0 <consume_markers+0x2fc>
	if (inputctl->inheaders == 1)
 800d12e:	2b01      	cmp	r3, #1
 800d130:	f040 80d8 	bne.w	800d2e4 <consume_markers+0x210>
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
 800d134:	6a22      	ldr	r2, [r4, #32]
 800d136:	f64f 73dc 	movw	r3, #65500	; 0xffdc
 800d13a:	429a      	cmp	r2, r3
 800d13c:	dc02      	bgt.n	800d144 <consume_markers+0x70>
 800d13e:	69e2      	ldr	r2, [r4, #28]
 800d140:	429a      	cmp	r2, r3
 800d142:	dd08      	ble.n	800d156 <consume_markers+0x82>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 800d144:	6823      	ldr	r3, [r4, #0]
 800d146:	212a      	movs	r1, #42	; 0x2a
 800d148:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800d14c:	4620      	mov	r0, r4
 800d14e:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	4798      	blx	r3
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
 800d156:	f8d4 20d4 	ldr.w	r2, [r4, #212]	; 0xd4
 800d15a:	2a08      	cmp	r2, #8
 800d15c:	d006      	beq.n	800d16c <consume_markers+0x98>
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 800d15e:	6823      	ldr	r3, [r4, #0]
 800d160:	2110      	movs	r1, #16
 800d162:	4620      	mov	r0, r4
 800d164:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4798      	blx	r3
  if (cinfo->num_components > MAX_COMPONENTS)
 800d16c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d16e:	2a0a      	cmp	r2, #10
 800d170:	dd08      	ble.n	800d184 <consume_markers+0xb0>
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 800d172:	6823      	ldr	r3, [r4, #0]
 800d174:	211b      	movs	r1, #27
 800d176:	4620      	mov	r0, r4
 800d178:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800d17c:	220a      	movs	r2, #10
 800d17e:	61da      	str	r2, [r3, #28]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4798      	blx	r3
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d184:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800d188:	f04f 0a00 	mov.w	sl, #0
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800d18c:	f04f 0b13 	mov.w	fp, #19
  cinfo->max_v_samp_factor = 1;
 800d190:	e9c4 994e 	strd	r9, r9, [r4, #312]	; 0x138
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d196:	459a      	cmp	sl, r3
 800d198:	db0d      	blt.n	800d1b6 <consume_markers+0xe2>
  if (cinfo->is_baseline || (cinfo->progressive_mode &&
 800d19a:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 800d19e:	b92b      	cbnz	r3, 800d1ac <consume_markers+0xd8>
 800d1a0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800d1a4:	b383      	cbz	r3, 800d208 <consume_markers+0x134>
 800d1a6:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d1aa:	b36b      	cbz	r3, 800d208 <consume_markers+0x134>
    cinfo->block_size = DCTSIZE;
 800d1ac:	2308      	movs	r3, #8
      cinfo->natural_order = jpeg_natural_order;
 800d1ae:	e9c4 356a 	strd	r3, r5, [r4, #424]	; 0x1a8
      cinfo->lim_Se = DCTSIZE2-1;
 800d1b2:	233f      	movs	r3, #63	; 0x3f
 800d1b4:	e071      	b.n	800d29a <consume_markers+0x1c6>
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 800d1b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d1ba:	3b01      	subs	r3, #1
 800d1bc:	2b03      	cmp	r3, #3
 800d1be:	d804      	bhi.n	800d1ca <consume_markers+0xf6>
 800d1c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d1c4:	3b01      	subs	r3, #1
 800d1c6:	2b03      	cmp	r3, #3
 800d1c8:	d905      	bls.n	800d1d6 <consume_markers+0x102>
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 800d1ca:	6823      	ldr	r3, [r4, #0]
 800d1cc:	4620      	mov	r0, r4
 800d1ce:	f8c3 b014 	str.w	fp, [r3, #20]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4798      	blx	r3
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800d1d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
       ci++, compptr++) {
 800d1da:	f10a 0a01 	add.w	sl, sl, #1
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800d1de:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
       ci++, compptr++) {
 800d1e2:	f108 0858 	add.w	r8, r8, #88	; 0x58
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	bfac      	ite	ge
 800d1ea:	f8c4 2138 	strge.w	r2, [r4, #312]	; 0x138
 800d1ee:	f8c4 3138 	strlt.w	r3, [r4, #312]	; 0x138
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
 800d1f2:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800d1f6:	f858 3c4c 	ldr.w	r3, [r8, #-76]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	bfac      	ite	ge
 800d1fe:	f8c4 213c 	strge.w	r2, [r4, #316]	; 0x13c
 800d202:	f8c4 313c 	strlt.w	r3, [r4, #316]	; 0x13c
       ci++, compptr++) {
 800d206:	e7c5      	b.n	800d194 <consume_markers+0xc0>
    switch (cinfo->Se) {
 800d208:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 800d20c:	2b50      	cmp	r3, #80	; 0x50
 800d20e:	f000 808a 	beq.w	800d326 <consume_markers+0x252>
 800d212:	dc2b      	bgt.n	800d26c <consume_markers+0x198>
 800d214:	2b18      	cmp	r3, #24
 800d216:	d078      	beq.n	800d30a <consume_markers+0x236>
 800d218:	dc1d      	bgt.n	800d256 <consume_markers+0x182>
 800d21a:	2b08      	cmp	r3, #8
 800d21c:	d070      	beq.n	800d300 <consume_markers+0x22c>
 800d21e:	dc13      	bgt.n	800d248 <consume_markers+0x174>
 800d220:	b3bb      	cbz	r3, 800d292 <consume_markers+0x1be>
 800d222:	2b03      	cmp	r3, #3
 800d224:	d065      	beq.n	800d2f2 <consume_markers+0x21e>
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800d226:	6822      	ldr	r2, [r4, #0]
 800d228:	2111      	movs	r1, #17
 800d22a:	4620      	mov	r0, r4
 800d22c:	6151      	str	r1, [r2, #20]
 800d22e:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
 800d232:	e9c2 1306 	strd	r1, r3, [r2, #24]
 800d236:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 800d23a:	6213      	str	r3, [r2, #32]
 800d23c:	f8d4 31a4 	ldr.w	r3, [r4, #420]	; 0x1a4
 800d240:	6253      	str	r3, [r2, #36]	; 0x24
 800d242:	6813      	ldr	r3, [r2, #0]
 800d244:	4798      	blx	r3
      break;
 800d246:	e02a      	b.n	800d29e <consume_markers+0x1ca>
    switch (cinfo->Se) {
 800d248:	2b0f      	cmp	r3, #15
 800d24a:	d1ec      	bne.n	800d226 <consume_markers+0x152>
      cinfo->block_size = 4;
 800d24c:	2204      	movs	r2, #4
 800d24e:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order4;
 800d252:	4a59      	ldr	r2, [pc, #356]	; (800d3b8 <consume_markers+0x2e4>)
 800d254:	e051      	b.n	800d2fa <consume_markers+0x226>
    switch (cinfo->Se) {
 800d256:	2b30      	cmp	r3, #48	; 0x30
 800d258:	d05c      	beq.n	800d314 <consume_markers+0x240>
 800d25a:	2b3f      	cmp	r3, #63	; 0x3f
 800d25c:	d05f      	beq.n	800d31e <consume_markers+0x24a>
 800d25e:	2b23      	cmp	r3, #35	; 0x23
 800d260:	d1e1      	bne.n	800d226 <consume_markers+0x152>
      cinfo->block_size = 6;
 800d262:	2206      	movs	r2, #6
 800d264:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order6;
 800d268:	4a54      	ldr	r2, [pc, #336]	; (800d3bc <consume_markers+0x2e8>)
 800d26a:	e046      	b.n	800d2fa <consume_markers+0x226>
    switch (cinfo->Se) {
 800d26c:	2ba8      	cmp	r3, #168	; 0xa8
 800d26e:	d060      	beq.n	800d332 <consume_markers+0x25e>
 800d270:	dc07      	bgt.n	800d282 <consume_markers+0x1ae>
 800d272:	2b78      	cmp	r3, #120	; 0x78
 800d274:	d059      	beq.n	800d32a <consume_markers+0x256>
 800d276:	2b8f      	cmp	r3, #143	; 0x8f
 800d278:	d059      	beq.n	800d32e <consume_markers+0x25a>
 800d27a:	2b63      	cmp	r3, #99	; 0x63
 800d27c:	d1d3      	bne.n	800d226 <consume_markers+0x152>
      cinfo->block_size = 10;
 800d27e:	230a      	movs	r3, #10
 800d280:	e795      	b.n	800d1ae <consume_markers+0xda>
    switch (cinfo->Se) {
 800d282:	2be0      	cmp	r3, #224	; 0xe0
 800d284:	d057      	beq.n	800d336 <consume_markers+0x262>
 800d286:	2bff      	cmp	r3, #255	; 0xff
 800d288:	d057      	beq.n	800d33a <consume_markers+0x266>
 800d28a:	2bc3      	cmp	r3, #195	; 0xc3
 800d28c:	d1cb      	bne.n	800d226 <consume_markers+0x152>
      cinfo->block_size = 14;
 800d28e:	230e      	movs	r3, #14
 800d290:	e78d      	b.n	800d1ae <consume_markers+0xda>
      cinfo->block_size = 1;
 800d292:	f8c4 91a8 	str.w	r9, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order; /* not needed */
 800d296:	f8c4 51ac 	str.w	r5, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800d29a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d29e:	f04f 0a00 	mov.w	sl, #0
  cinfo->min_DCT_h_scaled_size = cinfo->block_size;
 800d2a2:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d2a6:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
    compptr->quant_table = NULL;
 800d2aa:	46d3      	mov	fp, sl
  cinfo->min_DCT_v_scaled_size = cinfo->block_size;
 800d2ac:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d2b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2b2:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d2b6:	459a      	cmp	sl, r3
 800d2b8:	db41      	blt.n	800d33e <consume_markers+0x26a>
	          (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800d2ba:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    jdiv_round_up((long) cinfo->image_height,
 800d2be:	6a20      	ldr	r0, [r4, #32]
 800d2c0:	4359      	muls	r1, r3
 800d2c2:	f009 fcab 	bl	8016c1c <jdiv_round_up>
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800d2c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2c8:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
  cinfo->total_iMCU_rows = (JDIMENSION)
 800d2cc:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800d2d6:	db03      	blt.n	800d2e0 <consume_markers+0x20c>
 800d2d8:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 800d2dc:	2a00      	cmp	r2, #0
 800d2de:	d063      	beq.n	800d3a8 <consume_markers+0x2d4>
    cinfo->inputctl->has_multiple_scans = TRUE;
 800d2e0:	f8c3 9010 	str.w	r9, [r3, #16]
	if (cinfo->comps_in_scan == 0) { /* pseudo SOS marker */
 800d2e4:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d15f      	bne.n	800d3ac <consume_markers+0x2d8>
	  inputctl->inheaders = 2;
 800d2ec:	2302      	movs	r3, #2
 800d2ee:	61b3      	str	r3, [r6, #24]
	  break;
 800d2f0:	e6fa      	b.n	800d0e8 <consume_markers+0x14>
      cinfo->block_size = 2;
 800d2f2:	2202      	movs	r2, #2
 800d2f4:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order2;
 800d2f8:	4a31      	ldr	r2, [pc, #196]	; (800d3c0 <consume_markers+0x2ec>)
      cinfo->natural_order = jpeg_natural_order7;
 800d2fa:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 800d2fe:	e7cc      	b.n	800d29a <consume_markers+0x1c6>
      cinfo->block_size = 3;
 800d300:	2203      	movs	r2, #3
 800d302:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order3;
 800d306:	4a2f      	ldr	r2, [pc, #188]	; (800d3c4 <consume_markers+0x2f0>)
 800d308:	e7f7      	b.n	800d2fa <consume_markers+0x226>
      cinfo->block_size = 5;
 800d30a:	2205      	movs	r2, #5
 800d30c:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order5;
 800d310:	4a2d      	ldr	r2, [pc, #180]	; (800d3c8 <consume_markers+0x2f4>)
 800d312:	e7f2      	b.n	800d2fa <consume_markers+0x226>
      cinfo->block_size = 7;
 800d314:	2207      	movs	r2, #7
 800d316:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order7;
 800d31a:	4a2c      	ldr	r2, [pc, #176]	; (800d3cc <consume_markers+0x2f8>)
 800d31c:	e7ed      	b.n	800d2fa <consume_markers+0x226>
      cinfo->block_size = 8;
 800d31e:	2208      	movs	r2, #8
 800d320:	f8c4 21a8 	str.w	r2, [r4, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800d324:	e7b7      	b.n	800d296 <consume_markers+0x1c2>
      cinfo->block_size = 9;
 800d326:	2309      	movs	r3, #9
 800d328:	e741      	b.n	800d1ae <consume_markers+0xda>
      cinfo->block_size = 11;
 800d32a:	230b      	movs	r3, #11
 800d32c:	e73f      	b.n	800d1ae <consume_markers+0xda>
      cinfo->block_size = 12;
 800d32e:	230c      	movs	r3, #12
 800d330:	e73d      	b.n	800d1ae <consume_markers+0xda>
      cinfo->block_size = 13;
 800d332:	230d      	movs	r3, #13
 800d334:	e73b      	b.n	800d1ae <consume_markers+0xda>
      cinfo->block_size = 15;
 800d336:	230f      	movs	r3, #15
 800d338:	e739      	b.n	800d1ae <consume_markers+0xda>
      cinfo->block_size = 16;
 800d33a:	2310      	movs	r3, #16
 800d33c:	e737      	b.n	800d1ae <consume_markers+0xda>
    compptr->DCT_v_scaled_size = cinfo->block_size;
 800d33e:	e9c8 1109 	strd	r1, r1, [r8, #36]	; 0x24
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800d342:	f8d8 0008 	ldr.w	r0, [r8, #8]
       ci++, compptr++) {
 800d346:	f10a 0a01 	add.w	sl, sl, #1
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800d34a:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800d34e:	69e3      	ldr	r3, [r4, #28]
 800d350:	4351      	muls	r1, r2
 800d352:	4358      	muls	r0, r3
 800d354:	f009 fc62 	bl	8016c1c <jdiv_round_up>
    compptr->width_in_blocks = (JDIMENSION)
 800d358:	f8c8 001c 	str.w	r0, [r8, #28]
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800d35c:	f8d8 000c 	ldr.w	r0, [r8, #12]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800d360:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800d364:	6a23      	ldr	r3, [r4, #32]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800d366:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800d36a:	4358      	muls	r0, r3
 800d36c:	4351      	muls	r1, r2
 800d36e:	f009 fc55 	bl	8016c1c <jdiv_round_up>
    compptr->height_in_blocks = (JDIMENSION)
 800d372:	f8c8 0020 	str.w	r0, [r8, #32]
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800d376:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800d37a:	69e3      	ldr	r3, [r4, #28]
 800d37c:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800d380:	4358      	muls	r0, r3
 800d382:	f009 fc4b 	bl	8016c1c <jdiv_round_up>
    compptr->downsampled_width = (JDIMENSION)
 800d386:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800d38a:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800d38e:	6a23      	ldr	r3, [r4, #32]
 800d390:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 800d394:	4358      	muls	r0, r3
 800d396:	f009 fc41 	bl	8016c1c <jdiv_round_up>
    compptr->quant_table = NULL;
 800d39a:	f8c8 b050 	str.w	fp, [r8, #80]	; 0x50
    compptr->component_needed = TRUE;
 800d39e:	e9c8 090c 	strd	r0, r9, [r8, #48]	; 0x30
       ci++, compptr++) {
 800d3a2:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800d3a6:	e783      	b.n	800d2b0 <consume_markers+0x1dc>
    cinfo->inputctl->has_multiple_scans = FALSE;
 800d3a8:	611a      	str	r2, [r3, #16]
 800d3aa:	e79b      	b.n	800d2e4 <consume_markers+0x210>
	inputctl->inheaders = 0;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	61b3      	str	r3, [r6, #24]
 800d3b0:	e6b6      	b.n	800d120 <consume_markers+0x4c>
 800d3b2:	bf00      	nop
 800d3b4:	0802f380 	.word	0x0802f380
 800d3b8:	0802f574 	.word	0x0802f574
 800d3bc:	0802f698 	.word	0x0802f698
 800d3c0:	0802f4c0 	.word	0x0802f4c0
 800d3c4:	0802f510 	.word	0x0802f510
 800d3c8:	0802f5f4 	.word	0x0802f5f4
 800d3cc:	0802f768 	.word	0x0802f768
	if (! inputctl->pub.has_multiple_scans)
 800d3d0:	6933      	ldr	r3, [r6, #16]
 800d3d2:	b92b      	cbnz	r3, 800d3e0 <consume_markers+0x30c>
	  ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
 800d3d4:	6823      	ldr	r3, [r4, #0]
 800d3d6:	2224      	movs	r2, #36	; 0x24
 800d3d8:	4620      	mov	r0, r4
 800d3da:	615a      	str	r2, [r3, #20]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	4798      	blx	r3
	if (cinfo->comps_in_scan == 0) /* unexpected pseudo SOS marker */
 800d3e0:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	f43f ae7f 	beq.w	800d0e8 <consume_markers+0x14>
	start_input_pass(cinfo);
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	f7ff fdae 	bl	800cf4c <start_input_pass>
 800d3f0:	e696      	b.n	800d120 <consume_markers+0x4c>
	if (cinfo->output_scan_number > cinfo->input_scan_number)
 800d3f2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800d3f6:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	f77f ae8f 	ble.w	800d11e <consume_markers+0x4a>
	  cinfo->output_scan_number = cinfo->input_scan_number;
 800d400:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 800d404:	e68c      	b.n	800d120 <consume_markers+0x4c>
 800d406:	bf00      	nop

0800d408 <jpeg_core_output_dimensions>:
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800d408:	f8d0 11a8 	ldr.w	r1, [r0, #424]	; 0x1a8
 800d40c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800d40e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d410:	434a      	muls	r2, r1
 800d412:	429a      	cmp	r2, r3
{
 800d414:	b570      	push	{r4, r5, r6, lr}
 800d416:	4604      	mov	r4, r0
 800d418:	69c0      	ldr	r0, [r0, #28]
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 800d41a:	d80c      	bhi.n	800d436 <jpeg_core_output_dimensions+0x2e>
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 800d41c:	f009 fbfe 	bl	8016c1c <jdiv_round_up>
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800d420:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
    cinfo->output_width = (JDIMENSION)
 800d424:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800d426:	6a20      	ldr	r0, [r4, #32]
 800d428:	f009 fbf8 	bl	8016c1c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 1;
 800d42c:	2301      	movs	r3, #1
    cinfo->output_height = (JDIMENSION)
 800d42e:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 16;
 800d430:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
 800d434:	e059      	b.n	800d4ea <jpeg_core_output_dimensions+0xe2>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 2) {
 800d436:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800d43a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800d43e:	d80c      	bhi.n	800d45a <jpeg_core_output_dimensions+0x52>
      jdiv_round_up((long) cinfo->image_width * 2L, (long) cinfo->block_size);
 800d440:	0040      	lsls	r0, r0, #1
 800d442:	f009 fbeb 	bl	8016c1c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d446:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 2L, (long) cinfo->block_size);
 800d448:	6a20      	ldr	r0, [r4, #32]
 800d44a:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d44e:	0040      	lsls	r0, r0, #1
 800d450:	f009 fbe4 	bl	8016c1c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 2;
 800d454:	2302      	movs	r3, #2
    cinfo->output_height = (JDIMENSION)
 800d456:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 2;
 800d458:	e7ea      	b.n	800d430 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 3) {
 800d45a:	441d      	add	r5, r3
 800d45c:	42aa      	cmp	r2, r5
 800d45e:	d80e      	bhi.n	800d47e <jpeg_core_output_dimensions+0x76>
      jdiv_round_up((long) cinfo->image_width * 3L, (long) cinfo->block_size);
 800d460:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d464:	f009 fbda 	bl	8016c1c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d468:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 3L, (long) cinfo->block_size);
 800d46a:	6a20      	ldr	r0, [r4, #32]
 800d46c:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d470:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d474:	f009 fbd2 	bl	8016c1c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 3;
 800d478:	2303      	movs	r3, #3
    cinfo->output_height = (JDIMENSION)
 800d47a:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 3;
 800d47c:	e7d8      	b.n	800d430 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 4) {
 800d47e:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800d482:	ea4f 0583 	mov.w	r5, r3, lsl #2
 800d486:	d80c      	bhi.n	800d4a2 <jpeg_core_output_dimensions+0x9a>
      jdiv_round_up((long) cinfo->image_width * 4L, (long) cinfo->block_size);
 800d488:	0080      	lsls	r0, r0, #2
 800d48a:	f009 fbc7 	bl	8016c1c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d48e:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 4L, (long) cinfo->block_size);
 800d490:	6a20      	ldr	r0, [r4, #32]
 800d492:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d496:	0080      	lsls	r0, r0, #2
 800d498:	f009 fbc0 	bl	8016c1c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 4;
 800d49c:	2304      	movs	r3, #4
    cinfo->output_height = (JDIMENSION)
 800d49e:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 4;
 800d4a0:	e7c6      	b.n	800d430 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 5) {
 800d4a2:	441d      	add	r5, r3
 800d4a4:	42aa      	cmp	r2, r5
 800d4a6:	d80e      	bhi.n	800d4c6 <jpeg_core_output_dimensions+0xbe>
      jdiv_round_up((long) cinfo->image_width * 5L, (long) cinfo->block_size);
 800d4a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d4ac:	f009 fbb6 	bl	8016c1c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d4b0:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 5L, (long) cinfo->block_size);
 800d4b2:	6a20      	ldr	r0, [r4, #32]
 800d4b4:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d4b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d4bc:	f009 fbae 	bl	8016c1c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 5;
 800d4c0:	2305      	movs	r3, #5
    cinfo->output_height = (JDIMENSION)
 800d4c2:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 5;
 800d4c4:	e7b4      	b.n	800d430 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 6) {
 800d4c6:	2506      	movs	r5, #6
 800d4c8:	fb05 f603 	mul.w	r6, r5, r3
 800d4cc:	42b2      	cmp	r2, r6
 800d4ce:	d813      	bhi.n	800d4f8 <jpeg_core_output_dimensions+0xf0>
      jdiv_round_up((long) cinfo->image_width * 14L, (long) cinfo->block_size);
 800d4d0:	4368      	muls	r0, r5
 800d4d2:	f009 fba3 	bl	8016c1c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d4d6:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 14L, (long) cinfo->block_size);
 800d4d8:	6a20      	ldr	r0, [r4, #32]
 800d4da:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d4de:	4368      	muls	r0, r5
 800d4e0:	f009 fb9c 	bl	8016c1c <jdiv_round_up>
    cinfo->output_height = (JDIMENSION)
 800d4e4:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_v_scaled_size = 14;
 800d4e6:	e9c4 5550 	strd	r5, r5, [r4, #320]	; 0x140
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d4ea:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d4f2:	4291      	cmp	r1, r2
 800d4f4:	dc6f      	bgt.n	800d5d6 <jpeg_core_output_dimensions+0x1ce>
}
 800d4f6:	bd70      	pop	{r4, r5, r6, pc}
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 7) {
 800d4f8:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 800d4fc:	00dd      	lsls	r5, r3, #3
 800d4fe:	42b2      	cmp	r2, r6
 800d500:	d80e      	bhi.n	800d520 <jpeg_core_output_dimensions+0x118>
      jdiv_round_up((long) cinfo->image_width * 7L, (long) cinfo->block_size);
 800d502:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800d506:	f009 fb89 	bl	8016c1c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d50a:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 7L, (long) cinfo->block_size);
 800d50c:	6a20      	ldr	r0, [r4, #32]
 800d50e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d512:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800d516:	f009 fb81 	bl	8016c1c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 7;
 800d51a:	2307      	movs	r3, #7
    cinfo->output_height = (JDIMENSION)
 800d51c:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 7;
 800d51e:	e787      	b.n	800d430 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 8) {
 800d520:	42aa      	cmp	r2, r5
 800d522:	d80c      	bhi.n	800d53e <jpeg_core_output_dimensions+0x136>
      jdiv_round_up((long) cinfo->image_width * 8L, (long) cinfo->block_size);
 800d524:	00c0      	lsls	r0, r0, #3
 800d526:	f009 fb79 	bl	8016c1c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d52a:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 8L, (long) cinfo->block_size);
 800d52c:	6a20      	ldr	r0, [r4, #32]
 800d52e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d532:	00c0      	lsls	r0, r0, #3
 800d534:	f009 fb72 	bl	8016c1c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 8;
 800d538:	2308      	movs	r3, #8
    cinfo->output_height = (JDIMENSION)
 800d53a:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 8;
 800d53c:	e778      	b.n	800d430 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 9) {
 800d53e:	441d      	add	r5, r3
 800d540:	42aa      	cmp	r2, r5
 800d542:	d80e      	bhi.n	800d562 <jpeg_core_output_dimensions+0x15a>
      jdiv_round_up((long) cinfo->image_width * 9L, (long) cinfo->block_size);
 800d544:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800d548:	f009 fb68 	bl	8016c1c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d54c:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 9L, (long) cinfo->block_size);
 800d54e:	6a20      	ldr	r0, [r4, #32]
 800d550:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d554:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 800d558:	f009 fb60 	bl	8016c1c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 9;
 800d55c:	2309      	movs	r3, #9
    cinfo->output_height = (JDIMENSION)
 800d55e:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 9;
 800d560:	e766      	b.n	800d430 <jpeg_core_output_dimensions+0x28>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 10) {
 800d562:	250a      	movs	r5, #10
 800d564:	fb05 f603 	mul.w	r6, r5, r3
 800d568:	42b2      	cmp	r2, r6
 800d56a:	d9b1      	bls.n	800d4d0 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 11) {
 800d56c:	250b      	movs	r5, #11
 800d56e:	fb05 f603 	mul.w	r6, r5, r3
 800d572:	42b2      	cmp	r2, r6
 800d574:	d9ac      	bls.n	800d4d0 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 12) {
 800d576:	250c      	movs	r5, #12
 800d578:	fb05 f603 	mul.w	r6, r5, r3
 800d57c:	42b2      	cmp	r2, r6
 800d57e:	d9a7      	bls.n	800d4d0 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 13) {
 800d580:	250d      	movs	r5, #13
 800d582:	fb05 f603 	mul.w	r6, r5, r3
 800d586:	42b2      	cmp	r2, r6
 800d588:	d9a2      	bls.n	800d4d0 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 14) {
 800d58a:	250e      	movs	r5, #14
 800d58c:	fb05 f603 	mul.w	r6, r5, r3
 800d590:	42b2      	cmp	r2, r6
 800d592:	d99d      	bls.n	800d4d0 <jpeg_core_output_dimensions+0xc8>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 15) {
 800d594:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800d598:	429a      	cmp	r2, r3
 800d59a:	ea4f 1300 	mov.w	r3, r0, lsl #4
 800d59e:	d80d      	bhi.n	800d5bc <jpeg_core_output_dimensions+0x1b4>
      jdiv_round_up((long) cinfo->image_width * 15L, (long) cinfo->block_size);
 800d5a0:	1a18      	subs	r0, r3, r0
 800d5a2:	f009 fb3b 	bl	8016c1c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d5a6:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 15L, (long) cinfo->block_size);
 800d5a8:	6a20      	ldr	r0, [r4, #32]
 800d5aa:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d5ae:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800d5b2:	f009 fb33 	bl	8016c1c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 15;
 800d5b6:	230f      	movs	r3, #15
    cinfo->output_height = (JDIMENSION)
 800d5b8:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 15;
 800d5ba:	e739      	b.n	800d430 <jpeg_core_output_dimensions+0x28>
      jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f009 fb2d 	bl	8016c1c <jdiv_round_up>
    cinfo->output_width = (JDIMENSION)
 800d5c2:	6720      	str	r0, [r4, #112]	; 0x70
      jdiv_round_up((long) cinfo->image_height * 16L, (long) cinfo->block_size);
 800d5c4:	6a20      	ldr	r0, [r4, #32]
 800d5c6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
 800d5ca:	0100      	lsls	r0, r0, #4
 800d5cc:	f009 fb26 	bl	8016c1c <jdiv_round_up>
    cinfo->min_DCT_h_scaled_size = 16;
 800d5d0:	2310      	movs	r3, #16
    cinfo->output_height = (JDIMENSION)
 800d5d2:	6760      	str	r0, [r4, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 16;
 800d5d4:	e72c      	b.n	800d430 <jpeg_core_output_dimensions+0x28>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800d5d6:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
       ci++, compptr++) {
 800d5da:	3201      	adds	r2, #1
 800d5dc:	3358      	adds	r3, #88	; 0x58
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 800d5de:	f843 0c34 	str.w	r0, [r3, #-52]
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size;
 800d5e2:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
 800d5e6:	f843 0c30 	str.w	r0, [r3, #-48]
       ci++, compptr++) {
 800d5ea:	e782      	b.n	800d4f2 <jpeg_core_output_dimensions+0xea>

0800d5ec <jinit_input_controller>:
{
  my_inputctl_ptr inputctl;

  /* Create subobject in permanent pool */
  inputctl = (my_inputctl_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800d5ec:	6843      	ldr	r3, [r0, #4]
 800d5ee:	221c      	movs	r2, #28
 800d5f0:	2100      	movs	r1, #0
 800d5f2:	681b      	ldr	r3, [r3, #0]
{
 800d5f4:	b510      	push	{r4, lr}
 800d5f6:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800d5f8:	4798      	blx	r3
				SIZEOF(my_input_controller));
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
  /* Initialize method pointers */
  inputctl->pub.consume_input = consume_markers;
 800d5fa:	4b08      	ldr	r3, [pc, #32]	; (800d61c <jinit_input_controller+0x30>)
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
 800d5fc:	f8c4 01c8 	str.w	r0, [r4, #456]	; 0x1c8
  inputctl->pub.consume_input = consume_markers;
 800d600:	6003      	str	r3, [r0, #0]
  inputctl->pub.reset_input_controller = reset_input_controller;
 800d602:	4b07      	ldr	r3, [pc, #28]	; (800d620 <jinit_input_controller+0x34>)
 800d604:	6043      	str	r3, [r0, #4]
  inputctl->pub.start_input_pass = start_input_pass;
 800d606:	4b07      	ldr	r3, [pc, #28]	; (800d624 <jinit_input_controller+0x38>)
 800d608:	6083      	str	r3, [r0, #8]
  inputctl->pub.finish_input_pass = finish_input_pass;
 800d60a:	4b07      	ldr	r3, [pc, #28]	; (800d628 <jinit_input_controller+0x3c>)
 800d60c:	60c3      	str	r3, [r0, #12]
  /* Initialize state: can't use reset_input_controller since we don't
   * want to try to reset other modules yet.
   */
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800d60e:	2300      	movs	r3, #0
  inputctl->pub.eoi_reached = FALSE;
 800d610:	e9c0 3304 	strd	r3, r3, [r0, #16]
  inputctl->inheaders = 1;
 800d614:	2301      	movs	r3, #1
 800d616:	6183      	str	r3, [r0, #24]
}
 800d618:	bd10      	pop	{r4, pc}
 800d61a:	bf00      	nop
 800d61c:	0800d0d5 	.word	0x0800d0d5
 800d620:	0800cf1d 	.word	0x0800cf1d
 800d624:	0800cf4d 	.word	0x0800cf4d
 800d628:	0800cf0d 	.word	0x0800cf0d

0800d62c <process_data_simple_main>:

METHODDEF(void)
process_data_simple_main (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
 800d62c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d630:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800d634:	4698      	mov	r8, r3
 800d636:	460e      	mov	r6, r1
 800d638:	b087      	sub	sp, #28
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800d63a:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800d63c:	4605      	mov	r5, r0
 800d63e:	4617      	mov	r7, r2
 800d640:	f104 0108 	add.w	r1, r4, #8
  if (! main->buffer_full) {
 800d644:	b943      	cbnz	r3, 800d658 <process_data_simple_main+0x2c>
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800d646:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
 800d64a:	9105      	str	r1, [sp, #20]
 800d64c:	68db      	ldr	r3, [r3, #12]
 800d64e:	4798      	blx	r3
 800d650:	b1a8      	cbz	r0, 800d67e <process_data_simple_main+0x52>
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800d652:	2301      	movs	r3, #1
 800d654:	9905      	ldr	r1, [sp, #20]
 800d656:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_v_scaled_size;
 800d658:	f8d5 9144 	ldr.w	r9, [r5, #324]	; 0x144
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main->buffer,
 800d65c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800d660:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800d664:	4628      	mov	r0, r5
 800d666:	9600      	str	r6, [sp, #0]
 800d668:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800d66c:	685e      	ldr	r6, [r3, #4]
 800d66e:	464b      	mov	r3, r9
 800d670:	47b0      	blx	r6
				     &main->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main->rowgroup_ctr >= rowgroups_avail) {
 800d672:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d674:	454b      	cmp	r3, r9
    main->buffer_full = FALSE;
 800d676:	bf24      	itt	cs
 800d678:	2300      	movcs	r3, #0
    main->rowgroup_ctr = 0;
 800d67a:	e9c4 330c 	strdcs	r3, r3, [r4, #48]	; 0x30
  }
}
 800d67e:	b007      	add	sp, #28
 800d680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d684 <process_data_context_main>:

METHODDEF(void)
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
 800d684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d688:	f8d0 41bc 	ldr.w	r4, [r0, #444]	; 0x1bc
{
 800d68c:	4698      	mov	r8, r3
 800d68e:	b08b      	sub	sp, #44	; 0x2c
 800d690:	4605      	mov	r5, r0

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800d692:	6b23      	ldr	r3, [r4, #48]	; 0x30
{
 800d694:	4689      	mov	r9, r1
 800d696:	4617      	mov	r7, r2
  if (! main->buffer_full) {
 800d698:	b973      	cbnz	r3, 800d6b8 <process_data_context_main+0x34>
    if (! (*cinfo->coef->decompress_data) (cinfo,
 800d69a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d69c:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
 800d6a0:	330e      	adds	r3, #14
 800d6a2:	68d2      	ldr	r2, [r2, #12]
 800d6a4:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800d6a8:	4790      	blx	r2
 800d6aa:	2800      	cmp	r0, #0
 800d6ac:	d05a      	beq.n	800d764 <process_data_context_main+0xe0>
					   main->xbuffer[main->whichptr]))
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	6323      	str	r3, [r4, #48]	; 0x30
    main->iMCU_row_ctr++;	/* count rows received */
 800d6b2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	64e3      	str	r3, [r4, #76]	; 0x4c
  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main->context_state) {
 800d6b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d6ba:	2b01      	cmp	r3, #1
 800d6bc:	d011      	beq.n	800d6e2 <process_data_context_main+0x5e>
 800d6be:	2b02      	cmp	r3, #2
 800d6c0:	d036      	beq.n	800d730 <process_data_context_main+0xac>
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d14e      	bne.n	800d764 <process_data_context_main+0xe0>
      return;			/* Postprocessor exactly filled output buf */
    /*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
    /* Prepare to process first M-1 row groups of this iMCU row */
    main->rowgroup_ctr = 0;
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800d6c6:	f8d5 c144 	ldr.w	ip, [r5, #324]	; 0x144
    main->rowgroup_ctr = 0;
 800d6ca:	2600      	movs	r6, #0
    /* Check for bottom of image: if so, tweak pointers to "duplicate"
     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
     */
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800d6cc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800d6ce:	f10c 33ff 	add.w	r3, ip, #4294967295
    main->rowgroup_ctr = 0;
 800d6d2:	6366      	str	r6, [r4, #52]	; 0x34
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800d6d4:	64a3      	str	r3, [r4, #72]	; 0x48
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800d6d6:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d045      	beq.n	800d76a <process_data_context_main+0xe6>
      set_bottom_pointers(cinfo);
    main->context_state = CTX_PROCESS_IMCU;
 800d6de:	2301      	movs	r3, #1
 800d6e0:	6463      	str	r3, [r4, #68]	; 0x44
    /*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
    /* Call postprocessor using previously set pointers */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800d6e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6e4:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	f103 010e 	add.w	r1, r3, #14
 800d6ee:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800d6f2:	f8cd 9000 	str.w	r9, [sp]
 800d6f6:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800d6fa:	685e      	ldr	r6, [r3, #4]
 800d6fc:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800d700:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d702:	47b0      	blx	r6
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800d704:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d706:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d708:	429a      	cmp	r2, r3
 800d70a:	d32b      	bcc.n	800d764 <process_data_context_main+0xe0>
      return;			/* Need to suspend */
    /* After the first iMCU, change wraparound pointers to normal state */
    if (main->iMCU_row_ctr == 1)
 800d70c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d70e:	f8d5 0144 	ldr.w	r0, [r5, #324]	; 0x144
 800d712:	2b01      	cmp	r3, #1
 800d714:	d063      	beq.n	800d7de <process_data_context_main+0x15a>
      set_wraparound_pointers(cinfo);
    /* Prepare to load new iMCU row using other xbuffer list */
    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
 800d716:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d718:	f083 0301 	eor.w	r3, r3, #1
 800d71c:	6423      	str	r3, [r4, #64]	; 0x40
    main->buffer_full = FALSE;
 800d71e:	2300      	movs	r3, #0
 800d720:	6323      	str	r3, [r4, #48]	; 0x30
    /* Still need to process last row group of this iMCU row, */
    /* which is saved at index M+1 of the other xbuffer */
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800d722:	1c43      	adds	r3, r0, #1
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800d724:	3002      	adds	r0, #2
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800d726:	6363      	str	r3, [r4, #52]	; 0x34
    main->context_state = CTX_POSTPONED_ROW;
 800d728:	2302      	movs	r3, #2
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800d72a:	64a0      	str	r0, [r4, #72]	; 0x48
    main->context_state = CTX_POSTPONED_ROW;
 800d72c:	6463      	str	r3, [r4, #68]	; 0x44
 800d72e:	e019      	b.n	800d764 <process_data_context_main+0xe0>
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800d730:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d732:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800d736:	4628      	mov	r0, r5
 800d738:	f103 010e 	add.w	r1, r3, #14
 800d73c:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
 800d740:	f8cd 9000 	str.w	r9, [sp]
 800d744:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800d748:	685e      	ldr	r6, [r3, #4]
 800d74a:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800d74e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d750:	47b0      	blx	r6
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800d752:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d754:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800d756:	429a      	cmp	r2, r3
 800d758:	d304      	bcc.n	800d764 <process_data_context_main+0xe0>
    main->context_state = CTX_PREPARE_FOR_IMCU;
 800d75a:	2300      	movs	r3, #0
 800d75c:	6463      	str	r3, [r4, #68]	; 0x44
    if (*out_row_ctr >= out_rows_avail)
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	4543      	cmp	r3, r8
 800d762:	d3b0      	bcc.n	800d6c6 <process_data_context_main+0x42>
  }
}
 800d764:	b00b      	add	sp, #44	; 0x2c
 800d766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d76a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d76c:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d770:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d774:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
 800d778:	9206      	str	r2, [sp, #24]
 800d77a:	9a06      	ldr	r2, [sp, #24]
 800d77c:	4296      	cmp	r6, r2
 800d77e:	daae      	bge.n	800d6de <process_data_context_main+0x5a>
    iMCUheight = compptr->v_samp_factor * compptr->DCT_v_scaled_size;
 800d780:	68d8      	ldr	r0, [r3, #12]
 800d782:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d784:	4342      	muls	r2, r0
    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
 800d786:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d788:	fbb0 fbf2 	udiv	fp, r0, r2
 800d78c:	fb02 001b 	mls	r0, r2, fp, r0
    rgroup = iMCUheight / cinfo->min_DCT_v_scaled_size;
 800d790:	fb92 fafc 	sdiv	sl, r2, ip
    if (rows_left == 0) rows_left = iMCUheight;
 800d794:	2800      	cmp	r0, #0
 800d796:	bf08      	it	eq
 800d798:	4610      	moveq	r0, r2
    if (ci == 0) {
 800d79a:	b926      	cbnz	r6, 800d7a6 <process_data_context_main+0x122>
      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
 800d79c:	1e42      	subs	r2, r0, #1
 800d79e:	fb92 f2fa 	sdiv	r2, r2, sl
 800d7a2:	3201      	adds	r2, #1
 800d7a4:	648a      	str	r2, [r1, #72]	; 0x48
    xbuf = main->xbuffer[main->whichptr][ci];
 800d7a6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d7a8:	4470      	add	r0, lr
    for (i = 0; i < rgroup * 2; i++) {
 800d7aa:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    xbuf = main->xbuffer[main->whichptr][ci];
 800d7ae:	320e      	adds	r2, #14
 800d7b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800d7b4:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d7b8:	eb02 0b80 	add.w	fp, r2, r0, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800d7bc:	2200      	movs	r2, #0
 800d7be:	4658      	mov	r0, fp
 800d7c0:	3004      	adds	r0, #4
 800d7c2:	9205      	str	r2, [sp, #20]
 800d7c4:	9a05      	ldr	r2, [sp, #20]
 800d7c6:	4552      	cmp	r2, sl
 800d7c8:	db02      	blt.n	800d7d0 <process_data_context_main+0x14c>
       ci++, compptr++) {
 800d7ca:	3601      	adds	r6, #1
 800d7cc:	3358      	adds	r3, #88	; 0x58
 800d7ce:	e7d4      	b.n	800d77a <process_data_context_main+0xf6>
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800d7d0:	f8db 2000 	ldr.w	r2, [fp]
 800d7d4:	f840 2b04 	str.w	r2, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800d7d8:	9a05      	ldr	r2, [sp, #20]
 800d7da:	3201      	adds	r2, #1
 800d7dc:	e7f1      	b.n	800d7c2 <process_data_context_main+0x13e>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d7de:	f8d5 30d8 	ldr.w	r3, [r5, #216]	; 0xd8
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d7e2:	f8d5 81bc 	ldr.w	r8, [r5, #444]	; 0x1bc
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d7e6:	9305      	str	r3, [sp, #20]
 800d7e8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d7ea:	2500      	movs	r5, #0
 800d7ec:	9307      	str	r3, [sp, #28]
 800d7ee:	1c43      	adds	r3, r0, #1
 800d7f0:	9308      	str	r3, [sp, #32]
 800d7f2:	9b07      	ldr	r3, [sp, #28]
 800d7f4:	429d      	cmp	r5, r3
 800d7f6:	da8e      	bge.n	800d716 <process_data_context_main+0x92>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d7f8:	9b05      	ldr	r3, [sp, #20]
 800d7fa:	9a05      	ldr	r2, [sp, #20]
 800d7fc:	68db      	ldr	r3, [r3, #12]
 800d7fe:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d800:	435a      	muls	r2, r3
    xbuf0 = main->xbuffer[0][ci];
 800d802:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d806:	fb92 f2f0 	sdiv	r2, r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800d80a:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800d80e:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800d812:	f853 c025 	ldr.w	ip, [r3, r5, lsl #2]
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800d816:	9b08      	ldr	r3, [sp, #32]
 800d818:	4353      	muls	r3, r2
 800d81a:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 800d81e:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800d822:	4413      	add	r3, r2
 800d824:	9106      	str	r1, [sp, #24]
 800d826:	eb07 0983 	add.w	r9, r7, r3, lsl #2
 800d82a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800d82e:	461e      	mov	r6, r3
 800d830:	f06f 0303 	mvn.w	r3, #3
 800d834:	fb03 fe02 	mul.w	lr, r3, r2
 800d838:	eb07 010e 	add.w	r1, r7, lr
 800d83c:	44e6      	add	lr, ip
 800d83e:	9109      	str	r1, [sp, #36]	; 0x24
    for (i = 0; i < rgroup; i++) {
 800d840:	2100      	movs	r1, #0
 800d842:	428a      	cmp	r2, r1
 800d844:	dc04      	bgt.n	800d850 <process_data_context_main+0x1cc>
       ci++, compptr++) {
 800d846:	9b05      	ldr	r3, [sp, #20]
 800d848:	3501      	adds	r5, #1
 800d84a:	3358      	adds	r3, #88	; 0x58
 800d84c:	9305      	str	r3, [sp, #20]
 800d84e:	e7d0      	b.n	800d7f2 <process_data_context_main+0x16e>
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800d850:	9b06      	ldr	r3, [sp, #24]
 800d852:	f853 bb04 	ldr.w	fp, [r3], #4
 800d856:	9306      	str	r3, [sp, #24]
 800d858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d85a:	f843 b021 	str.w	fp, [r3, r1, lsl #2]
      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 800d85e:	f85a bb04 	ldr.w	fp, [sl], #4
 800d862:	f84e b021 	str.w	fp, [lr, r1, lsl #2]
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800d866:	f857 3021 	ldr.w	r3, [r7, r1, lsl #2]
 800d86a:	f849 3b04 	str.w	r3, [r9], #4
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800d86e:	f85c 3021 	ldr.w	r3, [ip, r1, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800d872:	3101      	adds	r1, #1
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800d874:	f846 3b04 	str.w	r3, [r6], #4
    for (i = 0; i < rgroup; i++) {
 800d878:	e7e3      	b.n	800d842 <process_data_context_main+0x1be>

0800d87a <process_data_crank_post>:

METHODDEF(void)
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
 800d87a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
 800d87c:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
 800d880:	9100      	str	r1, [sp, #0]
 800d882:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800d886:	2300      	movs	r3, #0
 800d888:	6864      	ldr	r4, [r4, #4]
 800d88a:	461a      	mov	r2, r3
 800d88c:	4619      	mov	r1, r3
 800d88e:	47a0      	blx	r4
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}
 800d890:	b004      	add	sp, #16
 800d892:	bd10      	pop	{r4, pc}

0800d894 <start_pass_main>:
{
 800d894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d898:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
{
 800d89c:	4602      	mov	r2, r0
  switch (pass_mode) {
 800d89e:	b149      	cbz	r1, 800d8b4 <start_pass_main+0x20>
 800d8a0:	2902      	cmp	r1, #2
 800d8a2:	d070      	beq.n	800d986 <start_pass_main+0xf2>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800d8a4:	6803      	ldr	r3, [r0, #0]
 800d8a6:	2203      	movs	r2, #3
 800d8a8:	615a      	str	r2, [r3, #20]
 800d8aa:	681b      	ldr	r3, [r3, #0]
}
 800d8ac:	b003      	add	sp, #12
 800d8ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800d8b2:	4718      	bx	r3
    if (cinfo->upsample->need_context_rows) {
 800d8b4:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
 800d8b8:	6880      	ldr	r0, [r0, #8]
 800d8ba:	2800      	cmp	r0, #0
 800d8bc:	d060      	beq.n	800d980 <start_pass_main+0xec>
  int M = cinfo->min_DCT_v_scaled_size;
 800d8be:	f8d2 7144 	ldr.w	r7, [r2, #324]	; 0x144
 800d8c2:	f103 0e08 	add.w	lr, r3, #8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d8c6:	f8d2 60d8 	ldr.w	r6, [r2, #216]	; 0xd8
 800d8ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
      main->pub.process_data = process_data_context_main;
 800d8cc:	482f      	ldr	r0, [pc, #188]	; (800d98c <start_pass_main+0xf8>)
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d8ce:	9200      	str	r2, [sp, #0]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d8d0:	1cba      	adds	r2, r7, #2
      main->pub.process_data = process_data_context_main;
 800d8d2:	6058      	str	r0, [r3, #4]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d8d4:	9201      	str	r2, [sp, #4]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d8d6:	9a00      	ldr	r2, [sp, #0]
 800d8d8:	4291      	cmp	r1, r2
 800d8da:	db09      	blt.n	800d8f0 <start_pass_main+0x5c>
      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
 800d8dc:	2200      	movs	r2, #0
      main->context_state = CTX_PREPARE_FOR_IMCU;
 800d8de:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
      main->iMCU_row_ctr = 0;
 800d8e2:	64da      	str	r2, [r3, #76]	; 0x4c
    main->buffer_full = FALSE;	/* Mark buffer empty */
 800d8e4:	2200      	movs	r2, #0
    main->rowgroup_ctr = 0;
 800d8e6:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
}
 800d8ea:	b003      	add	sp, #12
 800d8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d8f0:	68f0      	ldr	r0, [r6, #12]
 800d8f2:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d8f4:	9d01      	ldr	r5, [sp, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d8f6:	4342      	muls	r2, r0
    xbuf0 = main->xbuffer[0][ci];
 800d8f8:	6b98      	ldr	r0, [r3, #56]	; 0x38
    buf = main->buffer[ci];
 800d8fa:	f85e 4b04 	ldr.w	r4, [lr], #4
    xbuf0 = main->xbuffer[0][ci];
 800d8fe:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
    xbuf1 = main->xbuffer[1][ci];
 800d902:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800d904:	fb92 f2f7 	sdiv	r2, r2, r7
    xbuf1 = main->xbuffer[1][ci];
 800d908:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d90c:	fb02 f905 	mul.w	r9, r2, r5
 800d910:	2500      	movs	r5, #0
 800d912:	454d      	cmp	r5, r9
 800d914:	db1c      	blt.n	800d950 <start_pass_main+0xbc>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d916:	fb02 fb07 	mul.w	fp, r2, r7
 800d91a:	f06f 0501 	mvn.w	r5, #1
    for (i = 0; i < rgroup * 2; i++) {
 800d91e:	ea4f 0a42 	mov.w	sl, r2, lsl #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d922:	fb05 b502 	mla	r5, r5, r2, fp
 800d926:	eb04 088b 	add.w	r8, r4, fp, lsl #2
 800d92a:	eb00 0985 	add.w	r9, r0, r5, lsl #2
 800d92e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    for (i = 0; i < rgroup * 2; i++) {
 800d932:	2400      	movs	r4, #0
 800d934:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 800d938:	4554      	cmp	r4, sl
 800d93a:	db11      	blt.n	800d960 <start_pass_main+0xcc>
 800d93c:	f06f 0003 	mvn.w	r0, #3
    for (i = 0; i < rgroup; i++) {
 800d940:	2400      	movs	r4, #0
 800d942:	fb00 c502 	mla	r5, r0, r2, ip
 800d946:	42a2      	cmp	r2, r4
 800d948:	dc14      	bgt.n	800d974 <start_pass_main+0xe0>
       ci++, compptr++) {
 800d94a:	3101      	adds	r1, #1
 800d94c:	3658      	adds	r6, #88	; 0x58
 800d94e:	e7c2      	b.n	800d8d6 <start_pass_main+0x42>
      xbuf0[i] = xbuf1[i] = buf[i];
 800d950:	f854 8025 	ldr.w	r8, [r4, r5, lsl #2]
 800d954:	f840 8025 	str.w	r8, [r0, r5, lsl #2]
 800d958:	f84c 8025 	str.w	r8, [ip, r5, lsl #2]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800d95c:	3501      	adds	r5, #1
 800d95e:	e7d8      	b.n	800d912 <start_pass_main+0x7e>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d960:	f858 bb04 	ldr.w	fp, [r8], #4
    for (i = 0; i < rgroup * 2; i++) {
 800d964:	3401      	adds	r4, #1
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800d966:	f849 bb04 	str.w	fp, [r9], #4
      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 800d96a:	f855 bb04 	ldr.w	fp, [r5], #4
 800d96e:	f840 bb04 	str.w	fp, [r0], #4
    for (i = 0; i < rgroup * 2; i++) {
 800d972:	e7e1      	b.n	800d938 <start_pass_main+0xa4>
      xbuf0[i - rgroup] = xbuf0[0];
 800d974:	f8dc 0000 	ldr.w	r0, [ip]
 800d978:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
    for (i = 0; i < rgroup; i++) {
 800d97c:	3401      	adds	r4, #1
 800d97e:	e7e2      	b.n	800d946 <start_pass_main+0xb2>
      main->pub.process_data = process_data_simple_main;
 800d980:	4a03      	ldr	r2, [pc, #12]	; (800d990 <start_pass_main+0xfc>)
 800d982:	605a      	str	r2, [r3, #4]
 800d984:	e7ae      	b.n	800d8e4 <start_pass_main+0x50>
    main->pub.process_data = process_data_crank_post;
 800d986:	4a03      	ldr	r2, [pc, #12]	; (800d994 <start_pass_main+0x100>)
 800d988:	605a      	str	r2, [r3, #4]
    break;
 800d98a:	e7ae      	b.n	800d8ea <start_pass_main+0x56>
 800d98c:	0800d685 	.word	0x0800d685
 800d990:	0800d62d 	.word	0x0800d62d
 800d994:	0800d87b 	.word	0x0800d87b

0800d998 <jinit_d_main_controller>:
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 800d998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_main_ptr main;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d99c:	6843      	ldr	r3, [r0, #4]
{
 800d99e:	460d      	mov	r5, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d9a0:	2250      	movs	r2, #80	; 0x50
 800d9a2:	2101      	movs	r1, #1
 800d9a4:	681b      	ldr	r3, [r3, #0]
{
 800d9a6:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d9a8:	4798      	blx	r3
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_d_main_controller *) main;
  main->pub.start_pass = start_pass_main;
 800d9aa:	4b3a      	ldr	r3, [pc, #232]	; (800da94 <jinit_d_main_controller+0xfc>)
  cinfo->main = (struct jpeg_d_main_controller *) main;
 800d9ac:	f8c4 01bc 	str.w	r0, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d9b0:	4606      	mov	r6, r0
  main->pub.start_pass = start_pass_main;
 800d9b2:	6003      	str	r3, [r0, #0]

  if (need_full_buffer)		/* shouldn't happen */
 800d9b4:	b12d      	cbz	r5, 800d9c2 <jinit_d_main_controller+0x2a>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800d9b6:	6823      	ldr	r3, [r4, #0]
 800d9b8:	2203      	movs	r2, #3
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	615a      	str	r2, [r3, #20]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	4798      	blx	r3

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
 800d9c2:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 800d9c6:	f8d4 5144 	ldr.w	r5, [r4, #324]	; 0x144
 800d9ca:	689b      	ldr	r3, [r3, #8]
 800d9cc:	b31b      	cbz	r3, 800da16 <jinit_d_main_controller+0x7e>
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800d9ce:	2d01      	cmp	r5, #1
 800d9d0:	dc05      	bgt.n	800d9de <jinit_d_main_controller+0x46>
      ERREXIT(cinfo, JERR_NOTIMPL);
 800d9d2:	6823      	ldr	r3, [r4, #0]
 800d9d4:	2230      	movs	r2, #48	; 0x30
 800d9d6:	4620      	mov	r0, r4
 800d9d8:	615a      	str	r2, [r3, #20]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d9de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d9e0:	2101      	movs	r1, #1
 800d9e2:	6863      	ldr	r3, [r4, #4]
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	00d2      	lsls	r2, r2, #3
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800d9e8:	f8d4 71bc 	ldr.w	r7, [r4, #444]	; 0x1bc
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d9ec:	681b      	ldr	r3, [r3, #0]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d9ee:	f04f 0800 	mov.w	r8, #0
  int M = cinfo->min_DCT_v_scaled_size;
 800d9f2:	f8d4 9144 	ldr.w	r9, [r4, #324]	; 0x144
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d9f6:	4798      	blx	r3
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800d9f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  main->xbuffer[0] = (JSAMPIMAGE)
 800d9fa:	63b8      	str	r0, [r7, #56]	; 0x38
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800d9fc:	f109 0904 	add.w	r9, r9, #4
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800da00:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800da04:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800da08:	63f8      	str	r0, [r7, #60]	; 0x3c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800da0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da0c:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
 800da10:	4598      	cmp	r8, r3
 800da12:	db0a      	blt.n	800da2a <jinit_d_main_controller+0x92>
    alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
    ngroups = cinfo->min_DCT_v_scaled_size + 2;
 800da14:	1c85      	adds	r5, r0, #2
  } else {
    ngroups = cinfo->min_DCT_v_scaled_size;
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800da16:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800da1a:	3608      	adds	r6, #8
 800da1c:	f04f 0800 	mov.w	r8, #0
 800da20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da22:	4543      	cmp	r3, r8
 800da24:	dc1d      	bgt.n	800da62 <jinit_d_main_controller+0xca>
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_h_scaled_size,
			 (JDIMENSION) (rgroup * ngroups));
  }
}
 800da26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800da2a:	68ea      	ldr	r2, [r5, #12]
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800da2c:	2101      	movs	r1, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800da2e:	6aab      	ldr	r3, [r5, #40]	; 0x28
       ci++, compptr++) {
 800da30:	3558      	adds	r5, #88	; 0x58
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800da32:	4353      	muls	r3, r2
 800da34:	fb93 fbf0 	sdiv	fp, r3, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800da38:	6863      	ldr	r3, [r4, #4]
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800da3a:	fb0b fa09 	mul.w	sl, fp, r9
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800da3e:	4620      	mov	r0, r4
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800da46:	4798      	blx	r3
    main->xbuffer[0][ci] = xbuf;
 800da48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    xbuf += rgroup;		/* want one row group at negative offsets */
 800da4a:	eb00 008b 	add.w	r0, r0, fp, lsl #2
    main->xbuffer[0][ci] = xbuf;
 800da4e:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
    xbuf += rgroup * (M + 4);
 800da52:	eb00 008a 	add.w	r0, r0, sl, lsl #2
    main->xbuffer[1][ci] = xbuf;
 800da56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da58:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
       ci++, compptr++) {
 800da5c:	f108 0801 	add.w	r8, r8, #1
 800da60:	e7d3      	b.n	800da0a <jinit_d_main_controller+0x72>
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800da62:	68fa      	ldr	r2, [r7, #12]
       ci++, compptr++) {
 800da64:	f108 0801 	add.w	r8, r8, #1
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800da68:	6abb      	ldr	r3, [r7, #40]	; 0x28
       ci++, compptr++) {
 800da6a:	3758      	adds	r7, #88	; 0x58
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800da6c:	f857 1c34 	ldr.w	r1, [r7, #-52]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800da70:	4353      	muls	r3, r2
 800da72:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800da76:	6860      	ldr	r0, [r4, #4]
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800da78:	fb93 f3f2 	sdiv	r3, r3, r2
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800da7c:	f857 2c3c 	ldr.w	r2, [r7, #-60]
 800da80:	436b      	muls	r3, r5
 800da82:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800da86:	4620      	mov	r0, r4
 800da88:	434a      	muls	r2, r1
 800da8a:	2101      	movs	r1, #1
 800da8c:	47c8      	blx	r9
 800da8e:	f846 0b04 	str.w	r0, [r6], #4
       ci++, compptr++) {
 800da92:	e7c5      	b.n	800da20 <jinit_d_main_controller+0x88>
 800da94:	0800d895 	.word	0x0800d895

0800da98 <get_sof>:

LOCAL(boolean)
get_sof (j_decompress_ptr cinfo, boolean is_baseline, boolean is_prog,
	 boolean is_arith)
/* Process a SOFn marker */
{
 800da98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);
 800da9c:	6986      	ldr	r6, [r0, #24]
{
 800da9e:	4604      	mov	r4, r0
  INPUT_VARS(cinfo);
 800daa0:	e9d6 c500 	ldrd	ip, r5, [r6]

  cinfo->is_baseline = is_baseline;
  cinfo->progressive_mode = is_prog;
 800daa4:	e9c0 1237 	strd	r1, r2, [r0, #220]	; 0xdc
  cinfo->arith_code = is_arith;
 800daa8:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4

  INPUT_2BYTES(cinfo, length, return FALSE);
 800daac:	b93d      	cbnz	r5, 800dabe <get_sof+0x26>
 800daae:	68f3      	ldr	r3, [r6, #12]
 800dab0:	4798      	blx	r3
 800dab2:	b910      	cbnz	r0, 800daba <get_sof+0x22>
 800dab4:	2000      	movs	r0, #0

  cinfo->marker->saw_SOF = TRUE;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800dab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800daba:	e9d6 c500 	ldrd	ip, r5, [r6]
 800dabe:	1e6b      	subs	r3, r5, #1
 800dac0:	f89c 7000 	ldrb.w	r7, [ip]
 800dac4:	f000 8087 	beq.w	800dbd6 <get_sof+0x13e>
 800dac8:	f10c 0501 	add.w	r5, ip, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800dacc:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dace:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800dad2:	f000 8089 	beq.w	800dbe8 <get_sof+0x150>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dad6:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800dad8:	782a      	ldrb	r2, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800dada:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800dadc:	f8c4 20d4 	str.w	r2, [r4, #212]	; 0xd4
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800dae0:	f000 808b 	beq.w	800dbfa <get_sof+0x162>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800dae4:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800dae6:	782a      	ldrb	r2, [r5, #0]
 800dae8:	3b01      	subs	r3, #1
 800daea:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800daee:	6222      	str	r2, [r4, #32]
 800daf0:	f000 808c 	beq.w	800dc0c <get_sof+0x174>
 800daf4:	3501      	adds	r5, #1
 800daf6:	7829      	ldrb	r1, [r5, #0]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800daf8:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800dafa:	6a22      	ldr	r2, [r4, #32]
 800dafc:	440a      	add	r2, r1
 800dafe:	6222      	str	r2, [r4, #32]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800db00:	f000 808d 	beq.w	800dc1e <get_sof+0x186>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800db04:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800db06:	782a      	ldrb	r2, [r5, #0]
 800db08:	3b01      	subs	r3, #1
 800db0a:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800db0e:	61e2      	str	r2, [r4, #28]
 800db10:	f000 808e 	beq.w	800dc30 <get_sof+0x198>
 800db14:	3501      	adds	r5, #1
 800db16:	7829      	ldrb	r1, [r5, #0]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800db18:	3b01      	subs	r3, #1
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800db1a:	69e2      	ldr	r2, [r4, #28]
 800db1c:	440a      	add	r2, r1
 800db1e:	61e2      	str	r2, [r4, #28]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800db20:	f000 808f 	beq.w	800dc42 <get_sof+0x1aa>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800db24:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800db26:	f103 39ff 	add.w	r9, r3, #4294967295
 800db2a:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800db2e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
 800db32:	2101      	movs	r1, #1
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800db34:	6263      	str	r3, [r4, #36]	; 0x24
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800db36:	4620      	mov	r0, r4
 800db38:	6823      	ldr	r3, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800db3a:	eb08 2707 	add.w	r7, r8, r7, lsl #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800db3e:	619a      	str	r2, [r3, #24]
  length -= 8;
 800db40:	3f08      	subs	r7, #8
  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800db42:	69e2      	ldr	r2, [r4, #28]
 800db44:	61da      	str	r2, [r3, #28]
 800db46:	6a22      	ldr	r2, [r4, #32]
 800db48:	621a      	str	r2, [r3, #32]
 800db4a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800db4c:	625a      	str	r2, [r3, #36]	; 0x24
 800db4e:	2266      	movs	r2, #102	; 0x66
 800db50:	615a      	str	r2, [r3, #20]
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	4798      	blx	r3
  if (cinfo->marker->saw_SOF)
 800db56:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800db5a:	691b      	ldr	r3, [r3, #16]
 800db5c:	b12b      	cbz	r3, 800db6a <get_sof+0xd2>
    ERREXIT(cinfo, JERR_SOF_DUPLICATE);
 800db5e:	6823      	ldr	r3, [r4, #0]
 800db60:	223c      	movs	r2, #60	; 0x3c
 800db62:	4620      	mov	r0, r4
 800db64:	615a      	str	r2, [r3, #20]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	4798      	blx	r3
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
 800db6a:	6a23      	ldr	r3, [r4, #32]
 800db6c:	b123      	cbz	r3, 800db78 <get_sof+0xe0>
 800db6e:	69e3      	ldr	r3, [r4, #28]
 800db70:	b113      	cbz	r3, 800db78 <get_sof+0xe0>
      || cinfo->num_components <= 0)
 800db72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db74:	2b00      	cmp	r3, #0
 800db76:	dc05      	bgt.n	800db84 <get_sof+0xec>
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 800db78:	6823      	ldr	r3, [r4, #0]
 800db7a:	2221      	movs	r2, #33	; 0x21
 800db7c:	4620      	mov	r0, r4
 800db7e:	615a      	str	r2, [r3, #20]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	4798      	blx	r3
  if (length != (cinfo->num_components * 3))
 800db84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800db8a:	42bb      	cmp	r3, r7
 800db8c:	d005      	beq.n	800db9a <get_sof+0x102>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800db8e:	6823      	ldr	r3, [r4, #0]
 800db90:	220c      	movs	r2, #12
 800db92:	4620      	mov	r0, r4
 800db94:	615a      	str	r2, [r3, #20]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	4798      	blx	r3
  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
 800db9a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800db9e:	b94b      	cbnz	r3, 800dbb4 <get_sof+0x11c>
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
 800dba0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800dba2:	2158      	movs	r1, #88	; 0x58
 800dba4:	6863      	ldr	r3, [r4, #4]
 800dba6:	4620      	mov	r0, r4
 800dba8:	434a      	muls	r2, r1
 800dbaa:	2101      	movs	r1, #1
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	4798      	blx	r3
 800dbb0:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800dbb4:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
 800dbb8:	f04f 0800 	mov.w	r8, #0
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800dbbc:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800dbc0:	3758      	adds	r7, #88	; 0x58
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800dbc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbc4:	4543      	cmp	r3, r8
 800dbc6:	dc45      	bgt.n	800dc54 <get_sof+0x1bc>
  cinfo->marker->saw_SOF = TRUE;
 800dbc8:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800dbcc:	2001      	movs	r0, #1
 800dbce:	6118      	str	r0, [r3, #16]
  INPUT_SYNC(cinfo);
 800dbd0:	e9c6 5900 	strd	r5, r9, [r6]
  return TRUE;
 800dbd4:	e76f      	b.n	800dab6 <get_sof+0x1e>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dbd6:	68f3      	ldr	r3, [r6, #12]
 800dbd8:	4620      	mov	r0, r4
 800dbda:	4798      	blx	r3
 800dbdc:	2800      	cmp	r0, #0
 800dbde:	f43f af69 	beq.w	800dab4 <get_sof+0x1c>
 800dbe2:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dbe6:	e771      	b.n	800dacc <get_sof+0x34>
  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800dbe8:	68f3      	ldr	r3, [r6, #12]
 800dbea:	4620      	mov	r0, r4
 800dbec:	4798      	blx	r3
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	f43f af60 	beq.w	800dab4 <get_sof+0x1c>
 800dbf4:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dbf8:	e76e      	b.n	800dad8 <get_sof+0x40>
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800dbfa:	68f3      	ldr	r3, [r6, #12]
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	4798      	blx	r3
 800dc00:	2800      	cmp	r0, #0
 800dc02:	f43f af57 	beq.w	800dab4 <get_sof+0x1c>
 800dc06:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dc0a:	e76c      	b.n	800dae6 <get_sof+0x4e>
 800dc0c:	68f3      	ldr	r3, [r6, #12]
 800dc0e:	4620      	mov	r0, r4
 800dc10:	4798      	blx	r3
 800dc12:	2800      	cmp	r0, #0
 800dc14:	f43f af4e 	beq.w	800dab4 <get_sof+0x1c>
 800dc18:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dc1c:	e76b      	b.n	800daf6 <get_sof+0x5e>
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800dc1e:	68f3      	ldr	r3, [r6, #12]
 800dc20:	4620      	mov	r0, r4
 800dc22:	4798      	blx	r3
 800dc24:	2800      	cmp	r0, #0
 800dc26:	f43f af45 	beq.w	800dab4 <get_sof+0x1c>
 800dc2a:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dc2e:	e76a      	b.n	800db06 <get_sof+0x6e>
 800dc30:	68f3      	ldr	r3, [r6, #12]
 800dc32:	4620      	mov	r0, r4
 800dc34:	4798      	blx	r3
 800dc36:	2800      	cmp	r0, #0
 800dc38:	f43f af3c 	beq.w	800dab4 <get_sof+0x1c>
 800dc3c:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dc40:	e769      	b.n	800db16 <get_sof+0x7e>
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800dc42:	68f3      	ldr	r3, [r6, #12]
 800dc44:	4620      	mov	r0, r4
 800dc46:	4798      	blx	r3
 800dc48:	2800      	cmp	r0, #0
 800dc4a:	f43f af33 	beq.w	800dab4 <get_sof+0x1c>
 800dc4e:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dc52:	e768      	b.n	800db26 <get_sof+0x8e>
    compptr->component_index = ci;
 800dc54:	f847 8c54 	str.w	r8, [r7, #-84]
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800dc58:	f1b9 0f00 	cmp.w	r9, #0
 800dc5c:	d107      	bne.n	800dc6e <get_sof+0x1d6>
 800dc5e:	68f3      	ldr	r3, [r6, #12]
 800dc60:	4620      	mov	r0, r4
 800dc62:	4798      	blx	r3
 800dc64:	2800      	cmp	r0, #0
 800dc66:	f43f af25 	beq.w	800dab4 <get_sof+0x1c>
 800dc6a:	e9d6 5900 	ldrd	r5, r9, [r6]
 800dc6e:	782b      	ldrb	r3, [r5, #0]
 800dc70:	f847 3c58 	str.w	r3, [r7, #-88]
    INPUT_BYTE(cinfo, c, return FALSE);
 800dc74:	f1b9 0301 	subs.w	r3, r9, #1
 800dc78:	d029      	beq.n	800dcce <get_sof+0x236>
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800dc7a:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800dc7c:	782a      	ldrb	r2, [r5, #0]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800dc7e:	3b01      	subs	r3, #1
    compptr->h_samp_factor = (c >> 4) & 15;
 800dc80:	ea4f 1122 	mov.w	r1, r2, asr #4
    compptr->v_samp_factor = (c     ) & 15;
 800dc84:	f002 020f 	and.w	r2, r2, #15
    compptr->h_samp_factor = (c >> 4) & 15;
 800dc88:	f847 1c50 	str.w	r1, [r7, #-80]
    compptr->v_samp_factor = (c     ) & 15;
 800dc8c:	f847 2c4c 	str.w	r2, [r7, #-76]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800dc90:	d026      	beq.n	800dce0 <get_sof+0x248>
    INPUT_BYTE(cinfo, c, return FALSE);
 800dc92:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800dc94:	f103 39ff 	add.w	r9, r3, #4294967295
 800dc98:	f815 3b01 	ldrb.w	r3, [r5], #1
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800dc9c:	f857 2c58 	ldr.w	r2, [r7, #-88]
 800dca0:	2101      	movs	r1, #1
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800dca2:	f847 3c48 	str.w	r3, [r7, #-72]
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800dca6:	4620      	mov	r0, r4
 800dca8:	6823      	ldr	r3, [r4, #0]
       ci++, compptr++) {
 800dcaa:	f108 0801 	add.w	r8, r8, #1
 800dcae:	3758      	adds	r7, #88	; 0x58
    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800dcb0:	619a      	str	r2, [r3, #24]
 800dcb2:	f857 2ca8 	ldr.w	r2, [r7, #-168]
 800dcb6:	61da      	str	r2, [r3, #28]
 800dcb8:	f857 2ca4 	ldr.w	r2, [r7, #-164]
 800dcbc:	621a      	str	r2, [r3, #32]
 800dcbe:	f857 2ca0 	ldr.w	r2, [r7, #-160]
 800dcc2:	f8c3 a014 	str.w	sl, [r3, #20]
 800dcc6:	625a      	str	r2, [r3, #36]	; 0x24
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	4798      	blx	r3
       ci++, compptr++) {
 800dccc:	e779      	b.n	800dbc2 <get_sof+0x12a>
    INPUT_BYTE(cinfo, c, return FALSE);
 800dcce:	68f3      	ldr	r3, [r6, #12]
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	4798      	blx	r3
 800dcd4:	2800      	cmp	r0, #0
 800dcd6:	f43f aeed 	beq.w	800dab4 <get_sof+0x1c>
 800dcda:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dcde:	e7cd      	b.n	800dc7c <get_sof+0x1e4>
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800dce0:	68f3      	ldr	r3, [r6, #12]
 800dce2:	4620      	mov	r0, r4
 800dce4:	4798      	blx	r3
 800dce6:	2800      	cmp	r0, #0
 800dce8:	f43f aee4 	beq.w	800dab4 <get_sof+0x1c>
 800dcec:	e9d6 5300 	ldrd	r5, r3, [r6]
 800dcf0:	e7d0      	b.n	800dc94 <get_sof+0x1fc>

0800dcf2 <examine_app0>:
	      unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP0.
 * Take appropriate action if it is a JFIF marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800dcf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  INT32 totallen = (INT32) datalen + remaining;

  if (datalen >= APP0_DATA_LEN &&
 800dcf6:	2a0d      	cmp	r2, #13
{
 800dcf8:	460c      	mov	r4, r1
 800dcfa:	6801      	ldr	r1, [r0, #0]
  INT32 totallen = (INT32) datalen + remaining;
 800dcfc:	eb02 0603 	add.w	r6, r2, r3
{
 800dd00:	4605      	mov	r5, r0
 800dd02:	684b      	ldr	r3, [r1, #4]
  if (datalen >= APP0_DATA_LEN &&
 800dd04:	d96d      	bls.n	800dde2 <examine_app0+0xf0>
 800dd06:	7822      	ldrb	r2, [r4, #0]
 800dd08:	2a4a      	cmp	r2, #74	; 0x4a
 800dd0a:	f040 808f 	bne.w	800de2c <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800dd0e:	7862      	ldrb	r2, [r4, #1]
 800dd10:	2a46      	cmp	r2, #70	; 0x46
 800dd12:	f040 808b 	bne.w	800de2c <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800dd16:	78a2      	ldrb	r2, [r4, #2]
 800dd18:	2a49      	cmp	r2, #73	; 0x49
 800dd1a:	d16a      	bne.n	800ddf2 <examine_app0+0x100>
      GETJOCTET(data[2]) == 0x49 &&
 800dd1c:	78e2      	ldrb	r2, [r4, #3]
 800dd1e:	2a46      	cmp	r2, #70	; 0x46
 800dd20:	d167      	bne.n	800ddf2 <examine_app0+0x100>
      GETJOCTET(data[3]) == 0x46 &&
 800dd22:	7922      	ldrb	r2, [r4, #4]
 800dd24:	2a00      	cmp	r2, #0
 800dd26:	d164      	bne.n	800ddf2 <examine_app0+0x100>
      GETJOCTET(data[4]) == 0) {
    /* Found JFIF APP0 marker: save info */
    cinfo->saw_JFIF_marker = TRUE;
 800dd28:	2201      	movs	r2, #1
 800dd2a:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
    cinfo->JFIF_major_version = GETJOCTET(data[5]);
 800dd2e:	7962      	ldrb	r2, [r4, #5]
 800dd30:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
     * Major version must be 1, anything else signals an incompatible change.
     * (We used to treat this as an error, but now it's a nonfatal warning,
     * because some bozo at Hijaak couldn't read the spec.)
     * Minor version should be 0..2, but process anyway if newer.
     */
    if (cinfo->JFIF_major_version != 1)
 800dd34:	2a01      	cmp	r2, #1
    cinfo->JFIF_minor_version = GETJOCTET(data[6]);
 800dd36:	f894 c006 	ldrb.w	ip, [r4, #6]
 800dd3a:	f880 c121 	strb.w	ip, [r0, #289]	; 0x121
    cinfo->density_unit = GETJOCTET(data[7]);
 800dd3e:	79e7      	ldrb	r7, [r4, #7]
 800dd40:	f880 7122 	strb.w	r7, [r0, #290]	; 0x122
    cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
 800dd44:	f894 e008 	ldrb.w	lr, [r4, #8]
 800dd48:	7a67      	ldrb	r7, [r4, #9]
 800dd4a:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800dd4e:	f8a0 7124 	strh.w	r7, [r0, #292]	; 0x124
    cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
 800dd52:	f894 e00a 	ldrb.w	lr, [r4, #10]
 800dd56:	7ae7      	ldrb	r7, [r4, #11]
 800dd58:	eb07 270e 	add.w	r7, r7, lr, lsl #8
 800dd5c:	f8a0 7126 	strh.w	r7, [r0, #294]	; 0x126
    if (cinfo->JFIF_major_version != 1)
 800dd60:	d007      	beq.n	800dd72 <examine_app0+0x80>
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800dd62:	277a      	movs	r7, #122	; 0x7a
 800dd64:	f8c1 c01c 	str.w	ip, [r1, #28]
 800dd68:	e9c1 7205 	strd	r7, r2, [r1, #20]
 800dd6c:	f04f 31ff 	mov.w	r1, #4294967295
 800dd70:	4798      	blx	r3
	      cinfo->JFIF_major_version, cinfo->JFIF_minor_version);
    /* Generate trace messages */
    TRACEMS5(cinfo, 1, JTRC_JFIF,
 800dd72:	682b      	ldr	r3, [r5, #0]
 800dd74:	2101      	movs	r1, #1
 800dd76:	f895 2120 	ldrb.w	r2, [r5, #288]	; 0x120
 800dd7a:	4628      	mov	r0, r5
 800dd7c:	619a      	str	r2, [r3, #24]
 800dd7e:	f895 2121 	ldrb.w	r2, [r5, #289]	; 0x121
 800dd82:	61da      	str	r2, [r3, #28]
 800dd84:	f8b5 2124 	ldrh.w	r2, [r5, #292]	; 0x124
 800dd88:	621a      	str	r2, [r3, #32]
 800dd8a:	f8b5 2126 	ldrh.w	r2, [r5, #294]	; 0x126
 800dd8e:	625a      	str	r2, [r3, #36]	; 0x24
 800dd90:	f895 2122 	ldrb.w	r2, [r5, #290]	; 0x122
 800dd94:	629a      	str	r2, [r3, #40]	; 0x28
 800dd96:	2259      	movs	r2, #89	; 0x59
 800dd98:	615a      	str	r2, [r3, #20]
 800dd9a:	685b      	ldr	r3, [r3, #4]
 800dd9c:	4798      	blx	r3
	     cinfo->JFIF_major_version, cinfo->JFIF_minor_version,
	     cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
    /* Validate thumbnail dimensions and issue appropriate messages */
    if (GETJOCTET(data[12]) | GETJOCTET(data[13]))
 800dd9e:	7b22      	ldrb	r2, [r4, #12]
 800dda0:	7b63      	ldrb	r3, [r4, #13]
 800dda2:	4313      	orrs	r3, r2
 800dda4:	d00a      	beq.n	800ddbc <examine_app0+0xca>
      TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL,
 800dda6:	682b      	ldr	r3, [r5, #0]
 800dda8:	225c      	movs	r2, #92	; 0x5c
 800ddaa:	2101      	movs	r1, #1
 800ddac:	4628      	mov	r0, r5
 800ddae:	615a      	str	r2, [r3, #20]
 800ddb0:	7b22      	ldrb	r2, [r4, #12]
 800ddb2:	619a      	str	r2, [r3, #24]
 800ddb4:	7b62      	ldrb	r2, [r4, #13]
 800ddb6:	61da      	str	r2, [r3, #28]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	4798      	blx	r3
	       GETJOCTET(data[12]), GETJOCTET(data[13]));
    totallen -= APP0_DATA_LEN;
    if (totallen !=
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800ddbc:	7b22      	ldrb	r2, [r4, #12]
    totallen -= APP0_DATA_LEN;
 800ddbe:	3e0e      	subs	r6, #14
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800ddc0:	7b63      	ldrb	r3, [r4, #13]
 800ddc2:	fb12 f203 	smulbb	r2, r2, r3
 800ddc6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    if (totallen !=
 800ddca:	42b2      	cmp	r2, r6
 800ddcc:	d030      	beq.n	800de30 <examine_app0+0x13e>
      TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) totallen);
 800ddce:	682a      	ldr	r2, [r5, #0]
 800ddd0:	235a      	movs	r3, #90	; 0x5a
 800ddd2:	e9c2 3605 	strd	r3, r6, [r2, #20]
 800ddd6:	6853      	ldr	r3, [r2, #4]
	       GETJOCTET(data[5]), (int) totallen);
      break;
    }
  } else {
    /* Start of APP0 does not match "JFIF" or "JFXX", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800ddd8:	4628      	mov	r0, r5
 800ddda:	2101      	movs	r1, #1
  }
}
 800dddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800dde0:	4718      	bx	r3
  } else if (datalen >= 6 &&
 800dde2:	2a05      	cmp	r2, #5
 800dde4:	d922      	bls.n	800de2c <examine_app0+0x13a>
 800dde6:	7822      	ldrb	r2, [r4, #0]
 800dde8:	2a4a      	cmp	r2, #74	; 0x4a
 800ddea:	d11f      	bne.n	800de2c <examine_app0+0x13a>
      GETJOCTET(data[0]) == 0x4A &&
 800ddec:	7862      	ldrb	r2, [r4, #1]
 800ddee:	2a46      	cmp	r2, #70	; 0x46
 800ddf0:	d11c      	bne.n	800de2c <examine_app0+0x13a>
      GETJOCTET(data[1]) == 0x46 &&
 800ddf2:	78a2      	ldrb	r2, [r4, #2]
 800ddf4:	2a58      	cmp	r2, #88	; 0x58
 800ddf6:	d119      	bne.n	800de2c <examine_app0+0x13a>
      GETJOCTET(data[2]) == 0x58 &&
 800ddf8:	78e2      	ldrb	r2, [r4, #3]
 800ddfa:	2a58      	cmp	r2, #88	; 0x58
 800ddfc:	d116      	bne.n	800de2c <examine_app0+0x13a>
      GETJOCTET(data[3]) == 0x58 &&
 800ddfe:	7922      	ldrb	r2, [r4, #4]
 800de00:	b9a2      	cbnz	r2, 800de2c <examine_app0+0x13a>
    switch (GETJOCTET(data[5])) {
 800de02:	7962      	ldrb	r2, [r4, #5]
 800de04:	2a11      	cmp	r2, #17
 800de06:	d007      	beq.n	800de18 <examine_app0+0x126>
 800de08:	2a13      	cmp	r2, #19
 800de0a:	d007      	beq.n	800de1c <examine_app0+0x12a>
 800de0c:	2a10      	cmp	r2, #16
 800de0e:	d107      	bne.n	800de20 <examine_app0+0x12e>
      TRACEMS1(cinfo, 1, JTRC_THUMB_JPEG, (int) totallen);
 800de10:	226e      	movs	r2, #110	; 0x6e
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800de12:	e9c1 2605 	strd	r2, r6, [r1, #20]
 800de16:	e7df      	b.n	800ddd8 <examine_app0+0xe6>
      TRACEMS1(cinfo, 1, JTRC_THUMB_PALETTE, (int) totallen);
 800de18:	226f      	movs	r2, #111	; 0x6f
 800de1a:	e7fa      	b.n	800de12 <examine_app0+0x120>
      TRACEMS1(cinfo, 1, JTRC_THUMB_RGB, (int) totallen);
 800de1c:	2270      	movs	r2, #112	; 0x70
 800de1e:	e7f8      	b.n	800de12 <examine_app0+0x120>
      TRACEMS2(cinfo, 1, JTRC_JFIF_EXTENSION,
 800de20:	225b      	movs	r2, #91	; 0x5b
 800de22:	614a      	str	r2, [r1, #20]
 800de24:	7962      	ldrb	r2, [r4, #5]
 800de26:	e9c1 2606 	strd	r2, r6, [r1, #24]
 800de2a:	e7d5      	b.n	800ddd8 <examine_app0+0xe6>
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800de2c:	224f      	movs	r2, #79	; 0x4f
 800de2e:	e7f0      	b.n	800de12 <examine_app0+0x120>
}
 800de30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800de34 <skip_variable>:


METHODDEF(boolean)
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
 800de34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  INT32 length;
  INPUT_VARS(cinfo);
 800de38:	6984      	ldr	r4, [r0, #24]
{
 800de3a:	4607      	mov	r7, r0
  INPUT_VARS(cinfo);
 800de3c:	6863      	ldr	r3, [r4, #4]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800de3e:	b31b      	cbz	r3, 800de88 <skip_variable+0x54>
  INPUT_VARS(cinfo);
 800de40:	6825      	ldr	r5, [r4, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800de42:	782e      	ldrb	r6, [r5, #0]
 800de44:	f1b3 0801 	subs.w	r8, r3, #1
 800de48:	ea4f 2906 	mov.w	r9, r6, lsl #8
 800de4c:	d025      	beq.n	800de9a <skip_variable+0x66>
 800de4e:	3501      	adds	r5, #1
 800de50:	f815 6b01 	ldrb.w	r6, [r5], #1
  length -= 2;
  
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800de54:	235d      	movs	r3, #93	; 0x5d
 800de56:	683a      	ldr	r2, [r7, #0]
 800de58:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800de5a:	444e      	add	r6, r9
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800de5c:	4638      	mov	r0, r7
 800de5e:	6153      	str	r3, [r2, #20]
  length -= 2;
 800de60:	3e02      	subs	r6, #2
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800de62:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800de66:	e9c2 3606 	strd	r3, r6, [r2, #24]
 800de6a:	6853      	ldr	r3, [r2, #4]
 800de6c:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800de6e:	f108 33ff 	add.w	r3, r8, #4294967295

  INPUT_SYNC(cinfo);		/* do before skip_input_data */
  if (length > 0)
 800de72:	2e00      	cmp	r6, #0
  INPUT_SYNC(cinfo);		/* do before skip_input_data */
 800de74:	6025      	str	r5, [r4, #0]
 800de76:	6063      	str	r3, [r4, #4]
  if (length > 0)
 800de78:	dd04      	ble.n	800de84 <skip_variable+0x50>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	4631      	mov	r1, r6
 800de7e:	4638      	mov	r0, r7
 800de80:	691b      	ldr	r3, [r3, #16]
 800de82:	4798      	blx	r3

  return TRUE;
 800de84:	2001      	movs	r0, #1
 800de86:	e003      	b.n	800de90 <skip_variable+0x5c>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800de88:	68e3      	ldr	r3, [r4, #12]
 800de8a:	4798      	blx	r3
 800de8c:	b910      	cbnz	r0, 800de94 <skip_variable+0x60>
 800de8e:	2000      	movs	r0, #0
}
 800de90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800de94:	e9d4 5300 	ldrd	r5, r3, [r4]
 800de98:	e7d3      	b.n	800de42 <skip_variable+0xe>
 800de9a:	68e3      	ldr	r3, [r4, #12]
 800de9c:	4638      	mov	r0, r7
 800de9e:	4798      	blx	r3
 800dea0:	2800      	cmp	r0, #0
 800dea2:	d0f4      	beq.n	800de8e <skip_variable+0x5a>
 800dea4:	e9d4 5800 	ldrd	r5, r8, [r4]
 800dea8:	e7d2      	b.n	800de50 <skip_variable+0x1c>

0800deaa <next_marker>:
 * but it will never be 0 or FF.
 */

LOCAL(boolean)
next_marker (j_decompress_ptr cinfo)
{
 800deaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int c;
  INPUT_VARS(cinfo);
 800deae:	6986      	ldr	r6, [r0, #24]
{
 800deb0:	4680      	mov	r8, r0
  INPUT_VARS(cinfo);
 800deb2:	e9d6 4700 	ldrd	r4, r7, [r6]

  for (;;) {
    INPUT_BYTE(cinfo, c, return FALSE);
 800deb6:	b987      	cbnz	r7, 800deda <next_marker+0x30>
 800deb8:	68f3      	ldr	r3, [r6, #12]
 800deba:	4640      	mov	r0, r8
 800debc:	4798      	blx	r3
 800debe:	b950      	cbnz	r0, 800ded6 <next_marker+0x2c>
 800dec0:	2000      	movs	r0, #0

  cinfo->unread_marker = c;

  INPUT_SYNC(cinfo);
  return TRUE;
}
 800dec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      cinfo->marker->discarded_bytes++;
 800dec6:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800deca:	6993      	ldr	r3, [r2, #24]
 800decc:	3301      	adds	r3, #1
    cinfo->marker->discarded_bytes += 2;
 800dece:	6193      	str	r3, [r2, #24]
    INPUT_SYNC(cinfo);
 800ded0:	e9c6 4700 	strd	r4, r7, [r6]
    INPUT_BYTE(cinfo, c, return FALSE);
 800ded4:	e7ef      	b.n	800deb6 <next_marker+0xc>
      INPUT_BYTE(cinfo, c, return FALSE);
 800ded6:	e9d6 4700 	ldrd	r4, r7, [r6]
 800deda:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dede:	3f01      	subs	r7, #1
    while (c != 0xFF) {
 800dee0:	2bff      	cmp	r3, #255	; 0xff
 800dee2:	d1f0      	bne.n	800dec6 <next_marker+0x1c>
      INPUT_BYTE(cinfo, c, return FALSE);
 800dee4:	b937      	cbnz	r7, 800def4 <next_marker+0x4a>
 800dee6:	68f3      	ldr	r3, [r6, #12]
 800dee8:	4640      	mov	r0, r8
 800deea:	4798      	blx	r3
 800deec:	2800      	cmp	r0, #0
 800deee:	d0e7      	beq.n	800dec0 <next_marker+0x16>
 800def0:	e9d6 4700 	ldrd	r4, r7, [r6]
 800def4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800def8:	3f01      	subs	r7, #1
    } while (c == 0xFF);
 800defa:	2dff      	cmp	r5, #255	; 0xff
 800defc:	d0f2      	beq.n	800dee4 <next_marker+0x3a>
    if (c != 0)
 800defe:	f8d8 21cc 	ldr.w	r2, [r8, #460]	; 0x1cc
 800df02:	6993      	ldr	r3, [r2, #24]
 800df04:	b90d      	cbnz	r5, 800df0a <next_marker+0x60>
    cinfo->marker->discarded_bytes += 2;
 800df06:	3302      	adds	r3, #2
 800df08:	e7e1      	b.n	800dece <next_marker+0x24>
  if (cinfo->marker->discarded_bytes != 0) {
 800df0a:	b173      	cbz	r3, 800df2a <next_marker+0x80>
    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
 800df0c:	f8d8 2000 	ldr.w	r2, [r8]
 800df10:	2177      	movs	r1, #119	; 0x77
 800df12:	4640      	mov	r0, r8
 800df14:	61d5      	str	r5, [r2, #28]
 800df16:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800df1a:	6853      	ldr	r3, [r2, #4]
 800df1c:	f04f 31ff 	mov.w	r1, #4294967295
 800df20:	4798      	blx	r3
    cinfo->marker->discarded_bytes = 0;
 800df22:	f8d8 31cc 	ldr.w	r3, [r8, #460]	; 0x1cc
 800df26:	2200      	movs	r2, #0
 800df28:	619a      	str	r2, [r3, #24]
  cinfo->unread_marker = c;
 800df2a:	f8c8 51b4 	str.w	r5, [r8, #436]	; 0x1b4
  return TRUE;
 800df2e:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800df30:	e9c6 4700 	strd	r4, r7, [r6]
  return TRUE;
 800df34:	e7c5      	b.n	800dec2 <next_marker+0x18>

0800df36 <reset_marker_reader>:
METHODDEF(void)
reset_marker_reader (j_decompress_ptr cinfo)
{
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;

  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800df36:	2300      	movs	r3, #0
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 800df38:	f8d0 21cc 	ldr.w	r2, [r0, #460]	; 0x1cc
  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800df3c:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
  cinfo->input_scan_number = 0;		/* no SOS seen yet */
 800df40:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  cinfo->unread_marker = 0;		/* no pending marker */
 800df44:	f8c0 31b4 	str.w	r3, [r0, #436]	; 0x1b4
  marker->pub.saw_SOI = FALSE;		/* set internal state too */
  marker->pub.saw_SOF = FALSE;
  marker->pub.discarded_bytes = 0;
 800df48:	6193      	str	r3, [r2, #24]
  marker->cur_marker = NULL;
 800df4a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  marker->pub.saw_SOF = FALSE;
 800df4e:	e9c2 3303 	strd	r3, r3, [r2, #12]
}
 800df52:	4770      	bx	lr

0800df54 <get_dht>:
{
 800df54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INPUT_VARS(cinfo);
 800df58:	6987      	ldr	r7, [r0, #24]
{
 800df5a:	b0c9      	sub	sp, #292	; 0x124
 800df5c:	4605      	mov	r5, r0
  INPUT_VARS(cinfo);
 800df5e:	687e      	ldr	r6, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800df60:	b1fe      	cbz	r6, 800dfa2 <get_dht+0x4e>
  INPUT_VARS(cinfo);
 800df62:	683c      	ldr	r4, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800df64:	f894 9000 	ldrb.w	r9, [r4]
 800df68:	3e01      	subs	r6, #1
 800df6a:	ea4f 2809 	mov.w	r8, r9, lsl #8
 800df6e:	d022      	beq.n	800dfb6 <get_dht+0x62>
 800df70:	3401      	adds	r4, #1
 800df72:	f814 9b01 	ldrb.w	r9, [r4], #1
 800df76:	3e01      	subs	r6, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800df78:	f10d 0b0c 	add.w	fp, sp, #12
  INPUT_2BYTES(cinfo, length, return FALSE);
 800df7c:	44c1      	add	r9, r8
  length -= 2;
 800df7e:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 16) {
 800df82:	f1b9 0f10 	cmp.w	r9, #16
 800df86:	dc1e      	bgt.n	800dfc6 <get_dht+0x72>
  if (length != 0)
 800df88:	f1b9 0f00 	cmp.w	r9, #0
 800df8c:	d005      	beq.n	800df9a <get_dht+0x46>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800df8e:	682b      	ldr	r3, [r5, #0]
 800df90:	220c      	movs	r2, #12
 800df92:	4628      	mov	r0, r5
 800df94:	615a      	str	r2, [r3, #20]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4798      	blx	r3
  return TRUE;
 800df9a:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800df9c:	e9c7 4600 	strd	r4, r6, [r7]
  return TRUE;
 800dfa0:	e003      	b.n	800dfaa <get_dht+0x56>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	4798      	blx	r3
 800dfa6:	b918      	cbnz	r0, 800dfb0 <get_dht+0x5c>
 800dfa8:	2000      	movs	r0, #0
}
 800dfaa:	b049      	add	sp, #292	; 0x124
 800dfac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800dfb0:	e9d7 4600 	ldrd	r4, r6, [r7]
 800dfb4:	e7d6      	b.n	800df64 <get_dht+0x10>
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	4628      	mov	r0, r5
 800dfba:	4798      	blx	r3
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	d0f3      	beq.n	800dfa8 <get_dht+0x54>
 800dfc0:	e9d7 4600 	ldrd	r4, r6, [r7]
 800dfc4:	e7d5      	b.n	800df72 <get_dht+0x1e>
    INPUT_BYTE(cinfo, index, return FALSE);
 800dfc6:	b936      	cbnz	r6, 800dfd6 <get_dht+0x82>
 800dfc8:	68fa      	ldr	r2, [r7, #12]
 800dfca:	4628      	mov	r0, r5
 800dfcc:	4790      	blx	r2
 800dfce:	2800      	cmp	r0, #0
 800dfd0:	d0ea      	beq.n	800dfa8 <get_dht+0x54>
 800dfd2:	e9d7 4600 	ldrd	r4, r6, [r7]
 800dfd6:	f814 8b01 	ldrb.w	r8, [r4], #1
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800dfda:	2152      	movs	r1, #82	; 0x52
 800dfdc:	682a      	ldr	r2, [r5, #0]
 800dfde:	4628      	mov	r0, r5
    INPUT_BYTE(cinfo, index, return FALSE);
 800dfe0:	f8cd 8000 	str.w	r8, [sp]
 800dfe4:	3e01      	subs	r6, #1
    count = 0;
 800dfe6:	f04f 0a00 	mov.w	sl, #0
    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800dfea:	e9c2 1805 	strd	r1, r8, [r2, #20]
 800dfee:	6852      	ldr	r2, [r2, #4]
 800dff0:	2101      	movs	r1, #1
 800dff2:	4790      	blx	r2
    for (i = 1; i <= 16; i++) {
 800dff4:	2201      	movs	r2, #1
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800dff6:	b946      	cbnz	r6, 800e00a <get_dht+0xb6>
 800dff8:	68f9      	ldr	r1, [r7, #12]
 800dffa:	4628      	mov	r0, r5
 800dffc:	9201      	str	r2, [sp, #4]
 800dffe:	4788      	blx	r1
 800e000:	2800      	cmp	r0, #0
 800e002:	d0d1      	beq.n	800dfa8 <get_dht+0x54>
 800e004:	9a01      	ldr	r2, [sp, #4]
 800e006:	e9d7 4600 	ldrd	r4, r6, [r7]
 800e00a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e00e:	3e01      	subs	r6, #1
 800e010:	f802 100b 	strb.w	r1, [r2, fp]
    for (i = 1; i <= 16; i++) {
 800e014:	3201      	adds	r2, #1
      count += bits[i];
 800e016:	448a      	add	sl, r1
    for (i = 1; i <= 16; i++) {
 800e018:	2a11      	cmp	r2, #17
 800e01a:	d1ec      	bne.n	800dff6 <get_dht+0xa2>
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800e01c:	682a      	ldr	r2, [r5, #0]
    length -= 1 + 16;
 800e01e:	f1a9 0311 	sub.w	r3, r9, #17
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800e022:	f89b 1001 	ldrb.w	r1, [fp, #1]
 800e026:	f04f 0958 	mov.w	r9, #88	; 0x58
 800e02a:	4628      	mov	r0, r5
    length -= 1 + 16;
 800e02c:	9301      	str	r3, [sp, #4]
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800e02e:	6191      	str	r1, [r2, #24]
 800e030:	f89b 1002 	ldrb.w	r1, [fp, #2]
 800e034:	f8c2 9014 	str.w	r9, [r2, #20]
 800e038:	61d1      	str	r1, [r2, #28]
 800e03a:	f89b 1003 	ldrb.w	r1, [fp, #3]
 800e03e:	6211      	str	r1, [r2, #32]
 800e040:	f89b 1004 	ldrb.w	r1, [fp, #4]
 800e044:	6251      	str	r1, [r2, #36]	; 0x24
 800e046:	f89b 1005 	ldrb.w	r1, [fp, #5]
 800e04a:	6291      	str	r1, [r2, #40]	; 0x28
 800e04c:	f89b 1006 	ldrb.w	r1, [fp, #6]
 800e050:	62d1      	str	r1, [r2, #44]	; 0x2c
 800e052:	f89b 1007 	ldrb.w	r1, [fp, #7]
 800e056:	6311      	str	r1, [r2, #48]	; 0x30
 800e058:	f89b 1008 	ldrb.w	r1, [fp, #8]
 800e05c:	6351      	str	r1, [r2, #52]	; 0x34
 800e05e:	2102      	movs	r1, #2
 800e060:	6852      	ldr	r2, [r2, #4]
 800e062:	4790      	blx	r2
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800e064:	682a      	ldr	r2, [r5, #0]
 800e066:	f89b 1009 	ldrb.w	r1, [fp, #9]
 800e06a:	4628      	mov	r0, r5
 800e06c:	f8c2 9014 	str.w	r9, [r2, #20]
 800e070:	6191      	str	r1, [r2, #24]
 800e072:	f89b 100a 	ldrb.w	r1, [fp, #10]
 800e076:	61d1      	str	r1, [r2, #28]
 800e078:	f89b 100b 	ldrb.w	r1, [fp, #11]
 800e07c:	6211      	str	r1, [r2, #32]
 800e07e:	f89b 100c 	ldrb.w	r1, [fp, #12]
 800e082:	6251      	str	r1, [r2, #36]	; 0x24
 800e084:	f89b 100d 	ldrb.w	r1, [fp, #13]
 800e088:	6291      	str	r1, [r2, #40]	; 0x28
 800e08a:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800e08e:	62d1      	str	r1, [r2, #44]	; 0x2c
 800e090:	f89b 100f 	ldrb.w	r1, [fp, #15]
 800e094:	6311      	str	r1, [r2, #48]	; 0x30
 800e096:	f89b 1010 	ldrb.w	r1, [fp, #16]
 800e09a:	6351      	str	r1, [r2, #52]	; 0x34
 800e09c:	2102      	movs	r1, #2
 800e09e:	6852      	ldr	r2, [r2, #4]
 800e0a0:	4790      	blx	r2
    if (count > 256 || ((INT32) count) > length)
 800e0a2:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
 800e0a6:	dc02      	bgt.n	800e0ae <get_dht+0x15a>
 800e0a8:	9b01      	ldr	r3, [sp, #4]
 800e0aa:	4553      	cmp	r3, sl
 800e0ac:	da05      	bge.n	800e0ba <get_dht+0x166>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800e0ae:	682a      	ldr	r2, [r5, #0]
 800e0b0:	2109      	movs	r1, #9
 800e0b2:	4628      	mov	r0, r5
 800e0b4:	6151      	str	r1, [r2, #20]
 800e0b6:	6812      	ldr	r2, [r2, #0]
 800e0b8:	4790      	blx	r2
 800e0ba:	f04f 0900 	mov.w	r9, #0
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800e0be:	a908      	add	r1, sp, #32
    for (i = 0; i < count; i++)
 800e0c0:	45d1      	cmp	r9, sl
 800e0c2:	d13f      	bne.n	800e144 <get_dht+0x1f0>
    if (index & 0x10) {		/* AC table definition */
 800e0c4:	f018 0f10 	tst.w	r8, #16
    length -= count;
 800e0c8:	9b01      	ldr	r3, [sp, #4]
 800e0ca:	eba3 0909 	sub.w	r9, r3, r9
      index -= 0x10;
 800e0ce:	bf17      	itett	ne
 800e0d0:	f1a8 0310 	subne.w	r3, r8, #16
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800e0d4:	f108 082d 	addeq.w	r8, r8, #45	; 0x2d
      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
 800e0d8:	f108 0821 	addne.w	r8, r8, #33	; 0x21
      index -= 0x10;
 800e0dc:	9300      	strne	r3, [sp, #0]
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800e0de:	9b00      	ldr	r3, [sp, #0]
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800e0e0:	eb05 0888 	add.w	r8, r5, r8, lsl #2
    if (index < 0 || index >= NUM_HUFF_TBLS)
 800e0e4:	2b03      	cmp	r3, #3
 800e0e6:	d906      	bls.n	800e0f6 <get_dht+0x1a2>
      ERREXIT1(cinfo, JERR_DHT_INDEX, index);
 800e0e8:	682a      	ldr	r2, [r5, #0]
 800e0ea:	211f      	movs	r1, #31
 800e0ec:	4628      	mov	r0, r5
 800e0ee:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800e0f2:	6812      	ldr	r2, [r2, #0]
 800e0f4:	4790      	blx	r2
    if (*htblptr == NULL)
 800e0f6:	f8d8 2000 	ldr.w	r2, [r8]
 800e0fa:	b922      	cbnz	r2, 800e106 <get_dht+0x1b2>
      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 800e0fc:	4628      	mov	r0, r5
 800e0fe:	f7fb fc49 	bl	8009994 <jpeg_alloc_huff_table>
 800e102:	f8c8 0000 	str.w	r0, [r8]
    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
 800e106:	2200      	movs	r2, #0
 800e108:	46de      	mov	lr, fp
 800e10a:	f10d 0a1c 	add.w	sl, sp, #28
 800e10e:	f88b 2000 	strb.w	r2, [fp]
 800e112:	f8d8 2000 	ldr.w	r2, [r8]
 800e116:	46f4      	mov	ip, lr
 800e118:	3208      	adds	r2, #8
 800e11a:	e8bc 0003 	ldmia.w	ip!, {r0, r1}
 800e11e:	45d4      	cmp	ip, sl
 800e120:	f842 0c08 	str.w	r0, [r2, #-8]
 800e124:	f842 1c04 	str.w	r1, [r2, #-4]
 800e128:	46e6      	mov	lr, ip
 800e12a:	d1f4      	bne.n	800e116 <get_dht+0x1c2>
 800e12c:	f89c 1000 	ldrb.w	r1, [ip]
 800e130:	7011      	strb	r1, [r2, #0]
    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
 800e132:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e136:	f8d8 0000 	ldr.w	r0, [r8]
 800e13a:	a908      	add	r1, sp, #32
 800e13c:	3011      	adds	r0, #17
 800e13e:	f01b ff09 	bl	8029f54 <memcpy>
 800e142:	e71e      	b.n	800df82 <get_dht+0x2e>
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800e144:	b946      	cbnz	r6, 800e158 <get_dht+0x204>
 800e146:	68fa      	ldr	r2, [r7, #12]
 800e148:	4628      	mov	r0, r5
 800e14a:	4790      	blx	r2
 800e14c:	2800      	cmp	r0, #0
 800e14e:	f43f af2b 	beq.w	800dfa8 <get_dht+0x54>
 800e152:	a908      	add	r1, sp, #32
 800e154:	e9d7 4600 	ldrd	r4, r6, [r7]
 800e158:	f814 2b01 	ldrb.w	r2, [r4], #1
 800e15c:	3e01      	subs	r6, #1
 800e15e:	f809 2001 	strb.w	r2, [r9, r1]
    for (i = 0; i < count; i++)
 800e162:	f109 0901 	add.w	r9, r9, #1
 800e166:	e7ab      	b.n	800e0c0 <get_dht+0x16c>

0800e168 <read_markers>:
{
 800e168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e16c:	4604      	mov	r4, r0
 800e16e:	b085      	sub	sp, #20
    if (cinfo->unread_marker == 0) {
 800e170:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800e174:	bb2b      	cbnz	r3, 800e1c2 <read_markers+0x5a>
      if (! cinfo->marker->saw_SOI) {
 800e176:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e17a:	68db      	ldr	r3, [r3, #12]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d17c      	bne.n	800e27a <read_markers+0x112>
  INPUT_VARS(cinfo);
 800e180:	69a7      	ldr	r7, [r4, #24]
 800e182:	687b      	ldr	r3, [r7, #4]
  INPUT_BYTE(cinfo, c, return FALSE);
 800e184:	2b00      	cmp	r3, #0
 800e186:	d06a      	beq.n	800e25e <read_markers+0xf6>
  INPUT_VARS(cinfo);
 800e188:	683d      	ldr	r5, [r7, #0]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800e18a:	3b01      	subs	r3, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e18c:	f895 8000 	ldrb.w	r8, [r5]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800e190:	d06c      	beq.n	800e26c <read_markers+0x104>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e192:	3501      	adds	r5, #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800e194:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  INPUT_BYTE(cinfo, c2, return FALSE);
 800e198:	f103 36ff 	add.w	r6, r3, #4294967295
 800e19c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if (c != 0xFF || c2 != (int) M_SOI)
 800e1a0:	d102      	bne.n	800e1a8 <read_markers+0x40>
 800e1a2:	f1b9 0fd8 	cmp.w	r9, #216	; 0xd8
 800e1a6:	d008      	beq.n	800e1ba <read_markers+0x52>
    ERREXIT2(cinfo, JERR_NO_SOI, c, c2);
 800e1a8:	6823      	ldr	r3, [r4, #0]
 800e1aa:	2237      	movs	r2, #55	; 0x37
 800e1ac:	4620      	mov	r0, r4
 800e1ae:	f8c3 901c 	str.w	r9, [r3, #28]
 800e1b2:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	4798      	blx	r3
  cinfo->unread_marker = c2;
 800e1ba:	f8c4 91b4 	str.w	r9, [r4, #436]	; 0x1b4
  INPUT_SYNC(cinfo);
 800e1be:	e9c7 5600 	strd	r5, r6, [r7]
    switch (cinfo->unread_marker) {
 800e1c2:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	f000 83bc 	beq.w	800e944 <read_markers+0x7dc>
 800e1cc:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 800e1d0:	2a3e      	cmp	r2, #62	; 0x3e
 800e1d2:	f200 83c4 	bhi.w	800e95e <read_markers+0x7f6>
 800e1d6:	2a3e      	cmp	r2, #62	; 0x3e
 800e1d8:	f200 83c1 	bhi.w	800e95e <read_markers+0x7f6>
 800e1dc:	e8df f012 	tbh	[pc, r2, lsl #1]
 800e1e0:	0094008b 	.word	0x0094008b
 800e1e4:	00a00097 	.word	0x00a00097
 800e1e8:	00a00232 	.word	0x00a00232
 800e1ec:	00a000a0 	.word	0x00a000a0
 800e1f0:	009b00a0 	.word	0x009b00a0
 800e1f4:	00a0009d 	.word	0x00a0009d
 800e1f8:	00a001b8 	.word	0x00a001b8
 800e1fc:	00a000a0 	.word	0x00a000a0
 800e200:	03b203b2 	.word	0x03b203b2
 800e204:	03b203b2 	.word	0x03b203b2
 800e208:	03b203b2 	.word	0x03b203b2
 800e20c:	03b203b2 	.word	0x03b203b2
 800e210:	01ac0054 	.word	0x01ac0054
 800e214:	023600a8 	.word	0x023600a8
 800e218:	035403bb 	.word	0x035403bb
 800e21c:	03bf03bf 	.word	0x03bf03bf
 800e220:	03a603a6 	.word	0x03a603a6
 800e224:	03a603a6 	.word	0x03a603a6
 800e228:	03a603a6 	.word	0x03a603a6
 800e22c:	03a603a6 	.word	0x03a603a6
 800e230:	03a603a6 	.word	0x03a603a6
 800e234:	03a603a6 	.word	0x03a603a6
 800e238:	03a603a6 	.word	0x03a603a6
 800e23c:	03a603a6 	.word	0x03a603a6
 800e240:	03bf03bf 	.word	0x03bf03bf
 800e244:	03bf03bf 	.word	0x03bf03bf
 800e248:	03bf03bf 	.word	0x03bf03bf
 800e24c:	03bf03bf 	.word	0x03bf03bf
 800e250:	03bf03bf 	.word	0x03bf03bf
 800e254:	03bf03bf 	.word	0x03bf03bf
 800e258:	03bf03bf 	.word	0x03bf03bf
 800e25c:	03ae      	.short	0x03ae
  INPUT_BYTE(cinfo, c, return FALSE);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	4620      	mov	r0, r4
 800e262:	4798      	blx	r3
 800e264:	b170      	cbz	r0, 800e284 <read_markers+0x11c>
 800e266:	e9d7 5300 	ldrd	r5, r3, [r7]
 800e26a:	e78e      	b.n	800e18a <read_markers+0x22>
  INPUT_BYTE(cinfo, c2, return FALSE);
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	4620      	mov	r0, r4
 800e270:	4798      	blx	r3
 800e272:	b138      	cbz	r0, 800e284 <read_markers+0x11c>
 800e274:	e9d7 5300 	ldrd	r5, r3, [r7]
 800e278:	e78c      	b.n	800e194 <read_markers+0x2c>
	if (! next_marker(cinfo))
 800e27a:	4620      	mov	r0, r4
 800e27c:	f7ff fe15 	bl	800deaa <next_marker>
 800e280:	2800      	cmp	r0, #0
 800e282:	d19e      	bne.n	800e1c2 <read_markers+0x5a>
	  return JPEG_SUSPENDED;
 800e284:	2000      	movs	r0, #0
 800e286:	e0e2      	b.n	800e44e <read_markers+0x2e6>
  TRACEMS(cinfo, 1, JTRC_SOI);
 800e288:	6823      	ldr	r3, [r4, #0]
 800e28a:	2268      	movs	r2, #104	; 0x68
 800e28c:	2101      	movs	r1, #1
 800e28e:	4620      	mov	r0, r4
 800e290:	615a      	str	r2, [r3, #20]
 800e292:	685b      	ldr	r3, [r3, #4]
 800e294:	4798      	blx	r3
  if (cinfo->marker->saw_SOI)
 800e296:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e29a:	68db      	ldr	r3, [r3, #12]
 800e29c:	b12b      	cbz	r3, 800e2aa <read_markers+0x142>
    ERREXIT(cinfo, JERR_SOI_DUPLICATE);
 800e29e:	6823      	ldr	r3, [r4, #0]
 800e2a0:	223f      	movs	r2, #63	; 0x3f
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	615a      	str	r2, [r3, #20]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	4798      	blx	r3
 800e2aa:	f104 02e8 	add.w	r2, r4, #232	; 0xe8
 800e2ae:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
    cinfo->arith_dc_L[i] = 0;
 800e2b2:	2300      	movs	r3, #0
    cinfo->arith_dc_U[i] = 1;
 800e2b4:	2101      	movs	r1, #1
    cinfo->arith_ac_K[i] = 5;
 800e2b6:	2505      	movs	r5, #5
    cinfo->arith_dc_L[i] = 0;
 800e2b8:	f802 3b01 	strb.w	r3, [r2], #1
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
 800e2bc:	4290      	cmp	r0, r2
    cinfo->arith_dc_U[i] = 1;
 800e2be:	73d1      	strb	r1, [r2, #15]
    cinfo->arith_ac_K[i] = 5;
 800e2c0:	77d5      	strb	r5, [r2, #31]
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
 800e2c2:	d1f9      	bne.n	800e2b8 <read_markers+0x150>
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800e2c4:	f240 1201 	movw	r2, #257	; 0x101
  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800e2c8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */
 800e2cc:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800e2d0:	f8a4 2120 	strh.w	r2, [r4, #288]	; 0x120
  cinfo->X_density = 1;
 800e2d4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  cinfo->density_unit = 0;
 800e2d8:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
  cinfo->Adobe_transform = 0;
 800e2dc:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
  cinfo->saw_JFIF_marker = FALSE;
 800e2e0:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
  cinfo->saw_Adobe_marker = FALSE;
 800e2e4:	e9c4 2349 	strd	r2, r3, [r4, #292]	; 0x124
  cinfo->marker->saw_SOI = TRUE;
 800e2e8:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e2ec:	60d9      	str	r1, [r3, #12]
    cinfo->unread_marker = 0;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
    if (cinfo->unread_marker == 0) {
 800e2f4:	e73c      	b.n	800e170 <read_markers+0x8>
      if (! get_sof(cinfo, TRUE, FALSE, FALSE))
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	2101      	movs	r1, #1
 800e2fa:	461a      	mov	r2, r3
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	f7ff fbcb 	bl	800da98 <get_sof>
      if (! skip_variable(cinfo))
 800e302:	2800      	cmp	r0, #0
 800e304:	d1f3      	bne.n	800e2ee <read_markers+0x186>
 800e306:	e7bd      	b.n	800e284 <read_markers+0x11c>
      if (! get_sof(cinfo, FALSE, FALSE, FALSE))
 800e308:	2300      	movs	r3, #0
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800e30a:	2200      	movs	r2, #0
 800e30c:	e001      	b.n	800e312 <read_markers+0x1aa>
      if (! get_sof(cinfo, FALSE, TRUE, FALSE))
 800e30e:	2300      	movs	r3, #0
 800e310:	2201      	movs	r2, #1
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800e312:	2100      	movs	r1, #0
 800e314:	e7f2      	b.n	800e2fc <read_markers+0x194>
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800e316:	2301      	movs	r3, #1
 800e318:	e7f7      	b.n	800e30a <read_markers+0x1a2>
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800e31a:	2301      	movs	r3, #1
 800e31c:	461a      	mov	r2, r3
 800e31e:	e7f8      	b.n	800e312 <read_markers+0x1aa>
      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
 800e320:	6822      	ldr	r2, [r4, #0]
 800e322:	213e      	movs	r1, #62	; 0x3e
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800e324:	4620      	mov	r0, r4
 800e326:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800e32a:	6813      	ldr	r3, [r2, #0]
 800e32c:	4798      	blx	r3
      break;
 800e32e:	e7de      	b.n	800e2ee <read_markers+0x186>
  if (! cinfo->marker->saw_SOF)
 800e330:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  INPUT_VARS(cinfo);
 800e334:	69a7      	ldr	r7, [r4, #24]
  if (! cinfo->marker->saw_SOF)
 800e336:	691b      	ldr	r3, [r3, #16]
  INPUT_VARS(cinfo);
 800e338:	e9d7 5600 	ldrd	r5, r6, [r7]
  if (! cinfo->marker->saw_SOF)
 800e33c:	b92b      	cbnz	r3, 800e34a <read_markers+0x1e2>
    ERREXIT(cinfo, JERR_SOS_NO_SOF);
 800e33e:	6823      	ldr	r3, [r4, #0]
 800e340:	2240      	movs	r2, #64	; 0x40
 800e342:	4620      	mov	r0, r4
 800e344:	615a      	str	r2, [r3, #20]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	4798      	blx	r3
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e34a:	b936      	cbnz	r6, 800e35a <read_markers+0x1f2>
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	4620      	mov	r0, r4
 800e350:	4798      	blx	r3
 800e352:	2800      	cmp	r0, #0
 800e354:	d096      	beq.n	800e284 <read_markers+0x11c>
 800e356:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e35a:	f895 8000 	ldrb.w	r8, [r5]
 800e35e:	3e01      	subs	r6, #1
 800e360:	ea4f 2808 	mov.w	r8, r8, lsl #8
 800e364:	d076      	beq.n	800e454 <read_markers+0x2ec>
 800e366:	3501      	adds	r5, #1
 800e368:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e36a:	3e01      	subs	r6, #1
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e36c:	4498      	add	r8, r3
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e36e:	d07a      	beq.n	800e466 <read_markers+0x2fe>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e370:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e372:	f815 9b01 	ldrb.w	r9, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800e376:	2269      	movs	r2, #105	; 0x69
 800e378:	6823      	ldr	r3, [r4, #0]
 800e37a:	2101      	movs	r1, #1
 800e37c:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e37e:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800e380:	e9c3 2905 	strd	r2, r9, [r3, #20]
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	4798      	blx	r3
  if (length != (n * 2 + 6) || n > MAX_COMPS_IN_SCAN ||
 800e388:	f109 0303 	add.w	r3, r9, #3
 800e38c:	ebb8 0f43 	cmp.w	r8, r3, lsl #1
 800e390:	d108      	bne.n	800e3a4 <read_markers+0x23c>
 800e392:	f1b9 0f04 	cmp.w	r9, #4
 800e396:	dc05      	bgt.n	800e3a4 <read_markers+0x23c>
 800e398:	f1b9 0f00 	cmp.w	r9, #0
 800e39c:	d108      	bne.n	800e3b0 <read_markers+0x248>
      (n == 0 && !cinfo->progressive_mode))
 800e39e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800e3a2:	b92b      	cbnz	r3, 800e3b0 <read_markers+0x248>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e3a4:	6823      	ldr	r3, [r4, #0]
 800e3a6:	220c      	movs	r2, #12
 800e3a8:	4620      	mov	r0, r4
 800e3aa:	615a      	str	r2, [r3, #20]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	4798      	blx	r3
  cinfo->comps_in_scan = n;
 800e3b0:	f504 73aa 	add.w	r3, r4, #340	; 0x154
  for (i = 0; i < n; i++) {
 800e3b4:	f04f 0a00 	mov.w	sl, #0
  cinfo->comps_in_scan = n;
 800e3b8:	f8c4 9150 	str.w	r9, [r4, #336]	; 0x150
  for (i = 0; i < n; i++) {
 800e3bc:	9301      	str	r3, [sp, #4]
 800e3be:	45d1      	cmp	r9, sl
 800e3c0:	dc5a      	bgt.n	800e478 <read_markers+0x310>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e3c2:	b93e      	cbnz	r6, 800e3d4 <read_markers+0x26c>
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	4798      	blx	r3
 800e3ca:	2800      	cmp	r0, #0
 800e3cc:	f43f af5a 	beq.w	800e284 <read_markers+0x11c>
 800e3d0:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e3d4:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800e3d6:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e3d8:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
  INPUT_BYTE(cinfo, c, return FALSE);
 800e3dc:	f000 809a 	beq.w	800e514 <read_markers+0x3ac>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e3e0:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e3e2:	782b      	ldrb	r3, [r5, #0]
  INPUT_BYTE(cinfo, c, return FALSE);
 800e3e4:	3e01      	subs	r6, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e3e6:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
  INPUT_BYTE(cinfo, c, return FALSE);
 800e3ea:	f000 809c 	beq.w	800e526 <read_markers+0x3be>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e3ee:	3501      	adds	r5, #1
  INPUT_BYTE(cinfo, c, return FALSE);
 800e3f0:	f815 3b01 	ldrb.w	r3, [r5], #1
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800e3f4:	2101      	movs	r1, #1
 800e3f6:	4620      	mov	r0, r4
  INPUT_BYTE(cinfo, c, return FALSE);
 800e3f8:	3e01      	subs	r6, #1
  cinfo->Ah = (c >> 4) & 15;
 800e3fa:	111a      	asrs	r2, r3, #4
  cinfo->Al = (c     ) & 15;
 800e3fc:	f003 030f 	and.w	r3, r3, #15
  cinfo->Ah = (c >> 4) & 15;
 800e400:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
  cinfo->Al = (c     ) & 15;
 800e404:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800e408:	f8d4 2198 	ldr.w	r2, [r4, #408]	; 0x198
 800e40c:	6823      	ldr	r3, [r4, #0]
 800e40e:	619a      	str	r2, [r3, #24]
 800e410:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
 800e414:	61da      	str	r2, [r3, #28]
 800e416:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
 800e41a:	621a      	str	r2, [r3, #32]
 800e41c:	f8d4 21a4 	ldr.w	r2, [r4, #420]	; 0x1a4
 800e420:	625a      	str	r2, [r3, #36]	; 0x24
 800e422:	226b      	movs	r2, #107	; 0x6b
 800e424:	615a      	str	r2, [r3, #20]
 800e426:	685b      	ldr	r3, [r3, #4]
 800e428:	4798      	blx	r3
  cinfo->marker->next_restart_num = 0;
 800e42a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e42e:	2200      	movs	r2, #0
 800e430:	615a      	str	r2, [r3, #20]
  if (n) cinfo->input_scan_number++;
 800e432:	f1b9 0f00 	cmp.w	r9, #0
 800e436:	d004      	beq.n	800e442 <read_markers+0x2da>
 800e438:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800e43c:	3301      	adds	r3, #1
 800e43e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      cinfo->unread_marker = 0;	/* processed the marker */
 800e442:	2300      	movs	r3, #0
      return JPEG_REACHED_SOS;
 800e444:	2001      	movs	r0, #1
  INPUT_SYNC(cinfo);
 800e446:	e9c7 5600 	strd	r5, r6, [r7]
      cinfo->unread_marker = 0;	/* processed the marker */
 800e44a:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
}
 800e44e:	b005      	add	sp, #20
 800e450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	4620      	mov	r0, r4
 800e458:	4798      	blx	r3
 800e45a:	2800      	cmp	r0, #0
 800e45c:	f43f af12 	beq.w	800e284 <read_markers+0x11c>
 800e460:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e464:	e780      	b.n	800e368 <read_markers+0x200>
  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	4620      	mov	r0, r4
 800e46a:	4798      	blx	r3
 800e46c:	2800      	cmp	r0, #0
 800e46e:	f43f af09 	beq.w	800e284 <read_markers+0x11c>
 800e472:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e476:	e77c      	b.n	800e372 <read_markers+0x20a>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800e478:	b93e      	cbnz	r6, 800e48a <read_markers+0x322>
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	4620      	mov	r0, r4
 800e47e:	4798      	blx	r3
 800e480:	2800      	cmp	r0, #0
 800e482:	f43f aeff 	beq.w	800e284 <read_markers+0x11c>
 800e486:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, c, return FALSE);
 800e48a:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, cc, return FALSE);
 800e48c:	f895 b000 	ldrb.w	fp, [r5]
    INPUT_BYTE(cinfo, c, return FALSE);
 800e490:	d02f      	beq.n	800e4f2 <read_markers+0x38a>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800e492:	3501      	adds	r5, #1
    INPUT_BYTE(cinfo, c, return FALSE);
 800e494:	3e01      	subs	r6, #1
 800e496:	f815 3b01 	ldrb.w	r3, [r5], #1
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e49a:	f8d4 80d8 	ldr.w	r8, [r4, #216]	; 0xd8
 800e49e:	2000      	movs	r0, #0
 800e4a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800e4a2:	4290      	cmp	r0, r2
 800e4a4:	db2e      	blt.n	800e504 <read_markers+0x39c>
    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);
 800e4a6:	6821      	ldr	r1, [r4, #0]
 800e4a8:	4620      	mov	r0, r4
 800e4aa:	9302      	str	r3, [sp, #8]
 800e4ac:	2304      	movs	r3, #4
 800e4ae:	e9c1 3b05 	strd	r3, fp, [r1, #20]
 800e4b2:	6809      	ldr	r1, [r1, #0]
 800e4b4:	4788      	blx	r1
 800e4b6:	9b02      	ldr	r3, [sp, #8]
    cinfo->cur_comp_info[i] = compptr;
 800e4b8:	9a01      	ldr	r2, [sp, #4]
    compptr->dc_tbl_no = (c >> 4) & 15;
 800e4ba:	1119      	asrs	r1, r3, #4
    compptr->ac_tbl_no = (c     ) & 15;
 800e4bc:	f003 030f 	and.w	r3, r3, #15
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e4c0:	4620      	mov	r0, r4
    cinfo->cur_comp_info[i] = compptr;
 800e4c2:	f842 8b04 	str.w	r8, [r2], #4
  for (i = 0; i < n; i++) {
 800e4c6:	f10a 0a01 	add.w	sl, sl, #1
    compptr->dc_tbl_no = (c >> 4) & 15;
 800e4ca:	f8c8 1014 	str.w	r1, [r8, #20]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e4ce:	6821      	ldr	r1, [r4, #0]
    compptr->ac_tbl_no = (c     ) & 15;
 800e4d0:	f8c8 3018 	str.w	r3, [r8, #24]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e4d4:	f8c1 b018 	str.w	fp, [r1, #24]
 800e4d8:	f8d8 3014 	ldr.w	r3, [r8, #20]
    cinfo->cur_comp_info[i] = compptr;
 800e4dc:	9201      	str	r2, [sp, #4]
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800e4de:	61cb      	str	r3, [r1, #28]
 800e4e0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800e4e4:	620b      	str	r3, [r1, #32]
 800e4e6:	236a      	movs	r3, #106	; 0x6a
 800e4e8:	614b      	str	r3, [r1, #20]
 800e4ea:	684b      	ldr	r3, [r1, #4]
 800e4ec:	2101      	movs	r1, #1
 800e4ee:	4798      	blx	r3
  for (i = 0; i < n; i++) {
 800e4f0:	e765      	b.n	800e3be <read_markers+0x256>
    INPUT_BYTE(cinfo, c, return FALSE);
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	4620      	mov	r0, r4
 800e4f6:	4798      	blx	r3
 800e4f8:	2800      	cmp	r0, #0
 800e4fa:	f43f aec3 	beq.w	800e284 <read_markers+0x11c>
 800e4fe:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e502:	e7c7      	b.n	800e494 <read_markers+0x32c>
      if (cc == compptr->component_id)
 800e504:	f8d8 1000 	ldr.w	r1, [r8]
 800e508:	458b      	cmp	fp, r1
 800e50a:	d0d5      	beq.n	800e4b8 <read_markers+0x350>
	 ci++, compptr++) {
 800e50c:	3001      	adds	r0, #1
 800e50e:	f108 0858 	add.w	r8, r8, #88	; 0x58
 800e512:	e7c6      	b.n	800e4a2 <read_markers+0x33a>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	4620      	mov	r0, r4
 800e518:	4798      	blx	r3
 800e51a:	2800      	cmp	r0, #0
 800e51c:	f43f aeb2 	beq.w	800e284 <read_markers+0x11c>
 800e520:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e524:	e75d      	b.n	800e3e2 <read_markers+0x27a>
  INPUT_BYTE(cinfo, c, return FALSE);
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	4620      	mov	r0, r4
 800e52a:	4798      	blx	r3
 800e52c:	2800      	cmp	r0, #0
 800e52e:	f43f aea9 	beq.w	800e284 <read_markers+0x11c>
 800e532:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e536:	e75b      	b.n	800e3f0 <read_markers+0x288>
      TRACEMS(cinfo, 1, JTRC_EOI);
 800e538:	6823      	ldr	r3, [r4, #0]
 800e53a:	2257      	movs	r2, #87	; 0x57
 800e53c:	4620      	mov	r0, r4
 800e53e:	2101      	movs	r1, #1
 800e540:	615a      	str	r2, [r3, #20]
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	4798      	blx	r3
      cinfo->unread_marker = 0;	/* processed the marker */
 800e546:	2300      	movs	r3, #0
      return JPEG_REACHED_EOI;
 800e548:	2002      	movs	r0, #2
      cinfo->unread_marker = 0;	/* processed the marker */
 800e54a:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
      return JPEG_REACHED_EOI;
 800e54e:	e77e      	b.n	800e44e <read_markers+0x2e6>
  INPUT_VARS(cinfo);
 800e550:	69a7      	ldr	r7, [r4, #24]
 800e552:	687e      	ldr	r6, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e554:	b1e6      	cbz	r6, 800e590 <read_markers+0x428>
  INPUT_VARS(cinfo);
 800e556:	683d      	ldr	r5, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e558:	f895 9000 	ldrb.w	r9, [r5]
 800e55c:	3e01      	subs	r6, #1
 800e55e:	ea4f 2909 	mov.w	r9, r9, lsl #8
 800e562:	d01e      	beq.n	800e5a2 <read_markers+0x43a>
 800e564:	3501      	adds	r5, #1
 800e566:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e56a:	3e01      	subs	r6, #1
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800e56c:	f04f 0b1d 	mov.w	fp, #29
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e570:	4499      	add	r9, r3
  length -= 2;
 800e572:	f1a9 0902 	sub.w	r9, r9, #2
  while (length > 0) {
 800e576:	f1b9 0f00 	cmp.w	r9, #0
 800e57a:	dc1b      	bgt.n	800e5b4 <read_markers+0x44c>
  if (length != 0)
 800e57c:	d005      	beq.n	800e58a <read_markers+0x422>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e57e:	6823      	ldr	r3, [r4, #0]
 800e580:	220c      	movs	r2, #12
 800e582:	4620      	mov	r0, r4
 800e584:	615a      	str	r2, [r3, #20]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	4798      	blx	r3
  INPUT_SYNC(cinfo);
 800e58a:	603d      	str	r5, [r7, #0]
  INPUT_SYNC(cinfo);
 800e58c:	607e      	str	r6, [r7, #4]
  return TRUE;
 800e58e:	e6ae      	b.n	800e2ee <read_markers+0x186>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	4620      	mov	r0, r4
 800e594:	4798      	blx	r3
 800e596:	2800      	cmp	r0, #0
 800e598:	f43f ae74 	beq.w	800e284 <read_markers+0x11c>
 800e59c:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e5a0:	e7da      	b.n	800e558 <read_markers+0x3f0>
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	4620      	mov	r0, r4
 800e5a6:	4798      	blx	r3
 800e5a8:	2800      	cmp	r0, #0
 800e5aa:	f43f ae6b 	beq.w	800e284 <read_markers+0x11c>
 800e5ae:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e5b2:	e7d8      	b.n	800e566 <read_markers+0x3fe>
    INPUT_BYTE(cinfo, index, return FALSE);
 800e5b4:	b93e      	cbnz	r6, 800e5c6 <read_markers+0x45e>
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	4798      	blx	r3
 800e5bc:	2800      	cmp	r0, #0
 800e5be:	f43f ae61 	beq.w	800e284 <read_markers+0x11c>
 800e5c2:	e9d7 5600 	ldrd	r5, r6, [r7]
    INPUT_BYTE(cinfo, val, return FALSE);
 800e5c6:	3e01      	subs	r6, #1
    INPUT_BYTE(cinfo, index, return FALSE);
 800e5c8:	f895 8000 	ldrb.w	r8, [r5]
    INPUT_BYTE(cinfo, val, return FALSE);
 800e5cc:	d01f      	beq.n	800e60e <read_markers+0x4a6>
    INPUT_BYTE(cinfo, index, return FALSE);
 800e5ce:	3501      	adds	r5, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e5d0:	6822      	ldr	r2, [r4, #0]
 800e5d2:	2351      	movs	r3, #81	; 0x51
    INPUT_BYTE(cinfo, val, return FALSE);
 800e5d4:	f815 ab01 	ldrb.w	sl, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e5d8:	2101      	movs	r1, #1
 800e5da:	4620      	mov	r0, r4
    INPUT_BYTE(cinfo, val, return FALSE);
 800e5dc:	3e01      	subs	r6, #1
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e5de:	f8c2 a01c 	str.w	sl, [r2, #28]
    length -= 2;
 800e5e2:	f1a9 0902 	sub.w	r9, r9, #2
    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800e5e6:	e9c2 3805 	strd	r3, r8, [r2, #20]
 800e5ea:	6852      	ldr	r2, [r2, #4]
 800e5ec:	4790      	blx	r2
    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
 800e5ee:	f1b8 0f1f 	cmp.w	r8, #31
 800e5f2:	d905      	bls.n	800e600 <read_markers+0x498>
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800e5f4:	6822      	ldr	r2, [r4, #0]
 800e5f6:	4620      	mov	r0, r4
 800e5f8:	e9c2 b805 	strd	fp, r8, [r2, #20]
 800e5fc:	6812      	ldr	r2, [r2, #0]
 800e5fe:	4790      	blx	r2
    if (index >= NUM_ARITH_TBLS) { /* define AC table */
 800e600:	f1b8 0f0f 	cmp.w	r8, #15
 800e604:	44a0      	add	r8, r4
 800e606:	dd0b      	ble.n	800e620 <read_markers+0x4b8>
      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
 800e608:	f888 a0f8 	strb.w	sl, [r8, #248]	; 0xf8
 800e60c:	e7b3      	b.n	800e576 <read_markers+0x40e>
    INPUT_BYTE(cinfo, val, return FALSE);
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	4620      	mov	r0, r4
 800e612:	4798      	blx	r3
 800e614:	2800      	cmp	r0, #0
 800e616:	f43f ae35 	beq.w	800e284 <read_markers+0x11c>
 800e61a:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e61e:	e7d7      	b.n	800e5d0 <read_markers+0x468>
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800e620:	f00a 010f 	and.w	r1, sl, #15
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800e624:	ea4f 121a 	mov.w	r2, sl, lsr #4
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800e628:	4291      	cmp	r1, r2
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800e62a:	f888 10e8 	strb.w	r1, [r8, #232]	; 0xe8
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800e62e:	f888 20f8 	strb.w	r2, [r8, #248]	; 0xf8
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800e632:	d9a0      	bls.n	800e576 <read_markers+0x40e>
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
 800e634:	6822      	ldr	r2, [r4, #0]
 800e636:	211e      	movs	r1, #30
 800e638:	4620      	mov	r0, r4
 800e63a:	6813      	ldr	r3, [r2, #0]
 800e63c:	e9c2 1a05 	strd	r1, sl, [r2, #20]
 800e640:	4798      	blx	r3
 800e642:	e798      	b.n	800e576 <read_markers+0x40e>
      if (! get_dht(cinfo))
 800e644:	4620      	mov	r0, r4
 800e646:	f7ff fc85 	bl	800df54 <get_dht>
 800e64a:	e65a      	b.n	800e302 <read_markers+0x19a>
  INPUT_VARS(cinfo);
 800e64c:	69a6      	ldr	r6, [r4, #24]
 800e64e:	6873      	ldr	r3, [r6, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e650:	b1db      	cbz	r3, 800e68a <read_markers+0x522>
  INPUT_VARS(cinfo);
 800e652:	6835      	ldr	r5, [r6, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e654:	f895 8000 	ldrb.w	r8, [r5]
 800e658:	3b01      	subs	r3, #1
 800e65a:	ea4f 2708 	mov.w	r7, r8, lsl #8
 800e65e:	d01d      	beq.n	800e69c <read_markers+0x534>
 800e660:	3501      	adds	r5, #1
 800e662:	f815 8b01 	ldrb.w	r8, [r5], #1
 800e666:	f103 3aff 	add.w	sl, r3, #4294967295
 800e66a:	44b8      	add	r8, r7
  length -= 2;
 800e66c:	f1a8 0802 	sub.w	r8, r8, #2
  while (length > 0) {
 800e670:	f1b8 0f00 	cmp.w	r8, #0
 800e674:	dc1b      	bgt.n	800e6ae <read_markers+0x546>
  if (length != 0)
 800e676:	d005      	beq.n	800e684 <read_markers+0x51c>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e678:	6822      	ldr	r2, [r4, #0]
 800e67a:	210c      	movs	r1, #12
 800e67c:	4620      	mov	r0, r4
 800e67e:	6151      	str	r1, [r2, #20]
 800e680:	6812      	ldr	r2, [r2, #0]
 800e682:	4790      	blx	r2
  INPUT_SYNC(cinfo);
 800e684:	e9c6 5a00 	strd	r5, sl, [r6]
  return TRUE;
 800e688:	e631      	b.n	800e2ee <read_markers+0x186>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e68a:	68f3      	ldr	r3, [r6, #12]
 800e68c:	4620      	mov	r0, r4
 800e68e:	4798      	blx	r3
 800e690:	2800      	cmp	r0, #0
 800e692:	f43f adf7 	beq.w	800e284 <read_markers+0x11c>
 800e696:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e69a:	e7db      	b.n	800e654 <read_markers+0x4ec>
 800e69c:	68f3      	ldr	r3, [r6, #12]
 800e69e:	4620      	mov	r0, r4
 800e6a0:	4798      	blx	r3
 800e6a2:	2800      	cmp	r0, #0
 800e6a4:	f43f adee 	beq.w	800e284 <read_markers+0x11c>
 800e6a8:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e6ac:	e7d9      	b.n	800e662 <read_markers+0x4fa>
    length--;
 800e6ae:	f108 38ff 	add.w	r8, r8, #4294967295
    INPUT_BYTE(cinfo, n, return FALSE);
 800e6b2:	f1ba 0f00 	cmp.w	sl, #0
 800e6b6:	d107      	bne.n	800e6c8 <read_markers+0x560>
 800e6b8:	68f3      	ldr	r3, [r6, #12]
 800e6ba:	4620      	mov	r0, r4
 800e6bc:	4798      	blx	r3
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	f43f ade0 	beq.w	800e284 <read_markers+0x11c>
 800e6c4:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800e6c8:	f815 9b01 	ldrb.w	r9, [r5], #1
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800e6cc:	2153      	movs	r1, #83	; 0x53
 800e6ce:	6822      	ldr	r2, [r4, #0]
 800e6d0:	4620      	mov	r0, r4
    prec = n >> 4;
 800e6d2:	ea4f 1329 	mov.w	r3, r9, asr #4
 800e6d6:	f009 070f 	and.w	r7, r9, #15
    INPUT_BYTE(cinfo, n, return FALSE);
 800e6da:	f10a 3aff 	add.w	sl, sl, #4294967295
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800e6de:	61d3      	str	r3, [r2, #28]
    prec = n >> 4;
 800e6e0:	9301      	str	r3, [sp, #4]
    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800e6e2:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800e6e6:	6852      	ldr	r2, [r2, #4]
 800e6e8:	2101      	movs	r1, #1
 800e6ea:	4790      	blx	r2
    if (n >= NUM_QUANT_TBLS)
 800e6ec:	f019 0f0c 	tst.w	r9, #12
 800e6f0:	d006      	beq.n	800e700 <read_markers+0x598>
      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
 800e6f2:	6822      	ldr	r2, [r4, #0]
 800e6f4:	2120      	movs	r1, #32
 800e6f6:	4620      	mov	r0, r4
 800e6f8:	e9c2 1705 	strd	r1, r7, [r2, #20]
 800e6fc:	6812      	ldr	r2, [r2, #0]
 800e6fe:	4790      	blx	r2
    if (cinfo->quant_tbl_ptrs[n] == NULL)
 800e700:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800e704:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e708:	b922      	cbnz	r2, 800e714 <read_markers+0x5ac>
      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
 800e70a:	4620      	mov	r0, r4
 800e70c:	f7fb f938 	bl	8009980 <jpeg_alloc_quant_table>
 800e710:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    if (prec) {
 800e714:	9b01      	ldr	r3, [sp, #4]
    quant_ptr = cinfo->quant_tbl_ptrs[n];
 800e716:	f8d7 b0a4 	ldr.w	fp, [r7, #164]	; 0xa4
    if (prec) {
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d057      	beq.n	800e7ce <read_markers+0x666>
      if (length < DCTSIZE2 * 2) {
 800e71e:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 800e722:	dc6c      	bgt.n	800e7fe <read_markers+0x696>
 800e724:	f1ab 0202 	sub.w	r2, fp, #2
 800e728:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800e72c:	2001      	movs	r0, #1
 800e72e:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800e732:	4291      	cmp	r1, r2
 800e734:	d1fb      	bne.n	800e72e <read_markers+0x5c6>
	count = length >> 1;
 800e736:	ea4f 0968 	mov.w	r9, r8, asr #1
    switch (count) {
 800e73a:	f1b9 0f19 	cmp.w	r9, #25
 800e73e:	d062      	beq.n	800e806 <read_markers+0x69e>
 800e740:	dc53      	bgt.n	800e7ea <read_markers+0x682>
 800e742:	f1b9 0f09 	cmp.w	r9, #9
 800e746:	d060      	beq.n	800e80a <read_markers+0x6a2>
 800e748:	f1b9 0f10 	cmp.w	r9, #16
 800e74c:	d05f      	beq.n	800e80e <read_markers+0x6a6>
    default:    natural_order = jpeg_natural_order;  break;
 800e74e:	4f85      	ldr	r7, [pc, #532]	; (800e964 <read_markers+0x7fc>)
 800e750:	4a85      	ldr	r2, [pc, #532]	; (800e968 <read_markers+0x800>)
 800e752:	f1b9 0f04 	cmp.w	r9, #4
 800e756:	bf18      	it	ne
 800e758:	4617      	movne	r7, r2
    for (i = 0; i < count; i++) {
 800e75a:	eb07 0389 	add.w	r3, r7, r9, lsl #2
 800e75e:	9302      	str	r3, [sp, #8]
 800e760:	9b02      	ldr	r3, [sp, #8]
 800e762:	42bb      	cmp	r3, r7
 800e764:	d157      	bne.n	800e816 <read_markers+0x6ae>
    if (cinfo->err->trace_level >= 2) {
 800e766:	6822      	ldr	r2, [r4, #0]
 800e768:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e76a:	2a01      	cmp	r2, #1
 800e76c:	dd26      	ble.n	800e7bc <read_markers+0x654>
 800e76e:	f10b 0380 	add.w	r3, fp, #128	; 0x80
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800e772:	275f      	movs	r7, #95	; 0x5f
 800e774:	f8bb 1000 	ldrh.w	r1, [fp]
 800e778:	4620      	mov	r0, r4
 800e77a:	6822      	ldr	r2, [r4, #0]
 800e77c:	f10b 0b10 	add.w	fp, fp, #16
 800e780:	9302      	str	r3, [sp, #8]
 800e782:	6191      	str	r1, [r2, #24]
 800e784:	f83b 1c0e 	ldrh.w	r1, [fp, #-14]
 800e788:	61d1      	str	r1, [r2, #28]
 800e78a:	f83b 1c0c 	ldrh.w	r1, [fp, #-12]
 800e78e:	6211      	str	r1, [r2, #32]
 800e790:	f83b 1c0a 	ldrh.w	r1, [fp, #-10]
 800e794:	6251      	str	r1, [r2, #36]	; 0x24
 800e796:	f83b 1c08 	ldrh.w	r1, [fp, #-8]
 800e79a:	6291      	str	r1, [r2, #40]	; 0x28
 800e79c:	f83b 1c06 	ldrh.w	r1, [fp, #-6]
 800e7a0:	62d1      	str	r1, [r2, #44]	; 0x2c
 800e7a2:	f83b 1c04 	ldrh.w	r1, [fp, #-4]
 800e7a6:	6311      	str	r1, [r2, #48]	; 0x30
 800e7a8:	f83b 1c02 	ldrh.w	r1, [fp, #-2]
 800e7ac:	6157      	str	r7, [r2, #20]
 800e7ae:	6351      	str	r1, [r2, #52]	; 0x34
 800e7b0:	2102      	movs	r1, #2
 800e7b2:	6852      	ldr	r2, [r2, #4]
 800e7b4:	4790      	blx	r2
      for (i = 0; i < DCTSIZE2; i += 8) {
 800e7b6:	9b02      	ldr	r3, [sp, #8]
 800e7b8:	455b      	cmp	r3, fp
 800e7ba:	d1db      	bne.n	800e774 <read_markers+0x60c>
    if (prec) length -= count;
 800e7bc:	9b01      	ldr	r3, [sp, #4]
    length -= count;
 800e7be:	eba8 0809 	sub.w	r8, r8, r9
    if (prec) length -= count;
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	f43f af54 	beq.w	800e670 <read_markers+0x508>
 800e7c8:	eba8 0809 	sub.w	r8, r8, r9
 800e7cc:	e750      	b.n	800e670 <read_markers+0x508>
      if (length < DCTSIZE2) {
 800e7ce:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 800e7d2:	dc14      	bgt.n	800e7fe <read_markers+0x696>
 800e7d4:	f1ab 0202 	sub.w	r2, fp, #2
 800e7d8:	f10b 017e 	add.w	r1, fp, #126	; 0x7e
	  quant_ptr->quantval[i] = 1;
 800e7dc:	2001      	movs	r0, #1
 800e7de:	f822 0f02 	strh.w	r0, [r2, #2]!
	for (i = 0; i < DCTSIZE2; i++) {
 800e7e2:	4291      	cmp	r1, r2
 800e7e4:	d1fb      	bne.n	800e7de <read_markers+0x676>
 800e7e6:	46c1      	mov	r9, r8
 800e7e8:	e7a7      	b.n	800e73a <read_markers+0x5d2>
    switch (count) {
 800e7ea:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
 800e7ee:	d010      	beq.n	800e812 <read_markers+0x6aa>
    default:    natural_order = jpeg_natural_order;  break;
 800e7f0:	4f5d      	ldr	r7, [pc, #372]	; (800e968 <read_markers+0x800>)
 800e7f2:	4b5e      	ldr	r3, [pc, #376]	; (800e96c <read_markers+0x804>)
 800e7f4:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
 800e7f8:	bf08      	it	eq
 800e7fa:	461f      	moveq	r7, r3
 800e7fc:	e7ad      	b.n	800e75a <read_markers+0x5f2>
	count = DCTSIZE2;
 800e7fe:	f04f 0940 	mov.w	r9, #64	; 0x40
    default:    natural_order = jpeg_natural_order;  break;
 800e802:	4f59      	ldr	r7, [pc, #356]	; (800e968 <read_markers+0x800>)
 800e804:	e7a9      	b.n	800e75a <read_markers+0x5f2>
    case (5*5): natural_order = jpeg_natural_order5; break;
 800e806:	4f5a      	ldr	r7, [pc, #360]	; (800e970 <read_markers+0x808>)
 800e808:	e7a7      	b.n	800e75a <read_markers+0x5f2>
    case (3*3): natural_order = jpeg_natural_order3; break;
 800e80a:	4f5a      	ldr	r7, [pc, #360]	; (800e974 <read_markers+0x80c>)
 800e80c:	e7a5      	b.n	800e75a <read_markers+0x5f2>
    case (4*4): natural_order = jpeg_natural_order4; break;
 800e80e:	4f5a      	ldr	r7, [pc, #360]	; (800e978 <read_markers+0x810>)
 800e810:	e7a3      	b.n	800e75a <read_markers+0x5f2>
    case (6*6): natural_order = jpeg_natural_order6; break;
 800e812:	4f5a      	ldr	r7, [pc, #360]	; (800e97c <read_markers+0x814>)
 800e814:	e7a1      	b.n	800e75a <read_markers+0x5f2>
      if (prec)
 800e816:	9b01      	ldr	r3, [sp, #4]
 800e818:	b333      	cbz	r3, 800e868 <read_markers+0x700>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e81a:	f1ba 0f00 	cmp.w	sl, #0
 800e81e:	d107      	bne.n	800e830 <read_markers+0x6c8>
 800e820:	68f3      	ldr	r3, [r6, #12]
 800e822:	4620      	mov	r0, r4
 800e824:	4798      	blx	r3
 800e826:	2800      	cmp	r0, #0
 800e828:	f43f ad2c 	beq.w	800e284 <read_markers+0x11c>
 800e82c:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800e830:	782a      	ldrb	r2, [r5, #0]
 800e832:	f1ba 0301 	subs.w	r3, sl, #1
 800e836:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800e83a:	d00a      	beq.n	800e852 <read_markers+0x6ea>
 800e83c:	3501      	adds	r5, #1
 800e83e:	f815 1b01 	ldrb.w	r1, [r5], #1
 800e842:	f103 3aff 	add.w	sl, r3, #4294967295
 800e846:	440a      	add	r2, r1
      quant_ptr->quantval[natural_order[i]] = (UINT16) tmp;
 800e848:	f857 1b04 	ldr.w	r1, [r7], #4
 800e84c:	f82b 2011 	strh.w	r2, [fp, r1, lsl #1]
    for (i = 0; i < count; i++) {
 800e850:	e786      	b.n	800e760 <read_markers+0x5f8>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e852:	68f3      	ldr	r3, [r6, #12]
 800e854:	4620      	mov	r0, r4
 800e856:	9203      	str	r2, [sp, #12]
 800e858:	4798      	blx	r3
 800e85a:	2800      	cmp	r0, #0
 800e85c:	f43f ad12 	beq.w	800e284 <read_markers+0x11c>
 800e860:	9a03      	ldr	r2, [sp, #12]
 800e862:	e9d6 5300 	ldrd	r5, r3, [r6]
 800e866:	e7ea      	b.n	800e83e <read_markers+0x6d6>
	INPUT_BYTE(cinfo, tmp, return FALSE);
 800e868:	f1ba 0f00 	cmp.w	sl, #0
 800e86c:	d107      	bne.n	800e87e <read_markers+0x716>
 800e86e:	68f3      	ldr	r3, [r6, #12]
 800e870:	4620      	mov	r0, r4
 800e872:	4798      	blx	r3
 800e874:	2800      	cmp	r0, #0
 800e876:	f43f ad05 	beq.w	800e284 <read_markers+0x11c>
 800e87a:	e9d6 5a00 	ldrd	r5, sl, [r6]
 800e87e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e882:	f815 2b01 	ldrb.w	r2, [r5], #1
 800e886:	e7df      	b.n	800e848 <read_markers+0x6e0>
  INPUT_VARS(cinfo);
 800e888:	69a7      	ldr	r7, [r4, #24]
 800e88a:	687b      	ldr	r3, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e88c:	b353      	cbz	r3, 800e8e4 <read_markers+0x77c>
  INPUT_VARS(cinfo);
 800e88e:	683d      	ldr	r5, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e890:	782a      	ldrb	r2, [r5, #0]
 800e892:	3b01      	subs	r3, #1
 800e894:	ea4f 2802 	mov.w	r8, r2, lsl #8
 800e898:	d02d      	beq.n	800e8f6 <read_markers+0x78e>
 800e89a:	3501      	adds	r5, #1
 800e89c:	782a      	ldrb	r2, [r5, #0]
 800e89e:	1e5e      	subs	r6, r3, #1
 800e8a0:	4442      	add	r2, r8
  if (length != 4)
 800e8a2:	2a04      	cmp	r2, #4
 800e8a4:	d005      	beq.n	800e8b2 <read_markers+0x74a>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800e8a6:	6823      	ldr	r3, [r4, #0]
 800e8a8:	220c      	movs	r2, #12
 800e8aa:	4620      	mov	r0, r4
 800e8ac:	615a      	str	r2, [r3, #20]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	4798      	blx	r3
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e8b2:	b34e      	cbz	r6, 800e908 <read_markers+0x7a0>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e8b4:	3501      	adds	r5, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e8b6:	f895 8000 	ldrb.w	r8, [r5]
 800e8ba:	3e01      	subs	r6, #1
 800e8bc:	ea4f 2908 	mov.w	r9, r8, lsl #8
 800e8c0:	d02b      	beq.n	800e91a <read_markers+0x7b2>
 800e8c2:	3501      	adds	r5, #1
 800e8c4:	f815 8b01 	ldrb.w	r8, [r5], #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800e8c8:	2254      	movs	r2, #84	; 0x54
 800e8ca:	6823      	ldr	r3, [r4, #0]
 800e8cc:	2101      	movs	r1, #1
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e8ce:	44c8      	add	r8, r9
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800e8d0:	4620      	mov	r0, r4
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e8d2:	3e01      	subs	r6, #1
  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800e8d4:	e9c3 2805 	strd	r2, r8, [r3, #20]
 800e8d8:	685b      	ldr	r3, [r3, #4]
 800e8da:	4798      	blx	r3
  cinfo->restart_interval = tmp;
 800e8dc:	f8c4 8118 	str.w	r8, [r4, #280]	; 0x118
  INPUT_SYNC(cinfo);
 800e8e0:	603d      	str	r5, [r7, #0]
 800e8e2:	e653      	b.n	800e58c <read_markers+0x424>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	4620      	mov	r0, r4
 800e8e8:	4798      	blx	r3
 800e8ea:	2800      	cmp	r0, #0
 800e8ec:	f43f acca 	beq.w	800e284 <read_markers+0x11c>
 800e8f0:	e9d7 5300 	ldrd	r5, r3, [r7]
 800e8f4:	e7cc      	b.n	800e890 <read_markers+0x728>
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	4620      	mov	r0, r4
 800e8fa:	4798      	blx	r3
 800e8fc:	2800      	cmp	r0, #0
 800e8fe:	f43f acc1 	beq.w	800e284 <read_markers+0x11c>
 800e902:	e9d7 5300 	ldrd	r5, r3, [r7]
 800e906:	e7c9      	b.n	800e89c <read_markers+0x734>
  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	4620      	mov	r0, r4
 800e90c:	4798      	blx	r3
 800e90e:	2800      	cmp	r0, #0
 800e910:	f43f acb8 	beq.w	800e284 <read_markers+0x11c>
 800e914:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e918:	e7cd      	b.n	800e8b6 <read_markers+0x74e>
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	4620      	mov	r0, r4
 800e91e:	4798      	blx	r3
 800e920:	2800      	cmp	r0, #0
 800e922:	f43f acaf 	beq.w	800e284 <read_markers+0x11c>
 800e926:	e9d7 5600 	ldrd	r5, r6, [r7]
 800e92a:	e7cb      	b.n	800e8c4 <read_markers+0x75c>
      if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
 800e92c:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 800e930:	3bd8      	subs	r3, #216	; 0xd8
 800e932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e936:	4620      	mov	r0, r4
 800e938:	4798      	blx	r3
 800e93a:	e4e2      	b.n	800e302 <read_markers+0x19a>
      if (! (*((my_marker_ptr) cinfo->marker)->process_COM) (cinfo))
 800e93c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
 800e940:	69db      	ldr	r3, [r3, #28]
 800e942:	e7f8      	b.n	800e936 <read_markers+0x7ce>
      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
 800e944:	6822      	ldr	r2, [r4, #0]
 800e946:	215e      	movs	r1, #94	; 0x5e
 800e948:	4620      	mov	r0, r4
 800e94a:	e9c2 1305 	strd	r1, r3, [r2, #20]
 800e94e:	6853      	ldr	r3, [r2, #4]
 800e950:	2101      	movs	r1, #1
 800e952:	4798      	blx	r3
      break;
 800e954:	e4cb      	b.n	800e2ee <read_markers+0x186>
      if (! skip_variable(cinfo))
 800e956:	4620      	mov	r0, r4
 800e958:	f7ff fa6c 	bl	800de34 <skip_variable>
 800e95c:	e4d1      	b.n	800e302 <read_markers+0x19a>
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800e95e:	6822      	ldr	r2, [r4, #0]
 800e960:	2146      	movs	r1, #70	; 0x46
 800e962:	e4df      	b.n	800e324 <read_markers+0x1bc>
 800e964:	0802f4c0 	.word	0x0802f4c0
 800e968:	0802f380 	.word	0x0802f380
 800e96c:	0802f768 	.word	0x0802f768
 800e970:	0802f5f4 	.word	0x0802f5f4
 800e974:	0802f510 	.word	0x0802f510
 800e978:	0802f574 	.word	0x0802f574
 800e97c:	0802f698 	.word	0x0802f698

0800e980 <examine_app14>:
{
 800e980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (datalen >= APP14_DATA_LEN &&
 800e984:	2a0b      	cmp	r2, #11
 800e986:	6804      	ldr	r4, [r0, #0]
{
 800e988:	4605      	mov	r5, r0
  if (datalen >= APP14_DATA_LEN &&
 800e98a:	6866      	ldr	r6, [r4, #4]
 800e98c:	d92b      	bls.n	800e9e6 <examine_app14+0x66>
 800e98e:	780f      	ldrb	r7, [r1, #0]
 800e990:	2f41      	cmp	r7, #65	; 0x41
 800e992:	d128      	bne.n	800e9e6 <examine_app14+0x66>
      GETJOCTET(data[0]) == 0x41 &&
 800e994:	784f      	ldrb	r7, [r1, #1]
 800e996:	2f64      	cmp	r7, #100	; 0x64
 800e998:	d125      	bne.n	800e9e6 <examine_app14+0x66>
      GETJOCTET(data[1]) == 0x64 &&
 800e99a:	788f      	ldrb	r7, [r1, #2]
 800e99c:	2f6f      	cmp	r7, #111	; 0x6f
 800e99e:	d122      	bne.n	800e9e6 <examine_app14+0x66>
      GETJOCTET(data[2]) == 0x6F &&
 800e9a0:	78cf      	ldrb	r7, [r1, #3]
 800e9a2:	2f62      	cmp	r7, #98	; 0x62
 800e9a4:	d11f      	bne.n	800e9e6 <examine_app14+0x66>
      GETJOCTET(data[3]) == 0x62 &&
 800e9a6:	790f      	ldrb	r7, [r1, #4]
 800e9a8:	2f65      	cmp	r7, #101	; 0x65
 800e9aa:	d11c      	bne.n	800e9e6 <examine_app14+0x66>
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800e9ac:	79cb      	ldrb	r3, [r1, #7]
 800e9ae:	7a0a      	ldrb	r2, [r1, #8]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800e9b0:	7a4f      	ldrb	r7, [r1, #9]
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800e9b2:	eb02 2203 	add.w	r2, r2, r3, lsl #8
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800e9b6:	7a8b      	ldrb	r3, [r1, #10]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800e9b8:	f891 c005 	ldrb.w	ip, [r1, #5]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800e9bc:	eb03 2307 	add.w	r3, r3, r7, lsl #8
    transform = GETJOCTET(data[11]);
 800e9c0:	7acf      	ldrb	r7, [r1, #11]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800e9c2:	7989      	ldrb	r1, [r1, #6]
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800e9c4:	e9c4 3708 	strd	r3, r7, [r4, #32]
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800e9c8:	eb01 210c 	add.w	r1, r1, ip, lsl #8
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800e9cc:	234e      	movs	r3, #78	; 0x4e
 800e9ce:	e9c4 1206 	strd	r1, r2, [r4, #24]
 800e9d2:	6163      	str	r3, [r4, #20]
 800e9d4:	2101      	movs	r1, #1
 800e9d6:	47b0      	blx	r6
    cinfo->saw_Adobe_marker = TRUE;
 800e9d8:	2301      	movs	r3, #1
    cinfo->Adobe_transform = (UINT8) transform;
 800e9da:	f885 712c 	strb.w	r7, [r5, #300]	; 0x12c
    cinfo->saw_Adobe_marker = TRUE;
 800e9de:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
}
 800e9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800e9e6:	2150      	movs	r1, #80	; 0x50
 800e9e8:	441a      	add	r2, r3
 800e9ea:	4628      	mov	r0, r5
 800e9ec:	4633      	mov	r3, r6
 800e9ee:	6161      	str	r1, [r4, #20]
 800e9f0:	2101      	movs	r1, #1
 800e9f2:	61a2      	str	r2, [r4, #24]
}
 800e9f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800e9f8:	4718      	bx	r3

0800e9fa <get_interesting_appn>:
{
 800e9fa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  INPUT_VARS(cinfo);
 800e9fe:	6987      	ldr	r7, [r0, #24]
{
 800ea00:	4681      	mov	r9, r0
  INPUT_VARS(cinfo);
 800ea02:	687a      	ldr	r2, [r7, #4]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ea04:	b3a2      	cbz	r2, 800ea70 <get_interesting_appn+0x76>
  INPUT_VARS(cinfo);
 800ea06:	683c      	ldr	r4, [r7, #0]
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ea08:	7825      	ldrb	r5, [r4, #0]
 800ea0a:	3a01      	subs	r2, #1
 800ea0c:	ea4f 2605 	mov.w	r6, r5, lsl #8
 800ea10:	d038      	beq.n	800ea84 <get_interesting_appn+0x8a>
 800ea12:	3401      	adds	r4, #1
 800ea14:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ea18:	f102 38ff 	add.w	r8, r2, #4294967295
 800ea1c:	4435      	add	r5, r6
  length -= 2;
 800ea1e:	3d02      	subs	r5, #2
  if (length >= APPN_DATA_LEN)
 800ea20:	2d0d      	cmp	r5, #13
 800ea22:	dc37      	bgt.n	800ea94 <get_interesting_appn+0x9a>
  else if (length > 0)
 800ea24:	2d00      	cmp	r5, #0
 800ea26:	dd38      	ble.n	800ea9a <get_interesting_appn+0xa0>
 800ea28:	46aa      	mov	sl, r5
  for (i = 0; i < numtoread; i++)
 800ea2a:	2600      	movs	r6, #0
    INPUT_BYTE(cinfo, b[i], return FALSE);
 800ea2c:	f1b8 0f00 	cmp.w	r8, #0
 800ea30:	d105      	bne.n	800ea3e <get_interesting_appn+0x44>
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	4648      	mov	r0, r9
 800ea36:	4798      	blx	r3
 800ea38:	b1e8      	cbz	r0, 800ea76 <get_interesting_appn+0x7c>
 800ea3a:	e9d7 4800 	ldrd	r4, r8, [r7]
 800ea3e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ea42:	f108 38ff 	add.w	r8, r8, #4294967295
 800ea46:	f80d 3006 	strb.w	r3, [sp, r6]
  for (i = 0; i < numtoread; i++)
 800ea4a:	3601      	adds	r6, #1
 800ea4c:	45b2      	cmp	sl, r6
 800ea4e:	d1ed      	bne.n	800ea2c <get_interesting_appn+0x32>
  switch (cinfo->unread_marker) {
 800ea50:	f8d9 21b4 	ldr.w	r2, [r9, #436]	; 0x1b4
  length -= numtoread;
 800ea54:	1bad      	subs	r5, r5, r6
  switch (cinfo->unread_marker) {
 800ea56:	2ae0      	cmp	r2, #224	; 0xe0
 800ea58:	d021      	beq.n	800ea9e <get_interesting_appn+0xa4>
 800ea5a:	2aee      	cmp	r2, #238	; 0xee
 800ea5c:	d031      	beq.n	800eac2 <get_interesting_appn+0xc8>
    ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800ea5e:	f8d9 3000 	ldr.w	r3, [r9]
 800ea62:	2146      	movs	r1, #70	; 0x46
 800ea64:	4648      	mov	r0, r9
 800ea66:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	4798      	blx	r3
    break;
 800ea6e:	e01c      	b.n	800eaaa <get_interesting_appn+0xb0>
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	4798      	blx	r3
 800ea74:	b918      	cbnz	r0, 800ea7e <get_interesting_appn+0x84>
 800ea76:	2000      	movs	r0, #0
}
 800ea78:	b004      	add	sp, #16
 800ea7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  INPUT_2BYTES(cinfo, length, return FALSE);
 800ea7e:	e9d7 4200 	ldrd	r4, r2, [r7]
 800ea82:	e7c1      	b.n	800ea08 <get_interesting_appn+0xe>
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	4648      	mov	r0, r9
 800ea88:	4798      	blx	r3
 800ea8a:	2800      	cmp	r0, #0
 800ea8c:	d0f3      	beq.n	800ea76 <get_interesting_appn+0x7c>
 800ea8e:	e9d7 4200 	ldrd	r4, r2, [r7]
 800ea92:	e7bf      	b.n	800ea14 <get_interesting_appn+0x1a>
    numtoread = APPN_DATA_LEN;
 800ea94:	f04f 0a0e 	mov.w	sl, #14
 800ea98:	e7c7      	b.n	800ea2a <get_interesting_appn+0x30>
    numtoread = 0;
 800ea9a:	2600      	movs	r6, #0
 800ea9c:	e7d8      	b.n	800ea50 <get_interesting_appn+0x56>
    examine_app0(cinfo, (JOCTET FAR *) b, numtoread, length);
 800ea9e:	462b      	mov	r3, r5
 800eaa0:	4632      	mov	r2, r6
 800eaa2:	4669      	mov	r1, sp
 800eaa4:	4648      	mov	r0, r9
 800eaa6:	f7ff f924 	bl	800dcf2 <examine_app0>
  if (length > 0)
 800eaaa:	2d00      	cmp	r5, #0
  INPUT_SYNC(cinfo);
 800eaac:	e9c7 4800 	strd	r4, r8, [r7]
  if (length > 0)
 800eab0:	dd05      	ble.n	800eabe <get_interesting_appn+0xc4>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800eab2:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800eab6:	4629      	mov	r1, r5
 800eab8:	4648      	mov	r0, r9
 800eaba:	691b      	ldr	r3, [r3, #16]
 800eabc:	4798      	blx	r3
  return TRUE;
 800eabe:	2001      	movs	r0, #1
 800eac0:	e7da      	b.n	800ea78 <get_interesting_appn+0x7e>
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
 800eac2:	462b      	mov	r3, r5
 800eac4:	4632      	mov	r2, r6
 800eac6:	4669      	mov	r1, sp
 800eac8:	4648      	mov	r0, r9
 800eaca:	f7ff ff59 	bl	800e980 <examine_app14>
    break;
 800eace:	e7ec      	b.n	800eaaa <get_interesting_appn+0xb0>

0800ead0 <read_restart_marker>:
  if (cinfo->unread_marker == 0) {
 800ead0:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
{
 800ead4:	b510      	push	{r4, lr}
 800ead6:	4604      	mov	r4, r0
  if (cinfo->unread_marker == 0) {
 800ead8:	b1e3      	cbz	r3, 800eb14 <read_restart_marker+0x44>
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800eada:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
  if (cinfo->unread_marker ==
 800eade:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800eae2:	6959      	ldr	r1, [r3, #20]
 800eae4:	f101 03d0 	add.w	r3, r1, #208	; 0xd0
  if (cinfo->unread_marker ==
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d119      	bne.n	800eb20 <read_restart_marker+0x50>
    TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
 800eaec:	6823      	ldr	r3, [r4, #0]
 800eaee:	2264      	movs	r2, #100	; 0x64
 800eaf0:	4620      	mov	r0, r4
 800eaf2:	e9c3 2105 	strd	r2, r1, [r3, #20]
 800eaf6:	685b      	ldr	r3, [r3, #4]
 800eaf8:	2103      	movs	r1, #3
 800eafa:	4798      	blx	r3
    cinfo->unread_marker = 0;
 800eafc:	2300      	movs	r3, #0
 800eafe:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800eb02:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
 800eb06:	2001      	movs	r0, #1
 800eb08:	6953      	ldr	r3, [r2, #20]
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	f003 0307 	and.w	r3, r3, #7
 800eb10:	6153      	str	r3, [r2, #20]
  return TRUE;
 800eb12:	e004      	b.n	800eb1e <read_restart_marker+0x4e>
    if (! next_marker(cinfo))
 800eb14:	f7ff f9c9 	bl	800deaa <next_marker>
 800eb18:	2800      	cmp	r0, #0
 800eb1a:	d1de      	bne.n	800eada <read_restart_marker+0xa>
      return FALSE;
 800eb1c:	2000      	movs	r0, #0
}
 800eb1e:	bd10      	pop	{r4, pc}
    if (! (*cinfo->src->resync_to_restart) (cinfo,
 800eb20:	69a3      	ldr	r3, [r4, #24]
 800eb22:	4620      	mov	r0, r4
 800eb24:	695b      	ldr	r3, [r3, #20]
 800eb26:	4798      	blx	r3
 800eb28:	2800      	cmp	r0, #0
 800eb2a:	d1ea      	bne.n	800eb02 <read_restart_marker+0x32>
 800eb2c:	e7f6      	b.n	800eb1c <read_restart_marker+0x4c>

0800eb2e <jpeg_resync_to_restart>:
{
 800eb2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb32:	460f      	mov	r7, r1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800eb34:	6803      	ldr	r3, [r0, #0]
  int marker = cinfo->unread_marker;
 800eb36:	f8d0 51b4 	ldr.w	r5, [r0, #436]	; 0x1b4
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800eb3a:	227c      	movs	r2, #124	; 0x7c
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800eb3c:	f107 0801 	add.w	r8, r7, #1
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800eb40:	61d9      	str	r1, [r3, #28]
 800eb42:	f04f 31ff 	mov.w	r1, #4294967295
{
 800eb46:	4606      	mov	r6, r0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800eb48:	f008 0807 	and.w	r8, r8, #7
 800eb4c:	f108 08d0 	add.w	r8, r8, #208	; 0xd0
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800eb50:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800eb54:	685b      	ldr	r3, [r3, #4]
 800eb56:	4798      	blx	r3
    if (marker < (int) M_SOF0)
 800eb58:	2dbf      	cmp	r5, #191	; 0xbf
 800eb5a:	dd2e      	ble.n	800ebba <jpeg_resync_to_restart+0x8c>
    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
 800eb5c:	f1a5 03d0 	sub.w	r3, r5, #208	; 0xd0
 800eb60:	2b07      	cmp	r3, #7
 800eb62:	d828      	bhi.n	800ebb6 <jpeg_resync_to_restart+0x88>
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800eb64:	4545      	cmp	r5, r8
 800eb66:	d026      	beq.n	800ebb6 <jpeg_resync_to_restart+0x88>
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
 800eb68:	1cbb      	adds	r3, r7, #2
 800eb6a:	f003 0307 	and.w	r3, r3, #7
 800eb6e:	33d0      	adds	r3, #208	; 0xd0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800eb70:	429d      	cmp	r5, r3
 800eb72:	d020      	beq.n	800ebb6 <jpeg_resync_to_restart+0x88>
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
 800eb74:	1e7b      	subs	r3, r7, #1
 800eb76:	f003 0307 	and.w	r3, r3, #7
 800eb7a:	33d0      	adds	r3, #208	; 0xd0
 800eb7c:	429d      	cmp	r5, r3
 800eb7e:	d01c      	beq.n	800ebba <jpeg_resync_to_restart+0x8c>
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
 800eb80:	1ebc      	subs	r4, r7, #2
 800eb82:	f004 0407 	and.w	r4, r4, #7
 800eb86:	34d0      	adds	r4, #208	; 0xd0
	action = 2;		/* a prior restart, so advance */
 800eb88:	42a5      	cmp	r5, r4
 800eb8a:	bf14      	ite	ne
 800eb8c:	2401      	movne	r4, #1
 800eb8e:	2402      	moveq	r4, #2
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
 800eb90:	6833      	ldr	r3, [r6, #0]
 800eb92:	2263      	movs	r2, #99	; 0x63
 800eb94:	2104      	movs	r1, #4
 800eb96:	4630      	mov	r0, r6
 800eb98:	61dc      	str	r4, [r3, #28]
 800eb9a:	e9c3 2505 	strd	r2, r5, [r3, #20]
 800eb9e:	685b      	ldr	r3, [r3, #4]
 800eba0:	4798      	blx	r3
    switch (action) {
 800eba2:	2c02      	cmp	r4, #2
 800eba4:	d00b      	beq.n	800ebbe <jpeg_resync_to_restart+0x90>
 800eba6:	2c03      	cmp	r4, #3
 800eba8:	d002      	beq.n	800ebb0 <jpeg_resync_to_restart+0x82>
      cinfo->unread_marker = 0;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	f8c6 31b4 	str.w	r3, [r6, #436]	; 0x1b4
    switch (action) {
 800ebb0:	2001      	movs	r0, #1
}
 800ebb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      action = 3;		/* valid non-restart marker */
 800ebb6:	2403      	movs	r4, #3
 800ebb8:	e7ea      	b.n	800eb90 <jpeg_resync_to_restart+0x62>
	action = 2;		/* a prior restart, so advance */
 800ebba:	2402      	movs	r4, #2
 800ebbc:	e7e8      	b.n	800eb90 <jpeg_resync_to_restart+0x62>
      if (! next_marker(cinfo))
 800ebbe:	4630      	mov	r0, r6
 800ebc0:	f7ff f973 	bl	800deaa <next_marker>
 800ebc4:	2800      	cmp	r0, #0
 800ebc6:	d0f4      	beq.n	800ebb2 <jpeg_resync_to_restart+0x84>
      marker = cinfo->unread_marker;
 800ebc8:	f8d6 51b4 	ldr.w	r5, [r6, #436]	; 0x1b4
      break;
 800ebcc:	e7c4      	b.n	800eb58 <jpeg_resync_to_restart+0x2a>
	...

0800ebd0 <jinit_marker_reader>:
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_marker_reader (j_decompress_ptr cinfo)
{
 800ebd0:	b538      	push	{r3, r4, r5, lr}
  my_marker_ptr marker;
  int i;

  /* Create subobject in permanent pool */
  marker = (my_marker_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800ebd2:	6843      	ldr	r3, [r0, #4]
 800ebd4:	22ac      	movs	r2, #172	; 0xac
 800ebd6:	2100      	movs	r1, #0
{
 800ebd8:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	4798      	blx	r3
				SIZEOF(my_marker_reader));
  cinfo->marker = (struct jpeg_marker_reader *) marker;
  /* Initialize public method pointers */
  marker->pub.reset_marker_reader = reset_marker_reader;
 800ebde:	4b0e      	ldr	r3, [pc, #56]	; (800ec18 <jinit_marker_reader+0x48>)
  cinfo->marker = (struct jpeg_marker_reader *) marker;
 800ebe0:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
  /* Initialize COM/APPn processing.
   * By default, we examine and then discard APP0 and APP14,
   * but simply discard COM and all other APPn.
   */
  marker->process_COM = skip_variable;
  marker->length_limit_COM = 0;
 800ebe4:	2200      	movs	r2, #0
  marker->pub.reset_marker_reader = reset_marker_reader;
 800ebe6:	6003      	str	r3, [r0, #0]
  marker->pub.read_markers = read_markers;
 800ebe8:	f100 0560 	add.w	r5, r0, #96	; 0x60
 800ebec:	4b0b      	ldr	r3, [pc, #44]	; (800ec1c <jinit_marker_reader+0x4c>)
  marker->process_COM = skip_variable;
 800ebee:	490c      	ldr	r1, [pc, #48]	; (800ec20 <jinit_marker_reader+0x50>)
  marker->pub.read_markers = read_markers;
 800ebf0:	6043      	str	r3, [r0, #4]
  marker->pub.read_restart_marker = read_restart_marker;
 800ebf2:	4b0c      	ldr	r3, [pc, #48]	; (800ec24 <jinit_marker_reader+0x54>)
  marker->process_COM = skip_variable;
 800ebf4:	61c1      	str	r1, [r0, #28]
  marker->pub.read_restart_marker = read_restart_marker;
 800ebf6:	6083      	str	r3, [r0, #8]
  marker->length_limit_COM = 0;
 800ebf8:	f100 0320 	add.w	r3, r0, #32
 800ebfc:	6602      	str	r2, [r0, #96]	; 0x60
  for (i = 0; i < 16; i++) {
    marker->process_APPn[i] = skip_variable;
 800ebfe:	f843 1b04 	str.w	r1, [r3], #4
  for (i = 0; i < 16; i++) {
 800ec02:	42ab      	cmp	r3, r5
    marker->length_limit_APPn[i] = 0;
 800ec04:	641a      	str	r2, [r3, #64]	; 0x40
  for (i = 0; i < 16; i++) {
 800ec06:	d1fa      	bne.n	800ebfe <jinit_marker_reader+0x2e>
  }
  marker->process_APPn[0] = get_interesting_appn;
 800ec08:	4b07      	ldr	r3, [pc, #28]	; (800ec28 <jinit_marker_reader+0x58>)
 800ec0a:	6203      	str	r3, [r0, #32]
  marker->process_APPn[14] = get_interesting_appn;
 800ec0c:	6583      	str	r3, [r0, #88]	; 0x58
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
 800ec0e:	4620      	mov	r0, r4
}
 800ec10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  reset_marker_reader(cinfo);
 800ec14:	f7ff b98f 	b.w	800df36 <reset_marker_reader>
 800ec18:	0800df37 	.word	0x0800df37
 800ec1c:	0800e169 	.word	0x0800e169
 800ec20:	0800de35 	.word	0x0800de35
 800ec24:	0800ead1 	.word	0x0800ead1
 800ec28:	0800e9fb 	.word	0x0800e9fb

0800ec2c <prepare_for_output_pass>:
 * (In the latter case, jdapistd.c will crank the pass to completion.)
 */

METHODDEF(void)
prepare_for_output_pass (j_decompress_ptr cinfo)
{
 800ec2c:	b538      	push	{r3, r4, r5, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800ec2e:	f8d0 51b8 	ldr.w	r5, [r0, #440]	; 0x1b8
{
 800ec32:	4604      	mov	r4, r0

  if (master->pub.is_dummy_pass) {
 800ec34:	68ab      	ldr	r3, [r5, #8]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d02a      	beq.n	800ec90 <prepare_for_output_pass+0x64>
#ifdef QUANT_2PASS_SUPPORTED
    /* Final pass of 2-pass quantization */
    master->pub.is_dummy_pass = FALSE;
 800ec3a:	2100      	movs	r1, #0
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800ec3c:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
    master->pub.is_dummy_pass = FALSE;
 800ec40:	60a9      	str	r1, [r5, #8]
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	4798      	blx	r3
    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
 800ec46:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800ec4a:	2102      	movs	r1, #2
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	4798      	blx	r3
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
 800ec52:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800ec56:	2102      	movs	r1, #2
 800ec58:	681b      	ldr	r3, [r3, #0]
      (*cinfo->upsample->start_pass) (cinfo);
      if (cinfo->quantize_colors)
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
      (*cinfo->post->start_pass) (cinfo,
	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800ec5a:	4620      	mov	r0, r4
 800ec5c:	4798      	blx	r3
    }
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
 800ec5e:	68a2      	ldr	r2, [r4, #8]
 800ec60:	b1aa      	cbz	r2, 800ec8e <prepare_for_output_pass+0x62>
    cinfo->progress->completed_passes = master->pass_number;
    cinfo->progress->total_passes = master->pass_number +
				    (master->pub.is_dummy_pass ? 2 : 1);
 800ec62:	68a9      	ldr	r1, [r5, #8]
    cinfo->progress->completed_passes = master->pass_number;
 800ec64:	68eb      	ldr	r3, [r5, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800ec66:	2900      	cmp	r1, #0
    cinfo->progress->completed_passes = master->pass_number;
 800ec68:	60d3      	str	r3, [r2, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800ec6a:	bf14      	ite	ne
 800ec6c:	2102      	movne	r1, #2
 800ec6e:	2101      	moveq	r1, #1
    cinfo->progress->total_passes = master->pass_number +
 800ec70:	440b      	add	r3, r1
    /* In buffered-image mode, we assume one more output pass if EOI not
     * yet reached, but no more passes if EOI has been reached.
     */
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800ec72:	6c21      	ldr	r1, [r4, #64]	; 0x40
    cinfo->progress->total_passes = master->pass_number +
 800ec74:	6113      	str	r3, [r2, #16]
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800ec76:	b151      	cbz	r1, 800ec8e <prepare_for_output_pass+0x62>
 800ec78:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
 800ec7c:	6949      	ldr	r1, [r1, #20]
 800ec7e:	b931      	cbnz	r1, 800ec8e <prepare_for_output_pass+0x62>
      cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
 800ec80:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800ec82:	2900      	cmp	r1, #0
 800ec84:	bf14      	ite	ne
 800ec86:	2102      	movne	r1, #2
 800ec88:	2101      	moveq	r1, #1
 800ec8a:	440b      	add	r3, r1
 800ec8c:	6113      	str	r3, [r2, #16]
    }
  }
}
 800ec8e:	bd38      	pop	{r3, r4, r5, pc}
    if (cinfo->quantize_colors && cinfo->colormap == NULL) {
 800ec90:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800ec92:	b16b      	cbz	r3, 800ecb0 <prepare_for_output_pass+0x84>
 800ec94:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800ec98:	b953      	cbnz	r3, 800ecb0 <prepare_for_output_pass+0x84>
      if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
 800ec9a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d037      	beq.n	800ed10 <prepare_for_output_pass+0xe4>
 800eca0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d034      	beq.n	800ed10 <prepare_for_output_pass+0xe4>
	cinfo->cquantize = master->quantizer_2pass;
 800eca6:	69ab      	ldr	r3, [r5, #24]
 800eca8:	f8c0 31e0 	str.w	r3, [r0, #480]	; 0x1e0
	master->pub.is_dummy_pass = TRUE;
 800ecac:	2301      	movs	r3, #1
 800ecae:	60ab      	str	r3, [r5, #8]
    (*cinfo->idct->start_pass) (cinfo);
 800ecb0:	f8d4 31d4 	ldr.w	r3, [r4, #468]	; 0x1d4
 800ecb4:	4620      	mov	r0, r4
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	4798      	blx	r3
    (*cinfo->coef->start_output_pass) (cinfo);
 800ecba:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	689b      	ldr	r3, [r3, #8]
 800ecc2:	4798      	blx	r3
    if (! cinfo->raw_data_out) {
 800ecc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d1c9      	bne.n	800ec5e <prepare_for_output_pass+0x32>
      if (! master->using_merged_upsample)
 800ecca:	692b      	ldr	r3, [r5, #16]
 800eccc:	b923      	cbnz	r3, 800ecd8 <prepare_for_output_pass+0xac>
	(*cinfo->cconvert->start_pass) (cinfo);
 800ecce:	f8d4 31dc 	ldr.w	r3, [r4, #476]	; 0x1dc
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	4798      	blx	r3
      (*cinfo->upsample->start_pass) (cinfo);
 800ecd8:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 800ecdc:	4620      	mov	r0, r4
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	4798      	blx	r3
      if (cinfo->quantize_colors)
 800ece2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ece4:	b12b      	cbz	r3, 800ecf2 <prepare_for_output_pass+0xc6>
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
 800ece6:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800ecea:	4620      	mov	r0, r4
 800ecec:	68a9      	ldr	r1, [r5, #8]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4798      	blx	r3
      (*cinfo->post->start_pass) (cinfo,
 800ecf2:	68aa      	ldr	r2, [r5, #8]
 800ecf4:	4620      	mov	r0, r4
 800ecf6:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800ecfa:	2a00      	cmp	r2, #0
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	bf14      	ite	ne
 800ed00:	2103      	movne	r1, #3
 800ed02:	2100      	moveq	r1, #0
 800ed04:	4798      	blx	r3
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800ed06:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800ed0a:	2100      	movs	r1, #0
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	e7a4      	b.n	800ec5a <prepare_for_output_pass+0x2e>
      } else if (cinfo->enable_1pass_quant) {
 800ed10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed12:	b11b      	cbz	r3, 800ed1c <prepare_for_output_pass+0xf0>
	cinfo->cquantize = master->quantizer_1pass;
 800ed14:	696b      	ldr	r3, [r5, #20]
 800ed16:	f8c4 31e0 	str.w	r3, [r4, #480]	; 0x1e0
 800ed1a:	e7c9      	b.n	800ecb0 <prepare_for_output_pass+0x84>
	ERREXIT(cinfo, JERR_MODE_CHANGE);
 800ed1c:	6823      	ldr	r3, [r4, #0]
 800ed1e:	222f      	movs	r2, #47	; 0x2f
 800ed20:	4620      	mov	r0, r4
 800ed22:	615a      	str	r2, [r3, #20]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	4798      	blx	r3
 800ed28:	e7c2      	b.n	800ecb0 <prepare_for_output_pass+0x84>

0800ed2a <finish_output_pass>:
METHODDEF(void)
finish_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  if (cinfo->quantize_colors)
 800ed2a:	6d42      	ldr	r2, [r0, #84]	; 0x54
{
 800ed2c:	b510      	push	{r4, lr}
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800ed2e:	f8d0 41b8 	ldr.w	r4, [r0, #440]	; 0x1b8
  if (cinfo->quantize_colors)
 800ed32:	b11a      	cbz	r2, 800ed3c <finish_output_pass+0x12>
    (*cinfo->cquantize->finish_pass) (cinfo);
 800ed34:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 800ed38:	689b      	ldr	r3, [r3, #8]
 800ed3a:	4798      	blx	r3
  master->pass_number++;
 800ed3c:	68e3      	ldr	r3, [r4, #12]
 800ed3e:	3301      	adds	r3, #1
 800ed40:	60e3      	str	r3, [r4, #12]
}
 800ed42:	bd10      	pop	{r4, pc}

0800ed44 <use_merged_upsample>:
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800ed44:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
 800ed46:	b510      	push	{r4, lr}
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d143      	bne.n	800edd4 <use_merged_upsample+0x90>
 800ed4c:	f8d0 2130 	ldr.w	r2, [r0, #304]	; 0x130
 800ed50:	2a00      	cmp	r2, #0
 800ed52:	d141      	bne.n	800edd8 <use_merged_upsample+0x94>
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
 800ed54:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800ed58:	2b03      	cmp	r3, #3
 800ed5a:	d139      	bne.n	800edd0 <use_merged_upsample+0x8c>
 800ed5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ed5e:	2b03      	cmp	r3, #3
 800ed60:	d136      	bne.n	800edd0 <use_merged_upsample+0x8c>
 800ed62:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800ed66:	2b02      	cmp	r3, #2
 800ed68:	d132      	bne.n	800edd0 <use_merged_upsample+0x8c>
      cinfo->out_color_space != JCS_RGB ||
 800ed6a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800ed6c:	2b03      	cmp	r3, #3
 800ed6e:	d12f      	bne.n	800edd0 <use_merged_upsample+0x8c>
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
 800ed70:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800ed74:	6899      	ldr	r1, [r3, #8]
 800ed76:	2902      	cmp	r1, #2
 800ed78:	d12a      	bne.n	800edd0 <use_merged_upsample+0x8c>
 800ed7a:	6e19      	ldr	r1, [r3, #96]	; 0x60
 800ed7c:	2901      	cmp	r1, #1
 800ed7e:	d127      	bne.n	800edd0 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].h_samp_factor != 1 ||
 800ed80:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800ed84:	2901      	cmp	r1, #1
 800ed86:	d123      	bne.n	800edd0 <use_merged_upsample+0x8c>
      cinfo->comp_info[2].h_samp_factor != 1 ||
 800ed88:	68d9      	ldr	r1, [r3, #12]
 800ed8a:	2902      	cmp	r1, #2
 800ed8c:	dc20      	bgt.n	800edd0 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].v_samp_factor >  2 ||
 800ed8e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800ed90:	2901      	cmp	r1, #1
 800ed92:	d11d      	bne.n	800edd0 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].v_samp_factor != 1 ||
 800ed94:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800ed98:	2901      	cmp	r1, #1
 800ed9a:	d119      	bne.n	800edd0 <use_merged_upsample+0x8c>
  if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800ed9c:	f8d0 4140 	ldr.w	r4, [r0, #320]	; 0x140
 800eda0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800eda2:	42a1      	cmp	r1, r4
 800eda4:	d114      	bne.n	800edd0 <use_merged_upsample+0x8c>
 800eda6:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800eda8:	42a1      	cmp	r1, r4
 800edaa:	d111      	bne.n	800edd0 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800edac:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
 800edb0:	42a1      	cmp	r1, r4
 800edb2:	d10d      	bne.n	800edd0 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800edb4:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
      cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800edb8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800edba:	4281      	cmp	r1, r0
 800edbc:	d108      	bne.n	800edd0 <use_merged_upsample+0x8c>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800edbe:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800edc2:	4281      	cmp	r1, r0
 800edc4:	d104      	bne.n	800edd0 <use_merged_upsample+0x8c>
      cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800edc6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800edca:	1a53      	subs	r3, r2, r1
 800edcc:	425a      	negs	r2, r3
 800edce:	415a      	adcs	r2, r3
}
 800edd0:	4610      	mov	r0, r2
 800edd2:	bd10      	pop	{r4, pc}
    return FALSE;
 800edd4:	2200      	movs	r2, #0
 800edd6:	e7fb      	b.n	800edd0 <use_merged_upsample+0x8c>
 800edd8:	461a      	mov	r2, r3
 800edda:	e7f9      	b.n	800edd0 <use_merged_upsample+0x8c>

0800eddc <jpeg_calc_output_dimensions>:
  if (cinfo->global_state != DSTATE_READY)
 800eddc:	6942      	ldr	r2, [r0, #20]
 800edde:	2aca      	cmp	r2, #202	; 0xca
{
 800ede0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ede4:	4604      	mov	r4, r0
  if (cinfo->global_state != DSTATE_READY)
 800ede6:	d005      	beq.n	800edf4 <jpeg_calc_output_dimensions+0x18>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800ede8:	6803      	ldr	r3, [r0, #0]
 800edea:	2115      	movs	r1, #21
 800edec:	e9c3 1205 	strd	r1, r2, [r3, #20]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	4798      	blx	r3
  jpeg_core_output_dimensions(cinfo);
 800edf4:	4620      	mov	r0, r4
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800edf6:	2600      	movs	r6, #0
  jpeg_core_output_dimensions(cinfo);
 800edf8:	f7fe fb06 	bl	800d408 <jpeg_core_output_dimensions>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800edfc:	f8d4 50d8 	ldr.w	r5, [r4, #216]	; 0xd8
 800ee00:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 800ee04:	462b      	mov	r3, r5
 800ee06:	45b4      	cmp	ip, r6
 800ee08:	dd6b      	ble.n	800eee2 <jpeg_calc_output_dimensions+0x106>
 800ee0a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    int ssize = 1;
 800ee0c:	2101      	movs	r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800ee0e:	f8d4 8140 	ldr.w	r8, [r4, #320]	; 0x140
 800ee12:	2a00      	cmp	r2, #0
 800ee14:	bf14      	ite	ne
 800ee16:	2708      	movne	r7, #8
 800ee18:	2704      	moveq	r7, #4
 800ee1a:	e00a      	b.n	800ee32 <jpeg_calc_output_dimensions+0x56>
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
 800ee1c:	689a      	ldr	r2, [r3, #8]
 800ee1e:	f8d4 9138 	ldr.w	r9, [r4, #312]	; 0x138
 800ee22:	434a      	muls	r2, r1
 800ee24:	0052      	lsls	r2, r2, #1
 800ee26:	fb99 fef2 	sdiv	lr, r9, r2
 800ee2a:	fb02 921e 	mls	r2, r2, lr, r9
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800ee2e:	b922      	cbnz	r2, 800ee3a <jpeg_calc_output_dimensions+0x5e>
      ssize = ssize * 2;
 800ee30:	0049      	lsls	r1, r1, #1
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800ee32:	fb01 f008 	mul.w	r0, r1, r8
 800ee36:	42b8      	cmp	r0, r7
 800ee38:	ddf0      	ble.n	800ee1c <jpeg_calc_output_dimensions+0x40>
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
 800ee3a:	6258      	str	r0, [r3, #36]	; 0x24
    ssize = 1;
 800ee3c:	f04f 0e01 	mov.w	lr, #1
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 800ee40:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144
 800ee44:	fb0e f108 	mul.w	r1, lr, r8
 800ee48:	42b9      	cmp	r1, r7
 800ee4a:	dd0b      	ble.n	800ee64 <jpeg_calc_output_dimensions+0x88>
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800ee4c:	ebb0 0f41 	cmp.w	r0, r1, lsl #1
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
 800ee50:	6299      	str	r1, [r3, #40]	; 0x28
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800ee52:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800ee56:	dc14      	bgt.n	800ee82 <jpeg_calc_output_dimensions+0xa6>
    else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
 800ee58:	0042      	lsls	r2, r0, #1
 800ee5a:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
	compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
 800ee5e:	bfc8      	it	gt
 800ee60:	629a      	strgt	r2, [r3, #40]	; 0x28
 800ee62:	e00f      	b.n	800ee84 <jpeg_calc_output_dimensions+0xa8>
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
 800ee64:	68da      	ldr	r2, [r3, #12]
 800ee66:	f8d4 a13c 	ldr.w	sl, [r4, #316]	; 0x13c
 800ee6a:	fb02 f20e 	mul.w	r2, r2, lr
 800ee6e:	0052      	lsls	r2, r2, #1
 800ee70:	fb9a f9f2 	sdiv	r9, sl, r2
 800ee74:	fb02 a219 	mls	r2, r2, r9, sl
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800ee78:	2a00      	cmp	r2, #0
 800ee7a:	d1e7      	bne.n	800ee4c <jpeg_calc_output_dimensions+0x70>
      ssize = ssize * 2;
 800ee7c:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800ee80:	e7e0      	b.n	800ee44 <jpeg_calc_output_dimensions+0x68>
	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 800ee82:	625a      	str	r2, [r3, #36]	; 0x24
       ci++, compptr++) {
 800ee84:	3601      	adds	r6, #1
 800ee86:	3358      	adds	r3, #88	; 0x58
 800ee88:	e7bd      	b.n	800ee06 <jpeg_calc_output_dimensions+0x2a>
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800ee8a:	68ab      	ldr	r3, [r5, #8]
       ci++, compptr++) {
 800ee8c:	3601      	adds	r6, #1
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800ee8e:	6a68      	ldr	r0, [r5, #36]	; 0x24
       ci++, compptr++) {
 800ee90:	3558      	adds	r5, #88	; 0x58
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800ee92:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 800ee96:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800ee9a:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_width *
 800ee9c:	69e3      	ldr	r3, [r4, #28]
 800ee9e:	4351      	muls	r1, r2
 800eea0:	4358      	muls	r0, r3
 800eea2:	f007 febb 	bl	8016c1c <jdiv_round_up>
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800eea6:	f855 3c4c 	ldr.w	r3, [r5, #-76]
    compptr->downsampled_width = (JDIMENSION)
 800eeaa:	f845 0c2c 	str.w	r0, [r5, #-44]
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800eeae:	f855 0c30 	ldr.w	r0, [r5, #-48]
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800eeb2:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
 800eeb6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800eeba:	4358      	muls	r0, r3
      jdiv_round_up((long) cinfo->image_height *
 800eebc:	6a23      	ldr	r3, [r4, #32]
 800eebe:	4351      	muls	r1, r2
 800eec0:	4358      	muls	r0, r3
 800eec2:	f007 feab 	bl	8016c1c <jdiv_round_up>
    compptr->downsampled_height = (JDIMENSION)
 800eec6:	f845 0c28 	str.w	r0, [r5, #-40]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800eeca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800eecc:	42b2      	cmp	r2, r6
 800eece:	dcdc      	bgt.n	800ee8a <jpeg_calc_output_dimensions+0xae>
  switch (cinfo->out_color_space) {
 800eed0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800eed4:	2b03      	cmp	r3, #3
 800eed6:	d806      	bhi.n	800eee6 <jpeg_calc_output_dimensions+0x10a>
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d809      	bhi.n	800eef0 <jpeg_calc_output_dimensions+0x114>
 800eedc:	d009      	beq.n	800eef2 <jpeg_calc_output_dimensions+0x116>
    cinfo->out_color_components = cinfo->num_components;
 800eede:	67a2      	str	r2, [r4, #120]	; 0x78
    break;
 800eee0:	e008      	b.n	800eef4 <jpeg_calc_output_dimensions+0x118>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800eee2:	2600      	movs	r6, #0
 800eee4:	e7f1      	b.n	800eeca <jpeg_calc_output_dimensions+0xee>
  switch (cinfo->out_color_space) {
 800eee6:	3b04      	subs	r3, #4
 800eee8:	2b01      	cmp	r3, #1
 800eeea:	d8f8      	bhi.n	800eede <jpeg_calc_output_dimensions+0x102>
    cinfo->out_color_components = 4;
 800eeec:	2304      	movs	r3, #4
 800eeee:	e000      	b.n	800eef2 <jpeg_calc_output_dimensions+0x116>
    cinfo->out_color_components = RGB_PIXELSIZE;
 800eef0:	2303      	movs	r3, #3
    cinfo->out_color_components = 4;
 800eef2:	67a3      	str	r3, [r4, #120]	; 0x78
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800eef4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800eef6:	b95b      	cbnz	r3, 800ef10 <jpeg_calc_output_dimensions+0x134>
 800eef8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  if (use_merged_upsample(cinfo))
 800eefa:	4620      	mov	r0, r4
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800eefc:	67e3      	str	r3, [r4, #124]	; 0x7c
  if (use_merged_upsample(cinfo))
 800eefe:	f7ff ff21 	bl	800ed44 <use_merged_upsample>
 800ef02:	b138      	cbz	r0, 800ef14 <jpeg_calc_output_dimensions+0x138>
    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
 800ef04:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800ef08:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 800ef0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800ef10:	2301      	movs	r3, #1
 800ef12:	e7f2      	b.n	800eefa <jpeg_calc_output_dimensions+0x11e>
    cinfo->rec_outbuf_height = 1;
 800ef14:	2301      	movs	r3, #1
 800ef16:	e7f7      	b.n	800ef08 <jpeg_calc_output_dimensions+0x12c>

0800ef18 <jinit_master_decompress>:
 * This is performed at the start of jpeg_start_decompress.
 */

GLOBAL(void)
jinit_master_decompress (j_decompress_ptr cinfo)
{
 800ef18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ef1a:	6843      	ldr	r3, [r0, #4]
 800ef1c:	221c      	movs	r2, #28
 800ef1e:	2101      	movs	r1, #1
{
 800ef20:	4604      	mov	r4, r0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ef22:	681b      	ldr	r3, [r3, #0]
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
  master->pub.finish_output_pass = finish_output_pass;

  master->pub.is_dummy_pass = FALSE;
 800ef24:	2700      	movs	r7, #0
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ef26:	4798      	blx	r3
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800ef28:	4b6e      	ldr	r3, [pc, #440]	; (800f0e4 <jinit_master_decompress+0x1cc>)
  cinfo->master = (struct jpeg_decomp_master *) master;
 800ef2a:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ef2e:	4605      	mov	r5, r0
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800ef30:	6003      	str	r3, [r0, #0]
  master->pub.finish_output_pass = finish_output_pass;
 800ef32:	4b6d      	ldr	r3, [pc, #436]	; (800f0e8 <jinit_master_decompress+0x1d0>)
  master->pub.is_dummy_pass = FALSE;
 800ef34:	6087      	str	r7, [r0, #8]
  master->pub.finish_output_pass = finish_output_pass;
 800ef36:	6043      	str	r3, [r0, #4]
  jpeg_calc_output_dimensions(cinfo);
 800ef38:	4620      	mov	r0, r4
 800ef3a:	f7ff ff4f 	bl	800eddc <jpeg_calc_output_dimensions>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ef3e:	6863      	ldr	r3, [r4, #4]
 800ef40:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800ef44:	2101      	movs	r1, #1
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	4620      	mov	r0, r4
 800ef4a:	4798      	blx	r3
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
 800ef4c:	f500 7380 	add.w	r3, r0, #256	; 0x100
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ef50:	4606      	mov	r6, r0
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800ef52:	4639      	mov	r1, r7
  cinfo->sample_range_limit = table;
 800ef54:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800ef58:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ef5c:	f01b f808 	bl	8029f70 <memset>
  for (i = 0; i <= MAXJSAMPLE; i++)
 800ef60:	f106 03ff 	add.w	r3, r6, #255	; 0xff
 800ef64:	4639      	mov	r1, r7
    table[i] = (JSAMPLE) i;
 800ef66:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (i = 0; i <= MAXJSAMPLE; i++)
 800ef6a:	3101      	adds	r1, #1
 800ef6c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800ef70:	d1f9      	bne.n	800ef66 <jinit_master_decompress+0x4e>
  for (i = CENTERJSAMPLE; i < 2*(MAXJSAMPLE+1); i++)
 800ef72:	f206 13ff 	addw	r3, r6, #511	; 0x1ff
 800ef76:	f206 327f 	addw	r2, r6, #895	; 0x37f
    table[i] = MAXJSAMPLE;
 800ef7a:	21ff      	movs	r1, #255	; 0xff
 800ef7c:	f803 1f01 	strb.w	r1, [r3, #1]!
  for (i = CENTERJSAMPLE; i < 2*(MAXJSAMPLE+1); i++)
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d1fb      	bne.n	800ef7c <jinit_master_decompress+0x64>
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
 800ef84:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800ef88:	2100      	movs	r1, #0
 800ef8a:	f506 7060 	add.w	r0, r6, #896	; 0x380
 800ef8e:	f01a ffef 	bl	8029f70 <memset>
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
 800ef92:	f506 60a0 	add.w	r0, r6, #1280	; 0x500
  master->pass_number = 0;
 800ef96:	2600      	movs	r6, #0
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
 800ef98:	2280      	movs	r2, #128	; 0x80
 800ef9a:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
 800ef9e:	f01a ffd9 	bl	8029f54 <memcpy>
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800efa2:	4620      	mov	r0, r4
  master->pass_number = 0;
 800efa4:	60ee      	str	r6, [r5, #12]
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800efa6:	f7ff fecd 	bl	800ed44 <use_merged_upsample>
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800efaa:	6d63      	ldr	r3, [r4, #84]	; 0x54
  master->quantizer_2pass = NULL;
 800efac:	61ae      	str	r6, [r5, #24]
  master->quantizer_1pass = NULL;
 800efae:	e9c5 0604 	strd	r0, r6, [r5, #16]
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800efb2:	b1b3      	cbz	r3, 800efe2 <jinit_master_decompress+0xca>
 800efb4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800efb6:	b1a2      	cbz	r2, 800efe2 <jinit_master_decompress+0xca>
    if (cinfo->raw_data_out)
 800efb8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d166      	bne.n	800f08c <jinit_master_decompress+0x174>
    if (cinfo->out_color_components != 3) {
 800efbe:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800efc0:	2b03      	cmp	r3, #3
 800efc2:	f04f 0301 	mov.w	r3, #1
 800efc6:	d068      	beq.n	800f09a <jinit_master_decompress+0x182>
      cinfo->enable_1pass_quant = TRUE;
 800efc8:	6663      	str	r3, [r4, #100]	; 0x64
      cinfo->enable_external_quant = FALSE;
 800efca:	2300      	movs	r3, #0
      cinfo->enable_2pass_quant = FALSE;
 800efcc:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
      cinfo->colormap = NULL;
 800efd0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      jinit_1pass_quantizer(cinfo);
 800efd4:	4620      	mov	r0, r4
 800efd6:	f006 ff2d 	bl	8015e34 <jinit_1pass_quantizer>
      master->quantizer_1pass = cinfo->cquantize;
 800efda:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800efde:	616b      	str	r3, [r5, #20]
 800efe0:	e062      	b.n	800f0a8 <jinit_master_decompress+0x190>
    cinfo->enable_external_quant = FALSE;
 800efe2:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
    cinfo->enable_2pass_quant = FALSE;
 800efe6:	66e6      	str	r6, [r4, #108]	; 0x6c
  if (cinfo->quantize_colors) {
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d1e5      	bne.n	800efb8 <jinit_master_decompress+0xa0>
  if (! cinfo->raw_data_out) {
 800efec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800efee:	b94b      	cbnz	r3, 800f004 <jinit_master_decompress+0xec>
    if (master->using_merged_upsample) {
 800eff0:	692b      	ldr	r3, [r5, #16]
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800eff2:	4620      	mov	r0, r4
    if (master->using_merged_upsample) {
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d069      	beq.n	800f0cc <jinit_master_decompress+0x1b4>
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800eff8:	f000 fa1c 	bl	800f434 <jinit_merged_upsampler>
    jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
 800effc:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800effe:	4620      	mov	r0, r4
 800f000:	f000 fb98 	bl	800f734 <jinit_d_post_controller>
  jinit_inverse_dct(cinfo);
 800f004:	4620      	mov	r0, r4
 800f006:	f7fc fdad 	bl	800bb64 <jinit_inverse_dct>
  if (cinfo->arith_code)
 800f00a:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    jinit_arith_decoder(cinfo);
 800f00e:	4620      	mov	r0, r4
  if (cinfo->arith_code)
 800f010:	2b00      	cmp	r3, #0
 800f012:	d061      	beq.n	800f0d8 <jinit_master_decompress+0x1c0>
    jinit_arith_decoder(cinfo);
 800f014:	f7fb fc06 	bl	800a824 <jinit_arith_decoder>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800f018:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800f01c:	691b      	ldr	r3, [r3, #16]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d15d      	bne.n	800f0de <jinit_master_decompress+0x1c6>
 800f022:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f024:	3900      	subs	r1, #0
 800f026:	bf18      	it	ne
 800f028:	2101      	movne	r1, #1
  jinit_d_coef_controller(cinfo, use_c_buffer);
 800f02a:	4620      	mov	r0, r4
 800f02c:	f7fc f8fc 	bl	800b228 <jinit_d_coef_controller>
  if (! cinfo->raw_data_out)
 800f030:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f032:	b911      	cbnz	r1, 800f03a <jinit_master_decompress+0x122>
    jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
 800f034:	4620      	mov	r0, r4
 800f036:	f7fe fcaf 	bl	800d998 <jinit_d_main_controller>
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 800f03a:	6863      	ldr	r3, [r4, #4]
 800f03c:	4620      	mov	r0, r4
 800f03e:	699b      	ldr	r3, [r3, #24]
 800f040:	4798      	blx	r3
  (*cinfo->inputctl->start_input_pass) (cinfo);
 800f042:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
 800f046:	4620      	mov	r0, r4
 800f048:	689b      	ldr	r3, [r3, #8]
 800f04a:	4798      	blx	r3
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800f04c:	68a2      	ldr	r2, [r4, #8]
 800f04e:	b1e2      	cbz	r2, 800f08a <jinit_master_decompress+0x172>
 800f050:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f052:	b9d3      	cbnz	r3, 800f08a <jinit_master_decompress+0x172>
      cinfo->inputctl->has_multiple_scans) {
 800f054:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800f058:	691b      	ldr	r3, [r3, #16]
 800f05a:	b1b3      	cbz	r3, 800f08a <jinit_master_decompress+0x172>
    if (cinfo->progressive_mode) {
 800f05c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 800f060:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f062:	b111      	cbz	r1, 800f06a <jinit_master_decompress+0x152>
      nscans = 2 + 3 * cinfo->num_components;
 800f064:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f068:	3302      	adds	r3, #2
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800f06a:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
    cinfo->progress->pass_counter = 0L;
 800f06e:	2100      	movs	r1, #0
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800f070:	4343      	muls	r3, r0
    cinfo->progress->pass_counter = 0L;
 800f072:	6051      	str	r1, [r2, #4]
    cinfo->progress->completed_passes = 0;
 800f074:	e9c2 3102 	strd	r3, r1, [r2, #8]
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 800f078:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f07a:	428b      	cmp	r3, r1
 800f07c:	bf14      	ite	ne
 800f07e:	2303      	movne	r3, #3
 800f080:	2302      	moveq	r3, #2
 800f082:	6113      	str	r3, [r2, #16]
    master->pass_number++;
 800f084:	68eb      	ldr	r3, [r5, #12]
 800f086:	3301      	adds	r3, #1
 800f088:	60eb      	str	r3, [r5, #12]

  master_selection(cinfo);
}
 800f08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ERREXIT(cinfo, JERR_NOTIMPL);
 800f08c:	6823      	ldr	r3, [r4, #0]
 800f08e:	2230      	movs	r2, #48	; 0x30
 800f090:	4620      	mov	r0, r4
 800f092:	615a      	str	r2, [r3, #20]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	4798      	blx	r3
 800f098:	e791      	b.n	800efbe <jinit_master_decompress+0xa6>
    } else if (cinfo->colormap != NULL) {
 800f09a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800f09e:	b17a      	cbz	r2, 800f0c0 <jinit_master_decompress+0x1a8>
      cinfo->enable_external_quant = TRUE;
 800f0a0:	66a3      	str	r3, [r4, #104]	; 0x68
    if (cinfo->enable_1pass_quant) {
 800f0a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d195      	bne.n	800efd4 <jinit_master_decompress+0xbc>
    if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
 800f0a8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f0aa:	b913      	cbnz	r3, 800f0b2 <jinit_master_decompress+0x19a>
 800f0ac:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d09c      	beq.n	800efec <jinit_master_decompress+0xd4>
      jinit_2pass_quantizer(cinfo);
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	f007 fd46 	bl	8016b44 <jinit_2pass_quantizer>
      master->quantizer_2pass = cinfo->cquantize;
 800f0b8:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800f0bc:	61ab      	str	r3, [r5, #24]
 800f0be:	e795      	b.n	800efec <jinit_master_decompress+0xd4>
    } else if (cinfo->two_pass_quantize) {
 800f0c0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800f0c2:	b10a      	cbz	r2, 800f0c8 <jinit_master_decompress+0x1b0>
      cinfo->enable_2pass_quant = TRUE;
 800f0c4:	66e3      	str	r3, [r4, #108]	; 0x6c
 800f0c6:	e7ec      	b.n	800f0a2 <jinit_master_decompress+0x18a>
      cinfo->enable_1pass_quant = TRUE;
 800f0c8:	6663      	str	r3, [r4, #100]	; 0x64
 800f0ca:	e783      	b.n	800efd4 <jinit_master_decompress+0xbc>
      jinit_color_deconverter(cinfo);
 800f0cc:	f7fc fad2 	bl	800b674 <jinit_color_deconverter>
      jinit_upsampler(cinfo);
 800f0d0:	4620      	mov	r0, r4
 800f0d2:	f000 fc51 	bl	800f978 <jinit_upsampler>
 800f0d6:	e791      	b.n	800effc <jinit_master_decompress+0xe4>
    jinit_huff_decoder(cinfo);
 800f0d8:	f7fd fedc 	bl	800ce94 <jinit_huff_decoder>
 800f0dc:	e79c      	b.n	800f018 <jinit_master_decompress+0x100>
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800f0de:	2101      	movs	r1, #1
 800f0e0:	e7a3      	b.n	800f02a <jinit_master_decompress+0x112>
 800f0e2:	bf00      	nop
 800f0e4:	0800ec2d 	.word	0x0800ec2d
 800f0e8:	0800ed2b 	.word	0x0800ed2b

0800f0ec <start_pass_merged_upsample>:
 */

METHODDEF(void)
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f0ec:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800f0f4:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800f0f6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800f0f8:	4770      	bx	lr

0800f0fa <merged_1v_upsample>:
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
 800f0fa:	b570      	push	{r4, r5, r6, lr}
 800f0fc:	9d05      	ldr	r5, [sp, #20]
 800f0fe:	4614      	mov	r4, r2
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800f100:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
			 output_buf + *out_row_ctr);
 800f104:	682a      	ldr	r2, [r5, #0]
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800f106:	68de      	ldr	r6, [r3, #12]
 800f108:	9b04      	ldr	r3, [sp, #16]
 800f10a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f10e:	6822      	ldr	r2, [r4, #0]
 800f110:	47b0      	blx	r6
  /* Adjust counts */
  (*out_row_ctr)++;
 800f112:	682b      	ldr	r3, [r5, #0]
 800f114:	3301      	adds	r3, #1
 800f116:	602b      	str	r3, [r5, #0]
  (*in_row_group_ctr)++;
 800f118:	6823      	ldr	r3, [r4, #0]
 800f11a:	3301      	adds	r3, #1
 800f11c:	6023      	str	r3, [r4, #0]
}
 800f11e:	bd70      	pop	{r4, r5, r6, pc}

0800f120 <h2v1_merged_upsample>:

METHODDEF(void)
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800f120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f124:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800f128:	b087      	sub	sp, #28
  SHIFT_TEMPS

  inptr0 = input_buf[0][in_row_group_ctr];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr = output_buf[0];
 800f12a:	f8d3 c000 	ldr.w	ip, [r3]
  int * Crrtab = upsample->Cr_r_tab;
 800f12e:	692e      	ldr	r6, [r5, #16]
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800f130:	f8d5 801c 	ldr.w	r8, [r5, #28]
 800f134:	4663      	mov	r3, ip
  int * Crrtab = upsample->Cr_r_tab;
 800f136:	9600      	str	r6, [sp, #0]
  int * Cbbtab = upsample->Cb_b_tab;
 800f138:	696e      	ldr	r6, [r5, #20]
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800f13a:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Cbbtab = upsample->Cb_b_tab;
 800f13e:	9601      	str	r6, [sp, #4]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800f140:	69ae      	ldr	r6, [r5, #24]
  inptr0 = input_buf[0][in_row_group_ctr];
 800f142:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800f144:	9602      	str	r6, [sp, #8]
  inptr0 = input_buf[0][in_row_group_ctr];
 800f146:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 800f14a:	9503      	str	r5, [sp, #12]
  inptr1 = input_buf[1][in_row_group_ctr];
 800f14c:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f14e:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800f150:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f154:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800f158:	9903      	ldr	r1, [sp, #12]
 800f15a:	9204      	str	r2, [sp, #16]
  /* Loop for each pair of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f15c:	6f02      	ldr	r2, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800f15e:	f8dd 9010 	ldr.w	r9, [sp, #16]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f162:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 800f166:	eb05 0252 	add.w	r2, r5, r2, lsr #1
 800f16a:	9205      	str	r2, [sp, #20]
 800f16c:	9a05      	ldr	r2, [sp, #20]
 800f16e:	3306      	adds	r3, #6
 800f170:	3102      	adds	r1, #2
 800f172:	4295      	cmp	r5, r2
 800f174:	d128      	bne.n	800f1c8 <h2v1_merged_upsample+0xa8>
 800f176:	2306      	movs	r3, #6
    outptr[RGB_GREEN] = range_limit[y + cgreen];
    outptr[RGB_BLUE] =  range_limit[y + cblue];
    outptr += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800f178:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800f17a:	fb03 f30e 	mul.w	r3, r3, lr
 800f17e:	07d2      	lsls	r2, r2, #31
 800f180:	eb0c 0103 	add.w	r1, ip, r3
 800f184:	d51d      	bpl.n	800f1c2 <h2v1_merged_upsample+0xa2>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800f186:	9a04      	ldr	r2, [sp, #16]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f188:	9802      	ldr	r0, [sp, #8]
    cred = Crrtab[cr];
 800f18a:	f812 600e 	ldrb.w	r6, [r2, lr]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f18e:	782a      	ldrb	r2, [r5, #0]
 800f190:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800f194:	f858 5022 	ldr.w	r5, [r8, r2, lsl #2]
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr0);
    outptr[RGB_RED] =   range_limit[y + cred];
 800f198:	9f00      	ldr	r7, [sp, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f19a:	4428      	add	r0, r5
    cblue = Cbbtab[cb];
 800f19c:	9d01      	ldr	r5, [sp, #4]
    outptr[RGB_RED] =   range_limit[y + cred];
 800f19e:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    cblue = Cbbtab[cb];
 800f1a2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f1a6:	eb04 4020 	add.w	r0, r4, r0, asr #16
    y  = GETJSAMPLE(*inptr0);
 800f1aa:	9a03      	ldr	r2, [sp, #12]
 800f1ac:	f812 201e 	ldrb.w	r2, [r2, lr, lsl #1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800f1b0:	18a7      	adds	r7, r4, r2
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f1b2:	442c      	add	r4, r5
    outptr[RGB_RED] =   range_limit[y + cred];
 800f1b4:	5dbe      	ldrb	r6, [r7, r6]
 800f1b6:	708e      	strb	r6, [r1, #2]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f1b8:	5c80      	ldrb	r0, [r0, r2]
 800f1ba:	7048      	strb	r0, [r1, #1]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f1bc:	5ca2      	ldrb	r2, [r4, r2]
 800f1be:	f80c 2003 	strb.w	r2, [ip, r3]
  }
}
 800f1c2:	b007      	add	sp, #28
 800f1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 800f1c8:	f819 ab01 	ldrb.w	sl, [r9], #1
 800f1cc:	9a00      	ldr	r2, [sp, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f1ce:	f815 6b01 	ldrb.w	r6, [r5], #1
    cred = Crrtab[cr];
 800f1d2:	f852 b02a 	ldr.w	fp, [r2, sl, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f1d6:	9a02      	ldr	r2, [sp, #8]
 800f1d8:	f858 7026 	ldr.w	r7, [r8, r6, lsl #2]
 800f1dc:	f852 202a 	ldr.w	r2, [r2, sl, lsl #2]
    y  = GETJSAMPLE(*inptr0++);
 800f1e0:	f811 ac02 	ldrb.w	sl, [r1, #-2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f1e4:	443a      	add	r2, r7
    cblue = Cbbtab[cb];
 800f1e6:	9f01      	ldr	r7, [sp, #4]
 800f1e8:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
    outptr[RGB_RED] =   range_limit[y + cred];
 800f1ec:	eb0b 0704 	add.w	r7, fp, r4
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f1f0:	eb04 4222 	add.w	r2, r4, r2, asr #16
    outptr[RGB_RED] =   range_limit[y + cred];
 800f1f4:	f817 b00a 	ldrb.w	fp, [r7, sl]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f1f8:	4426      	add	r6, r4
    outptr[RGB_RED] =   range_limit[y + cred];
 800f1fa:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f1fe:	f812 b00a 	ldrb.w	fp, [r2, sl]
 800f202:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f206:	f816 a00a 	ldrb.w	sl, [r6, sl]
 800f20a:	f803 ac06 	strb.w	sl, [r3, #-6]
    y  = GETJSAMPLE(*inptr0++);
 800f20e:	f811 ac01 	ldrb.w	sl, [r1, #-1]
    outptr[RGB_RED] =   range_limit[y + cred];
 800f212:	f817 700a 	ldrb.w	r7, [r7, sl]
 800f216:	f803 7c01 	strb.w	r7, [r3, #-1]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800f21a:	f812 200a 	ldrb.w	r2, [r2, sl]
 800f21e:	f803 2c02 	strb.w	r2, [r3, #-2]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800f222:	f816 200a 	ldrb.w	r2, [r6, sl]
 800f226:	f803 2c03 	strb.w	r2, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f22a:	e79f      	b.n	800f16c <h2v1_merged_upsample+0x4c>

0800f22c <h2v2_merged_upsample>:

METHODDEF(void)
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800f22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f230:	f8d0 51d8 	ldr.w	r5, [r0, #472]	; 0x1d8
{
 800f234:	b08b      	sub	sp, #44	; 0x2c
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800f236:	f8d0 414c 	ldr.w	r4, [r0, #332]	; 0x14c
  int * Crrtab = upsample->Cr_r_tab;
 800f23a:	692e      	ldr	r6, [r5, #16]
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800f23c:	f8d5 a01c 	ldr.w	sl, [r5, #28]
  int * Crrtab = upsample->Cr_r_tab;
 800f240:	9603      	str	r6, [sp, #12]
  int * Cbbtab = upsample->Cb_b_tab;
 800f242:	696e      	ldr	r6, [r5, #20]
 800f244:	9604      	str	r6, [sp, #16]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800f246:	69ae      	ldr	r6, [r5, #24]
  SHIFT_TEMPS

  inptr00 = input_buf[0][in_row_group_ctr*2];
 800f248:	680d      	ldr	r5, [r1, #0]
  INT32 * Crgtab = upsample->Cr_g_tab;
 800f24a:	9605      	str	r6, [sp, #20]
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800f24c:	f855 6032 	ldr.w	r6, [r5, r2, lsl #3]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800f250:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800f254:	686d      	ldr	r5, [r5, #4]
 800f256:	46b6      	mov	lr, r6
  inptr00 = input_buf[0][in_row_group_ctr*2];
 800f258:	9606      	str	r6, [sp, #24]
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800f25a:	9507      	str	r5, [sp, #28]
  inptr1 = input_buf[1][in_row_group_ctr];
 800f25c:	684d      	ldr	r5, [r1, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f25e:	6889      	ldr	r1, [r1, #8]
  inptr1 = input_buf[1][in_row_group_ctr];
 800f260:	f855 8022 	ldr.w	r8, [r5, r2, lsl #2]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f264:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  outptr0 = output_buf[0];
  outptr1 = output_buf[1];
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f268:	6f01      	ldr	r1, [r0, #112]	; 0x70
  inptr2 = input_buf[2][in_row_group_ctr];
 800f26a:	9208      	str	r2, [sp, #32]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f26c:	084f      	lsrs	r7, r1, #1
  outptr0 = output_buf[0];
 800f26e:	681a      	ldr	r2, [r3, #0]
 800f270:	eb08 0151 	add.w	r1, r8, r1, lsr #1
  outptr1 = output_buf[1];
 800f274:	685b      	ldr	r3, [r3, #4]
 800f276:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800f27a:	9109      	str	r1, [sp, #36]	; 0x24
  inptr2 = input_buf[2][in_row_group_ctr];
 800f27c:	9908      	ldr	r1, [sp, #32]
  outptr0 = output_buf[0];
 800f27e:	9200      	str	r2, [sp, #0]
  outptr1 = output_buf[1];
 800f280:	9301      	str	r3, [sp, #4]
  inptr2 = input_buf[2][in_row_group_ctr];
 800f282:	9102      	str	r1, [sp, #8]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f284:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f286:	3206      	adds	r2, #6
 800f288:	3306      	adds	r3, #6
 800f28a:	f10e 0e02 	add.w	lr, lr, #2
 800f28e:	4588      	cmp	r8, r1
 800f290:	f10c 0c02 	add.w	ip, ip, #2
 800f294:	d13a      	bne.n	800f30c <h2v2_merged_upsample+0xe0>
 800f296:	2306      	movs	r3, #6
 800f298:	9a00      	ldr	r2, [sp, #0]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
    outptr1 += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800f29a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800f29c:	437b      	muls	r3, r7
 800f29e:	07c0      	lsls	r0, r0, #31
 800f2a0:	eb02 0103 	add.w	r1, r2, r3
 800f2a4:	9a01      	ldr	r2, [sp, #4]
 800f2a6:	441a      	add	r2, r3
 800f2a8:	d52d      	bpl.n	800f306 <h2v2_merged_upsample+0xda>
    cb = GETJSAMPLE(*inptr1);
    cr = GETJSAMPLE(*inptr2);
    cred = Crrtab[cr];
 800f2aa:	9808      	ldr	r0, [sp, #32]
 800f2ac:	9d03      	ldr	r5, [sp, #12]
 800f2ae:	5dc0      	ldrb	r0, [r0, r7]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f2b0:	f898 6000 	ldrb.w	r6, [r8]
    cred = Crrtab[cr];
 800f2b4:	f855 e020 	ldr.w	lr, [r5, r0, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f2b8:	9d05      	ldr	r5, [sp, #20]
 800f2ba:	f85a c026 	ldr.w	ip, [sl, r6, lsl #2]
 800f2be:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
    cblue = Cbbtab[cb];
    y  = GETJSAMPLE(*inptr00);
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f2c2:	eb0e 0504 	add.w	r5, lr, r4
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f2c6:	4484      	add	ip, r0
    cblue = Cbbtab[cb];
 800f2c8:	9804      	ldr	r0, [sp, #16]
 800f2ca:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f2ce:	eb04 4c2c 	add.w	ip, r4, ip, asr #16
    y  = GETJSAMPLE(*inptr00);
 800f2d2:	9806      	ldr	r0, [sp, #24]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f2d4:	4434      	add	r4, r6
    y  = GETJSAMPLE(*inptr00);
 800f2d6:	f810 0017 	ldrb.w	r0, [r0, r7, lsl #1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f2da:	f815 e000 	ldrb.w	lr, [r5, r0]
 800f2de:	f881 e002 	strb.w	lr, [r1, #2]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f2e2:	f81c e000 	ldrb.w	lr, [ip, r0]
 800f2e6:	f881 e001 	strb.w	lr, [r1, #1]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f2ea:	5c21      	ldrb	r1, [r4, r0]
 800f2ec:	9800      	ldr	r0, [sp, #0]
 800f2ee:	54c1      	strb	r1, [r0, r3]
    y  = GETJSAMPLE(*inptr01);
 800f2f0:	9907      	ldr	r1, [sp, #28]
 800f2f2:	f811 1017 	ldrb.w	r1, [r1, r7, lsl #1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800f2f6:	5c68      	ldrb	r0, [r5, r1]
 800f2f8:	7090      	strb	r0, [r2, #2]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800f2fa:	f81c 0001 	ldrb.w	r0, [ip, r1]
 800f2fe:	7050      	strb	r0, [r2, #1]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800f300:	5c62      	ldrb	r2, [r4, r1]
 800f302:	9901      	ldr	r1, [sp, #4]
 800f304:	54ca      	strb	r2, [r1, r3]
  }
}
 800f306:	b00b      	add	sp, #44	; 0x2c
 800f308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cred = Crrtab[cr];
 800f30c:	9902      	ldr	r1, [sp, #8]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f30e:	f818 5b01 	ldrb.w	r5, [r8], #1
    cred = Crrtab[cr];
 800f312:	f811 9b01 	ldrb.w	r9, [r1], #1
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f316:	f85a 6025 	ldr.w	r6, [sl, r5, lsl #2]
    cred = Crrtab[cr];
 800f31a:	9102      	str	r1, [sp, #8]
 800f31c:	9903      	ldr	r1, [sp, #12]
 800f31e:	f851 b029 	ldr.w	fp, [r1, r9, lsl #2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f322:	9905      	ldr	r1, [sp, #20]
 800f324:	f851 1029 	ldr.w	r1, [r1, r9, lsl #2]
    y  = GETJSAMPLE(*inptr00++);
 800f328:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800f32c:	4431      	add	r1, r6
    cblue = Cbbtab[cb];
 800f32e:	9e04      	ldr	r6, [sp, #16]
 800f330:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f334:	eb0b 0604 	add.w	r6, fp, r4
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f338:	eb04 4121 	add.w	r1, r4, r1, asr #16
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f33c:	f816 b009 	ldrb.w	fp, [r6, r9]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f340:	4425      	add	r5, r4
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f342:	f802 bc04 	strb.w	fp, [r2, #-4]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f346:	f811 b009 	ldrb.w	fp, [r1, r9]
 800f34a:	f802 bc05 	strb.w	fp, [r2, #-5]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f34e:	f815 9009 	ldrb.w	r9, [r5, r9]
 800f352:	f802 9c06 	strb.w	r9, [r2, #-6]
    y  = GETJSAMPLE(*inptr00++);
 800f356:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
    outptr0[RGB_RED] =   range_limit[y + cred];
 800f35a:	f816 b009 	ldrb.w	fp, [r6, r9]
 800f35e:	f802 bc01 	strb.w	fp, [r2, #-1]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800f362:	f811 b009 	ldrb.w	fp, [r1, r9]
 800f366:	f802 bc02 	strb.w	fp, [r2, #-2]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800f36a:	f815 9009 	ldrb.w	r9, [r5, r9]
 800f36e:	f802 9c03 	strb.w	r9, [r2, #-3]
    y  = GETJSAMPLE(*inptr01++);
 800f372:	f81c 9c02 	ldrb.w	r9, [ip, #-2]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800f376:	f816 b009 	ldrb.w	fp, [r6, r9]
 800f37a:	f803 bc04 	strb.w	fp, [r3, #-4]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800f37e:	f811 b009 	ldrb.w	fp, [r1, r9]
 800f382:	f803 bc05 	strb.w	fp, [r3, #-5]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800f386:	f815 9009 	ldrb.w	r9, [r5, r9]
 800f38a:	f803 9c06 	strb.w	r9, [r3, #-6]
    y  = GETJSAMPLE(*inptr01++);
 800f38e:	f81c 9c01 	ldrb.w	r9, [ip, #-1]
    outptr1[RGB_RED] =   range_limit[y + cred];
 800f392:	f816 6009 	ldrb.w	r6, [r6, r9]
 800f396:	f803 6c01 	strb.w	r6, [r3, #-1]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800f39a:	f811 1009 	ldrb.w	r1, [r1, r9]
 800f39e:	f803 1c02 	strb.w	r1, [r3, #-2]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800f3a2:	f815 1009 	ldrb.w	r1, [r5, r9]
 800f3a6:	f803 1c03 	strb.w	r1, [r3, #-3]
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800f3aa:	e76b      	b.n	800f284 <h2v2_merged_upsample+0x58>

0800f3ac <merged_2v_upsample>:
{
 800f3ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f3b0:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800f3b4:	4616      	mov	r6, r2
 800f3b6:	e9dd c80a 	ldrd	ip, r8, [sp, #40]	; 0x28
  if (upsample->spare_full) {
 800f3ba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f3bc:	f8d8 3000 	ldr.w	r3, [r8]
 800f3c0:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 800f3c4:	b1dd      	cbz	r5, 800f3fe <merged_2v_upsample+0x52>
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800f3c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f3c8:	2501      	movs	r5, #1
 800f3ca:	f104 0020 	add.w	r0, r4, #32
 800f3ce:	9301      	str	r3, [sp, #4]
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	9500      	str	r5, [sp, #0]
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	f007 fc2e 	bl	8016c36 <jcopy_sample_rows>
    upsample->spare_full = FALSE;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	6263      	str	r3, [r4, #36]	; 0x24
  *out_row_ctr += num_rows;
 800f3de:	f8d8 3000 	ldr.w	r3, [r8]
 800f3e2:	442b      	add	r3, r5
 800f3e4:	f8c8 3000 	str.w	r3, [r8]
  upsample->rows_to_go -= num_rows;
 800f3e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f3ea:	1b5d      	subs	r5, r3, r5
  if (! upsample->spare_full)
 800f3ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
  upsample->rows_to_go -= num_rows;
 800f3ee:	62e5      	str	r5, [r4, #44]	; 0x2c
  if (! upsample->spare_full)
 800f3f0:	b913      	cbnz	r3, 800f3f8 <merged_2v_upsample+0x4c>
    (*in_row_group_ctr)++;
 800f3f2:	6833      	ldr	r3, [r6, #0]
 800f3f4:	3301      	adds	r3, #1
 800f3f6:	6033      	str	r3, [r6, #0]
}
 800f3f8:	b004      	add	sp, #16
 800f3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (num_rows > upsample->rows_to_go)
 800f3fe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    out_rows_avail -= *out_row_ctr;
 800f400:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    num_rows = 2;
 800f402:	2f02      	cmp	r7, #2
    out_rows_avail -= *out_row_ctr;
 800f404:	eba5 0503 	sub.w	r5, r5, r3
    work_ptrs[0] = output_buf[*out_row_ctr];
 800f408:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
    num_rows = 2;
 800f40c:	bf28      	it	cs
 800f40e:	2702      	movcs	r7, #2
    work_ptrs[0] = output_buf[*out_row_ctr];
 800f410:	9302      	str	r3, [sp, #8]
 800f412:	42bd      	cmp	r5, r7
 800f414:	bf28      	it	cs
 800f416:	463d      	movcs	r5, r7
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800f418:	68e7      	ldr	r7, [r4, #12]
    if (num_rows > 1) {
 800f41a:	2d02      	cmp	r5, #2
      work_ptrs[1] = upsample->spare_row;
 800f41c:	bf17      	itett	ne
 800f41e:	6a23      	ldrne	r3, [r4, #32]
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800f420:	6853      	ldreq	r3, [r2, #4]
      work_ptrs[1] = upsample->spare_row;
 800f422:	9303      	strne	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800f424:	2301      	movne	r3, #1
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800f426:	bf0c      	ite	eq
 800f428:	9303      	streq	r3, [sp, #12]
      upsample->spare_full = TRUE;
 800f42a:	6263      	strne	r3, [r4, #36]	; 0x24
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800f42c:	ab02      	add	r3, sp, #8
 800f42e:	6832      	ldr	r2, [r6, #0]
 800f430:	47b8      	blx	r7
 800f432:	e7d4      	b.n	800f3de <merged_2v_upsample+0x32>

0800f434 <jinit_merged_upsampler>:
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f434:	6843      	ldr	r3, [r0, #4]
 800f436:	2230      	movs	r2, #48	; 0x30
 800f438:	2101      	movs	r1, #1
 800f43a:	681b      	ldr	r3, [r3, #0]
{
 800f43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f440:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f442:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_merged_upsample;
 800f444:	4b37      	ldr	r3, [pc, #220]	; (800f524 <jinit_merged_upsampler+0xf0>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f446:	4605      	mov	r5, r0
  upsample->pub.need_context_rows = FALSE;

  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800f448:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800f44a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800f44c:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800f450:	434a      	muls	r2, r1

  if (cinfo->max_v_samp_factor == 2) {
 800f452:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
  upsample->pub.start_pass = start_pass_merged_upsample;
 800f456:	6003      	str	r3, [r0, #0]
  upsample->pub.need_context_rows = FALSE;
 800f458:	2300      	movs	r3, #0
  if (cinfo->max_v_samp_factor == 2) {
 800f45a:	2902      	cmp	r1, #2
  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800f45c:	6282      	str	r2, [r0, #40]	; 0x28
  upsample->pub.need_context_rows = FALSE;
 800f45e:	6083      	str	r3, [r0, #8]
  if (cinfo->max_v_samp_factor == 2) {
 800f460:	d15a      	bne.n	800f518 <jinit_merged_upsampler+0xe4>
    upsample->pub.upsample = merged_2v_upsample;
 800f462:	4b31      	ldr	r3, [pc, #196]	; (800f528 <jinit_merged_upsampler+0xf4>)
    upsample->upmethod = h2v2_merged_upsample;
    /* Allocate a spare row buffer */
    upsample->spare_row = (JSAMPROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f464:	2101      	movs	r1, #1
    upsample->pub.upsample = merged_2v_upsample;
 800f466:	6043      	str	r3, [r0, #4]
    upsample->upmethod = h2v2_merged_upsample;
 800f468:	4b30      	ldr	r3, [pc, #192]	; (800f52c <jinit_merged_upsampler+0xf8>)
 800f46a:	60c3      	str	r3, [r0, #12]
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f46c:	4620      	mov	r0, r4
 800f46e:	6863      	ldr	r3, [r4, #4]
 800f470:	685b      	ldr	r3, [r3, #4]
 800f472:	4798      	blx	r3
    upsample->spare_row = (JSAMPROW)
 800f474:	6228      	str	r0, [r5, #32]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f476:	6863      	ldr	r3, [r4, #4]
 800f478:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f47c:	2101      	movs	r1, #1
 800f47e:	4620      	mov	r0, r4
 800f480:	681b      	ldr	r3, [r3, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f482:	f8d4 51d8 	ldr.w	r5, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f486:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f488:	6863      	ldr	r3, [r4, #4]
 800f48a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  upsample->Cr_r_tab = (int *)
 800f48e:	6128      	str	r0, [r5, #16]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f490:	2101      	movs	r1, #1
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	4620      	mov	r0, r4
 800f496:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f498:	6863      	ldr	r3, [r4, #4]
  upsample->Cb_b_tab = (int *)
 800f49a:	6168      	str	r0, [r5, #20]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f49c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	2101      	movs	r1, #1
 800f4a4:	4620      	mov	r0, r4
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800f4a6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800f544 <jinit_merged_upsampler+0x110>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f4aa:	4798      	blx	r3
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f4ac:	6863      	ldr	r3, [r4, #4]
  upsample->Cr_g_tab = (INT32 *)
 800f4ae:	61a8      	str	r0, [r5, #24]
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f4b0:	2101      	movs	r1, #1
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	4620      	mov	r0, r4
 800f4b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800f4ba:	4f1d      	ldr	r7, [pc, #116]	; (800f530 <jinit_merged_upsampler+0xfc>)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f4bc:	4798      	blx	r3
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800f4be:	69ac      	ldr	r4, [r5, #24]
  upsample->Cb_g_tab = (INT32 *)
 800f4c0:	61e8      	str	r0, [r5, #28]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800f4c2:	2300      	movs	r3, #0
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800f4c4:	f8df e080 	ldr.w	lr, [pc, #128]	; 800f548 <jinit_merged_upsampler+0x114>
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800f4c8:	491a      	ldr	r1, [pc, #104]	; (800f534 <jinit_merged_upsampler+0x100>)
    upsample->Cb_b_tab[i] = (int)
 800f4ca:	e9d5 c604 	ldrd	ip, r6, [r5, #16]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800f4ce:	4d1a      	ldr	r5, [pc, #104]	; (800f538 <jinit_merged_upsampler+0x104>)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800f4d0:	fb08 e203 	mla	r2, r8, r3, lr
 800f4d4:	1412      	asrs	r2, r2, #16
    upsample->Cr_r_tab[i] = (int)
 800f4d6:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800f4da:	fb07 f203 	mul.w	r2, r7, r3
 800f4de:	f5a2 0262 	sub.w	r2, r2, #14811136	; 0xe20000
 800f4e2:	f5a2 42a2 	sub.w	r2, r2, #20736	; 0x5100
 800f4e6:	1412      	asrs	r2, r2, #16
    upsample->Cb_b_tab[i] = (int)
 800f4e8:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800f4ec:	fb05 f203 	mul.w	r2, r5, r3
 800f4f0:	f502 02b6 	add.w	r2, r2, #5963776	; 0x5b0000
 800f4f4:	f502 42d2 	add.w	r2, r2, #26880	; 0x6900
 800f4f8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800f4fc:	fb01 f203 	mul.w	r2, r1, r3
 800f500:	f502 1232 	add.w	r2, r2, #2916352	; 0x2c8000
 800f504:	f502 6250 	add.w	r2, r2, #3328	; 0xd00
 800f508:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800f50c:	3301      	adds	r3, #1
 800f50e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f512:	d1dd      	bne.n	800f4d0 <jinit_merged_upsampler+0x9c>
    /* No spare row needed */
    upsample->spare_row = NULL;
  }

  build_ycc_rgb_table(cinfo);
}
 800f514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    upsample->pub.upsample = merged_1v_upsample;
 800f518:	4a08      	ldr	r2, [pc, #32]	; (800f53c <jinit_merged_upsampler+0x108>)
    upsample->spare_row = NULL;
 800f51a:	6203      	str	r3, [r0, #32]
    upsample->pub.upsample = merged_1v_upsample;
 800f51c:	6042      	str	r2, [r0, #4]
    upsample->upmethod = h2v1_merged_upsample;
 800f51e:	4a08      	ldr	r2, [pc, #32]	; (800f540 <jinit_merged_upsampler+0x10c>)
 800f520:	60c2      	str	r2, [r0, #12]
    upsample->spare_row = NULL;
 800f522:	e7a8      	b.n	800f476 <jinit_merged_upsampler+0x42>
 800f524:	0800f0ed 	.word	0x0800f0ed
 800f528:	0800f3ad 	.word	0x0800f3ad
 800f52c:	0800f22d 	.word	0x0800f22d
 800f530:	0001c5a2 	.word	0x0001c5a2
 800f534:	ffffa7e6 	.word	0xffffa7e6
 800f538:	ffff492e 	.word	0xffff492e
 800f53c:	0800f0fb 	.word	0x0800f0fb
 800f540:	0800f121 	.word	0x0800f121
 800f544:	000166e9 	.word	0x000166e9
 800f548:	ff4d0b80 	.word	0xff4d0b80

0800f54c <start_pass_dpost>:
METHODDEF(void)
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;

  switch (pass_mode) {
 800f54c:	2902      	cmp	r1, #2
{
 800f54e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f550:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
  switch (pass_mode) {
 800f554:	d023      	beq.n	800f59e <start_pass_dpost+0x52>
 800f556:	2903      	cmp	r1, #3
 800f558:	d019      	beq.n	800f58e <start_pass_dpost+0x42>
 800f55a:	2900      	cmp	r1, #0
 800f55c:	d128      	bne.n	800f5b0 <start_pass_dpost+0x64>
  case JBUF_PASS_THRU:
    if (cinfo->quantize_colors) {
 800f55e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800f560:	b182      	cbz	r2, 800f584 <start_pass_dpost+0x38>
      /* Single-pass processing with color quantization. */
      post->pub.post_process_data = post_process_1pass;
 800f562:	4a16      	ldr	r2, [pc, #88]	; (800f5bc <start_pass_dpost+0x70>)
 800f564:	6062      	str	r2, [r4, #4]
      /* We could be doing buffered-image output before starting a 2-pass
       * color quantization; in that case, jinit_d_post_controller did not
       * allocate a strip buffer.  Use the virtual-array buffer as workspace.
       */
      if (post->buffer == NULL) {
 800f566:	68e2      	ldr	r2, [r4, #12]
 800f568:	b93a      	cbnz	r2, 800f57a <start_pass_dpost+0x2e>
	post->buffer = (*cinfo->mem->access_virt_sarray)
 800f56a:	6843      	ldr	r3, [r0, #4]
 800f56c:	2101      	movs	r1, #1
 800f56e:	9100      	str	r1, [sp, #0]
 800f570:	69dd      	ldr	r5, [r3, #28]
 800f572:	68a1      	ldr	r1, [r4, #8]
 800f574:	6923      	ldr	r3, [r4, #16]
 800f576:	47a8      	blx	r5
 800f578:	60e0      	str	r0, [r4, #12]
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
    break;
  }
  post->starting_row = post->next_row = 0;
 800f57a:	2300      	movs	r3, #0
 800f57c:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
 800f580:	b003      	add	sp, #12
 800f582:	bd30      	pop	{r4, r5, pc}
      post->pub.post_process_data = cinfo->upsample->upsample;
 800f584:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
 800f588:	685b      	ldr	r3, [r3, #4]
    post->pub.post_process_data = post_process_prepass;
 800f58a:	6063      	str	r3, [r4, #4]
    break;
 800f58c:	e7f5      	b.n	800f57a <start_pass_dpost+0x2e>
    if (post->whole_image == NULL)
 800f58e:	68a2      	ldr	r2, [r4, #8]
 800f590:	b91a      	cbnz	r2, 800f59a <start_pass_dpost+0x4e>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800f592:	6803      	ldr	r3, [r0, #0]
 800f594:	6159      	str	r1, [r3, #20]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	4798      	blx	r3
    post->pub.post_process_data = post_process_prepass;
 800f59a:	4b09      	ldr	r3, [pc, #36]	; (800f5c0 <start_pass_dpost+0x74>)
 800f59c:	e7f5      	b.n	800f58a <start_pass_dpost+0x3e>
    if (post->whole_image == NULL)
 800f59e:	68a2      	ldr	r2, [r4, #8]
 800f5a0:	b922      	cbnz	r2, 800f5ac <start_pass_dpost+0x60>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800f5a2:	6803      	ldr	r3, [r0, #0]
 800f5a4:	2203      	movs	r2, #3
 800f5a6:	615a      	str	r2, [r3, #20]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	4798      	blx	r3
    post->pub.post_process_data = post_process_2pass;
 800f5ac:	4b05      	ldr	r3, [pc, #20]	; (800f5c4 <start_pass_dpost+0x78>)
 800f5ae:	e7ec      	b.n	800f58a <start_pass_dpost+0x3e>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800f5b0:	6803      	ldr	r3, [r0, #0]
 800f5b2:	2203      	movs	r2, #3
 800f5b4:	615a      	str	r2, [r3, #20]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	4798      	blx	r3
    break;
 800f5ba:	e7de      	b.n	800f57a <start_pass_dpost+0x2e>
 800f5bc:	0800f5c9 	.word	0x0800f5c9
 800f5c0:	0800f629 	.word	0x0800f629
 800f5c4:	0800f6b7 	.word	0x0800f6b7

0800f5c8 <post_process_1pass>:
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800f5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5cc:	b088      	sub	sp, #32
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f5ce:	f8d0 81c4 	ldr.w	r8, [r0, #452]	; 0x1c4
{
 800f5d2:	4604      	mov	r4, r0
 800f5d4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
 800f5d6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800f5d8:	682f      	ldr	r7, [r5, #0]
 800f5da:	1bf6      	subs	r6, r6, r7
  if (max_rows > post->strip_height)
    max_rows = post->strip_height;
  num_rows = 0;
 800f5dc:	2700      	movs	r7, #0
 800f5de:	9707      	str	r7, [sp, #28]
  (*cinfo->upsample->upsample) (cinfo,
 800f5e0:	f8d0 71d8 	ldr.w	r7, [r0, #472]	; 0x1d8
 800f5e4:	9705      	str	r7, [sp, #20]
 800f5e6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f5ea:	42be      	cmp	r6, r7
 800f5ec:	bf94      	ite	ls
 800f5ee:	9602      	strls	r6, [sp, #8]
 800f5f0:	9702      	strhi	r7, [sp, #8]
 800f5f2:	ae07      	add	r6, sp, #28
 800f5f4:	9601      	str	r6, [sp, #4]
 800f5f6:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800f5fa:	9600      	str	r6, [sp, #0]
 800f5fc:	9e05      	ldr	r6, [sp, #20]
 800f5fe:	6876      	ldr	r6, [r6, #4]
 800f600:	47b0      	blx	r6
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
 800f602:	6829      	ldr	r1, [r5, #0]
  (*cinfo->cquantize->color_quantize) (cinfo,
 800f604:	f8d4 31e0 	ldr.w	r3, [r4, #480]	; 0x1e0
 800f608:	4620      	mov	r0, r4
 800f60a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f60c:	685e      	ldr	r6, [r3, #4]
 800f60e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f612:	9b07      	ldr	r3, [sp, #28]
 800f614:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800f618:	47b0      	blx	r6
  *out_row_ctr += num_rows;
 800f61a:	682b      	ldr	r3, [r5, #0]
 800f61c:	9a07      	ldr	r2, [sp, #28]
 800f61e:	4413      	add	r3, r2
 800f620:	602b      	str	r3, [r5, #0]
}
 800f622:	b008      	add	sp, #32
 800f624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f628 <post_process_prepass>:
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		      JDIMENSION out_rows_avail)
{
 800f628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f62c:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800f630:	b085      	sub	sp, #20
 800f632:	469a      	mov	sl, r3
 800f634:	4605      	mov	r5, r0
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800f636:	69a3      	ldr	r3, [r4, #24]
{
 800f638:	460e      	mov	r6, r1
 800f63a:	4691      	mov	r9, r2
 800f63c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
  if (post->next_row == 0) {
 800f640:	b943      	cbnz	r3, 800f654 <post_process_prepass+0x2c>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800f642:	6843      	ldr	r3, [r0, #4]
 800f644:	2201      	movs	r2, #1
 800f646:	9200      	str	r2, [sp, #0]
 800f648:	69df      	ldr	r7, [r3, #28]
 800f64a:	68a1      	ldr	r1, [r4, #8]
 800f64c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f650:	47b8      	blx	r7
 800f652:	60e0      	str	r0, [r4, #12]
	 post->starting_row, post->strip_height, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
  (*cinfo->upsample->upsample) (cinfo,
 800f654:	6922      	ldr	r2, [r4, #16]
 800f656:	4631      	mov	r1, r6
  old_next_row = post->next_row;
 800f658:	69a7      	ldr	r7, [r4, #24]
  (*cinfo->upsample->upsample) (cinfo,
 800f65a:	4628      	mov	r0, r5
 800f65c:	9202      	str	r2, [sp, #8]
 800f65e:	f104 0218 	add.w	r2, r4, #24
 800f662:	f8d5 31d8 	ldr.w	r3, [r5, #472]	; 0x1d8
 800f666:	9201      	str	r2, [sp, #4]
 800f668:	68e2      	ldr	r2, [r4, #12]
 800f66a:	9200      	str	r2, [sp, #0]
 800f66c:	464a      	mov	r2, r9
 800f66e:	f8d3 b004 	ldr.w	fp, [r3, #4]
 800f672:	4653      	mov	r3, sl
 800f674:	47d8      	blx	fp
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
 800f676:	69a6      	ldr	r6, [r4, #24]
 800f678:	42be      	cmp	r6, r7
 800f67a:	d910      	bls.n	800f69e <post_process_prepass+0x76>
    num_rows = post->next_row - old_next_row;
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800f67c:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
    num_rows = post->next_row - old_next_row;
 800f680:	1bf6      	subs	r6, r6, r7
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800f682:	68e1      	ldr	r1, [r4, #12]
 800f684:	2200      	movs	r2, #0
 800f686:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800f68a:	4628      	mov	r0, r5
 800f68c:	4633      	mov	r3, r6
 800f68e:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 800f692:	47c8      	blx	r9
					 (JSAMPARRAY) NULL, (int) num_rows);
    *out_row_ctr += num_rows;
 800f694:	f8d8 3000 	ldr.w	r3, [r8]
 800f698:	4433      	add	r3, r6
 800f69a:	f8c8 3000 	str.w	r3, [r8]
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
 800f69e:	6922      	ldr	r2, [r4, #16]
 800f6a0:	69a3      	ldr	r3, [r4, #24]
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d304      	bcc.n	800f6b0 <post_process_prepass+0x88>
    post->starting_row += post->strip_height;
 800f6a6:	6963      	ldr	r3, [r4, #20]
 800f6a8:	4413      	add	r3, r2
 800f6aa:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	61a3      	str	r3, [r4, #24]
  }
}
 800f6b0:	b005      	add	sp, #20
 800f6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f6b6 <post_process_2pass>:
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800f6b6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800f6ba:	f8d0 41c4 	ldr.w	r4, [r0, #452]	; 0x1c4
{
 800f6be:	4607      	mov	r7, r0
 800f6c0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800f6c2:	69a3      	ldr	r3, [r4, #24]
 800f6c4:	b93b      	cbnz	r3, 800f6d6 <post_process_2pass+0x20>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800f6c6:	6842      	ldr	r2, [r0, #4]
 800f6c8:	9300      	str	r3, [sp, #0]
 800f6ca:	69d5      	ldr	r5, [r2, #28]
 800f6cc:	68a1      	ldr	r1, [r4, #8]
 800f6ce:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f6d2:	47a8      	blx	r5
 800f6d4:	60e0      	str	r0, [r4, #12]
  num_rows = post->strip_height - post->next_row; /* available in strip */
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
  if (num_rows > max_rows)
    num_rows = max_rows;
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
 800f6d6:	6963      	ldr	r3, [r4, #20]
 800f6d8:	6f7d      	ldr	r5, [r7, #116]	; 0x74
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800f6da:	69a1      	ldr	r1, [r4, #24]
  max_rows = cinfo->output_height - post->starting_row;
 800f6dc:	1aed      	subs	r5, r5, r3
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800f6de:	6923      	ldr	r3, [r4, #16]
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800f6e0:	6832      	ldr	r2, [r6, #0]
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800f6e2:	1a5b      	subs	r3, r3, r1
  if (num_rows > max_rows)
    num_rows = max_rows;

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
 800f6e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f6e6:	429d      	cmp	r5, r3
 800f6e8:	bf28      	it	cs
 800f6ea:	461d      	movcs	r5, r3
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800f6ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6ee:	1a9b      	subs	r3, r3, r2
  (*cinfo->cquantize->color_quantize) (cinfo,
 800f6f0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f6f4:	429d      	cmp	r5, r3
 800f6f6:	bf28      	it	cs
 800f6f8:	461d      	movcs	r5, r3
 800f6fa:	68e3      	ldr	r3, [r4, #12]
 800f6fc:	9303      	str	r3, [sp, #12]
 800f6fe:	9803      	ldr	r0, [sp, #12]
 800f700:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800f704:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f708:	4638      	mov	r0, r7
 800f70a:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800f70e:	462b      	mov	r3, r5
 800f710:	47c0      	blx	r8
		post->buffer + post->next_row, output_buf + *out_row_ctr,
		(int) num_rows);
  *out_row_ctr += num_rows;
 800f712:	6833      	ldr	r3, [r6, #0]
 800f714:	442b      	add	r3, r5
 800f716:	6033      	str	r3, [r6, #0]

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
 800f718:	69a3      	ldr	r3, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800f71a:	6922      	ldr	r2, [r4, #16]
  post->next_row += num_rows;
 800f71c:	441d      	add	r5, r3
  if (post->next_row >= post->strip_height) {
 800f71e:	4295      	cmp	r5, r2
  post->next_row += num_rows;
 800f720:	61a5      	str	r5, [r4, #24]
  if (post->next_row >= post->strip_height) {
 800f722:	d304      	bcc.n	800f72e <post_process_2pass+0x78>
    post->starting_row += post->strip_height;
 800f724:	6963      	ldr	r3, [r4, #20]
 800f726:	4413      	add	r3, r2
 800f728:	6163      	str	r3, [r4, #20]
    post->next_row = 0;
 800f72a:	2300      	movs	r3, #0
 800f72c:	61a3      	str	r3, [r4, #24]
  }
}
 800f72e:	b004      	add	sp, #16
 800f730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f734 <jinit_d_post_controller>:
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_post_ptr post;

  post = (my_post_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f734:	6843      	ldr	r3, [r0, #4]
 800f736:	221c      	movs	r2, #28
{
 800f738:	b5f0      	push	{r4, r5, r6, r7, lr}
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f73a:	681b      	ldr	r3, [r3, #0]
{
 800f73c:	b085      	sub	sp, #20
 800f73e:	460f      	mov	r7, r1
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f740:	2101      	movs	r1, #1
{
 800f742:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f744:	4798      	blx	r3
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
  post->pub.start_pass = start_pass_dpost;
 800f746:	4b15      	ldr	r3, [pc, #84]	; (800f79c <jinit_d_post_controller+0x68>)
  post->whole_image = NULL;	/* flag for no virtual arrays */
 800f748:	2600      	movs	r6, #0
  cinfo->post = (struct jpeg_d_post_controller *) post;
 800f74a:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f74e:	4605      	mov	r5, r0
  post->pub.start_pass = start_pass_dpost;
 800f750:	6003      	str	r3, [r0, #0]
  post->buffer = NULL;		/* flag for no strip buffer */

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
 800f752:	6d63      	ldr	r3, [r4, #84]	; 0x54
  post->buffer = NULL;		/* flag for no strip buffer */
 800f754:	e9c0 6602 	strd	r6, r6, [r0, #8]
  if (cinfo->quantize_colors) {
 800f758:	b1bb      	cbz	r3, 800f78a <jinit_d_post_controller+0x56>
    /* The buffer strip height is max_v_samp_factor, which is typically
     * an efficient number of rows for upsampling to return.
     * (In the presence of output rescaling, we might want to be smarter?)
     */
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800f75a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 800f75e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800f760:	6103      	str	r3, [r0, #16]
    if (need_full_buffer) {
 800f762:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800f764:	6861      	ldr	r1, [r4, #4]
 800f766:	4342      	muls	r2, r0
 800f768:	b18f      	cbz	r7, 800f78e <jinit_d_post_controller+0x5a>
      /* Two-pass color quantization: need full-image storage. */
      /* We round up the number of rows to a multiple of the strip height. */
#ifdef QUANT_2PASS_SUPPORTED
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f76a:	690f      	ldr	r7, [r1, #16]
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 cinfo->output_width * cinfo->out_color_components,
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 800f76c:	4619      	mov	r1, r3
 800f76e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800f770:	9203      	str	r2, [sp, #12]
 800f772:	f007 fa58 	bl	8016c26 <jround_up>
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800f776:	692b      	ldr	r3, [r5, #16]
 800f778:	2101      	movs	r1, #1
 800f77a:	9a03      	ldr	r2, [sp, #12]
 800f77c:	e9cd 0300 	strd	r0, r3, [sp]
 800f780:	4613      	mov	r3, r2
 800f782:	4620      	mov	r0, r4
 800f784:	4632      	mov	r2, r6
 800f786:	47b8      	blx	r7
 800f788:	60a8      	str	r0, [r5, #8]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
    }
  }
}
 800f78a:	b005      	add	sp, #20
 800f78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      post->buffer = (*cinfo->mem->alloc_sarray)
 800f78e:	688e      	ldr	r6, [r1, #8]
 800f790:	4620      	mov	r0, r4
 800f792:	2101      	movs	r1, #1
 800f794:	47b0      	blx	r6
 800f796:	60e8      	str	r0, [r5, #12]
}
 800f798:	e7f7      	b.n	800f78a <jinit_d_post_controller+0x56>
 800f79a:	bf00      	nop
 800f79c:	0800f54d 	.word	0x0800f54d

0800f7a0 <start_pass_upsample>:
start_pass_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800f7a0:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f7a4:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800f7a8:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800f7aa:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800f7ac:	661a      	str	r2, [r3, #96]	; 0x60
}
 800f7ae:	4770      	bx	lr

0800f7b0 <sep_upsample>:
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION in_row_groups_avail,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
 800f7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b4:	b085      	sub	sp, #20
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f7b6:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800f7ba:	4615      	mov	r5, r2
 800f7bc:	4683      	mov	fp, r0
 800f7be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f7c0:	4688      	mov	r8, r1
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800f7c2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
{
 800f7c4:	9302      	str	r3, [sp, #8]
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800f7c6:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	db10      	blt.n	800f7f0 <sep_upsample+0x40>
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f7ce:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800f7d2:	2600      	movs	r6, #0
 800f7d4:	f04f 0a58 	mov.w	sl, #88	; 0x58
 800f7d8:	9303      	str	r3, [sp, #12]
 800f7da:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800f7de:	9a03      	ldr	r2, [sp, #12]
 800f7e0:	fb0a 2106 	mla	r1, sl, r6, r2
 800f7e4:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 800f7e8:	42b2      	cmp	r2, r6
 800f7ea:	dc32      	bgt.n	800f852 <sep_upsample+0xa2>
       */
      (*upsample->methods[ci]) (cinfo, compptr,
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
	upsample->color_buf + ci);
    }
    upsample->next_row_out = 0;
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	65e3      	str	r3, [r4, #92]	; 0x5c
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go) 
    num_rows = upsample->rows_to_go;
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
 800f7f0:	9b02      	ldr	r3, [sp, #8]
  if (num_rows > out_rows_avail)
    num_rows = out_rows_avail;

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800f7f2:	4658      	mov	r0, fp
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800f7f4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800f7f6:	f8db 613c 	ldr.w	r6, [fp, #316]	; 0x13c
  out_rows_avail -= *out_row_ctr;
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	9910      	ldr	r1, [sp, #64]	; 0x40
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800f7fe:	eba6 0c02 	sub.w	ip, r6, r2
  out_rows_avail -= *out_row_ctr;
 800f802:	1ace      	subs	r6, r1, r3
 800f804:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800f806:	428e      	cmp	r6, r1
 800f808:	bf28      	it	cs
 800f80a:	460e      	movcs	r6, r1
  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800f80c:	f8db 11dc 	ldr.w	r1, [fp, #476]	; 0x1dc
 800f810:	4566      	cmp	r6, ip
 800f812:	bf28      	it	cs
 800f814:	4666      	movcs	r6, ip
 800f816:	9600      	str	r6, [sp, #0]
 800f818:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800f81c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f81e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800f822:	f104 010c 	add.w	r1, r4, #12
 800f826:	47c0      	blx	r8
				     (JDIMENSION) upsample->next_row_out,
				     output_buf + *out_row_ctr,
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
 800f828:	9b02      	ldr	r3, [sp, #8]
 800f82a:	9a02      	ldr	r2, [sp, #8]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	4433      	add	r3, r6
 800f830:	6013      	str	r3, [r2, #0]
  upsample->rows_to_go -= num_rows;
 800f832:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800f834:	1b9b      	subs	r3, r3, r6
 800f836:	6623      	str	r3, [r4, #96]	; 0x60
  upsample->next_row_out += num_rows;
 800f838:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800f83a:	441e      	add	r6, r3
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
 800f83c:	f8db 313c 	ldr.w	r3, [fp, #316]	; 0x13c
 800f840:	429e      	cmp	r6, r3
  upsample->next_row_out += num_rows;
 800f842:	65e6      	str	r6, [r4, #92]	; 0x5c
    (*in_row_group_ctr)++;
 800f844:	bfa2      	ittt	ge
 800f846:	682b      	ldrge	r3, [r5, #0]
 800f848:	3301      	addge	r3, #1
 800f84a:	602b      	strge	r3, [r5, #0]
}
 800f84c:	b005      	add	sp, #20
 800f84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 800f852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f854:	f103 0904 	add.w	r9, r3, #4
 800f858:	6828      	ldr	r0, [r5, #0]
 800f85a:	4342      	muls	r2, r0
      (*upsample->methods[ci]) (cinfo, compptr,
 800f85c:	f853 0928 	ldr.w	r0, [r3], #-40
 800f860:	4607      	mov	r7, r0
 800f862:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
	 ci++, compptr++) {
 800f866:	3601      	adds	r6, #1
      (*upsample->methods[ci]) (cinfo, compptr,
 800f868:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f86c:	4658      	mov	r0, fp
 800f86e:	47b8      	blx	r7
	 ci++, compptr++) {
 800f870:	464b      	mov	r3, r9
 800f872:	e7b4      	b.n	800f7de <sep_upsample+0x2e>

0800f874 <fullsize_upsample>:

METHODDEF(void)
fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = input_data;
 800f874:	601a      	str	r2, [r3, #0]
}
 800f876:	4770      	bx	lr

0800f878 <noop_upsample>:

METHODDEF(void)
noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = NULL;	/* safety check */
 800f878:	2200      	movs	r2, #0
 800f87a:	601a      	str	r2, [r3, #0]
}
 800f87c:	4770      	bx	lr

0800f87e <h2v1_upsample>:
 */

METHODDEF(void)
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800f87e:	b5f0      	push	{r4, r5, r6, r7, lr}
  JSAMPARRAY output_data = *output_data_ptr;
 800f880:	681f      	ldr	r7, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int outrow;

  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800f882:	2300      	movs	r3, #0
 800f884:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
 800f888:	4299      	cmp	r1, r3
 800f88a:	dc00      	bgt.n	800f88e <h2v1_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
  }
}
 800f88c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    outptr = output_data[outrow];
 800f88e:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800f892:	6f04      	ldr	r4, [r0, #112]	; 0x70
    inptr = input_data[outrow];
 800f894:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    outend = outptr + cinfo->output_width;
 800f898:	440c      	add	r4, r1
    while (outptr < outend) {
 800f89a:	42a1      	cmp	r1, r4
 800f89c:	d301      	bcc.n	800f8a2 <h2v1_upsample+0x24>
  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800f89e:	3301      	adds	r3, #1
 800f8a0:	e7f0      	b.n	800f884 <h2v1_upsample+0x6>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800f8a2:	f815 6b01 	ldrb.w	r6, [r5], #1
      *outptr++ = invalue;
 800f8a6:	f801 6b02 	strb.w	r6, [r1], #2
      *outptr++ = invalue;
 800f8aa:	f801 6c01 	strb.w	r6, [r1, #-1]
 800f8ae:	e7f4      	b.n	800f89a <h2v1_upsample+0x1c>

0800f8b0 <int_upsample>:
{
 800f8b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800f8b4:	f8d0 41d8 	ldr.w	r4, [r0, #472]	; 0x1d8
{
 800f8b8:	4605      	mov	r5, r0
  JSAMPARRAY output_data = *output_data_ptr;
 800f8ba:	6818      	ldr	r0, [r3, #0]
  h_expand = upsample->h_expand[compptr->component_index];
 800f8bc:	1f16      	subs	r6, r2, #4
 800f8be:	684b      	ldr	r3, [r1, #4]
 800f8c0:	4423      	add	r3, r4
  inrow = outrow = 0;
 800f8c2:	2400      	movs	r4, #0
  v_expand = upsample->v_expand[compptr->component_index];
 800f8c4:	f893 8096 	ldrb.w	r8, [r3, #150]	; 0x96
  h_expand = upsample->h_expand[compptr->component_index];
 800f8c8:	f893 708c 	ldrb.w	r7, [r3, #140]	; 0x8c
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f8cc:	f108 39ff 	add.w	r9, r8, #4294967295
  while (outrow < cinfo->max_v_samp_factor) {
 800f8d0:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800f8d4:	42a3      	cmp	r3, r4
 800f8d6:	dc02      	bgt.n	800f8de <int_upsample+0x2e>
}
 800f8d8:	b004      	add	sp, #16
 800f8da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    outptr = output_data[outrow];
 800f8de:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800f8e2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800f8e4:	f856 ef04 	ldr.w	lr, [r6, #4]!
    outend = outptr + cinfo->output_width;
 800f8e8:	19d9      	adds	r1, r3, r7
 800f8ea:	441a      	add	r2, r3
    while (outptr < outend) {
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	d30e      	bcc.n	800f90e <int_upsample+0x5e>
    if (v_expand > 1) {
 800f8f0:	f1b8 0f01 	cmp.w	r8, #1
 800f8f4:	dd09      	ble.n	800f90a <int_upsample+0x5a>
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f8f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800f8f8:	4602      	mov	r2, r0
 800f8fa:	4621      	mov	r1, r4
 800f8fc:	9003      	str	r0, [sp, #12]
 800f8fe:	e9cd 9300 	strd	r9, r3, [sp]
 800f902:	1c63      	adds	r3, r4, #1
 800f904:	f007 f997 	bl	8016c36 <jcopy_sample_rows>
 800f908:	9803      	ldr	r0, [sp, #12]
    outrow += v_expand;
 800f90a:	4444      	add	r4, r8
 800f90c:	e7e0      	b.n	800f8d0 <int_upsample+0x20>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800f90e:	f81e ab01 	ldrb.w	sl, [lr], #1
      for (h = h_expand; h > 0; h--) {
 800f912:	469c      	mov	ip, r3
 800f914:	458c      	cmp	ip, r1
 800f916:	d102      	bne.n	800f91e <int_upsample+0x6e>
 800f918:	443b      	add	r3, r7
 800f91a:	4439      	add	r1, r7
 800f91c:	e7e6      	b.n	800f8ec <int_upsample+0x3c>
	*outptr++ = invalue;
 800f91e:	f80c ab01 	strb.w	sl, [ip], #1
      for (h = h_expand; h > 0; h--) {
 800f922:	e7f7      	b.n	800f914 <int_upsample+0x64>

0800f924 <h2v2_upsample>:
 */

METHODDEF(void)
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800f924:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f928:	4605      	mov	r5, r0
 800f92a:	4617      	mov	r7, r2
  JSAMPARRAY output_data = *output_data_ptr;
 800f92c:	681e      	ldr	r6, [r3, #0]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
 800f92e:	2400      	movs	r4, #0
    while (outptr < outend) {
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
      *outptr++ = invalue;
      *outptr++ = invalue;
    }
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f930:	f04f 0801 	mov.w	r8, #1
  while (outrow < cinfo->max_v_samp_factor) {
 800f934:	f8d5 313c 	ldr.w	r3, [r5, #316]	; 0x13c
 800f938:	42a3      	cmp	r3, r4
 800f93a:	dc02      	bgt.n	800f942 <h2v2_upsample+0x1e>
		      1, cinfo->output_width);
    inrow++;
    outrow += 2;
  }
}
 800f93c:	b002      	add	sp, #8
 800f93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    outptr = output_data[outrow];
 800f942:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
    outend = outptr + cinfo->output_width;
 800f946:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    inptr = input_data[inrow];
 800f948:	f857 1014 	ldr.w	r1, [r7, r4, lsl #1]
    outend = outptr + cinfo->output_width;
 800f94c:	441a      	add	r2, r3
    while (outptr < outend) {
 800f94e:	4293      	cmp	r3, r2
 800f950:	d30a      	bcc.n	800f968 <h2v2_upsample+0x44>
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f952:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800f954:	4621      	mov	r1, r4
 800f956:	4632      	mov	r2, r6
 800f958:	4630      	mov	r0, r6
 800f95a:	e9cd 8300 	strd	r8, r3, [sp]
 800f95e:	1c63      	adds	r3, r4, #1
    outrow += 2;
 800f960:	3402      	adds	r4, #2
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800f962:	f007 f968 	bl	8016c36 <jcopy_sample_rows>
    outrow += 2;
 800f966:	e7e5      	b.n	800f934 <h2v2_upsample+0x10>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800f968:	f811 0b01 	ldrb.w	r0, [r1], #1
      *outptr++ = invalue;
 800f96c:	f803 0b02 	strb.w	r0, [r3], #2
      *outptr++ = invalue;
 800f970:	f803 0c01 	strb.w	r0, [r3, #-1]
 800f974:	e7eb      	b.n	800f94e <h2v2_upsample+0x2a>
	...

0800f978 <jinit_upsampler>:
 * Module initialization routine for upsampling.
 */

GLOBAL(void)
jinit_upsampler (j_decompress_ptr cinfo)
{
 800f978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  jpeg_component_info * compptr;
  boolean need_buffer;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f97c:	6843      	ldr	r3, [r0, #4]
 800f97e:	22a0      	movs	r2, #160	; 0xa0
 800f980:	2101      	movs	r1, #1
{
 800f982:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	4798      	blx	r3
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_upsample;
 800f988:	4b3f      	ldr	r3, [pc, #252]	; (800fa88 <jinit_upsampler+0x110>)
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800f98a:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800f98e:	4605      	mov	r5, r0
  upsample->pub.start_pass = start_pass_upsample;
 800f990:	6003      	str	r3, [r0, #0]
  upsample->pub.upsample = sep_upsample;
 800f992:	4b3e      	ldr	r3, [pc, #248]	; (800fa8c <jinit_upsampler+0x114>)
 800f994:	6043      	str	r3, [r0, #4]
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */
 800f996:	2300      	movs	r3, #0
 800f998:	6083      	str	r3, [r0, #8]

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
 800f99a:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800f99e:	b12b      	cbz	r3, 800f9ac <jinit_upsampler+0x34>
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
 800f9a0:	6823      	ldr	r3, [r4, #0]
 800f9a2:	221a      	movs	r2, #26
 800f9a4:	4620      	mov	r0, r4
 800f9a6:	615a      	str	r2, [r3, #20]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	4798      	blx	r3

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f9ac:	f105 060c 	add.w	r6, r5, #12
 800f9b0:	f105 088c 	add.w	r8, r5, #140	; 0x8c
 800f9b4:	f1c5 25ff 	rsb	r5, r5, #4278255360	; 0xff00ff00
 800f9b8:	f8d4 70d8 	ldr.w	r7, [r4, #216]	; 0xd8
      /* Special case for 2h2v upsampling */
      upsample->methods[ci] = h2v2_upsample;
    } else if ((h_out_group % h_in_group) == 0 &&
	       (v_out_group % v_in_group) == 0) {
      /* Generic integral-factors upsampling method */
      upsample->methods[ci] = int_upsample;
 800f9bc:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800fa9c <jinit_upsampler+0x124>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f9c0:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
      upsample->methods[ci] = h2v2_upsample;
 800f9c4:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800faa0 <jinit_upsampler+0x128>
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800f9c8:	3574      	adds	r5, #116	; 0x74
 800f9ca:	eb05 0308 	add.w	r3, r5, r8
 800f9ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	dc01      	bgt.n	800f9d8 <jinit_upsampler+0x60>
	 (JDIMENSION) jround_up((long) cinfo->output_width,
				(long) cinfo->max_h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
    }
  }
}
 800f9d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f9d8:	68f8      	ldr	r0, [r7, #12]
 800f9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800f9dc:	f8d7 c008 	ldr.w	ip, [r7, #8]
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f9e0:	4343      	muls	r3, r0
 800f9e2:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800f9e6:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
		 cinfo->min_DCT_h_scaled_size;
 800f9ea:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800f9ee:	fb93 f3f0 	sdiv	r3, r3, r0
    v_out_group = cinfo->max_v_samp_factor;
 800f9f2:	e9d4 b04e 	ldrd	fp, r0, [r4, #312]	; 0x138
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
 800f9f6:	65b3      	str	r3, [r6, #88]	; 0x58
    if (! compptr->component_needed) {
 800f9f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9fa:	b932      	cbnz	r2, 800fa0a <jinit_upsampler+0x92>
      upsample->methods[ci] = noop_upsample;
 800f9fc:	4b24      	ldr	r3, [pc, #144]	; (800fa90 <jinit_upsampler+0x118>)
      upsample->methods[ci] = fullsize_upsample;
 800f9fe:	62b3      	str	r3, [r6, #40]	; 0x28
       ci++, compptr++) {
 800fa00:	3758      	adds	r7, #88	; 0x58
 800fa02:	3604      	adds	r6, #4
 800fa04:	f108 0801 	add.w	r8, r8, #1
 800fa08:	e7df      	b.n	800f9ca <jinit_upsampler+0x52>
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800fa0a:	fb0e f20c 	mul.w	r2, lr, ip
 800fa0e:	fb92 f1f1 	sdiv	r1, r2, r1
    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
 800fa12:	4559      	cmp	r1, fp
 800fa14:	d103      	bne.n	800fa1e <jinit_upsampler+0xa6>
 800fa16:	4283      	cmp	r3, r0
 800fa18:	d101      	bne.n	800fa1e <jinit_upsampler+0xa6>
      upsample->methods[ci] = fullsize_upsample;
 800fa1a:	4b1e      	ldr	r3, [pc, #120]	; (800fa94 <jinit_upsampler+0x11c>)
 800fa1c:	e7ef      	b.n	800f9fe <jinit_upsampler+0x86>
    } else if (h_in_group * 2 == h_out_group &&
 800fa1e:	ebbb 0f41 	cmp.w	fp, r1, lsl #1
 800fa22:	d119      	bne.n	800fa58 <jinit_upsampler+0xe0>
 800fa24:	4283      	cmp	r3, r0
 800fa26:	d111      	bne.n	800fa4c <jinit_upsampler+0xd4>
      upsample->methods[ci] = h2v1_upsample;
 800fa28:	4b1b      	ldr	r3, [pc, #108]	; (800fa98 <jinit_upsampler+0x120>)
 800fa2a:	62b3      	str	r3, [r6, #40]	; 0x28
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800fa2c:	6863      	ldr	r3, [r4, #4]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800fa2e:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 800fa32:	6f20      	ldr	r0, [r4, #112]	; 0x70
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800fa34:	f8d3 b008 	ldr.w	fp, [r3, #8]
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800fa38:	f007 f8f5 	bl	8016c26 <jround_up>
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800fa3c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800fa40:	4602      	mov	r2, r0
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800fa42:	2101      	movs	r1, #1
 800fa44:	4620      	mov	r0, r4
 800fa46:	47d8      	blx	fp
 800fa48:	6030      	str	r0, [r6, #0]
 800fa4a:	e7d9      	b.n	800fa00 <jinit_upsampler+0x88>
    } else if (h_in_group * 2 == h_out_group &&
 800fa4c:	ebb0 0f43 	cmp.w	r0, r3, lsl #1
 800fa50:	d102      	bne.n	800fa58 <jinit_upsampler+0xe0>
      upsample->methods[ci] = h2v2_upsample;
 800fa52:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
    if (need_buffer) {
 800fa56:	e7e9      	b.n	800fa2c <jinit_upsampler+0xb4>
    } else if ((h_out_group % h_in_group) == 0 &&
 800fa58:	fb9b f2f1 	sdiv	r2, fp, r1
 800fa5c:	fb01 b112 	mls	r1, r1, r2, fp
 800fa60:	b959      	cbnz	r1, 800fa7a <jinit_upsampler+0x102>
	       (v_out_group % v_in_group) == 0) {
 800fa62:	fb90 f1f3 	sdiv	r1, r0, r3
 800fa66:	fb03 0311 	mls	r3, r3, r1, r0
    } else if ((h_out_group % h_in_group) == 0 &&
 800fa6a:	b933      	cbnz	r3, 800fa7a <jinit_upsampler+0x102>
      upsample->methods[ci] = int_upsample;
 800fa6c:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
 800fa70:	f888 2000 	strb.w	r2, [r8]
      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
 800fa74:	f888 100a 	strb.w	r1, [r8, #10]
    if (need_buffer) {
 800fa78:	e7d8      	b.n	800fa2c <jinit_upsampler+0xb4>
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 800fa7a:	6823      	ldr	r3, [r4, #0]
 800fa7c:	2227      	movs	r2, #39	; 0x27
 800fa7e:	4620      	mov	r0, r4
 800fa80:	615a      	str	r2, [r3, #20]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	4798      	blx	r3
    if (need_buffer) {
 800fa86:	e7d1      	b.n	800fa2c <jinit_upsampler+0xb4>
 800fa88:	0800f7a1 	.word	0x0800f7a1
 800fa8c:	0800f7b1 	.word	0x0800f7b1
 800fa90:	0800f879 	.word	0x0800f879
 800fa94:	0800f875 	.word	0x0800f875
 800fa98:	0800f87f 	.word	0x0800f87f
 800fa9c:	0800f8b1 	.word	0x0800f8b1
 800faa0:	0800f925 	.word	0x0800f925

0800faa4 <output_message>:
 * not just not use this routine.
 */

METHODDEF(void)
output_message (j_common_ptr cinfo)
{
 800faa4:	b500      	push	{lr}
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);
 800faa6:	6803      	ldr	r3, [r0, #0]
{
 800faa8:	b0b3      	sub	sp, #204	; 0xcc
  (*cinfo->err->format_message) (cinfo, buffer);
 800faaa:	68db      	ldr	r3, [r3, #12]
 800faac:	4669      	mov	r1, sp
 800faae:	4798      	blx	r3
#else
  /* Send it to stderr, adding a newline */
//  fprintf(stderr, "%s\n", buffer);
//  printf( "%s\n", buffer);
#endif
}
 800fab0:	b033      	add	sp, #204	; 0xcc
 800fab2:	f85d fb04 	ldr.w	pc, [sp], #4

0800fab6 <emit_message>:
METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
  struct jpeg_error_mgr * err = cinfo->err;

  if (msg_level < 0) {
 800fab6:	2900      	cmp	r1, #0
{
 800fab8:	4603      	mov	r3, r0
 800faba:	b510      	push	{r4, lr}
  struct jpeg_error_mgr * err = cinfo->err;
 800fabc:	6804      	ldr	r4, [r0, #0]
  if (msg_level < 0) {
 800fabe:	da0b      	bge.n	800fad8 <emit_message+0x22>
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
 800fac0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800fac2:	b112      	cbz	r2, 800faca <emit_message+0x14>
 800fac4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800fac6:	2a02      	cmp	r2, #2
 800fac8:	dd02      	ble.n	800fad0 <emit_message+0x1a>
      (*err->output_message) (cinfo);
 800faca:	68a2      	ldr	r2, [r4, #8]
 800facc:	4618      	mov	r0, r3
 800face:	4790      	blx	r2
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
 800fad0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800fad2:	3301      	adds	r3, #1
 800fad4:	66e3      	str	r3, [r4, #108]	; 0x6c
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}
 800fad6:	bd10      	pop	{r4, pc}
    if (err->trace_level >= msg_level)
 800fad8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800fada:	428b      	cmp	r3, r1
 800fadc:	dbfb      	blt.n	800fad6 <emit_message+0x20>
      (*err->output_message) (cinfo);
 800fade:	68a3      	ldr	r3, [r4, #8]
}
 800fae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (*err->output_message) (cinfo);
 800fae4:	4718      	bx	r3

0800fae6 <reset_error_mgr>:
 */

METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
  cinfo->err->num_warnings = 0;
 800fae6:	6803      	ldr	r3, [r0, #0]
 800fae8:	2200      	movs	r2, #0
 800faea:	66da      	str	r2, [r3, #108]	; 0x6c
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
 800faec:	615a      	str	r2, [r3, #20]
}
 800faee:	4770      	bx	lr

0800faf0 <format_message>:
{
 800faf0:	4603      	mov	r3, r0
 800faf2:	4608      	mov	r0, r1
  struct jpeg_error_mgr * err = cinfo->err;
 800faf4:	681a      	ldr	r2, [r3, #0]
  int msg_code = err->msg_code;
 800faf6:	6953      	ldr	r3, [r2, #20]
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800faf8:	2b00      	cmp	r3, #0
{
 800fafa:	b530      	push	{r4, r5, lr}
 800fafc:	b087      	sub	sp, #28
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800fafe:	dd1f      	ble.n	800fb40 <format_message+0x50>
 800fb00:	6f51      	ldr	r1, [r2, #116]	; 0x74
 800fb02:	4299      	cmp	r1, r3
 800fb04:	db1c      	blt.n	800fb40 <format_message+0x50>
    msgtext = err->jpeg_message_table[msg_code];
 800fb06:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800fb08:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
  if (msgtext == NULL) {
 800fb0c:	b911      	cbnz	r1, 800fb14 <format_message+0x24>
    err->msg_parm.i[0] = msg_code;
 800fb0e:	6193      	str	r3, [r2, #24]
    msgtext = err->jpeg_message_table[0];
 800fb10:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800fb12:	6819      	ldr	r1, [r3, #0]
  msgptr = msgtext;
 800fb14:	460b      	mov	r3, r1
  while ((ch = *msgptr++) != '\0') {
 800fb16:	f813 4b01 	ldrb.w	r4, [r3], #1
 800fb1a:	b9fc      	cbnz	r4, 800fb5c <format_message+0x6c>
    sprintf(buffer, msgtext,
 800fb1c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800fb1e:	9305      	str	r3, [sp, #20]
 800fb20:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800fb22:	9304      	str	r3, [sp, #16]
 800fb24:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800fb26:	9303      	str	r3, [sp, #12]
 800fb28:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800fb2a:	9302      	str	r3, [sp, #8]
 800fb2c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800fb2e:	9301      	str	r3, [sp, #4]
 800fb30:	6a13      	ldr	r3, [r2, #32]
 800fb32:	9300      	str	r3, [sp, #0]
 800fb34:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
 800fb38:	f01a fe0e 	bl	802a758 <siprintf>
}
 800fb3c:	b007      	add	sp, #28
 800fb3e:	bd30      	pop	{r4, r5, pc}
  } else if (err->addon_message_table != NULL &&
 800fb40:	6f94      	ldr	r4, [r2, #120]	; 0x78
 800fb42:	2c00      	cmp	r4, #0
 800fb44:	d0e3      	beq.n	800fb0e <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800fb46:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
  } else if (err->addon_message_table != NULL &&
 800fb48:	4299      	cmp	r1, r3
 800fb4a:	dce0      	bgt.n	800fb0e <format_message+0x1e>
	     msg_code >= err->first_addon_message &&
 800fb4c:	f8d2 5080 	ldr.w	r5, [r2, #128]	; 0x80
 800fb50:	429d      	cmp	r5, r3
 800fb52:	dbdc      	blt.n	800fb0e <format_message+0x1e>
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
 800fb54:	1a59      	subs	r1, r3, r1
 800fb56:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800fb5a:	e7d7      	b.n	800fb0c <format_message+0x1c>
    if (ch == '%') {
 800fb5c:	2c25      	cmp	r4, #37	; 0x25
 800fb5e:	d1da      	bne.n	800fb16 <format_message+0x26>
      if (*msgptr == 's') isstring = TRUE;
 800fb60:	781b      	ldrb	r3, [r3, #0]
 800fb62:	2b73      	cmp	r3, #115	; 0x73
 800fb64:	d1da      	bne.n	800fb1c <format_message+0x2c>
    sprintf(buffer, msgtext, err->msg_parm.s);
 800fb66:	3218      	adds	r2, #24
}
 800fb68:	b007      	add	sp, #28
 800fb6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    sprintf(buffer, msgtext, err->msg_parm.s);
 800fb6e:	f01a bdf3 	b.w	802a758 <siprintf>

0800fb72 <error_exit>:
  (*cinfo->err->output_message) (cinfo);
 800fb72:	6803      	ldr	r3, [r0, #0]
{
 800fb74:	b510      	push	{r4, lr}
 800fb76:	4604      	mov	r4, r0
  (*cinfo->err->output_message) (cinfo);
 800fb78:	689b      	ldr	r3, [r3, #8]
 800fb7a:	4798      	blx	r3
  jpeg_destroy(cinfo);
 800fb7c:	4620      	mov	r0, r4
}
 800fb7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_destroy(cinfo);
 800fb82:	f7f9 bef3 	b.w	800996c <jpeg_destroy>
	...

0800fb88 <jpeg_std_error>:
 */

GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
  err->error_exit = error_exit;
 800fb88:	4a0a      	ldr	r2, [pc, #40]	; (800fbb4 <jpeg_std_error+0x2c>)
  err->trace_level = 0;		/* default = no tracing */
  err->num_warnings = 0;	/* no warnings emitted yet */
  err->msg_code = 0;		/* may be useful as a flag for "no error" */

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_std_message_table;
 800fb8a:	490b      	ldr	r1, [pc, #44]	; (800fbb8 <jpeg_std_error+0x30>)
  err->error_exit = error_exit;
 800fb8c:	6002      	str	r2, [r0, #0]
  err->emit_message = emit_message;
 800fb8e:	4a0b      	ldr	r2, [pc, #44]	; (800fbbc <jpeg_std_error+0x34>)
  err->jpeg_message_table = jpeg_std_message_table;
 800fb90:	6701      	str	r1, [r0, #112]	; 0x70
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
 800fb92:	217e      	movs	r1, #126	; 0x7e
  err->emit_message = emit_message;
 800fb94:	6042      	str	r2, [r0, #4]
  err->output_message = output_message;
 800fb96:	4a0a      	ldr	r2, [pc, #40]	; (800fbc0 <jpeg_std_error+0x38>)
 800fb98:	6082      	str	r2, [r0, #8]
  err->format_message = format_message;
 800fb9a:	4a0a      	ldr	r2, [pc, #40]	; (800fbc4 <jpeg_std_error+0x3c>)
 800fb9c:	60c2      	str	r2, [r0, #12]
  err->reset_error_mgr = reset_error_mgr;
 800fb9e:	4a0a      	ldr	r2, [pc, #40]	; (800fbc8 <jpeg_std_error+0x40>)
 800fba0:	6102      	str	r2, [r0, #16]
  err->trace_level = 0;		/* default = no tracing */
 800fba2:	2200      	movs	r2, #0
  err->num_warnings = 0;	/* no warnings emitted yet */
 800fba4:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
  err->msg_code = 0;		/* may be useful as a flag for "no error" */
 800fba8:	6142      	str	r2, [r0, #20]

  err->addon_message_table = NULL;
 800fbaa:	e9c0 121d 	strd	r1, r2, [r0, #116]	; 0x74
  err->first_addon_message = 0;	/* for safety */
  err->last_addon_message = 0;
 800fbae:	e9c0 221f 	strd	r2, r2, [r0, #124]	; 0x7c

  return err;
}
 800fbb2:	4770      	bx	lr
 800fbb4:	0800fb73 	.word	0x0800fb73
 800fbb8:	0802f064 	.word	0x0802f064
 800fbbc:	0800fab7 	.word	0x0800fab7
 800fbc0:	0800faa5 	.word	0x0800faa5
 800fbc4:	0800faf1 	.word	0x0800faf1
 800fbc8:	0800fae7 	.word	0x0800fae7

0800fbcc <jpeg_idct_float>:

GLOBAL(void)
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800fbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800fbd0:	f8d1 c054 	ldr.w	ip, [r1, #84]	; 0x54
{
 800fbd4:	b0c1      	sub	sp, #260	; 0x104
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 800fbd6:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800fbda:	3a02      	subs	r2, #2
 800fbdc:	f10c 0a20 	add.w	sl, ip, #32
  wsptr = workspace;
 800fbe0:	466c      	mov	r4, sp

    tmp10 = tmp0 + tmp2;	/* phase 3 */
    tmp11 = tmp0 - tmp2;

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800fbe2:	eddf 4abd 	vldr	s9, [pc, #756]	; 800fed8 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;		/* phase 5 */
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fbe6:	eddf 3abd 	vldr	s7, [pc, #756]	; 800fedc <jpeg_idct_float+0x310>
 800fbea:	ed9f 4abd 	vldr	s8, [pc, #756]	; 800fee0 <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fbee:	ed9f 3abd 	vldr	s6, [pc, #756]	; 800fee4 <jpeg_idct_float+0x318>
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800fbf2:	f9b2 e012 	ldrsh.w	lr, [r2, #18]
 800fbf6:	3404      	adds	r4, #4
 800fbf8:	f9b2 9022 	ldrsh.w	r9, [r2, #34]	; 0x22
 800fbfc:	f9b2 8032 	ldrsh.w	r8, [r2, #50]	; 0x32
 800fc00:	f9b2 7042 	ldrsh.w	r7, [r2, #66]	; 0x42
 800fc04:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800fc08:	f9b2 5062 	ldrsh.w	r5, [r2, #98]	; 0x62
 800fc0c:	f9b2 0072 	ldrsh.w	r0, [r2, #114]	; 0x72
 800fc10:	f932 bf02 	ldrsh.w	fp, [r2, #2]!
 800fc14:	ecbc 7a01 	vldmia	ip!, {s14}
 800fc18:	ee07 ba90 	vmov	s15, fp
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fc1c:	ea4e 0b09 	orr.w	fp, lr, r9
 800fc20:	ea48 0b0b 	orr.w	fp, r8, fp
 800fc24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc28:	ea47 0b0b 	orr.w	fp, r7, fp
 800fc2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fc30:	ea41 0b0b 	orr.w	fp, r1, fp
 800fc34:	ea45 0b0b 	orr.w	fp, r5, fp
 800fc38:	ea50 0b0b 	orrs.w	fp, r0, fp
 800fc3c:	f040 80bf 	bne.w	800fdbe <jpeg_idct_float+0x1f2>
      wsptr[DCTSIZE*0] = dcval;
 800fc40:	ed44 7a01 	vstr	s15, [r4, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800fc44:	edc4 7a07 	vstr	s15, [r4, #28]
      wsptr[DCTSIZE*2] = dcval;
 800fc48:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800fc4c:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800fc50:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800fc54:	edc4 7a27 	vstr	s15, [r4, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800fc58:	edc4 7a2f 	vstr	s15, [r4, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800fc5c:	edc4 7a37 	vstr	s15, [r4, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800fc60:	45e2      	cmp	sl, ip
 800fc62:	d1c6      	bne.n	800fbf2 <jpeg_idct_float+0x26>
 800fc64:	1f1c      	subs	r4, r3, #4
    wsptr++;
  }
  
  /* Pass 2: process rows from work array, store into output array. */

  wsptr = workspace;
 800fc66:	4669      	mov	r1, sp
 800fc68:	331c      	adds	r3, #28
     */
    
    /* Even part */

    /* Apply signed->unsigned and prepare float->int conversion */
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800fc6a:	eddf 2a9f 	vldr	s5, [pc, #636]	; 800fee8 <jpeg_idct_float+0x31c>
    tmp10 = z5 + wsptr[4];
    tmp11 = z5 - wsptr[4];

    tmp13 = wsptr[2] + wsptr[6];
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800fc6e:	eddf 4a9a 	vldr	s9, [pc, #616]	; 800fed8 <jpeg_idct_float+0x30c>

    tmp7 = z11 + z13;
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fc72:	ed9f 3a9a 	vldr	s6, [pc, #616]	; 800fedc <jpeg_idct_float+0x310>
 800fc76:	ed9f 4a9a 	vldr	s8, [pc, #616]	; 800fee0 <jpeg_idct_float+0x314>
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fc7a:	eddf 3a9a 	vldr	s7, [pc, #616]	; 800fee4 <jpeg_idct_float+0x318>
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800fc7e:	edd1 5a00 	vldr	s11, [r1]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800fc82:	3120      	adds	r1, #32
    tmp10 = z5 + wsptr[4];
 800fc84:	ed51 7a04 	vldr	s15, [r1, #-16]
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800fc88:	ee75 5aa2 	vadd.f32	s11, s11, s5
    tmp13 = wsptr[2] + wsptr[6];
 800fc8c:	ed51 6a02 	vldr	s13, [r1, #-8]
    outptr = output_buf[ctr] + output_col;
 800fc90:	f854 5f04 	ldr.w	r5, [r4, #4]!
 800fc94:	9a4a      	ldr	r2, [sp, #296]	; 0x128
    tmp10 = z5 + wsptr[4];
 800fc96:	ee37 5aa5 	vadd.f32	s10, s15, s11
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800fc9a:	9f4a      	ldr	r7, [sp, #296]	; 0x128
    tmp11 = z5 - wsptr[4];
 800fc9c:	ee75 5ae7 	vsub.f32	s11, s11, s15
    tmp13 = wsptr[2] + wsptr[6];
 800fca0:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
    outptr = output_buf[ctr] + output_col;
 800fca4:	18a8      	adds	r0, r5, r2
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800fca6:	42a3      	cmp	r3, r4
    tmp13 = wsptr[2] + wsptr[6];
 800fca8:	ee37 7aa6 	vadd.f32	s14, s15, s13
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800fcac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fcb0:	eef0 6a47 	vmov.f32	s13, s14
    tmp0 = tmp10 + tmp13;
 800fcb4:	ee35 6a07 	vadd.f32	s12, s10, s14
    tmp3 = tmp10 - tmp13;
 800fcb8:	ee35 5a47 	vsub.f32	s10, s10, s14
    z13 = wsptr[5] + wsptr[3];
 800fcbc:	ed11 7a03 	vldr	s14, [r1, #-12]
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800fcc0:	eed7 6aa4 	vfnms.f32	s13, s15, s9
    z13 = wsptr[5] + wsptr[3];
 800fcc4:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 800fcc8:	ee37 1a27 	vadd.f32	s2, s14, s15
    z10 = wsptr[5] - wsptr[3];
 800fccc:	ee37 7a67 	vsub.f32	s14, s14, s15
    z11 = wsptr[1] + wsptr[7];
 800fcd0:	ed51 7a01 	vldr	s15, [r1, #-4]
    tmp1 = tmp11 + tmp12;
 800fcd4:	ee75 1aa6 	vadd.f32	s3, s11, s13
    tmp2 = tmp11 - tmp12;
 800fcd8:	ee75 5ae6 	vsub.f32	s11, s11, s13
    z11 = wsptr[1] + wsptr[7];
 800fcdc:	ed51 6a07 	vldr	s13, [r1, #-28]	; 0xffffffe4
 800fce0:	ee36 2aa7 	vadd.f32	s4, s13, s15
    z12 = wsptr[1] - wsptr[7];
 800fce4:	ee76 6ae7 	vsub.f32	s13, s13, s15
    tmp7 = z11 + z13;
 800fce8:	ee71 0a02 	vadd.f32	s1, s2, s4
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800fcec:	ee77 7a26 	vadd.f32	s15, s14, s13
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fcf0:	ee23 7ac7 	vnmul.f32	s14, s7, s14
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fcf4:	ee63 6a66 	vnmul.f32	s13, s6, s13
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);
 800fcf8:	ee32 2a41 	vsub.f32	s4, s4, s2
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fcfc:	eea7 7a84 	vfma.f32	s14, s15, s8
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fd00:	eee7 6a84 	vfma.f32	s13, s15, s8
    tmp6 = tmp12 - tmp7;
 800fd04:	ee77 7a60 	vsub.f32	s15, s14, s1
    tmp5 = tmp11 - tmp6;
 800fd08:	eeb0 1a67 	vmov.f32	s2, s15
 800fd0c:	ee92 1a24 	vfnms.f32	s2, s4, s9
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800fd10:	ee36 2a20 	vadd.f32	s4, s12, s1
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fd14:	ee36 6a60 	vsub.f32	s12, s12, s1
    tmp4 = tmp10 - tmp5;
 800fd18:	ee36 7ac1 	vsub.f32	s14, s13, s2
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800fd1c:	eefd 6ac2 	vcvt.s32.f32	s13, s4
 800fd20:	ee16 2a90 	vmov	r2, s13
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fd24:	eefd 6ac6 	vcvt.s32.f32	s13, s12
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800fd28:	ee31 6aa7 	vadd.f32	s12, s3, s15
    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800fd2c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800fd30:	5cb2      	ldrb	r2, [r6, r2]
 800fd32:	55ea      	strb	r2, [r5, r7]
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fd34:	ee16 2a90 	vmov	r2, s13
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800fd38:	eefd 6ac6 	vcvt.s32.f32	s13, s12
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800fd3c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800fd40:	5cb2      	ldrb	r2, [r6, r2]
 800fd42:	71c2      	strb	r2, [r0, #7]
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800fd44:	ee16 2a90 	vmov	r2, s13
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800fd48:	ee71 6ae7 	vsub.f32	s13, s3, s15
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800fd4c:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800fd50:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800fd54:	5cb2      	ldrb	r2, [r6, r2]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800fd56:	ee75 6a81 	vadd.f32	s13, s11, s2
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800fd5a:	7042      	strb	r2, [r0, #1]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800fd5c:	ee17 2a90 	vmov	r2, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800fd60:	eefd 7ae6 	vcvt.s32.f32	s15, s13
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800fd64:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800fd68:	5cb2      	ldrb	r2, [r6, r2]
 800fd6a:	7182      	strb	r2, [r0, #6]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800fd6c:	ee17 2a90 	vmov	r2, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800fd70:	ee75 7ac1 	vsub.f32	s15, s11, s2
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800fd74:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800fd78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800fd7c:	5cb2      	ldrb	r2, [r6, r2]
 800fd7e:	7082      	strb	r2, [r0, #2]
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800fd80:	ee17 2a90 	vmov	r2, s15
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800fd84:	ee75 7a07 	vadd.f32	s15, s10, s14
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800fd88:	ee35 7a47 	vsub.f32	s14, s10, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800fd8c:	f3c2 0209 	ubfx	r2, r2, #0, #10
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800fd90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800fd94:	5cb2      	ldrb	r2, [r6, r2]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800fd96:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800fd9a:	7142      	strb	r2, [r0, #5]
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800fd9c:	ee17 2a90 	vmov	r2, s15
 800fda0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800fda4:	5cb2      	ldrb	r2, [r6, r2]
 800fda6:	70c2      	strb	r2, [r0, #3]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800fda8:	ee17 2a10 	vmov	r2, s14
 800fdac:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800fdb0:	5cb2      	ldrb	r2, [r6, r2]
 800fdb2:	7102      	strb	r2, [r0, #4]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800fdb4:	f47f af63 	bne.w	800fc7e <jpeg_idct_float+0xb2>
  }
}
 800fdb8:	b041      	add	sp, #260	; 0x104
 800fdba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fdbe:	ee06 5a90 	vmov	s13, r5
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fdc2:	ee07 9a10 	vmov	s14, r9
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fdc6:	eddc 2a2f 	vldr	s5, [ip, #188]	; 0xbc
 800fdca:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800fdce:	ed9c 5a0f 	vldr	s10, [ip, #60]	; 0x3c
 800fdd2:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fdd6:	ee07 7a10 	vmov	s14, r7
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800fdda:	ed9c 1a37 	vldr	s2, [ip, #220]	; 0xdc
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800fdde:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800fde2:	ed9c 7a1f 	vldr	s14, [ip, #124]	; 0x7c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800fde6:	ee66 6aa2 	vmul.f32	s13, s13, s5
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fdea:	eddc 0a07 	vldr	s1, [ip, #28]
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800fdee:	eef0 2a67 	vmov.f32	s5, s15
    tmp11 = tmp0 - tmp2;
 800fdf2:	eee5 7ac7 	vfms.f32	s15, s11, s14
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800fdf6:	eee5 2a87 	vfma.f32	s5, s11, s14
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800fdfa:	eeb0 7a66 	vmov.f32	s14, s13
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800fdfe:	eed6 6a05 	vfnms.f32	s13, s12, s10
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800fe02:	eea6 7a05 	vfma.f32	s14, s12, s10
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800fe06:	eeb0 6a47 	vmov.f32	s12, s14
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 800fe0a:	ee72 1a87 	vadd.f32	s3, s5, s14
    tmp3 = tmp10 - tmp13;
 800fe0e:	ee72 2ac7 	vsub.f32	s5, s5, s14
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fe12:	ee07 1a10 	vmov	s14, r1
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800fe16:	ee96 6aa4 	vfnms.f32	s12, s13, s9
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800fe1a:	eddc 6a27 	vldr	s13, [ip, #156]	; 0x9c
 800fe1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fe22:	ee27 7a26 	vmul.f32	s14, s14, s13
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800fe26:	ee06 0a90 	vmov	s13, r0
    tmp1 = tmp11 + tmp12;
 800fe2a:	ee37 2a86 	vadd.f32	s4, s15, s12
    tmp2 = tmp11 - tmp12;
 800fe2e:	ee37 6ac6 	vsub.f32	s12, s15, s12
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fe32:	ee07 ea90 	vmov	s15, lr
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800fe36:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800fe3a:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fe3e:	ee07 8a90 	vmov	s15, r8
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800fe42:	ee66 6a81 	vmul.f32	s13, s13, s2
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800fe46:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800fe4a:	eddc 7a17 	vldr	s15, [ip, #92]	; 0x5c
    z13 = tmp6 + tmp5;		/* phase 6 */
 800fe4e:	eeb0 1a47 	vmov.f32	s2, s14
    z10 = tmp6 - tmp5;
 800fe52:	eea5 7a67 	vfms.f32	s14, s10, s15
    z13 = tmp6 + tmp5;		/* phase 6 */
 800fe56:	eea5 1a27 	vfma.f32	s2, s10, s15
    z11 = tmp4 + tmp7;
 800fe5a:	eef0 7a66 	vmov.f32	s15, s13
    z12 = tmp4 - tmp7;
 800fe5e:	eed5 6aa0 	vfnms.f32	s13, s11, s1
    z11 = tmp4 + tmp7;
 800fe62:	eee5 7aa0 	vfma.f32	s15, s11, s1
    tmp7 = z11 + z13;		/* phase 5 */
 800fe66:	ee31 5a27 	vadd.f32	s10, s2, s15
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */
 800fe6a:	ee77 5ac1 	vsub.f32	s11, s15, s2
    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800fe6e:	ee77 7a26 	vadd.f32	s15, s14, s13
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fe72:	ee23 7a47 	vnmul.f32	s14, s6, s14
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fe76:	ee63 6ae6 	vnmul.f32	s13, s7, s13
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800fe7a:	eea7 7a84 	vfma.f32	s14, s15, s8
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800fe7e:	eee7 6a84 	vfma.f32	s13, s15, s8
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800fe82:	ee77 7a45 	vsub.f32	s15, s14, s10
    tmp5 = tmp11 - tmp6;
 800fe86:	eeb0 7a67 	vmov.f32	s14, s15
 800fe8a:	ee95 7aa4 	vfnms.f32	s14, s11, s9
 800fe8e:	eef0 5a47 	vmov.f32	s11, s14
    tmp4 = tmp10 - tmp5;
 800fe92:	ee36 7ac7 	vsub.f32	s14, s13, s14
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 800fe96:	ee71 6a85 	vadd.f32	s13, s3, s10
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 800fe9a:	ee71 1ac5 	vsub.f32	s3, s3, s10
    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 800fe9e:	ed44 6a01 	vstr	s13, [r4, #-4]
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 800fea2:	ee72 6a27 	vadd.f32	s13, s4, s15
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 800fea6:	ee72 7a67 	vsub.f32	s15, s4, s15
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 800feaa:	edc4 1a37 	vstr	s3, [r4, #220]	; 0xdc
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 800feae:	edc4 6a07 	vstr	s13, [r4, #28]
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 800feb2:	edc4 7a2f 	vstr	s15, [r4, #188]	; 0xbc
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 800feb6:	ee76 7a25 	vadd.f32	s15, s12, s11
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 800feba:	ee36 6a65 	vsub.f32	s12, s12, s11
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 800febe:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 800fec2:	ee72 7a87 	vadd.f32	s15, s5, s14
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 800fec6:	ee32 7ac7 	vsub.f32	s14, s5, s14
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 800feca:	ed84 6a27 	vstr	s12, [r4, #156]	; 0x9c
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 800fece:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 800fed2:	ed84 7a1f 	vstr	s14, [r4, #124]	; 0x7c
    wsptr++;
 800fed6:	e6c3      	b.n	800fc60 <jpeg_idct_float+0x94>
 800fed8:	3fb504f3 	.word	0x3fb504f3
 800fedc:	3f8a8bd4 	.word	0x3f8a8bd4
 800fee0:	3fec835e 	.word	0x3fec835e
 800fee4:	40273d75 	.word	0x40273d75
 800fee8:	43008000 	.word	0x43008000

0800feec <jpeg_idct_ifast>:

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800feec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fef0:	b0c5      	sub	sp, #276	; 0x114
  ISHIFT_TEMPS			/* for IDESCALE */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
 800fef2:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 800fef4:	3a02      	subs	r2, #2
{
 800fef6:	9302      	str	r3, [sp, #8]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fef8:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800fefc:	f103 0880 	add.w	r8, r3, #128	; 0x80
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800ff00:	f105 0320 	add.w	r3, r5, #32
 800ff04:	9303      	str	r3, [sp, #12]
  wsptr = workspace;
 800ff06:	ab04      	add	r3, sp, #16
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800ff08:	f9b2 0012 	ldrsh.w	r0, [r2, #18]
 800ff0c:	3304      	adds	r3, #4
 800ff0e:	f9b2 c022 	ldrsh.w	ip, [r2, #34]	; 0x22
 800ff12:	f9b2 6032 	ldrsh.w	r6, [r2, #50]	; 0x32
 800ff16:	f9b2 a042 	ldrsh.w	sl, [r2, #66]	; 0x42
 800ff1a:	f9b2 1052 	ldrsh.w	r1, [r2, #82]	; 0x52
 800ff1e:	f9b2 9062 	ldrsh.w	r9, [r2, #98]	; 0x62
 800ff22:	f9b2 e072 	ldrsh.w	lr, [r2, #114]	; 0x72
 800ff26:	f855 7b04 	ldr.w	r7, [r5], #4
 800ff2a:	f932 4f02 	ldrsh.w	r4, [r2, #2]!
 800ff2e:	437c      	muls	r4, r7
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800ff30:	ea40 070c 	orr.w	r7, r0, ip
 800ff34:	4337      	orrs	r7, r6
 800ff36:	ea4a 0707 	orr.w	r7, sl, r7
 800ff3a:	430f      	orrs	r7, r1
 800ff3c:	ea49 0707 	orr.w	r7, r9, r7
 800ff40:	ea5e 0707 	orrs.w	r7, lr, r7
 800ff44:	d147      	bne.n	800ffd6 <jpeg_idct_ifast+0xea>
	inptr[DCTSIZE*7] == 0) {
      /* AC terms all zero */
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);

      wsptr[DCTSIZE*0] = dcval;
 800ff46:	f843 4c04 	str.w	r4, [r3, #-4]
      wsptr[DCTSIZE*1] = dcval;
 800ff4a:	61dc      	str	r4, [r3, #28]
      wsptr[DCTSIZE*2] = dcval;
 800ff4c:	63dc      	str	r4, [r3, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 800ff4e:	65dc      	str	r4, [r3, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 800ff50:	67dc      	str	r4, [r3, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 800ff52:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 800ff56:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 800ff5a:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800ff5e:	9903      	ldr	r1, [sp, #12]
 800ff60:	42a9      	cmp	r1, r5
 800ff62:	d1d1      	bne.n	800ff08 <jpeg_idct_ifast+0x1c>
 800ff64:	9b02      	ldr	r3, [sp, #8]
 800ff66:	f1a3 0b04 	sub.w	fp, r3, #4
 800ff6a:	331c      	adds	r3, #28
 800ff6c:	9303      	str	r3, [sp, #12]
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 800ff6e:	ab04      	add	r3, sp, #16
 800ff70:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 800ff72:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 800ff74:	f85b af04 	ldr.w	sl, [fp, #4]!
 800ff78:	9a01      	ldr	r2, [sp, #4]
 800ff7a:	eb0a 0003 	add.w	r0, sl, r3
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800ff7e:	9b01      	ldr	r3, [sp, #4]
 800ff80:	9d01      	ldr	r5, [sp, #4]
 800ff82:	e9d3 e101 	ldrd	lr, r1, [r3, #4]
 800ff86:	68db      	ldr	r3, [r3, #12]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800ff88:	ea4e 0701 	orr.w	r7, lr, r1
 800ff8c:	f855 6b20 	ldr.w	r6, [r5], #32
 800ff90:	e9d2 9404 	ldrd	r9, r4, [r2, #16]
 800ff94:	431f      	orrs	r7, r3
 800ff96:	9501      	str	r5, [sp, #4]
 800ff98:	ea47 0709 	orr.w	r7, r7, r9
 800ff9c:	e9d2 c206 	ldrd	ip, r2, [r2, #24]
 800ffa0:	4327      	orrs	r7, r4
 800ffa2:	ea47 070c 	orr.w	r7, r7, ip
 800ffa6:	ea57 0502 	orrs.w	r5, r7, r2
 800ffaa:	f040 8081 	bne.w	80100b0 <jpeg_idct_ifast+0x1c4>
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
				  & RANGE_MASK];
 800ffae:	f3c6 1949 	ubfx	r9, r6, #5, #10
      
      outptr[0] = dcval;
 800ffb2:	9a4e      	ldr	r2, [sp, #312]	; 0x138
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800ffb4:	f818 3009 	ldrb.w	r3, [r8, r9]
      outptr[0] = dcval;
 800ffb8:	f80a 3002 	strb.w	r3, [sl, r2]
      outptr[1] = dcval;
 800ffbc:	7043      	strb	r3, [r0, #1]
      outptr[2] = dcval;
 800ffbe:	7083      	strb	r3, [r0, #2]
      outptr[3] = dcval;
 800ffc0:	70c3      	strb	r3, [r0, #3]
      outptr[4] = dcval;
 800ffc2:	7103      	strb	r3, [r0, #4]
      outptr[5] = dcval;
 800ffc4:	7143      	strb	r3, [r0, #5]
      outptr[6] = dcval;
 800ffc6:	7183      	strb	r3, [r0, #6]
      outptr[7] = dcval;
 800ffc8:	71c3      	strb	r3, [r0, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800ffca:	9b03      	ldr	r3, [sp, #12]
 800ffcc:	455b      	cmp	r3, fp
 800ffce:	d1d0      	bne.n	800ff72 <jpeg_idct_ifast+0x86>
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 800ffd0:	b045      	add	sp, #276	; 0x114
 800ffd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800ffd6:	6bef      	ldr	r7, [r5, #60]	; 0x3c
 800ffd8:	fb07 fc0c 	mul.w	ip, r7, ip
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800ffdc:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 800ffde:	fb07 fa0a 	mul.w	sl, r7, sl
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800ffe2:	f8d5 70bc 	ldr.w	r7, [r5, #188]	; 0xbc
 800ffe6:	fb07 f709 	mul.w	r7, r7, r9
    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800ffea:	eb0a 0b04 	add.w	fp, sl, r4
    tmp11 = tmp0 - tmp2;
 800ffee:	eba4 040a 	sub.w	r4, r4, sl
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800fff2:	ebac 0907 	sub.w	r9, ip, r7
    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800fff6:	eb0c 0a07 	add.w	sl, ip, r7
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800fffa:	f44f 77b5 	mov.w	r7, #362	; 0x16a
    tmp0 = tmp10 + tmp13;	/* phase 2 */
 800fffe:	eb0b 0c0a 	add.w	ip, fp, sl
    tmp3 = tmp10 - tmp13;
 8010002:	ebab 0b0a 	sub.w	fp, fp, sl
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 8010006:	fb07 f909 	mul.w	r9, r7, r9
 801000a:	ebca 2929 	rsb	r9, sl, r9, asr #8
    tmp1 = tmp11 + tmp12;
 801000e:	eb04 0709 	add.w	r7, r4, r9
    tmp2 = tmp11 - tmp12;
 8010012:	eba4 0409 	sub.w	r4, r4, r9
 8010016:	9401      	str	r4, [sp, #4]
    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010018:	69ec      	ldr	r4, [r5, #28]
 801001a:	fb04 f900 	mul.w	r9, r4, r0
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801001e:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 8010020:	f240 14d9 	movw	r4, #473	; 0x1d9
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010024:	4346      	muls	r6, r0
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010026:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
 801002a:	4341      	muls	r1, r0
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801002c:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
 8010030:	fb00 f00e 	mul.w	r0, r0, lr
    z13 = tmp6 + tmp5;		/* phase 6 */
 8010034:	eb06 0a01 	add.w	sl, r6, r1
    z10 = tmp6 - tmp5;
 8010038:	1b8e      	subs	r6, r1, r6
    z11 = tmp4 + tmp7;
 801003a:	eb09 0e00 	add.w	lr, r9, r0
    z12 = tmp4 - tmp7;
 801003e:	eba9 0000 	sub.w	r0, r9, r0
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 8010042:	1831      	adds	r1, r6, r0
    tmp7 = z11 + z13;		/* phase 5 */
 8010044:	eb0a 090e 	add.w	r9, sl, lr
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 8010048:	ebae 0a0a 	sub.w	sl, lr, sl
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 801004c:	4361      	muls	r1, r4
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 801004e:	f46f 7427 	mvn.w	r4, #668	; 0x29c
 8010052:	4366      	muls	r6, r4
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 8010054:	f44f 74b5 	mov.w	r4, #362	; 0x16a
 8010058:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 801005c:	f240 1415 	movw	r4, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8010060:	1236      	asrs	r6, r6, #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010062:	4360      	muls	r0, r4
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8010064:	eb06 2621 	add.w	r6, r6, r1, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010068:	1200      	asrs	r0, r0, #8
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 801006a:	eba6 0609 	sub.w	r6, r6, r9
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 801006e:	eba0 2121 	sub.w	r1, r0, r1, asr #8
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 8010072:	eb0c 0009 	add.w	r0, ip, r9
    tmp5 = tmp11 - tmp6;
 8010076:	ebc6 2a2a 	rsb	sl, r6, sl, asr #8
    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 801007a:	f843 0c04 	str.w	r0, [r3, #-4]
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 801007e:	ebac 0009 	sub.w	r0, ip, r9
    tmp4 = tmp10 + tmp5;
 8010082:	4451      	add	r1, sl
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 8010084:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 8010088:	19b8      	adds	r0, r7, r6
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 801008a:	1bbf      	subs	r7, r7, r6
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 801008c:	61d8      	str	r0, [r3, #28]
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 801008e:	9801      	ldr	r0, [sp, #4]
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 8010090:	f8c3 70bc 	str.w	r7, [r3, #188]	; 0xbc
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 8010094:	4450      	add	r0, sl
 8010096:	63d8      	str	r0, [r3, #60]	; 0x3c
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 8010098:	9801      	ldr	r0, [sp, #4]
 801009a:	eba0 040a 	sub.w	r4, r0, sl
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 801009e:	eb0b 0001 	add.w	r0, fp, r1
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 80100a2:	ebab 0101 	sub.w	r1, fp, r1
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 80100a6:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 80100aa:	67d8      	str	r0, [r3, #124]	; 0x7c
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 80100ac:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr++;
 80100ae:	e756      	b.n	800ff5e <jpeg_idct_ifast+0x72>
    tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
 80100b0:	eb09 0706 	add.w	r7, r9, r6
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 80100b4:	f44f 75b5 	mov.w	r5, #362	; 0x16a
    tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
 80100b8:	eba6 0909 	sub.w	r9, r6, r9
    tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
 80100bc:	eb01 060c 	add.w	r6, r1, ip
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 80100c0:	eba1 010c 	sub.w	r1, r1, ip
    tmp0 = tmp10 + tmp13;
 80100c4:	eb07 0c06 	add.w	ip, r7, r6
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 80100c8:	4369      	muls	r1, r5
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 80100ca:	191d      	adds	r5, r3, r4
    z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
 80100cc:	1ae3      	subs	r3, r4, r3
    z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
 80100ce:	eb0e 0402 	add.w	r4, lr, r2
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 80100d2:	ebc6 2121 	rsb	r1, r6, r1, asr #8
    z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
 80100d6:	ebae 0202 	sub.w	r2, lr, r2
    tmp3 = tmp10 - tmp13;
 80100da:	1bbe      	subs	r6, r7, r6
    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 80100dc:	9502      	str	r5, [sp, #8]
    tmp1 = tmp11 + tmp12;
 80100de:	eb09 0701 	add.w	r7, r9, r1
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 80100e2:	eb03 0e02 	add.w	lr, r3, r2
    tmp2 = tmp11 - tmp12;
 80100e6:	eba9 0101 	sub.w	r1, r9, r1
    tmp7 = z11 + z13;		/* phase 5 */
 80100ea:	eb05 0904 	add.w	r9, r5, r4
    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 80100ee:	f240 15d9 	movw	r5, #473	; 0x1d9
 80100f2:	fb05 fe0e 	mul.w	lr, r5, lr
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 80100f6:	f46f 7527 	mvn.w	r5, #668	; 0x29c
 80100fa:	436b      	muls	r3, r5
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 80100fc:	9d02      	ldr	r5, [sp, #8]
 80100fe:	1b64      	subs	r4, r4, r5
 8010100:	f44f 75b5 	mov.w	r5, #362	; 0x16a
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 8010104:	121b      	asrs	r3, r3, #8
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 8010106:	436c      	muls	r4, r5
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010108:	f240 1515 	movw	r5, #277	; 0x115
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 801010c:	eb03 232e 	add.w	r3, r3, lr, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010110:	436a      	muls	r2, r5
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 8010112:	9d4e      	ldr	r5, [sp, #312]	; 0x138
    tmp6 = tmp12 - tmp7;	/* phase 2 */
 8010114:	eba3 0309 	sub.w	r3, r3, r9
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 8010118:	1212      	asrs	r2, r2, #8
    tmp5 = tmp11 - tmp6;
 801011a:	ebc3 2424 	rsb	r4, r3, r4, asr #8
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 801011e:	eba2 2e2e 	sub.w	lr, r2, lr, asr #8
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 8010122:	eb0c 0209 	add.w	r2, ip, r9
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 8010126:	ebac 0c09 	sub.w	ip, ip, r9
			    & RANGE_MASK];
 801012a:	f3c2 1249 	ubfx	r2, r2, #5, #10
    tmp4 = tmp10 + tmp5;
 801012e:	44a6      	add	lr, r4
			    & RANGE_MASK];
 8010130:	f3cc 1c49 	ubfx	ip, ip, #5, #10
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 8010134:	f818 2002 	ldrb.w	r2, [r8, r2]
 8010138:	f80a 2005 	strb.w	r2, [sl, r5]
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 801013c:	f818 200c 	ldrb.w	r2, [r8, ip]
 8010140:	71c2      	strb	r2, [r0, #7]
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 8010142:	18fa      	adds	r2, r7, r3
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 8010144:	1afb      	subs	r3, r7, r3
			    & RANGE_MASK];
 8010146:	f3c2 1249 	ubfx	r2, r2, #5, #10
			    & RANGE_MASK];
 801014a:	f3c3 1349 	ubfx	r3, r3, #5, #10
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 801014e:	f818 2002 	ldrb.w	r2, [r8, r2]
 8010152:	7042      	strb	r2, [r0, #1]
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 8010154:	f818 3003 	ldrb.w	r3, [r8, r3]
 8010158:	7183      	strb	r3, [r0, #6]
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 801015a:	190b      	adds	r3, r1, r4
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 801015c:	1b09      	subs	r1, r1, r4
			    & RANGE_MASK];
 801015e:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 8010162:	f3c1 1149 	ubfx	r1, r1, #5, #10
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 8010166:	f818 3003 	ldrb.w	r3, [r8, r3]
 801016a:	7083      	strb	r3, [r0, #2]
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 801016c:	f818 3001 	ldrb.w	r3, [r8, r1]
 8010170:	7143      	strb	r3, [r0, #5]
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 8010172:	eb06 030e 	add.w	r3, r6, lr
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 8010176:	eba6 0e0e 	sub.w	lr, r6, lr
			    & RANGE_MASK];
 801017a:	f3c3 1349 	ubfx	r3, r3, #5, #10
			    & RANGE_MASK];
 801017e:	f3ce 1e49 	ubfx	lr, lr, #5, #10
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 8010182:	f818 3003 	ldrb.w	r3, [r8, r3]
 8010186:	7103      	strb	r3, [r0, #4]
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 8010188:	f818 300e 	ldrb.w	r3, [r8, lr]
 801018c:	70c3      	strb	r3, [r0, #3]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 801018e:	e71c      	b.n	800ffca <jpeg_idct_ifast+0xde>

08010190 <jpeg_idct_islow>:

GLOBAL(void)
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010194:	b0c7      	sub	sp, #284	; 0x11c
 8010196:	3a02      	subs	r2, #2
 8010198:	9304      	str	r3, [sp, #16]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801019a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801019e:	6d48      	ldr	r0, [r1, #84]	; 0x54
  wsptr = workspace;
 80101a0:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80101a2:	3380      	adds	r3, #128	; 0x80
 80101a4:	9301      	str	r3, [sp, #4]
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 80101a6:	f100 0320 	add.w	r3, r0, #32
 80101aa:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 80101ac:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
 80101b0:	3104      	adds	r1, #4
 80101b2:	f9b2 4022 	ldrsh.w	r4, [r2, #34]	; 0x22
 80101b6:	f9b2 c032 	ldrsh.w	ip, [r2, #50]	; 0x32
 80101ba:	f9b2 e042 	ldrsh.w	lr, [r2, #66]	; 0x42
 80101be:	f9b2 8052 	ldrsh.w	r8, [r2, #82]	; 0x52
 80101c2:	f9b2 3062 	ldrsh.w	r3, [r2, #98]	; 0x62
 80101c6:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
 80101ca:	f850 7b04 	ldr.w	r7, [r0], #4
 80101ce:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
 80101d2:	436f      	muls	r7, r5
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 80101d4:	ea4a 0504 	orr.w	r5, sl, r4
 80101d8:	ea4c 0505 	orr.w	r5, ip, r5
 80101dc:	ea4e 0505 	orr.w	r5, lr, r5
 80101e0:	ea48 0505 	orr.w	r5, r8, r5
 80101e4:	431d      	orrs	r5, r3
 80101e6:	ea59 0505 	orrs.w	r5, r9, r5
 80101ea:	d147      	bne.n	801027c <jpeg_idct_islow+0xec>
	inptr[DCTSIZE*7] == 0) {
      /* AC terms all zero */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 80101ec:	00bf      	lsls	r7, r7, #2

      wsptr[DCTSIZE*0] = dcval;
 80101ee:	f841 7c04 	str.w	r7, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 80101f2:	61cf      	str	r7, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 80101f4:	63cf      	str	r7, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 80101f6:	65cf      	str	r7, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 80101f8:	67cf      	str	r7, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 80101fa:	f8c1 709c 	str.w	r7, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 80101fe:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8010202:	f8c1 70dc 	str.w	r7, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8010206:	9b05      	ldr	r3, [sp, #20]
 8010208:	4283      	cmp	r3, r0
 801020a:	d1cf      	bne.n	80101ac <jpeg_idct_islow+0x1c>
 801020c:	9b04      	ldr	r3, [sp, #16]
 801020e:	f1a3 0904 	sub.w	r9, r3, #4
 8010212:	331c      	adds	r3, #28
 8010214:	9305      	str	r3, [sp, #20]

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8010216:	ab06      	add	r3, sp, #24
 8010218:	9302      	str	r3, [sp, #8]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801021a:	f859 3f04 	ldr.w	r3, [r9, #4]!
 801021e:	9a50      	ldr	r2, [sp, #320]	; 0x140
 8010220:	9902      	ldr	r1, [sp, #8]
 8010222:	9303      	str	r3, [sp, #12]
 8010224:	4413      	add	r3, r2
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */

#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 8010226:	9a02      	ldr	r2, [sp, #8]
 8010228:	69cd      	ldr	r5, [r1, #28]
 801022a:	e9d1 8605 	ldrd	r8, r6, [r1, #20]
 801022e:	e9d2 a001 	ldrd	sl, r0, [r2, #4]
 8010232:	f851 7b20 	ldr.w	r7, [r1], #32
 8010236:	e9d2 e203 	ldrd	lr, r2, [r2, #12]
 801023a:	9102      	str	r1, [sp, #8]
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 801023c:	ea4a 0100 	orr.w	r1, sl, r0
 8010240:	3710      	adds	r7, #16
 8010242:	ea41 010e 	orr.w	r1, r1, lr
 8010246:	4311      	orrs	r1, r2
 8010248:	ea41 0108 	orr.w	r1, r1, r8
 801024c:	4331      	orrs	r1, r6
 801024e:	4329      	orrs	r1, r5
 8010250:	f040 809a 	bne.w	8010388 <jpeg_idct_islow+0x1f8>
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 8010254:	9901      	ldr	r1, [sp, #4]
				  & RANGE_MASK];
 8010256:	f3c7 1249 	ubfx	r2, r7, #5, #10

      outptr[0] = dcval;
 801025a:	9850      	ldr	r0, [sp, #320]	; 0x140
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 801025c:	5c8a      	ldrb	r2, [r1, r2]
      outptr[0] = dcval;
 801025e:	9903      	ldr	r1, [sp, #12]
 8010260:	540a      	strb	r2, [r1, r0]
      outptr[1] = dcval;
 8010262:	705a      	strb	r2, [r3, #1]
      outptr[2] = dcval;
 8010264:	709a      	strb	r2, [r3, #2]
      outptr[3] = dcval;
 8010266:	70da      	strb	r2, [r3, #3]
      outptr[4] = dcval;
 8010268:	711a      	strb	r2, [r3, #4]
      outptr[5] = dcval;
 801026a:	715a      	strb	r2, [r3, #5]
      outptr[6] = dcval;
 801026c:	719a      	strb	r2, [r3, #6]
      outptr[7] = dcval;
 801026e:	71da      	strb	r2, [r3, #7]
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 8010270:	9b05      	ldr	r3, [sp, #20]
 8010272:	454b      	cmp	r3, r9
 8010274:	d1d1      	bne.n	801021a <jpeg_idct_islow+0x8a>
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}
 8010276:	b047      	add	sp, #284	; 0x11c
 8010278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801027c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801027e:	f8d0 50bc 	ldr.w	r5, [r0, #188]	; 0xbc
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010282:	4366      	muls	r6, r4
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8010284:	f241 1451 	movw	r4, #4433	; 0x1151
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010288:	435d      	muls	r5, r3
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801028a:	1973      	adds	r3, r6, r5
 801028c:	4363      	muls	r3, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 801028e:	f641 047e 	movw	r4, #6270	; 0x187e
 8010292:	fb04 3606 	mla	r6, r4, r6, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8010296:	4c7b      	ldr	r4, [pc, #492]	; (8010484 <jpeg_idct_islow+0x2f4>)
 8010298:	fb04 3505 	mla	r5, r4, r5, r3
    z2 <<= CONST_BITS;
 801029c:	037b      	lsls	r3, r7, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801029e:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 80102a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80102a4:	fb04 f40e 	mul.w	r4, r4, lr
    tmp0 = z2 + z3;
 80102a8:	eb03 3b44 	add.w	fp, r3, r4, lsl #13
    tmp1 = z2 - z3;
 80102ac:	eba3 3344 	sub.w	r3, r3, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 80102b0:	ebab 0406 	sub.w	r4, fp, r6
    tmp10 = tmp0 + tmp2;
 80102b4:	eb06 070b 	add.w	r7, r6, fp
    tmp11 = tmp1 + tmp3;
 80102b8:	18ee      	adds	r6, r5, r3
    tmp12 = tmp1 - tmp3;
 80102ba:	1b5b      	subs	r3, r3, r5
    tmp13 = tmp0 - tmp2;
 80102bc:	9402      	str	r4, [sp, #8]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80102be:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80102c2:	69c5      	ldr	r5, [r0, #28]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80102c4:	fb04 f909 	mul.w	r9, r4, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80102c8:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80102cc:	fb05 fa0a 	mul.w	sl, r5, sl
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80102d0:	fb04 f808 	mul.w	r8, r4, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80102d4:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
    tmp12 = tmp1 - tmp3;
 80102d6:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80102d8:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80102dc:	fb04 fc0c 	mul.w	ip, r4, ip
    z3 = tmp1 + tmp3;
 80102e0:	eb08 0e0a 	add.w	lr, r8, sl
    z2 = tmp0 + tmp2;
 80102e4:	eb09 050c 	add.w	r5, r9, ip
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80102e8:	eb05 040e 	add.w	r4, r5, lr
 80102ec:	435c      	muls	r4, r3
    z2 += z1;
 80102ee:	4b66      	ldr	r3, [pc, #408]	; (8010488 <jpeg_idct_islow+0x2f8>)
 80102f0:	fb03 4505 	mla	r5, r3, r5, r4
    z3 += z1;
 80102f4:	4b65      	ldr	r3, [pc, #404]	; (801048c <jpeg_idct_islow+0x2fc>)
 80102f6:	fb03 440e 	mla	r4, r3, lr, r4
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 80102fa:	eb09 0e0a 	add.w	lr, r9, sl
 80102fe:	4b64      	ldr	r3, [pc, #400]	; (8010490 <jpeg_idct_islow+0x300>)
 8010300:	fb03 fe0e 	mul.w	lr, r3, lr
    tmp0 += z1 + z2;
 8010304:	f640 138e 	movw	r3, #2446	; 0x98e
 8010308:	eb05 0b0e 	add.w	fp, r5, lr
    tmp3 += z1 + z3;
 801030c:	44a6      	add	lr, r4
    tmp0 += z1 + z2;
 801030e:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 8010312:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8010316:	4b5f      	ldr	r3, [pc, #380]	; (8010494 <jpeg_idct_islow+0x304>)
    tmp3 += z1 + z3;
 8010318:	fb0b ee0a 	mla	lr, fp, sl, lr
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801031c:	eb08 0a0c 	add.w	sl, r8, ip
    tmp1 += z1 + z3;
 8010320:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8010324:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8010328:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z1 + z2;
 801032a:	4455      	add	r5, sl
    tmp1 += z1 + z3;
 801032c:	4454      	add	r4, sl
    tmp2 += z1 + z2;
 801032e:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8010332:	fb0b 4408 	mla	r4, fp, r8, r4
    tmp2 += z1 + z2;
 8010336:	fb0a 5a0c 	mla	sl, sl, ip, r5
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 801033a:	eb07 050e 	add.w	r5, r7, lr
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801033e:	eba7 0e0e 	sub.w	lr, r7, lr
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8010342:	12ed      	asrs	r5, r5, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8010344:	ea4f 27ee 	mov.w	r7, lr, asr #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8010348:	f841 5c04 	str.w	r5, [r1, #-4]
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801034c:	eb06 050a 	add.w	r5, r6, sl
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8010350:	eba6 0a0a 	sub.w	sl, r6, sl
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8010354:	f8c1 70dc 	str.w	r7, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8010358:	12ed      	asrs	r5, r5, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 801035a:	ea4f 26ea 	mov.w	r6, sl, asr #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801035e:	61cd      	str	r5, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8010360:	191d      	adds	r5, r3, r4
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8010362:	1b1c      	subs	r4, r3, r4
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8010364:	9b02      	ldr	r3, [sp, #8]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8010366:	12ed      	asrs	r5, r5, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8010368:	f8c1 60bc 	str.w	r6, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 801036c:	444b      	add	r3, r9
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 801036e:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8010370:	63cd      	str	r5, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8010372:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8010374:	f8c1 409c 	str.w	r4, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8010378:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 801037a:	9b02      	ldr	r3, [sp, #8]
 801037c:	eba3 0909 	sub.w	r9, r3, r9
 8010380:	ea4f 23e9 	mov.w	r3, r9, asr #11
 8010384:	67cb      	str	r3, [r1, #124]	; 0x7c
    wsptr++;
 8010386:	e73e      	b.n	8010206 <jpeg_idct_islow+0x76>
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8010388:	1981      	adds	r1, r0, r6
 801038a:	f241 1451 	movw	r4, #4433	; 0x1151
    z3 = tmp1 + tmp3;
 801038e:	eb0a 0c08 	add.w	ip, sl, r8
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8010392:	4361      	muls	r1, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8010394:	f641 047e 	movw	r4, #6270	; 0x187e
 8010398:	fb04 1000 	mla	r0, r4, r0, r1
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 801039c:	4c39      	ldr	r4, [pc, #228]	; (8010484 <jpeg_idct_islow+0x2f4>)
 801039e:	fb04 1106 	mla	r1, r4, r6, r1
    tmp0 = (z2 + z3) << CONST_BITS;
 80103a2:	19d6      	adds	r6, r2, r7
    tmp1 = (z2 - z3) << CONST_BITS;
 80103a4:	1aba      	subs	r2, r7, r2
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80103a6:	f242 54a1 	movw	r4, #9633	; 0x25a1
    tmp10 = tmp0 + tmp2;
 80103aa:	eb00 3746 	add.w	r7, r0, r6, lsl #13
    tmp13 = tmp0 - tmp2;
 80103ae:	ebc0 3646 	rsb	r6, r0, r6, lsl #13
    tmp11 = tmp1 + tmp3;
 80103b2:	eb01 3042 	add.w	r0, r1, r2, lsl #13
    tmp12 = tmp1 - tmp3;
 80103b6:	ebc1 3242 	rsb	r2, r1, r2, lsl #13
    tmp11 = tmp1 + tmp3;
 80103ba:	9004      	str	r0, [sp, #16]
    z2 = tmp0 + tmp2;
 80103bc:	eb0e 0005 	add.w	r0, lr, r5
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80103c0:	eb00 010c 	add.w	r1, r0, ip
 80103c4:	4361      	muls	r1, r4
    z2 += z1;
 80103c6:	4c30      	ldr	r4, [pc, #192]	; (8010488 <jpeg_idct_islow+0x2f8>)
 80103c8:	fb04 1000 	mla	r0, r4, r0, r1
    z3 += z1;
 80103cc:	4c2f      	ldr	r4, [pc, #188]	; (801048c <jpeg_idct_islow+0x2fc>)
 80103ce:	fb04 110c 	mla	r1, r4, ip, r1
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 80103d2:	eb0a 0c05 	add.w	ip, sl, r5
 80103d6:	4c2e      	ldr	r4, [pc, #184]	; (8010490 <jpeg_idct_islow+0x300>)
 80103d8:	fb04 fc0c 	mul.w	ip, r4, ip
    tmp0 += z1 + z2;
 80103dc:	f640 148e 	movw	r4, #2446	; 0x98e
 80103e0:	eb00 0b0c 	add.w	fp, r0, ip
    tmp3 += z1 + z3;
 80103e4:	448c      	add	ip, r1
    tmp0 += z1 + z2;
 80103e6:	fb04 b505 	mla	r5, r4, r5, fp
    tmp3 += z1 + z3;
 80103ea:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80103ee:	4c29      	ldr	r4, [pc, #164]	; (8010494 <jpeg_idct_islow+0x304>)
    tmp3 += z1 + z3;
 80103f0:	fb0b cc0a 	mla	ip, fp, sl, ip
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80103f4:	eb0e 0a08 	add.w	sl, lr, r8
    tmp1 += z1 + z3;
 80103f8:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 80103fc:	fb04 fa0a 	mul.w	sl, r4, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8010400:	9c01      	ldr	r4, [sp, #4]
    tmp1 += z1 + z3;
 8010402:	4451      	add	r1, sl
    tmp2 += z1 + z2;
 8010404:	4450      	add	r0, sl
 8010406:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 801040a:	fb0b 1108 	mla	r1, fp, r8, r1
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 801040e:	eb07 080c 	add.w	r8, r7, ip
    tmp2 += z1 + z2;
 8010412:	fb0a 000e 	mla	r0, sl, lr, r0
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8010416:	eba7 0c0c 	sub.w	ip, r7, ip
			    & RANGE_MASK];
 801041a:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 801041e:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8010422:	f814 e008 	ldrb.w	lr, [r4, r8]
 8010426:	9c03      	ldr	r4, [sp, #12]
 8010428:	46a0      	mov	r8, r4
 801042a:	9c50      	ldr	r4, [sp, #320]	; 0x140
 801042c:	f808 e004 	strb.w	lr, [r8, r4]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8010430:	9c01      	ldr	r4, [sp, #4]
 8010432:	f814 700c 	ldrb.w	r7, [r4, ip]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8010436:	9c04      	ldr	r4, [sp, #16]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8010438:	71df      	strb	r7, [r3, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801043a:	1827      	adds	r7, r4, r0
 801043c:	9c01      	ldr	r4, [sp, #4]
			    & RANGE_MASK];
 801043e:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8010442:	5de7      	ldrb	r7, [r4, r7]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8010444:	9c04      	ldr	r4, [sp, #16]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8010446:	705f      	strb	r7, [r3, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8010448:	1a20      	subs	r0, r4, r0
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801044a:	9c01      	ldr	r4, [sp, #4]
			    & RANGE_MASK];
 801044c:	f3c0 4a89 	ubfx	sl, r0, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8010450:	9801      	ldr	r0, [sp, #4]
 8010452:	f810 000a 	ldrb.w	r0, [r0, sl]
 8010456:	7198      	strb	r0, [r3, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8010458:	1850      	adds	r0, r2, r1
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 801045a:	1a51      	subs	r1, r2, r1
			    & RANGE_MASK];
 801045c:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8010460:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8010464:	5c20      	ldrb	r0, [r4, r0]
 8010466:	7098      	strb	r0, [r3, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8010468:	5c62      	ldrb	r2, [r4, r1]
 801046a:	715a      	strb	r2, [r3, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 801046c:	1972      	adds	r2, r6, r5
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 801046e:	1b75      	subs	r5, r6, r5
			    & RANGE_MASK];
 8010470:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 8010474:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8010478:	5ca2      	ldrb	r2, [r4, r2]
 801047a:	70da      	strb	r2, [r3, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 801047c:	5d62      	ldrb	r2, [r4, r5]
 801047e:	711a      	strb	r2, [r3, #4]
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8010480:	e6f6      	b.n	8010270 <jpeg_idct_islow+0xe0>
 8010482:	bf00      	nop
 8010484:	ffffc4df 	.word	0xffffc4df
 8010488:	ffffc13b 	.word	0xffffc13b
 801048c:	fffff384 	.word	0xfffff384
 8010490:	ffffe333 	.word	0xffffe333
 8010494:	ffffadfd 	.word	0xffffadfd

08010498 <jpeg_idct_7x7>:

GLOBAL(void)
jpeg_idct_7x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801049c:	b0b9      	sub	sp, #228	; 0xe4
 801049e:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 80104a0:	1e97      	subs	r7, r2, #2
 80104a2:	9304      	str	r3, [sp, #16]
 80104a4:	3e04      	subs	r6, #4
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80104a6:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80104aa:	f10d 0c1c 	add.w	ip, sp, #28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80104ae:	3380      	adds	r3, #128	; 0x80
 80104b0:	9301      	str	r3, [sp, #4]
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80104b2:	f102 030c 	add.w	r3, r2, #12
 80104b6:	9305      	str	r3, [sp, #20]
    /* Even part */

    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80104b8:	f937 2f02 	ldrsh.w	r2, [r7, #2]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 80104bc:	f640 2412 	movw	r4, #2578	; 0xa12
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80104c0:	f856 3f04 	ldr.w	r3, [r6, #4]!
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp0 = z1 + z3;
    z2 -= tmp0;
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 80104c4:	f642 09c6 	movw	r9, #10438	; 0x28c6
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80104c8:	f10c 0c04 	add.w	ip, ip, #4
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80104cc:	4353      	muls	r3, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80104ce:	6c30      	ldr	r0, [r6, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80104d0:	f8d6 1080 	ldr.w	r1, [r6, #128]	; 0x80
    tmp13 <<= CONST_BITS;
 80104d4:	035b      	lsls	r3, r3, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80104d6:	f8d6 20c0 	ldr.w	r2, [r6, #192]	; 0xc0
    tmp13 += ONE << (CONST_BITS-PASS1_BITS-1);
 80104da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80104de:	9302      	str	r3, [sp, #8]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80104e0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80104e4:	4358      	muls	r0, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80104e6:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 80104ea:	4359      	muls	r1, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80104ec:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 80104f0:	435a      	muls	r2, r3
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 80104f2:	f641 4337 	movw	r3, #7223	; 0x1c37
 80104f6:	eba1 0e02 	sub.w	lr, r1, r2
    tmp0 = z1 + z3;
 80104fa:	eb00 0802 	add.w	r8, r0, r2
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 80104fe:	fb03 fe0e 	mul.w	lr, r3, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8010502:	1a43      	subs	r3, r0, r1
 8010504:	fb04 f503 	mul.w	r5, r4, r3
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8010508:	9b02      	ldr	r3, [sp, #8]
 801050a:	eb0e 0405 	add.w	r4, lr, r5
 801050e:	441c      	add	r4, r3
 8010510:	4b86      	ldr	r3, [pc, #536]	; (801072c <jpeg_idct_7x7+0x294>)
 8010512:	fb03 4401 	mla	r4, r3, r1, r4
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8010516:	9b02      	ldr	r3, [sp, #8]
    z2 -= tmp0;
 8010518:	eba1 0108 	sub.w	r1, r1, r8
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 801051c:	fb09 3308 	mla	r3, r9, r8, r3
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010520:	f46f 791f 	mvn.w	r9, #636	; 0x27c
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8010524:	f642 5841 	movw	r8, #11585	; 0x2d41
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010528:	fb09 3202 	mla	r2, r9, r2, r3

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801052c:	f9b7 9010 	ldrsh.w	r9, [r7, #16]
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010530:	4472      	add	r2, lr
 8010532:	9203      	str	r2, [sp, #12]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8010534:	4a7e      	ldr	r2, [pc, #504]	; (8010730 <jpeg_idct_7x7+0x298>)
 8010536:	fb02 3300 	mla	r3, r2, r0, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801053a:	6a30      	ldr	r0, [r6, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801053c:	f8d6 20a0 	ldr.w	r2, [r6, #160]	; 0xa0
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8010540:	442b      	add	r3, r5
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010542:	fb00 f909 	mul.w	r9, r0, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010546:	6e35      	ldr	r5, [r6, #96]	; 0x60
 8010548:	f9b7 0030 	ldrsh.w	r0, [r7, #48]	; 0x30
 801054c:	4345      	muls	r5, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801054e:	f9b7 0050 	ldrsh.w	r0, [r7, #80]	; 0x50

    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8010552:	eb09 0e05 	add.w	lr, r9, r5
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010556:	4350      	muls	r0, r2
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8010558:	f641 52ef 	movw	r2, #7663	; 0x1def
 801055c:	fb02 fb0e 	mul.w	fp, r2, lr
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8010560:	eba9 0e05 	sub.w	lr, r9, r5
 8010564:	f240 5273 	movw	r2, #1395	; 0x573
    tmp0 = tmp1 - tmp2;
    tmp1 += tmp2;
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
    tmp1 += tmp2;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010568:	4481      	add	r9, r0
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801056a:	4405      	add	r5, r0
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 801056c:	fb02 fe0e 	mul.w	lr, r2, lr
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8010570:	4a70      	ldr	r2, [pc, #448]	; (8010734 <jpeg_idct_7x7+0x29c>)
    tmp0 = tmp1 - tmp2;
 8010572:	ebab 0a0e 	sub.w	sl, fp, lr
    tmp1 += tmp2;
 8010576:	44de      	add	lr, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010578:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801057c:	4355      	muls	r5, r2
    tmp0 += z2;
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */

    /* Final output stage */

    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801057e:	9a03      	ldr	r2, [sp, #12]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010580:	fb0b f909 	mul.w	r9, fp, r9
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8010584:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 8010588:	44ae      	add	lr, r5
    tmp0 += z2;
 801058a:	44ca      	add	sl, r9
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 801058c:	fb0b 9900 	mla	r9, fp, r0, r9
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010590:	eb02 000a 	add.w	r0, r2, sl
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010594:	eba2 0a0a 	sub.w	sl, r2, sl
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8010598:	444d      	add	r5, r9
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801059a:	ea4f 22ea 	mov.w	r2, sl, asr #11
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801059e:	12c0      	asrs	r0, r0, #11
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80105a0:	f8cc 20a4 	str.w	r2, [ip, #164]	; 0xa4
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80105a4:	eb04 020e 	add.w	r2, r4, lr
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80105a8:	eba4 040e 	sub.w	r4, r4, lr
    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80105ac:	f84c 0c04 	str.w	r0, [ip, #-4]
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80105b0:	12d2      	asrs	r2, r2, #11
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80105b2:	12e4      	asrs	r4, r4, #11
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80105b4:	f8cc 2018 	str.w	r2, [ip, #24]
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80105b8:	195a      	adds	r2, r3, r5
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80105ba:	1b5d      	subs	r5, r3, r5
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 80105bc:	9b02      	ldr	r3, [sp, #8]
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80105be:	12d2      	asrs	r2, r2, #11
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80105c0:	f8cc 4088 	str.w	r4, [ip, #136]	; 0x88
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 80105c4:	fb08 3101 	mla	r1, r8, r1, r3
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80105c8:	9b05      	ldr	r3, [sp, #20]
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80105ca:	12ed      	asrs	r5, r5, #11
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80105cc:	f8cc 2034 	str.w	r2, [ip, #52]	; 0x34
    wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
 80105d0:	12c9      	asrs	r1, r1, #11
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80105d2:	42bb      	cmp	r3, r7
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80105d4:	f8cc 506c 	str.w	r5, [ip, #108]	; 0x6c
    wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
 80105d8:	f8cc 1050 	str.w	r1, [ip, #80]	; 0x50
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80105dc:	f47f af6c 	bne.w	80104b8 <jpeg_idct_7x7+0x20>
 80105e0:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 7 rows from work array, store into output array. */

  wsptr = workspace;
 80105e2:	a807      	add	r0, sp, #28
 80105e4:	f1a3 0904 	sub.w	r9, r3, #4
 80105e8:	3318      	adds	r3, #24
 80105ea:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80105ec:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 80105f0:	301c      	adds	r0, #28
    outptr = output_buf[ctr] + output_col;
 80105f2:	9a42      	ldr	r2, [sp, #264]	; 0x108
    z3 = (INT32) wsptr[6];
 80105f4:	f850 5c04 	ldr.w	r5, [r0, #-4]
    outptr = output_buf[ctr] + output_col;
 80105f8:	189e      	adds	r6, r3, r2
 80105fa:	9303      	str	r3, [sp, #12]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 80105fc:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    z1 = (INT32) wsptr[2];
 8010600:	f850 4c14 	ldr.w	r4, [r0, #-20]
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8010604:	1b5a      	subs	r2, r3, r5
 8010606:	f641 4337 	movw	r3, #7223	; 0x1c37
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801060a:	f850 7c1c 	ldr.w	r7, [r0, #-28]
    tmp0 = z1 + z3;
 801060e:	eb04 0805 	add.w	r8, r4, r5
    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8010612:	fb03 fe02 	mul.w	lr, r3, r2
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8010616:	f850 3c0c 	ldr.w	r3, [r0, #-12]
 801061a:	f640 2212 	movw	r2, #2578	; 0xa12
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801061e:	3710      	adds	r7, #16
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8010620:	1ae3      	subs	r3, r4, r3
    z2 = (INT32) wsptr[3];
 8010622:	f850 ac10 	ldr.w	sl, [r0, #-16]
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8010626:	fb02 fc03 	mul.w	ip, r2, r3
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801062a:	f850 3c0c 	ldr.w	r3, [r0, #-12]
 801062e:	eb0e 010c 	add.w	r1, lr, ip
 8010632:	461a      	mov	r2, r3
 8010634:	4b3d      	ldr	r3, [pc, #244]	; (801072c <jpeg_idct_7x7+0x294>)
 8010636:	eb01 3147 	add.w	r1, r1, r7, lsl #13
 801063a:	fb03 1102 	mla	r1, r3, r2, r1
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 801063e:	f642 03c6 	movw	r3, #10438	; 0x28c6
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010642:	f46f 721f 	mvn.w	r2, #636	; 0x27c
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8010646:	fb03 f308 	mul.w	r3, r3, r8
 801064a:	eb03 3347 	add.w	r3, r3, r7, lsl #13
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 801064e:	fb02 3205 	mla	r2, r2, r5, r3
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8010652:	4d37      	ldr	r5, [pc, #220]	; (8010730 <jpeg_idct_7x7+0x298>)
 8010654:	fb05 3304 	mla	r3, r5, r4, r3
    z3 = (INT32) wsptr[5];
 8010658:	f850 5c08 	ldr.w	r5, [r0, #-8]
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 801065c:	4472      	add	r2, lr
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 801065e:	4463      	add	r3, ip
    z1 = (INT32) wsptr[1];
 8010660:	f850 cc18 	ldr.w	ip, [r0, #-24]
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8010664:	9302      	str	r3, [sp, #8]
    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8010666:	eb0c 040a 	add.w	r4, ip, sl
 801066a:	f641 53ef 	movw	r3, #7663	; 0x1def
 801066e:	fb03 fb04 	mul.w	fp, r3, r4
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8010672:	ebac 040a 	sub.w	r4, ip, sl
 8010676:	f240 5373 	movw	r3, #1395	; 0x573
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 801067a:	44ac      	add	ip, r5
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801067c:	44aa      	add	sl, r5
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 801067e:	435c      	muls	r4, r3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8010680:	4b2c      	ldr	r3, [pc, #176]	; (8010734 <jpeg_idct_7x7+0x29c>)
    tmp0 = tmp1 - tmp2;
 8010682:	ebab 0e04 	sub.w	lr, fp, r4
    tmp1 += tmp2;
 8010686:	445c      	add	r4, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010688:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801068c:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010690:	9b01      	ldr	r3, [sp, #4]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010692:	fb0b fc0c 	mul.w	ip, fp, ip
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8010696:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp1 += tmp2;
 801069a:	4454      	add	r4, sl
    tmp0 += z2;
 801069c:	44e6      	add	lr, ip
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 801069e:	fb0b cc05 	mla	ip, fp, r5, ip
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80106a2:	eb02 050e 	add.w	r5, r2, lr
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 80106a6:	44e2      	add	sl, ip
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80106a8:	eba2 0e0e 	sub.w	lr, r2, lr
			    & RANGE_MASK];
 80106ac:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 80106b0:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80106b4:	5d5d      	ldrb	r5, [r3, r5]
 80106b6:	9b03      	ldr	r3, [sp, #12]
 80106b8:	469c      	mov	ip, r3
 80106ba:	9b42      	ldr	r3, [sp, #264]	; 0x108
 80106bc:	f80c 5003 	strb.w	r5, [ip, r3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80106c0:	9b01      	ldr	r3, [sp, #4]
 80106c2:	f813 200e 	ldrb.w	r2, [r3, lr]
 80106c6:	71b2      	strb	r2, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80106c8:	190a      	adds	r2, r1, r4
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80106ca:	1b09      	subs	r1, r1, r4
			    & RANGE_MASK];
 80106cc:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 80106d0:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80106d4:	5c9a      	ldrb	r2, [r3, r2]
 80106d6:	7072      	strb	r2, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80106d8:	5c5a      	ldrb	r2, [r3, r1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80106da:	9b02      	ldr	r3, [sp, #8]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80106dc:	7172      	strb	r2, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80106de:	eb03 020a 	add.w	r2, r3, sl
 80106e2:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 80106e4:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80106e8:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80106ea:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80106ec:	70b2      	strb	r2, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80106ee:	eba3 0a0a 	sub.w	sl, r3, sl
 80106f2:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 80106f4:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80106f8:	f813 300a 	ldrb.w	r3, [r3, sl]
 80106fc:	7133      	strb	r3, [r6, #4]
    z2 -= tmp0;
 80106fe:	f850 3c0c 	ldr.w	r3, [r0, #-12]
 8010702:	eba3 0808 	sub.w	r8, r3, r8
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8010706:	f642 5341 	movw	r3, #11585	; 0x2d41
 801070a:	fb03 f808 	mul.w	r8, r3, r8
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 801070e:	9b01      	ldr	r3, [sp, #4]
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8010710:	eb08 3847 	add.w	r8, r8, r7, lsl #13
			    & RANGE_MASK];
 8010714:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 8010718:	f813 3008 	ldrb.w	r3, [r3, r8]
 801071c:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 7; ctr++) {
 801071e:	9b04      	ldr	r3, [sp, #16]
 8010720:	454b      	cmp	r3, r9
 8010722:	f47f af63 	bne.w	80105ec <jpeg_idct_7x7+0x154>
  }
}
 8010726:	b039      	add	sp, #228	; 0xe4
 8010728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801072c:	ffffc515 	.word	0xffffc515
 8010730:	ffffb0f1 	.word	0xffffb0f1
 8010734:	ffffd3e1 	.word	0xffffd3e1

08010738 <jpeg_idct_6x6>:

GLOBAL(void)
jpeg_idct_6x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801073c:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8010740:	b0a7      	sub	sp, #156	; 0x9c
 8010742:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8010744:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010746:	3080      	adds	r0, #128	; 0x80
 8010748:	320a      	adds	r2, #10
 801074a:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 801074c:	af02      	add	r7, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801074e:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8010750:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010752:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
    tmp1 = tmp0 + tmp10;
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8010756:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801075a:	f855 1f04 	ldr.w	r1, [r5, #4]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801075e:	3704      	adds	r7, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010760:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010764:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010766:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801076a:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801076e:	4362      	muls	r2, r4
    tmp0 <<= CONST_BITS;
 8010770:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8010772:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp12 = tmp1 - tmp0;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010776:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 801077a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801077e:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8010782:	4362      	muls	r2, r4
    tmp1 = tmp0 + tmp10;
 8010784:	188c      	adds	r4, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8010786:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801078a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 801078c:	fb02 f20c 	mul.w	r2, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010790:	f9b6 c010 	ldrsh.w	ip, [r6, #16]
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8010794:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010796:	6e28      	ldr	r0, [r5, #96]	; 0x60
    tmp10 = tmp1 + tmp0;
 8010798:	eb04 0e02 	add.w	lr, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801079c:	fb00 f909 	mul.w	r9, r0, r9
    tmp12 = tmp1 - tmp0;
 80107a0:	1aa4      	subs	r4, r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80107a2:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80107a6:	6a2a      	ldr	r2, [r5, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80107a8:	fb00 f808 	mul.w	r8, r0, r8
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80107ac:	f640 30b6 	movw	r0, #2998	; 0xbb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80107b0:	fb02 f20c 	mul.w	r2, r2, ip
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80107b4:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80107b8:	eb02 0c08 	add.w	ip, r2, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80107bc:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80107c0:	eba2 0209 	sub.w	r2, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80107c4:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80107c8:	eba2 0808 	sub.w	r8, r2, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80107cc:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 80107d0:	ea4f 0888 	mov.w	r8, r8, lsl #2

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80107d4:	eb0e 020a 	add.w	r2, lr, sl
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80107d8:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80107dc:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80107e0:	12d2      	asrs	r2, r2, #11
 80107e2:	f847 2c04 	str.w	r2, [r7, #-4]
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80107e6:	ea4f 22ee 	mov.w	r2, lr, asr #11
 80107ea:	677a      	str	r2, [r7, #116]	; 0x74
    wsptr[6*1] = (int) (tmp11 + tmp1);
 80107ec:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[6*4] = (int) (tmp11 - tmp1);
 80107f0:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[6*1] = (int) (tmp11 + tmp1);
 80107f4:	617a      	str	r2, [r7, #20]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80107f6:	eb04 020c 	add.w	r2, r4, ip
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 80107fa:	eba4 0c0c 	sub.w	ip, r4, ip
    wsptr[6*4] = (int) (tmp11 - tmp1);
 80107fe:	65f9      	str	r1, [r7, #92]	; 0x5c
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010800:	12d2      	asrs	r2, r2, #11
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010802:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010806:	62fa      	str	r2, [r7, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8010808:	9a01      	ldr	r2, [sp, #4]
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801080a:	647c      	str	r4, [r7, #68]	; 0x44
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801080c:	42b2      	cmp	r2, r6
 801080e:	d1a0      	bne.n	8010752 <jpeg_idct_6x6+0x1a>
 8010810:	f1a3 0e04 	sub.w	lr, r3, #4
 8010814:	f103 0914 	add.w	r9, r3, #20
  }

  /* Pass 2: process 6 rows from work array, store into output array. */

  wsptr = workspace;
 8010818:	a902      	add	r1, sp, #8
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801081a:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801081e:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 8010822:	9b30      	ldr	r3, [sp, #192]	; 0xc0
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8010824:	3118      	adds	r1, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8010826:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 6; ctr++) {
 801082a:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 801082c:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010830:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8010834:	fb00 f202 	mul.w	r2, r0, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8010838:	f851 4c10 	ldr.w	r4, [r1, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801083c:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 8010840:	f851 8c04 	ldr.w	r8, [r1, #-4]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8010844:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp1 = tmp0 + tmp10;
 8010848:	eb02 3543 	add.w	r5, r2, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 801084c:	ebc2 3343 	rsb	r3, r2, r3, lsl #13
 8010850:	eba3 0302 	sub.w	r3, r3, r2
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8010854:	f242 7231 	movw	r2, #10033	; 0x2731
 8010858:	fb02 f204 	mul.w	r2, r2, r4
    z1 = (INT32) wsptr[1];
 801085c:	f851 4c14 	ldr.w	r4, [r1, #-20]
    tmp10 = tmp1 + tmp0;
 8010860:	eb05 0602 	add.w	r6, r5, r2
    tmp12 = tmp1 - tmp0;
 8010864:	eba5 0202 	sub.w	r2, r5, r2
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8010868:	eb04 0508 	add.w	r5, r4, r8
 801086c:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8010870:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 8010874:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8010878:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 801087c:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010880:	9800      	ldr	r0, [sp, #0]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8010882:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8010886:	eba4 0808 	sub.w	r8, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 801088a:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801088e:	eb06 040c 	add.w	r4, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010892:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 8010896:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 801089a:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801089e:	5d04      	ldrb	r4, [r0, r4]
 80108a0:	9830      	ldr	r0, [sp, #192]	; 0xc0
 80108a2:	f80a 4000 	strb.w	r4, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80108a6:	9800      	ldr	r0, [sp, #0]
 80108a8:	5d84      	ldrb	r4, [r0, r6]
 80108aa:	717c      	strb	r4, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80108ac:	eb03 3448 	add.w	r4, r3, r8, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80108b0:	eba3 3848 	sub.w	r8, r3, r8, lsl #13
			    & RANGE_MASK];
 80108b4:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 80108b8:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80108bc:	5d04      	ldrb	r4, [r0, r4]
 80108be:	707c      	strb	r4, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80108c0:	f810 3008 	ldrb.w	r3, [r0, r8]
 80108c4:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80108c6:	eb02 0305 	add.w	r3, r2, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80108ca:	eba2 0505 	sub.w	r5, r2, r5
			    & RANGE_MASK];
 80108ce:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 80108d2:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80108d6:	5cc3      	ldrb	r3, [r0, r3]
 80108d8:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80108da:	5d43      	ldrb	r3, [r0, r5]
 80108dc:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 6; ctr++) {
 80108de:	d19c      	bne.n	801081a <jpeg_idct_6x6+0xe2>
  }
}
 80108e0:	b027      	add	sp, #156	; 0x9c
 80108e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080108e8 <jpeg_idct_5x5>:

GLOBAL(void)
jpeg_idct_5x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80108e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80108ec:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 80108f0:	b09d      	sub	sp, #116	; 0x74
 80108f2:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 80108f4:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80108f6:	3080      	adds	r0, #128	; 0x80
 80108f8:	3208      	adds	r2, #8
 80108fa:	3d04      	subs	r5, #4

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80108fc:	af03      	add	r7, sp, #12
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 80108fe:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8010902:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010906:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8010908:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801090a:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 801090e:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010910:	f855 2f04 	ldr.w	r2, [r5, #4]!
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010914:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010918:	434a      	muls	r2, r1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801091a:	6c29      	ldr	r1, [r5, #64]	; 0x40
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801091c:	f9b6 9040 	ldrsh.w	r9, [r6, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010920:	4361      	muls	r1, r4
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010922:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010926:	6a28      	ldr	r0, [r5, #32]
    tmp12 <<= CONST_BITS;
 8010928:	0352      	lsls	r2, r2, #13
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801092a:	fb04 f909 	mul.w	r9, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801092e:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010932:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010936:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 801093a:	eb01 0409 	add.w	r4, r1, r9
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 801093e:	eba1 0109 	sub.w	r1, r1, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010942:	fb00 fa0a 	mul.w	sl, r0, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010946:	6e28      	ldr	r0, [r5, #96]	; 0x60
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8010948:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 801094c:	fb0e f804 	mul.w	r8, lr, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010950:	fb00 fb0b 	mul.w	fp, r0, fp
    z3 = tmp12 + z2;
 8010954:	1854      	adds	r4, r2, r1

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010956:	f641 209a 	movw	r0, #6810	; 0x1a9a
    tmp12 -= z2 << 2;
 801095a:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 801095e:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 8010962:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010966:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 801096a:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 801096c:	fb00 f808 	mul.w	r8, r0, r8
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8010970:	f241 0071 	movw	r0, #4209	; 0x1071
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8010974:	627a      	str	r2, [r7, #36]	; 0x24
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8010976:	fb00 8a0a 	mla	sl, r0, sl, r8
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 801097a:	483b      	ldr	r0, [pc, #236]	; (8010a68 <jpeg_idct_5x5+0x180>)
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 801097c:	9a01      	ldr	r2, [sp, #4]
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 801097e:	fb00 880b 	mla	r8, r0, fp, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010982:	eb09 0b0a 	add.w	fp, r9, sl
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010986:	eba9 0a0a 	sub.w	sl, r9, sl
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 801098a:	42b2      	cmp	r2, r6
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 801098c:	eb04 0908 	add.w	r9, r4, r8
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010990:	eba4 0808 	sub.w	r8, r4, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010994:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010998:	ea4f 2aea 	mov.w	sl, sl, asr #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 801099c:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80109a0:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80109a4:	ea4f 24e8 	mov.w	r4, r8, asr #11
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80109a8:	f8c7 a04c 	str.w	sl, [r7, #76]	; 0x4c
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80109ac:	f8c7 9010 	str.w	r9, [r7, #16]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80109b0:	63bc      	str	r4, [r7, #56]	; 0x38
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80109b2:	d1aa      	bne.n	801090a <jpeg_idct_5x5+0x22>
 80109b4:	f1a3 0e04 	sub.w	lr, r3, #4
  }

  /* Pass 2: process 5 rows from work array, store into output array. */

  wsptr = workspace;
 80109b8:	a903      	add	r1, sp, #12
 80109ba:	3310      	adds	r3, #16
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp0 = (INT32) wsptr[2];
    tmp1 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 80109bc:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 80109c0:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 80109c4:	9301      	str	r3, [sp, #4]
    outptr = output_buf[ctr] + output_col;
 80109c6:	f85e 8f04 	ldr.w	r8, [lr, #4]!
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 80109ca:	f641 209a 	movw	r0, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 80109ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 80109d0:	3114      	adds	r1, #20
    tmp1 = (INT32) wsptr[4];
 80109d2:	f851 4c04 	ldr.w	r4, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 80109d6:	eb08 0703 	add.w	r7, r8, r3
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80109da:	f851 3c14 	ldr.w	r3, [r1, #-20]
    z3 = (INT32) wsptr[3];
 80109de:	f851 bc08 	ldr.w	fp, [r1, #-8]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80109e2:	f103 0c10 	add.w	ip, r3, #16
    tmp0 = (INT32) wsptr[2];
 80109e6:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    z2 = (INT32) wsptr[1];
 80109ea:	f851 6c10 	ldr.w	r6, [r1, #-16]
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 80109ee:	191a      	adds	r2, r3, r4
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 80109f0:	1b1b      	subs	r3, r3, r4
 80109f2:	fb09 f303 	mul.w	r3, r9, r3
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 80109f6:	fb0a f202 	mul.w	r2, sl, r2
    z3 = tmp12 + z2;
 80109fa:	eb03 354c 	add.w	r5, r3, ip, lsl #13
    tmp12 -= z2 << 2;
 80109fe:	009b      	lsls	r3, r3, #2
    tmp10 = z3 + z1;
 8010a00:	1954      	adds	r4, r2, r5
    tmp11 = z3 - z1;
 8010a02:	1aaa      	subs	r2, r5, r2
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010a04:	eb06 050b 	add.w	r5, r6, fp
    tmp12 -= z2 << 2;
 8010a08:	ebc3 3c4c 	rsb	ip, r3, ip, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8010a0c:	4345      	muls	r5, r0
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8010a0e:	f241 0071 	movw	r0, #4209	; 0x1071
			    & RANGE_MASK];
 8010a12:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8010a16:	fb00 5606 	mla	r6, r0, r6, r5
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 8010a1a:	4813      	ldr	r0, [pc, #76]	; (8010a68 <jpeg_idct_5x5+0x180>)
 8010a1c:	fb00 550b 	mla	r5, r0, fp, r5
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010a20:	eb04 0b06 	add.w	fp, r4, r6
 8010a24:	9800      	ldr	r0, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010a26:	1ba4      	subs	r4, r4, r6
			    & RANGE_MASK];
 8010a28:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 8010a2c:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010a30:	f810 b00b 	ldrb.w	fp, [r0, fp]
 8010a34:	9826      	ldr	r0, [sp, #152]	; 0x98
 8010a36:	f808 b000 	strb.w	fp, [r8, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010a3a:	9800      	ldr	r0, [sp, #0]
 8010a3c:	5d04      	ldrb	r4, [r0, r4]
 8010a3e:	713c      	strb	r4, [r7, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010a40:	1954      	adds	r4, r2, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010a42:	1b52      	subs	r2, r2, r5
			    & RANGE_MASK];
 8010a44:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8010a48:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010a4c:	5d04      	ldrb	r4, [r0, r4]
 8010a4e:	707c      	strb	r4, [r7, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010a50:	5c82      	ldrb	r2, [r0, r2]
 8010a52:	70fa      	strb	r2, [r7, #3]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8010a54:	f810 300c 	ldrb.w	r3, [r0, ip]
 8010a58:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 5; ctr++) {
 8010a5a:	9b01      	ldr	r3, [sp, #4]
 8010a5c:	4573      	cmp	r3, lr
 8010a5e:	d1b2      	bne.n	80109c6 <jpeg_idct_5x5+0xde>
  }
}
 8010a60:	b01d      	add	sp, #116	; 0x74
 8010a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a66:	bf00      	nop
 8010a68:	ffffba5c 	.word	0xffffba5c

08010a6c <jpeg_idct_4x4>:

GLOBAL(void)
jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010a70:	f8d0 614c 	ldr.w	r6, [r0, #332]	; 0x14c
{
 8010a74:	b093      	sub	sp, #76	; 0x4c
 8010a76:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8010a78:	1e97      	subs	r7, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010a7a:	f106 0080 	add.w	r0, r6, #128	; 0x80
 8010a7e:	3206      	adds	r2, #6
 8010a80:	3d04      	subs	r5, #4
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8010a82:	f241 1851 	movw	r8, #4433	; 0x1151
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010a86:	9001      	str	r0, [sp, #4]
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8010a88:	f641 0e7e 	movw	lr, #6270	; 0x187e
  wsptr = workspace;
 8010a8c:	a802      	add	r0, sp, #8
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8010a8e:	f8df c104 	ldr.w	ip, [pc, #260]	; 8010b94 <jpeg_idct_4x4+0x128>
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010a92:	f937 1f02 	ldrsh.w	r1, [r7, #2]!
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8010a96:	3004      	adds	r0, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010a98:	f855 4f04 	ldr.w	r4, [r5, #4]!
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010a9c:	f9b7 a010 	ldrsh.w	sl, [r7, #16]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8010aa0:	42ba      	cmp	r2, r7
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010aa2:	fb04 f401 	mul.w	r4, r4, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010aa6:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8010aa8:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010aac:	f9b7 b030 	ldrsh.w	fp, [r7, #48]	; 0x30
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010ab0:	fb06 f101 	mul.w	r1, r6, r1
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 8010ab4:	eb04 0901 	add.w	r9, r4, r1
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 8010ab8:	eba4 0401 	sub.w	r4, r4, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010abc:	6a29      	ldr	r1, [r5, #32]
 8010abe:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010ac2:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8010ac4:	fb01 f10b 	mul.w	r1, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8010ac8:	eb0a 0b01 	add.w	fp, sl, r1
 8010acc:	fb08 fb0b 	mul.w	fp, r8, fp
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010ad0:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8010ad4:	fb0e ba0a 	mla	sl, lr, sl, fp
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8010ad8:	fb0c bb01 	mla	fp, ip, r1, fp
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8010adc:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8010ae0:	ea4f 2beb 	mov.w	fp, fp, asr #11
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[4*0] = (int) (tmp10 + tmp0);
 8010ae4:	eb0a 0189 	add.w	r1, sl, r9, lsl #2
 8010ae8:	f840 1c04 	str.w	r1, [r0, #-4]
    wsptr[4*3] = (int) (tmp10 - tmp0);
 8010aec:	ebca 0189 	rsb	r1, sl, r9, lsl #2
 8010af0:	62c1      	str	r1, [r0, #44]	; 0x2c
    wsptr[4*1] = (int) (tmp12 + tmp2);
 8010af2:	eb0b 0184 	add.w	r1, fp, r4, lsl #2
    wsptr[4*2] = (int) (tmp12 - tmp2);
 8010af6:	ebcb 0484 	rsb	r4, fp, r4, lsl #2
    wsptr[4*1] = (int) (tmp12 + tmp2);
 8010afa:	60c1      	str	r1, [r0, #12]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 8010afc:	61c4      	str	r4, [r0, #28]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8010afe:	d1c8      	bne.n	8010a92 <jpeg_idct_4x4+0x26>
 8010b00:	1f1d      	subs	r5, r3, #4
 8010b02:	f103 0c0c 	add.w	ip, r3, #12
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 8010b06:	ac02      	add	r4, sp, #8
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8010b08:	f241 1951 	movw	r9, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8010b0c:	f641 087e 	movw	r8, #6270	; 0x187e
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8010b10:	f8df e080 	ldr.w	lr, [pc, #128]	; 8010b94 <jpeg_idct_4x4+0x128>
    outptr = output_buf[ctr] + output_col;
 8010b14:	f855 3f04 	ldr.w	r3, [r5, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 8010b18:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 8010b1a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010b1c:	f854 0c10 	ldr.w	r0, [r4, #-16]
  for (ctr = 0; ctr < 4; ctr++) {
 8010b20:	45ac      	cmp	ip, r5
    outptr = output_buf[ctr] + output_col;
 8010b22:	eb03 0702 	add.w	r7, r3, r2
    z3 = (INT32) wsptr[3];
 8010b26:	f854 bc04 	ldr.w	fp, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 8010b2a:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010b2e:	f100 0010 	add.w	r0, r0, #16
    z2 = (INT32) wsptr[1];
 8010b32:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8010b36:	eb00 0a02 	add.w	sl, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8010b3a:	eba0 0002 	sub.w	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8010b3e:	eb01 020b 	add.w	r2, r1, fp
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010b42:	9e01      	ldr	r6, [sp, #4]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8010b44:	fb09 f202 	mul.w	r2, r9, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8010b48:	fb08 2101 	mla	r1, r8, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8010b4c:	fb0e 220b 	mla	r2, lr, fp, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010b50:	eb01 3b4a 	add.w	fp, r1, sl, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010b54:	ebc1 314a 	rsb	r1, r1, sl, lsl #13
			    & RANGE_MASK];
 8010b58:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 8010b5c:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010b60:	f816 b00b 	ldrb.w	fp, [r6, fp]
 8010b64:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8010b66:	f803 b006 	strb.w	fp, [r3, r6]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010b6a:	9b01      	ldr	r3, [sp, #4]
 8010b6c:	5c5b      	ldrb	r3, [r3, r1]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010b6e:	9901      	ldr	r1, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010b70:	70fb      	strb	r3, [r7, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010b72:	eb02 3340 	add.w	r3, r2, r0, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010b76:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
			    & RANGE_MASK];
 8010b7a:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8010b7e:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010b82:	5ccb      	ldrb	r3, [r1, r3]
 8010b84:	707b      	strb	r3, [r7, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010b86:	5c8b      	ldrb	r3, [r1, r2]
 8010b88:	70bb      	strb	r3, [r7, #2]
  for (ctr = 0; ctr < 4; ctr++) {
 8010b8a:	d1c3      	bne.n	8010b14 <jpeg_idct_4x4+0xa8>
  }
}
 8010b8c:	b013      	add	sp, #76	; 0x4c
 8010b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b92:	bf00      	nop
 8010b94:	ffffc4df 	.word	0xffffc4df

08010b98 <jpeg_idct_3x3>:

GLOBAL(void)
jpeg_idct_3x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b9c:	b08b      	sub	sp, #44	; 0x2c
  INT32 tmp0, tmp2, tmp10, tmp12;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010b9e:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 8010ba2:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8010ba4:	f1a2 0802 	sub.w	r8, r2, #2

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010ba8:	ac01      	add	r4, sp, #4
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010baa:	f100 0e80 	add.w	lr, r0, #128	; 0x80
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8010bae:	f1a1 0c04 	sub.w	ip, r1, #4
 8010bb2:	3204      	adds	r2, #4
 8010bb4:	4620      	mov	r0, r4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010bb6:	f241 6aa1 	movw	sl, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010bba:	f242 7931 	movw	r9, #10033	; 0x2731
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010bbe:	f938 5f02 	ldrsh.w	r5, [r8, #2]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8010bc2:	3404      	adds	r4, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010bc4:	f85c 1f04 	ldr.w	r1, [ip, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010bc8:	f9b8 6020 	ldrsh.w	r6, [r8, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8010bcc:	4542      	cmp	r2, r8
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010bce:	fb01 f105 	mul.w	r1, r1, r5
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010bd2:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010bd6:	f9b8 b010 	ldrsh.w	fp, [r8, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010bda:	fb05 f506 	mul.w	r5, r5, r6
    tmp0 <<= CONST_BITS;
 8010bde:	ea4f 3141 	mov.w	r1, r1, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010be2:	f8dc 7020 	ldr.w	r7, [ip, #32]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010be6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010bea:	fb0a f505 	mul.w	r5, sl, r5
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010bee:	fb07 f70b 	mul.w	r7, r7, fp
    tmp10 = tmp0 + tmp12;
 8010bf2:	eb01 0605 	add.w	r6, r1, r5
    tmp2 = tmp0 - tmp12 - tmp12;
 8010bf6:	eba1 0145 	sub.w	r1, r1, r5, lsl #1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010bfa:	fb09 f707 	mul.w	r7, r9, r7

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8010bfe:	ea4f 21e1 	mov.w	r1, r1, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010c02:	eb06 0b07 	add.w	fp, r6, r7
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010c06:	eba6 0707 	sub.w	r7, r6, r7
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8010c0a:	60a1      	str	r1, [r4, #8]
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010c0c:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010c10:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010c14:	f844 bc04 	str.w	fp, [r4, #-4]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010c18:	6167      	str	r7, [r4, #20]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8010c1a:	d1d0      	bne.n	8010bbe <jpeg_idct_3x3+0x26>
 8010c1c:	1f1d      	subs	r5, r3, #4

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010c1e:	f241 6ca1 	movw	ip, #5793	; 0x16a1
 8010c22:	3308      	adds	r3, #8
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010c24:	f242 7b31 	movw	fp, #10033	; 0x2731
    outptr = output_buf[ctr] + output_col;
 8010c28:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 8010c2c:	300c      	adds	r0, #12
    outptr = output_buf[ctr] + output_col;
 8010c2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010c30:	f850 1c04 	ldr.w	r1, [r0, #-4]
  for (ctr = 0; ctr < 3; ctr++) {
 8010c34:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 8010c36:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010c3a:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8010c3e:	fb0c f101 	mul.w	r1, ip, r1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010c42:	f850 4c08 	ldr.w	r4, [r0, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010c46:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010c4a:	9f14      	ldr	r7, [sp, #80]	; 0x50
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8010c4c:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 8010c50:	eb01 3842 	add.w	r8, r1, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 8010c54:	ebc1 3242 	rsb	r2, r1, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010c58:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010c5c:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 8010c60:	eba2 0201 	sub.w	r2, r2, r1
			    & RANGE_MASK];
 8010c64:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8010c68:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8010c6c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010c70:	f81e a00a 	ldrb.w	sl, [lr, sl]
 8010c74:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010c78:	f81e 4008 	ldrb.w	r4, [lr, r8]
 8010c7c:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 8010c7e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8010c82:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 3; ctr++) {
 8010c84:	d1d0      	bne.n	8010c28 <jpeg_idct_3x3+0x90>
  }
}
 8010c86:	b00b      	add	sp, #44	; 0x2c
 8010c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010c8c <jpeg_idct_2x2>:

GLOBAL(void)
jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Pass 1: process columns from input. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8010c8e:	6d4f      	ldr	r7, [r1, #84]	; 0x54
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010c90:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c

  /* Column 0 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010c94:	6839      	ldr	r1, [r7, #0]
 8010c96:	f9b2 0000 	ldrsh.w	r0, [r2]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010c9a:	3580      	adds	r5, #128	; 0x80
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010c9c:	6a3c      	ldr	r4, [r7, #32]
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010c9e:	4341      	muls	r1, r0
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010ca0:	f9b2 0010 	ldrsh.w	r0, [r2, #16]

  tmp0 = tmp4 + tmp5;
  tmp2 = tmp4 - tmp5;

  /* Column 1 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8010ca4:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010ca8:	4344      	muls	r4, r0
  tmp4 += ONE << 2;
 8010caa:	3104      	adds	r1, #4
{
 8010cac:	9e05      	ldr	r6, [sp, #20]
  tmp0 = tmp4 + tmp5;
 8010cae:	1860      	adds	r0, r4, r1
  tmp2 = tmp4 - tmp5;
 8010cb0:	1b09      	subs	r1, r1, r4
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 8010cb2:	687c      	ldr	r4, [r7, #4]
 8010cb4:	fb04 f40c 	mul.w	r4, r4, ip
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 8010cb8:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8010cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cbe:	fb02 f20c 	mul.w	r2, r2, ip
  tmp3 = tmp4 - tmp5;

  /* Pass 2: process 2 rows, store into output array. */

  /* Row 0 */
  outptr = output_buf[0] + output_col;
 8010cc2:	f8d3 c000 	ldr.w	ip, [r3]
  tmp1 = tmp4 + tmp5;
 8010cc6:	18a7      	adds	r7, r4, r2
  tmp3 = tmp4 - tmp5;
 8010cc8:	1aa2      	subs	r2, r4, r2
  outptr = output_buf[0] + output_col;
 8010cca:	eb0c 0e06 	add.w	lr, ip, r6

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8010cce:	19c4      	adds	r4, r0, r7
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8010cd0:	1bc0      	subs	r0, r0, r7
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8010cd2:	f3c4 04c9 	ubfx	r4, r4, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8010cd6:	f3c0 00c9 	ubfx	r0, r0, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8010cda:	5d2c      	ldrb	r4, [r5, r4]
 8010cdc:	f80c 4006 	strb.w	r4, [ip, r6]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8010ce0:	5c28      	ldrb	r0, [r5, r0]
 8010ce2:	f88e 0001 	strb.w	r0, [lr, #1]

  /* Row 1 */
  outptr = output_buf[1] + output_col;
 8010ce6:	6858      	ldr	r0, [r3, #4]

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8010ce8:	188b      	adds	r3, r1, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8010cea:	1a89      	subs	r1, r1, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8010cec:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr = output_buf[1] + output_col;
 8010cf0:	1984      	adds	r4, r0, r6
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8010cf2:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8010cf6:	5ceb      	ldrb	r3, [r5, r3]
 8010cf8:	5583      	strb	r3, [r0, r6]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8010cfa:	5c6b      	ldrb	r3, [r5, r1]
 8010cfc:	7063      	strb	r3, [r4, #1]
}
 8010cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010d00 <jpeg_idct_1x1>:

GLOBAL(void)
jpeg_idct_1x1 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010d00:	b510      	push	{r4, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* 1x1 is trivial: just take the DC coefficient divided by 8. */
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
 8010d02:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8010d04:	f9b2 1000 	ldrsh.w	r1, [r2]
 8010d08:	6822      	ldr	r2, [r4, #0]
 8010d0a:	434a      	muls	r2, r1
  dcval = (int) DESCALE((INT32) dcval, 3);

  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 8010d0c:	f8d0 114c 	ldr.w	r1, [r0, #332]	; 0x14c
  dcval = (int) DESCALE((INT32) dcval, 3);
 8010d10:	3204      	adds	r2, #4
  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 8010d12:	f3c2 02c9 	ubfx	r2, r2, #3, #10
 8010d16:	440a      	add	r2, r1
 8010d18:	f892 1080 	ldrb.w	r1, [r2, #128]	; 0x80
 8010d1c:	681a      	ldr	r2, [r3, #0]
 8010d1e:	9b02      	ldr	r3, [sp, #8]
 8010d20:	54d1      	strb	r1, [r2, r3]
}
 8010d22:	bd10      	pop	{r4, pc}

08010d24 <jpeg_idct_9x9>:

GLOBAL(void)
jpeg_idct_9x9 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d28:	b0d1      	sub	sp, #324	; 0x144
 8010d2a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8010d2c:	f1a2 0802 	sub.w	r8, r2, #2
 8010d30:	9306      	str	r3, [sp, #24]
 8010d32:	3c04      	subs	r4, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010d34:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8010d38:	a808      	add	r0, sp, #32
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010d3a:	f103 0a80 	add.w	sl, r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010d3e:	f102 030e 	add.w	r3, r2, #14
 8010d42:	9307      	str	r3, [sp, #28]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010d44:	f938 3f02 	ldrsh.w	r3, [r8, #2]!

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010d48:	f241 66a1 	movw	r6, #5793	; 0x16a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010d4c:	f854 5f04 	ldr.w	r5, [r4, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010d50:	3004      	adds	r0, #4
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010d52:	f9b8 9040 	ldrsh.w	r9, [r8, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010d56:	435d      	muls	r5, r3
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010d58:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010d5a:	f9b8 3020 	ldrsh.w	r3, [r8, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010d5e:	f9b8 1060 	ldrsh.w	r1, [r8, #96]	; 0x60
    tmp0 <<= CONST_BITS;
 8010d62:	036d      	lsls	r5, r5, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010d64:	435a      	muls	r2, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010d66:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010d6a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
    tmp13 = tmp1 - tmp2 + tmp3;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010d6e:	f9b8 7030 	ldrsh.w	r7, [r8, #48]	; 0x30
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010d72:	fb03 f909 	mul.w	r9, r3, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010d76:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010d7a:	f9b8 c050 	ldrsh.w	ip, [r8, #80]	; 0x50
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8010d7e:	434b      	muls	r3, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010d80:	f9b8 e070 	ldrsh.w	lr, [r8, #112]	; 0x70
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010d84:	4373      	muls	r3, r6
    tmp1 = tmp0 + tmp3;
 8010d86:	18e9      	adds	r1, r5, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 8010d88:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
 8010d8c:	9300      	str	r3, [sp, #0]
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8010d8e:	eba2 0309 	sub.w	r3, r2, r9
 8010d92:	4373      	muls	r3, r6
 8010d94:	9301      	str	r3, [sp, #4]
    tmp11 = tmp2 + tmp0;
 8010d96:	e9dd 3500 	ldrd	r3, r5, [sp]
 8010d9a:	195e      	adds	r6, r3, r5
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8010d9c:	eb02 0309 	add.w	r3, r2, r9
 8010da0:	f642 2587 	movw	r5, #10887	; 0x2a87
 8010da4:	436b      	muls	r3, r5
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8010da6:	f242 25ab 	movw	r5, #8875	; 0x22ab
 8010daa:	436a      	muls	r2, r5
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8010dac:	f240 75dc 	movw	r5, #2012	; 0x7dc
 8010db0:	fb05 f909 	mul.w	r9, r5, r9
    tmp10 = tmp1 + tmp0 - tmp3;
 8010db4:	18cd      	adds	r5, r1, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 8010db6:	1acb      	subs	r3, r1, r3
    tmp10 = tmp1 + tmp0 - tmp3;
 8010db8:	eba5 0509 	sub.w	r5, r5, r9
    tmp12 = tmp1 - tmp0 + tmp2;
 8010dbc:	4413      	add	r3, r2
    tmp13 = tmp1 - tmp2 + tmp3;
 8010dbe:	1a8a      	subs	r2, r1, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010dc0:	6a21      	ldr	r1, [r4, #32]
    tmp13 = tmp1 - tmp2 + tmp3;
 8010dc2:	444a      	add	r2, r9
    tmp12 = tmp1 - tmp0 + tmp2;
 8010dc4:	9302      	str	r3, [sp, #8]

    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8010dc6:	4b8d      	ldr	r3, [pc, #564]	; (8010ffc <jpeg_idct_9x9+0x2d8>)
    tmp13 = tmp1 - tmp2 + tmp3;
 8010dc8:	9203      	str	r2, [sp, #12]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010dca:	f9b8 2010 	ldrsh.w	r2, [r8, #16]
 8010dce:	4351      	muls	r1, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010dd0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8010dd2:	437a      	muls	r2, r7
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010dd4:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 8010dd8:	fb07 fc0c 	mul.w	ip, r7, ip
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010ddc:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8010de0:	435a      	muls	r2, r3

    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010de2:	f641 5317 	movw	r3, #7447	; 0x1d17
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010de6:	fb07 f70e 	mul.w	r7, r7, lr
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010dea:	eb01 0b0c 	add.w	fp, r1, ip
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010dee:	eb01 0907 	add.w	r9, r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010df2:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010df6:	f640 737a 	movw	r3, #3962	; 0xf7a
    tmp0 = tmp2 + tmp3 - z2;
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
    tmp2 += z2 - tmp1;
    tmp3 += z2 + tmp1;
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010dfa:	eba1 010c 	sub.w	r1, r1, ip
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010dfe:	fb03 f909 	mul.w	r9, r3, r9
    tmp0 = tmp2 + tmp3 - z2;
 8010e02:	eb0b 0e09 	add.w	lr, fp, r9
 8010e06:	ebae 0302 	sub.w	r3, lr, r2
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010e0a:	ebac 0e07 	sub.w	lr, ip, r7
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010e0e:	1bcf      	subs	r7, r1, r7
    tmp0 = tmp2 + tmp3 - z2;
 8010e10:	9304      	str	r3, [sp, #16]
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010e12:	f642 4391 	movw	r3, #11409	; 0x2c91
 8010e16:	fb03 f30e 	mul.w	r3, r3, lr
    tmp2 += z2 - tmp1;
 8010e1a:	eba2 0e03 	sub.w	lr, r2, r3
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010e1e:	9305      	str	r3, [sp, #20]
    tmp3 += z2 + tmp1;
 8010e20:	441a      	add	r2, r3
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010e22:	f242 7331 	movw	r3, #10033	; 0x2731
    tmp2 += z2 - tmp1;
 8010e26:	44de      	add	lr, fp
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010e28:	435f      	muls	r7, r3

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010e2a:	9b04      	ldr	r3, [sp, #16]
    tmp3 += z2 + tmp1;
 8010e2c:	444a      	add	r2, r9
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010e2e:	18e9      	adds	r1, r5, r3
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010e30:	1aed      	subs	r5, r5, r3
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010e32:	9b02      	ldr	r3, [sp, #8]
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010e34:	12c9      	asrs	r1, r1, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010e36:	12ed      	asrs	r5, r5, #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010e38:	f840 1c04 	str.w	r1, [r0, #-4]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010e3c:	19f1      	adds	r1, r6, r7
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010e3e:	1bf6      	subs	r6, r6, r7
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010e40:	f8c0 50fc 	str.w	r5, [r0, #252]	; 0xfc
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010e44:	12c9      	asrs	r1, r1, #11
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010e46:	12f6      	asrs	r6, r6, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8010e48:	61c1      	str	r1, [r0, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010e4a:	eb03 010e 	add.w	r1, r3, lr
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010e4e:	eba3 0e0e 	sub.w	lr, r3, lr
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8010e52:	f8c0 60dc 	str.w	r6, [r0, #220]	; 0xdc
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010e56:	12c9      	asrs	r1, r1, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010e58:	ea4f 23ee 	mov.w	r3, lr, asr #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010e5c:	63c1      	str	r1, [r0, #60]	; 0x3c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010e5e:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 8010e62:	9b03      	ldr	r3, [sp, #12]
 8010e64:	4413      	add	r3, r2
 8010e66:	12db      	asrs	r3, r3, #11
 8010e68:	65c3      	str	r3, [r0, #92]	; 0x5c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp13 - tmp3, CONST_BITS-PASS1_BITS);
 8010e6a:	9b03      	ldr	r3, [sp, #12]
 8010e6c:	1a9a      	subs	r2, r3, r2
 8010e6e:	12d2      	asrs	r2, r2, #11
 8010e70:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
    tmp14 = tmp2 - tmp0 - tmp0;
 8010e74:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010e78:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp14, CONST_BITS-PASS1_BITS);
 8010e7c:	12db      	asrs	r3, r3, #11
 8010e7e:	67c3      	str	r3, [r0, #124]	; 0x7c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8010e80:	9b07      	ldr	r3, [sp, #28]
 8010e82:	4543      	cmp	r3, r8
 8010e84:	f47f af5e 	bne.w	8010d44 <jpeg_idct_9x9+0x20>
 8010e88:	9b06      	ldr	r3, [sp, #24]
  }

  /* Pass 2: process 9 rows from work array, store into output array. */

  wsptr = workspace;
 8010e8a:	aa08      	add	r2, sp, #32
 8010e8c:	3b04      	subs	r3, #4
 8010e8e:	9300      	str	r3, [sp, #0]
 8010e90:	9b06      	ldr	r3, [sp, #24]
 8010e92:	3320      	adds	r3, #32
 8010e94:	9306      	str	r3, [sp, #24]
  for (ctr = 0; ctr < 9; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8010e96:	9b00      	ldr	r3, [sp, #0]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010e98:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    z2 = (INT32) wsptr[4];
 8010e9c:	6915      	ldr	r5, [r2, #16]
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8010e9e:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8010ea0:	4619      	mov	r1, r3
    z4 = (INT32) wsptr[7];
 8010ea2:	f852 9c04 	ldr.w	r9, [r2, #-4]
    outptr = output_buf[ctr] + output_col;
 8010ea6:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8010eaa:	9305      	str	r3, [sp, #20]
 8010eac:	9b05      	ldr	r3, [sp, #20]
 8010eae:	9100      	str	r1, [sp, #0]
 8010eb0:	995a      	ldr	r1, [sp, #360]	; 0x168
 8010eb2:	185c      	adds	r4, r3, r1
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010eb4:	f852 3c20 	ldr.w	r3, [r2, #-32]
    z1 = (INT32) wsptr[2];
 8010eb8:	f852 1c18 	ldr.w	r1, [r2, #-24]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010ebc:	f103 0610 	add.w	r6, r3, #16
    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8010ec0:	f852 3c08 	ldr.w	r3, [r2, #-8]
 8010ec4:	fb0c f703 	mul.w	r7, ip, r3
    tmp2 = tmp0 - tmp3 - tmp3;
 8010ec8:	ebc7 3346 	rsb	r3, r7, r6, lsl #13
    tmp1 = tmp0 + tmp3;
 8010ecc:	eb07 3046 	add.w	r0, r7, r6, lsl #13
    tmp2 = tmp0 - tmp3 - tmp3;
 8010ed0:	1bdb      	subs	r3, r3, r7
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8010ed2:	f642 2787 	movw	r7, #10887	; 0x2a87
    tmp2 = tmp0 - tmp3 - tmp3;
 8010ed6:	9301      	str	r3, [sp, #4]
    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8010ed8:	1b4b      	subs	r3, r1, r5
 8010eda:	fb0c f303 	mul.w	r3, ip, r3
 8010ede:	9302      	str	r3, [sp, #8]
    tmp11 = tmp2 + tmp0;
 8010ee0:	e9dd 3601 	ldrd	r3, r6, [sp, #4]
 8010ee4:	199e      	adds	r6, r3, r6
    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8010ee6:	194b      	adds	r3, r1, r5
 8010ee8:	437b      	muls	r3, r7
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8010eea:	f242 27ab 	movw	r7, #8875	; 0x22ab
 8010eee:	4379      	muls	r1, r7
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8010ef0:	f240 77dc 	movw	r7, #2012	; 0x7dc
 8010ef4:	fb07 fe05 	mul.w	lr, r7, r5
    tmp10 = tmp1 + tmp0 - tmp3;
 8010ef8:	18c5      	adds	r5, r0, r3
    tmp12 = tmp1 - tmp0 + tmp2;
 8010efa:	1ac3      	subs	r3, r0, r3
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8010efc:	4f3f      	ldr	r7, [pc, #252]	; (8010ffc <jpeg_idct_9x9+0x2d8>)
    tmp10 = tmp1 + tmp0 - tmp3;
 8010efe:	eba5 050e 	sub.w	r5, r5, lr
    tmp12 = tmp1 - tmp0 + tmp2;
 8010f02:	440b      	add	r3, r1
    tmp13 = tmp1 - tmp2 + tmp3;
 8010f04:	1a41      	subs	r1, r0, r1
    z1 = (INT32) wsptr[1];
 8010f06:	f852 0c1c 	ldr.w	r0, [r2, #-28]
    tmp13 = tmp1 - tmp2 + tmp3;
 8010f0a:	4471      	add	r1, lr
    tmp12 = tmp1 - tmp0 + tmp2;
 8010f0c:	9303      	str	r3, [sp, #12]
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010f0e:	f641 5317 	movw	r3, #7447	; 0x1d17
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010f12:	eb00 0e09 	add.w	lr, r0, r9
    tmp13 = tmp1 - tmp2 + tmp3;
 8010f16:	9104      	str	r1, [sp, #16]
    z2 = (INT32) wsptr[3];
 8010f18:	f852 1c14 	ldr.w	r1, [r2, #-20]
    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8010f1c:	4379      	muls	r1, r7
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010f1e:	f852 7c0c 	ldr.w	r7, [r2, #-12]
 8010f22:	eb00 0b07 	add.w	fp, r0, r7
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010f26:	eba7 0809 	sub.w	r8, r7, r9
    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8010f2a:	fb03 fb0b 	mul.w	fp, r3, fp
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8010f2e:	f640 737a 	movw	r3, #3962	; 0xf7a
 8010f32:	fb03 fe0e 	mul.w	lr, r3, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010f36:	f642 4391 	movw	r3, #11409	; 0x2c91
    tmp0 = tmp2 + tmp3 - z2;
 8010f3a:	eb0b 0c0e 	add.w	ip, fp, lr
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8010f3e:	fb03 f808 	mul.w	r8, r3, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010f42:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    tmp0 = tmp2 + tmp3 - z2;
 8010f46:	ebac 0c01 	sub.w	ip, ip, r1
    tmp2 += z2 - tmp1;
 8010f4a:	eba1 0708 	sub.w	r7, r1, r8
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010f4e:	1ac0      	subs	r0, r0, r3
 8010f50:	f242 7331 	movw	r3, #10033	; 0x2731
    tmp3 += z2 + tmp1;
 8010f54:	4441      	add	r1, r8
    tmp2 += z2 - tmp1;
 8010f56:	445f      	add	r7, fp
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010f58:	eba0 0909 	sub.w	r9, r0, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010f5c:	eb05 000c 	add.w	r0, r5, ip
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010f60:	eba5 050c 	sub.w	r5, r5, ip
    tmp3 += z2 + tmp1;
 8010f64:	4471      	add	r1, lr
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8010f66:	fb03 f909 	mul.w	r9, r3, r9
			    & RANGE_MASK];
 8010f6a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010f6e:	9b05      	ldr	r3, [sp, #20]
			    & RANGE_MASK];
 8010f70:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010f74:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8010f78:	469e      	mov	lr, r3
 8010f7a:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 8010f7c:	f80e 0003 	strb.w	r0, [lr, r3]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010f80:	f81a 0005 	ldrb.w	r0, [sl, r5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010f84:	9b03      	ldr	r3, [sp, #12]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010f86:	7220      	strb	r0, [r4, #8]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010f88:	eb06 0009 	add.w	r0, r6, r9
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010f8c:	eba6 0609 	sub.w	r6, r6, r9
			    & RANGE_MASK];
 8010f90:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8010f94:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010f98:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8010f9c:	7060      	strb	r0, [r4, #1]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010f9e:	f81a 0006 	ldrb.w	r0, [sl, r6]
 8010fa2:	71e0      	strb	r0, [r4, #7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010fa4:	19d8      	adds	r0, r3, r7
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010fa6:	1bdf      	subs	r7, r3, r7
			    & RANGE_MASK];
 8010fa8:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8010fac:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010fb0:	f81a 0000 	ldrb.w	r0, [sl, r0]
 8010fb4:	70a0      	strb	r0, [r4, #2]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010fb6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8010fba:	71a3      	strb	r3, [r4, #6]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 8010fbc:	9b04      	ldr	r3, [sp, #16]
 8010fbe:	440b      	add	r3, r1
			    & RANGE_MASK];
 8010fc0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 8010fc4:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8010fc8:	70e3      	strb	r3, [r4, #3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 8010fca:	9b04      	ldr	r3, [sp, #16]
 8010fcc:	1a59      	subs	r1, r3, r1
			    & RANGE_MASK];
 8010fce:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 8010fd2:	f81a 3001 	ldrb.w	r3, [sl, r1]
 8010fd6:	7163      	strb	r3, [r4, #5]
    tmp14 = tmp2 - tmp0 - tmp0;
 8010fd8:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 8010fdc:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
  for (ctr = 0; ctr < 9; ctr++) {
 8010fe0:	9900      	ldr	r1, [sp, #0]
			    & RANGE_MASK];
 8010fe2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
 8010fe6:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8010fea:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 9; ctr++) {
 8010fec:	9b06      	ldr	r3, [sp, #24]
 8010fee:	428b      	cmp	r3, r1
 8010ff0:	f47f af51 	bne.w	8010e96 <jpeg_idct_9x9+0x172>
  }
}
 8010ff4:	b051      	add	sp, #324	; 0x144
 8010ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ffa:	bf00      	nop
 8010ffc:	ffffd8cf 	.word	0xffffd8cf

08011000 <jpeg_idct_10x10>:

GLOBAL(void)
jpeg_idct_10x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011004:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8011008:	b0d7      	sub	sp, #348	; 0x15c
 801100a:	6d49      	ldr	r1, [r1, #84]	; 0x54
 801100c:	f1a2 0c02 	sub.w	ip, r2, #2
 8011010:	9303      	str	r3, [sp, #12]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011012:	3080      	adds	r0, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011014:	f102 030e 	add.w	r3, r2, #14
 8011018:	3904      	subs	r1, #4
  wsptr = workspace;
 801101a:	aa06      	add	r2, sp, #24
 801101c:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801101e:	f93c ef02 	ldrsh.w	lr, [ip, #2]!

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8011022:	f241 0671 	movw	r6, #4209	; 0x1071
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011026:	f851 3f04 	ldr.w	r3, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801102a:	3204      	adds	r2, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801102c:	f9bc 4040 	ldrsh.w	r4, [ip, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011030:	fb03 fe0e 	mul.w	lr, r3, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011034:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011038:	f9bc b020 	ldrsh.w	fp, [ip, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801103c:	4363      	muls	r3, r4
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801103e:	f242 449d 	movw	r4, #9373	; 0x249d
    z3 <<= CONST_BITS;
 8011042:	ea4f 3e4e 	mov.w	lr, lr, lsl #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011046:	f9bc 9060 	ldrsh.w	r9, [ip, #96]	; 0x60
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801104a:	fb04 f503 	mul.w	r5, r4, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 801104e:	f640 54fc 	movw	r4, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011052:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8011056:	4363      	muls	r3, r4
    tmp10 = z3 + z1;
 8011058:	eb0e 0a05 	add.w	sl, lr, r5
    tmp11 = z3 - z2;
 801105c:	ebae 0403 	sub.w	r4, lr, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8011060:	1aeb      	subs	r3, r5, r3
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8011062:	f641 259a 	movw	r5, #6810	; 0x1a9a
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8011066:	ebae 0343 	sub.w	r3, lr, r3, lsl #1

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801106a:	f9bc e050 	ldrsh.w	lr, [ip, #80]	; 0x50
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 801106e:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011072:	fb03 fb0b 	mul.w	fp, r3, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011076:	f8d1 30c0 	ldr.w	r3, [r1, #192]	; 0xc0
 801107a:	fb03 f309 	mul.w	r3, r3, r9
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801107e:	eb0b 0903 	add.w	r9, fp, r3
 8011082:	fb05 f509 	mul.w	r5, r5, r9
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8011086:	fb06 5b0b 	mla	fp, r6, fp, r5
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 801108a:	4ea4      	ldr	r6, [pc, #656]	; (801131c <jpeg_idct_10x10+0x31c>)
 801108c:	fb06 5903 	mla	r9, r6, r3, r5
    tmp20 = tmp10 + tmp12;
 8011090:	eb0a 030b 	add.w	r3, sl, fp
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011094:	6a0d      	ldr	r5, [r1, #32]
    tmp24 = tmp10 - tmp12;
 8011096:	ebaa 0b0b 	sub.w	fp, sl, fp
    tmp20 = tmp10 + tmp12;
 801109a:	9300      	str	r3, [sp, #0]
    tmp23 = tmp11 - tmp13;
 801109c:	eba4 0309 	sub.w	r3, r4, r9
    tmp21 = tmp11 + tmp13;
 80110a0:	eb04 0709 	add.w	r7, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80110a4:	f9bc 4030 	ldrsh.w	r4, [ip, #48]	; 0x30
    tmp23 = tmp11 - tmp13;
 80110a8:	9301      	str	r3, [sp, #4]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80110aa:	f9bc 3010 	ldrsh.w	r3, [ip, #16]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80110ae:	f9bc 6070 	ldrsh.w	r6, [ip, #112]	; 0x70
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80110b2:	435d      	muls	r5, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80110b4:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 80110b6:	4363      	muls	r3, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80110b8:	f8d1 40a0 	ldr.w	r4, [r1, #160]	; 0xa0
 80110bc:	fb04 fe0e 	mul.w	lr, r4, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80110c0:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
 80110c4:	4374      	muls	r4, r6

    tmp11 = z2 + z4;
 80110c6:	eb03 0904 	add.w	r9, r3, r4
    tmp13 = z2 - z4;
 80110ca:	1b1b      	subs	r3, r3, r4

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80110cc:	f640 14e3 	movw	r4, #2531	; 0x9e3
 80110d0:	435c      	muls	r4, r3
 80110d2:	9402      	str	r4, [sp, #8]
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 80110d4:	f641 646f 	movw	r4, #7791	; 0x1e6f
 80110d8:	fb04 f609 	mul.w	r6, r4, r9
    z4 = z5 + tmp12;
 80110dc:	9c02      	ldr	r4, [sp, #8]
 80110de:	eb04 3a4e 	add.w	sl, r4, lr, lsl #13

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 80110e2:	f642 44b3 	movw	r4, #11443	; 0x2cb3
 80110e6:	fb04 6805 	mla	r8, r4, r5, r6
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80110ea:	f240 7414 	movw	r4, #1812	; 0x714
 80110ee:	436c      	muls	r4, r5
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 80110f0:	44d0      	add	r8, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80110f2:	1ba6      	subs	r6, r4, r6

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 80110f4:	9c02      	ldr	r4, [sp, #8]
 80110f6:	ebc4 344e 	rsb	r4, r4, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80110fa:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 80110fc:	f241 26cf 	movw	r6, #4815	; 0x12cf
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8011100:	eba4 3403 	sub.w	r4, r4, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8011104:	1aeb      	subs	r3, r5, r3
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8011106:	fb06 f909 	mul.w	r9, r6, r9

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801110a:	f642 0653 	movw	r6, #10323	; 0x2853
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 801110e:	eba3 0e0e 	sub.w	lr, r3, lr
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8011112:	f241 438c 	movw	r3, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8011116:	436e      	muls	r6, r5
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8011118:	435d      	muls	r5, r3

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801111a:	9b00      	ldr	r3, [sp, #0]
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801111c:	eba6 0609 	sub.w	r6, r6, r9
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8011120:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011124:	4443      	add	r3, r8
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8011126:	eba5 0909 	sub.w	r9, r5, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801112a:	1b36      	subs	r6, r6, r4
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801112c:	12db      	asrs	r3, r3, #11
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801112e:	444c      	add	r4, r9
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011130:	f842 3c04 	str.w	r3, [r2, #-4]
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011134:	9b00      	ldr	r3, [sp, #0]
 8011136:	eba3 0308 	sub.w	r3, r3, r8
 801113a:	12db      	asrs	r3, r3, #11
 801113c:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011140:	19bb      	adds	r3, r7, r6
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011142:	1bbf      	subs	r7, r7, r6
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011144:	12db      	asrs	r3, r3, #11
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011146:	12ff      	asrs	r7, r7, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011148:	61d3      	str	r3, [r2, #28]
    wsptr[8*2] = (int) (tmp22 + tmp12);
 801114a:	9b04      	ldr	r3, [sp, #16]
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801114c:	f8c2 70fc 	str.w	r7, [r2, #252]	; 0xfc
    wsptr[8*2] = (int) (tmp22 + tmp12);
 8011150:	eb0e 23e3 	add.w	r3, lr, r3, asr #11
 8011154:	63d3      	str	r3, [r2, #60]	; 0x3c
    wsptr[8*7] = (int) (tmp22 - tmp12);
 8011156:	9b04      	ldr	r3, [sp, #16]
 8011158:	ebce 23e3 	rsb	r3, lr, r3, asr #11
 801115c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011160:	9b01      	ldr	r3, [sp, #4]
 8011162:	4423      	add	r3, r4
 8011164:	12db      	asrs	r3, r3, #11
 8011166:	65d3      	str	r3, [r2, #92]	; 0x5c
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011168:	9b01      	ldr	r3, [sp, #4]
 801116a:	1b1c      	subs	r4, r3, r4
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801116c:	eb0b 030a 	add.w	r3, fp, sl
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011170:	ebab 0a0a 	sub.w	sl, fp, sl
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011174:	12db      	asrs	r3, r3, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011176:	12e4      	asrs	r4, r4, #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011178:	67d3      	str	r3, [r2, #124]	; 0x7c
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801117a:	ea4f 26ea 	mov.w	r6, sl, asr #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801117e:	9b05      	ldr	r3, [sp, #20]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011180:	f8c2 40bc 	str.w	r4, [r2, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011184:	4563      	cmp	r3, ip
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011186:	f8c2 609c 	str.w	r6, [r2, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801118a:	f47f af48 	bne.w	801101e <jpeg_idct_10x10+0x1e>
 801118e:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array. */

  wsptr = workspace;
 8011190:	aa06      	add	r2, sp, #24
 8011192:	3b04      	subs	r3, #4
 8011194:	9300      	str	r3, [sp, #0]
 8011196:	9b03      	ldr	r3, [sp, #12]
 8011198:	3324      	adds	r3, #36	; 0x24
 801119a:	9304      	str	r3, [sp, #16]
  for (ctr = 0; ctr < 10; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801119c:	9b00      	ldr	r3, [sp, #0]
    /* Add fudge factor here for final descale. */
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z3 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 801119e:	f640 56fc 	movw	r6, #3580	; 0xdfc
    z4 = (INT32) wsptr[4];
 80111a2:	6915      	ldr	r5, [r2, #16]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80111a4:	f242 449d 	movw	r4, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 80111a8:	4619      	mov	r1, r3
    tmp21 = tmp11 + tmp13;
    tmp23 = tmp11 - tmp13;

    /* Odd part */

    z1 = (INT32) wsptr[1];
 80111aa:	f8d2 c004 	ldr.w	ip, [r2, #4]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80111ae:	436c      	muls	r4, r5
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 80111b0:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 80111b2:	f851 3f04 	ldr.w	r3, [r1, #4]!
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80111b6:	fb06 f805 	mul.w	r8, r6, r5
    z2 = (INT32) wsptr[2];
 80111ba:	f852 6c18 	ldr.w	r6, [r2, #-24]
    outptr = output_buf[ctr] + output_col;
 80111be:	9303      	str	r3, [sp, #12]
 80111c0:	9b03      	ldr	r3, [sp, #12]
 80111c2:	9100      	str	r1, [sp, #0]
 80111c4:	9960      	ldr	r1, [sp, #384]	; 0x180
    z3 = (INT32) wsptr[6];
 80111c6:	f852 5c08 	ldr.w	r5, [r2, #-8]
    outptr = output_buf[ctr] + output_col;
 80111ca:	1859      	adds	r1, r3, r1
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80111cc:	f852 3c20 	ldr.w	r3, [r2, #-32]
 80111d0:	3310      	adds	r3, #16
    tmp11 = z3 - z2;
 80111d2:	ebc8 3943 	rsb	r9, r8, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80111d6:	eba4 0808 	sub.w	r8, r4, r8
    tmp10 = z3 + z1;
 80111da:	eb04 3b43 	add.w	fp, r4, r3, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80111de:	1974      	adds	r4, r6, r5
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80111e0:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80111e4:	ebc8 3343 	rsb	r3, r8, r3, lsl #13
 80111e8:	9301      	str	r3, [sp, #4]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80111ea:	f641 239a 	movw	r3, #6810	; 0x1a9a
 80111ee:	4363      	muls	r3, r4
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 80111f0:	f241 0471 	movw	r4, #4209	; 0x1071
 80111f4:	fb04 3a06 	mla	sl, r4, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 80111f8:	4c48      	ldr	r4, [pc, #288]	; (801131c <jpeg_idct_10x10+0x31c>)
 80111fa:	fb04 3405 	mla	r4, r4, r5, r3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 80111fe:	f641 656f 	movw	r5, #7791	; 0x1e6f
    tmp20 = tmp10 + tmp12;
 8011202:	eb0b 070a 	add.w	r7, fp, sl
    tmp24 = tmp10 - tmp12;
 8011206:	ebab 0b0a 	sub.w	fp, fp, sl
    tmp23 = tmp11 - tmp13;
 801120a:	eba9 0304 	sub.w	r3, r9, r4
    tmp21 = tmp11 + tmp13;
 801120e:	eb09 0604 	add.w	r6, r9, r4
    z2 = (INT32) wsptr[3];
 8011212:	f852 4c14 	ldr.w	r4, [r2, #-20]
    tmp23 = tmp11 - tmp13;
 8011216:	9302      	str	r3, [sp, #8]
    z4 = (INT32) wsptr[7];
 8011218:	f852 3c04 	ldr.w	r3, [r2, #-4]
    tmp11 = z2 + z4;
 801121c:	eb04 0903 	add.w	r9, r4, r3
    tmp13 = z2 - z4;
 8011220:	1ae3      	subs	r3, r4, r3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8011222:	f640 14e3 	movw	r4, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8011226:	fb05 f809 	mul.w	r8, r5, r9
    z4 = z3 + tmp12;
 801122a:	f852 5c0c 	ldr.w	r5, [r2, #-12]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 801122e:	435c      	muls	r4, r3
    z4 = z3 + tmp12;
 8011230:	eb04 3a45 	add.w	sl, r4, r5, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8011234:	f642 45b3 	movw	r5, #11443	; 0x2cb3
 8011238:	fb05 8e0c 	mla	lr, r5, ip, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801123c:	f240 7514 	movw	r5, #1812	; 0x714
 8011240:	fb05 f50c 	mul.w	r5, r5, ip
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8011244:	44d6      	add	lr, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8011246:	eba5 0508 	sub.w	r5, r5, r8
 801124a:	44aa      	add	sl, r5
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801124c:	f241 25cf 	movw	r5, #4815	; 0x12cf
 8011250:	fb05 f909 	mul.w	r9, r5, r9
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8011254:	f852 5c0c 	ldr.w	r5, [r2, #-12]
 8011258:	ebc4 3445 	rsb	r4, r4, r5, lsl #13
 801125c:	eba4 3403 	sub.w	r4, r4, r3, lsl #12
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 8011260:	ebac 0303 	sub.w	r3, ip, r3
 8011264:	035b      	lsls	r3, r3, #13
 8011266:	eba3 3845 	sub.w	r8, r3, r5, lsl #13
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801126a:	f241 438c 	movw	r3, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801126e:	f642 0553 	movw	r5, #10323	; 0x2853
 8011272:	fb05 f50c 	mul.w	r5, r5, ip
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8011276:	fb03 fc0c 	mul.w	ip, r3, ip
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801127a:	eb07 030e 	add.w	r3, r7, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801127e:	eba5 0509 	sub.w	r5, r5, r9
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011282:	eba7 070e 	sub.w	r7, r7, lr
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8011286:	ebac 0909 	sub.w	r9, ip, r9
			    & RANGE_MASK];
 801128a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801128e:	1b2d      	subs	r5, r5, r4
			    & RANGE_MASK];
 8011290:	f3c7 4789 	ubfx	r7, r7, #18, #10
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8011294:	444c      	add	r4, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011296:	f810 9003 	ldrb.w	r9, [r0, r3]
 801129a:	9b03      	ldr	r3, [sp, #12]
 801129c:	469c      	mov	ip, r3
 801129e:	9b60      	ldr	r3, [sp, #384]	; 0x180
 80112a0:	f80c 9003 	strb.w	r9, [ip, r3]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80112a4:	5dc3      	ldrb	r3, [r0, r7]
 80112a6:	724b      	strb	r3, [r1, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80112a8:	1973      	adds	r3, r6, r5
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80112aa:	1b76      	subs	r6, r6, r5
			    & RANGE_MASK];
 80112ac:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 80112b0:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80112b4:	5cc3      	ldrb	r3, [r0, r3]
 80112b6:	704b      	strb	r3, [r1, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80112b8:	5d83      	ldrb	r3, [r0, r6]
 80112ba:	720b      	strb	r3, [r1, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80112bc:	9b01      	ldr	r3, [sp, #4]
 80112be:	4443      	add	r3, r8
			    & RANGE_MASK];
 80112c0:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80112c4:	5cc3      	ldrb	r3, [r0, r3]
 80112c6:	708b      	strb	r3, [r1, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80112c8:	9b01      	ldr	r3, [sp, #4]
 80112ca:	eba3 0808 	sub.w	r8, r3, r8
			    & RANGE_MASK];
 80112ce:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80112d2:	f810 3008 	ldrb.w	r3, [r0, r8]
 80112d6:	71cb      	strb	r3, [r1, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80112d8:	9b02      	ldr	r3, [sp, #8]
 80112da:	4423      	add	r3, r4
			    & RANGE_MASK];
 80112dc:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80112e0:	5cc3      	ldrb	r3, [r0, r3]
 80112e2:	70cb      	strb	r3, [r1, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80112e4:	9b02      	ldr	r3, [sp, #8]
 80112e6:	1b1c      	subs	r4, r3, r4
			    & RANGE_MASK];
 80112e8:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80112ec:	5d03      	ldrb	r3, [r0, r4]
 80112ee:	718b      	strb	r3, [r1, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80112f0:	eb0b 030a 	add.w	r3, fp, sl
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80112f4:	ebab 0a0a 	sub.w	sl, fp, sl
			    & RANGE_MASK];
 80112f8:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 80112fc:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011300:	5cc3      	ldrb	r3, [r0, r3]
 8011302:	710b      	strb	r3, [r1, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011304:	f810 300a 	ldrb.w	r3, [r0, sl]
 8011308:	714b      	strb	r3, [r1, #5]
  for (ctr = 0; ctr < 10; ctr++) {
 801130a:	9b04      	ldr	r3, [sp, #16]
 801130c:	9900      	ldr	r1, [sp, #0]
 801130e:	428b      	cmp	r3, r1
 8011310:	f47f af44 	bne.w	801119c <jpeg_idct_10x10+0x19c>
  }
}
 8011314:	b057      	add	sp, #348	; 0x15c
 8011316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801131a:	bf00      	nop
 801131c:	ffffba5c 	.word	0xffffba5c

08011320 <jpeg_idct_11x11>:

GLOBAL(void)
jpeg_idct_11x11 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011324:	b0e3      	sub	sp, #396	; 0x18c
 8011326:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8011328:	f1a2 0b02 	sub.w	fp, r2, #2
 801132c:	9308      	str	r3, [sp, #32]
 801132e:	3904      	subs	r1, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011330:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011334:	3380      	adds	r3, #128	; 0x80
 8011336:	9301      	str	r3, [sp, #4]
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011338:	f102 030e 	add.w	r3, r2, #14
 801133c:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 801133e:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011340:	f93b cf02 	ldrsh.w	ip, [fp, #2]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8011344:	f640 59c9 	movw	r9, #3529	; 0xdc9
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011348:	f851 6f04 	ldr.w	r6, [r1, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801134c:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801134e:	f9bb 2020 	ldrsh.w	r2, [fp, #32]
 8011352:	6c0c      	ldr	r4, [r1, #64]	; 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011354:	fb06 fc0c 	mul.w	ip, r6, ip
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011358:	f9bb 8040 	ldrsh.w	r8, [fp, #64]	; 0x40
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 801135c:	f245 167e 	movw	r6, #20862	; 0x517e
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011360:	4354      	muls	r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011362:	f9bb 5060 	ldrsh.w	r5, [fp, #96]	; 0x60
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011366:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
    tmp10 <<= CONST_BITS;
 801136a:	ea4f 3c4c 	mov.w	ip, ip, lsl #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801136e:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011372:	fb02 f208 	mul.w	r2, r2, r8

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011376:	f9bb e050 	ldrsh.w	lr, [fp, #80]	; 0x50
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801137a:	4368      	muls	r0, r5
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 801137c:	1a15      	subs	r5, r2, r0
    z4 = z1 + z3;
 801137e:	eb04 0800 	add.w	r8, r4, r0
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8011382:	4375      	muls	r5, r6
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8011384:	1b16      	subs	r6, r2, r4
 8011386:	fb09 f906 	mul.w	r9, r9, r6
    z4 -= z2;
 801138a:	eba8 0602 	sub.w	r6, r8, r2
 801138e:	9602      	str	r6, [sp, #8]
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011390:	f50c 6680 	add.w	r6, ip, #1024	; 0x400
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8011394:	9f02      	ldr	r7, [sp, #8]
 8011396:	f642 3c6c 	movw	ip, #11116	; 0x2b6c
 801139a:	fb0c 6c07 	mla	ip, ip, r7, r6
    tmp21 = tmp20 + tmp23 + tmp25 -
 801139e:	eb05 0709 	add.w	r7, r5, r9
 80113a2:	4ed2      	ldr	r6, [pc, #840]	; (80116ec <jpeg_idct_11x11+0x3cc>)
 80113a4:	4467      	add	r7, ip
 80113a6:	fb06 7602 	mla	r6, r6, r2, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = z1 + z2;
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 80113aa:	f641 476a 	movw	r7, #7274	; 0x1c6a
    tmp21 = tmp20 + tmp23 + tmp25 -
 80113ae:	9603      	str	r6, [sp, #12]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80113b0:	f244 36b5 	movw	r6, #17333	; 0x43b5
 80113b4:	fb06 c600 	mla	r6, r6, r0, ip
 80113b8:	1975      	adds	r5, r6, r5
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80113ba:	6e0e      	ldr	r6, [r1, #96]	; 0x60
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 80113bc:	9504      	str	r5, [sp, #16]
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 80113be:	4dcc      	ldr	r5, [pc, #816]	; (80116f0 <jpeg_idct_11x11+0x3d0>)
 80113c0:	fb05 ca04 	mla	sl, r5, r4, ip
 80113c4:	eb0a 0509 	add.w	r5, sl, r9
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 80113c8:	f241 5a74 	movw	sl, #5492	; 0x1574
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 80113cc:	9505      	str	r5, [sp, #20]
    tmp24 += tmp25;
 80113ce:	4dc9      	ldr	r5, [pc, #804]	; (80116f4 <jpeg_idct_11x11+0x3d4>)
 80113d0:	fb05 c808 	mla	r8, r5, r8, ip
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 80113d4:	f605 35be 	addw	r5, r5, #3006	; 0xbbe
 80113d8:	fb05 8000 	mla	r0, r5, r0, r8
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80113dc:	6a0d      	ldr	r5, [r1, #32]
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 80113de:	9006      	str	r0, [sp, #24]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 80113e0:	48c5      	ldr	r0, [pc, #788]	; (80116f8 <jpeg_idct_11x11+0x3d8>)
 80113e2:	4344      	muls	r4, r0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80113e4:	f643 6039 	movw	r0, #15929	; 0x3e39
 80113e8:	fb00 4402 	mla	r4, r0, r2, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80113ec:	f9bb 0070 	ldrsh.w	r0, [fp, #112]	; 0x70
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80113f0:	eb04 0208 	add.w	r2, r4, r8
 80113f4:	9207      	str	r2, [sp, #28]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80113f6:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
 80113fa:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80113fc:	f9bb 2030 	ldrsh.w	r2, [fp, #48]	; 0x30
 8011400:	4356      	muls	r6, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011402:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
    tmp11 = z1 + z2;
 8011406:	19ac      	adds	r4, r5, r6
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011408:	fb02 fe0e 	mul.w	lr, r2, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801140c:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8011410:	eb0e 0804 	add.w	r8, lr, r4
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8011414:	437c      	muls	r4, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011416:	4342      	muls	r2, r0
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011418:	4fb8      	ldr	r7, [pc, #736]	; (80116fc <jpeg_idct_11x11+0x3dc>)
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 801141a:	eb08 0002 	add.w	r0, r8, r2
 801141e:	f44f 684c 	mov.w	r8, #3264	; 0xcc0
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8011422:	eb05 0902 	add.w	r9, r5, r2
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8011426:	fb08 f800 	mul.w	r8, r8, r0
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 801142a:	eb05 000e 	add.w	r0, r5, lr
 801142e:	fb0a fa00 	mul.w	sl, sl, r0
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8011432:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8011436:	fb00 8909 	mla	r9, r0, r9, r8
    tmp10 = tmp11 + tmp12 + tmp13 -
 801143a:	eb04 000a 	add.w	r0, r4, sl
 801143e:	4448      	add	r0, r9
 8011440:	fb07 0505 	mla	r5, r7, r5, r0
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8011444:	eb06 000e 	add.w	r0, r6, lr
 8011448:	f2a7 77ad 	subw	r7, r7, #1965	; 0x7ad
 801144c:	fb07 8000 	mla	r0, r7, r0, r8
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8011450:	f244 2758 	movw	r7, #16984	; 0x4258
 8011454:	fb07 0706 	mla	r7, r7, r6, r0
 8011458:	4427      	add	r7, r4
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 801145a:	4ca9      	ldr	r4, [pc, #676]	; (8011700 <jpeg_idct_11x11+0x3e0>)
 801145c:	fb04 000e 	mla	r0, r4, lr, r0
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8011460:	4ca8      	ldr	r4, [pc, #672]	; (8011704 <jpeg_idct_11x11+0x3e4>)
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8011462:	4450      	add	r0, sl
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8011464:	eb06 0a02 	add.w	sl, r6, r2
 8011468:	fb04 fa0a 	mul.w	sl, r4, sl
    tmp11 += z1;
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 801146c:	f244 3447 	movw	r4, #17223	; 0x4347
 8011470:	fb04 a402 	mla	r4, r4, r2, sl
    tmp11 += z1;
 8011474:	4457      	add	r7, sl
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8011476:	44a1      	add	r9, r4
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8011478:	f242 040b 	movw	r4, #8203	; 0x200b
 801147c:	fb04 fe0e 	mul.w	lr, r4, lr
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8011480:	4ca1      	ldr	r4, [pc, #644]	; (8011708 <jpeg_idct_11x11+0x3e8>)
 8011482:	fb04 ee06 	mla	lr, r4, r6, lr
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8011486:	f2a4 64f7 	subw	r4, r4, #1783	; 0x6f7
 801148a:	fb04 ee02 	mla	lr, r4, r2, lr
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801148e:	9a04      	ldr	r2, [sp, #16]
 8011490:	442a      	add	r2, r5
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8011492:	44f0      	add	r8, lr
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011494:	12d2      	asrs	r2, r2, #11
 8011496:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801149a:	9a04      	ldr	r2, [sp, #16]
 801149c:	1b55      	subs	r5, r2, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801149e:	9a03      	ldr	r2, [sp, #12]
 80114a0:	443a      	add	r2, r7
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80114a2:	12ed      	asrs	r5, r5, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80114a4:	12d2      	asrs	r2, r2, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80114a6:	f8c3 513c 	str.w	r5, [r3, #316]	; 0x13c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80114aa:	61da      	str	r2, [r3, #28]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80114ac:	9a03      	ldr	r2, [sp, #12]
 80114ae:	1bd7      	subs	r7, r2, r7
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80114b0:	9a06      	ldr	r2, [sp, #24]
 80114b2:	4402      	add	r2, r0
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80114b4:	12ff      	asrs	r7, r7, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80114b6:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80114b8:	f8c3 711c 	str.w	r7, [r3, #284]	; 0x11c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80114bc:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80114be:	9a06      	ldr	r2, [sp, #24]
 80114c0:	1a10      	subs	r0, r2, r0
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80114c2:	9a05      	ldr	r2, [sp, #20]
 80114c4:	444a      	add	r2, r9
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80114c6:	12c0      	asrs	r0, r0, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80114c8:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80114ca:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 80114ce:	9802      	ldr	r0, [sp, #8]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80114d0:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80114d2:	9a05      	ldr	r2, [sp, #20]
 80114d4:	eba2 0909 	sub.w	r9, r2, r9
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80114d8:	9a07      	ldr	r2, [sp, #28]
 80114da:	4442      	add	r2, r8
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80114dc:	ea4f 24e9 	mov.w	r4, r9, asr #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80114e0:	12d2      	asrs	r2, r2, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80114e2:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80114e6:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80114e8:	9a07      	ldr	r2, [sp, #28]
 80114ea:	eba2 0808 	sub.w	r8, r2, r8
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 80114ee:	f645 02ad 	movw	r2, #22701	; 0x58ad
 80114f2:	fb02 c210 	mls	r2, r2, r0, ip
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80114f6:	ea4f 24e8 	mov.w	r4, r8, asr #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
 80114fa:	12d2      	asrs	r2, r2, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80114fc:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
 8011500:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011506:	455a      	cmp	r2, fp
 8011508:	f47f af1a 	bne.w	8011340 <jpeg_idct_11x11+0x20>
 801150c:	9b08      	ldr	r3, [sp, #32]
 801150e:	f1a3 0e04 	sub.w	lr, r3, #4
 8011512:	3328      	adds	r3, #40	; 0x28
 8011514:	9309      	str	r3, [sp, #36]	; 0x24
  }

  /* Pass 2: process 11 rows from work array, store into output array. */

  wsptr = workspace;
 8011516:	ab0a      	add	r3, sp, #40	; 0x28
  for (ctr = 0; ctr < 11; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011518:	f85e 2f04 	ldr.w	r2, [lr, #4]!

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 801151c:	f245 1c7e 	movw	ip, #20862	; 0x517e
    outptr = output_buf[ctr] + output_col;
 8011520:	996c      	ldr	r1, [sp, #432]	; 0x1b0
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8011522:	f640 5ac9 	movw	sl, #3529	; 0xdc9
    z3 = (INT32) wsptr[6];
 8011526:	699c      	ldr	r4, [r3, #24]
			     & RANGE_MASK];
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8011528:	3320      	adds	r3, #32
    outptr = output_buf[ctr] + output_col;
 801152a:	9208      	str	r2, [sp, #32]
 801152c:	440a      	add	r2, r1
    z2 = (INT32) wsptr[4];
 801152e:	f853 1c10 	ldr.w	r1, [r3, #-16]
    z1 = (INT32) wsptr[2];
 8011532:	f853 5c18 	ldr.w	r5, [r3, #-24]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8011536:	1b08      	subs	r0, r1, r4
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011538:	f853 7c20 	ldr.w	r7, [r3, #-32]
    z4 = z1 + z3;
 801153c:	eb05 0804 	add.w	r8, r5, r4
    z3 = (INT32) wsptr[5];
 8011540:	f853 9c0c 	ldr.w	r9, [r3, #-12]
    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8011544:	fb0c fc00 	mul.w	ip, ip, r0
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8011548:	1b48      	subs	r0, r1, r5
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801154a:	3710      	adds	r7, #16
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 801154c:	fb0a fa00 	mul.w	sl, sl, r0
    z4 -= z2;
 8011550:	eba8 0001 	sub.w	r0, r8, r1
 8011554:	9002      	str	r0, [sp, #8]
    tmp10 <<= CONST_BITS;
 8011556:	0378      	lsls	r0, r7, #13
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8011558:	9e02      	ldr	r6, [sp, #8]
 801155a:	f642 376c 	movw	r7, #11116	; 0x2b6c
 801155e:	fb07 0706 	mla	r7, r7, r6, r0
    tmp21 = tmp20 + tmp23 + tmp25 -
 8011562:	eb0c 060a 	add.w	r6, ip, sl
 8011566:	4861      	ldr	r0, [pc, #388]	; (80116ec <jpeg_idct_11x11+0x3cc>)
 8011568:	443e      	add	r6, r7
 801156a:	fb00 6001 	mla	r0, r0, r1, r6
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 801156e:	f641 466a 	movw	r6, #7274	; 0x1c6a
    tmp21 = tmp20 + tmp23 + tmp25 -
 8011572:	9003      	str	r0, [sp, #12]
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8011574:	f244 30b5 	movw	r0, #17333	; 0x43b5
 8011578:	fb00 7004 	mla	r0, r0, r4, r7
 801157c:	4460      	add	r0, ip
 801157e:	9004      	str	r0, [sp, #16]
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8011580:	485b      	ldr	r0, [pc, #364]	; (80116f0 <jpeg_idct_11x11+0x3d0>)
 8011582:	fb00 7b05 	mla	fp, r0, r5, r7
 8011586:	eb0b 000a 	add.w	r0, fp, sl
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 801158a:	f241 5b74 	movw	fp, #5492	; 0x1574
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 801158e:	9005      	str	r0, [sp, #20]
    tmp24 += tmp25;
 8011590:	4858      	ldr	r0, [pc, #352]	; (80116f4 <jpeg_idct_11x11+0x3d4>)
 8011592:	fb00 7808 	mla	r8, r0, r8, r7
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8011596:	f600 30be 	addw	r0, r0, #3006	; 0xbbe
 801159a:	fb00 8004 	mla	r0, r0, r4, r8
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 801159e:	f643 6439 	movw	r4, #15929	; 0x3e39
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 80115a2:	9006      	str	r0, [sp, #24]
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 80115a4:	4854      	ldr	r0, [pc, #336]	; (80116f8 <jpeg_idct_11x11+0x3d8>)
 80115a6:	4345      	muls	r5, r0
    z2 = (INT32) wsptr[3];
 80115a8:	f853 0c14 	ldr.w	r0, [r3, #-20]
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80115ac:	fb04 5501 	mla	r5, r4, r1, r5
    z1 = (INT32) wsptr[1];
 80115b0:	f853 4c1c 	ldr.w	r4, [r3, #-28]
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80115b4:	eb05 0108 	add.w	r1, r5, r8
    tmp11 = z1 + z2;
 80115b8:	1825      	adds	r5, r4, r0
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 80115ba:	9107      	str	r1, [sp, #28]
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80115bc:	eb09 0805 	add.w	r8, r9, r5
    z4 = (INT32) wsptr[7];
 80115c0:	f853 1c04 	ldr.w	r1, [r3, #-4]
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 80115c4:	4375      	muls	r5, r6
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 80115c6:	eb04 0609 	add.w	r6, r4, r9
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80115ca:	eb08 0c01 	add.w	ip, r8, r1
 80115ce:	f44f 684c 	mov.w	r8, #3264	; 0xcc0
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 80115d2:	fb0b fb06 	mul.w	fp, fp, r6
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 80115d6:	eb04 0a01 	add.w	sl, r4, r1
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 80115da:	fb08 f80c 	mul.w	r8, r8, ip
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 80115de:	f640 36b8 	movw	r6, #3000	; 0xbb8
    tmp10 = tmp11 + tmp12 + tmp13 -
 80115e2:	eb05 0c0b 	add.w	ip, r5, fp
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 80115e6:	fb06 8a0a 	mla	sl, r6, sl, r8
    tmp10 = tmp11 + tmp12 + tmp13 -
 80115ea:	4e44      	ldr	r6, [pc, #272]	; (80116fc <jpeg_idct_11x11+0x3dc>)
 80115ec:	44d4      	add	ip, sl
 80115ee:	fb06 cc04 	mla	ip, r6, r4, ip
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 80115f2:	eb00 0409 	add.w	r4, r0, r9
 80115f6:	f2a6 76ad 	subw	r6, r6, #1965	; 0x7ad
 80115fa:	fb06 8404 	mla	r4, r6, r4, r8
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 80115fe:	f244 2658 	movw	r6, #16984	; 0x4258
 8011602:	fb06 4600 	mla	r6, r6, r0, r4
 8011606:	442e      	add	r6, r5
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8011608:	4d3d      	ldr	r5, [pc, #244]	; (8011700 <jpeg_idct_11x11+0x3e0>)
 801160a:	fb05 4409 	mla	r4, r5, r9, r4
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 801160e:	4d3d      	ldr	r5, [pc, #244]	; (8011704 <jpeg_idct_11x11+0x3e4>)
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8011610:	445c      	add	r4, fp
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8011612:	eb00 0b01 	add.w	fp, r0, r1
 8011616:	fb05 fb0b 	mul.w	fp, r5, fp
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 801161a:	f244 3547 	movw	r5, #17223	; 0x4347
 801161e:	fb05 b501 	mla	r5, r5, r1, fp
    tmp11 += z1;
 8011622:	445e      	add	r6, fp
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8011624:	44aa      	add	sl, r5
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8011626:	f242 050b 	movw	r5, #8203	; 0x200b
 801162a:	fb05 f909 	mul.w	r9, r5, r9
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 801162e:	4d36      	ldr	r5, [pc, #216]	; (8011708 <jpeg_idct_11x11+0x3e8>)
 8011630:	fb05 9900 	mla	r9, r5, r0, r9
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8011634:	f2a5 65f7 	subw	r5, r5, #1783	; 0x6f7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011638:	9801      	ldr	r0, [sp, #4]
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 801163a:	fb05 9901 	mla	r9, r5, r1, r9
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801163e:	9904      	ldr	r1, [sp, #16]
 8011640:	9d6c      	ldr	r5, [sp, #432]	; 0x1b0
 8011642:	4461      	add	r1, ip
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8011644:	44c8      	add	r8, r9
			     & RANGE_MASK];
 8011646:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801164a:	5c41      	ldrb	r1, [r0, r1]
 801164c:	9808      	ldr	r0, [sp, #32]
 801164e:	5541      	strb	r1, [r0, r5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011650:	9904      	ldr	r1, [sp, #16]
 8011652:	eba1 000c 	sub.w	r0, r1, ip
 8011656:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 8011658:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801165c:	5c09      	ldrb	r1, [r1, r0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801165e:	9801      	ldr	r0, [sp, #4]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011660:	7291      	strb	r1, [r2, #10]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011662:	9903      	ldr	r1, [sp, #12]
 8011664:	4431      	add	r1, r6
			     & RANGE_MASK];
 8011666:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801166a:	5c41      	ldrb	r1, [r0, r1]
 801166c:	7051      	strb	r1, [r2, #1]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801166e:	9903      	ldr	r1, [sp, #12]
 8011670:	1b8e      	subs	r6, r1, r6
			     & RANGE_MASK];
 8011672:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011676:	5d81      	ldrb	r1, [r0, r6]
 8011678:	7251      	strb	r1, [r2, #9]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801167a:	9906      	ldr	r1, [sp, #24]
 801167c:	4421      	add	r1, r4
			     & RANGE_MASK];
 801167e:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011682:	5c41      	ldrb	r1, [r0, r1]
 8011684:	7091      	strb	r1, [r2, #2]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011686:	9906      	ldr	r1, [sp, #24]
 8011688:	1b0c      	subs	r4, r1, r4
			     & RANGE_MASK];
 801168a:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801168e:	5d01      	ldrb	r1, [r0, r4]
 8011690:	7211      	strb	r1, [r2, #8]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011692:	9905      	ldr	r1, [sp, #20]
 8011694:	4451      	add	r1, sl
			     & RANGE_MASK];
 8011696:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801169a:	5c41      	ldrb	r1, [r0, r1]
 801169c:	70d1      	strb	r1, [r2, #3]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801169e:	9905      	ldr	r1, [sp, #20]
 80116a0:	eba1 0a0a 	sub.w	sl, r1, sl
			     & RANGE_MASK];
 80116a4:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80116a8:	f810 100a 	ldrb.w	r1, [r0, sl]
 80116ac:	71d1      	strb	r1, [r2, #7]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80116ae:	9907      	ldr	r1, [sp, #28]
 80116b0:	4441      	add	r1, r8
			     & RANGE_MASK];
 80116b2:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80116b6:	5c41      	ldrb	r1, [r0, r1]
 80116b8:	7111      	strb	r1, [r2, #4]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80116ba:	9907      	ldr	r1, [sp, #28]
 80116bc:	eba1 0808 	sub.w	r8, r1, r8
			     & RANGE_MASK];
 80116c0:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80116c4:	f810 1008 	ldrb.w	r1, [r0, r8]
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 80116c8:	9802      	ldr	r0, [sp, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80116ca:	7191      	strb	r1, [r2, #6]
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 80116cc:	f645 01ad 	movw	r1, #22701	; 0x58ad
 80116d0:	fb01 7710 	mls	r7, r1, r0, r7
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 80116d4:	9901      	ldr	r1, [sp, #4]
			     & RANGE_MASK];
 80116d6:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 80116da:	5dc9      	ldrb	r1, [r1, r7]
 80116dc:	7151      	strb	r1, [r2, #5]
  for (ctr = 0; ctr < 11; ctr++) {
 80116de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80116e0:	4572      	cmp	r2, lr
 80116e2:	f47f af19 	bne.w	8011518 <jpeg_idct_11x11+0x1f8>
  }
}
 80116e6:	b063      	add	sp, #396	; 0x18c
 80116e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116ec:	ffffc5b4 	.word	0xffffc5b4
 80116f0:	ffffcf91 	.word	0xffffcf91
 80116f4:	ffffdb05 	.word	0xffffdb05
 80116f8:	ffffd37d 	.word	0xffffd37d
 80116fc:	ffffe276 	.word	0xffffe276
 8011700:	ffffd9da 	.word	0xffffd9da
 8011704:	ffffc675 	.word	0xffffc675
 8011708:	ffffd10d 	.word	0xffffd10d

0801170c <jpeg_idct_12x12>:

GLOBAL(void)
jpeg_idct_12x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801170c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011710:	b0eb      	sub	sp, #428	; 0x1ac
 8011712:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8011714:	f1a2 0a02 	sub.w	sl, r2, #2
 8011718:	9308      	str	r3, [sp, #32]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801171a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801171e:	f103 0880 	add.w	r8, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011722:	1f0b      	subs	r3, r1, #4
 8011724:	9300      	str	r3, [sp, #0]
 8011726:	f102 030e 	add.w	r3, r2, #14
 801172a:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 801172c:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801172e:	9900      	ldr	r1, [sp, #0]
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8011730:	f640 09f7 	movw	r9, #2295	; 0x8f7
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011734:	f93a 2f02 	ldrsh.w	r2, [sl, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011738:	3304      	adds	r3, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801173a:	f851 4f04 	ldr.w	r4, [r1, #4]!
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801173e:	f9ba b040 	ldrsh.w	fp, [sl, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011742:	4354      	muls	r4, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011744:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011748:	f9ba 5060 	ldrsh.w	r5, [sl, #96]	; 0x60
 801174c:	f8d1 60c0 	ldr.w	r6, [r1, #192]	; 0xc0
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011750:	fb02 fb0b 	mul.w	fp, r2, fp
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8011754:	f242 7231 	movw	r2, #10033	; 0x2731
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011758:	6c0f      	ldr	r7, [r1, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801175a:	436e      	muls	r6, r5
    z3 <<= CONST_BITS;
 801175c:	0364      	lsls	r4, r4, #13
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801175e:	fb02 fb0b 	mul.w	fp, r2, fp
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011762:	f9ba 2020 	ldrsh.w	r2, [sl, #32]
    z2 <<= CONST_BITS;
 8011766:	0376      	lsls	r6, r6, #13
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011768:	f504 6480 	add.w	r4, r4, #1024	; 0x400
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801176c:	4357      	muls	r7, r2
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 801176e:	f642 32b6 	movw	r2, #11190	; 0x2bb6
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011772:	9100      	str	r1, [sp, #0]
    tmp10 = z3 + z4;
 8011774:	eb04 000b 	add.w	r0, r4, fp
    tmp12 = z1 - z2;
 8011778:	ebc6 3547 	rsb	r5, r6, r7, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 801177c:	437a      	muls	r2, r7
    tmp11 = z3 - z4;
 801177e:	eba4 0b0b 	sub.w	fp, r4, fp
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011782:	f9ba c030 	ldrsh.w	ip, [sl, #48]	; 0x30
    tmp21 = z3 + tmp12;
 8011786:	1961      	adds	r1, r4, r5
    tmp12 = z4 + z2;
 8011788:	eb02 0e06 	add.w	lr, r2, r6
    tmp12 = z4 - z1 - z2;
 801178c:	eba2 3247 	sub.w	r2, r2, r7, lsl #13
    tmp21 = z3 + tmp12;
 8011790:	9101      	str	r1, [sp, #4]
    tmp24 = z3 - tmp12;
 8011792:	1b61      	subs	r1, r4, r5
    tmp12 = z4 - z1 - z2;
 8011794:	1b96      	subs	r6, r2, r6
    tmp24 = z3 - tmp12;
 8011796:	9102      	str	r1, [sp, #8]
    tmp20 = tmp10 + tmp12;
 8011798:	eb00 010e 	add.w	r1, r0, lr
    tmp22 = tmp11 + tmp12;
 801179c:	eb0b 0206 	add.w	r2, fp, r6
    tmp20 = tmp10 + tmp12;
 80117a0:	9103      	str	r1, [sp, #12]
    tmp25 = tmp10 - tmp12;
 80117a2:	eba0 010e 	sub.w	r1, r0, lr
    tmp22 = tmp11 + tmp12;
 80117a6:	9205      	str	r2, [sp, #20]
    tmp23 = tmp11 - tmp12;
 80117a8:	ebab 0206 	sub.w	r2, fp, r6
    tmp25 = tmp10 - tmp12;
 80117ac:	9104      	str	r1, [sp, #16]
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80117ae:	f641 3e8d 	movw	lr, #7053	; 0x1b8d
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80117b2:	9900      	ldr	r1, [sp, #0]
    tmp23 = tmp11 - tmp12;
 80117b4:	9206      	str	r2, [sp, #24]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80117b6:	6e0c      	ldr	r4, [r1, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80117b8:	f9ba 2010 	ldrsh.w	r2, [sl, #16]
 80117bc:	6a0f      	ldr	r7, [r1, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80117be:	fb04 fc0c 	mul.w	ip, r4, ip
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80117c2:	f8d1 40a0 	ldr.w	r4, [r1, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80117c6:	4357      	muls	r7, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80117c8:	f9ba 2050 	ldrsh.w	r2, [sl, #80]	; 0x50
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80117cc:	f9ba 0070 	ldrsh.w	r0, [sl, #112]	; 0x70
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80117d0:	4354      	muls	r4, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80117d2:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80117d6:	f642 11cf 	movw	r1, #10703	; 0x29cf
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80117da:	4342      	muls	r2, r0
    tmp10 = z1 + z3;
 80117dc:	193e      	adds	r6, r7, r4
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80117de:	fb01 fb0c 	mul.w	fp, r1, ip
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80117e2:	49af      	ldr	r1, [pc, #700]	; (8011aa0 <jpeg_idct_12x12+0x394>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80117e4:	1995      	adds	r5, r2, r6
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80117e6:	fb01 f00c 	mul.w	r0, r1, ip
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80117ea:	fb0e fe05 	mul.w	lr, lr, r5
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80117ee:	f640 055b 	movw	r5, #2139	; 0x85b
 80117f2:	fb05 e106 	mla	r1, r5, r6, lr
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80117f6:	eb0b 0501 	add.w	r5, fp, r1
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80117fa:	9107      	str	r1, [sp, #28]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80117fc:	49a9      	ldr	r1, [pc, #676]	; (8011aa4 <jpeg_idct_12x12+0x398>)
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80117fe:	ebae 0b0b 	sub.w	fp, lr, fp
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8011802:	fb09 5907 	mla	r9, r9, r7, r5
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8011806:	18a5      	adds	r5, r4, r2
 8011808:	434d      	muls	r5, r1
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801180a:	f6a1 51db 	subw	r1, r1, #3547	; 0xddb
 801180e:	1946      	adds	r6, r0, r5
 8011810:	fb01 6604 	mla	r6, r1, r4, r6
 8011814:	9907      	ldr	r1, [sp, #28]
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 8011816:	ebac 0404 	sub.w	r4, ip, r4
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801181a:	f241 1c51 	movw	ip, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801181e:	440e      	add	r6, r1
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011820:	f243 21c6 	movw	r1, #12998	; 0x32c6
 8011824:	fb01 bb02 	mla	fp, r1, r2, fp
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011828:	499f      	ldr	r1, [pc, #636]	; (8011aa8 <jpeg_idct_12x12+0x39c>)
 801182a:	fb01 0007 	mla	r0, r1, r7, r0
 801182e:	499f      	ldr	r1, [pc, #636]	; (8011aac <jpeg_idct_12x12+0x3a0>)
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8011830:	44ab      	add	fp, r5
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011832:	fb01 0002 	mla	r0, r1, r2, r0
    z1 -= z4;
 8011836:	1aba      	subs	r2, r7, r2
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8011838:	f201 4153 	addw	r1, r1, #1107	; 0x453
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 801183c:	f641 077e 	movw	r7, #6270	; 0x187e
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8011840:	1915      	adds	r5, r2, r4
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011842:	4470      	add	r0, lr
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8011844:	fb0c f505 	mul.w	r5, ip, r5
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8011848:	fb01 5404 	mla	r4, r1, r4, r5

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801184c:	9903      	ldr	r1, [sp, #12]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 801184e:	fb07 5202 	mla	r2, r7, r2, r5
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011852:	eb01 0709 	add.w	r7, r1, r9
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011856:	eba1 0909 	sub.w	r9, r1, r9
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801185a:	9901      	ldr	r1, [sp, #4]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801185c:	ea4f 25e9 	mov.w	r5, r9, asr #11
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011860:	12ff      	asrs	r7, r7, #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011862:	f8c3 515c 	str.w	r5, [r3, #348]	; 0x15c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011866:	188d      	adds	r5, r1, r2
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011868:	1a8a      	subs	r2, r1, r2
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801186a:	f843 7c04 	str.w	r7, [r3, #-4]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801186e:	12ed      	asrs	r5, r5, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011870:	12d2      	asrs	r2, r2, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011872:	61dd      	str	r5, [r3, #28]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011874:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011878:	9a05      	ldr	r2, [sp, #20]
 801187a:	4432      	add	r2, r6
 801187c:	12d2      	asrs	r2, r2, #11
 801187e:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011880:	9a05      	ldr	r2, [sp, #20]
 8011882:	1b96      	subs	r6, r2, r6
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011884:	9a06      	ldr	r2, [sp, #24]
 8011886:	445a      	add	r2, fp
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011888:	12f6      	asrs	r6, r6, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801188a:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801188c:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011890:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011892:	9a06      	ldr	r2, [sp, #24]
 8011894:	eba2 0b0b 	sub.w	fp, r2, fp
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011898:	9a02      	ldr	r2, [sp, #8]
 801189a:	4422      	add	r2, r4
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801189c:	ea4f 25eb 	mov.w	r5, fp, asr #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80118a0:	12d2      	asrs	r2, r2, #11
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80118a2:	f8c3 50fc 	str.w	r5, [r3, #252]	; 0xfc
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80118a6:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80118a8:	9a02      	ldr	r2, [sp, #8]
 80118aa:	1b14      	subs	r4, r2, r4
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80118ac:	9a04      	ldr	r2, [sp, #16]
 80118ae:	4402      	add	r2, r0
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80118b0:	12e4      	asrs	r4, r4, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80118b2:	12d2      	asrs	r2, r2, #11
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80118b4:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80118b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80118bc:	9a04      	ldr	r2, [sp, #16]
 80118be:	1a10      	subs	r0, r2, r0
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80118c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80118c2:	12c0      	asrs	r0, r0, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80118c4:	4552      	cmp	r2, sl
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80118c6:	f8c3 00bc 	str.w	r0, [r3, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80118ca:	f47f af30 	bne.w	801172e <jpeg_idct_12x12+0x22>
 80118ce:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array. */

  wsptr = workspace;
 80118d0:	aa0a      	add	r2, sp, #40	; 0x28
 80118d2:	3b04      	subs	r3, #4
 80118d4:	9300      	str	r3, [sp, #0]
 80118d6:	9b08      	ldr	r3, [sp, #32]
 80118d8:	332c      	adds	r3, #44	; 0x2c
 80118da:	9309      	str	r3, [sp, #36]	; 0x24
  for (ctr = 0; ctr < 12; ctr++) {
    outptr = output_buf[ctr] + output_col;
 80118dc:	9b00      	ldr	r3, [sp, #0]

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    z1 = (INT32) wsptr[2];
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80118de:	f642 30b6 	movw	r0, #11190	; 0x2bb6
    z4 = (INT32) wsptr[4];
 80118e2:	6915      	ldr	r5, [r2, #16]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80118e4:	f641 3e8d 	movw	lr, #7053	; 0x1b8d
    outptr = output_buf[ctr] + output_col;
 80118e8:	4619      	mov	r1, r3
    z2 = (INT32) wsptr[6];
 80118ea:	6996      	ldr	r6, [r2, #24]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80118ec:	6814      	ldr	r4, [r2, #0]
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80118ee:	f640 0af7 	movw	sl, #2295	; 0x8f7
    outptr = output_buf[ctr] + output_col;
 80118f2:	f851 3f04 	ldr.w	r3, [r1, #4]!
    z2 <<= CONST_BITS;
 80118f6:	0376      	lsls	r6, r6, #13
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80118f8:	3410      	adds	r4, #16
    z1 = (INT32) wsptr[1];
 80118fa:	f8d2 9004 	ldr.w	r9, [r2, #4]
    outptr = output_buf[ctr] + output_col;
 80118fe:	9308      	str	r3, [sp, #32]
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8011900:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8011902:	9b08      	ldr	r3, [sp, #32]
 8011904:	9100      	str	r1, [sp, #0]
 8011906:	9974      	ldr	r1, [sp, #464]	; 0x1d0
 8011908:	440b      	add	r3, r1
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801190a:	f242 7131 	movw	r1, #10033	; 0x2731
 801190e:	434d      	muls	r5, r1
    z1 = (INT32) wsptr[2];
 8011910:	f852 1c18 	ldr.w	r1, [r2, #-24]
    tmp12 = z1 - z2;
 8011914:	ebc6 3b41 	rsb	fp, r6, r1, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8011918:	4348      	muls	r0, r1
    tmp10 = z3 + z4;
 801191a:	eb05 3c44 	add.w	ip, r5, r4, lsl #13
    tmp21 = z3 + tmp12;
 801191e:	eb0b 3744 	add.w	r7, fp, r4, lsl #13
    tmp11 = z3 - z4;
 8011922:	ebc5 3544 	rsb	r5, r5, r4, lsl #13
    tmp24 = z3 - tmp12;
 8011926:	ebcb 3444 	rsb	r4, fp, r4, lsl #13
    tmp21 = z3 + tmp12;
 801192a:	9701      	str	r7, [sp, #4]
    z2 = (INT32) wsptr[3];
 801192c:	f852 bc14 	ldr.w	fp, [r2, #-20]
    tmp24 = z3 - tmp12;
 8011930:	9402      	str	r4, [sp, #8]
    tmp12 = z4 + z2;
 8011932:	1984      	adds	r4, r0, r6
    tmp12 = z4 - z1 - z2;
 8011934:	eba0 3041 	sub.w	r0, r0, r1, lsl #13
    tmp20 = tmp10 + tmp12;
 8011938:	eb0c 0704 	add.w	r7, ip, r4
    tmp25 = tmp10 - tmp12;
 801193c:	ebac 0404 	sub.w	r4, ip, r4
    tmp12 = z4 - z1 - z2;
 8011940:	1b86      	subs	r6, r0, r6
    z4 = (INT32) wsptr[7];
 8011942:	f852 0c04 	ldr.w	r0, [r2, #-4]
    tmp25 = tmp10 - tmp12;
 8011946:	9404      	str	r4, [sp, #16]
    tmp22 = tmp11 + tmp12;
 8011948:	19a9      	adds	r1, r5, r6
    z3 = (INT32) wsptr[5];
 801194a:	f852 4c0c 	ldr.w	r4, [r2, #-12]
    tmp20 = tmp10 + tmp12;
 801194e:	9703      	str	r7, [sp, #12]
    tmp22 = tmp11 + tmp12;
 8011950:	9105      	str	r1, [sp, #20]
    tmp23 = tmp11 - tmp12;
 8011952:	1ba9      	subs	r1, r5, r6
    tmp10 = z1 + z3;
 8011954:	eb09 0604 	add.w	r6, r9, r4
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8011958:	4f55      	ldr	r7, [pc, #340]	; (8011ab0 <jpeg_idct_12x12+0x3a4>)
    tmp23 = tmp11 - tmp12;
 801195a:	9106      	str	r1, [sp, #24]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801195c:	f642 11cf 	movw	r1, #10703	; 0x29cf
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8011960:	eb00 0c06 	add.w	ip, r0, r6
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8011964:	fb01 f50b 	mul.w	r5, r1, fp
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8011968:	494d      	ldr	r1, [pc, #308]	; (8011aa0 <jpeg_idct_12x12+0x394>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801196a:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801196e:	f640 0e5b 	movw	lr, #2139	; 0x85b
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8011972:	fb01 f10b 	mul.w	r1, r1, fp
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8011976:	fb0e ce06 	mla	lr, lr, r6, ip
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801197a:	eb05 060e 	add.w	r6, r5, lr
 801197e:	fb0a 6609 	mla	r6, sl, r9, r6
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8011982:	eb04 0a00 	add.w	sl, r4, r0
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8011986:	9607      	str	r6, [sp, #28]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8011988:	4e46      	ldr	r6, [pc, #280]	; (8011aa4 <jpeg_idct_12x12+0x398>)
 801198a:	fb06 fa0a 	mul.w	sl, r6, sl
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801198e:	eb01 060a 	add.w	r6, r1, sl
 8011992:	fb07 6604 	mla	r6, r7, r4, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8011996:	4f44      	ldr	r7, [pc, #272]	; (8011aa8 <jpeg_idct_12x12+0x39c>)
    z2 -= z3;
 8011998:	ebab 0404 	sub.w	r4, fp, r4
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801199c:	f241 1b51 	movw	fp, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 80119a0:	4476      	add	r6, lr
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80119a2:	fb07 1109 	mla	r1, r7, r9, r1
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80119a6:	ebac 0e05 	sub.w	lr, ip, r5
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80119aa:	4f40      	ldr	r7, [pc, #256]	; (8011aac <jpeg_idct_12x12+0x3a0>)
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80119ac:	f243 25c6 	movw	r5, #12998	; 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80119b0:	fb07 1100 	mla	r1, r7, r0, r1
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80119b4:	f207 4753 	addw	r7, r7, #1107	; 0x453
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80119b8:	fb05 e500 	mla	r5, r5, r0, lr
    z1 -= z4;
 80119bc:	eba9 0000 	sub.w	r0, r9, r0
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80119c0:	f641 097e 	movw	r9, #6270	; 0x187e
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80119c4:	4455      	add	r5, sl
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80119c6:	eb01 0a0c 	add.w	sl, r1, ip
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80119ca:	eb00 0c04 	add.w	ip, r0, r4
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80119ce:	9903      	ldr	r1, [sp, #12]
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80119d0:	fb0b fc0c 	mul.w	ip, fp, ip
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80119d4:	fb07 c404 	mla	r4, r7, r4, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80119d8:	9f07      	ldr	r7, [sp, #28]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80119da:	fb09 c000 	mla	r0, r9, r0, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80119de:	eb01 0e07 	add.w	lr, r1, r7
 80119e2:	9f08      	ldr	r7, [sp, #32]
			     & RANGE_MASK];
 80119e4:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80119e8:	f818 c00e 	ldrb.w	ip, [r8, lr]
 80119ec:	46be      	mov	lr, r7
 80119ee:	9f74      	ldr	r7, [sp, #464]	; 0x1d0
 80119f0:	f80e c007 	strb.w	ip, [lr, r7]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80119f4:	9f07      	ldr	r7, [sp, #28]
 80119f6:	1bcf      	subs	r7, r1, r7
			     & RANGE_MASK];
 80119f8:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80119fc:	f818 7007 	ldrb.w	r7, [r8, r7]
 8011a00:	72df      	strb	r7, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011a02:	9f01      	ldr	r7, [sp, #4]
 8011a04:	4407      	add	r7, r0
			     & RANGE_MASK];
 8011a06:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011a0a:	f818 7007 	ldrb.w	r7, [r8, r7]
 8011a0e:	705f      	strb	r7, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011a10:	9f01      	ldr	r7, [sp, #4]
 8011a12:	1a38      	subs	r0, r7, r0
			     & RANGE_MASK];
 8011a14:	f3c0 4989 	ubfx	r9, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011a18:	f818 0009 	ldrb.w	r0, [r8, r9]
 8011a1c:	7298      	strb	r0, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011a1e:	9805      	ldr	r0, [sp, #20]
 8011a20:	4430      	add	r0, r6
			     & RANGE_MASK];
 8011a22:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011a26:	f818 0000 	ldrb.w	r0, [r8, r0]
 8011a2a:	7098      	strb	r0, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011a2c:	9805      	ldr	r0, [sp, #20]
 8011a2e:	1b86      	subs	r6, r0, r6
			     & RANGE_MASK];
 8011a30:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011a34:	f818 0006 	ldrb.w	r0, [r8, r6]
 8011a38:	7258      	strb	r0, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011a3a:	9806      	ldr	r0, [sp, #24]
 8011a3c:	4428      	add	r0, r5
			     & RANGE_MASK];
 8011a3e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011a42:	f818 0000 	ldrb.w	r0, [r8, r0]
 8011a46:	70d8      	strb	r0, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011a48:	9806      	ldr	r0, [sp, #24]
 8011a4a:	1b45      	subs	r5, r0, r5
			     & RANGE_MASK];
 8011a4c:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011a50:	f818 0005 	ldrb.w	r0, [r8, r5]
 8011a54:	7218      	strb	r0, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011a56:	9802      	ldr	r0, [sp, #8]
 8011a58:	4420      	add	r0, r4
			     & RANGE_MASK];
 8011a5a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011a5e:	f818 0000 	ldrb.w	r0, [r8, r0]
 8011a62:	7118      	strb	r0, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011a64:	9802      	ldr	r0, [sp, #8]
 8011a66:	1b04      	subs	r4, r0, r4
			     & RANGE_MASK];
 8011a68:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011a6c:	f818 0004 	ldrb.w	r0, [r8, r4]
 8011a70:	71d8      	strb	r0, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011a72:	9804      	ldr	r0, [sp, #16]
 8011a74:	4450      	add	r0, sl
			     & RANGE_MASK];
 8011a76:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011a7a:	f818 0000 	ldrb.w	r0, [r8, r0]
 8011a7e:	7158      	strb	r0, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011a80:	9804      	ldr	r0, [sp, #16]
 8011a82:	eba0 010a 	sub.w	r1, r0, sl
			     & RANGE_MASK];
 8011a86:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011a8a:	f818 1001 	ldrb.w	r1, [r8, r1]
 8011a8e:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 12; ctr++) {
 8011a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a92:	9900      	ldr	r1, [sp, #0]
 8011a94:	428b      	cmp	r3, r1
 8011a96:	f47f af21 	bne.w	80118dc <jpeg_idct_12x12+0x1d0>
  }
}
 8011a9a:	b06b      	add	sp, #428	; 0x1ac
 8011a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aa0:	ffffeeaf 	.word	0xffffeeaf
 8011aa4:	ffffde8b 	.word	0xffffde8b
 8011aa8:	ffffea5c 	.word	0xffffea5c
 8011aac:	ffffc08c 	.word	0xffffc08c
 8011ab0:	ffffd0b0 	.word	0xffffd0b0

08011ab4 <jpeg_idct_13x13>:

GLOBAL(void)
jpeg_idct_13x13 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ab8:	b0f9      	sub	sp, #484	; 0x1e4
 8011aba:	1e95      	subs	r5, r2, #2
 8011abc:	930d      	str	r3, [sp, #52]	; 0x34
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011abe:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011ac2:	3380      	adds	r3, #128	; 0x80
 8011ac4:	9301      	str	r3, [sp, #4]
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011ac6:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8011ac8:	f1a3 0b04 	sub.w	fp, r3, #4
 8011acc:	f102 030e 	add.w	r3, r2, #14
 8011ad0:	930f      	str	r3, [sp, #60]	; 0x3c
  wsptr = workspace;
 8011ad2:	ab10      	add	r3, sp, #64	; 0x40
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011ad4:	f935 1f02 	ldrsh.w	r1, [r5, #2]!

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011ad8:	f240 3919 	movw	r9, #793	; 0x319
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011adc:	f85b 2f04 	ldr.w	r2, [fp, #4]!

    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8011ae0:	f642 3ef1 	movw	lr, #11249	; 0x2bf1
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011ae4:	f9b5 0040 	ldrsh.w	r0, [r5, #64]	; 0x40
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */

    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */

    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011ae8:	f242 1ce0 	movw	ip, #8672	; 0x21e0
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011aec:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011aee:	f8db 6040 	ldr.w	r6, [fp, #64]	; 0x40
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011af2:	f9b5 1060 	ldrsh.w	r1, [r5, #96]	; 0x60
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011af6:	f641 6802 	movw	r8, #7682	; 0x1e02
    z1 <<= CONST_BITS;
 8011afa:	0352      	lsls	r2, r2, #13
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011afc:	f8db 70e0 	ldr.w	r7, [fp, #224]	; 0xe0
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011b00:	3304      	adds	r3, #4
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011b02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011b06:	9205      	str	r2, [sp, #20]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011b08:	f9b5 2020 	ldrsh.w	r2, [r5, #32]
 8011b0c:	4356      	muls	r6, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011b0e:	f8db 2080 	ldr.w	r2, [fp, #128]	; 0x80
 8011b12:	4350      	muls	r0, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011b14:	f8db 20c0 	ldr.w	r2, [fp, #192]	; 0xc0
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011b18:	fb0c fc06 	mul.w	ip, ip, r6
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011b1c:	434a      	muls	r2, r1
    tmp10 = z3 + z4;
 8011b1e:	1881      	adds	r1, r0, r2
    tmp11 = z3 - z4;
 8011b20:	1a82      	subs	r2, r0, r2
 8011b22:	9204      	str	r2, [sp, #16]
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8011b24:	f242 42f9 	movw	r2, #9465	; 0x24f9
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011b28:	e9dd 0404 	ldrd	r0, r4, [sp, #16]
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8011b2c:	434a      	muls	r2, r1
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011b2e:	fb09 4000 	mla	r0, r9, r0, r4
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011b32:	f640 497c 	movw	r9, #3196	; 0xc7c
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8011b36:	fb0e 2e06 	mla	lr, lr, r6, r2
 8011b3a:	eb0e 0400 	add.w	r4, lr, r0
 8011b3e:	9406      	str	r4, [sp, #24]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011b40:	f241 040c 	movw	r4, #4108	; 0x100c
 8011b44:	4374      	muls	r4, r6
 8011b46:	1aa4      	subs	r4, r4, r2
 8011b48:	1822      	adds	r2, r4, r0
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011b4a:	9c04      	ldr	r4, [sp, #16]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011b4c:	9207      	str	r2, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8011b4e:	f44f 6222 	mov.w	r2, #2592	; 0xa20
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011b52:	fb09 0904 	mla	r9, r9, r4, r0
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8011b56:	434a      	muls	r2, r1
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011b58:	ebac 0c02 	sub.w	ip, ip, r2
 8011b5c:	eb0c 0009 	add.w	r0, ip, r9
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011b60:	f642 2c50 	movw	ip, #10832	; 0x2a50
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011b64:	9008      	str	r0, [sp, #32]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011b66:	48d1      	ldr	r0, [pc, #836]	; (8011eac <jpeg_idct_13x13+0x3f8>)
 8011b68:	fb00 2206 	mla	r2, r0, r6, r2
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011b6c:	9805      	ldr	r0, [sp, #20]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011b6e:	444a      	add	r2, r9
 8011b70:	9209      	str	r2, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8011b72:	f640 52f2 	movw	r2, #3570	; 0xdf2
 8011b76:	4351      	muls	r1, r2
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011b78:	f641 52fe 	movw	r2, #7678	; 0x1dfe
 8011b7c:	4362      	muls	r2, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011b7e:	f8db 40a0 	ldr.w	r4, [fp, #160]	; 0xa0
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011b82:	1a12      	subs	r2, r2, r0
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8011b84:	48ca      	ldr	r0, [pc, #808]	; (8011eb0 <jpeg_idct_13x13+0x3fc>)
 8011b86:	fb00 fa06 	mul.w	sl, r0, r6
 8011b8a:	ebaa 0a01 	sub.w	sl, sl, r1
 8011b8e:	ebaa 0002 	sub.w	r0, sl, r2
 8011b92:	900a      	str	r0, [sp, #40]	; 0x28
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011b94:	48c7      	ldr	r0, [pc, #796]	; (8011eb4 <jpeg_idct_13x13+0x400>)
 8011b96:	fb00 1106 	mla	r1, r0, r6, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011b9a:	f9b5 0030 	ldrsh.w	r0, [r5, #48]	; 0x30
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011b9e:	1a8a      	subs	r2, r1, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011ba0:	f9b5 1010 	ldrsh.w	r1, [r5, #16]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011ba4:	920b      	str	r2, [sp, #44]	; 0x2c
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011ba6:	f8db 2020 	ldr.w	r2, [fp, #32]
 8011baa:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011bac:	f8db 1060 	ldr.w	r1, [fp, #96]	; 0x60
 8011bb0:	4341      	muls	r1, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011bb2:	f9b5 0050 	ldrsh.w	r0, [r5, #80]	; 0x50
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011bb6:	9202      	str	r2, [sp, #8]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011bb8:	4360      	muls	r0, r4
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011bba:	f9b5 4070 	ldrsh.w	r4, [r5, #112]	; 0x70
 8011bbe:	437c      	muls	r4, r7
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011bc0:	f242 573e 	movw	r7, #9534	; 0x253e
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011bc4:	9403      	str	r4, [sp, #12]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011bc6:	1854      	adds	r4, r2, r1
 8011bc8:	fb0c f404 	mul.w	r4, ip, r4
    tmp10 = tmp11 + tmp12 + tmp13 -
	    MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8011bcc:	f641 2ccb 	movw	ip, #6859	; 0x1acb
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011bd0:	940c      	str	r4, [sp, #48]	; 0x30
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011bd2:	1814      	adds	r4, r2, r0
 8011bd4:	4367      	muls	r7, r4
    tmp15 = z1 + z4;
 8011bd6:	9c03      	ldr	r4, [sp, #12]
 8011bd8:	eb02 0904 	add.w	r9, r2, r4
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011bdc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011bde:	fb08 fa09 	mul.w	sl, r8, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011be2:	eb04 0e07 	add.w	lr, r4, r7
 8011be6:	4cb4      	ldr	r4, [pc, #720]	; (8011eb8 <jpeg_idct_13x13+0x404>)
 8011be8:	44d6      	add	lr, sl
 8011bea:	fb04 ee02 	mla	lr, r4, r2, lr
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8011bee:	180c      	adds	r4, r1, r0
 8011bf0:	4ab2      	ldr	r2, [pc, #712]	; (8011ebc <jpeg_idct_13x13+0x408>)
 8011bf2:	4354      	muls	r4, r2
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8011bf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011bf6:	fb0c 4c01 	mla	ip, ip, r1, r4
 8011bfa:	4494      	add	ip, r2
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011bfc:	4ab0      	ldr	r2, [pc, #704]	; (8011ec0 <jpeg_idct_13x13+0x40c>)
 8011bfe:	fb02 4400 	mla	r4, r2, r0, r4
 8011c02:	19e2      	adds	r2, r4, r7
 8011c04:	920e      	str	r2, [sp, #56]	; 0x38
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011c06:	9a03      	ldr	r2, [sp, #12]
 8011c08:	188f      	adds	r7, r1, r2
 8011c0a:	4aae      	ldr	r2, [pc, #696]	; (8011ec4 <jpeg_idct_13x13+0x410>)
 8011c0c:	437a      	muls	r2, r7
    tmp11 += tmp14;
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011c0e:	f244 6794 	movw	r7, #18068	; 0x4694
    tmp11 += tmp14;
 8011c12:	4494      	add	ip, r2
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011c14:	920c      	str	r2, [sp, #48]	; 0x30
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011c16:	9a03      	ldr	r2, [sp, #12]
 8011c18:	4614      	mov	r4, r2
 8011c1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011c1c:	fb07 2704 	mla	r7, r7, r4, r2
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011c20:	4aa9      	ldr	r2, [pc, #676]	; (8011ec8 <jpeg_idct_13x13+0x414>)
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011c22:	4457      	add	r7, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011c24:	eb00 0a04 	add.w	sl, r0, r4
 8011c28:	fb02 fa0a 	mul.w	sl, r2, sl
    tmp12 += tmp14;
 8011c2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011c2e:	4452      	add	r2, sl
    tmp13 += tmp14;
 8011c30:	44ba      	add	sl, r7
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8011c32:	f640 27d5 	movw	r7, #2773	; 0xad5
    tmp12 += tmp14;
 8011c36:	4614      	mov	r4, r2
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8011c38:	9a02      	ldr	r2, [sp, #8]
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8011c3a:	fb07 f909 	mul.w	r9, r7, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8011c3e:	f640 2733 	movw	r7, #2611	; 0xa33
 8011c42:	fb07 9202 	mla	r2, r7, r2, r9
 8011c46:	4fa1      	ldr	r7, [pc, #644]	; (8011ecc <jpeg_idct_13x13+0x418>)
 8011c48:	fb07 2201 	mla	r2, r7, r1, r2
	    MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8011c4c:	1a41      	subs	r1, r0, r1
 8011c4e:	fb08 f801 	mul.w	r8, r8, r1
    tmp14 += z1;
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011c52:	f640 414e 	movw	r1, #3150	; 0xc4e
    tmp14 += z1;
 8011c56:	4442      	add	r2, r8
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011c58:	fb01 8800 	mla	r8, r1, r0, r8
 8011c5c:	f46f 515f 	mvn.w	r1, #14272	; 0x37c0
 8011c60:	9803      	ldr	r0, [sp, #12]
 8011c62:	fb01 8800 	mla	r8, r1, r0, r8
	     MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011c66:	9906      	ldr	r1, [sp, #24]
 8011c68:	4471      	add	r1, lr
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011c6a:	44c1      	add	r9, r8
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8011c6c:	12c9      	asrs	r1, r1, #11
 8011c6e:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8011c72:	9906      	ldr	r1, [sp, #24]
 8011c74:	eba1 0e0e 	sub.w	lr, r1, lr
 8011c78:	ea4f 21ee 	mov.w	r1, lr, asr #11
 8011c7c:	f8c3 117c 	str.w	r1, [r3, #380]	; 0x17c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8011c80:	9908      	ldr	r1, [sp, #32]
 8011c82:	4461      	add	r1, ip
 8011c84:	12c9      	asrs	r1, r1, #11
 8011c86:	61d9      	str	r1, [r3, #28]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8011c88:	9908      	ldr	r1, [sp, #32]
 8011c8a:	eba1 0c0c 	sub.w	ip, r1, ip
 8011c8e:	ea4f 21ec 	mov.w	r1, ip, asr #11
 8011c92:	f8c3 115c 	str.w	r1, [r3, #348]	; 0x15c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8011c96:	9907      	ldr	r1, [sp, #28]
 8011c98:	4421      	add	r1, r4
 8011c9a:	12c9      	asrs	r1, r1, #11
 8011c9c:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011c9e:	9907      	ldr	r1, [sp, #28]
 8011ca0:	1b0c      	subs	r4, r1, r4
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011ca2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011ca4:	4451      	add	r1, sl
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011ca6:	12e4      	asrs	r4, r4, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011ca8:	12c9      	asrs	r1, r1, #11
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8011caa:	f8c3 413c 	str.w	r4, [r3, #316]	; 0x13c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8011cae:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011cb0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011cb2:	eba1 0a0a 	sub.w	sl, r1, sl
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011cb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011cb8:	4411      	add	r1, r2
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011cba:	ea4f 27ea 	mov.w	r7, sl, asr #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011cbe:	12c9      	asrs	r1, r1, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8011cc0:	f8c3 711c 	str.w	r7, [r3, #284]	; 0x11c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8011cc4:	67d9      	str	r1, [r3, #124]	; 0x7c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8011cc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011cc8:	1a8a      	subs	r2, r1, r2
 8011cca:	12d2      	asrs	r2, r2, #11
 8011ccc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8011cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011cd2:	444a      	add	r2, r9
 8011cd4:	12d2      	asrs	r2, r2, #11
 8011cd6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011cda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011cdc:	eba2 0909 	sub.w	r9, r2, r9
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011ce0:	9a04      	ldr	r2, [sp, #16]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011ce2:	ea4f 21e9 	mov.w	r1, r9, asr #11
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011ce6:	1b96      	subs	r6, r2, r6
 8011ce8:	f642 5241 	movw	r2, #11585	; 0x2d41
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8011cec:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011cf0:	9905      	ldr	r1, [sp, #20]
 8011cf2:	fb02 1606 	mla	r6, r2, r6, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011cf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 8011cf8:	12f6      	asrs	r6, r6, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011cfa:	42aa      	cmp	r2, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 8011cfc:	f8c3 60bc 	str.w	r6, [r3, #188]	; 0xbc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011d00:	f47f aee8 	bne.w	8011ad4 <jpeg_idct_13x13+0x20>
 8011d04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  }

  /* Pass 2: process 13 rows from work array, store into output array. */

  wsptr = workspace;
 8011d06:	ac10      	add	r4, sp, #64	; 0x40
 8011d08:	3b04      	subs	r3, #4
 8011d0a:	9305      	str	r3, [sp, #20]
 8011d0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d0e:	3330      	adds	r3, #48	; 0x30
 8011d10:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 13; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8011d12:	9b05      	ldr	r3, [sp, #20]
    z4 = (INT32) wsptr[6];

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8011d14:	f242 45f9 	movw	r5, #9465	; 0x24f9
    z3 = (INT32) wsptr[4];
 8011d18:	6921      	ldr	r1, [r4, #16]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */

    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8011d1a:	f642 3ef1 	movw	lr, #11249	; 0x2bf1
    outptr = output_buf[ctr] + output_col;
 8011d1e:	461a      	mov	r2, r3
    z2 = (INT32) wsptr[2];
 8011d20:	f8d4 c008 	ldr.w	ip, [r4, #8]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */

    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */

    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011d24:	f242 17e0 	movw	r7, #8672	; 0x21e0
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011d28:	f640 497c 	movw	r9, #3196	; 0xc7c
    outptr = output_buf[ctr] + output_col;
 8011d2c:	f852 3f04 	ldr.w	r3, [r2, #4]!
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    z4 = (INT32) wsptr[7];

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011d30:	f242 563e 	movw	r6, #9534	; 0x253e
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011d34:	fb07 f70c 	mul.w	r7, r7, ip
    tmp15 = z1 + z4;
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011d38:	f641 6802 	movw	r8, #7682	; 0x1e02
    outptr = output_buf[ctr] + output_col;
 8011d3c:	930c      	str	r3, [sp, #48]	; 0x30
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8011d3e:	3420      	adds	r4, #32
    outptr = output_buf[ctr] + output_col;
 8011d40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d42:	9205      	str	r2, [sp, #20]
 8011d44:	9a82      	ldr	r2, [sp, #520]	; 0x208
 8011d46:	4413      	add	r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011d48:	f854 2c20 	ldr.w	r2, [r4, #-32]
 8011d4c:	3210      	adds	r2, #16
 8011d4e:	9204      	str	r2, [sp, #16]
    z4 = (INT32) wsptr[6];
 8011d50:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp10 = z3 + z4;
 8011d54:	1888      	adds	r0, r1, r2
    tmp11 = z3 - z4;
 8011d56:	1a8a      	subs	r2, r1, r2
 8011d58:	9203      	str	r2, [sp, #12]
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011d5a:	f240 3219 	movw	r2, #793	; 0x319
 8011d5e:	9903      	ldr	r1, [sp, #12]
    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8011d60:	4345      	muls	r5, r0
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011d62:	434a      	muls	r2, r1
 8011d64:	9904      	ldr	r1, [sp, #16]
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8011d66:	fb0e 5e0c 	mla	lr, lr, ip, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8011d6a:	eb02 3241 	add.w	r2, r2, r1, lsl #13
    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8011d6e:	eb0e 0102 	add.w	r1, lr, r2
 8011d72:	9106      	str	r1, [sp, #24]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011d74:	f241 010c 	movw	r1, #4108	; 0x100c
 8011d78:	fb01 f10c 	mul.w	r1, r1, ip
 8011d7c:	1b49      	subs	r1, r1, r5
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011d7e:	9d03      	ldr	r5, [sp, #12]
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011d80:	4411      	add	r1, r2
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8011d82:	fb09 2205 	mla	r2, r9, r5, r2
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8011d86:	9107      	str	r1, [sp, #28]
    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8011d88:	f44f 6122 	mov.w	r1, #2592	; 0xa20
 8011d8c:	4341      	muls	r1, r0
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011d8e:	1a7f      	subs	r7, r7, r1
 8011d90:	18bd      	adds	r5, r7, r2
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011d92:	f642 2750 	movw	r7, #10832	; 0x2a50
    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8011d96:	9508      	str	r5, [sp, #32]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011d98:	4d44      	ldr	r5, [pc, #272]	; (8011eac <jpeg_idct_13x13+0x3f8>)
 8011d9a:	fb05 110c 	mla	r1, r5, ip, r1
    z3 = (INT32) wsptr[5];
 8011d9e:	f854 5c0c 	ldr.w	r5, [r4, #-12]
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011da2:	188a      	adds	r2, r1, r2
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8011da4:	f640 51f2 	movw	r1, #3570	; 0xdf2
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8011da8:	9209      	str	r2, [sp, #36]	; 0x24
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011daa:	f641 52fe 	movw	r2, #7678	; 0x1dfe
    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8011dae:	4341      	muls	r1, r0
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8011db0:	9803      	ldr	r0, [sp, #12]
 8011db2:	4342      	muls	r2, r0
 8011db4:	9804      	ldr	r0, [sp, #16]
 8011db6:	eba2 3240 	sub.w	r2, r2, r0, lsl #13
    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8011dba:	483d      	ldr	r0, [pc, #244]	; (8011eb0 <jpeg_idct_13x13+0x3fc>)
 8011dbc:	fb00 fa0c 	mul.w	sl, r0, ip
 8011dc0:	ebaa 0a01 	sub.w	sl, sl, r1
 8011dc4:	ebaa 0002 	sub.w	r0, sl, r2
 8011dc8:	900a      	str	r0, [sp, #40]	; 0x28
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011dca:	483a      	ldr	r0, [pc, #232]	; (8011eb4 <jpeg_idct_13x13+0x400>)
 8011dcc:	fb00 110c 	mla	r1, r0, ip, r1
    z2 = (INT32) wsptr[3];
 8011dd0:	f854 0c14 	ldr.w	r0, [r4, #-20]
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8011dd4:	1a8a      	subs	r2, r1, r2
 8011dd6:	920b      	str	r2, [sp, #44]	; 0x2c
    z1 = (INT32) wsptr[1];
 8011dd8:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011ddc:	1811      	adds	r1, r2, r0
    z1 = (INT32) wsptr[1];
 8011dde:	9202      	str	r2, [sp, #8]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8011de0:	fb07 fb01 	mul.w	fp, r7, r1
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011de4:	1951      	adds	r1, r2, r5
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8011de6:	4f35      	ldr	r7, [pc, #212]	; (8011ebc <jpeg_idct_13x13+0x408>)
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8011de8:	434e      	muls	r6, r1
    tmp15 = z1 + z4;
 8011dea:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8011dee:	eb02 0901 	add.w	r9, r2, r1
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011df2:	eb0b 0e06 	add.w	lr, fp, r6
 8011df6:	4930      	ldr	r1, [pc, #192]	; (8011eb8 <jpeg_idct_13x13+0x404>)
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8011df8:	fb08 fa09 	mul.w	sl, r8, r9
    tmp10 = tmp11 + tmp12 + tmp13 -
 8011dfc:	44d6      	add	lr, sl
 8011dfe:	fb01 ee02 	mla	lr, r1, r2, lr
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8011e02:	1941      	adds	r1, r0, r5
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011e04:	4a2e      	ldr	r2, [pc, #184]	; (8011ec0 <jpeg_idct_13x13+0x40c>)
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8011e06:	4379      	muls	r1, r7
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8011e08:	f641 27cb 	movw	r7, #6859	; 0x1acb
 8011e0c:	fb07 1700 	mla	r7, r7, r0, r1
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011e10:	fb02 1105 	mla	r1, r2, r5, r1
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011e14:	f854 2c04 	ldr.w	r2, [r4, #-4]
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8011e18:	445f      	add	r7, fp
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011e1a:	eb00 0b02 	add.w	fp, r0, r2
 8011e1e:	4a29      	ldr	r2, [pc, #164]	; (8011ec4 <jpeg_idct_13x13+0x410>)
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8011e20:	4431      	add	r1, r6
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011e22:	f244 6694 	movw	r6, #18068	; 0x4694
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8011e26:	fb02 fb0b 	mul.w	fp, r2, fp
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011e2a:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8011e2e:	fb06 b602 	mla	r6, r6, r2, fp
    tmp11 += tmp14;
 8011e32:	445f      	add	r7, fp
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8011e34:	4456      	add	r6, sl
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 8011e36:	eb05 0a02 	add.w	sl, r5, r2
 8011e3a:	4a23      	ldr	r2, [pc, #140]	; (8011ec8 <jpeg_idct_13x13+0x414>)
 8011e3c:	fb02 fa0a 	mul.w	sl, r2, sl
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8011e40:	9a02      	ldr	r2, [sp, #8]
    tmp12 += tmp14;
 8011e42:	4451      	add	r1, sl
    tmp13 += tmp14;
 8011e44:	44b2      	add	sl, r6
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 8011e46:	f640 26d5 	movw	r6, #2773	; 0xad5
 8011e4a:	fb06 f909 	mul.w	r9, r6, r9
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8011e4e:	f640 2633 	movw	r6, #2611	; 0xa33
 8011e52:	fb06 9202 	mla	r2, r6, r2, r9
 8011e56:	4e1d      	ldr	r6, [pc, #116]	; (8011ecc <jpeg_idct_13x13+0x418>)
 8011e58:	fb06 2200 	mla	r2, r6, r0, r2
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 8011e5c:	1a28      	subs	r0, r5, r0
 8011e5e:	fb08 f800 	mul.w	r8, r8, r0
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011e62:	f640 404e 	movw	r0, #3150	; 0xc4e
    tmp14 += z1;
 8011e66:	4442      	add	r2, r8
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011e68:	fb00 8805 	mla	r8, r0, r5, r8
 8011e6c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8011e70:	f46f 505f 	mvn.w	r0, #14272	; 0x37c0
 8011e74:	fb00 8805 	mla	r8, r0, r5, r8
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011e78:	9806      	ldr	r0, [sp, #24]
 8011e7a:	9d01      	ldr	r5, [sp, #4]
 8011e7c:	4470      	add	r0, lr
 8011e7e:	9e82      	ldr	r6, [sp, #520]	; 0x208
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8011e80:	44c1      	add	r9, r8
			     & RANGE_MASK];
 8011e82:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8011e86:	5c28      	ldrb	r0, [r5, r0]
 8011e88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011e8a:	55a8      	strb	r0, [r5, r6]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011e8c:	9806      	ldr	r0, [sp, #24]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011e8e:	9d01      	ldr	r5, [sp, #4]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011e90:	eba0 0e0e 	sub.w	lr, r0, lr
 8011e94:	9801      	ldr	r0, [sp, #4]
			     & RANGE_MASK];
 8011e96:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8011e9a:	f810 000e 	ldrb.w	r0, [r0, lr]
 8011e9e:	7318      	strb	r0, [r3, #12]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011ea0:	9808      	ldr	r0, [sp, #32]
 8011ea2:	4438      	add	r0, r7
			     & RANGE_MASK];
 8011ea4:	f3c0 4089 	ubfx	r0, r0, #18, #10
 8011ea8:	e012      	b.n	8011ed0 <jpeg_idct_13x13+0x41c>
 8011eaa:	bf00      	nop
 8011eac:	ffffd7ee 	.word	0xffffd7ee
 8011eb0:	fffffa8c 	.word	0xfffffa8c
 8011eb4:	ffffe64b 	.word	0xffffe64b
 8011eb8:	ffffbf5b 	.word	0xffffbf5b
 8011ebc:	fffff52b 	.word	0xfffff52b
 8011ec0:	ffffcdb1 	.word	0xffffcdb1
 8011ec4:	ffffdac2 	.word	0xffffdac2
 8011ec8:	ffffeaf8 	.word	0xffffeaf8
 8011ecc:	fffff116 	.word	0xfffff116
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8011ed0:	5c28      	ldrb	r0, [r5, r0]
 8011ed2:	7058      	strb	r0, [r3, #1]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011ed4:	9808      	ldr	r0, [sp, #32]
 8011ed6:	1bc7      	subs	r7, r0, r7
			     & RANGE_MASK];
 8011ed8:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8011edc:	5de8      	ldrb	r0, [r5, r7]
 8011ede:	72d8      	strb	r0, [r3, #11]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011ee0:	9807      	ldr	r0, [sp, #28]
 8011ee2:	4408      	add	r0, r1
			     & RANGE_MASK];
 8011ee4:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8011ee8:	5c28      	ldrb	r0, [r5, r0]
 8011eea:	7098      	strb	r0, [r3, #2]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011eec:	9807      	ldr	r0, [sp, #28]
 8011eee:	1a41      	subs	r1, r0, r1
			     & RANGE_MASK];
 8011ef0:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8011ef4:	5c69      	ldrb	r1, [r5, r1]
 8011ef6:	7299      	strb	r1, [r3, #10]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011ef8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011efa:	4451      	add	r1, sl
			     & RANGE_MASK];
 8011efc:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8011f00:	5c69      	ldrb	r1, [r5, r1]
 8011f02:	70d9      	strb	r1, [r3, #3]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011f04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011f06:	eba1 0a0a 	sub.w	sl, r1, sl
			     & RANGE_MASK];
 8011f0a:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8011f0e:	f815 100a 	ldrb.w	r1, [r5, sl]
 8011f12:	7259      	strb	r1, [r3, #9]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011f14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011f16:	4411      	add	r1, r2
			     & RANGE_MASK];
 8011f18:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8011f1c:	5c69      	ldrb	r1, [r5, r1]
 8011f1e:	7119      	strb	r1, [r3, #4]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011f20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011f22:	1a8a      	subs	r2, r1, r2
			     & RANGE_MASK];
 8011f24:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8011f28:	5caa      	ldrb	r2, [r5, r2]
 8011f2a:	721a      	strb	r2, [r3, #8]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f2e:	444a      	add	r2, r9
			     & RANGE_MASK];
 8011f30:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8011f34:	5caa      	ldrb	r2, [r5, r2]
 8011f36:	715a      	strb	r2, [r3, #5]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011f38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f3a:	eba2 0909 	sub.w	r9, r2, r9
			     & RANGE_MASK];
 8011f3e:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8011f42:	f815 2009 	ldrb.w	r2, [r5, r9]
 8011f46:	71da      	strb	r2, [r3, #7]
    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8011f48:	9a03      	ldr	r2, [sp, #12]
 8011f4a:	eba2 010c 	sub.w	r1, r2, ip
 8011f4e:	f642 5241 	movw	r2, #11585	; 0x2d41
 8011f52:	434a      	muls	r2, r1
 8011f54:	9904      	ldr	r1, [sp, #16]
 8011f56:	eb02 3241 	add.w	r2, r2, r1, lsl #13
			     & RANGE_MASK];
 8011f5a:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
 8011f5e:	5caa      	ldrb	r2, [r5, r2]
 8011f60:	719a      	strb	r2, [r3, #6]
  for (ctr = 0; ctr < 13; ctr++) {
 8011f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f64:	9a05      	ldr	r2, [sp, #20]
 8011f66:	4293      	cmp	r3, r2
 8011f68:	f47f aed3 	bne.w	8011d12 <jpeg_idct_13x13+0x25e>
  }
}
 8011f6c:	b079      	add	sp, #484	; 0x1e4
 8011f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f72:	bf00      	nop

08011f74 <jpeg_idct_14x14>:

GLOBAL(void)
jpeg_idct_14x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f78:	b0fd      	sub	sp, #500	; 0x1f4
 8011f7a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8011f7c:	f1a2 0a02 	sub.w	sl, r2, #2
 8011f80:	9309      	str	r3, [sp, #36]	; 0x24
 8011f82:	3c04      	subs	r4, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011f84:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8011f88:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011f8c:	f102 030e 	add.w	r3, r2, #14
 8011f90:	930b      	str	r3, [sp, #44]	; 0x2c
  wsptr = workspace;
 8011f92:	ab0c      	add	r3, sp, #48	; 0x30
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011f94:	f93a 2f02 	ldrsh.w	r2, [sl, #2]!
    z1 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8011f98:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011f9c:	f854 6f04 	ldr.w	r6, [r4, #4]!
			CONST_BITS-PASS1_BITS);

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8011fa0:	f242 3e62 	movw	lr, #9058	; 0x2362
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011fa4:	f9ba 7040 	ldrsh.w	r7, [sl, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
    tmp13 = z4 << CONST_BITS;

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8011fa8:	f642 28b7 	movw	r8, #10935	; 0x2ab7
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011fac:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011fae:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011fb2:	3304      	adds	r3, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011fb4:	437a      	muls	r2, r7
    z1 <<= CONST_BITS;
 8011fb6:	0376      	lsls	r6, r6, #13
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8011fb8:	f641 4737 	movw	r7, #7223	; 0x1c37
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8011fbc:	fb01 f002 	mul.w	r0, r1, r2
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8011fc0:	f640 2112 	movw	r1, #2578	; 0xa12
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011fc4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8011fc8:	4357      	muls	r7, r2
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8011fca:	fb01 fc02 	mul.w	ip, r1, r2
    tmp10 = z1 + z2;
 8011fce:	1835      	adds	r5, r6, r0
    tmp12 = z1 - z4;
 8011fd0:	1bf2      	subs	r2, r6, r7
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8011fd2:	4460      	add	r0, ip
    tmp11 = z1 + z3;
 8011fd4:	eb06 010c 	add.w	r1, r6, ip
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8011fd8:	1bc0      	subs	r0, r0, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011fda:	f9ba 7020 	ldrsh.w	r7, [sl, #32]
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8011fde:	eba6 0040 	sub.w	r0, r6, r0, lsl #1
 8011fe2:	900a      	str	r0, [sp, #40]	; 0x28
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011fe4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8011fe6:	fb00 fc07 	mul.w	ip, r0, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011fea:	f9ba 7060 	ldrsh.w	r7, [sl, #96]	; 0x60
 8011fee:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8011ff2:	4378      	muls	r0, r7
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8011ff4:	4fd2      	ldr	r7, [pc, #840]	; (8012340 <jpeg_idct_14x14+0x3cc>)
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8011ff6:	eb0c 0600 	add.w	r6, ip, r0
 8011ffa:	fb0e fe06 	mul.w	lr, lr, r6
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8011ffe:	f640 06bd 	movw	r6, #2237	; 0x8bd
 8012002:	fb06 e60c 	mla	r6, r6, ip, lr
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8012006:	fb07 ee00 	mla	lr, r7, r0, lr
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 801200a:	f607 27e5 	addw	r7, r7, #2789	; 0xae5
 801200e:	4378      	muls	r0, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8012010:	f241 37a3 	movw	r7, #5027	; 0x13a3
 8012014:	fb07 070c 	mla	r7, r7, ip, r0
    tmp20 = tmp10 + tmp13;
 8012018:	19a8      	adds	r0, r5, r6
 801201a:	9000      	str	r0, [sp, #0]
    tmp26 = tmp10 - tmp13;
 801201c:	1ba8      	subs	r0, r5, r6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801201e:	6a25      	ldr	r5, [r4, #32]
    tmp26 = tmp10 - tmp13;
 8012020:	9001      	str	r0, [sp, #4]
    tmp21 = tmp11 + tmp14;
 8012022:	eb01 000e 	add.w	r0, r1, lr
    tmp25 = tmp11 - tmp14;
 8012026:	eba1 010e 	sub.w	r1, r1, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801202a:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
    tmp21 = tmp11 + tmp14;
 801202e:	9002      	str	r0, [sp, #8]
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8012030:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp25 = tmp11 - tmp14;
 8012034:	9103      	str	r1, [sp, #12]
    tmp22 = tmp12 + tmp15;
 8012036:	19d1      	adds	r1, r2, r7
    tmp24 = tmp12 - tmp15;
 8012038:	1bd2      	subs	r2, r2, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801203a:	f9ba 0070 	ldrsh.w	r0, [sl, #112]	; 0x70
    tmp22 = tmp12 + tmp15;
 801203e:	9104      	str	r1, [sp, #16]
    tmp24 = tmp12 - tmp15;
 8012040:	9205      	str	r2, [sp, #20]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012042:	f9ba 2010 	ldrsh.w	r2, [sl, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012046:	6e21      	ldr	r1, [r4, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012048:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801204a:	f9ba 2030 	ldrsh.w	r2, [sl, #48]	; 0x30
 801204e:	4351      	muls	r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012050:	f9ba 2050 	ldrsh.w	r2, [sl, #80]	; 0x50
 8012054:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012056:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 801205a:	4342      	muls	r2, r0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801205c:	1868      	adds	r0, r5, r1
    tmp14 = z1 + z3;
 801205e:	19af      	adds	r7, r5, r6
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012060:	fb08 f800 	mul.w	r8, r8, r0
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8012064:	f242 6052 	movw	r0, #9810	; 0x2652
 8012068:	fb00 f907 	mul.w	r9, r0, r7
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 801206c:	48b5      	ldr	r0, [pc, #724]	; (8012344 <jpeg_idct_14x14+0x3d0>)
 801206e:	eb08 0c09 	add.w	ip, r8, r9
 8012072:	eb0c 3c42 	add.w	ip, ip, r2, lsl #13
 8012076:	fb00 cc05 	mla	ip, r0, r5, ip
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 801207a:	f641 0014 	movw	r0, #6164	; 0x1814
 801207e:	4378      	muls	r0, r7
 8012080:	9006      	str	r0, [sp, #24]
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8012082:	9f06      	ldr	r7, [sp, #24]
 8012084:	48b0      	ldr	r0, [pc, #704]	; (8012348 <jpeg_idct_14x14+0x3d4>)
 8012086:	fb00 7005 	mla	r0, r0, r5, r7
    z1    -= z2;
 801208a:	1a6d      	subs	r5, r5, r1
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 801208c:	198f      	adds	r7, r1, r6
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 801208e:	fb0e fe05 	mul.w	lr, lr, r5
 8012092:	ebae 3e42 	sub.w	lr, lr, r2, lsl #13
    tmp16 += tmp15;
 8012096:	4470      	add	r0, lr
 8012098:	9007      	str	r0, [sp, #28]
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 801209a:	f46f 60a2 	mvn.w	r0, #1296	; 0x510
 801209e:	4378      	muls	r0, r7
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80120a0:	4faa      	ldr	r7, [pc, #680]	; (801234c <jpeg_idct_14x14+0x3d8>)
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 80120a2:	eba0 3042 	sub.w	r0, r0, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 80120a6:	fb07 0701 	mla	r7, r7, r1, r0
 80120aa:	44b8      	add	r8, r7
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 80120ac:	4fa8      	ldr	r7, [pc, #672]	; (8012350 <jpeg_idct_14x14+0x3dc>)
 80120ae:	fb07 0006 	mla	r0, r7, r6, r0
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80120b2:	1a77      	subs	r7, r6, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 80120b4:	4448      	add	r0, r9
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 80120b6:	f642 49f8 	movw	r9, #11512	; 0x2cf8
 80120ba:	fb09 f907 	mul.w	r9, r9, r7
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 80120be:	9008      	str	r0, [sp, #32]
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80120c0:	eb09 3742 	add.w	r7, r9, r2, lsl #13
 80120c4:	48a3      	ldr	r0, [pc, #652]	; (8012354 <jpeg_idct_14x14+0x3e0>)
    z1    += z4;
 80120c6:	442a      	add	r2, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80120c8:	fb00 7706 	mla	r7, r0, r6, r7
 80120cc:	9806      	ldr	r0, [sp, #24]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */

    tmp13 = (z1 - z3) << PASS1_BITS;
 80120ce:	1b96      	subs	r6, r2, r6

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80120d0:	9a00      	ldr	r2, [sp, #0]
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80120d2:	4407      	add	r7, r0
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 80120d4:	f241 5099 	movw	r0, #5529	; 0x1599
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80120d8:	4462      	add	r2, ip
    tmp13 = (z1 - z3) << PASS1_BITS;
 80120da:	00b6      	lsls	r6, r6, #2
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 80120dc:	fb00 9101 	mla	r1, r0, r1, r9
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80120e0:	12d2      	asrs	r2, r2, #11
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 80120e2:	4471      	add	r1, lr
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80120e4:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80120e8:	9a00      	ldr	r2, [sp, #0]
 80120ea:	eba2 0c0c 	sub.w	ip, r2, ip
 80120ee:	ea4f 22ec 	mov.w	r2, ip, asr #11
 80120f2:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80120f6:	9a02      	ldr	r2, [sp, #8]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80120f8:	9808      	ldr	r0, [sp, #32]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80120fa:	4442      	add	r2, r8
 80120fc:	12d2      	asrs	r2, r2, #11
 80120fe:	61da      	str	r2, [r3, #28]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012100:	9a02      	ldr	r2, [sp, #8]
 8012102:	eba2 0808 	sub.w	r8, r2, r8
 8012106:	ea4f 22e8 	mov.w	r2, r8, asr #11
 801210a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801210e:	9a04      	ldr	r2, [sp, #16]
 8012110:	4402      	add	r2, r0
 8012112:	12d2      	asrs	r2, r2, #11
 8012114:	63da      	str	r2, [r3, #60]	; 0x3c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012116:	9a04      	ldr	r2, [sp, #16]
 8012118:	1a10      	subs	r0, r2, r0
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 801211a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801211c:	eb06 22e2 	add.w	r2, r6, r2, asr #11
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012120:	12c0      	asrs	r0, r0, #11
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 8012122:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8012124:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012126:	f8c3 015c 	str.w	r0, [r3, #348]	; 0x15c
    wsptr[8*10] = (int) (tmp23 - tmp13);
 801212a:	ebc6 26e2 	rsb	r6, r6, r2, asr #11
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801212e:	9a05      	ldr	r2, [sp, #20]
 8012130:	443a      	add	r2, r7
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8012132:	f8c3 613c 	str.w	r6, [r3, #316]	; 0x13c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012136:	12d2      	asrs	r2, r2, #11
 8012138:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801213a:	9a05      	ldr	r2, [sp, #20]
 801213c:	1bd7      	subs	r7, r2, r7
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801213e:	9a03      	ldr	r2, [sp, #12]
 8012140:	440a      	add	r2, r1
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012142:	12ff      	asrs	r7, r7, #11
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8012144:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012146:	f8c3 711c 	str.w	r7, [r3, #284]	; 0x11c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801214a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801214e:	9a03      	ldr	r2, [sp, #12]
 8012150:	1a51      	subs	r1, r2, r1
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8012152:	9a01      	ldr	r2, [sp, #4]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8012154:	12c9      	asrs	r1, r1, #11
 8012156:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801215a:	9907      	ldr	r1, [sp, #28]
 801215c:	440a      	add	r2, r1
 801215e:	12d2      	asrs	r2, r2, #11
 8012160:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8012164:	9a01      	ldr	r2, [sp, #4]
 8012166:	1a52      	subs	r2, r2, r1
 8012168:	12d2      	asrs	r2, r2, #11
 801216a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801216e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012170:	4552      	cmp	r2, sl
 8012172:	f47f af0f 	bne.w	8011f94 <jpeg_idct_14x14+0x20>
 8012176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012178:	3b04      	subs	r3, #4
 801217a:	9301      	str	r3, [sp, #4]
 801217c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801217e:	3334      	adds	r3, #52	; 0x34
 8012180:	930b      	str	r3, [sp, #44]	; 0x2c
  }

  /* Pass 2: process 14 rows from work array, store into output array. */

  wsptr = workspace;
 8012182:	ab0c      	add	r3, sp, #48	; 0x30
 8012184:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 14; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012186:	9b01      	ldr	r3, [sp, #4]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8012188:	f640 2012 	movw	r0, #2578	; 0xa12
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 801218c:	f642 01c6 	movw	r1, #10438	; 0x28c6
    z2 = (INT32) wsptr[6];

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8012190:	4c6b      	ldr	r4, [pc, #428]	; (8012340 <jpeg_idct_14x14+0x3cc>)
    outptr = output_buf[ctr] + output_col;
 8012192:	461a      	mov	r2, r3
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8012194:	f241 3ca3 	movw	ip, #5027	; 0x13a3
    z3 = (INT32) wsptr[5];
    z4 = (INT32) wsptr[7];
    z4 <<= CONST_BITS;

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012198:	f642 29b7 	movw	r9, #10935	; 0x2ab7
    outptr = output_buf[ctr] + output_col;
 801219c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80121a0:	930a      	str	r3, [sp, #40]	; 0x28
 80121a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121a4:	9201      	str	r2, [sp, #4]
 80121a6:	9a86      	ldr	r2, [sp, #536]	; 0x218
 80121a8:	189a      	adds	r2, r3, r2
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80121aa:	9b00      	ldr	r3, [sp, #0]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	f103 0810 	add.w	r8, r3, #16
    z4 = (INT32) wsptr[4];
 80121b2:	9b00      	ldr	r3, [sp, #0]
 80121b4:	691b      	ldr	r3, [r3, #16]
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80121b6:	fb00 f503 	mul.w	r5, r0, r3
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80121ba:	f641 4037 	movw	r0, #7223	; 0x1c37
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80121be:	4359      	muls	r1, r3
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80121c0:	4358      	muls	r0, r3
    tmp11 = z1 + z3;
 80121c2:	eb05 3e48 	add.w	lr, r5, r8, lsl #13
    tmp10 = z1 + z2;
 80121c6:	eb01 3748 	add.w	r7, r1, r8, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80121ca:	4429      	add	r1, r5
    tmp12 = z1 - z4;
 80121cc:	ebc0 3348 	rsb	r3, r0, r8, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80121d0:	1a09      	subs	r1, r1, r0
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80121d2:	f242 3062 	movw	r0, #9058	; 0x2362
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80121d6:	0049      	lsls	r1, r1, #1
 80121d8:	ebc1 3148 	rsb	r1, r1, r8, lsl #13
 80121dc:	9102      	str	r1, [sp, #8]
    z1 = (INT32) wsptr[2];
 80121de:	9900      	ldr	r1, [sp, #0]
 80121e0:	688d      	ldr	r5, [r1, #8]
    z2 = (INT32) wsptr[6];
 80121e2:	698e      	ldr	r6, [r1, #24]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80121e4:	19a9      	adds	r1, r5, r6
 80121e6:	4341      	muls	r1, r0
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 80121e8:	f640 00bd 	movw	r0, #2237	; 0x8bd
 80121ec:	fb00 1005 	mla	r0, r0, r5, r1
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80121f0:	fb04 1106 	mla	r1, r4, r6, r1
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 80121f4:	f604 24e5 	addw	r4, r4, #2789	; 0xae5
 80121f8:	4366      	muls	r6, r4
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80121fa:	fb0c 6505 	mla	r5, ip, r5, r6
    tmp20 = tmp10 + tmp13;
 80121fe:	183e      	adds	r6, r7, r0
    tmp26 = tmp10 - tmp13;
 8012200:	1a38      	subs	r0, r7, r0
 8012202:	9003      	str	r0, [sp, #12]
    tmp21 = tmp11 + tmp14;
 8012204:	eb0e 0001 	add.w	r0, lr, r1
    tmp25 = tmp11 - tmp14;
 8012208:	ebae 0101 	sub.w	r1, lr, r1
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 801220c:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp21 = tmp11 + tmp14;
 8012210:	9004      	str	r0, [sp, #16]
    tmp25 = tmp11 - tmp14;
 8012212:	9105      	str	r1, [sp, #20]
    tmp22 = tmp12 + tmp15;
 8012214:	1959      	adds	r1, r3, r5
    tmp24 = tmp12 - tmp15;
 8012216:	1b5b      	subs	r3, r3, r5
    z3 = (INT32) wsptr[5];
 8012218:	9800      	ldr	r0, [sp, #0]
    tmp22 = tmp12 + tmp15;
 801221a:	9106      	str	r1, [sp, #24]
    tmp24 = tmp12 - tmp15;
 801221c:	9307      	str	r3, [sp, #28]
    z2 = (INT32) wsptr[3];
 801221e:	9900      	ldr	r1, [sp, #0]
    z1 = (INT32) wsptr[1];
 8012220:	9b00      	ldr	r3, [sp, #0]
    z2 = (INT32) wsptr[3];
 8012222:	68c9      	ldr	r1, [r1, #12]
    z1 = (INT32) wsptr[1];
 8012224:	685b      	ldr	r3, [r3, #4]
    z3 = (INT32) wsptr[5];
 8012226:	f8d0 c014 	ldr.w	ip, [r0, #20]
    z4 = (INT32) wsptr[7];
 801222a:	f8d0 801c 	ldr.w	r8, [r0, #28]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801222e:	1858      	adds	r0, r3, r1
    tmp14 = z1 + z3;
 8012230:	eb03 050c 	add.w	r5, r3, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8012234:	fb09 f900 	mul.w	r9, r9, r0
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8012238:	f242 6052 	movw	r0, #9810	; 0x2652
 801223c:	fb00 fa05 	mul.w	sl, r0, r5
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8012240:	4840      	ldr	r0, [pc, #256]	; (8012344 <jpeg_idct_14x14+0x3d0>)
 8012242:	eb09 070a 	add.w	r7, r9, sl
 8012246:	eb07 3748 	add.w	r7, r7, r8, lsl #13
 801224a:	fb00 7703 	mla	r7, r0, r3, r7
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 801224e:	f641 0014 	movw	r0, #6164	; 0x1814
 8012252:	4368      	muls	r0, r5
    tmp16 += tmp15;
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8012254:	eb01 050c 	add.w	r5, r1, ip
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8012258:	9008      	str	r0, [sp, #32]
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 801225a:	9c08      	ldr	r4, [sp, #32]
 801225c:	483a      	ldr	r0, [pc, #232]	; (8012348 <jpeg_idct_14x14+0x3d4>)
 801225e:	fb00 4003 	mla	r0, r0, r3, r4
    z1    -= z2;
 8012262:	1a5b      	subs	r3, r3, r1
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8012264:	4c39      	ldr	r4, [pc, #228]	; (801234c <jpeg_idct_14x14+0x3d8>)
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8012266:	fb0e fe03 	mul.w	lr, lr, r3
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */

    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 801226a:	eba3 030c 	sub.w	r3, r3, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 801226e:	ebae 3e48 	sub.w	lr, lr, r8, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8012272:	035b      	lsls	r3, r3, #13
    tmp16 += tmp15;
 8012274:	4470      	add	r0, lr
 8012276:	9009      	str	r0, [sp, #36]	; 0x24
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8012278:	f46f 60a2 	mvn.w	r0, #1296	; 0x510
 801227c:	4368      	muls	r0, r5
 801227e:	eba0 3048 	sub.w	r0, r0, r8, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8012282:	fb04 0501 	mla	r5, r4, r1, r0
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8012286:	4c32      	ldr	r4, [pc, #200]	; (8012350 <jpeg_idct_14x14+0x3dc>)
 8012288:	fb04 000c 	mla	r0, r4, ip, r0
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 801228c:	44a9      	add	r9, r5
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801228e:	ebac 0501 	sub.w	r5, ip, r1
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8012292:	4c30      	ldr	r4, [pc, #192]	; (8012354 <jpeg_idct_14x14+0x3e0>)
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8012294:	4450      	add	r0, sl
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8012296:	f642 4af8 	movw	sl, #11512	; 0x2cf8
 801229a:	fb0a fa05 	mul.w	sl, sl, r5
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801229e:	eb0a 3548 	add.w	r5, sl, r8, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 80122a2:	eb03 3848 	add.w	r8, r3, r8, lsl #13

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80122a6:	19f3      	adds	r3, r6, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80122a8:	fb04 550c 	mla	r5, r4, ip, r5
 80122ac:	9c08      	ldr	r4, [sp, #32]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80122ae:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80122b2:	1bf6      	subs	r6, r6, r7
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80122b4:	4425      	add	r5, r4
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80122b6:	f241 5499 	movw	r4, #5529	; 0x1599
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80122ba:	f81b 3003 	ldrb.w	r3, [fp, r3]
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80122be:	f3c6 4689 	ubfx	r6, r6, #18, #10
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80122c2:	fb04 a101 	mla	r1, r4, r1, sl
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80122c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80122c8:	46a4      	mov	ip, r4
 80122ca:	9c86      	ldr	r4, [sp, #536]	; 0x218
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80122cc:	4471      	add	r1, lr
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80122ce:	f80c 3004 	strb.w	r3, [ip, r4]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80122d2:	f81b 3006 	ldrb.w	r3, [fp, r6]
 80122d6:	7353      	strb	r3, [r2, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80122d8:	9b04      	ldr	r3, [sp, #16]
 80122da:	444b      	add	r3, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80122dc:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80122e0:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80122e4:	7053      	strb	r3, [r2, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80122e6:	9b04      	ldr	r3, [sp, #16]
 80122e8:	eba3 0909 	sub.w	r9, r3, r9
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80122ec:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80122f0:	f81b 3009 	ldrb.w	r3, [fp, r9]
 80122f4:	7313      	strb	r3, [r2, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80122f6:	9b06      	ldr	r3, [sp, #24]
 80122f8:	4403      	add	r3, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80122fa:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80122fe:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8012302:	7093      	strb	r3, [r2, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012304:	9b06      	ldr	r3, [sp, #24]
 8012306:	1a18      	subs	r0, r3, r0
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012308:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801230c:	f81b 3000 	ldrb.w	r3, [fp, r0]
 8012310:	72d3      	strb	r3, [r2, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8012312:	9b02      	ldr	r3, [sp, #8]
 8012314:	4443      	add	r3, r8
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012316:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801231a:	f81b 3003 	ldrb.w	r3, [fp, r3]
 801231e:	70d3      	strb	r3, [r2, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8012320:	9b02      	ldr	r3, [sp, #8]
 8012322:	eba3 0808 	sub.w	r8, r3, r8
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012326:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801232a:	f81b 3008 	ldrb.w	r3, [fp, r8]
 801232e:	7293      	strb	r3, [r2, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012330:	9b07      	ldr	r3, [sp, #28]
 8012332:	442b      	add	r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012334:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8012338:	f81b 3003 	ldrb.w	r3, [fp, r3]
 801233c:	e00c      	b.n	8012358 <jpeg_idct_14x14+0x3e4>
 801233e:	bf00      	nop
 8012340:	ffffc8fc 	.word	0xffffc8fc
 8012344:	ffffdbf0 	.word	0xffffdbf0
 8012348:	ffffde0b 	.word	0xffffde0b
 801234c:	fffff26e 	.word	0xfffff26e
 8012350:	ffffb409 	.word	0xffffb409
 8012354:	ffffc9e6 	.word	0xffffc9e6
 8012358:	7113      	strb	r3, [r2, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801235a:	9b07      	ldr	r3, [sp, #28]
 801235c:	1b5d      	subs	r5, r3, r5
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801235e:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8012362:	f81b 3005 	ldrb.w	r3, [fp, r5]
 8012366:	7253      	strb	r3, [r2, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012368:	9b05      	ldr	r3, [sp, #20]
 801236a:	440b      	add	r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801236c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8012370:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8012374:	7153      	strb	r3, [r2, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012376:	9b05      	ldr	r3, [sp, #20]
 8012378:	1a59      	subs	r1, r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801237a:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801237e:	f81b 3001 	ldrb.w	r3, [fp, r1]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012382:	9909      	ldr	r1, [sp, #36]	; 0x24
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8012384:	7213      	strb	r3, [r2, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012386:	9b03      	ldr	r3, [sp, #12]
 8012388:	440b      	add	r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801238a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801238e:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8012392:	7193      	strb	r3, [r2, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8012394:	9b03      	ldr	r3, [sp, #12]
 8012396:	1a58      	subs	r0, r3, r1
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8012398:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801239c:	f81b 3000 	ldrb.w	r3, [fp, r0]
 80123a0:	71d3      	strb	r3, [r2, #7]

    wsptr += 8;		/* advance pointer to next row */
 80123a2:	9b00      	ldr	r3, [sp, #0]
  for (ctr = 0; ctr < 14; ctr++) {
 80123a4:	9a01      	ldr	r2, [sp, #4]
    wsptr += 8;		/* advance pointer to next row */
 80123a6:	3320      	adds	r3, #32
 80123a8:	9300      	str	r3, [sp, #0]
  for (ctr = 0; ctr < 14; ctr++) {
 80123aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80123ac:	4293      	cmp	r3, r2
 80123ae:	f47f aeea 	bne.w	8012186 <jpeg_idct_14x14+0x212>
  }
}
 80123b2:	b07d      	add	sp, #500	; 0x1f4
 80123b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080123b8 <jpeg_idct_15x15>:

GLOBAL(void)
jpeg_idct_15x15 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80123b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123bc:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 80123c0:	f1a2 0a02 	sub.w	sl, r2, #2
 80123c4:	930b      	str	r3, [sp, #44]	; 0x2c
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80123c6:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80123ca:	6d48      	ldr	r0, [r1, #84]	; 0x54
 80123cc:	f103 0b80 	add.w	fp, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80123d0:	1f03      	subs	r3, r0, #4
 80123d2:	9300      	str	r3, [sp, #0]
 80123d4:	f102 030e 	add.w	r3, r2, #14
 80123d8:	930c      	str	r3, [sp, #48]	; 0x30
  wsptr = workspace;
 80123da:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80123dc:	9900      	ldr	r1, [sp, #0]

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 80123de:	f640 50fc 	movw	r0, #3580	; 0xdfc
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80123e2:	f93a 2f02 	ldrsh.w	r2, [sl, #2]!

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 80123e6:	f642 6c13 	movw	ip, #11795	; 0x2e13
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80123ea:	f851 5f04 	ldr.w	r5, [r1, #4]!
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */

    tmp25 = tmp13 - tmp10 - tmp11;
    tmp26 = tmp12 + tmp10 - tmp11 - z2;

    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 80123ee:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80123f2:	f9ba 6060 	ldrsh.w	r6, [sl, #96]	; 0x60
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80123f6:	3304      	adds	r3, #4
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80123f8:	6c0c      	ldr	r4, [r1, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80123fa:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80123fc:	f9ba 2020 	ldrsh.w	r2, [sl, #32]
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012400:	9100      	str	r1, [sp, #0]
    z1 <<= CONST_BITS;
 8012402:	036d      	lsls	r5, r5, #13
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012404:	4354      	muls	r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012406:	9a00      	ldr	r2, [sp, #0]
 8012408:	f9ba 1040 	ldrsh.w	r1, [sl, #64]	; 0x40
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801240c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012410:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8012414:	4351      	muls	r1, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012416:	9a00      	ldr	r2, [sp, #0]
 8012418:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 801241c:	4372      	muls	r2, r6
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 801241e:	f242 469d 	movw	r6, #9373	; 0x249d
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8012422:	fb00 f702 	mul.w	r7, r0, r2
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8012426:	f44f 70bb 	mov.w	r0, #374	; 0x176
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 801242a:	4372      	muls	r2, r6
    tmp12 = z1 - tmp10;
 801242c:	eba5 0807 	sub.w	r8, r5, r7
    tmp13 = z1 + tmp11;
 8012430:	18ae      	adds	r6, r5, r2
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8012432:	1bd2      	subs	r2, r2, r7
    z4 = z2 - z3;
 8012434:	1a67      	subs	r7, r4, r1
    z3 += z2;
 8012436:	4421      	add	r1, r4
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8012438:	eba5 0242 	sub.w	r2, r5, r2, lsl #1
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 801243c:	fb0c f404 	mul.w	r4, ip, r4
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8012440:	fb00 f507 	mul.w	r5, r0, r7
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8012444:	9201      	str	r2, [sp, #4]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8012446:	f642 22ce 	movw	r2, #10958	; 0x2ace
 801244a:	434a      	muls	r2, r1
    tmp20 = tmp13 + tmp10 + tmp11;
 801244c:	eb06 0c02 	add.w	ip, r6, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012450:	eba8 0202 	sub.w	r2, r8, r2
 8012454:	442a      	add	r2, r5
    tmp20 = tmp13 + tmp10 + tmp11;
 8012456:	eb0c 0005 	add.w	r0, ip, r5
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 801245a:	f640 4cc7 	movw	ip, #3271	; 0xcc7
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 801245e:	4422      	add	r2, r4
    tmp20 = tmp13 + tmp10 + tmp11;
 8012460:	9002      	str	r0, [sp, #8]
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8012462:	fb0c fc07 	mul.w	ip, ip, r7
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012466:	9203      	str	r2, [sp, #12]
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8012468:	f241 1282 	movw	r2, #4482	; 0x1182
 801246c:	434a      	muls	r2, r1
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 801246e:	fb0e f101 	mul.w	r1, lr, r1
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8012472:	f44f 6e35 	mov.w	lr, #2896	; 0xb50
    tmp25 = tmp13 - tmp10 - tmp11;
 8012476:	1ab5      	subs	r5, r6, r2
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8012478:	4442      	add	r2, r8
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 801247a:	fb0e fe07 	mul.w	lr, lr, r7

    tmp21 = tmp12 + tmp10 + tmp11;
 801247e:	4488      	add	r8, r1
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8012480:	eba2 020c 	sub.w	r2, r2, ip
    tmp24 = tmp13 - tmp10 + tmp11;
 8012484:	1a71      	subs	r1, r6, r1
    tmp25 = tmp13 - tmp10 - tmp11;
 8012486:	eba5 000c 	sub.w	r0, r5, ip

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801248a:	f9ba 6050 	ldrsh.w	r6, [sl, #80]	; 0x50
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 801248e:	1b12      	subs	r2, r2, r4
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012490:	f9ba 4070 	ldrsh.w	r4, [sl, #112]	; 0x70
    tmp25 = tmp13 - tmp10 - tmp11;
 8012494:	9004      	str	r0, [sp, #16]
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8012496:	9205      	str	r2, [sp, #20]
    tmp21 = tmp12 + tmp10 + tmp11;
 8012498:	eb08 020e 	add.w	r2, r8, lr
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801249c:	9800      	ldr	r0, [sp, #0]

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 801249e:	f241 0871 	movw	r8, #4209	; 0x1071
    tmp21 = tmp12 + tmp10 + tmp11;
 80124a2:	9206      	str	r2, [sp, #24]
    tmp24 = tmp13 - tmp10 + tmp11;
 80124a4:	eb01 020e 	add.w	r2, r1, lr
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80124a8:	6e05      	ldr	r5, [r0, #96]	; 0x60
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80124aa:	f641 2e9a 	movw	lr, #6810	; 0x1a9a
    tmp24 = tmp13 - tmp10 + tmp11;
 80124ae:	9207      	str	r2, [sp, #28]
    tmp11 += tmp11;
 80124b0:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
 80124b4:	437a      	muls	r2, r7
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 80124b6:	f242 7731 	movw	r7, #10033	; 0x2731
    tmp11 += tmp11;
 80124ba:	9208      	str	r2, [sp, #32]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 80124bc:	9908      	ldr	r1, [sp, #32]
 80124be:	9a01      	ldr	r2, [sp, #4]
 80124c0:	440a      	add	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80124c2:	f9ba 1010 	ldrsh.w	r1, [sl, #16]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 80124c6:	9209      	str	r2, [sp, #36]	; 0x24
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80124c8:	9a00      	ldr	r2, [sp, #0]
 80124ca:	6a12      	ldr	r2, [r2, #32]
 80124cc:	434a      	muls	r2, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80124ce:	f9ba 1030 	ldrsh.w	r1, [sl, #48]	; 0x30
 80124d2:	434d      	muls	r5, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80124d4:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
 80124d8:	434e      	muls	r6, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80124da:	f8d0 10e0 	ldr.w	r1, [r0, #224]	; 0xe0
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 80124de:	48d7      	ldr	r0, [pc, #860]	; (801283c <jpeg_idct_15x15+0x484>)
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80124e0:	4361      	muls	r1, r4
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 80124e2:	437e      	muls	r6, r7
    tmp13 = z2 - z4;
 80124e4:	eba5 0c01 	sub.w	ip, r5, r1

    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
    z2 = z1 - z4;
 80124e8:	eba2 0901 	sub.w	r9, r2, r1
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80124ec:	eb02 040c 	add.w	r4, r2, ip
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 80124f0:	fb07 f709 	mul.w	r7, r7, r9
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80124f4:	fb0e f404 	mul.w	r4, lr, r4
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 80124f8:	1bbf      	subs	r7, r7, r6
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 80124fa:	fb00 4e0c 	mla	lr, r0, ip, r4
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 80124fe:	48d0      	ldr	r0, [pc, #832]	; (8012840 <jpeg_idct_15x15+0x488>)
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8012500:	fb08 4802 	mla	r8, r8, r2, r4
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8012504:	f642 5402 	movw	r4, #11522	; 0x2d02
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8012508:	4368      	muls	r0, r5
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801250a:	f644 6ca3 	movw	ip, #20131	; 0x4ea3
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 801250e:	fb04 6409 	mla	r4, r4, r9, r6
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8012512:	eb02 0901 	add.w	r9, r2, r1
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8012516:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8012518:	48ca      	ldr	r0, [pc, #808]	; (8012844 <jpeg_idct_15x15+0x48c>)
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801251a:	fb0c 4c01 	mla	ip, ip, r1, r4
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 801251e:	4345      	muls	r5, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8012520:	f200 7071 	addw	r0, r0, #1905	; 0x771
 8012524:	fb00 4402 	mla	r4, r0, r2, r4
 8012528:	980a      	ldr	r0, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801252a:	ebac 0c05 	sub.w	ip, ip, r5
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801252e:	4404      	add	r4, r0
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8012530:	f241 2068 	movw	r0, #4712	; 0x1268
 8012534:	fb00 f909 	mul.w	r9, r0, r9
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8012538:	f640 7039 	movw	r0, #3897	; 0xf39
 801253c:	fb00 9202 	mla	r2, r0, r2, r9
 8012540:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012542:	1b92      	subs	r2, r2, r6
 8012544:	4402      	add	r2, r0
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8012546:	48c0      	ldr	r0, [pc, #768]	; (8012848 <jpeg_idct_15x15+0x490>)
 8012548:	fb00 9101 	mla	r1, r0, r1, r9
 801254c:	4431      	add	r1, r6
 801254e:	440d      	add	r5, r1

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012550:	9902      	ldr	r1, [sp, #8]
 8012552:	4461      	add	r1, ip
 8012554:	12c9      	asrs	r1, r1, #11
 8012556:	f843 1c04 	str.w	r1, [r3, #-4]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801255a:	9902      	ldr	r1, [sp, #8]
 801255c:	eba1 0c0c 	sub.w	ip, r1, ip
 8012560:	ea4f 21ec 	mov.w	r1, ip, asr #11
 8012564:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012568:	9906      	ldr	r1, [sp, #24]
 801256a:	4441      	add	r1, r8
 801256c:	12c9      	asrs	r1, r1, #11
 801256e:	61d9      	str	r1, [r3, #28]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012570:	9906      	ldr	r1, [sp, #24]
 8012572:	eba1 0808 	sub.w	r8, r1, r8
 8012576:	ea4f 21e8 	mov.w	r1, r8, asr #11
 801257a:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801257e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012580:	4439      	add	r1, r7
 8012582:	12c9      	asrs	r1, r1, #11
 8012584:	63d9      	str	r1, [r3, #60]	; 0x3c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012586:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012588:	1bcf      	subs	r7, r1, r7
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801258a:	9903      	ldr	r1, [sp, #12]
 801258c:	4411      	add	r1, r2
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801258e:	12ff      	asrs	r7, r7, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8012590:	12c9      	asrs	r1, r1, #11
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012592:	f8c3 717c 	str.w	r7, [r3, #380]	; 0x17c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8012596:	65d9      	str	r1, [r3, #92]	; 0x5c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8012598:	9903      	ldr	r1, [sp, #12]
 801259a:	1a8a      	subs	r2, r1, r2
 801259c:	12d2      	asrs	r2, r2, #11
 801259e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80125a2:	9a07      	ldr	r2, [sp, #28]
 80125a4:	4472      	add	r2, lr
 80125a6:	12d2      	asrs	r2, r2, #11
 80125a8:	67da      	str	r2, [r3, #124]	; 0x7c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80125aa:	9a07      	ldr	r2, [sp, #28]
 80125ac:	eba2 0e0e 	sub.w	lr, r2, lr
 80125b0:	ea4f 22ee 	mov.w	r2, lr, asr #11
 80125b4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80125b8:	9a04      	ldr	r2, [sp, #16]
 80125ba:	442a      	add	r2, r5
 80125bc:	12d2      	asrs	r2, r2, #11
 80125be:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80125c2:	9a04      	ldr	r2, [sp, #16]
 80125c4:	1b55      	subs	r5, r2, r5
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80125c6:	9a05      	ldr	r2, [sp, #20]
 80125c8:	4422      	add	r2, r4
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80125ca:	12ed      	asrs	r5, r5, #11
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80125cc:	12d2      	asrs	r2, r2, #11
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80125ce:	f8c3 511c 	str.w	r5, [r3, #284]	; 0x11c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80125d2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 80125d6:	9a05      	ldr	r2, [sp, #20]
 80125d8:	1b14      	subs	r4, r2, r4
 80125da:	12e4      	asrs	r4, r4, #11
 80125dc:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 80125e0:	9a01      	ldr	r2, [sp, #4]
 80125e2:	9908      	ldr	r1, [sp, #32]
 80125e4:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 80125e8:	12d2      	asrs	r2, r2, #11
 80125ea:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80125ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80125f0:	4552      	cmp	r2, sl
 80125f2:	f47f aef3 	bne.w	80123dc <jpeg_idct_15x15+0x24>
 80125f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  }

  /* Pass 2: process 15 rows from work array, store into output array. */

  wsptr = workspace;
 80125f8:	ac0e      	add	r4, sp, #56	; 0x38
 80125fa:	f1a3 0904 	sub.w	r9, r3, #4
 80125fe:	3338      	adds	r3, #56	; 0x38
 8012600:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 15; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012602:	f859 3f04 	ldr.w	r3, [r9, #4]!

    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[4];
    z4 = (INT32) wsptr[6];

    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 8012606:	f640 50fc 	movw	r0, #3580	; 0xdfc
    outptr = output_buf[ctr] + output_col;
 801260a:	9a90      	ldr	r2, [sp, #576]	; 0x240

    z4 = z2 - z3;
    z3 += z2;
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 801260c:	f642 6e13 	movw	lr, #11795	; 0x2e13
    outptr = output_buf[ctr] + output_col;
 8012610:	930c      	str	r3, [sp, #48]	; 0x30
    z4 = (INT32) wsptr[5];
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
    z4 = (INT32) wsptr[7];

    tmp13 = z2 - z4;
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 8012612:	f641 289a 	movw	r8, #6810	; 0x1a9a
    outptr = output_buf[ctr] + output_col;
 8012616:	4413      	add	r3, r2
    z4 = (INT32) wsptr[6];
 8012618:	69a2      	ldr	r2, [r4, #24]
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801261a:	6827      	ldr	r7, [r4, #0]
			     & RANGE_MASK];
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 801261c:	3420      	adds	r4, #32
    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 801261e:	fb00 fc02 	mul.w	ip, r0, r2
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 8012622:	f242 409d 	movw	r0, #9373	; 0x249d
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012626:	3710      	adds	r7, #16
    z2 = (INT32) wsptr[2];
 8012628:	f854 6c18 	ldr.w	r6, [r4, #-24]
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 801262c:	4342      	muls	r2, r0
    z3 = (INT32) wsptr[4];
 801262e:	f854 1c10 	ldr.w	r1, [r4, #-16]
    tmp12 = z1 - tmp10;
 8012632:	ebcc 3047 	rsb	r0, ip, r7, lsl #13
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8012636:	fb0e fe06 	mul.w	lr, lr, r6
    tmp13 = z1 + tmp11;
 801263a:	eb02 3547 	add.w	r5, r2, r7, lsl #13
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 801263e:	eba2 020c 	sub.w	r2, r2, ip
    z4 = z2 - z3;
 8012642:	eba6 0c01 	sub.w	ip, r6, r1
    z3 += z2;
 8012646:	4431      	add	r1, r6
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8012648:	0052      	lsls	r2, r2, #1
 801264a:	ebc2 3247 	rsb	r2, r2, r7, lsl #13
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 801264e:	f44f 77bb 	mov.w	r7, #374	; 0x176
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 8012652:	9200      	str	r2, [sp, #0]
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8012654:	f642 22ce 	movw	r2, #10958	; 0x2ace
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8012658:	fb07 f70c 	mul.w	r7, r7, ip
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 801265c:	434a      	muls	r2, r1
    tmp20 = tmp13 + tmp10 + tmp11;
 801265e:	18ae      	adds	r6, r5, r2
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012660:	1a82      	subs	r2, r0, r2
 8012662:	443a      	add	r2, r7
    tmp20 = tmp13 + tmp10 + tmp11;
 8012664:	443e      	add	r6, r7
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8012666:	4472      	add	r2, lr
    tmp20 = tmp13 + tmp10 + tmp11;
 8012668:	9601      	str	r6, [sp, #4]
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 801266a:	f640 46c7 	movw	r6, #3271	; 0xcc7
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 801266e:	9202      	str	r2, [sp, #8]
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8012670:	f241 1282 	movw	r2, #4482	; 0x1182
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 8012674:	fb06 f60c 	mul.w	r6, r6, ip
    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 8012678:	434a      	muls	r2, r1
    tmp25 = tmp13 - tmp10 - tmp11;
 801267a:	1aaf      	subs	r7, r5, r2
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 801267c:	4402      	add	r2, r0
 801267e:	1b92      	subs	r2, r2, r6
    tmp25 = tmp13 - tmp10 - tmp11;
 8012680:	1bbf      	subs	r7, r7, r6
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 8012682:	eba2 020e 	sub.w	r2, r2, lr
    tmp25 = tmp13 - tmp10 - tmp11;
 8012686:	9703      	str	r7, [sp, #12]
    z2 = (INT32) wsptr[3];
 8012688:	f854 7c14 	ldr.w	r7, [r4, #-20]
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 801268c:	9204      	str	r2, [sp, #16]
    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 801268e:	f641 124c 	movw	r2, #6476	; 0x194c
 8012692:	4351      	muls	r1, r2
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8012694:	f44f 6235 	mov.w	r2, #2896	; 0xb50
    tmp21 = tmp12 + tmp10 + tmp11;
 8012698:	4408      	add	r0, r1
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 801269a:	fb02 f20c 	mul.w	r2, r2, ip
    tmp24 = tmp13 - tmp10 + tmp11;
 801269e:	1a69      	subs	r1, r5, r1
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 80126a0:	f242 7531 	movw	r5, #10033	; 0x2731
    tmp21 = tmp12 + tmp10 + tmp11;
 80126a4:	4410      	add	r0, r2
    tmp24 = tmp13 - tmp10 + tmp11;
 80126a6:	188a      	adds	r2, r1, r2
    tmp21 = tmp12 + tmp10 + tmp11;
 80126a8:	9005      	str	r0, [sp, #20]
    tmp24 = tmp13 - tmp10 + tmp11;
 80126aa:	9206      	str	r2, [sp, #24]
    tmp11 += tmp11;
 80126ac:	f44f 52b5 	mov.w	r2, #5792	; 0x16a0
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 80126b0:	4862      	ldr	r0, [pc, #392]	; (801283c <jpeg_idct_15x15+0x484>)
    tmp11 += tmp11;
 80126b2:	fb02 f20c 	mul.w	r2, r2, ip
 80126b6:	9207      	str	r2, [sp, #28]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 80126b8:	9907      	ldr	r1, [sp, #28]
 80126ba:	9a00      	ldr	r2, [sp, #0]
 80126bc:	440a      	add	r2, r1
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 80126be:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 80126c2:	fb05 fc01 	mul.w	ip, r5, r1
    z4 = (INT32) wsptr[7];
 80126c6:	f854 1c04 	ldr.w	r1, [r4, #-4]
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 80126ca:	9208      	str	r2, [sp, #32]
    tmp13 = z2 - z4;
 80126cc:	eba7 0e01 	sub.w	lr, r7, r1
    z1 = (INT32) wsptr[1];
 80126d0:	f854 2c1c 	ldr.w	r2, [r4, #-28]
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80126d4:	eb02 060e 	add.w	r6, r2, lr
    z2 = z1 - z4;
 80126d8:	eba2 0a01 	sub.w	sl, r2, r1
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80126dc:	fb08 f606 	mul.w	r6, r8, r6
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 80126e0:	f241 0871 	movw	r8, #4209	; 0x1071
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 80126e4:	fb05 f50a 	mul.w	r5, r5, sl
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 80126e8:	fb00 600e 	mla	r0, r0, lr, r6
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 80126ec:	f642 5e02 	movw	lr, #11522	; 0x2d02
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 80126f0:	fb08 6802 	mla	r8, r8, r2, r6
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 80126f4:	f644 66a3 	movw	r6, #20131	; 0x4ea3
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 80126f8:	9009      	str	r0, [sp, #36]	; 0x24
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 80126fa:	eba5 050c 	sub.w	r5, r5, ip
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 80126fe:	4850      	ldr	r0, [pc, #320]	; (8012840 <jpeg_idct_15x15+0x488>)
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8012700:	fb0e ce0a 	mla	lr, lr, sl, ip
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8012704:	f241 2a68 	movw	sl, #4712	; 0x1268
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8012708:	4378      	muls	r0, r7
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801270a:	fb06 e601 	mla	r6, r6, r1, lr
    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 801270e:	900a      	str	r0, [sp, #40]	; 0x28
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8012710:	484c      	ldr	r0, [pc, #304]	; (8012844 <jpeg_idct_15x15+0x48c>)
 8012712:	4347      	muls	r7, r0
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8012714:	f200 7071 	addw	r0, r0, #1905	; 0x771
 8012718:	fb00 ee02 	mla	lr, r0, r2, lr
 801271c:	980a      	ldr	r0, [sp, #40]	; 0x28
    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801271e:	1bf6      	subs	r6, r6, r7
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8012720:	4470      	add	r0, lr
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8012722:	eb02 0e01 	add.w	lr, r2, r1
 8012726:	fb0a fe0e 	mul.w	lr, sl, lr
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 801272a:	f640 7a39 	movw	sl, #3897	; 0xf39
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801272e:	900b      	str	r0, [sp, #44]	; 0x2c
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8012730:	fb0a e202 	mla	r2, sl, r2, lr
 8012734:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012736:	eba2 020c 	sub.w	r2, r2, ip
 801273a:	4402      	add	r2, r0
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 801273c:	4842      	ldr	r0, [pc, #264]	; (8012848 <jpeg_idct_15x15+0x490>)
 801273e:	fb00 e101 	mla	r1, r0, r1, lr
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012742:	980c      	ldr	r0, [sp, #48]	; 0x30
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8012744:	4461      	add	r1, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012746:	4684      	mov	ip, r0
 8012748:	9890      	ldr	r0, [sp, #576]	; 0x240
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 801274a:	440f      	add	r7, r1
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801274c:	9901      	ldr	r1, [sp, #4]
 801274e:	4431      	add	r1, r6
			     & RANGE_MASK];
 8012750:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8012754:	f81b 1001 	ldrb.w	r1, [fp, r1]
 8012758:	f80c 1000 	strb.w	r1, [ip, r0]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801275c:	9901      	ldr	r1, [sp, #4]
 801275e:	1b8e      	subs	r6, r1, r6
			     & RANGE_MASK];
 8012760:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8012764:	f81b 1006 	ldrb.w	r1, [fp, r6]
 8012768:	7399      	strb	r1, [r3, #14]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801276a:	9905      	ldr	r1, [sp, #20]
 801276c:	4441      	add	r1, r8
			     & RANGE_MASK];
 801276e:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8012772:	f81b 1001 	ldrb.w	r1, [fp, r1]
 8012776:	7059      	strb	r1, [r3, #1]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012778:	9905      	ldr	r1, [sp, #20]
 801277a:	eba1 0008 	sub.w	r0, r1, r8
			     & RANGE_MASK];
 801277e:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8012782:	f81b 1000 	ldrb.w	r1, [fp, r0]
 8012786:	7359      	strb	r1, [r3, #13]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012788:	9908      	ldr	r1, [sp, #32]
 801278a:	4429      	add	r1, r5
			     & RANGE_MASK];
 801278c:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8012790:	f81b 1001 	ldrb.w	r1, [fp, r1]
 8012794:	7099      	strb	r1, [r3, #2]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8012796:	9908      	ldr	r1, [sp, #32]
 8012798:	1b4d      	subs	r5, r1, r5
			     & RANGE_MASK];
 801279a:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801279e:	f81b 1005 	ldrb.w	r1, [fp, r5]
 80127a2:	7319      	strb	r1, [r3, #12]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80127a4:	9902      	ldr	r1, [sp, #8]
 80127a6:	4411      	add	r1, r2
			     & RANGE_MASK];
 80127a8:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80127ac:	f81b 1001 	ldrb.w	r1, [fp, r1]
 80127b0:	70d9      	strb	r1, [r3, #3]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80127b2:	9902      	ldr	r1, [sp, #8]
 80127b4:	1a8a      	subs	r2, r1, r2
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80127b6:	9909      	ldr	r1, [sp, #36]	; 0x24
			     & RANGE_MASK];
 80127b8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80127bc:	f81b 2002 	ldrb.w	r2, [fp, r2]
 80127c0:	72da      	strb	r2, [r3, #11]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80127c2:	9a06      	ldr	r2, [sp, #24]
 80127c4:	440a      	add	r2, r1
			     & RANGE_MASK];
 80127c6:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80127ca:	f81b 2002 	ldrb.w	r2, [fp, r2]
 80127ce:	711a      	strb	r2, [r3, #4]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80127d0:	9a06      	ldr	r2, [sp, #24]
 80127d2:	1a52      	subs	r2, r2, r1
			     & RANGE_MASK];
 80127d4:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80127d8:	f81b 2002 	ldrb.w	r2, [fp, r2]
 80127dc:	729a      	strb	r2, [r3, #10]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80127de:	9a03      	ldr	r2, [sp, #12]
 80127e0:	443a      	add	r2, r7
			     & RANGE_MASK];
 80127e2:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80127e6:	f81b 2002 	ldrb.w	r2, [fp, r2]
 80127ea:	715a      	strb	r2, [r3, #5]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80127ec:	9a03      	ldr	r2, [sp, #12]
 80127ee:	1bd7      	subs	r7, r2, r7
			     & RANGE_MASK];
 80127f0:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80127f4:	f81b 2007 	ldrb.w	r2, [fp, r7]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80127f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80127fa:	725a      	strb	r2, [r3, #9]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 80127fc:	9a04      	ldr	r2, [sp, #16]
 80127fe:	440a      	add	r2, r1
			     & RANGE_MASK];
 8012800:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8012804:	f81b 2002 	ldrb.w	r2, [fp, r2]
 8012808:	719a      	strb	r2, [r3, #6]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801280a:	9a04      	ldr	r2, [sp, #16]
 801280c:	eba2 0e01 	sub.w	lr, r2, r1
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8012810:	9907      	ldr	r1, [sp, #28]
			     & RANGE_MASK];
 8012812:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8012816:	f81b 200e 	ldrb.w	r2, [fp, lr]
 801281a:	721a      	strb	r2, [r3, #8]
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 801281c:	9a00      	ldr	r2, [sp, #0]
 801281e:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
			     & RANGE_MASK];
 8012822:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
 8012826:	f81b 2002 	ldrb.w	r2, [fp, r2]
 801282a:	71da      	strb	r2, [r3, #7]
  for (ctr = 0; ctr < 15; ctr++) {
 801282c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801282e:	454b      	cmp	r3, r9
 8012830:	f47f aee7 	bne.w	8012602 <jpeg_idct_15x15+0x24a>
  }
}
 8012834:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 8012838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801283c:	ffffba5c 	.word	0xffffba5c
 8012840:	ffffe566 	.word	0xffffe566
 8012844:	ffffd4f6 	.word	0xffffd4f6
 8012848:	ffffe42f 	.word	0xffffe42f

0801284c <jpeg_idct_16x16>:

GLOBAL(void)
jpeg_idct_16x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801284c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012850:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8012854:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012856:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801285a:	f103 0880 	add.w	r8, r3, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801285e:	1e93      	subs	r3, r2, #2
 8012860:	9300      	str	r3, [sp, #0]
 8012862:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8012864:	f1a3 0e04 	sub.w	lr, r3, #4
 8012868:	f102 030e 	add.w	r3, r2, #14
 801286c:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 801286e:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012870:	9900      	ldr	r1, [sp, #0]
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012872:	f642 1bcf 	movw	fp, #10703	; 0x29cf
    tmp13 = tmp0 - tmp2;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012876:	f640 05d4 	movw	r5, #2260	; 0x8d4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 801287a:	f642 4663 	movw	r6, #11363	; 0x2c63
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801287e:	f931 2f02 	ldrsh.w	r2, [r1, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012882:	3304      	adds	r3, #4

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012884:	4fd7      	ldr	r7, [pc, #860]	; (8012be4 <jpeg_idct_16x16+0x398>)
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012886:	9100      	str	r1, [sp, #0]
 8012888:	f85e 1f04 	ldr.w	r1, [lr, #4]!
 801288c:	4351      	muls	r1, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801288e:	9a00      	ldr	r2, [sp, #0]
 8012890:	f9b2 0040 	ldrsh.w	r0, [r2, #64]	; 0x40
    tmp0 <<= CONST_BITS;
 8012894:	0349      	lsls	r1, r1, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012896:	f8de 2080 	ldr.w	r2, [lr, #128]	; 0x80
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);
 801289a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801289e:	4342      	muls	r2, r0
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80128a0:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80128a4:	fb0b fb02 	mul.w	fp, fp, r2
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80128a8:	4342      	muls	r2, r0
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80128aa:	f245 2003 	movw	r0, #20995	; 0x5203
    tmp10 = tmp0 + tmp1;
 80128ae:	eb01 040b 	add.w	r4, r1, fp
    tmp11 = tmp0 - tmp1;
 80128b2:	eba1 0b0b 	sub.w	fp, r1, fp
    tmp12 = tmp0 + tmp2;
 80128b6:	eb01 0902 	add.w	r9, r1, r2
    tmp13 = tmp0 - tmp2;
 80128ba:	1a89      	subs	r1, r1, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80128bc:	9a00      	ldr	r2, [sp, #0]
 80128be:	f9b2 a020 	ldrsh.w	sl, [r2, #32]
 80128c2:	f8de 2040 	ldr.w	r2, [lr, #64]	; 0x40
 80128c6:	fb02 fa0a 	mul.w	sl, r2, sl
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80128ca:	9a00      	ldr	r2, [sp, #0]
 80128cc:	f9b2 c060 	ldrsh.w	ip, [r2, #96]	; 0x60
 80128d0:	f8de 20c0 	ldr.w	r2, [lr, #192]	; 0xc0
 80128d4:	fb02 fc0c 	mul.w	ip, r2, ip
    z3 = z1 - z2;
 80128d8:	ebaa 020c 	sub.w	r2, sl, ip
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 80128dc:	4355      	muls	r5, r2
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80128de:	4356      	muls	r6, r2
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80128e0:	f641 42cd 	movw	r2, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80128e4:	fb00 600c 	mla	r0, r0, ip, r6
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80128e8:	fb02 520a 	mla	r2, r2, sl, r5
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80128ec:	fb07 6a0a 	mla	sl, r7, sl, r6
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80128f0:	4ebd      	ldr	r6, [pc, #756]	; (8012be8 <jpeg_idct_16x16+0x39c>)
 80128f2:	fb06 5c0c 	mla	ip, r6, ip, r5

    tmp20 = tmp10 + tmp0;
 80128f6:	1825      	adds	r5, r4, r0
    tmp27 = tmp10 - tmp0;
 80128f8:	1a20      	subs	r0, r4, r0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80128fa:	f642 364e 	movw	r6, #11086	; 0x2b4e
    tmp20 = tmp10 + tmp0;
 80128fe:	9501      	str	r5, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8012900:	9002      	str	r0, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8012902:	eb09 0002 	add.w	r0, r9, r2
    tmp26 = tmp12 - tmp1;
 8012906:	eba9 0202 	sub.w	r2, r9, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801290a:	f8de 50a0 	ldr.w	r5, [lr, #160]	; 0xa0
    tmp21 = tmp12 + tmp1;
 801290e:	9003      	str	r0, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8012910:	9204      	str	r2, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8012912:	eb01 020a 	add.w	r2, r1, sl
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012916:	f8de 0020 	ldr.w	r0, [lr, #32]
    tmp22 = tmp13 + tmp2;
 801291a:	9205      	str	r2, [sp, #20]
    tmp25 = tmp13 - tmp2;
 801291c:	eba1 020a 	sub.w	r2, r1, sl
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012920:	f241 5a55 	movw	sl, #5461	; 0x1555
    tmp25 = tmp13 - tmp2;
 8012924:	9206      	str	r2, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8012926:	eb0b 020c 	add.w	r2, fp, ip
 801292a:	9207      	str	r2, [sp, #28]
    tmp24 = tmp11 - tmp3;
 801292c:	ebab 020c 	sub.w	r2, fp, ip
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012930:	f242 2cfc 	movw	ip, #8956	; 0x22fc
    tmp24 = tmp11 - tmp3;
 8012934:	9208      	str	r2, [sp, #32]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012936:	9a00      	ldr	r2, [sp, #0]
 8012938:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 801293c:	4350      	muls	r0, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801293e:	9a00      	ldr	r2, [sp, #0]
 8012940:	f9b2 1030 	ldrsh.w	r1, [r2, #48]	; 0x30
 8012944:	f8de 2060 	ldr.w	r2, [lr, #96]	; 0x60
 8012948:	434a      	muls	r2, r1
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801294a:	9900      	ldr	r1, [sp, #0]
 801294c:	f9b1 1050 	ldrsh.w	r1, [r1, #80]	; 0x50
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012950:	eba0 0b02 	sub.w	fp, r0, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012954:	434d      	muls	r5, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012956:	9900      	ldr	r1, [sp, #0]
 8012958:	f9b1 4070 	ldrsh.w	r4, [r1, #112]	; 0x70
    tmp11 = z1 + z3;
 801295c:	1947      	adds	r7, r0, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801295e:	f8de 10e0 	ldr.w	r1, [lr, #224]	; 0xe0
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012962:	fb0a fa07 	mul.w	sl, sl, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012966:	4361      	muls	r1, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012968:	1884      	adds	r4, r0, r2
 801296a:	4366      	muls	r6, r4
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801296c:	f242 74e9 	movw	r4, #10217	; 0x27e9
 8012970:	fb04 f907 	mul.w	r9, r4, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012974:	1844      	adds	r4, r0, r1
 8012976:	fb0c f404 	mul.w	r4, ip, r4
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801297a:	f641 4cb6 	movw	ip, #7350	; 0x1cb6
    tmp0  = tmp1 + tmp2 + tmp3 -
 801297e:	eb06 0709 	add.w	r7, r6, r9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012982:	9409      	str	r4, [sp, #36]	; 0x24
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012984:	1a44      	subs	r4, r0, r1
 8012986:	fb0c fc04 	mul.w	ip, ip, r4
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801298a:	f640 5423 	movw	r4, #3363	; 0xd23
 801298e:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012992:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012994:	4427      	add	r7, r4
 8012996:	4c95      	ldr	r4, [pc, #596]	; (8012bec <jpeg_idct_16x16+0x3a0>)
 8012998:	fb04 7400 	mla	r4, r4, r0, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 801299c:	4f94      	ldr	r7, [pc, #592]	; (8012bf0 <jpeg_idct_16x16+0x3a4>)
    tmp0  = tmp1 + tmp2 + tmp3 -
 801299e:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 80129a0:	eb0c 040a 	add.w	r4, ip, sl
 80129a4:	445c      	add	r4, fp
 80129a6:	fb07 4000 	mla	r0, r7, r0, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80129aa:	f44f 648e 	mov.w	r4, #1136	; 0x470
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80129ae:	4f91      	ldr	r7, [pc, #580]	; (8012bf4 <jpeg_idct_16x16+0x3a8>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 80129b0:	900b      	str	r0, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80129b2:	1950      	adds	r0, r2, r5
 80129b4:	4344      	muls	r4, r0
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 80129b6:	f240 204d 	movw	r0, #589	; 0x24d
 80129ba:	fb00 4002 	mla	r0, r0, r2, r4
 80129be:	4406      	add	r6, r0
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80129c0:	488d      	ldr	r0, [pc, #564]	; (8012bf8 <jpeg_idct_16x16+0x3ac>)
 80129c2:	fb00 4405 	mla	r4, r0, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80129c6:	1aa8      	subs	r0, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80129c8:	444c      	add	r4, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80129ca:	f642 5909 	movw	r9, #11529	; 0x2d09
 80129ce:	fb09 f000 	mul.w	r0, r9, r0
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80129d2:	fb07 0905 	mla	r9, r7, r5, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
    z2    += z4;
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80129d6:	9f09      	ldr	r7, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80129d8:	44ca      	add	sl, r9
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80129da:	f643 791a 	movw	r9, #16154	; 0x3f1a
 80129de:	fb09 0902 	mla	r9, r9, r2, r0
    z2    += z4;
 80129e2:	440a      	add	r2, r1
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80129e4:	4885      	ldr	r0, [pc, #532]	; (8012bfc <jpeg_idct_16x16+0x3b0>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80129e6:	44d9      	add	r9, fp
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80129e8:	fb00 fb02 	mul.w	fp, r0, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80129ec:	f242 2018 	movw	r0, #8728	; 0x2218
 80129f0:	fb00 b001 	mla	r0, r0, r1, fp
    tmp1  += z1;
 80129f4:	445e      	add	r6, fp
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80129f6:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80129fa:	4438      	add	r0, r7
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 80129fc:	4f80      	ldr	r7, [pc, #512]	; (8012c00 <jpeg_idct_16x16+0x3b4>)
 80129fe:	437a      	muls	r2, r7
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012a00:	fb0b 2b01 	mla	fp, fp, r1, r2
    tmp12 += z2;
 8012a04:	444a      	add	r2, r9
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012a06:	f46f 7959 	mvn.w	r9, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012a0a:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012a0c:	eb05 0b01 	add.w	fp, r5, r1
 8012a10:	444f      	add	r7, r9
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012a12:	1b49      	subs	r1, r1, r5
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012a14:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012a16:	fb07 fb0b 	mul.w	fp, r7, fp
    tmp3  += z2;
 8012a1a:	eb00 090b 	add.w	r9, r0, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012a1e:	f640 5023 	movw	r0, #3363	; 0xd23
    tmp2  += z2;
 8012a22:	445c      	add	r4, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012a24:	4341      	muls	r1, r0
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012a26:	9801      	ldr	r0, [sp, #4]
 8012a28:	4428      	add	r0, r5
    tmp10 += z2;
 8012a2a:	448c      	add	ip, r1
    tmp11 += z2;
 8012a2c:	4451      	add	r1, sl
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8012a2e:	12c0      	asrs	r0, r0, #11
 8012a30:	f843 0c04 	str.w	r0, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8012a34:	9801      	ldr	r0, [sp, #4]
 8012a36:	1b47      	subs	r7, r0, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8012a38:	9803      	ldr	r0, [sp, #12]
 8012a3a:	4430      	add	r0, r6
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8012a3c:	12ff      	asrs	r7, r7, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8012a3e:	12c0      	asrs	r0, r0, #11
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8012a40:	f8c3 71dc 	str.w	r7, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 8012a44:	61d8      	str	r0, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8012a46:	9803      	ldr	r0, [sp, #12]
 8012a48:	1b86      	subs	r6, r0, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8012a4a:	9805      	ldr	r0, [sp, #20]
 8012a4c:	4420      	add	r0, r4
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8012a4e:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8012a50:	12c0      	asrs	r0, r0, #11
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8012a52:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8012a56:	63d8      	str	r0, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8012a58:	9805      	ldr	r0, [sp, #20]
 8012a5a:	1b04      	subs	r4, r0, r4
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8012a5c:	9807      	ldr	r0, [sp, #28]
 8012a5e:	4448      	add	r0, r9
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8012a60:	12e4      	asrs	r4, r4, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8012a62:	12c0      	asrs	r0, r0, #11
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8012a64:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8012a68:	65d8      	str	r0, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 8012a6a:	9807      	ldr	r0, [sp, #28]
 8012a6c:	eba0 0009 	sub.w	r0, r0, r9
 8012a70:	12c0      	asrs	r0, r0, #11
 8012a72:	f8c3 017c 	str.w	r0, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8012a76:	9808      	ldr	r0, [sp, #32]
 8012a78:	4460      	add	r0, ip
 8012a7a:	12c0      	asrs	r0, r0, #11
 8012a7c:	67d8      	str	r0, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8012a7e:	9808      	ldr	r0, [sp, #32]
 8012a80:	eba0 0c0c 	sub.w	ip, r0, ip
 8012a84:	ea4f 20ec 	mov.w	r0, ip, asr #11
 8012a88:	f8c3 015c 	str.w	r0, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8012a8c:	9806      	ldr	r0, [sp, #24]
 8012a8e:	4408      	add	r0, r1
 8012a90:	12c0      	asrs	r0, r0, #11
 8012a92:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8012a96:	9806      	ldr	r0, [sp, #24]
 8012a98:	1a41      	subs	r1, r0, r1
 8012a9a:	12c9      	asrs	r1, r1, #11
 8012a9c:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8012aa0:	9904      	ldr	r1, [sp, #16]
 8012aa2:	4411      	add	r1, r2
 8012aa4:	12c9      	asrs	r1, r1, #11
 8012aa6:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8012aaa:	9904      	ldr	r1, [sp, #16]
 8012aac:	1a8a      	subs	r2, r1, r2
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8012aae:	990b      	ldr	r1, [sp, #44]	; 0x2c
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8012ab0:	12d2      	asrs	r2, r2, #11
 8012ab2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8012ab6:	9a02      	ldr	r2, [sp, #8]
 8012ab8:	440a      	add	r2, r1
 8012aba:	12d2      	asrs	r2, r2, #11
 8012abc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8012ac0:	9a02      	ldr	r2, [sp, #8]
 8012ac2:	1a54      	subs	r4, r2, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012ac4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012ac6:	9900      	ldr	r1, [sp, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8012ac8:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012aca:	428a      	cmp	r2, r1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8012acc:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012ad0:	f47f aece 	bne.w	8012870 <jpeg_idct_16x16+0x24>
 8012ad4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  }

  /* Pass 2: process 16 rows from work array, store into output array. */

  wsptr = workspace;
 8012ad6:	ad0e      	add	r5, sp, #56	; 0x38
 8012ad8:	3b04      	subs	r3, #4
 8012ada:	9300      	str	r3, [sp, #0]
 8012adc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012ade:	333c      	adds	r3, #60	; 0x3c
 8012ae0:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 16; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012ae2:	9b00      	ldr	r3, [sp, #0]
    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012ae4:	f642 1ccf 	movw	ip, #10703	; 0x29cf
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012ae8:	6828      	ldr	r0, [r5, #0]
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012aea:	f241 1a51 	movw	sl, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 8012aee:	461a      	mov	r2, r3
    tmp11 = tmp0 - tmp1;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp0 - tmp2;

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[6];
 8012af0:	f8d5 e018 	ldr.w	lr, [r5, #24]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012af4:	3010      	adds	r0, #16
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012af6:	f640 0bd4 	movw	fp, #2260	; 0x8d4
    outptr = output_buf[ctr] + output_col;
 8012afa:	f852 3f04 	ldr.w	r3, [r2, #4]!
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012afe:	f245 2903 	movw	r9, #20995	; 0x5203
			     & RANGE_MASK];
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012b02:	3520      	adds	r5, #32
    outptr = output_buf[ctr] + output_col;
 8012b04:	930c      	str	r3, [sp, #48]	; 0x30
 8012b06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012b08:	9200      	str	r2, [sp, #0]
 8012b0a:	9a98      	ldr	r2, [sp, #608]	; 0x260
 8012b0c:	1899      	adds	r1, r3, r2
    z1 = (INT32) wsptr[4];
 8012b0e:	f855 3c10 	ldr.w	r3, [r5, #-16]
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012b12:	fb0a fa03 	mul.w	sl, sl, r3
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012b16:	fb0c fc03 	mul.w	ip, ip, r3
    z3 = z1 - z2;
 8012b1a:	f855 3c18 	ldr.w	r3, [r5, #-24]
    tmp12 = tmp0 + tmp2;
 8012b1e:	eb0a 3640 	add.w	r6, sl, r0, lsl #13
    tmp10 = tmp0 + tmp1;
 8012b22:	eb0c 3440 	add.w	r4, ip, r0, lsl #13
    z3 = z1 - z2;
 8012b26:	eba3 020e 	sub.w	r2, r3, lr
    tmp11 = tmp0 - tmp1;
 8012b2a:	ebcc 3c40 	rsb	ip, ip, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 8012b2e:	ebca 3040 	rsb	r0, sl, r0, lsl #13
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012b32:	f642 4a63 	movw	sl, #11363	; 0x2c63
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012b36:	fb0b fb02 	mul.w	fp, fp, r2
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012b3a:	fb0a f702 	mul.w	r7, sl, r2
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012b3e:	f641 42cd 	movw	r2, #7373	; 0x1ccd
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012b42:	469a      	mov	sl, r3
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012b44:	fb02 b203 	mla	r2, r2, r3, fp
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012b48:	4b26      	ldr	r3, [pc, #152]	; (8012be4 <jpeg_idct_16x16+0x398>)
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012b4a:	fb09 790e 	mla	r9, r9, lr, r7
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012b4e:	fb03 7a0a 	mla	sl, r3, sl, r7
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012b52:	f203 23ee 	addw	r3, r3, #750	; 0x2ee
    z3 = (INT32) wsptr[5];
 8012b56:	f855 7c0c 	ldr.w	r7, [r5, #-12]
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012b5a:	fb03 bb0e 	mla	fp, r3, lr, fp
    tmp20 = tmp10 + tmp0;
 8012b5e:	eb04 0309 	add.w	r3, r4, r9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012b62:	f242 2efc 	movw	lr, #8956	; 0x22fc
    tmp20 = tmp10 + tmp0;
 8012b66:	9301      	str	r3, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8012b68:	eba4 0309 	sub.w	r3, r4, r9
    z1 = (INT32) wsptr[1];
 8012b6c:	f855 4c1c 	ldr.w	r4, [r5, #-28]
    tmp27 = tmp10 - tmp0;
 8012b70:	9302      	str	r3, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8012b72:	18b3      	adds	r3, r6, r2
    tmp11 = z1 + z3;
 8012b74:	eb04 0907 	add.w	r9, r4, r7
    tmp21 = tmp12 + tmp1;
 8012b78:	9303      	str	r3, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8012b7a:	1ab3      	subs	r3, r6, r2
    z2 = (INT32) wsptr[3];
 8012b7c:	f855 2c14 	ldr.w	r2, [r5, #-20]
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012b80:	f642 364e 	movw	r6, #11086	; 0x2b4e
    tmp26 = tmp12 - tmp1;
 8012b84:	9304      	str	r3, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8012b86:	eb00 030a 	add.w	r3, r0, sl
 8012b8a:	9305      	str	r3, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8012b8c:	eba0 030a 	sub.w	r3, r0, sl
    z4 = (INT32) wsptr[7];
 8012b90:	f855 0c04 	ldr.w	r0, [r5, #-4]
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012b94:	f241 5a55 	movw	sl, #5461	; 0x1555
    tmp25 = tmp13 - tmp2;
 8012b98:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8012b9a:	eb0c 030b 	add.w	r3, ip, fp
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012b9e:	fb0a fa09 	mul.w	sl, sl, r9
    tmp23 = tmp11 + tmp3;
 8012ba2:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8012ba4:	ebac 030b 	sub.w	r3, ip, fp
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012ba8:	f242 7be9 	movw	fp, #10217	; 0x27e9
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012bac:	f641 4cb6 	movw	ip, #7350	; 0x1cb6
    tmp24 = tmp11 - tmp3;
 8012bb0:	9308      	str	r3, [sp, #32]
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012bb2:	18a3      	adds	r3, r4, r2
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012bb4:	fb0b fb09 	mul.w	fp, fp, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012bb8:	eba4 0902 	sub.w	r9, r4, r2
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012bbc:	435e      	muls	r6, r3
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012bbe:	1823      	adds	r3, r4, r0
 8012bc0:	fb0e fe03 	mul.w	lr, lr, r3
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012bc4:	1a23      	subs	r3, r4, r0
 8012bc6:	fb0c fc03 	mul.w	ip, ip, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012bca:	f640 5323 	movw	r3, #3363	; 0xd23
 8012bce:	fb03 f309 	mul.w	r3, r3, r9
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012bd2:	eb06 090b 	add.w	r9, r6, fp
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012bd6:	9309      	str	r3, [sp, #36]	; 0x24
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012bd8:	44f1      	add	r9, lr
 8012bda:	4b04      	ldr	r3, [pc, #16]	; (8012bec <jpeg_idct_16x16+0x3a0>)
 8012bdc:	fb03 9904 	mla	r9, r3, r4, r9
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012be2:	e00f      	b.n	8012c04 <jpeg_idct_16x16+0x3b8>
 8012be4:	ffffecc2 	.word	0xffffecc2
 8012be8:	ffffefb0 	.word	0xffffefb0
 8012bec:	ffffb6d6 	.word	0xffffb6d6
 8012bf0:	ffffc542 	.word	0xffffc542
 8012bf4:	ffffe77a 	.word	0xffffe77a
 8012bf8:	ffffdbfa 	.word	0xffffdbfa
 8012bfc:	ffffeaab 	.word	0xffffeaab
 8012c00:	ffffd817 	.word	0xffffd817
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012c04:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012c08:	eb0c 090a 	add.w	r9, ip, sl
 8012c0c:	4499      	add	r9, r3
 8012c0e:	4b63      	ldr	r3, [pc, #396]	; (8012d9c <jpeg_idct_16x16+0x550>)
 8012c10:	fb03 9404 	mla	r4, r3, r4, r9
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012c14:	f44f 698e 	mov.w	r9, #1136	; 0x470
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012c18:	4b61      	ldr	r3, [pc, #388]	; (8012da0 <jpeg_idct_16x16+0x554>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012c1a:	940b      	str	r4, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012c1c:	19d4      	adds	r4, r2, r7
 8012c1e:	fb09 f404 	mul.w	r4, r9, r4
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012c22:	f240 294d 	movw	r9, #589	; 0x24d
 8012c26:	fb09 4902 	mla	r9, r9, r2, r4
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012c2a:	fb03 4407 	mla	r4, r3, r7, r4
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012c2e:	f503 6338 	add.w	r3, r3, #2944	; 0xb80
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012c32:	444e      	add	r6, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012c34:	eba7 0902 	sub.w	r9, r7, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012c38:	445c      	add	r4, fp
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012c3a:	f642 5b09 	movw	fp, #11529	; 0x2d09
 8012c3e:	fb0b f909 	mul.w	r9, fp, r9
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012c42:	fb03 9b07 	mla	fp, r3, r7, r9
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012c48:	44da      	add	sl, fp
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012c4a:	f643 7b1a 	movw	fp, #16154	; 0x3f1a
 8012c4e:	fb0b 9902 	mla	r9, fp, r2, r9
    z2    += z4;
 8012c52:	4402      	add	r2, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012c54:	4499      	add	r9, r3
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012c56:	4b53      	ldr	r3, [pc, #332]	; (8012da4 <jpeg_idct_16x16+0x558>)
 8012c58:	fb03 fb02 	mul.w	fp, r3, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012c5c:	f242 2318 	movw	r3, #8728	; 0x2218
 8012c60:	fb03 b300 	mla	r3, r3, r0, fp
    tmp1  += z1;
 8012c64:	445e      	add	r6, fp
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012c66:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012c6a:	449e      	add	lr, r3
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8012c6c:	4b4e      	ldr	r3, [pc, #312]	; (8012da8 <jpeg_idct_16x16+0x55c>)
 8012c6e:	435a      	muls	r2, r3
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012c70:	fb0b 2b00 	mla	fp, fp, r0, r2
    tmp12 += z2;
 8012c74:	444a      	add	r2, r9
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012c76:	f46f 7959 	mvn.w	r9, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012c7a:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012c7c:	eb07 0b00 	add.w	fp, r7, r0
 8012c80:	444b      	add	r3, r9
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012c82:	1bc0      	subs	r0, r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012c84:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012c86:	fb03 fb0b 	mul.w	fp, r3, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012c8a:	f640 5323 	movw	r3, #3363	; 0xd23
 8012c8e:	4358      	muls	r0, r3
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012c90:	9b01      	ldr	r3, [sp, #4]
    tmp2  += z2;
 8012c92:	445c      	add	r4, fp
    tmp3  += z2;
 8012c94:	44de      	add	lr, fp
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012c96:	443b      	add	r3, r7
 8012c98:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    tmp10 += z2;
 8012c9a:	4484      	add	ip, r0
    tmp11 += z2;
 8012c9c:	4450      	add	r0, sl
			     & RANGE_MASK];
 8012c9e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012ca2:	46b9      	mov	r9, r7
 8012ca4:	9f98      	ldr	r7, [sp, #608]	; 0x260
 8012ca6:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012caa:	f809 3007 	strb.w	r3, [r9, r7]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8012cae:	9b01      	ldr	r3, [sp, #4]
 8012cb0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8012cb2:	1bdb      	subs	r3, r3, r7
			     & RANGE_MASK];
 8012cb4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8012cb8:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012cbc:	73cb      	strb	r3, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012cbe:	9b03      	ldr	r3, [sp, #12]
 8012cc0:	4433      	add	r3, r6
			     & RANGE_MASK];
 8012cc2:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012cc6:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012cca:	704b      	strb	r3, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8012ccc:	9b03      	ldr	r3, [sp, #12]
 8012cce:	1b9e      	subs	r6, r3, r6
			     & RANGE_MASK];
 8012cd0:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8012cd4:	f818 3006 	ldrb.w	r3, [r8, r6]
 8012cd8:	738b      	strb	r3, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012cda:	9b05      	ldr	r3, [sp, #20]
 8012cdc:	4423      	add	r3, r4
			     & RANGE_MASK];
 8012cde:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8012ce2:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012ce6:	708b      	strb	r3, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8012ce8:	9b05      	ldr	r3, [sp, #20]
 8012cea:	1b1c      	subs	r4, r3, r4
			     & RANGE_MASK];
 8012cec:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8012cf0:	f818 3004 	ldrb.w	r3, [r8, r4]
 8012cf4:	734b      	strb	r3, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012cf6:	9b07      	ldr	r3, [sp, #28]
 8012cf8:	4473      	add	r3, lr
			     & RANGE_MASK];
 8012cfa:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8012cfe:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012d02:	70cb      	strb	r3, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8012d04:	9b07      	ldr	r3, [sp, #28]
 8012d06:	eba3 0e0e 	sub.w	lr, r3, lr
			     & RANGE_MASK];
 8012d0a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8012d0e:	f818 300e 	ldrb.w	r3, [r8, lr]
 8012d12:	730b      	strb	r3, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012d14:	9b08      	ldr	r3, [sp, #32]
 8012d16:	4463      	add	r3, ip
			     & RANGE_MASK];
 8012d18:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8012d1c:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012d20:	710b      	strb	r3, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8012d22:	9b08      	ldr	r3, [sp, #32]
 8012d24:	eba3 0c0c 	sub.w	ip, r3, ip
			     & RANGE_MASK];
 8012d28:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8012d2c:	f818 300c 	ldrb.w	r3, [r8, ip]
 8012d30:	72cb      	strb	r3, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012d32:	9b06      	ldr	r3, [sp, #24]
 8012d34:	4403      	add	r3, r0
			     & RANGE_MASK];
 8012d36:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8012d3a:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012d3e:	714b      	strb	r3, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8012d40:	9b06      	ldr	r3, [sp, #24]
 8012d42:	1a18      	subs	r0, r3, r0
			     & RANGE_MASK];
 8012d44:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8012d48:	f818 3000 	ldrb.w	r3, [r8, r0]
 8012d4c:	728b      	strb	r3, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012d4e:	9b04      	ldr	r3, [sp, #16]
 8012d50:	4413      	add	r3, r2
			     & RANGE_MASK];
 8012d52:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8012d56:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012d5a:	718b      	strb	r3, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012d5c:	9b04      	ldr	r3, [sp, #16]
 8012d5e:	1a9a      	subs	r2, r3, r2
			     & RANGE_MASK];
 8012d60:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012d64:	f818 3002 	ldrb.w	r3, [r8, r2]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012d68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8012d6a:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012d6c:	9b02      	ldr	r3, [sp, #8]
 8012d6e:	4413      	add	r3, r2
			     & RANGE_MASK];
 8012d70:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8012d74:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012d78:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8012d7a:	9b02      	ldr	r3, [sp, #8]
 8012d7c:	1a9c      	subs	r4, r3, r2
  for (ctr = 0; ctr < 16; ctr++) {
 8012d7e:	9a00      	ldr	r2, [sp, #0]
			     & RANGE_MASK];
 8012d80:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8012d84:	f818 3004 	ldrb.w	r3, [r8, r4]
 8012d88:	720b      	strb	r3, [r1, #8]
  for (ctr = 0; ctr < 16; ctr++) {
 8012d8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012d8c:	4293      	cmp	r3, r2
 8012d8e:	f47f aea8 	bne.w	8012ae2 <jpeg_idct_16x16+0x296>
  }
}
 8012d92:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8012d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d9a:	bf00      	nop
 8012d9c:	ffffc542 	.word	0xffffc542
 8012da0:	ffffdbfa 	.word	0xffffdbfa
 8012da4:	ffffeaab 	.word	0xffffeaab
 8012da8:	ffffd817 	.word	0xffffd817

08012dac <jpeg_idct_16x8>:

GLOBAL(void)
jpeg_idct_16x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012db0:	b0cf      	sub	sp, #316	; 0x13c
 8012db2:	3a02      	subs	r2, #2
 8012db4:	9304      	str	r3, [sp, #16]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012db6:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8012dba:	6d48      	ldr	r0, [r1, #84]	; 0x54
  wsptr = workspace;
 8012dbc:	a90e      	add	r1, sp, #56	; 0x38
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012dbe:	f103 0880 	add.w	r8, r3, #128	; 0x80
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8012dc2:	f100 0320 	add.w	r3, r0, #32
 8012dc6:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8012dc8:	f9b2 3052 	ldrsh.w	r3, [r2, #82]	; 0x52
 8012dcc:	3104      	adds	r1, #4
 8012dce:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
 8012dd2:	f9b2 4022 	ldrsh.w	r4, [r2, #34]	; 0x22
 8012dd6:	f9b2 c032 	ldrsh.w	ip, [r2, #50]	; 0x32
 8012dda:	f9b2 e042 	ldrsh.w	lr, [r2, #66]	; 0x42
 8012dde:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
 8012de2:	9303      	str	r3, [sp, #12]
 8012de4:	f850 7b04 	ldr.w	r7, [r0], #4
 8012de8:	f9b2 3062 	ldrsh.w	r3, [r2, #98]	; 0x62
 8012dec:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8012df0:	9e03      	ldr	r6, [sp, #12]
 8012df2:	436f      	muls	r7, r5
 8012df4:	ea4a 0504 	orr.w	r5, sl, r4
 8012df8:	ea4c 0505 	orr.w	r5, ip, r5
 8012dfc:	ea4e 0505 	orr.w	r5, lr, r5
 8012e00:	4335      	orrs	r5, r6
 8012e02:	431d      	orrs	r5, r3
 8012e04:	ea59 0505 	orrs.w	r5, r9, r5
 8012e08:	f040 8161 	bne.w	80130ce <jpeg_idct_16x8+0x322>
	inptr[DCTSIZE*7] == 0) {
      /* AC terms all zero */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8012e0c:	00bf      	lsls	r7, r7, #2
      
      wsptr[DCTSIZE*0] = dcval;
 8012e0e:	f841 7c04 	str.w	r7, [r1, #-4]
      wsptr[DCTSIZE*1] = dcval;
 8012e12:	61cf      	str	r7, [r1, #28]
      wsptr[DCTSIZE*2] = dcval;
 8012e14:	63cf      	str	r7, [r1, #60]	; 0x3c
      wsptr[DCTSIZE*3] = dcval;
 8012e16:	65cf      	str	r7, [r1, #92]	; 0x5c
      wsptr[DCTSIZE*4] = dcval;
 8012e18:	67cf      	str	r7, [r1, #124]	; 0x7c
      wsptr[DCTSIZE*5] = dcval;
 8012e1a:	f8c1 709c 	str.w	r7, [r1, #156]	; 0x9c
      wsptr[DCTSIZE*6] = dcval;
 8012e1e:	f8c1 70bc 	str.w	r7, [r1, #188]	; 0xbc
      wsptr[DCTSIZE*7] = dcval;
 8012e22:	f8c1 70dc 	str.w	r7, [r1, #220]	; 0xdc
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8012e26:	9b05      	ldr	r3, [sp, #20]
 8012e28:	4283      	cmp	r3, r0
 8012e2a:	d1cd      	bne.n	8012dc8 <jpeg_idct_16x8+0x1c>
 8012e2c:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  wsptr = workspace;
 8012e2e:	ad0e      	add	r5, sp, #56	; 0x38
 8012e30:	3b04      	subs	r3, #4
 8012e32:	9300      	str	r3, [sp, #0]
 8012e34:	9b04      	ldr	r3, [sp, #16]
 8012e36:	331c      	adds	r3, #28
 8012e38:	930d      	str	r3, [sp, #52]	; 0x34
  for (ctr = 0; ctr < 8; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8012e3a:	9b00      	ldr	r3, [sp, #0]
    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;

    z1 = (INT32) wsptr[4];
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012e3c:	f642 1ccf 	movw	ip, #10703	; 0x29cf
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012e40:	6828      	ldr	r0, [r5, #0]
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012e42:	f241 1a51 	movw	sl, #4433	; 0x1151
    outptr = output_buf[ctr] + output_col;
 8012e46:	461a      	mov	r2, r3
    tmp11 = tmp0 - tmp1;
    tmp12 = tmp0 + tmp2;
    tmp13 = tmp0 - tmp2;

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[6];
 8012e48:	f8d5 e018 	ldr.w	lr, [r5, #24]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012e4c:	3010      	adds	r0, #16
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012e4e:	f640 0bd4 	movw	fp, #2260	; 0x8d4
    outptr = output_buf[ctr] + output_col;
 8012e52:	f852 3f04 	ldr.w	r3, [r2, #4]!
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012e56:	f245 2903 	movw	r9, #20995	; 0x5203
			     & RANGE_MASK];
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8012e5a:	3520      	adds	r5, #32
    outptr = output_buf[ctr] + output_col;
 8012e5c:	930c      	str	r3, [sp, #48]	; 0x30
 8012e5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e60:	9200      	str	r2, [sp, #0]
 8012e62:	9a58      	ldr	r2, [sp, #352]	; 0x160
 8012e64:	1899      	adds	r1, r3, r2
    z1 = (INT32) wsptr[4];
 8012e66:	f855 3c10 	ldr.w	r3, [r5, #-16]
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8012e6a:	fb0a fa03 	mul.w	sl, sl, r3
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8012e6e:	fb0c fc03 	mul.w	ip, ip, r3
    z3 = z1 - z2;
 8012e72:	f855 3c18 	ldr.w	r3, [r5, #-24]
    tmp12 = tmp0 + tmp2;
 8012e76:	eb0a 3640 	add.w	r6, sl, r0, lsl #13
    tmp10 = tmp0 + tmp1;
 8012e7a:	eb0c 3440 	add.w	r4, ip, r0, lsl #13
    z3 = z1 - z2;
 8012e7e:	eba3 020e 	sub.w	r2, r3, lr
    tmp11 = tmp0 - tmp1;
 8012e82:	ebcc 3c40 	rsb	ip, ip, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 8012e86:	ebca 3040 	rsb	r0, sl, r0, lsl #13
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012e8a:	f642 4a63 	movw	sl, #11363	; 0x2c63
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8012e8e:	fb0b fb02 	mul.w	fp, fp, r2
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8012e92:	fb0a f702 	mul.w	r7, sl, r2
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012e96:	f641 42cd 	movw	r2, #7373	; 0x1ccd
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012e9a:	469a      	mov	sl, r3
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8012e9c:	fb02 b203 	mla	r2, r2, r3, fp
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012ea0:	4bcf      	ldr	r3, [pc, #828]	; (80131e0 <jpeg_idct_16x8+0x434>)
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8012ea2:	fb09 790e 	mla	r9, r9, lr, r7
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8012ea6:	fb03 7a0a 	mla	sl, r3, sl, r7
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012eaa:	f203 23ee 	addw	r3, r3, #750	; 0x2ee
    z3 = (INT32) wsptr[5];
 8012eae:	f855 7c0c 	ldr.w	r7, [r5, #-12]
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8012eb2:	fb03 bb0e 	mla	fp, r3, lr, fp
    tmp20 = tmp10 + tmp0;
 8012eb6:	eb04 0309 	add.w	r3, r4, r9
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012eba:	f242 2efc 	movw	lr, #8956	; 0x22fc
    tmp20 = tmp10 + tmp0;
 8012ebe:	9301      	str	r3, [sp, #4]
    tmp27 = tmp10 - tmp0;
 8012ec0:	eba4 0309 	sub.w	r3, r4, r9
    z1 = (INT32) wsptr[1];
 8012ec4:	f855 4c1c 	ldr.w	r4, [r5, #-28]
    tmp27 = tmp10 - tmp0;
 8012ec8:	9302      	str	r3, [sp, #8]
    tmp21 = tmp12 + tmp1;
 8012eca:	18b3      	adds	r3, r6, r2
    tmp11 = z1 + z3;
 8012ecc:	eb04 0907 	add.w	r9, r4, r7
    tmp21 = tmp12 + tmp1;
 8012ed0:	9303      	str	r3, [sp, #12]
    tmp26 = tmp12 - tmp1;
 8012ed2:	1ab3      	subs	r3, r6, r2
    z2 = (INT32) wsptr[3];
 8012ed4:	f855 2c14 	ldr.w	r2, [r5, #-20]
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012ed8:	f642 364e 	movw	r6, #11086	; 0x2b4e
    tmp26 = tmp12 - tmp1;
 8012edc:	9304      	str	r3, [sp, #16]
    tmp22 = tmp13 + tmp2;
 8012ede:	eb00 030a 	add.w	r3, r0, sl
 8012ee2:	9305      	str	r3, [sp, #20]
    tmp25 = tmp13 - tmp2;
 8012ee4:	eba0 030a 	sub.w	r3, r0, sl
    z4 = (INT32) wsptr[7];
 8012ee8:	f855 0c04 	ldr.w	r0, [r5, #-4]
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012eec:	f241 5a55 	movw	sl, #5461	; 0x1555
    tmp25 = tmp13 - tmp2;
 8012ef0:	9306      	str	r3, [sp, #24]
    tmp23 = tmp11 + tmp3;
 8012ef2:	eb0c 030b 	add.w	r3, ip, fp
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8012ef6:	fb0a fa09 	mul.w	sl, sl, r9
    tmp23 = tmp11 + tmp3;
 8012efa:	9307      	str	r3, [sp, #28]
    tmp24 = tmp11 - tmp3;
 8012efc:	ebac 030b 	sub.w	r3, ip, fp
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012f00:	f242 7be9 	movw	fp, #10217	; 0x27e9
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012f04:	f641 4cb6 	movw	ip, #7350	; 0x1cb6
    tmp24 = tmp11 - tmp3;
 8012f08:	9308      	str	r3, [sp, #32]
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012f0a:	18a3      	adds	r3, r4, r2
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8012f0c:	fb0b fb09 	mul.w	fp, fp, r9
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012f10:	eba4 0902 	sub.w	r9, r4, r2
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8012f14:	435e      	muls	r6, r3
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8012f16:	1823      	adds	r3, r4, r0
 8012f18:	fb0e fe03 	mul.w	lr, lr, r3
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8012f1c:	1a23      	subs	r3, r4, r0
 8012f1e:	fb0c fc03 	mul.w	ip, ip, r3
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012f22:	f640 5323 	movw	r3, #3363	; 0xd23
 8012f26:	fb03 f309 	mul.w	r3, r3, r9
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012f2a:	eb06 090b 	add.w	r9, r6, fp
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8012f2e:	9309      	str	r3, [sp, #36]	; 0x24
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012f30:	44f1      	add	r9, lr
 8012f32:	4bac      	ldr	r3, [pc, #688]	; (80131e4 <jpeg_idct_16x8+0x438>)
 8012f34:	fb03 9904 	mla	r9, r3, r4, r9
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
    tmp0  = tmp1 + tmp2 + tmp3 -
 8012f3a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012f3e:	eb0c 090a 	add.w	r9, ip, sl
 8012f42:	4499      	add	r9, r3
 8012f44:	4ba8      	ldr	r3, [pc, #672]	; (80131e8 <jpeg_idct_16x8+0x43c>)
 8012f46:	fb03 9404 	mla	r4, r3, r4, r9
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012f4a:	f44f 698e 	mov.w	r9, #1136	; 0x470
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012f4e:	4ba7      	ldr	r3, [pc, #668]	; (80131ec <jpeg_idct_16x8+0x440>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 8012f50:	940b      	str	r4, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8012f52:	19d4      	adds	r4, r2, r7
 8012f54:	fb09 f404 	mul.w	r4, r9, r4
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012f58:	f240 294d 	movw	r9, #589	; 0x24d
 8012f5c:	fb09 4902 	mla	r9, r9, r2, r4
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012f60:	fb03 4407 	mla	r4, r3, r7, r4
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012f64:	f503 6338 	add.w	r3, r3, #2944	; 0xb80
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8012f68:	444e      	add	r6, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012f6a:	eba7 0902 	sub.w	r9, r7, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8012f6e:	445c      	add	r4, fp
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8012f70:	f642 5b09 	movw	fp, #11529	; 0x2d09
 8012f74:	fb0b f909 	mul.w	r9, fp, r9
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012f78:	fb03 9b07 	mla	fp, r3, r7, r9
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8012f7e:	44da      	add	sl, fp
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012f80:	f643 7b1a 	movw	fp, #16154	; 0x3f1a
 8012f84:	fb0b 9902 	mla	r9, fp, r2, r9
    z2    += z4;
 8012f88:	4402      	add	r2, r0
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8012f8a:	4499      	add	r9, r3
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8012f8c:	4b98      	ldr	r3, [pc, #608]	; (80131f0 <jpeg_idct_16x8+0x444>)
 8012f8e:	fb03 fb02 	mul.w	fp, r3, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012f92:	f242 2318 	movw	r3, #8728	; 0x2218
 8012f96:	fb03 b300 	mla	r3, r3, r0, fp
    tmp1  += z1;
 8012f9a:	445e      	add	r6, fp
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012f9c:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8012fa0:	449e      	add	lr, r3
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8012fa2:	4b94      	ldr	r3, [pc, #592]	; (80131f4 <jpeg_idct_16x8+0x448>)
 8012fa4:	435a      	muls	r2, r3
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012fa6:	fb0b 2b00 	mla	fp, fp, r0, r2
    tmp12 += z2;
 8012faa:	444a      	add	r2, r9
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012fac:	f46f 7959 	mvn.w	r9, #868	; 0x364
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8012fb0:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012fb2:	eb07 0b00 	add.w	fp, r7, r0
 8012fb6:	444b      	add	r3, r9
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012fb8:	1bc0      	subs	r0, r0, r7
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012fba:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8012fbc:	fb03 fb0b 	mul.w	fp, r3, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8012fc0:	f640 5323 	movw	r3, #3363	; 0xd23
 8012fc4:	4358      	muls	r0, r3
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012fc6:	9b01      	ldr	r3, [sp, #4]
    tmp2  += z2;
 8012fc8:	445c      	add	r4, fp
    tmp3  += z2;
 8012fca:	44de      	add	lr, fp
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012fcc:	443b      	add	r3, r7
 8012fce:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    tmp10 += z2;
 8012fd0:	4484      	add	ip, r0
    tmp11 += z2;
 8012fd2:	4450      	add	r0, sl
			     & RANGE_MASK];
 8012fd4:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8012fd8:	46b9      	mov	r9, r7
 8012fda:	9f58      	ldr	r7, [sp, #352]	; 0x160
 8012fdc:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012fe0:	f809 3007 	strb.w	r3, [r9, r7]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8012fe4:	9b01      	ldr	r3, [sp, #4]
 8012fe6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8012fe8:	1bdb      	subs	r3, r3, r7
			     & RANGE_MASK];
 8012fea:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 8012fee:	f818 3003 	ldrb.w	r3, [r8, r3]
 8012ff2:	73cb      	strb	r3, [r1, #15]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012ff4:	9b03      	ldr	r3, [sp, #12]
 8012ff6:	4433      	add	r3, r6
			     & RANGE_MASK];
 8012ff8:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 8012ffc:	f818 3003 	ldrb.w	r3, [r8, r3]
 8013000:	704b      	strb	r3, [r1, #1]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8013002:	9b03      	ldr	r3, [sp, #12]
 8013004:	1b9e      	subs	r6, r3, r6
			     & RANGE_MASK];
 8013006:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 801300a:	f818 3006 	ldrb.w	r3, [r8, r6]
 801300e:	738b      	strb	r3, [r1, #14]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8013010:	9b05      	ldr	r3, [sp, #20]
 8013012:	4423      	add	r3, r4
			     & RANGE_MASK];
 8013014:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8013018:	f818 3003 	ldrb.w	r3, [r8, r3]
 801301c:	708b      	strb	r3, [r1, #2]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 801301e:	9b05      	ldr	r3, [sp, #20]
 8013020:	1b1c      	subs	r4, r3, r4
			     & RANGE_MASK];
 8013022:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8013026:	f818 3004 	ldrb.w	r3, [r8, r4]
 801302a:	734b      	strb	r3, [r1, #13]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 801302c:	9b07      	ldr	r3, [sp, #28]
 801302e:	4473      	add	r3, lr
			     & RANGE_MASK];
 8013030:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8013034:	f818 3003 	ldrb.w	r3, [r8, r3]
 8013038:	70cb      	strb	r3, [r1, #3]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 801303a:	9b07      	ldr	r3, [sp, #28]
 801303c:	eba3 0e0e 	sub.w	lr, r3, lr
			     & RANGE_MASK];
 8013040:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8013044:	f818 300e 	ldrb.w	r3, [r8, lr]
 8013048:	730b      	strb	r3, [r1, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 801304a:	9b08      	ldr	r3, [sp, #32]
 801304c:	4463      	add	r3, ip
			     & RANGE_MASK];
 801304e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8013052:	f818 3003 	ldrb.w	r3, [r8, r3]
 8013056:	710b      	strb	r3, [r1, #4]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8013058:	9b08      	ldr	r3, [sp, #32]
 801305a:	eba3 0c0c 	sub.w	ip, r3, ip
			     & RANGE_MASK];
 801305e:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8013062:	f818 300c 	ldrb.w	r3, [r8, ip]
 8013066:	72cb      	strb	r3, [r1, #11]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8013068:	9b06      	ldr	r3, [sp, #24]
 801306a:	4403      	add	r3, r0
			     & RANGE_MASK];
 801306c:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8013070:	f818 3003 	ldrb.w	r3, [r8, r3]
 8013074:	714b      	strb	r3, [r1, #5]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8013076:	9b06      	ldr	r3, [sp, #24]
 8013078:	1a18      	subs	r0, r3, r0
			     & RANGE_MASK];
 801307a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 801307e:	f818 3000 	ldrb.w	r3, [r8, r0]
 8013082:	728b      	strb	r3, [r1, #10]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8013084:	9b04      	ldr	r3, [sp, #16]
 8013086:	4413      	add	r3, r2
			     & RANGE_MASK];
 8013088:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 801308c:	f818 3003 	ldrb.w	r3, [r8, r3]
 8013090:	718b      	strb	r3, [r1, #6]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8013092:	9b04      	ldr	r3, [sp, #16]
 8013094:	1a9a      	subs	r2, r3, r2
			     & RANGE_MASK];
 8013096:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 801309a:	f818 3002 	ldrb.w	r3, [r8, r2]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 801309e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 80130a0:	724b      	strb	r3, [r1, #9]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80130a2:	9b02      	ldr	r3, [sp, #8]
 80130a4:	4413      	add	r3, r2
			     & RANGE_MASK];
 80130a6:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80130aa:	f818 3003 	ldrb.w	r3, [r8, r3]
 80130ae:	71cb      	strb	r3, [r1, #7]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 80130b0:	9b02      	ldr	r3, [sp, #8]
 80130b2:	1a9c      	subs	r4, r3, r2
  for (ctr = 0; ctr < 8; ctr++) {
 80130b4:	9a00      	ldr	r2, [sp, #0]
			     & RANGE_MASK];
 80130b6:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 80130ba:	f818 3004 	ldrb.w	r3, [r8, r4]
 80130be:	720b      	strb	r3, [r1, #8]
  for (ctr = 0; ctr < 8; ctr++) {
 80130c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80130c2:	4293      	cmp	r3, r2
 80130c4:	f47f aeb9 	bne.w	8012e3a <jpeg_idct_16x8+0x8e>
  }
}
 80130c8:	b04f      	add	sp, #316	; 0x13c
 80130ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80130ce:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80130d0:	f8d0 50bc 	ldr.w	r5, [r0, #188]	; 0xbc
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80130d4:	4366      	muls	r6, r4
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80130d6:	f241 1451 	movw	r4, #4433	; 0x1151
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80130da:	435d      	muls	r5, r3
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80130dc:	1973      	adds	r3, r6, r5
 80130de:	4363      	muls	r3, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80130e0:	f641 047e 	movw	r4, #6270	; 0x187e
 80130e4:	fb04 3606 	mla	r6, r4, r6, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80130e8:	4c43      	ldr	r4, [pc, #268]	; (80131f8 <jpeg_idct_16x8+0x44c>)
 80130ea:	fb04 3505 	mla	r5, r4, r5, r3
    z2 <<= CONST_BITS;
 80130ee:	037b      	lsls	r3, r7, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80130f0:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 80130f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80130f6:	fb04 f40e 	mul.w	r4, r4, lr
    tmp0 = z2 + z3;
 80130fa:	eb03 3b44 	add.w	fp, r3, r4, lsl #13
    tmp1 = z2 - z3;
 80130fe:	eba3 3344 	sub.w	r3, r3, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 8013102:	ebab 0406 	sub.w	r4, fp, r6
    tmp10 = tmp0 + tmp2;
 8013106:	eb06 070b 	add.w	r7, r6, fp
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801310a:	9e03      	ldr	r6, [sp, #12]
    tmp13 = tmp0 - tmp2;
 801310c:	9400      	str	r4, [sp, #0]
    tmp11 = tmp1 + tmp3;
 801310e:	18ec      	adds	r4, r5, r3
    tmp12 = tmp1 - tmp3;
 8013110:	1b5b      	subs	r3, r3, r5
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013112:	69c5      	ldr	r5, [r0, #28]
    tmp11 = tmp1 + tmp3;
 8013114:	9401      	str	r4, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013116:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801311a:	fb05 fa0a 	mul.w	sl, r5, sl
    tmp12 = tmp1 - tmp3;
 801311e:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013120:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013124:	fb04 f909 	mul.w	r9, r4, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013128:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 801312c:	4366      	muls	r6, r4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801312e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8013130:	fb04 fc0c 	mul.w	ip, r4, ip
    z3 = tmp1 + tmp3;
 8013134:	eb06 0e0a 	add.w	lr, r6, sl
    z2 = tmp0 + tmp2;
 8013138:	eb09 050c 	add.w	r5, r9, ip
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801313c:	eb05 040e 	add.w	r4, r5, lr
 8013140:	435c      	muls	r4, r3
    z2 += z1;
 8013142:	4b2e      	ldr	r3, [pc, #184]	; (80131fc <jpeg_idct_16x8+0x450>)
 8013144:	fb03 4505 	mla	r5, r3, r5, r4
    z3 += z1;
 8013148:	4b2d      	ldr	r3, [pc, #180]	; (8013200 <jpeg_idct_16x8+0x454>)
 801314a:	fb03 440e 	mla	r4, r3, lr, r4
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 801314e:	eb09 0e0a 	add.w	lr, r9, sl
 8013152:	4b2c      	ldr	r3, [pc, #176]	; (8013204 <jpeg_idct_16x8+0x458>)
 8013154:	fb03 fe0e 	mul.w	lr, r3, lr
    tmp0 += z1 + z2;
 8013158:	f640 138e 	movw	r3, #2446	; 0x98e
 801315c:	eb05 0b0e 	add.w	fp, r5, lr
    tmp3 += z1 + z3;
 8013160:	44a6      	add	lr, r4
    tmp0 += z1 + z2;
 8013162:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 8013166:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801316a:	4b27      	ldr	r3, [pc, #156]	; (8013208 <jpeg_idct_16x8+0x45c>)
    tmp3 += z1 + z3;
 801316c:	fb0b ee0a 	mla	lr, fp, sl, lr
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013170:	eb06 0a0c 	add.w	sl, r6, ip
    tmp1 += z1 + z3;
 8013174:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013178:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801317c:	9b01      	ldr	r3, [sp, #4]
    tmp2 += z1 + z2;
 801317e:	4455      	add	r5, sl
    tmp1 += z1 + z3;
 8013180:	4454      	add	r4, sl
    tmp2 += z1 + z2;
 8013182:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8013186:	fb0b 4406 	mla	r4, fp, r6, r4
    tmp2 += z1 + z2;
 801318a:	fb0a 5a0c 	mla	sl, sl, ip, r5
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 801318e:	eb07 050e 	add.w	r5, r7, lr
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8013192:	eba7 0e0e 	sub.w	lr, r7, lr
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8013196:	12ed      	asrs	r5, r5, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8013198:	ea4f 27ee 	mov.w	r7, lr, asr #11
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 801319c:	f841 5c04 	str.w	r5, [r1, #-4]
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80131a0:	eb03 050a 	add.w	r5, r3, sl
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80131a4:	eba3 0a0a 	sub.w	sl, r3, sl
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80131a8:	9b02      	ldr	r3, [sp, #8]
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80131aa:	12ed      	asrs	r5, r5, #11
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80131ac:	f8c1 70dc 	str.w	r7, [r1, #220]	; 0xdc
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80131b0:	ea4f 26ea 	mov.w	r6, sl, asr #11
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 80131b4:	61cd      	str	r5, [r1, #28]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80131b6:	191d      	adds	r5, r3, r4
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80131b8:	1b1c      	subs	r4, r3, r4
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80131ba:	9b00      	ldr	r3, [sp, #0]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80131bc:	12ed      	asrs	r5, r5, #11
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 80131be:	f8c1 60bc 	str.w	r6, [r1, #188]	; 0xbc
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80131c2:	444b      	add	r3, r9
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80131c4:	12e4      	asrs	r4, r4, #11
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 80131c6:	63cd      	str	r5, [r1, #60]	; 0x3c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80131c8:	12db      	asrs	r3, r3, #11
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 80131ca:	f8c1 409c 	str.w	r4, [r1, #156]	; 0x9c
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 80131ce:	65cb      	str	r3, [r1, #92]	; 0x5c
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 80131d0:	9b00      	ldr	r3, [sp, #0]
 80131d2:	eba3 0909 	sub.w	r9, r3, r9
 80131d6:	ea4f 26e9 	mov.w	r6, r9, asr #11
 80131da:	67ce      	str	r6, [r1, #124]	; 0x7c
    wsptr++;
 80131dc:	e623      	b.n	8012e26 <jpeg_idct_16x8+0x7a>
 80131de:	bf00      	nop
 80131e0:	ffffecc2 	.word	0xffffecc2
 80131e4:	ffffb6d6 	.word	0xffffb6d6
 80131e8:	ffffc542 	.word	0xffffc542
 80131ec:	ffffdbfa 	.word	0xffffdbfa
 80131f0:	ffffeaab 	.word	0xffffeaab
 80131f4:	ffffd817 	.word	0xffffd817
 80131f8:	ffffc4df 	.word	0xffffc4df
 80131fc:	ffffc13b 	.word	0xffffc13b
 8013200:	fffff384 	.word	0xfffff384
 8013204:	ffffe333 	.word	0xffffe333
 8013208:	ffffadfd 	.word	0xffffadfd

0801320c <jpeg_idct_14x7>:

GLOBAL(void)
jpeg_idct_14x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801320c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013210:	b0c5      	sub	sp, #276	; 0x114
 8013212:	6d4f      	ldr	r7, [r1, #84]	; 0x54
 8013214:	f1a2 0c02 	sub.w	ip, r2, #2
 8013218:	320e      	adds	r2, #14
 801321a:	9302      	str	r3, [sp, #8]
 801321c:	3f04      	subs	r7, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801321e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
  /* Pass 1: process columns from input, store into work array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8013222:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 8013226:	9204      	str	r2, [sp, #16]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013228:	3380      	adds	r3, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
    /* Even part */

    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801322a:	f93c 1f02 	ldrsh.w	r1, [ip, #2]!
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 801322e:	f640 2512 	movw	r5, #2578	; 0xa12
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013232:	f857 2f04 	ldr.w	r2, [r7, #4]!
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
    tmp10 = z1 + z3;
    z2 -= tmp10;
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8013236:	f642 0ac6 	movw	sl, #10438	; 0x28c6
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801323a:	f10e 0e04 	add.w	lr, lr, #4
    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801323e:	434a      	muls	r2, r1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013240:	6c3c      	ldr	r4, [r7, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013242:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    tmp23 <<= CONST_BITS;
 8013246:	0352      	lsls	r2, r2, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013248:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
    tmp23 += ONE << (CONST_BITS-PASS1_BITS-1);
 801324c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013250:	9200      	str	r2, [sp, #0]
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013252:	f9bc 2020 	ldrsh.w	r2, [ip, #32]
 8013256:	4354      	muls	r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013258:	f9bc 2040 	ldrsh.w	r2, [ip, #64]	; 0x40
 801325c:	4350      	muls	r0, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801325e:	f9bc 2060 	ldrsh.w	r2, [ip, #96]	; 0x60
 8013262:	4351      	muls	r1, r2
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8013264:	f641 4237 	movw	r2, #7223	; 0x1c37
 8013268:	eba0 0801 	sub.w	r8, r0, r1
 801326c:	fb02 f808 	mul.w	r8, r2, r8
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8013270:	1a22      	subs	r2, r4, r0
 8013272:	fb05 f602 	mul.w	r6, r5, r2
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8013276:	9a00      	ldr	r2, [sp, #0]
 8013278:	eb08 0506 	add.w	r5, r8, r6
 801327c:	4415      	add	r5, r2
 801327e:	4abb      	ldr	r2, [pc, #748]	; (801356c <jpeg_idct_14x7+0x360>)
 8013280:	fb02 5500 	mla	r5, r2, r0, r5
    tmp10 = z1 + z3;
 8013284:	1862      	adds	r2, r4, r1
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8013286:	4691      	mov	r9, r2
    tmp10 = z1 + z3;
 8013288:	9203      	str	r2, [sp, #12]
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 801328a:	9a00      	ldr	r2, [sp, #0]
 801328c:	fb0a 2209 	mla	r2, sl, r9, r2
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8013290:	f46f 791f 	mvn.w	r9, #636	; 0x27c
 8013294:	fb09 2101 	mla	r1, r9, r1, r2
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013298:	f9bc 9010 	ldrsh.w	r9, [ip, #16]
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 801329c:	4441      	add	r1, r8
 801329e:	9101      	str	r1, [sp, #4]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 80132a0:	49b3      	ldr	r1, [pc, #716]	; (8013570 <jpeg_idct_14x7+0x364>)
 80132a2:	fb01 2204 	mla	r2, r1, r4, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80132a6:	6a3c      	ldr	r4, [r7, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80132a8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 80132ac:	4432      	add	r2, r6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80132ae:	fb04 f909 	mul.w	r9, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80132b2:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 80132b4:	f9bc 4030 	ldrsh.w	r4, [ip, #48]	; 0x30
 80132b8:	4366      	muls	r6, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80132ba:	f9bc 4050 	ldrsh.w	r4, [ip, #80]	; 0x50

    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 80132be:	eb09 0806 	add.w	r8, r9, r6
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80132c2:	434c      	muls	r4, r1
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 80132c4:	f641 51ef 	movw	r1, #7663	; 0x1def
 80132c8:	fb01 fb08 	mul.w	fp, r1, r8
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 80132cc:	eba9 0806 	sub.w	r8, r9, r6
 80132d0:	f240 5173 	movw	r1, #1395	; 0x573
    tmp10 = tmp11 - tmp12;
    tmp11 += tmp12;
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
    tmp11 += tmp12;
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80132d4:	44a1      	add	r9, r4
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80132d6:	4426      	add	r6, r4
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 80132d8:	fb01 f808 	mul.w	r8, r1, r8
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80132dc:	49a5      	ldr	r1, [pc, #660]	; (8013574 <jpeg_idct_14x7+0x368>)
    tmp10 = tmp11 - tmp12;
 80132de:	ebab 0a08 	sub.w	sl, fp, r8
    tmp11 += tmp12;
 80132e2:	44d8      	add	r8, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80132e4:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80132e8:	434e      	muls	r6, r1
    tmp10 += z2;
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80132ea:	9901      	ldr	r1, [sp, #4]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80132ec:	fb0b f909 	mul.w	r9, fp, r9
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80132f0:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 80132f4:	44b0      	add	r8, r6
    tmp10 += z2;
 80132f6:	44ca      	add	sl, r9
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80132f8:	fb0b 9904 	mla	r9, fp, r4, r9
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80132fc:	eb01 040a 	add.w	r4, r1, sl
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013300:	eba1 0a0a 	sub.w	sl, r1, sl
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 8013304:	444e      	add	r6, r9
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8013306:	ea4f 21ea 	mov.w	r1, sl, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801330a:	12e4      	asrs	r4, r4, #11
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801330c:	f8ce 10bc 	str.w	r1, [lr, #188]	; 0xbc
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013310:	eb05 0108 	add.w	r1, r5, r8
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8013314:	eba5 0508 	sub.w	r5, r5, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013318:	f84e 4c04 	str.w	r4, [lr, #-4]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801331c:	12c9      	asrs	r1, r1, #11
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801331e:	12ed      	asrs	r5, r5, #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8013320:	f8ce 101c 	str.w	r1, [lr, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013324:	1991      	adds	r1, r2, r6
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013326:	1b96      	subs	r6, r2, r6
    z2 -= tmp10;
 8013328:	9a03      	ldr	r2, [sp, #12]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801332a:	12c9      	asrs	r1, r1, #11
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801332c:	f8ce 509c 	str.w	r5, [lr, #156]	; 0x9c
    z2 -= tmp10;
 8013330:	1a80      	subs	r0, r0, r2
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8013332:	f642 5241 	movw	r2, #11585	; 0x2d41
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013336:	f8ce 103c 	str.w	r1, [lr, #60]	; 0x3c
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801333a:	12f6      	asrs	r6, r6, #11
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 801333c:	9900      	ldr	r1, [sp, #0]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801333e:	f8ce 607c 	str.w	r6, [lr, #124]	; 0x7c
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8013342:	fb02 1000 	mla	r0, r2, r0, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013346:	9a04      	ldr	r2, [sp, #16]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 8013348:	12c0      	asrs	r0, r0, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801334a:	4562      	cmp	r2, ip
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 801334c:	f8ce 005c 	str.w	r0, [lr, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013350:	f47f af6b 	bne.w	801322a <jpeg_idct_14x7+0x1e>
 8013354:	9a02      	ldr	r2, [sp, #8]
  }

  /* Pass 2: process 7 rows from work array, store into output array.
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  wsptr = workspace;
 8013356:	ad0c      	add	r5, sp, #48	; 0x30
 8013358:	3a04      	subs	r2, #4
 801335a:	9200      	str	r2, [sp, #0]
 801335c:	9a02      	ldr	r2, [sp, #8]
 801335e:	3218      	adds	r2, #24
 8013360:	920b      	str	r2, [sp, #44]	; 0x2c
  for (ctr = 0; ctr < 7; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013362:	9a00      	ldr	r2, [sp, #0]
    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z1 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8013364:	f640 2412 	movw	r4, #2578	; 0xa12
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8013368:	f642 00c6 	movw	r0, #10438	; 0x28c6
    tmp12 = z1 - z4;

    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[6];
 801336c:	69af      	ldr	r7, [r5, #24]
    outptr = output_buf[ctr] + output_col;
 801336e:	4611      	mov	r1, r2

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8013370:	f641 0b14 	movw	fp, #6164	; 0x1814
			     & RANGE_MASK];
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8013374:	3520      	adds	r5, #32
    outptr = output_buf[ctr] + output_col;
 8013376:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801337a:	920a      	str	r2, [sp, #40]	; 0x28
 801337c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801337e:	9100      	str	r1, [sp, #0]
 8013380:	994e      	ldr	r1, [sp, #312]	; 0x138
 8013382:	1851      	adds	r1, r2, r1
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013384:	f855 2c20 	ldr.w	r2, [r5, #-32]
 8013388:	f102 0810 	add.w	r8, r2, #16
    z4 = (INT32) wsptr[4];
 801338c:	f855 2c10 	ldr.w	r2, [r5, #-16]
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8013390:	fb04 f602 	mul.w	r6, r4, r2
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8013394:	f641 4437 	movw	r4, #7223	; 0x1c37
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8013398:	4350      	muls	r0, r2
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801339a:	4354      	muls	r4, r2
    tmp11 = z1 + z3;
 801339c:	eb06 3e48 	add.w	lr, r6, r8, lsl #13
    tmp10 = z1 + z2;
 80133a0:	eb00 3c48 	add.w	ip, r0, r8, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80133a4:	4430      	add	r0, r6
    z1 = (INT32) wsptr[2];
 80133a6:	f855 6c18 	ldr.w	r6, [r5, #-24]
    tmp12 = z1 - z4;
 80133aa:	ebc4 3948 	rsb	r9, r4, r8, lsl #13
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80133ae:	1b00      	subs	r0, r0, r4
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80133b0:	f242 3462 	movw	r4, #9058	; 0x2362
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80133b4:	4a70      	ldr	r2, [pc, #448]	; (8013578 <jpeg_idct_14x7+0x36c>)
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80133b6:	0040      	lsls	r0, r0, #1
 80133b8:	ebc0 3048 	rsb	r0, r0, r8, lsl #13
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80133bc:	f241 38a3 	movw	r8, #5027	; 0x13a3
    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 80133c0:	9001      	str	r0, [sp, #4]
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80133c2:	19f0      	adds	r0, r6, r7
 80133c4:	4360      	muls	r0, r4
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 80133c6:	f640 04bd 	movw	r4, #2237	; 0x8bd
 80133ca:	fb04 0406 	mla	r4, r4, r6, r0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80133ce:	fb02 0007 	mla	r0, r2, r7, r0
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 80133d2:	f602 22e5 	addw	r2, r2, #2789	; 0xae5
 80133d6:	4357      	muls	r7, r2
    tmp20 = tmp10 + tmp13;
 80133d8:	eb0c 0204 	add.w	r2, ip, r4
 80133dc:	9202      	str	r2, [sp, #8]
    tmp26 = tmp10 - tmp13;
 80133de:	ebac 0204 	sub.w	r2, ip, r4
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80133e2:	fb08 7606 	mla	r6, r8, r6, r7
    z3 = (INT32) wsptr[5];
 80133e6:	f855 cc0c 	ldr.w	ip, [r5, #-12]
    tmp26 = tmp10 - tmp13;
 80133ea:	9203      	str	r2, [sp, #12]
    tmp21 = tmp11 + tmp14;
 80133ec:	eb0e 0200 	add.w	r2, lr, r0
    z4 = (INT32) wsptr[7];
 80133f0:	f855 8c04 	ldr.w	r8, [r5, #-4]
    tmp21 = tmp11 + tmp14;
 80133f4:	9204      	str	r2, [sp, #16]
    tmp25 = tmp11 - tmp14;
 80133f6:	ebae 0200 	sub.w	r2, lr, r0
    z2 = (INT32) wsptr[3];
 80133fa:	f855 0c14 	ldr.w	r0, [r5, #-20]
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 80133fe:	f640 6ef2 	movw	lr, #3826	; 0xef2
    tmp25 = tmp11 - tmp14;
 8013402:	9205      	str	r2, [sp, #20]
    tmp22 = tmp12 + tmp15;
 8013404:	eb09 0206 	add.w	r2, r9, r6
 8013408:	9206      	str	r2, [sp, #24]
    tmp24 = tmp12 - tmp15;
 801340a:	eba9 0206 	sub.w	r2, r9, r6
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801340e:	f642 29b7 	movw	r9, #10935	; 0x2ab7
    tmp24 = tmp12 - tmp15;
 8013412:	9207      	str	r2, [sp, #28]
    z1 = (INT32) wsptr[1];
 8013414:	f855 2c1c 	ldr.w	r2, [r5, #-28]
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8013418:	1814      	adds	r4, r2, r0
    tmp14 = z1 + z3;
 801341a:	eb02 060c 	add.w	r6, r2, ip
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801341e:	fb09 f904 	mul.w	r9, r9, r4
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8013422:	f242 6452 	movw	r4, #9810	; 0x2652
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8013426:	fb0b fb06 	mul.w	fp, fp, r6
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 801342a:	fb04 fa06 	mul.w	sl, r4, r6
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 801342e:	4c53      	ldr	r4, [pc, #332]	; (801357c <jpeg_idct_14x7+0x370>)
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8013430:	eb00 060c 	add.w	r6, r0, ip
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8013434:	eb09 070a 	add.w	r7, r9, sl
 8013438:	eb07 3748 	add.w	r7, r7, r8, lsl #13
 801343c:	fb04 7702 	mla	r7, r4, r2, r7
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8013440:	f204 241b 	addw	r4, r4, #539	; 0x21b
 8013444:	fb04 b402 	mla	r4, r4, r2, fp
    z1    -= z2;
 8013448:	1a12      	subs	r2, r2, r0
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 801344a:	fb0e fe02 	mul.w	lr, lr, r2
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 801344e:	eba2 020c 	sub.w	r2, r2, ip
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8013452:	ebae 3e48 	sub.w	lr, lr, r8, lsl #13
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8013456:	0352      	lsls	r2, r2, #13
    tmp16 += tmp15;
 8013458:	4474      	add	r4, lr
 801345a:	9408      	str	r4, [sp, #32]
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 801345c:	f46f 64a2 	mvn.w	r4, #1296	; 0x510
 8013460:	4374      	muls	r4, r6
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8013462:	4e47      	ldr	r6, [pc, #284]	; (8013580 <jpeg_idct_14x7+0x374>)
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8013464:	eba4 3448 	sub.w	r4, r4, r8, lsl #13
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8013468:	fb06 4600 	mla	r6, r6, r0, r4
 801346c:	44b1      	add	r9, r6
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 801346e:	4e45      	ldr	r6, [pc, #276]	; (8013584 <jpeg_idct_14x7+0x378>)
 8013470:	fb06 440c 	mla	r4, r6, ip, r4
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8013474:	ebac 0600 	sub.w	r6, ip, r0
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8013478:	4454      	add	r4, sl
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801347a:	f642 4af8 	movw	sl, #11512	; 0x2cf8
 801347e:	fb0a fa06 	mul.w	sl, sl, r6
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8013482:	9409      	str	r4, [sp, #36]	; 0x24
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013484:	eb0a 3648 	add.w	r6, sl, r8, lsl #13
 8013488:	4c3f      	ldr	r4, [pc, #252]	; (8013588 <jpeg_idct_14x7+0x37c>)
    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 801348a:	eb02 3848 	add.w	r8, r2, r8, lsl #13
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801348e:	9a02      	ldr	r2, [sp, #8]
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8013490:	fb04 660c 	mla	r6, r4, ip, r6
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013494:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013496:	443a      	add	r2, r7
 8013498:	46a4      	mov	ip, r4
 801349a:	9c4e      	ldr	r4, [sp, #312]	; 0x138
			     & RANGE_MASK];
 801349c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 80134a0:	445e      	add	r6, fp
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80134a2:	f241 5b99 	movw	fp, #5529	; 0x1599
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80134a6:	5c9a      	ldrb	r2, [r3, r2]
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80134a8:	fb0b a000 	mla	r0, fp, r0, sl
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80134ac:	f80c 2004 	strb.w	r2, [ip, r4]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80134b0:	9a02      	ldr	r2, [sp, #8]
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 80134b2:	4470      	add	r0, lr
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80134b4:	1bd7      	subs	r7, r2, r7
			     & RANGE_MASK];
 80134b6:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80134ba:	5dda      	ldrb	r2, [r3, r7]
 80134bc:	734a      	strb	r2, [r1, #13]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80134be:	9a04      	ldr	r2, [sp, #16]
 80134c0:	444a      	add	r2, r9
			     & RANGE_MASK];
 80134c2:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80134c6:	5c9a      	ldrb	r2, [r3, r2]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80134c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80134ca:	704a      	strb	r2, [r1, #1]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80134cc:	9a04      	ldr	r2, [sp, #16]
 80134ce:	eba2 0909 	sub.w	r9, r2, r9
			     & RANGE_MASK];
 80134d2:	f3c9 4989 	ubfx	r9, r9, #18, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80134d6:	f813 2009 	ldrb.w	r2, [r3, r9]
 80134da:	730a      	strb	r2, [r1, #12]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80134dc:	9a06      	ldr	r2, [sp, #24]
 80134de:	4422      	add	r2, r4
			     & RANGE_MASK];
 80134e0:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80134e4:	5c9a      	ldrb	r2, [r3, r2]
 80134e6:	708a      	strb	r2, [r1, #2]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80134e8:	9a06      	ldr	r2, [sp, #24]
 80134ea:	1b14      	subs	r4, r2, r4
			     & RANGE_MASK];
 80134ec:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80134f0:	5d1a      	ldrb	r2, [r3, r4]
 80134f2:	72ca      	strb	r2, [r1, #11]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80134f4:	9a01      	ldr	r2, [sp, #4]
 80134f6:	4442      	add	r2, r8
			     & RANGE_MASK];
 80134f8:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80134fc:	5c9a      	ldrb	r2, [r3, r2]
 80134fe:	70ca      	strb	r2, [r1, #3]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013500:	9a01      	ldr	r2, [sp, #4]
 8013502:	eba2 0808 	sub.w	r8, r2, r8
			     & RANGE_MASK];
 8013506:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801350a:	f813 2008 	ldrb.w	r2, [r3, r8]
 801350e:	728a      	strb	r2, [r1, #10]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013510:	9a07      	ldr	r2, [sp, #28]
 8013512:	4432      	add	r2, r6
			     & RANGE_MASK];
 8013514:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013518:	5c9a      	ldrb	r2, [r3, r2]
 801351a:	710a      	strb	r2, [r1, #4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801351c:	9a07      	ldr	r2, [sp, #28]
 801351e:	1b96      	subs	r6, r2, r6
			     & RANGE_MASK];
 8013520:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013524:	5d9a      	ldrb	r2, [r3, r6]
 8013526:	724a      	strb	r2, [r1, #9]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013528:	9a05      	ldr	r2, [sp, #20]
 801352a:	4402      	add	r2, r0
			     & RANGE_MASK];
 801352c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013530:	5c9a      	ldrb	r2, [r3, r2]
 8013532:	714a      	strb	r2, [r1, #5]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013534:	9a05      	ldr	r2, [sp, #20]
 8013536:	1a10      	subs	r0, r2, r0
			     & RANGE_MASK];
 8013538:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801353c:	5c1a      	ldrb	r2, [r3, r0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801353e:	9808      	ldr	r0, [sp, #32]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013540:	720a      	strb	r2, [r1, #8]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8013542:	9a03      	ldr	r2, [sp, #12]
 8013544:	4402      	add	r2, r0
			     & RANGE_MASK];
 8013546:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 801354a:	5c9a      	ldrb	r2, [r3, r2]
 801354c:	718a      	strb	r2, [r1, #6]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 801354e:	9a03      	ldr	r2, [sp, #12]
 8013550:	1a14      	subs	r4, r2, r0
			     & RANGE_MASK];
 8013552:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8013556:	5d1a      	ldrb	r2, [r3, r4]
 8013558:	71ca      	strb	r2, [r1, #7]
  for (ctr = 0; ctr < 7; ctr++) {
 801355a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801355c:	9900      	ldr	r1, [sp, #0]
 801355e:	428a      	cmp	r2, r1
 8013560:	f47f aeff 	bne.w	8013362 <jpeg_idct_14x7+0x156>
  }
}
 8013564:	b045      	add	sp, #276	; 0x114
 8013566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801356a:	bf00      	nop
 801356c:	ffffc515 	.word	0xffffc515
 8013570:	ffffb0f1 	.word	0xffffb0f1
 8013574:	ffffd3e1 	.word	0xffffd3e1
 8013578:	ffffc8fc 	.word	0xffffc8fc
 801357c:	ffffdbf0 	.word	0xffffdbf0
 8013580:	fffff26e 	.word	0xfffff26e
 8013584:	ffffb409 	.word	0xffffb409
 8013588:	ffffc9e6 	.word	0xffffc9e6

0801358c <jpeg_idct_12x6>:

GLOBAL(void)
jpeg_idct_12x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801358c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013590:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8013594:	b0bb      	sub	sp, #236	; 0xec
 8013596:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 8013598:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801359a:	3080      	adds	r0, #128	; 0x80
 801359c:	320e      	adds	r2, #14
 801359e:	3d04      	subs	r5, #4
  /* Pass 1: process columns from input, store into work array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 80135a0:	af0a      	add	r7, sp, #40	; 0x28
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80135a2:	9000      	str	r0, [sp, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80135a4:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80135a6:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
    tmp11 = tmp10 + tmp20;
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 80135aa:	f242 7031 	movw	r0, #10033	; 0x2731
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80135ae:	f855 1f04 	ldr.w	r1, [r5, #4]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80135b2:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80135b4:	f9b6 4040 	ldrsh.w	r4, [r6, #64]	; 0x40
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80135b8:	4351      	muls	r1, r2
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80135ba:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80135be:	f9b6 c020 	ldrsh.w	ip, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80135c2:	4362      	muls	r2, r4
    tmp10 <<= CONST_BITS;
 80135c4:	0349      	lsls	r1, r1, #13
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80135c6:	f241 64a1 	movw	r4, #5793	; 0x16a1
    tmp22 = tmp11 - tmp10;

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80135ca:	f9b6 9030 	ldrsh.w	r9, [r6, #48]	; 0x30
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 80135ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80135d2:	f9b6 8050 	ldrsh.w	r8, [r6, #80]	; 0x50
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 80135d6:	4362      	muls	r2, r4
    tmp11 = tmp10 + tmp20;
 80135d8:	188c      	adds	r4, r1, r2
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
 80135da:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80135de:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80135e0:	fb02 f20c 	mul.w	r2, r2, ip
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80135e4:	f9b6 c010 	ldrsh.w	ip, [r6, #16]
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 80135e8:	4342      	muls	r2, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80135ea:	6e28      	ldr	r0, [r5, #96]	; 0x60
    tmp20 = tmp11 + tmp10;
 80135ec:	eb04 0e02 	add.w	lr, r4, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80135f0:	fb00 f909 	mul.w	r9, r0, r9
    tmp22 = tmp11 - tmp10;
 80135f4:	1aa4      	subs	r4, r4, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80135f6:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80135fa:	6a2a      	ldr	r2, [r5, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80135fc:	fb00 f808 	mul.w	r8, r0, r8
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013600:	f640 30b6 	movw	r0, #2998	; 0xbb6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013604:	fb02 f20c 	mul.w	r2, r2, ip
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8013608:	eba8 0b09 	sub.w	fp, r8, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801360c:	eb02 0c08 	add.w	ip, r2, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8013610:	eb02 0a09 	add.w	sl, r2, r9
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8013614:	eba2 0209 	sub.w	r2, r2, r9
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013618:	fb00 fc0c 	mul.w	ip, r0, ip
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 801361c:	eba2 0808 	sub.w	r8, r2, r8
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8013620:	eb0c 3a4a 	add.w	sl, ip, sl, lsl #13
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8013624:	ea4f 0888 	mov.w	r8, r8, lsl #2

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013628:	eb0e 020a 	add.w	r2, lr, sl
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801362c:	ebae 0e0a 	sub.w	lr, lr, sl
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8013630:	eb0c 3c4b 	add.w	ip, ip, fp, lsl #13
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8013634:	12d2      	asrs	r2, r2, #11
 8013636:	f847 2c04 	str.w	r2, [r7, #-4]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801363a:	ea4f 22ee 	mov.w	r2, lr, asr #11
 801363e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    wsptr[8*1] = (int) (tmp21 + tmp11);
 8013642:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8013646:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[8*1] = (int) (tmp21 + tmp11);
 801364a:	61fa      	str	r2, [r7, #28]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801364c:	eb04 020c 	add.w	r2, r4, ip
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013650:	eba4 0c0c 	sub.w	ip, r4, ip
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8013654:	67f9      	str	r1, [r7, #124]	; 0x7c
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013656:	12d2      	asrs	r2, r2, #11
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013658:	ea4f 24ec 	mov.w	r4, ip, asr #11
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801365c:	63fa      	str	r2, [r7, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801365e:	9a01      	ldr	r2, [sp, #4]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013660:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013662:	42b2      	cmp	r2, r6
 8013664:	d19f      	bne.n	80135a6 <jpeg_idct_12x6+0x1a>
 8013666:	1f1a      	subs	r2, r3, #4
 8013668:	3314      	adds	r3, #20
 801366a:	9201      	str	r2, [sp, #4]
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  wsptr = workspace;
 801366c:	aa0a      	add	r2, sp, #40	; 0x28
 801366e:	9309      	str	r3, [sp, #36]	; 0x24
  for (ctr = 0; ctr < 6; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013670:	9b01      	ldr	r3, [sp, #4]

    tmp10 = z3 + z4;
    tmp11 = z3 - z4;

    z1 = (INT32) wsptr[2];
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8013672:	f642 30b6 	movw	r0, #11190	; 0x2bb6
    z4 = (INT32) wsptr[4];
 8013676:	6916      	ldr	r6, [r2, #16]

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8013678:	f641 3e8d 	movw	lr, #7053	; 0x1b8d
    outptr = output_buf[ctr] + output_col;
 801367c:	4619      	mov	r1, r3
    z2 = (INT32) wsptr[6];
 801367e:	6997      	ldr	r7, [r2, #24]
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013680:	6815      	ldr	r5, [r2, #0]
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8013682:	f640 08f7 	movw	r8, #2295	; 0x8f7
    outptr = output_buf[ctr] + output_col;
 8013686:	f851 3f04 	ldr.w	r3, [r1, #4]!
    z2 <<= CONST_BITS;
 801368a:	037f      	lsls	r7, r7, #13
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801368c:	3510      	adds	r5, #16
    z1 = (INT32) wsptr[1];
 801368e:	f8d2 9004 	ldr.w	r9, [r2, #4]
    outptr = output_buf[ctr] + output_col;
 8013692:	9308      	str	r3, [sp, #32]
			     & RANGE_MASK];
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 8013694:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8013696:	9b08      	ldr	r3, [sp, #32]
 8013698:	9101      	str	r1, [sp, #4]
 801369a:	9944      	ldr	r1, [sp, #272]	; 0x110
 801369c:	440b      	add	r3, r1
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801369e:	f242 7131 	movw	r1, #10033	; 0x2731
 80136a2:	434e      	muls	r6, r1
    z1 = (INT32) wsptr[2];
 80136a4:	f852 1c18 	ldr.w	r1, [r2, #-24]
    tmp12 = z1 - z2;
 80136a8:	ebc7 3b41 	rsb	fp, r7, r1, lsl #13
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80136ac:	fb00 f401 	mul.w	r4, r0, r1
    tmp10 = z3 + z4;
 80136b0:	eb06 3c45 	add.w	ip, r6, r5, lsl #13
    tmp21 = z3 + tmp12;
 80136b4:	eb0b 3045 	add.w	r0, fp, r5, lsl #13
    tmp11 = z3 - z4;
 80136b8:	ebc6 3645 	rsb	r6, r6, r5, lsl #13
    tmp21 = z3 + tmp12;
 80136bc:	9002      	str	r0, [sp, #8]
    tmp24 = z3 - tmp12;
 80136be:	ebcb 3045 	rsb	r0, fp, r5, lsl #13
    tmp12 = z4 + z2;
 80136c2:	19e5      	adds	r5, r4, r7
    tmp12 = z4 - z1 - z2;
 80136c4:	eba4 3441 	sub.w	r4, r4, r1, lsl #13
    tmp24 = z3 - tmp12;
 80136c8:	9003      	str	r0, [sp, #12]
    tmp12 = z4 - z1 - z2;
 80136ca:	1be7      	subs	r7, r4, r7
    tmp20 = tmp10 + tmp12;
 80136cc:	eb0c 0005 	add.w	r0, ip, r5
    z4 = (INT32) wsptr[7];
 80136d0:	f852 4c04 	ldr.w	r4, [r2, #-4]
    tmp22 = tmp11 + tmp12;
 80136d4:	19f1      	adds	r1, r6, r7
    tmp20 = tmp10 + tmp12;
 80136d6:	9004      	str	r0, [sp, #16]
    tmp25 = tmp10 - tmp12;
 80136d8:	ebac 0005 	sub.w	r0, ip, r5
    z3 = (INT32) wsptr[5];
 80136dc:	f852 5c0c 	ldr.w	r5, [r2, #-12]
    tmp22 = tmp11 + tmp12;
 80136e0:	9106      	str	r1, [sp, #24]
    tmp23 = tmp11 - tmp12;
 80136e2:	1bf1      	subs	r1, r6, r7
    tmp10 = z1 + z3;
 80136e4:	eb09 0705 	add.w	r7, r9, r5
    z2 = (INT32) wsptr[3];
 80136e8:	f852 bc14 	ldr.w	fp, [r2, #-20]
    tmp23 = tmp11 - tmp12;
 80136ec:	9107      	str	r1, [sp, #28]
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80136ee:	f642 11cf 	movw	r1, #10703	; 0x29cf
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80136f2:	eb04 0c07 	add.w	ip, r4, r7
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80136f6:	eb05 0a04 	add.w	sl, r5, r4
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 80136fa:	fb01 f60b 	mul.w	r6, r1, fp
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 80136fe:	4950      	ldr	r1, [pc, #320]	; (8013840 <jpeg_idct_12x6+0x2b4>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8013700:	fb0e fc0c 	mul.w	ip, lr, ip
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8013704:	f640 0e5b 	movw	lr, #2139	; 0x85b
    tmp25 = tmp10 - tmp12;
 8013708:	9005      	str	r0, [sp, #20]
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801370a:	fb0e ce07 	mla	lr, lr, r7, ip
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801370e:	484d      	ldr	r0, [pc, #308]	; (8013844 <jpeg_idct_12x6+0x2b8>)
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8013710:	fb01 f10b 	mul.w	r1, r1, fp
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8013714:	eb06 070e 	add.w	r7, r6, lr
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8013718:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801371c:	f6a0 50db 	subw	r0, r0, #3547	; 0xddb
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8013720:	fb08 7809 	mla	r8, r8, r9, r7
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8013724:	eb01 070a 	add.w	r7, r1, sl
 8013728:	fb00 7705 	mla	r7, r0, r5, r7
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801372c:	4846      	ldr	r0, [pc, #280]	; (8013848 <jpeg_idct_12x6+0x2bc>)
    z2 -= z3;
 801372e:	ebab 0505 	sub.w	r5, fp, r5
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8013732:	f241 1b51 	movw	fp, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8013736:	4477      	add	r7, lr
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013738:	fb00 1109 	mla	r1, r0, r9, r1
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801373c:	ebac 0e06 	sub.w	lr, ip, r6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013740:	4842      	ldr	r0, [pc, #264]	; (801384c <jpeg_idct_12x6+0x2c0>)
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013742:	f243 26c6 	movw	r6, #12998	; 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013746:	fb00 1104 	mla	r1, r0, r4, r1
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 801374a:	f200 4053 	addw	r0, r0, #1107	; 0x453
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801374e:	fb06 e604 	mla	r6, r6, r4, lr
    z1 -= z4;
 8013752:	eba9 0404 	sub.w	r4, r9, r4
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013756:	4461      	add	r1, ip
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8013758:	f641 097e 	movw	r9, #6270	; 0x187e
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801375c:	eb04 0c05 	add.w	ip, r4, r5
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013760:	4456      	add	r6, sl
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8013762:	fb0b fc0c 	mul.w	ip, fp, ip
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8013766:	fb00 c505 	mla	r5, r0, r5, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801376a:	9804      	ldr	r0, [sp, #16]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 801376c:	fb09 c404 	mla	r4, r9, r4, ip
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013770:	eb00 0e08 	add.w	lr, r0, r8
 8013774:	9800      	ldr	r0, [sp, #0]
			     & RANGE_MASK];
 8013776:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801377a:	f810 c00e 	ldrb.w	ip, [r0, lr]
 801377e:	9808      	ldr	r0, [sp, #32]
 8013780:	4686      	mov	lr, r0
 8013782:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013784:	f80e c000 	strb.w	ip, [lr, r0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013788:	9804      	ldr	r0, [sp, #16]
 801378a:	eba0 0808 	sub.w	r8, r0, r8
 801378e:	9800      	ldr	r0, [sp, #0]
			     & RANGE_MASK];
 8013790:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013794:	f810 c008 	ldrb.w	ip, [r0, r8]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013798:	9802      	ldr	r0, [sp, #8]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801379a:	f883 c00b 	strb.w	ip, [r3, #11]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801379e:	eb00 0c04 	add.w	ip, r0, r4
 80137a2:	9800      	ldr	r0, [sp, #0]
			     & RANGE_MASK];
 80137a4:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80137a8:	f810 c00c 	ldrb.w	ip, [r0, ip]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80137ac:	9802      	ldr	r0, [sp, #8]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80137ae:	f883 c001 	strb.w	ip, [r3, #1]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80137b2:	1b04      	subs	r4, r0, r4
 80137b4:	9800      	ldr	r0, [sp, #0]
			     & RANGE_MASK];
 80137b6:	f3c4 4989 	ubfx	r9, r4, #18, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80137ba:	f810 4009 	ldrb.w	r4, [r0, r9]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80137be:	9806      	ldr	r0, [sp, #24]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80137c0:	729c      	strb	r4, [r3, #10]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80137c2:	19c4      	adds	r4, r0, r7
 80137c4:	9800      	ldr	r0, [sp, #0]
			     & RANGE_MASK];
 80137c6:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80137ca:	5d04      	ldrb	r4, [r0, r4]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80137cc:	9806      	ldr	r0, [sp, #24]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80137ce:	709c      	strb	r4, [r3, #2]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80137d0:	1bc7      	subs	r7, r0, r7
 80137d2:	9800      	ldr	r0, [sp, #0]
			     & RANGE_MASK];
 80137d4:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80137d8:	5dc4      	ldrb	r4, [r0, r7]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80137da:	9807      	ldr	r0, [sp, #28]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80137dc:	725c      	strb	r4, [r3, #9]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80137de:	1984      	adds	r4, r0, r6
 80137e0:	9800      	ldr	r0, [sp, #0]
			     & RANGE_MASK];
 80137e2:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80137e6:	5d04      	ldrb	r4, [r0, r4]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80137e8:	9807      	ldr	r0, [sp, #28]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80137ea:	70dc      	strb	r4, [r3, #3]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80137ec:	1b86      	subs	r6, r0, r6
 80137ee:	9800      	ldr	r0, [sp, #0]
			     & RANGE_MASK];
 80137f0:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80137f4:	5d84      	ldrb	r4, [r0, r6]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80137f6:	9803      	ldr	r0, [sp, #12]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80137f8:	721c      	strb	r4, [r3, #8]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80137fa:	1944      	adds	r4, r0, r5
 80137fc:	9800      	ldr	r0, [sp, #0]
			     & RANGE_MASK];
 80137fe:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013802:	5d04      	ldrb	r4, [r0, r4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013804:	9803      	ldr	r0, [sp, #12]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013806:	711c      	strb	r4, [r3, #4]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013808:	1b45      	subs	r5, r0, r5
 801380a:	9800      	ldr	r0, [sp, #0]
			     & RANGE_MASK];
 801380c:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013810:	5d44      	ldrb	r4, [r0, r5]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013812:	9805      	ldr	r0, [sp, #20]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013814:	71dc      	strb	r4, [r3, #7]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013816:	1844      	adds	r4, r0, r1
 8013818:	9800      	ldr	r0, [sp, #0]
			     & RANGE_MASK];
 801381a:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801381e:	5d04      	ldrb	r4, [r0, r4]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013820:	9805      	ldr	r0, [sp, #20]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013822:	715c      	strb	r4, [r3, #5]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013824:	1a41      	subs	r1, r0, r1
 8013826:	9800      	ldr	r0, [sp, #0]
			     & RANGE_MASK];
 8013828:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801382c:	5c41      	ldrb	r1, [r0, r1]
 801382e:	7199      	strb	r1, [r3, #6]
  for (ctr = 0; ctr < 6; ctr++) {
 8013830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013832:	9901      	ldr	r1, [sp, #4]
 8013834:	428b      	cmp	r3, r1
 8013836:	f47f af1b 	bne.w	8013670 <jpeg_idct_12x6+0xe4>
  }
}
 801383a:	b03b      	add	sp, #236	; 0xec
 801383c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013840:	ffffeeaf 	.word	0xffffeeaf
 8013844:	ffffde8b 	.word	0xffffde8b
 8013848:	ffffea5c 	.word	0xffffea5c
 801384c:	ffffc08c 	.word	0xffffc08c

08013850 <jpeg_idct_10x5>:

GLOBAL(void)
jpeg_idct_10x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013854:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8013858:	b0af      	sub	sp, #188	; 0xbc
 801385a:	6d4d      	ldr	r5, [r1, #84]	; 0x54
 801385c:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801385e:	3080      	adds	r0, #128	; 0x80
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013860:	320e      	adds	r2, #14
 8013862:	3d04      	subs	r5, #4
  wsptr = workspace;
 8013864:	af06      	add	r7, sp, #24
    tmp12 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8013866:	f641 1e4c 	movw	lr, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801386a:	f44f 6c35 	mov.w	ip, #2896	; 0xb50
{
 801386e:	9302      	str	r3, [sp, #8]
 8013870:	9201      	str	r2, [sp, #4]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013872:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013876:	3704      	adds	r7, #4
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013878:	f855 2f04 	ldr.w	r2, [r5, #4]!
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801387c:	f9b6 4020 	ldrsh.w	r4, [r6, #32]
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013880:	434a      	muls	r2, r1
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013882:	6c29      	ldr	r1, [r5, #64]	; 0x40
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013884:	f9b6 9040 	ldrsh.w	r9, [r6, #64]	; 0x40
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013888:	4361      	muls	r1, r4
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801388a:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
    tmp11 = z3 - z1;
    tmp12 -= z2 << 2;

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801388e:	6a2b      	ldr	r3, [r5, #32]
    tmp12 <<= CONST_BITS;
 8013890:	0352      	lsls	r2, r2, #13
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013892:	fb04 f909 	mul.w	r9, r4, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013896:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 801389a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801389e:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 80138a2:	eb01 0409 	add.w	r4, r1, r9
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 80138a6:	eba1 0109 	sub.w	r1, r1, r9
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80138aa:	fb03 fa0a 	mul.w	sl, r3, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80138ae:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 80138b0:	fb0c f101 	mul.w	r1, ip, r1
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 80138b4:	fb0e f804 	mul.w	r8, lr, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80138b8:	fb03 fb0b 	mul.w	fp, r3, fp
    z3 = tmp12 + z2;
 80138bc:	1854      	adds	r4, r2, r1

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 80138be:	f641 239a 	movw	r3, #6810	; 0x1a9a
    tmp12 -= z2 << 2;
 80138c2:	eba2 0281 	sub.w	r2, r2, r1, lsl #2
    tmp10 = z3 + z1;
 80138c6:	eb08 0904 	add.w	r9, r8, r4
    tmp11 = z3 - z1;
 80138ca:	eba4 0408 	sub.w	r4, r4, r8
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 80138ce:	eb0a 080b 	add.w	r8, sl, fp

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 80138d2:	12d2      	asrs	r2, r2, #11
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 80138d4:	fb03 f808 	mul.w	r8, r3, r8
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 80138d8:	f241 0371 	movw	r3, #4209	; 0x1071
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 80138dc:	63fa      	str	r2, [r7, #60]	; 0x3c
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 80138de:	fb03 8a0a 	mla	sl, r3, sl, r8
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 80138e2:	4b71      	ldr	r3, [pc, #452]	; (8013aa8 <jpeg_idct_10x5+0x258>)
 80138e4:	fb03 880b 	mla	r8, r3, fp, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 80138e8:	eb09 0b0a 	add.w	fp, r9, sl
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80138ec:	9b01      	ldr	r3, [sp, #4]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 80138ee:	eba9 0a0a 	sub.w	sl, r9, sl
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 80138f2:	eb04 0908 	add.w	r9, r4, r8
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 80138f6:	eba4 0808 	sub.w	r8, r4, r8
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 80138fa:	ea4f 2beb 	mov.w	fp, fp, asr #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80138fe:	42b3      	cmp	r3, r6
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8013900:	ea4f 2aea 	mov.w	sl, sl, asr #11
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8013904:	ea4f 29e9 	mov.w	r9, r9, asr #11
    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 8013908:	f847 bc04 	str.w	fp, [r7, #-4]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 801390c:	ea4f 24e8 	mov.w	r4, r8, asr #11
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8013910:	f8c7 a07c 	str.w	sl, [r7, #124]	; 0x7c
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8013914:	f8c7 901c 	str.w	r9, [r7, #28]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 8013918:	65fc      	str	r4, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801391a:	d1aa      	bne.n	8013872 <jpeg_idct_10x5+0x22>
 801391c:	9b02      	ldr	r3, [sp, #8]
  }

  /* Pass 2: process 5 rows from work array, store into output array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  wsptr = workspace;
 801391e:	aa06      	add	r2, sp, #24
 8013920:	3b04      	subs	r3, #4
 8013922:	9301      	str	r3, [sp, #4]
 8013924:	9b02      	ldr	r3, [sp, #8]
 8013926:	3310      	adds	r3, #16
 8013928:	9305      	str	r3, [sp, #20]
  for (ctr = 0; ctr < 5; ctr++) {
    outptr = output_buf[ctr] + output_col;
 801392a:	9b01      	ldr	r3, [sp, #4]
    /* Add fudge factor here for final descale. */
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    z3 <<= CONST_BITS;
    z4 = (INT32) wsptr[4];
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 801392c:	f640 56fc 	movw	r6, #3580	; 0xdfc
    z4 = (INT32) wsptr[4];
 8013930:	6915      	ldr	r5, [r2, #16]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8013932:	f242 449d 	movw	r4, #9373	; 0x249d
    outptr = output_buf[ctr] + output_col;
 8013936:	4619      	mov	r1, r3
    tmp21 = tmp11 + tmp13;
    tmp23 = tmp11 - tmp13;

    /* Odd part */

    z1 = (INT32) wsptr[1];
 8013938:	f8d2 c004 	ldr.w	ip, [r2, #4]
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801393c:	436c      	muls	r4, r5
			    & RANGE_MASK];
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 8;		/* advance pointer to next row */
 801393e:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8013940:	f851 3f04 	ldr.w	r3, [r1, #4]!
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8013944:	fb06 f805 	mul.w	r8, r6, r5
    z2 = (INT32) wsptr[2];
 8013948:	f852 6c18 	ldr.w	r6, [r2, #-24]
    outptr = output_buf[ctr] + output_col;
 801394c:	9304      	str	r3, [sp, #16]
 801394e:	9b04      	ldr	r3, [sp, #16]
 8013950:	9101      	str	r1, [sp, #4]
 8013952:	9938      	ldr	r1, [sp, #224]	; 0xe0
    z3 = (INT32) wsptr[6];
 8013954:	f852 5c08 	ldr.w	r5, [r2, #-8]
    outptr = output_buf[ctr] + output_col;
 8013958:	1859      	adds	r1, r3, r1
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801395a:	f852 3c20 	ldr.w	r3, [r2, #-32]
 801395e:	3310      	adds	r3, #16
    tmp11 = z3 - z2;
 8013960:	ebc8 3943 	rsb	r9, r8, r3, lsl #13
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 8013964:	eba4 0808 	sub.w	r8, r4, r8
    tmp10 = z3 + z1;
 8013968:	eb04 3b43 	add.w	fp, r4, r3, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801396c:	1974      	adds	r4, r6, r5
    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 801396e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8013972:	ebc8 3343 	rsb	r3, r8, r3, lsl #13
 8013976:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8013978:	f641 239a 	movw	r3, #6810	; 0x1a9a
 801397c:	4363      	muls	r3, r4
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 801397e:	f241 0471 	movw	r4, #4209	; 0x1071
 8013982:	fb04 3a06 	mla	sl, r4, r6, r3
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8013986:	4c48      	ldr	r4, [pc, #288]	; (8013aa8 <jpeg_idct_10x5+0x258>)
 8013988:	fb04 3405 	mla	r4, r4, r5, r3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 801398c:	f641 656f 	movw	r5, #7791	; 0x1e6f
    tmp20 = tmp10 + tmp12;
 8013990:	eb0b 070a 	add.w	r7, fp, sl
    tmp24 = tmp10 - tmp12;
 8013994:	ebab 0b0a 	sub.w	fp, fp, sl
    tmp23 = tmp11 - tmp13;
 8013998:	eba9 0304 	sub.w	r3, r9, r4
    tmp21 = tmp11 + tmp13;
 801399c:	eb09 0604 	add.w	r6, r9, r4
    z2 = (INT32) wsptr[3];
 80139a0:	f852 4c14 	ldr.w	r4, [r2, #-20]
    tmp23 = tmp11 - tmp13;
 80139a4:	9303      	str	r3, [sp, #12]
    z4 = (INT32) wsptr[7];
 80139a6:	f852 3c04 	ldr.w	r3, [r2, #-4]
    tmp11 = z2 + z4;
 80139aa:	eb04 0903 	add.w	r9, r4, r3
    tmp13 = z2 - z4;
 80139ae:	1ae3      	subs	r3, r4, r3
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80139b0:	f640 14e3 	movw	r4, #2531	; 0x9e3
    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 80139b4:	fb05 f809 	mul.w	r8, r5, r9
    z4 = z3 + tmp12;
 80139b8:	f852 5c0c 	ldr.w	r5, [r2, #-12]
    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80139bc:	435c      	muls	r4, r3
    z4 = z3 + tmp12;
 80139be:	eb04 3a45 	add.w	sl, r4, r5, lsl #13
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 80139c2:	f642 45b3 	movw	r5, #11443	; 0x2cb3
 80139c6:	fb05 8e0c 	mla	lr, r5, ip, r8
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80139ca:	f240 7514 	movw	r5, #1812	; 0x714
 80139ce:	fb05 f50c 	mul.w	r5, r5, ip
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 80139d2:	44d6      	add	lr, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80139d4:	eba5 0508 	sub.w	r5, r5, r8
 80139d8:	44aa      	add	sl, r5
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 80139da:	f241 25cf 	movw	r5, #4815	; 0x12cf
 80139de:	fb05 f909 	mul.w	r9, r5, r9
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 80139e2:	f852 5c0c 	ldr.w	r5, [r2, #-12]
 80139e6:	ebc4 3445 	rsb	r4, r4, r5, lsl #13
 80139ea:	eba4 3403 	sub.w	r4, r4, r3, lsl #12
    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 80139ee:	ebac 0303 	sub.w	r3, ip, r3
 80139f2:	035b      	lsls	r3, r3, #13
 80139f4:	eba3 3845 	sub.w	r8, r3, r5, lsl #13
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80139f8:	f241 438c 	movw	r3, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80139fc:	f642 0553 	movw	r5, #10323	; 0x2853
 8013a00:	fb05 f50c 	mul.w	r5, r5, ip
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013a04:	fb03 fc0c 	mul.w	ip, r3, ip
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013a08:	eb07 030e 	add.w	r3, r7, lr
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013a0c:	eba5 0509 	sub.w	r5, r5, r9
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013a10:	eba7 070e 	sub.w	r7, r7, lr
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013a14:	ebac 0909 	sub.w	r9, ip, r9
			    & RANGE_MASK];
 8013a18:	f3c3 4389 	ubfx	r3, r3, #18, #10
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8013a1c:	1b2d      	subs	r5, r5, r4
			    & RANGE_MASK];
 8013a1e:	f3c7 4789 	ubfx	r7, r7, #18, #10
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8013a22:	444c      	add	r4, r9
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013a24:	f810 9003 	ldrb.w	r9, [r0, r3]
 8013a28:	9b04      	ldr	r3, [sp, #16]
 8013a2a:	469c      	mov	ip, r3
 8013a2c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8013a2e:	f80c 9003 	strb.w	r9, [ip, r3]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013a32:	5dc3      	ldrb	r3, [r0, r7]
 8013a34:	724b      	strb	r3, [r1, #9]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013a36:	1973      	adds	r3, r6, r5
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013a38:	1b76      	subs	r6, r6, r5
			    & RANGE_MASK];
 8013a3a:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8013a3e:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013a42:	5cc3      	ldrb	r3, [r0, r3]
 8013a44:	704b      	strb	r3, [r1, #1]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013a46:	5d83      	ldrb	r3, [r0, r6]
 8013a48:	720b      	strb	r3, [r1, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013a4a:	9b02      	ldr	r3, [sp, #8]
 8013a4c:	4443      	add	r3, r8
			    & RANGE_MASK];
 8013a4e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013a52:	5cc3      	ldrb	r3, [r0, r3]
 8013a54:	708b      	strb	r3, [r1, #2]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013a56:	9b02      	ldr	r3, [sp, #8]
 8013a58:	eba3 0808 	sub.w	r8, r3, r8
			    & RANGE_MASK];
 8013a5c:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013a60:	f810 3008 	ldrb.w	r3, [r0, r8]
 8013a64:	71cb      	strb	r3, [r1, #7]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013a66:	9b03      	ldr	r3, [sp, #12]
 8013a68:	4423      	add	r3, r4
			    & RANGE_MASK];
 8013a6a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013a6e:	5cc3      	ldrb	r3, [r0, r3]
 8013a70:	70cb      	strb	r3, [r1, #3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013a72:	9b03      	ldr	r3, [sp, #12]
 8013a74:	1b1c      	subs	r4, r3, r4
			    & RANGE_MASK];
 8013a76:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013a7a:	5d03      	ldrb	r3, [r0, r4]
 8013a7c:	718b      	strb	r3, [r1, #6]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013a7e:	eb0b 030a 	add.w	r3, fp, sl
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013a82:	ebab 0a0a 	sub.w	sl, fp, sl
			    & RANGE_MASK];
 8013a86:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8013a8a:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013a8e:	5cc3      	ldrb	r3, [r0, r3]
 8013a90:	710b      	strb	r3, [r1, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013a92:	f810 300a 	ldrb.w	r3, [r0, sl]
 8013a96:	714b      	strb	r3, [r1, #5]
  for (ctr = 0; ctr < 5; ctr++) {
 8013a98:	9b05      	ldr	r3, [sp, #20]
 8013a9a:	9901      	ldr	r1, [sp, #4]
 8013a9c:	428b      	cmp	r3, r1
 8013a9e:	f47f af44 	bne.w	801392a <jpeg_idct_10x5+0xda>
  }
}
 8013aa2:	b02f      	add	sp, #188	; 0xbc
 8013aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aa8:	ffffba5c 	.word	0xffffba5c

08013aac <jpeg_idct_8x4>:

GLOBAL(void)
jpeg_idct_8x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ab0:	b0a5      	sub	sp, #148	; 0x94
 8013ab2:	6d4e      	ldr	r6, [r1, #84]	; 0x54
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013ab4:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 8013ab8:	1e97      	subs	r7, r2, #2
  /* Pass 1: process columns from input, store into work array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8013aba:	ac04      	add	r4, sp, #16
 8013abc:	320e      	adds	r2, #14
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013abe:	f100 0c80 	add.w	ip, r0, #128	; 0x80
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013ac2:	3e04      	subs	r6, #4
 8013ac4:	4621      	mov	r1, r4
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8013ac6:	f241 1851 	movw	r8, #4433	; 0x1151
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8013aca:	f641 0e7e 	movw	lr, #6270	; 0x187e
 8013ace:	9200      	str	r2, [sp, #0]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013ad0:	f937 0f02 	ldrsh.w	r0, [r7, #2]!
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013ad4:	3404      	adds	r4, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013ad6:	f856 5f04 	ldr.w	r5, [r6, #4]!
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013ada:	f9b7 a010 	ldrsh.w	sl, [r7, #16]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013ade:	4345      	muls	r5, r0
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013ae0:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8013ae2:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013ae6:	f9b7 b030 	ldrsh.w	fp, [r7, #48]	; 0x30
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013aea:	4350      	muls	r0, r2
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8013aec:	4a65      	ldr	r2, [pc, #404]	; (8013c84 <jpeg_idct_8x4+0x1d8>)
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 8013aee:	eb05 0900 	add.w	r9, r5, r0
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 8013af2:	1a2d      	subs	r5, r5, r0
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013af4:	6a30      	ldr	r0, [r6, #32]
 8013af6:	fb00 fa0a 	mul.w	sl, r0, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013afa:	6e30      	ldr	r0, [r6, #96]	; 0x60
 8013afc:	fb00 f00b 	mul.w	r0, r0, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8013b00:	eb0a 0b00 	add.w	fp, sl, r0
 8013b04:	fb08 fb0b 	mul.w	fp, r8, fp
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013b08:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8013b0c:	fb0e ba0a 	mla	sl, lr, sl, fp
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8013b10:	fb02 bb00 	mla	fp, r2, r0, fp
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013b14:	9a00      	ldr	r2, [sp, #0]
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8013b16:	ea4f 2aea 	mov.w	sl, sl, asr #11
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8013b1a:	ea4f 2beb 	mov.w	fp, fp, asr #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013b1e:	42ba      	cmp	r2, r7
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[8*0] = (int) (tmp10 + tmp0);
 8013b20:	eb0a 0089 	add.w	r0, sl, r9, lsl #2
 8013b24:	f844 0c04 	str.w	r0, [r4, #-4]
    wsptr[8*3] = (int) (tmp10 - tmp0);
 8013b28:	ebca 0089 	rsb	r0, sl, r9, lsl #2
 8013b2c:	65e0      	str	r0, [r4, #92]	; 0x5c
    wsptr[8*1] = (int) (tmp12 + tmp2);
 8013b2e:	eb0b 0085 	add.w	r0, fp, r5, lsl #2
    wsptr[8*2] = (int) (tmp12 - tmp2);
 8013b32:	ebcb 0585 	rsb	r5, fp, r5, lsl #2
    wsptr[8*1] = (int) (tmp12 + tmp2);
 8013b36:	61e0      	str	r0, [r4, #28]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 8013b38:	63e5      	str	r5, [r4, #60]	; 0x3c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013b3a:	d1c9      	bne.n	8013ad0 <jpeg_idct_8x4+0x24>
 8013b3c:	f1a3 0804 	sub.w	r8, r3, #4
 8013b40:	330c      	adds	r3, #12
 8013b42:	9303      	str	r3, [sp, #12]
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013b44:	f858 3f04 	ldr.w	r3, [r8, #4]!
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += DCTSIZE;		/* advance pointer to next row */
 8013b48:	3120      	adds	r1, #32
    outptr = output_buf[ctr] + output_col;
 8013b4a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    z2 = (INT32) wsptr[2];
 8013b4c:	f851 4c18 	ldr.w	r4, [r1, #-24]
    outptr = output_buf[ctr] + output_col;
 8013b50:	1898      	adds	r0, r3, r2
 8013b52:	9302      	str	r3, [sp, #8]
    z3 = (INT32) wsptr[6];
 8013b54:	f851 3c08 	ldr.w	r3, [r1, #-8]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013b58:	f241 1251 	movw	r2, #4433	; 0x1151
    tmp1 = (INT32) wsptr[5];
 8013b5c:	f851 ec0c 	ldr.w	lr, [r1, #-12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013b60:	eb04 0b03 	add.w	fp, r4, r3
    tmp3 = (INT32) wsptr[1];
 8013b64:	f851 9c1c 	ldr.w	r9, [r1, #-28]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8013b68:	fb02 fb0b 	mul.w	fp, r2, fp
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8013b6c:	f641 027e 	movw	r2, #6270	; 0x187e
    z3 = tmp1 + tmp3;
 8013b70:	eb0e 0709 	add.w	r7, lr, r9
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8013b74:	fb02 b404 	mla	r4, r2, r4, fp
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8013b78:	4a42      	ldr	r2, [pc, #264]	; (8013c84 <jpeg_idct_8x4+0x1d8>)
 8013b7a:	fb02 bb03 	mla	fp, r2, r3, fp
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013b7e:	f851 2c20 	ldr.w	r2, [r1, #-32]
    z3 = (INT32) wsptr[4];
 8013b82:	f851 3c10 	ldr.w	r3, [r1, #-16]
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013b86:	3210      	adds	r2, #16
    tmp0 = (z2 + z3) << CONST_BITS;
 8013b88:	18d5      	adds	r5, r2, r3
    tmp1 = (z2 - z3) << CONST_BITS;
 8013b8a:	1ad2      	subs	r2, r2, r3
    tmp13 = tmp0 - tmp2;
 8013b8c:	ebc4 3345 	rsb	r3, r4, r5, lsl #13
    tmp10 = tmp0 + tmp2;
 8013b90:	eb04 3645 	add.w	r6, r4, r5, lsl #13
    tmp0 = (INT32) wsptr[7];
 8013b94:	f851 4c04 	ldr.w	r4, [r1, #-4]
    tmp13 = tmp0 - tmp2;
 8013b98:	9300      	str	r3, [sp, #0]
    tmp11 = tmp1 + tmp3;
 8013b9a:	eb0b 3342 	add.w	r3, fp, r2, lsl #13
    tmp12 = tmp1 - tmp3;
 8013b9e:	ebcb 3b42 	rsb	fp, fp, r2, lsl #13
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013ba2:	f242 55a1 	movw	r5, #9633	; 0x25a1
    tmp11 = tmp1 + tmp3;
 8013ba6:	9301      	str	r3, [sp, #4]
    z2 = tmp0 + tmp2;
 8013ba8:	f851 3c14 	ldr.w	r3, [r1, #-20]
 8013bac:	18e2      	adds	r2, r4, r3
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8013bae:	19d3      	adds	r3, r2, r7
 8013bb0:	436b      	muls	r3, r5
    z2 += z1;
 8013bb2:	4d35      	ldr	r5, [pc, #212]	; (8013c88 <jpeg_idct_8x4+0x1dc>)
 8013bb4:	fb05 3202 	mla	r2, r5, r2, r3
    z3 += z1;
 8013bb8:	4d34      	ldr	r5, [pc, #208]	; (8013c8c <jpeg_idct_8x4+0x1e0>)
 8013bba:	fb05 3307 	mla	r3, r5, r7, r3
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8013bbe:	eb04 0709 	add.w	r7, r4, r9
 8013bc2:	4d33      	ldr	r5, [pc, #204]	; (8013c90 <jpeg_idct_8x4+0x1e4>)
 8013bc4:	436f      	muls	r7, r5
    tmp0 += z1 + z2;
 8013bc6:	f640 158e 	movw	r5, #2446	; 0x98e
 8013bca:	eb02 0a07 	add.w	sl, r2, r7
    tmp3 += z1 + z3;
 8013bce:	441f      	add	r7, r3
    tmp0 += z1 + z2;
 8013bd0:	fb05 a404 	mla	r4, r5, r4, sl
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013bd4:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp3 += z1 + z3;
 8013bd8:	f243 0a0b 	movw	sl, #12299	; 0x300b
 8013bdc:	fb0a 7709 	mla	r7, sl, r9, r7
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013be0:	eb0e 0905 	add.w	r9, lr, r5
 8013be4:	4d2b      	ldr	r5, [pc, #172]	; (8013c94 <jpeg_idct_8x4+0x1e8>)
    tmp1 += z1 + z3;
 8013be6:	f244 1ab3 	movw	sl, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8013bea:	fb05 f909 	mul.w	r9, r5, r9
    tmp2 += z1 + z2;
 8013bee:	f851 5c14 	ldr.w	r5, [r1, #-20]
    tmp1 += z1 + z3;
 8013bf2:	444b      	add	r3, r9
    tmp2 += z1 + z2;
 8013bf4:	444a      	add	r2, r9
 8013bf6:	f246 2954 	movw	r9, #25172	; 0x6254
    tmp1 += z1 + z3;
 8013bfa:	fb0a 330e 	mla	r3, sl, lr, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013bfe:	eb06 0e07 	add.w	lr, r6, r7
    tmp2 += z1 + z2;
 8013c02:	fb09 2205 	mla	r2, r9, r5, r2
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013c06:	1bf7      	subs	r7, r6, r7
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013c08:	9d02      	ldr	r5, [sp, #8]
			    & RANGE_MASK];
 8013c0a:	f3ce 4e89 	ubfx	lr, lr, #18, #10
			    & RANGE_MASK];
 8013c0e:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8013c12:	f81c e00e 	ldrb.w	lr, [ip, lr]
 8013c16:	46a9      	mov	r9, r5
 8013c18:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 8013c1a:	f809 e005 	strb.w	lr, [r9, r5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013c1e:	9d01      	ldr	r5, [sp, #4]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8013c20:	f81c 6007 	ldrb.w	r6, [ip, r7]
 8013c24:	71c6      	strb	r6, [r0, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013c26:	18ae      	adds	r6, r5, r2
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8013c28:	1aaa      	subs	r2, r5, r2
			    & RANGE_MASK];
 8013c2a:	f3c6 4689 	ubfx	r6, r6, #18, #10
			    & RANGE_MASK];
 8013c2e:	f3c2 4989 	ubfx	r9, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8013c32:	f81c 6006 	ldrb.w	r6, [ip, r6]
 8013c36:	7046      	strb	r6, [r0, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8013c38:	f81c 2009 	ldrb.w	r2, [ip, r9]
 8013c3c:	7182      	strb	r2, [r0, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8013c3e:	eb0b 0203 	add.w	r2, fp, r3
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8013c42:	ebab 0303 	sub.w	r3, fp, r3
			    & RANGE_MASK];
 8013c46:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 8013c4a:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8013c4e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8013c52:	7082      	strb	r2, [r0, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8013c54:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8013c58:	7143      	strb	r3, [r0, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8013c5a:	9b00      	ldr	r3, [sp, #0]
 8013c5c:	4423      	add	r3, r4
			    & RANGE_MASK];
 8013c5e:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8013c62:	f81c 3003 	ldrb.w	r3, [ip, r3]
 8013c66:	70c3      	strb	r3, [r0, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8013c68:	9b00      	ldr	r3, [sp, #0]
 8013c6a:	1b1c      	subs	r4, r3, r4
			    & RANGE_MASK];
 8013c6c:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8013c70:	f81c 3004 	ldrb.w	r3, [ip, r4]
 8013c74:	7103      	strb	r3, [r0, #4]
  for (ctr = 0; ctr < 4; ctr++) {
 8013c76:	9b03      	ldr	r3, [sp, #12]
 8013c78:	4543      	cmp	r3, r8
 8013c7a:	f47f af63 	bne.w	8013b44 <jpeg_idct_8x4+0x98>
  }
}
 8013c7e:	b025      	add	sp, #148	; 0x94
 8013c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c84:	ffffc4df 	.word	0xffffc4df
 8013c88:	ffffc13b 	.word	0xffffc13b
 8013c8c:	fffff384 	.word	0xfffff384
 8013c90:	ffffe333 	.word	0xffffe333
 8013c94:	ffffadfd 	.word	0xffffadfd

08013c98 <jpeg_idct_6x3>:

GLOBAL(void)
jpeg_idct_6x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c9c:	b095      	sub	sp, #84	; 0x54
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013c9e:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
 8013ca2:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8013ca4:	f1a2 0e02 	sub.w	lr, r2, #2
  /* Pass 1: process columns from input, store into work array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8013ca8:	ad02      	add	r5, sp, #8
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013caa:	3080      	adds	r0, #128	; 0x80
 8013cac:	f102 040a 	add.w	r4, r2, #10
 8013cb0:	f1a1 0c04 	sub.w	ip, r1, #4
 8013cb4:	462a      	mov	r2, r5
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8013cb6:	f241 69a1 	movw	r9, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8013cba:	f242 7831 	movw	r8, #10033	; 0x2731
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013cbe:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013cc0:	f93e 6f02 	ldrsh.w	r6, [lr, #2]!
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013cc4:	3504      	adds	r5, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013cc6:	f85c 1f04 	ldr.w	r1, [ip, #4]!
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013cca:	f9be 7020 	ldrsh.w	r7, [lr, #32]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013cce:	4574      	cmp	r4, lr
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013cd0:	fb01 f106 	mul.w	r1, r1, r6
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013cd4:	f8dc 6040 	ldr.w	r6, [ip, #64]	; 0x40
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013cd8:	f9be a010 	ldrsh.w	sl, [lr, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013cdc:	fb06 f607 	mul.w	r6, r6, r7
    tmp0 <<= CONST_BITS;
 8013ce0:	ea4f 3141 	mov.w	r1, r1, lsl #13
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013ce4:	f8dc 0020 	ldr.w	r0, [ip, #32]
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013ce8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8013cec:	fb09 f606 	mul.w	r6, r9, r6
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013cf0:	fb00 fa0a 	mul.w	sl, r0, sl
    tmp10 = tmp0 + tmp12;
 8013cf4:	eb01 0706 	add.w	r7, r1, r6
    tmp2 = tmp0 - tmp12 - tmp12;
 8013cf8:	eba1 0146 	sub.w	r1, r1, r6, lsl #1
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8013cfc:	fb08 fa0a 	mul.w	sl, r8, sl

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8013d00:	ea4f 21e1 	mov.w	r1, r1, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8013d04:	eb07 0b0a 	add.w	fp, r7, sl
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013d08:	eba7 070a 	sub.w	r7, r7, sl
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 8013d0c:	6169      	str	r1, [r5, #20]
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8013d0e:	ea4f 2beb 	mov.w	fp, fp, asr #11
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013d12:	ea4f 27e7 	mov.w	r7, r7, asr #11
    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8013d16:	f845 bc04 	str.w	fp, [r5, #-4]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8013d1a:	62ef      	str	r7, [r5, #44]	; 0x2c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8013d1c:	d1d0      	bne.n	8013cc0 <jpeg_idct_6x3+0x28>
 8013d1e:	f1a3 0e04 	sub.w	lr, r3, #4
 8013d22:	f103 0908 	add.w	r9, r3, #8
  /* Pass 2: process 3 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8013d26:	f85e af04 	ldr.w	sl, [lr, #4]!

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[4];
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8013d2a:	f241 60a1 	movw	r0, #5793	; 0x16a1
    outptr = output_buf[ctr] + output_col;
 8013d2e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8013d30:	3218      	adds	r2, #24
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8013d32:	f852 1c08 	ldr.w	r1, [r2, #-8]
  for (ctr = 0; ctr < 3; ctr++) {
 8013d36:	45f1      	cmp	r9, lr
    outptr = output_buf[ctr] + output_col;
 8013d38:	eb0a 0703 	add.w	r7, sl, r3
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013d3c:	f852 3c18 	ldr.w	r3, [r2, #-24]
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8013d40:	fb00 f101 	mul.w	r1, r0, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8013d44:	f852 4c10 	ldr.w	r4, [r2, #-16]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8013d48:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 8013d4c:	f852 8c04 	ldr.w	r8, [r2, #-4]
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013d50:	f640 30b6 	movw	r0, #2998	; 0xbb6
    tmp1 = tmp0 + tmp10;
 8013d54:	eb01 3543 	add.w	r5, r1, r3, lsl #13
    tmp11 = tmp0 - tmp10 - tmp10;
 8013d58:	ebc1 3343 	rsb	r3, r1, r3, lsl #13
 8013d5c:	eba3 0301 	sub.w	r3, r3, r1
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8013d60:	f242 7131 	movw	r1, #10033	; 0x2731
 8013d64:	fb01 f104 	mul.w	r1, r1, r4
    z1 = (INT32) wsptr[1];
 8013d68:	f852 4c14 	ldr.w	r4, [r2, #-20]
    tmp10 = tmp1 + tmp0;
 8013d6c:	eb05 0601 	add.w	r6, r5, r1
    tmp12 = tmp1 - tmp0;
 8013d70:	eba5 0101 	sub.w	r1, r5, r1
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8013d74:	eb04 0508 	add.w	r5, r4, r8
 8013d78:	fb00 f505 	mul.w	r5, r0, r5
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8013d7c:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 8013d80:	eb04 0c00 	add.w	ip, r4, r0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8013d84:	eba4 0400 	sub.w	r4, r4, r0
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8013d88:	eba8 0b00 	sub.w	fp, r8, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013d8c:	9801      	ldr	r0, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8013d8e:	eb05 3c4c 	add.w	ip, r5, ip, lsl #13
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8013d92:	eba4 0808 	sub.w	r8, r4, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8013d96:	eb05 354b 	add.w	r5, r5, fp, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013d9a:	eb06 040c 	add.w	r4, r6, ip
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013d9e:	eba6 060c 	sub.w	r6, r6, ip
			    & RANGE_MASK];
 8013da2:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8013da6:	f3c6 4689 	ubfx	r6, r6, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013daa:	5d04      	ldrb	r4, [r0, r4]
 8013dac:	981e      	ldr	r0, [sp, #120]	; 0x78
 8013dae:	f80a 4000 	strb.w	r4, [sl, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013db2:	9801      	ldr	r0, [sp, #4]
 8013db4:	5d84      	ldrb	r4, [r0, r6]
 8013db6:	717c      	strb	r4, [r7, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8013db8:	eb03 3448 	add.w	r4, r3, r8, lsl #13
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8013dbc:	eba3 3848 	sub.w	r8, r3, r8, lsl #13
			    & RANGE_MASK];
 8013dc0:	f3c4 4489 	ubfx	r4, r4, #18, #10
			    & RANGE_MASK];
 8013dc4:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8013dc8:	5d04      	ldrb	r4, [r0, r4]
 8013dca:	707c      	strb	r4, [r7, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8013dcc:	f810 3008 	ldrb.w	r3, [r0, r8]
 8013dd0:	713b      	strb	r3, [r7, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013dd2:	eb01 0305 	add.w	r3, r1, r5
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013dd6:	eba1 0505 	sub.w	r5, r1, r5
			    & RANGE_MASK];
 8013dda:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8013dde:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013de2:	5cc3      	ldrb	r3, [r0, r3]
 8013de4:	70bb      	strb	r3, [r7, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013de6:	5d43      	ldrb	r3, [r0, r5]
 8013de8:	70fb      	strb	r3, [r7, #3]
  for (ctr = 0; ctr < 3; ctr++) {
 8013dea:	d19c      	bne.n	8013d26 <jpeg_idct_6x3+0x8e>
  }
}
 8013dec:	b015      	add	sp, #84	; 0x54
 8013dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08013df4 <jpeg_idct_4x2>:

GLOBAL(void)
jpeg_idct_4x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013df8:	b08b      	sub	sp, #44	; 0x2c
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013dfa:	f8d0 514c 	ldr.w	r5, [r0, #332]	; 0x14c
 8013dfe:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 8013e00:	1e97      	subs	r7, r2, #2
 8013e02:	f10d 0c08 	add.w	ip, sp, #8
 8013e06:	3580      	adds	r5, #128	; 0x80
  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013e08:	3e04      	subs	r6, #4
 8013e0a:	3206      	adds	r2, #6
 8013e0c:	4660      	mov	r0, ip
{
 8013e0e:	9301      	str	r3, [sp, #4]
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013e10:	f937 4f02 	ldrsh.w	r4, [r7, #2]!
 8013e14:	f856 1f04 	ldr.w	r1, [r6, #4]!

    /* Odd part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013e18:	f9b7 e010 	ldrsh.w	lr, [r7, #16]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013e1c:	42ba      	cmp	r2, r7
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013e1e:	fb01 f104 	mul.w	r1, r1, r4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013e22:	6a34      	ldr	r4, [r6, #32]
 8013e24:	fb04 f40e 	mul.w	r4, r4, lr

    /* Final output stage */

    wsptr[4*0] = tmp10 + tmp0;
 8013e28:	eb01 0e04 	add.w	lr, r1, r4
    wsptr[4*1] = tmp10 - tmp0;
 8013e2c:	eba1 0104 	sub.w	r1, r1, r4
    wsptr[4*0] = tmp10 + tmp0;
 8013e30:	f84c eb04 	str.w	lr, [ip], #4
    wsptr[4*1] = tmp10 - tmp0;
 8013e34:	f8cc 100c 	str.w	r1, [ip, #12]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8013e38:	d1ea      	bne.n	8013e10 <jpeg_idct_4x2+0x1c>
 8013e3a:	9b01      	ldr	r3, [sp, #4]
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = wsptr[1];
    z3 = wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8013e3c:	f241 1a51 	movw	sl, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8013e40:	f641 097e 	movw	r9, #6270	; 0x187e
 8013e44:	f1a3 0c04 	sub.w	ip, r3, #4
    outptr = output_buf[ctr] + output_col;
 8013e48:	46e0      	mov	r8, ip
 8013e4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013e4c:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 4;		/* advance pointer to next row */
 8013e50:	3010      	adds	r0, #16
    tmp0 = wsptr[0] + (ONE << 2);
 8013e52:	f850 4c10 	ldr.w	r4, [r0, #-16]
    outptr = output_buf[ctr] + output_col;
 8013e56:	eb0e 0602 	add.w	r6, lr, r2
    z3 = wsptr[3];
 8013e5a:	f850 7c04 	ldr.w	r7, [r0, #-4]
    tmp2 = wsptr[2];
 8013e5e:	f850 2c08 	ldr.w	r2, [r0, #-8]
    tmp0 = wsptr[0] + (ONE << 2);
 8013e62:	3404      	adds	r4, #4
    z2 = wsptr[1];
 8013e64:	f850 1c0c 	ldr.w	r1, [r0, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8013e68:	eb04 0b02 	add.w	fp, r4, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8013e6c:	1aa4      	subs	r4, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8013e6e:	19ca      	adds	r2, r1, r7
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8013e70:	4b13      	ldr	r3, [pc, #76]	; (8013ec0 <jpeg_idct_4x2+0xcc>)
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8013e72:	fb0a f202 	mul.w	r2, sl, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8013e76:	fb09 2101 	mla	r1, r9, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8013e7a:	fb03 2207 	mla	r2, r3, r7, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013e7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013e80:	eb01 374b 	add.w	r7, r1, fp, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013e84:	ebc1 314b 	rsb	r1, r1, fp, lsl #13
			    & RANGE_MASK];
 8013e88:	f3c7 4709 	ubfx	r7, r7, #16, #10
			    & RANGE_MASK];
 8013e8c:	f3c1 4109 	ubfx	r1, r1, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8013e90:	5def      	ldrb	r7, [r5, r7]
 8013e92:	f80e 7003 	strb.w	r7, [lr, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013e96:	5c69      	ldrb	r1, [r5, r1]
  for (ctr = 0; ctr < 2; ctr++) {
 8013e98:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8013e9a:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013e9c:	eb02 3144 	add.w	r1, r2, r4, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013ea0:	ebc2 3244 	rsb	r2, r2, r4, lsl #13
  for (ctr = 0; ctr < 2; ctr++) {
 8013ea4:	4543      	cmp	r3, r8
			    & RANGE_MASK];
 8013ea6:	f3c1 4109 	ubfx	r1, r1, #16, #10
			    & RANGE_MASK];
 8013eaa:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8013eae:	5c69      	ldrb	r1, [r5, r1]
 8013eb0:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8013eb2:	5caa      	ldrb	r2, [r5, r2]
 8013eb4:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 2; ctr++) {
 8013eb6:	d1c7      	bne.n	8013e48 <jpeg_idct_4x2+0x54>
  }
}
 8013eb8:	b00b      	add	sp, #44	; 0x2c
 8013eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ebe:	bf00      	nop
 8013ec0:	ffffc4df 	.word	0xffffc4df

08013ec4 <jpeg_idct_2x1>:

  /* Pass 1: empty. */

  /* Pass 2: process 1 row from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8013ec4:	6d49      	ldr	r1, [r1, #84]	; 0x54
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013ec6:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8013eca:	b5f0      	push	{r4, r5, r6, r7, lr}
  outptr = output_buf[0] + output_col;

  /* Even part */

  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8013ecc:	f9b2 7000 	ldrsh.w	r7, [r2]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013ed0:	3080      	adds	r0, #128	; 0x80
  outptr = output_buf[0] + output_col;
 8013ed2:	681d      	ldr	r5, [r3, #0]
  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8013ed4:	680b      	ldr	r3, [r1, #0]
{
 8013ed6:	9c05      	ldr	r4, [sp, #20]
  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 8013ed8:	437b      	muls	r3, r7
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 8013eda:	f9b2 7002 	ldrsh.w	r7, [r2, #2]
 8013ede:	684a      	ldr	r2, [r1, #4]
  outptr = output_buf[0] + output_col;
 8013ee0:	192e      	adds	r6, r5, r4
  tmp10 += ONE << 2;
 8013ee2:	3304      	adds	r3, #4
  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 8013ee4:	437a      	muls	r2, r7

  /* Final output stage */

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8013ee6:	1899      	adds	r1, r3, r2
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8013ee8:	1a9b      	subs	r3, r3, r2
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8013eea:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8013eee:	f3c3 03c9 	ubfx	r3, r3, #3, #10
  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8013ef2:	5c41      	ldrb	r1, [r0, r1]
 8013ef4:	5529      	strb	r1, [r5, r4]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8013ef6:	5cc3      	ldrb	r3, [r0, r3]
 8013ef8:	7073      	strb	r3, [r6, #1]
}
 8013efa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013efc <jpeg_idct_8x16>:

GLOBAL(void)
jpeg_idct_8x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f00:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8013f04:	930c      	str	r3, [sp, #48]	; 0x30
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013f06:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8013f0a:	3380      	adds	r3, #128	; 0x80
 8013f0c:	9301      	str	r3, [sp, #4]
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013f0e:	1e93      	subs	r3, r2, #2
 8013f10:	9300      	str	r3, [sp, #0]
 8013f12:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8013f14:	f1a3 0804 	sub.w	r8, r3, #4
 8013f18:	f102 030e 	add.w	r3, r2, #14
 8013f1c:	930d      	str	r3, [sp, #52]	; 0x34
  wsptr = workspace;
 8013f1e:	ab0e      	add	r3, sp, #56	; 0x38
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013f20:	9900      	ldr	r1, [sp, #0]
    tmp0 <<= CONST_BITS;
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013f22:	f642 1bcf 	movw	fp, #10703	; 0x29cf
    tmp13 = tmp0 - tmp2;

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
    z3 = z1 - z2;
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013f26:	f640 05d4 	movw	r5, #2260	; 0x8d4
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8013f2a:	f642 4663 	movw	r6, #11363	; 0x2c63
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013f2e:	f931 2f02 	ldrsh.w	r2, [r1, #2]!

    tmp11 = z1 + z3;

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8013f32:	f242 2efc 	movw	lr, #8956	; 0x22fc
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8013f36:	4fd9      	ldr	r7, [pc, #868]	; (801429c <jpeg_idct_8x16+0x3a0>)
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013f38:	3304      	adds	r3, #4
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013f3a:	9100      	str	r1, [sp, #0]
 8013f3c:	f858 1f04 	ldr.w	r1, [r8, #4]!
 8013f40:	4351      	muls	r1, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013f42:	9a00      	ldr	r2, [sp, #0]
 8013f44:	f9b2 0040 	ldrsh.w	r0, [r2, #64]	; 0x40
    tmp0 <<= CONST_BITS;
 8013f48:	0349      	lsls	r1, r1, #13
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013f4a:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013f4e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013f52:	4342      	muls	r2, r0
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013f54:	f241 1051 	movw	r0, #4433	; 0x1151
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8013f58:	fb0b fb02 	mul.w	fp, fp, r2
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8013f5c:	4342      	muls	r2, r0
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013f5e:	f245 2003 	movw	r0, #20995	; 0x5203
    tmp10 = tmp0 + tmp1;
 8013f62:	eb01 040b 	add.w	r4, r1, fp
    tmp11 = tmp0 - tmp1;
 8013f66:	eba1 0b0b 	sub.w	fp, r1, fp
    tmp12 = tmp0 + tmp2;
 8013f6a:	eb01 0902 	add.w	r9, r1, r2
    tmp13 = tmp0 - tmp2;
 8013f6e:	1a89      	subs	r1, r1, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013f70:	9a00      	ldr	r2, [sp, #0]
 8013f72:	f9b2 a020 	ldrsh.w	sl, [r2, #32]
 8013f76:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8013f7a:	fb02 fa0a 	mul.w	sl, r2, sl
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013f7e:	9a00      	ldr	r2, [sp, #0]
 8013f80:	f9b2 c060 	ldrsh.w	ip, [r2, #96]	; 0x60
 8013f84:	f8d8 20c0 	ldr.w	r2, [r8, #192]	; 0xc0
 8013f88:	fb02 fc0c 	mul.w	ip, r2, ip
    z3 = z1 - z2;
 8013f8c:	ebaa 020c 	sub.w	r2, sl, ip
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8013f90:	4355      	muls	r5, r2
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8013f92:	4356      	muls	r6, r2
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8013f94:	f641 42cd 	movw	r2, #7373	; 0x1ccd
    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8013f98:	fb00 600c 	mla	r0, r0, ip, r6
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8013f9c:	fb02 520a 	mla	r2, r2, sl, r5
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8013fa0:	fb07 6a0a 	mla	sl, r7, sl, r6
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8013fa4:	4ebe      	ldr	r6, [pc, #760]	; (80142a0 <jpeg_idct_8x16+0x3a4>)
 8013fa6:	fb06 5c0c 	mla	ip, r6, ip, r5
    tmp20 = tmp10 + tmp0;
 8013faa:	1825      	adds	r5, r4, r0
    tmp27 = tmp10 - tmp0;
 8013fac:	1a20      	subs	r0, r4, r0
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8013fae:	f642 364e 	movw	r6, #11086	; 0x2b4e
    tmp20 = tmp10 + tmp0;
 8013fb2:	9502      	str	r5, [sp, #8]
    tmp27 = tmp10 - tmp0;
 8013fb4:	9003      	str	r0, [sp, #12]
    tmp21 = tmp12 + tmp1;
 8013fb6:	eb09 0002 	add.w	r0, r9, r2
    tmp26 = tmp12 - tmp1;
 8013fba:	eba9 0202 	sub.w	r2, r9, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013fbe:	f8d8 50a0 	ldr.w	r5, [r8, #160]	; 0xa0
    tmp21 = tmp12 + tmp1;
 8013fc2:	9004      	str	r0, [sp, #16]
    tmp26 = tmp12 - tmp1;
 8013fc4:	9205      	str	r2, [sp, #20]
    tmp22 = tmp13 + tmp2;
 8013fc6:	eb01 020a 	add.w	r2, r1, sl
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013fca:	f8d8 0020 	ldr.w	r0, [r8, #32]
    tmp22 = tmp13 + tmp2;
 8013fce:	9206      	str	r2, [sp, #24]
    tmp25 = tmp13 - tmp2;
 8013fd0:	eba1 020a 	sub.w	r2, r1, sl
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8013fd4:	f241 5a55 	movw	sl, #5461	; 0x1555
    tmp25 = tmp13 - tmp2;
 8013fd8:	9207      	str	r2, [sp, #28]
    tmp23 = tmp11 + tmp3;
 8013fda:	eb0b 020c 	add.w	r2, fp, ip
 8013fde:	9208      	str	r2, [sp, #32]
    tmp24 = tmp11 - tmp3;
 8013fe0:	ebab 020c 	sub.w	r2, fp, ip
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8013fe4:	f641 4cb6 	movw	ip, #7350	; 0x1cb6
    tmp24 = tmp11 - tmp3;
 8013fe8:	9209      	str	r2, [sp, #36]	; 0x24
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013fea:	9a00      	ldr	r2, [sp, #0]
 8013fec:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8013ff0:	4350      	muls	r0, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013ff2:	9a00      	ldr	r2, [sp, #0]
 8013ff4:	f9b2 1030 	ldrsh.w	r1, [r2, #48]	; 0x30
 8013ff8:	f8d8 2060 	ldr.w	r2, [r8, #96]	; 0x60
 8013ffc:	434a      	muls	r2, r1
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013ffe:	9900      	ldr	r1, [sp, #0]
 8014000:	f9b1 1050 	ldrsh.w	r1, [r1, #80]	; 0x50
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8014004:	eba0 0b02 	sub.w	fp, r0, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014008:	434d      	muls	r5, r1
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801400a:	9900      	ldr	r1, [sp, #0]
 801400c:	f9b1 4070 	ldrsh.w	r4, [r1, #112]	; 0x70
    tmp11 = z1 + z3;
 8014010:	1947      	adds	r7, r0, r5
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014012:	f8d8 10e0 	ldr.w	r1, [r8, #224]	; 0xe0
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8014016:	fb0a fa07 	mul.w	sl, sl, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801401a:	4361      	muls	r1, r4
    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 801401c:	1884      	adds	r4, r0, r2
 801401e:	4366      	muls	r6, r4
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8014020:	f242 74e9 	movw	r4, #10217	; 0x27e9
 8014024:	fb04 f907 	mul.w	r9, r4, r7
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8014028:	1844      	adds	r4, r0, r1
 801402a:	fb0e fe04 	mul.w	lr, lr, r4
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 801402e:	1a44      	subs	r4, r0, r1
    tmp0  = tmp1 + tmp2 + tmp3 -
 8014030:	eb06 0709 	add.w	r7, r6, r9
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8014034:	fb0c fc04 	mul.w	ip, ip, r4
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8014038:	f640 5423 	movw	r4, #3363	; 0xd23
    tmp0  = tmp1 + tmp2 + tmp3 -
 801403c:	4477      	add	r7, lr
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 801403e:	fb04 fb0b 	mul.w	fp, r4, fp
    tmp0  = tmp1 + tmp2 + tmp3 -
 8014042:	4c98      	ldr	r4, [pc, #608]	; (80142a4 <jpeg_idct_8x16+0x3a8>)
 8014044:	fb04 7400 	mla	r4, r4, r0, r7
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
    tmp13 = tmp10 + tmp11 + tmp12 -
 8014048:	4f97      	ldr	r7, [pc, #604]	; (80142a8 <jpeg_idct_8x16+0x3ac>)
    tmp0  = tmp1 + tmp2 + tmp3 -
 801404a:	940a      	str	r4, [sp, #40]	; 0x28
    tmp13 = tmp10 + tmp11 + tmp12 -
 801404c:	eb0c 040a 	add.w	r4, ip, sl
 8014050:	445c      	add	r4, fp
 8014052:	fb07 4000 	mla	r0, r7, r0, r4
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8014056:	f44f 648e 	mov.w	r4, #1136	; 0x470
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801405a:	4f94      	ldr	r7, [pc, #592]	; (80142ac <jpeg_idct_8x16+0x3b0>)
    tmp13 = tmp10 + tmp11 + tmp12 -
 801405c:	900b      	str	r0, [sp, #44]	; 0x2c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801405e:	1950      	adds	r0, r2, r5
 8014060:	4344      	muls	r4, r0
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8014062:	f240 204d 	movw	r0, #589	; 0x24d
 8014066:	fb00 4002 	mla	r0, r0, r2, r4
 801406a:	4406      	add	r6, r0
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801406c:	4890      	ldr	r0, [pc, #576]	; (80142b0 <jpeg_idct_8x16+0x3b4>)
 801406e:	fb00 4405 	mla	r4, r0, r5, r4
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8014072:	1aa8      	subs	r0, r5, r2
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8014074:	444c      	add	r4, r9
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8014076:	f642 5909 	movw	r9, #11529	; 0x2d09
 801407a:	fb09 f000 	mul.w	r0, r9, r0
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801407e:	fb07 0905 	mla	r9, r7, r5, r0
    tmp1  += z1;
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
    tmp12 += z2;
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8014082:	f46f 7759 	mvn.w	r7, #868	; 0x364
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8014086:	44ca      	add	sl, r9
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8014088:	f643 791a 	movw	r9, #16154	; 0x3f1a
 801408c:	fb09 0902 	mla	r9, r9, r2, r0
    z2    += z4;
 8014090:	440a      	add	r2, r1
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8014092:	4888      	ldr	r0, [pc, #544]	; (80142b4 <jpeg_idct_8x16+0x3b8>)
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8014094:	44d9      	add	r9, fp
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8014096:	fb00 fb02 	mul.w	fp, r0, r2
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801409a:	f242 2018 	movw	r0, #8728	; 0x2218
 801409e:	fb00 b001 	mla	r0, r0, r1, fp
    tmp1  += z1;
 80140a2:	445e      	add	r6, fp
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80140a4:	f246 4b85 	movw	fp, #25733	; 0x6485
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80140a8:	4486      	add	lr, r0
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 80140aa:	4883      	ldr	r0, [pc, #524]	; (80142b8 <jpeg_idct_8x16+0x3bc>)
 80140ac:	4342      	muls	r2, r0
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80140ae:	4438      	add	r0, r7
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80140b0:	fb0b 2b01 	mla	fp, fp, r1, r2
    tmp12 += z2;
 80140b4:	444a      	add	r2, r9
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 80140b6:	44dc      	add	ip, fp
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80140b8:	eb05 0b01 	add.w	fp, r5, r1
    tmp2  += z2;
    tmp3  += z2;
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80140bc:	1b49      	subs	r1, r1, r5
    tmp10 += z2;
    tmp11 += z2;

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80140be:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80140c0:	fb00 fb0b 	mul.w	fp, r0, fp
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80140c4:	f640 5023 	movw	r0, #3363	; 0xd23
 80140c8:	4341      	muls	r1, r0
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80140ca:	9802      	ldr	r0, [sp, #8]
    tmp2  += z2;
 80140cc:	445c      	add	r4, fp
    tmp3  += z2;
 80140ce:	44de      	add	lr, fp
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80140d0:	4428      	add	r0, r5
    tmp10 += z2;
 80140d2:	448c      	add	ip, r1
    tmp11 += z2;
 80140d4:	4451      	add	r1, sl
    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80140d6:	12c0      	asrs	r0, r0, #11
 80140d8:	f843 0c04 	str.w	r0, [r3, #-4]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 80140dc:	9802      	ldr	r0, [sp, #8]
 80140de:	1b47      	subs	r7, r0, r5
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 80140e0:	9804      	ldr	r0, [sp, #16]
 80140e2:	4430      	add	r0, r6
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 80140e4:	12ff      	asrs	r7, r7, #11
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 80140e6:	12c0      	asrs	r0, r0, #11
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 80140e8:	f8c3 71dc 	str.w	r7, [r3, #476]	; 0x1dc
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 80140ec:	61d8      	str	r0, [r3, #28]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 80140ee:	9804      	ldr	r0, [sp, #16]
 80140f0:	1b86      	subs	r6, r0, r6
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 80140f2:	9806      	ldr	r0, [sp, #24]
 80140f4:	4420      	add	r0, r4
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 80140f6:	12f6      	asrs	r6, r6, #11
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 80140f8:	12c0      	asrs	r0, r0, #11
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 80140fa:	f8c3 61bc 	str.w	r6, [r3, #444]	; 0x1bc
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 80140fe:	63d8      	str	r0, [r3, #60]	; 0x3c
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8014100:	9806      	ldr	r0, [sp, #24]
 8014102:	1b04      	subs	r4, r0, r4
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8014104:	9808      	ldr	r0, [sp, #32]
 8014106:	4470      	add	r0, lr
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8014108:	12e4      	asrs	r4, r4, #11
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 801410a:	12c0      	asrs	r0, r0, #11
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 801410c:	f8c3 419c 	str.w	r4, [r3, #412]	; 0x19c
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 8014110:	65d8      	str	r0, [r3, #92]	; 0x5c
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 8014112:	9808      	ldr	r0, [sp, #32]
 8014114:	eba0 0e0e 	sub.w	lr, r0, lr
 8014118:	ea4f 20ee 	mov.w	r0, lr, asr #11
 801411c:	f8c3 017c 	str.w	r0, [r3, #380]	; 0x17c
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 8014120:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014122:	4460      	add	r0, ip
 8014124:	12c0      	asrs	r0, r0, #11
 8014126:	67d8      	str	r0, [r3, #124]	; 0x7c
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8014128:	9809      	ldr	r0, [sp, #36]	; 0x24
 801412a:	eba0 0c0c 	sub.w	ip, r0, ip
 801412e:	ea4f 20ec 	mov.w	r0, ip, asr #11
 8014132:	f8c3 015c 	str.w	r0, [r3, #348]	; 0x15c
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8014136:	9807      	ldr	r0, [sp, #28]
 8014138:	4408      	add	r0, r1
 801413a:	12c0      	asrs	r0, r0, #11
 801413c:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8014140:	9807      	ldr	r0, [sp, #28]
 8014142:	1a41      	subs	r1, r0, r1
 8014144:	12c9      	asrs	r1, r1, #11
 8014146:	f8c3 113c 	str.w	r1, [r3, #316]	; 0x13c
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 801414a:	9905      	ldr	r1, [sp, #20]
 801414c:	4411      	add	r1, r2
 801414e:	12c9      	asrs	r1, r1, #11
 8014150:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8014154:	9905      	ldr	r1, [sp, #20]
 8014156:	1a8a      	subs	r2, r1, r2
 8014158:	12d2      	asrs	r2, r2, #11
 801415a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 801415e:	9a03      	ldr	r2, [sp, #12]
 8014160:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014162:	440a      	add	r2, r1
 8014164:	12d2      	asrs	r2, r2, #11
 8014166:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 801416a:	9a03      	ldr	r2, [sp, #12]
 801416c:	1a54      	subs	r4, r2, r1
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801416e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014170:	9900      	ldr	r1, [sp, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8014172:	12e4      	asrs	r4, r4, #11
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014174:	428a      	cmp	r2, r1
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8014176:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801417a:	f47f aed1 	bne.w	8013f20 <jpeg_idct_8x16+0x24>
 801417e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8014180:	aa0e      	add	r2, sp, #56	; 0x38
 8014182:	f1a3 0904 	sub.w	r9, r3, #4
 8014186:	333c      	adds	r3, #60	; 0x3c
 8014188:	9304      	str	r3, [sp, #16]
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
    z3 = (INT32) wsptr[6];
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801418a:	f241 1351 	movw	r3, #4433	; 0x1151
 801418e:	9305      	str	r3, [sp, #20]
    outptr = output_buf[ctr] + output_col;
 8014190:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8014194:	3220      	adds	r2, #32
    outptr = output_buf[ctr] + output_col;
 8014196:	9998      	ldr	r1, [sp, #608]	; 0x260
    z2 = (INT32) wsptr[2];
 8014198:	f852 5c18 	ldr.w	r5, [r2, #-24]
    outptr = output_buf[ctr] + output_col;
 801419c:	185c      	adds	r4, r3, r1
    z3 = (INT32) wsptr[6];
 801419e:	f852 1c08 	ldr.w	r1, [r2, #-8]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80141a2:	9805      	ldr	r0, [sp, #20]
    outptr = output_buf[ctr] + output_col;
 80141a4:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80141a6:	186b      	adds	r3, r5, r1
    z3 = (INT32) wsptr[4];
 80141a8:	f852 6c10 	ldr.w	r6, [r2, #-16]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80141ac:	4343      	muls	r3, r0
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80141ae:	f641 007e 	movw	r0, #6270	; 0x187e
    tmp1 = (INT32) wsptr[5];
 80141b2:	f852 8c0c 	ldr.w	r8, [r2, #-12]
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80141b6:	fb00 3505 	mla	r5, r0, r5, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80141ba:	4840      	ldr	r0, [pc, #256]	; (80142bc <jpeg_idct_8x16+0x3c0>)
    tmp2 = (INT32) wsptr[3];
 80141bc:	f852 ec14 	ldr.w	lr, [r2, #-20]
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 80141c0:	fb00 3301 	mla	r3, r0, r1, r3
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80141c4:	f852 1c20 	ldr.w	r1, [r2, #-32]
    tmp3 = (INT32) wsptr[1];
 80141c8:	f852 ac1c 	ldr.w	sl, [r2, #-28]
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80141cc:	3110      	adds	r1, #16
    z3 = tmp1 + tmp3;
 80141ce:	eb08 0c0a 	add.w	ip, r8, sl
    tmp0 = (z2 + z3) << CONST_BITS;
 80141d2:	1988      	adds	r0, r1, r6
    tmp1 = (z2 - z3) << CONST_BITS;
 80141d4:	1b89      	subs	r1, r1, r6
    tmp10 = tmp0 + tmp2;
 80141d6:	eb05 3740 	add.w	r7, r5, r0, lsl #13
    tmp13 = tmp0 - tmp2;
 80141da:	ebc5 3040 	rsb	r0, r5, r0, lsl #13
    tmp0 = (INT32) wsptr[7];
 80141de:	f852 5c04 	ldr.w	r5, [r2, #-4]
    tmp11 = tmp1 + tmp3;
 80141e2:	eb03 3641 	add.w	r6, r3, r1, lsl #13
    tmp13 = tmp0 - tmp2;
 80141e6:	9000      	str	r0, [sp, #0]
    tmp12 = tmp1 - tmp3;
 80141e8:	ebc3 3341 	rsb	r3, r3, r1, lsl #13
    z2 = tmp0 + tmp2;
 80141ec:	eb05 000e 	add.w	r0, r5, lr
    tmp12 = tmp1 - tmp3;
 80141f0:	9302      	str	r3, [sp, #8]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80141f2:	f242 53a1 	movw	r3, #9633	; 0x25a1
 80141f6:	eb00 010c 	add.w	r1, r0, ip
 80141fa:	4359      	muls	r1, r3
    z2 += z1;
 80141fc:	4b30      	ldr	r3, [pc, #192]	; (80142c0 <jpeg_idct_8x16+0x3c4>)
 80141fe:	fb03 1000 	mla	r0, r3, r0, r1
    z3 += z1;
 8014202:	4b30      	ldr	r3, [pc, #192]	; (80142c4 <jpeg_idct_8x16+0x3c8>)
 8014204:	fb03 110c 	mla	r1, r3, ip, r1
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8014208:	eb05 0c0a 	add.w	ip, r5, sl
 801420c:	4b2e      	ldr	r3, [pc, #184]	; (80142c8 <jpeg_idct_8x16+0x3cc>)
 801420e:	fb03 fc0c 	mul.w	ip, r3, ip
    tmp0 += z1 + z2;
 8014212:	f640 138e 	movw	r3, #2446	; 0x98e
 8014216:	eb00 0b0c 	add.w	fp, r0, ip
    tmp3 += z1 + z3;
 801421a:	448c      	add	ip, r1
    tmp0 += z1 + z2;
 801421c:	fb03 b505 	mla	r5, r3, r5, fp
    tmp3 += z1 + z3;
 8014220:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014224:	4b29      	ldr	r3, [pc, #164]	; (80142cc <jpeg_idct_8x16+0x3d0>)
    tmp3 += z1 + z3;
 8014226:	fb0b cc0a 	mla	ip, fp, sl, ip
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801422a:	eb08 0a0e 	add.w	sl, r8, lr
    tmp1 += z1 + z3;
 801422e:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014232:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8014236:	9b01      	ldr	r3, [sp, #4]
    tmp1 += z1 + z3;
 8014238:	4451      	add	r1, sl
    tmp2 += z1 + z2;
 801423a:	4450      	add	r0, sl
 801423c:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8014240:	fb0b 1108 	mla	r1, fp, r8, r1
    tmp2 += z1 + z2;
 8014244:	fb0a 000e 	mla	r0, sl, lr, r0
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8014248:	eb07 0e0c 	add.w	lr, r7, ip
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 801424c:	eba7 0c0c 	sub.w	ip, r7, ip
			    & RANGE_MASK];
 8014250:	f3ce 4e89 	ubfx	lr, lr, #18, #10
			    & RANGE_MASK];
 8014254:	f3cc 4c89 	ubfx	ip, ip, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8014258:	f813 e00e 	ldrb.w	lr, [r3, lr]
 801425c:	9b03      	ldr	r3, [sp, #12]
 801425e:	4698      	mov	r8, r3
 8014260:	9b98      	ldr	r3, [sp, #608]	; 0x260
 8014262:	f808 e003 	strb.w	lr, [r8, r3]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8014266:	9b01      	ldr	r3, [sp, #4]
 8014268:	f813 700c 	ldrb.w	r7, [r3, ip]
 801426c:	71e7      	strb	r7, [r4, #7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801426e:	1837      	adds	r7, r6, r0
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8014270:	1a30      	subs	r0, r6, r0
			    & RANGE_MASK];
 8014272:	f3c7 4789 	ubfx	r7, r7, #18, #10
			    & RANGE_MASK];
 8014276:	f3c0 4a89 	ubfx	sl, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 801427a:	5ddf      	ldrb	r7, [r3, r7]
 801427c:	7067      	strb	r7, [r4, #1]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 801427e:	f813 000a 	ldrb.w	r0, [r3, sl]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8014282:	9b02      	ldr	r3, [sp, #8]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8014284:	71a0      	strb	r0, [r4, #6]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8014286:	1858      	adds	r0, r3, r1
 8014288:	9b01      	ldr	r3, [sp, #4]
			    & RANGE_MASK];
 801428a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 801428e:	5c18      	ldrb	r0, [r3, r0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8014290:	9b02      	ldr	r3, [sp, #8]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8014292:	70a0      	strb	r0, [r4, #2]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8014294:	1a59      	subs	r1, r3, r1
 8014296:	9b01      	ldr	r3, [sp, #4]
 8014298:	e01a      	b.n	80142d0 <jpeg_idct_8x16+0x3d4>
 801429a:	bf00      	nop
 801429c:	ffffecc2 	.word	0xffffecc2
 80142a0:	ffffefb0 	.word	0xffffefb0
 80142a4:	ffffb6d6 	.word	0xffffb6d6
 80142a8:	ffffc542 	.word	0xffffc542
 80142ac:	ffffe77a 	.word	0xffffe77a
 80142b0:	ffffdbfa 	.word	0xffffdbfa
 80142b4:	ffffeaab 	.word	0xffffeaab
 80142b8:	ffffd817 	.word	0xffffd817
 80142bc:	ffffc4df 	.word	0xffffc4df
 80142c0:	ffffc13b 	.word	0xffffc13b
 80142c4:	fffff384 	.word	0xfffff384
 80142c8:	ffffe333 	.word	0xffffe333
 80142cc:	ffffadfd 	.word	0xffffadfd
			    & RANGE_MASK];
 80142d0:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80142d4:	5c5b      	ldrb	r3, [r3, r1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80142d6:	9901      	ldr	r1, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 80142d8:	7163      	strb	r3, [r4, #5]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80142da:	9b00      	ldr	r3, [sp, #0]
 80142dc:	442b      	add	r3, r5
			    & RANGE_MASK];
 80142de:	f3c3 4389 	ubfx	r3, r3, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80142e2:	5ccb      	ldrb	r3, [r1, r3]
 80142e4:	70e3      	strb	r3, [r4, #3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 80142e6:	9b00      	ldr	r3, [sp, #0]
 80142e8:	1b5d      	subs	r5, r3, r5
			    & RANGE_MASK];
 80142ea:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 80142ee:	5d4b      	ldrb	r3, [r1, r5]
 80142f0:	7123      	strb	r3, [r4, #4]
  for (ctr = 0; ctr < 16; ctr++) {
 80142f2:	9b04      	ldr	r3, [sp, #16]
 80142f4:	454b      	cmp	r3, r9
 80142f6:	f47f af4b 	bne.w	8014190 <jpeg_idct_8x16+0x294>
  }
}
 80142fa:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80142fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014302:	bf00      	nop

08014304 <jpeg_idct_7x14>:

GLOBAL(void)
jpeg_idct_7x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014308:	b0ef      	sub	sp, #444	; 0x1bc
 801430a:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 801430c:	f1a2 0b02 	sub.w	fp, r2, #2
 8014310:	9309      	str	r3, [sp, #36]	; 0x24
 8014312:	3c04      	subs	r4, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014314:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8014318:	3380      	adds	r3, #128	; 0x80
 801431a:	9300      	str	r3, [sp, #0]
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 801431c:	f102 030c 	add.w	r3, r2, #12
 8014320:	930b      	str	r3, [sp, #44]	; 0x2c
  wsptr = workspace;
 8014322:	ab0c      	add	r3, sp, #48	; 0x30
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014324:	f93b 2f02 	ldrsh.w	r2, [fp, #2]!
			CONST_BITS-PASS1_BITS);

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8014328:	f242 3862 	movw	r8, #9058	; 0x2362
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801432c:	f854 6f04 	ldr.w	r6, [r4, #4]!
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
    tmp13 = z4 << CONST_BITS;

    tmp14 = z1 + z3;
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8014330:	f642 29b7 	movw	r9, #10935	; 0x2ab7
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014334:	f9bb 0040 	ldrsh.w	r0, [fp, #64]	; 0x40
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8014338:	3304      	adds	r3, #4
    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801433a:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801433c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8014340:	4350      	muls	r0, r2
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8014342:	f642 02c6 	movw	r2, #10438	; 0x28c6
    z1 <<= CONST_BITS;
 8014346:	0376      	lsls	r6, r6, #13
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8014348:	fb02 f700 	mul.w	r7, r2, r0
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 801434c:	f640 2212 	movw	r2, #2578	; 0xa12
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014350:	f506 6680 	add.w	r6, r6, #1024	; 0x400
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8014354:	fb02 fc00 	mul.w	ip, r2, r0
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8014358:	f641 4237 	movw	r2, #7223	; 0x1c37
    tmp10 = z1 + z2;
 801435c:	19f5      	adds	r5, r6, r7
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 801435e:	4350      	muls	r0, r2
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8014360:	4467      	add	r7, ip
    tmp11 = z1 + z3;
 8014362:	eb06 010c 	add.w	r1, r6, ip
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8014366:	1a3f      	subs	r7, r7, r0
    tmp12 = z1 - z4;
 8014368:	1a32      	subs	r2, r6, r0
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 801436a:	eba6 0047 	sub.w	r0, r6, r7, lsl #1
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801436e:	f9bb 7020 	ldrsh.w	r7, [fp, #32]
    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8014372:	900a      	str	r0, [sp, #40]	; 0x28
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014374:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8014376:	fb00 fc07 	mul.w	ip, r0, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801437a:	f9bb 7060 	ldrsh.w	r7, [fp, #96]	; 0x60
 801437e:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8014382:	4378      	muls	r0, r7
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8014384:	4fb3      	ldr	r7, [pc, #716]	; (8014654 <jpeg_idct_7x14+0x350>)
    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8014386:	eb0c 0600 	add.w	r6, ip, r0
 801438a:	fb08 f806 	mul.w	r8, r8, r6
    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 801438e:	f640 06bd 	movw	r6, #2237	; 0x8bd
 8014392:	fb06 860c 	mla	r6, r6, ip, r8
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8014396:	fb07 8800 	mla	r8, r7, r0, r8
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 801439a:	f607 27e5 	addw	r7, r7, #2789	; 0xae5
 801439e:	4378      	muls	r0, r7
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80143a0:	f241 37a3 	movw	r7, #5027	; 0x13a3
 80143a4:	fb07 070c 	mla	r7, r7, ip, r0
    tmp26 = tmp10 - tmp13;
 80143a8:	1ba8      	subs	r0, r5, r6
    tmp20 = tmp10 + tmp13;
 80143aa:	eb05 0c06 	add.w	ip, r5, r6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80143ae:	6a25      	ldr	r5, [r4, #32]
    tmp26 = tmp10 - tmp13;
 80143b0:	9001      	str	r0, [sp, #4]
    tmp21 = tmp11 + tmp14;
 80143b2:	eb01 0008 	add.w	r0, r1, r8
    tmp25 = tmp11 - tmp14;
 80143b6:	eba1 0108 	sub.w	r1, r1, r8
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80143ba:	f8d4 60a0 	ldr.w	r6, [r4, #160]	; 0xa0
    tmp21 = tmp11 + tmp14;
 80143be:	9002      	str	r0, [sp, #8]
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
    z1    -= z2;
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 80143c0:	f640 68f2 	movw	r8, #3826	; 0xef2
    tmp25 = tmp11 - tmp14;
 80143c4:	9103      	str	r1, [sp, #12]
    tmp22 = tmp12 + tmp15;
 80143c6:	19d1      	adds	r1, r2, r7
    tmp24 = tmp12 - tmp15;
 80143c8:	1bd2      	subs	r2, r2, r7
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80143ca:	f9bb 0070 	ldrsh.w	r0, [fp, #112]	; 0x70
    tmp22 = tmp12 + tmp15;
 80143ce:	9104      	str	r1, [sp, #16]
    tmp24 = tmp12 - tmp15;
 80143d0:	9205      	str	r2, [sp, #20]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80143d2:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80143d6:	6e21      	ldr	r1, [r4, #96]	; 0x60
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80143d8:	4355      	muls	r5, r2
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80143da:	f9bb 2030 	ldrsh.w	r2, [fp, #48]	; 0x30
 80143de:	4351      	muls	r1, r2
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80143e0:	f9bb 2050 	ldrsh.w	r2, [fp, #80]	; 0x50
 80143e4:	4356      	muls	r6, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80143e6:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
 80143ea:	4342      	muls	r2, r0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80143ec:	1868      	adds	r0, r5, r1
    tmp14 = z1 + z3;
 80143ee:	19af      	adds	r7, r5, r6
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 80143f0:	fb09 f900 	mul.w	r9, r9, r0
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 80143f4:	f242 6052 	movw	r0, #9810	; 0x2652
 80143f8:	fb00 fa07 	mul.w	sl, r0, r7
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 80143fc:	4896      	ldr	r0, [pc, #600]	; (8014658 <jpeg_idct_7x14+0x354>)
 80143fe:	eb09 0e0a 	add.w	lr, r9, sl
 8014402:	eb0e 3e42 	add.w	lr, lr, r2, lsl #13
 8014406:	fb00 ee05 	mla	lr, r0, r5, lr
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 801440a:	f641 0014 	movw	r0, #6164	; 0x1814
 801440e:	4378      	muls	r0, r7
 8014410:	9006      	str	r0, [sp, #24]
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8014412:	9f06      	ldr	r7, [sp, #24]
 8014414:	4891      	ldr	r0, [pc, #580]	; (801465c <jpeg_idct_7x14+0x358>)
 8014416:	fb00 7005 	mla	r0, r0, r5, r7
    z1    -= z2;
 801441a:	1a6d      	subs	r5, r5, r1
    tmp16 += tmp15;
    z1    += z4;
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 801441c:	198f      	adds	r7, r1, r6
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 801441e:	fb08 f805 	mul.w	r8, r8, r5
 8014422:	eba8 3842 	sub.w	r8, r8, r2, lsl #13
    tmp16 += tmp15;
 8014426:	4440      	add	r0, r8
 8014428:	9007      	str	r0, [sp, #28]
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 801442a:	f46f 60a2 	mvn.w	r0, #1296	; 0x510
 801442e:	4378      	muls	r0, r7
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8014430:	4f8b      	ldr	r7, [pc, #556]	; (8014660 <jpeg_idct_7x14+0x35c>)
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8014432:	eba0 3042 	sub.w	r0, r0, r2, lsl #13
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8014436:	fb07 0701 	mla	r7, r7, r1, r0
 801443a:	44b9      	add	r9, r7
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 801443c:	4f89      	ldr	r7, [pc, #548]	; (8014664 <jpeg_idct_7x14+0x360>)
 801443e:	fb07 0006 	mla	r0, r7, r6, r0
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8014442:	1a77      	subs	r7, r6, r1
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8014444:	4450      	add	r0, sl
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8014446:	f642 4af8 	movw	sl, #11512	; 0x2cf8
 801444a:	fb0a fa07 	mul.w	sl, sl, r7
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 801444e:	9008      	str	r0, [sp, #32]
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8014450:	eb0a 3742 	add.w	r7, sl, r2, lsl #13
 8014454:	4884      	ldr	r0, [pc, #528]	; (8014668 <jpeg_idct_7x14+0x364>)
    z1    += z4;
 8014456:	442a      	add	r2, r5
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8014458:	fb00 7706 	mla	r7, r0, r6, r7
 801445c:	9806      	ldr	r0, [sp, #24]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */

    tmp13 = (z1 - z3) << PASS1_BITS;
 801445e:	1b96      	subs	r6, r2, r6

    /* Final output stage */

    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014460:	eb0c 020e 	add.w	r2, ip, lr
    wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014464:	ebac 0c0e 	sub.w	ip, ip, lr
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8014468:	4407      	add	r7, r0
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801446a:	12d2      	asrs	r2, r2, #11
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801446c:	f241 5099 	movw	r0, #5529	; 0x1599
    tmp13 = (z1 - z3) << PASS1_BITS;
 8014470:	00b6      	lsls	r6, r6, #2
    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014472:	f843 2c04 	str.w	r2, [r3, #-4]
    wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014476:	ea4f 22ec 	mov.w	r2, ip, asr #11
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801447a:	fb00 a101 	mla	r1, r0, r1, sl
    wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801447e:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    wsptr[7*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014482:	9a02      	ldr	r2, [sp, #8]
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8014484:	4441      	add	r1, r8
    wsptr[7*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014486:	444a      	add	r2, r9
 8014488:	12d2      	asrs	r2, r2, #11
 801448a:	619a      	str	r2, [r3, #24]
    wsptr[7*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801448c:	9a02      	ldr	r2, [sp, #8]
 801448e:	eba2 0909 	sub.w	r9, r2, r9
 8014492:	ea4f 22e9 	mov.w	r2, r9, asr #11
 8014496:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    wsptr[7*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801449a:	9808      	ldr	r0, [sp, #32]
 801449c:	9a04      	ldr	r2, [sp, #16]
 801449e:	4402      	add	r2, r0
 80144a0:	12d2      	asrs	r2, r2, #11
 80144a2:	635a      	str	r2, [r3, #52]	; 0x34
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80144a4:	9a04      	ldr	r2, [sp, #16]
 80144a6:	1a10      	subs	r0, r2, r0
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 80144a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80144aa:	eb06 22e2 	add.w	r2, r6, r2, asr #11
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80144ae:	12c0      	asrs	r0, r0, #11
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 80144b0:	651a      	str	r2, [r3, #80]	; 0x50
    wsptr[7*10] = (int) (tmp23 - tmp13);
 80144b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80144b4:	f8c3 0130 	str.w	r0, [r3, #304]	; 0x130
    wsptr[7*10] = (int) (tmp23 - tmp13);
 80144b8:	ebc6 26e2 	rsb	r6, r6, r2, asr #11
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80144bc:	9a05      	ldr	r2, [sp, #20]
 80144be:	443a      	add	r2, r7
    wsptr[7*10] = (int) (tmp23 - tmp13);
 80144c0:	f8c3 6114 	str.w	r6, [r3, #276]	; 0x114
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80144c4:	12d2      	asrs	r2, r2, #11
 80144c6:	66da      	str	r2, [r3, #108]	; 0x6c
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80144c8:	9a05      	ldr	r2, [sp, #20]
 80144ca:	1bd7      	subs	r7, r2, r7
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80144cc:	9a03      	ldr	r2, [sp, #12]
 80144ce:	440a      	add	r2, r1
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80144d0:	12ff      	asrs	r7, r7, #11
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80144d2:	12d2      	asrs	r2, r2, #11
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80144d4:	f8c3 70f8 	str.w	r7, [r3, #248]	; 0xf8
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80144d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80144dc:	9a03      	ldr	r2, [sp, #12]
 80144de:	1a51      	subs	r1, r2, r1
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80144e0:	9a01      	ldr	r2, [sp, #4]
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80144e2:	12c9      	asrs	r1, r1, #11
 80144e4:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 80144e8:	9907      	ldr	r1, [sp, #28]
 80144ea:	440a      	add	r2, r1
 80144ec:	12d2      	asrs	r2, r2, #11
 80144ee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    wsptr[7*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 80144f2:	9a01      	ldr	r2, [sp, #4]
 80144f4:	1a52      	subs	r2, r2, r1
 80144f6:	12d2      	asrs	r2, r2, #11
 80144f8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 80144fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80144fe:	455a      	cmp	r2, fp
 8014500:	f47f af10 	bne.w	8014324 <jpeg_idct_7x14+0x20>
 8014504:	9b09      	ldr	r3, [sp, #36]	; 0x24
  }

  /* Pass 2: process 14 rows from work array, store into output array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  wsptr = workspace;
 8014506:	a80c      	add	r0, sp, #48	; 0x30
 8014508:	f1a3 0904 	sub.w	r9, r3, #4
 801450c:	3334      	adds	r3, #52	; 0x34
 801450e:	9303      	str	r3, [sp, #12]

    z1 = (INT32) wsptr[2];
    z2 = (INT32) wsptr[4];
    z3 = (INT32) wsptr[6];

    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8014510:	f641 4337 	movw	r3, #7223	; 0x1c37
 8014514:	9304      	str	r3, [sp, #16]
    outptr = output_buf[ctr] + output_col;
 8014516:	f859 3f04 	ldr.w	r3, [r9, #4]!
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 7;		/* advance pointer to next row */
 801451a:	301c      	adds	r0, #28
    outptr = output_buf[ctr] + output_col;
 801451c:	9a78      	ldr	r2, [sp, #480]	; 0x1e0
    z3 = (INT32) wsptr[6];
 801451e:	f850 5c04 	ldr.w	r5, [r0, #-4]
    outptr = output_buf[ctr] + output_col;
 8014522:	189e      	adds	r6, r3, r2
 8014524:	9302      	str	r3, [sp, #8]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8014526:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    z1 = (INT32) wsptr[2];
 801452a:	f850 4c14 	ldr.w	r4, [r0, #-20]
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 801452e:	1b5a      	subs	r2, r3, r5
 8014530:	9b04      	ldr	r3, [sp, #16]
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014532:	f850 7c1c 	ldr.w	r7, [r0, #-28]
    tmp10 = z1 + z3;
 8014536:	eb04 0805 	add.w	r8, r4, r5
    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 801453a:	fb03 fe02 	mul.w	lr, r3, r2
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 801453e:	f850 3c0c 	ldr.w	r3, [r0, #-12]
 8014542:	f640 2212 	movw	r2, #2578	; 0xa12
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014546:	3710      	adds	r7, #16
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8014548:	1ae3      	subs	r3, r4, r3
    z2 = (INT32) wsptr[3];
 801454a:	f850 ac10 	ldr.w	sl, [r0, #-16]
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 801454e:	fb02 fc03 	mul.w	ip, r2, r3
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8014552:	f850 3c0c 	ldr.w	r3, [r0, #-12]
 8014556:	eb0e 010c 	add.w	r1, lr, ip
 801455a:	461a      	mov	r2, r3
 801455c:	4b43      	ldr	r3, [pc, #268]	; (801466c <jpeg_idct_7x14+0x368>)
 801455e:	eb01 3147 	add.w	r1, r1, r7, lsl #13
 8014562:	fb03 1102 	mla	r1, r3, r2, r1
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8014566:	f642 03c6 	movw	r3, #10438	; 0x28c6
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 801456a:	f46f 721f 	mvn.w	r2, #636	; 0x27c
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 801456e:	fb03 f308 	mul.w	r3, r3, r8
 8014572:	eb03 3347 	add.w	r3, r3, r7, lsl #13
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8014576:	fb02 3205 	mla	r2, r2, r5, r3
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 801457a:	4d3d      	ldr	r5, [pc, #244]	; (8014670 <jpeg_idct_7x14+0x36c>)
 801457c:	fb05 3304 	mla	r3, r5, r4, r3
    z3 = (INT32) wsptr[5];
 8014580:	f850 5c08 	ldr.w	r5, [r0, #-8]
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 8014584:	4472      	add	r2, lr
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 8014586:	4463      	add	r3, ip
    z1 = (INT32) wsptr[1];
 8014588:	f850 cc18 	ldr.w	ip, [r0, #-24]
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 801458c:	9301      	str	r3, [sp, #4]
    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 801458e:	eb0c 040a 	add.w	r4, ip, sl
 8014592:	f641 53ef 	movw	r3, #7663	; 0x1def
 8014596:	fb03 fb04 	mul.w	fp, r3, r4
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 801459a:	ebac 040a 	sub.w	r4, ip, sl
 801459e:	f240 5373 	movw	r3, #1395	; 0x573
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80145a2:	44ac      	add	ip, r5
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80145a4:	44aa      	add	sl, r5
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 80145a6:	435c      	muls	r4, r3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80145a8:	4b32      	ldr	r3, [pc, #200]	; (8014674 <jpeg_idct_7x14+0x370>)
    tmp10 = tmp11 - tmp12;
 80145aa:	ebab 0e04 	sub.w	lr, fp, r4
    tmp11 += tmp12;
 80145ae:	445c      	add	r4, fp
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80145b0:	f241 3ba3 	movw	fp, #5027	; 0x13a3
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 80145b4:	fb03 fa0a 	mul.w	sl, r3, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80145b8:	9b00      	ldr	r3, [sp, #0]
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 80145ba:	fb0b fc0c 	mul.w	ip, fp, ip
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80145be:	f643 3bde 	movw	fp, #15326	; 0x3bde
    tmp11 += tmp12;
 80145c2:	4454      	add	r4, sl
    tmp10 += z2;
 80145c4:	44e6      	add	lr, ip
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80145c6:	fb0b cc05 	mla	ip, fp, r5, ip
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80145ca:	eb02 050e 	add.w	r5, r2, lr
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80145ce:	44e2      	add	sl, ip
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80145d0:	eba2 0e0e 	sub.w	lr, r2, lr
			    & RANGE_MASK];
 80145d4:	f3c5 4589 	ubfx	r5, r5, #18, #10
			    & RANGE_MASK];
 80145d8:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80145dc:	5d5d      	ldrb	r5, [r3, r5]
 80145de:	9b02      	ldr	r3, [sp, #8]
 80145e0:	469c      	mov	ip, r3
 80145e2:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
 80145e4:	f80c 5003 	strb.w	r5, [ip, r3]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80145e8:	9b00      	ldr	r3, [sp, #0]
 80145ea:	f813 200e 	ldrb.w	r2, [r3, lr]
 80145ee:	71b2      	strb	r2, [r6, #6]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80145f0:	190a      	adds	r2, r1, r4
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80145f2:	1b09      	subs	r1, r1, r4
			    & RANGE_MASK];
 80145f4:	f3c2 4289 	ubfx	r2, r2, #18, #10
			    & RANGE_MASK];
 80145f8:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80145fc:	5c9a      	ldrb	r2, [r3, r2]
 80145fe:	7072      	strb	r2, [r6, #1]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014600:	5c5a      	ldrb	r2, [r3, r1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014602:	9b01      	ldr	r3, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8014604:	7172      	strb	r2, [r6, #5]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014606:	eb03 020a 	add.w	r2, r3, sl
 801460a:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 801460c:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014610:	5c9a      	ldrb	r2, [r3, r2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014612:	9b01      	ldr	r3, [sp, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014614:	70b2      	strb	r2, [r6, #2]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014616:	eba3 0a0a 	sub.w	sl, r3, sl
 801461a:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 801461c:	f3ca 4a89 	ubfx	sl, sl, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014620:	f813 300a 	ldrb.w	r3, [r3, sl]
 8014624:	7133      	strb	r3, [r6, #4]
    z2 -= tmp10;
 8014626:	f850 3c0c 	ldr.w	r3, [r0, #-12]
 801462a:	eba3 0808 	sub.w	r8, r3, r8
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 801462e:	f642 5341 	movw	r3, #11585	; 0x2d41
 8014632:	fb03 f808 	mul.w	r8, r3, r8
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 8014636:	9b00      	ldr	r3, [sp, #0]
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 8014638:	eb08 3847 	add.w	r8, r8, r7, lsl #13
			    & RANGE_MASK];
 801463c:	f3c8 4889 	ubfx	r8, r8, #18, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 8014640:	f813 3008 	ldrb.w	r3, [r3, r8]
 8014644:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 14; ctr++) {
 8014646:	9b03      	ldr	r3, [sp, #12]
 8014648:	454b      	cmp	r3, r9
 801464a:	f47f af64 	bne.w	8014516 <jpeg_idct_7x14+0x212>
  }
}
 801464e:	b06f      	add	sp, #444	; 0x1bc
 8014650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014654:	ffffc8fc 	.word	0xffffc8fc
 8014658:	ffffdbf0 	.word	0xffffdbf0
 801465c:	ffffde0b 	.word	0xffffde0b
 8014660:	fffff26e 	.word	0xfffff26e
 8014664:	ffffb409 	.word	0xffffb409
 8014668:	ffffc9e6 	.word	0xffffc9e6
 801466c:	ffffc515 	.word	0xffffc515
 8014670:	ffffb0f1 	.word	0xffffb0f1
 8014674:	ffffd3e1 	.word	0xffffd3e1

08014678 <jpeg_idct_6x12>:

GLOBAL(void)
jpeg_idct_6x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801467c:	b0d3      	sub	sp, #332	; 0x14c
 801467e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8014680:	f1a2 0a02 	sub.w	sl, r2, #2
 8014684:	9308      	str	r3, [sp, #32]
 8014686:	3904      	subs	r1, #4
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014688:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 801468c:	3380      	adds	r3, #128	; 0x80
 801468e:	9300      	str	r3, [sp, #0]
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014690:	f102 030a 	add.w	r3, r2, #10
 8014694:	9309      	str	r3, [sp, #36]	; 0x24
  wsptr = workspace;
 8014696:	ab0a      	add	r3, sp, #40	; 0x28
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014698:	f93a ef02 	ldrsh.w	lr, [sl, #2]!

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */

    tmp10 = z1 + z3;
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801469c:	f641 398d 	movw	r9, #7053	; 0x1b8d
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80146a0:	f851 2f04 	ldr.w	r2, [r1, #4]!
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80146a4:	f640 0bf7 	movw	fp, #2295	; 0x8f7
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80146a8:	f9ba 4060 	ldrsh.w	r4, [sl, #96]	; 0x60
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 80146ac:	3304      	adds	r3, #4
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80146ae:	fb02 fe0e 	mul.w	lr, r2, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80146b2:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
 80146b6:	f9ba 2040 	ldrsh.w	r2, [sl, #64]	; 0x40
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80146ba:	f9ba c020 	ldrsh.w	ip, [sl, #32]
    z3 <<= CONST_BITS;
 80146be:	ea4f 3e4e 	mov.w	lr, lr, lsl #13
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80146c2:	4355      	muls	r5, r2
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80146c4:	f242 7231 	movw	r2, #10033	; 0x2731
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80146c8:	f8d1 60c0 	ldr.w	r6, [r1, #192]	; 0xc0
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 80146cc:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 80146d0:	4355      	muls	r5, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80146d2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80146d4:	4366      	muls	r6, r4
    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80146d6:	fb02 fc0c 	mul.w	ip, r2, ip
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80146da:	f642 32b6 	movw	r2, #11190	; 0x2bb6
    z2 <<= CONST_BITS;
 80146de:	0376      	lsls	r6, r6, #13
    tmp10 = z3 + z4;
 80146e0:	eb0e 0005 	add.w	r0, lr, r5
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 80146e4:	fb02 f20c 	mul.w	r2, r2, ip
    tmp11 = z3 - z4;
 80146e8:	ebae 0505 	sub.w	r5, lr, r5
    tmp12 = z1 - z2;
 80146ec:	ebc6 344c 	rsb	r4, r6, ip, lsl #13
    tmp12 = z4 + z2;
 80146f0:	eb02 0806 	add.w	r8, r2, r6
    tmp12 = z4 - z1 - z2;
 80146f4:	eba2 324c 	sub.w	r2, r2, ip, lsl #13
    tmp21 = z3 + tmp12;
 80146f8:	eb0e 0704 	add.w	r7, lr, r4
    tmp24 = z3 - tmp12;
 80146fc:	ebae 0404 	sub.w	r4, lr, r4
    tmp12 = z4 - z1 - z2;
 8014700:	1b96      	subs	r6, r2, r6
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014702:	f9ba c010 	ldrsh.w	ip, [sl, #16]
    tmp24 = z3 - tmp12;
 8014706:	9402      	str	r4, [sp, #8]
    tmp20 = tmp10 + tmp12;
 8014708:	eb00 0408 	add.w	r4, r0, r8
    tmp22 = tmp11 + tmp12;
 801470c:	19aa      	adds	r2, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801470e:	f9ba e030 	ldrsh.w	lr, [sl, #48]	; 0x30
    tmp20 = tmp10 + tmp12;
 8014712:	9403      	str	r4, [sp, #12]
    tmp25 = tmp10 - tmp12;
 8014714:	eba0 0008 	sub.w	r0, r0, r8
    tmp22 = tmp11 + tmp12;
 8014718:	9205      	str	r2, [sp, #20]
    tmp23 = tmp11 - tmp12;
 801471a:	1baa      	subs	r2, r5, r6
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801471c:	6e0c      	ldr	r4, [r1, #96]	; 0x60
    tmp23 = tmp11 - tmp12;
 801471e:	9206      	str	r2, [sp, #24]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014720:	6a0a      	ldr	r2, [r1, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014722:	fb04 fe0e 	mul.w	lr, r4, lr
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014726:	f8d1 40a0 	ldr.w	r4, [r1, #160]	; 0xa0
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801472a:	fb02 fc0c 	mul.w	ip, r2, ip
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801472e:	f9ba 2050 	ldrsh.w	r2, [sl, #80]	; 0x50
    tmp25 = tmp10 - tmp12;
 8014732:	9004      	str	r0, [sp, #16]
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014734:	4354      	muls	r4, r2
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014736:	f9ba 0070 	ldrsh.w	r0, [sl, #112]	; 0x70
 801473a:	f8d1 20e0 	ldr.w	r2, [r1, #224]	; 0xe0
    tmp10 = z1 + z3;
 801473e:	eb0c 0604 	add.w	r6, ip, r4
    tmp21 = z3 + tmp12;
 8014742:	9701      	str	r7, [sp, #4]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014744:	4342      	muls	r2, r0
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8014746:	f642 10cf 	movw	r0, #10703	; 0x29cf
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801474a:	4f76      	ldr	r7, [pc, #472]	; (8014924 <jpeg_idct_6x12+0x2ac>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801474c:	eb02 0806 	add.w	r8, r2, r6
    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8014750:	fb00 f50e 	mul.w	r5, r0, lr
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8014754:	4874      	ldr	r0, [pc, #464]	; (8014928 <jpeg_idct_6x12+0x2b0>)
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 8014756:	fb09 f808 	mul.w	r8, r9, r8
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801475a:	f640 095b 	movw	r9, #2139	; 0x85b
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801475e:	fb00 f00e 	mul.w	r0, r0, lr
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 8014762:	fb09 8906 	mla	r9, r9, r6, r8
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8014766:	eb05 0609 	add.w	r6, r5, r9
 801476a:	fb0b 660c 	mla	r6, fp, ip, r6
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801476e:	eb04 0b02 	add.w	fp, r4, r2
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 8014772:	9607      	str	r6, [sp, #28]
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 8014774:	4e6d      	ldr	r6, [pc, #436]	; (801492c <jpeg_idct_6x12+0x2b4>)
 8014776:	fb06 fb0b 	mul.w	fp, r6, fp
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801477a:	eb00 060b 	add.w	r6, r0, fp
 801477e:	fb07 6604 	mla	r6, r7, r4, r6
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8014782:	4f6b      	ldr	r7, [pc, #428]	; (8014930 <jpeg_idct_6x12+0x2b8>)
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */

    z1 -= z4;
    z2 -= z3;
 8014784:	ebae 0404 	sub.w	r4, lr, r4
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8014788:	f241 1e51 	movw	lr, #4433	; 0x1151
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801478c:	444e      	add	r6, r9
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801478e:	fb07 000c 	mla	r0, r7, ip, r0
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8014792:	eba8 0905 	sub.w	r9, r8, r5
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8014796:	4f67      	ldr	r7, [pc, #412]	; (8014934 <jpeg_idct_6x12+0x2bc>)
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8014798:	f243 25c6 	movw	r5, #12998	; 0x32c6
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801479c:	fb07 0002 	mla	r0, r7, r2, r0
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80147a0:	f207 4753 	addw	r7, r7, #1107	; 0x453
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80147a4:	fb05 9502 	mla	r5, r5, r2, r9
    z1 -= z4;
 80147a8:	ebac 0202 	sub.w	r2, ip, r2
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 80147ac:	4440      	add	r0, r8
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80147ae:	f641 0c7e 	movw	ip, #6270	; 0x187e
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80147b2:	eb02 0804 	add.w	r8, r2, r4
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 80147b6:	445d      	add	r5, fp
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 80147b8:	fb0e f808 	mul.w	r8, lr, r8
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80147bc:	fb07 8e04 	mla	lr, r7, r4, r8

    /* Final output stage */

    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80147c0:	9f03      	ldr	r7, [sp, #12]
 80147c2:	9c07      	ldr	r4, [sp, #28]
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80147c4:	fb0c 8202 	mla	r2, ip, r2, r8
    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80147c8:	443c      	add	r4, r7
 80147ca:	12e4      	asrs	r4, r4, #11
 80147cc:	f843 4c04 	str.w	r4, [r3, #-4]
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80147d0:	9c07      	ldr	r4, [sp, #28]
 80147d2:	1b3f      	subs	r7, r7, r4
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80147d4:	9c01      	ldr	r4, [sp, #4]
 80147d6:	4414      	add	r4, r2
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80147d8:	12ff      	asrs	r7, r7, #11
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80147da:	12e4      	asrs	r4, r4, #11
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80147dc:	f8c3 7104 	str.w	r7, [r3, #260]	; 0x104
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80147e0:	615c      	str	r4, [r3, #20]
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80147e2:	9c01      	ldr	r4, [sp, #4]
 80147e4:	1aa2      	subs	r2, r4, r2
 80147e6:	12d2      	asrs	r2, r2, #11
 80147e8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 80147ec:	9a05      	ldr	r2, [sp, #20]
 80147ee:	4432      	add	r2, r6
 80147f0:	12d2      	asrs	r2, r2, #11
 80147f2:	62da      	str	r2, [r3, #44]	; 0x2c
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80147f4:	9a05      	ldr	r2, [sp, #20]
 80147f6:	1b96      	subs	r6, r2, r6
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80147f8:	9a06      	ldr	r2, [sp, #24]
 80147fa:	442a      	add	r2, r5
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 80147fc:	12f6      	asrs	r6, r6, #11
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 80147fe:	12d2      	asrs	r2, r2, #11
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014800:	f8c3 60d4 	str.w	r6, [r3, #212]	; 0xd4
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8014804:	645a      	str	r2, [r3, #68]	; 0x44
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8014806:	9a06      	ldr	r2, [sp, #24]
 8014808:	1b55      	subs	r5, r2, r5
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801480a:	9a02      	ldr	r2, [sp, #8]
 801480c:	4472      	add	r2, lr
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801480e:	12ed      	asrs	r5, r5, #11
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014810:	12d2      	asrs	r2, r2, #11
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8014812:	f8c3 50bc 	str.w	r5, [r3, #188]	; 0xbc
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014816:	65da      	str	r2, [r3, #92]	; 0x5c
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014818:	9a02      	ldr	r2, [sp, #8]
 801481a:	eba2 040e 	sub.w	r4, r2, lr
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801481e:	9a04      	ldr	r2, [sp, #16]
 8014820:	4402      	add	r2, r0
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014822:	12e4      	asrs	r4, r4, #11
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8014824:	12d2      	asrs	r2, r2, #11
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014826:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801482a:	675a      	str	r2, [r3, #116]	; 0x74
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801482c:	9a04      	ldr	r2, [sp, #16]
 801482e:	1a10      	subs	r0, r2, r0
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014830:	9a09      	ldr	r2, [sp, #36]	; 0x24
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8014832:	12c0      	asrs	r0, r0, #11
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8014834:	4552      	cmp	r2, sl
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8014836:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801483a:	f47f af2d 	bne.w	8014698 <jpeg_idct_6x12+0x20>
 801483e:	9b08      	ldr	r3, [sp, #32]
  }

  /* Pass 2: process 12 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
 8014840:	a90a      	add	r1, sp, #40	; 0x28

    /* Add fudge factor here for final descale. */
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp10 <<= CONST_BITS;
    tmp12 = (INT32) wsptr[4];
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8014842:	f241 6ba1 	movw	fp, #5793	; 0x16a1
 8014846:	f1a3 0c04 	sub.w	ip, r3, #4
 801484a:	f103 082c 	add.w	r8, r3, #44	; 0x2c
    outptr = output_buf[ctr] + output_col;
 801484e:	f85c 9f04 	ldr.w	r9, [ip, #4]!
    /* Odd part */

    z1 = (INT32) wsptr[1];
    z2 = (INT32) wsptr[3];
    z3 = (INT32) wsptr[5];
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014852:	f640 37b6 	movw	r7, #2998	; 0xbb6
    outptr = output_buf[ctr] + output_col;
 8014856:	9b5c      	ldr	r3, [sp, #368]	; 0x170
			    & RANGE_MASK];
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 6;		/* advance pointer to next row */
 8014858:	3118      	adds	r1, #24
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 801485a:	f851 2c08 	ldr.w	r2, [r1, #-8]
  for (ctr = 0; ctr < 12; ctr++) {
 801485e:	45e0      	cmp	r8, ip
    outptr = output_buf[ctr] + output_col;
 8014860:	eb09 0603 	add.w	r6, r9, r3
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014864:	f851 3c18 	ldr.w	r3, [r1, #-24]
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8014868:	fb0b f202 	mul.w	r2, fp, r2
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 801486c:	f851 0c10 	ldr.w	r0, [r1, #-16]
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014870:	f103 0310 	add.w	r3, r3, #16
    z3 = (INT32) wsptr[5];
 8014874:	f851 ec04 	ldr.w	lr, [r1, #-4]
    tmp11 = tmp10 + tmp20;
 8014878:	eb02 3443 	add.w	r4, r2, r3, lsl #13
    tmp21 = tmp10 - tmp20 - tmp20;
 801487c:	ebc2 3343 	rsb	r3, r2, r3, lsl #13
 8014880:	eba3 0302 	sub.w	r3, r3, r2
 8014884:	9301      	str	r3, [sp, #4]
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8014886:	f242 7331 	movw	r3, #10033	; 0x2731
 801488a:	fb03 f200 	mul.w	r2, r3, r0
    z1 = (INT32) wsptr[1];
 801488e:	f851 0c14 	ldr.w	r0, [r1, #-20]
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8014892:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp20 = tmp11 + tmp10;
 8014896:	eb04 0502 	add.w	r5, r4, r2
    tmp22 = tmp11 - tmp10;
 801489a:	eba4 0202 	sub.w	r2, r4, r2
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801489e:	eb00 040e 	add.w	r4, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 80148a2:	ebae 0a03 	sub.w	sl, lr, r3
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80148a6:	fb07 f404 	mul.w	r4, r7, r4
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 80148aa:	f851 7c0c 	ldr.w	r7, [r1, #-12]
 80148ae:	4407      	add	r7, r0
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 80148b0:	eba0 0003 	sub.w	r0, r0, r3
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80148b4:	9b00      	ldr	r3, [sp, #0]
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 80148b6:	eb04 3747 	add.w	r7, r4, r7, lsl #13
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 80148ba:	eba0 0e0e 	sub.w	lr, r0, lr
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 80148be:	eb04 344a 	add.w	r4, r4, sl, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80148c2:	eb05 0007 	add.w	r0, r5, r7
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80148c6:	eba5 0507 	sub.w	r5, r5, r7
			    & RANGE_MASK];
 80148ca:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 80148ce:	f3c5 4589 	ubfx	r5, r5, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80148d2:	5c18      	ldrb	r0, [r3, r0]
 80148d4:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 80148d6:	f809 0003 	strb.w	r0, [r9, r3]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80148da:	9b00      	ldr	r3, [sp, #0]
 80148dc:	5d58      	ldrb	r0, [r3, r5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80148de:	9b01      	ldr	r3, [sp, #4]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80148e0:	7170      	strb	r0, [r6, #5]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80148e2:	eb03 304e 	add.w	r0, r3, lr, lsl #13
 80148e6:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 80148e8:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80148ec:	5c18      	ldrb	r0, [r3, r0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80148ee:	9b01      	ldr	r3, [sp, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80148f0:	7070      	strb	r0, [r6, #1]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80148f2:	eba3 3e4e 	sub.w	lr, r3, lr, lsl #13
 80148f6:	9b00      	ldr	r3, [sp, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80148f8:	9800      	ldr	r0, [sp, #0]
			    & RANGE_MASK];
 80148fa:	f3ce 4e89 	ubfx	lr, lr, #18, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80148fe:	f813 300e 	ldrb.w	r3, [r3, lr]
 8014902:	7133      	strb	r3, [r6, #4]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014904:	eb02 0304 	add.w	r3, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014908:	eba2 0404 	sub.w	r4, r2, r4
			    & RANGE_MASK];
 801490c:	f3c3 4389 	ubfx	r3, r3, #18, #10
			    & RANGE_MASK];
 8014910:	f3c4 4489 	ubfx	r4, r4, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8014914:	5cc3      	ldrb	r3, [r0, r3]
 8014916:	70b3      	strb	r3, [r6, #2]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8014918:	5d03      	ldrb	r3, [r0, r4]
 801491a:	70f3      	strb	r3, [r6, #3]
  for (ctr = 0; ctr < 12; ctr++) {
 801491c:	d197      	bne.n	801484e <jpeg_idct_6x12+0x1d6>
  }
}
 801491e:	b053      	add	sp, #332	; 0x14c
 8014920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014924:	ffffd0b0 	.word	0xffffd0b0
 8014928:	ffffeeaf 	.word	0xffffeeaf
 801492c:	ffffde8b 	.word	0xffffde8b
 8014930:	ffffea5c 	.word	0xffffea5c
 8014934:	ffffc08c 	.word	0xffffc08c

08014938 <jpeg_idct_5x10>:

GLOBAL(void)
jpeg_idct_5x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801493c:	b0b9      	sub	sp, #228	; 0xe4
 801493e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8014940:	9303      	str	r3, [sp, #12]
 8014942:	3904      	subs	r1, #4
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014944:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8014948:	1e90      	subs	r0, r2, #2
 801494a:	3380      	adds	r3, #128	; 0x80
 801494c:	9300      	str	r3, [sp, #0]
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 801494e:	f102 0308 	add.w	r3, r2, #8
  wsptr = workspace;
 8014952:	aa06      	add	r2, sp, #24
 8014954:	9305      	str	r3, [sp, #20]
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014956:	f930 ef02 	ldrsh.w	lr, [r0, #2]!
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801495a:	f641 269a 	movw	r6, #6810	; 0x1a9a
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801495e:	f851 3f04 	ldr.w	r3, [r1, #4]!
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8014962:	3204      	adds	r2, #4
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014964:	f9b0 4040 	ldrsh.w	r4, [r0, #64]	; 0x40
    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014968:	fb03 fe0e 	mul.w	lr, r3, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801496c:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014970:	f9b0 b020 	ldrsh.w	fp, [r0, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014974:	4363      	muls	r3, r4
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 8014976:	f242 449d 	movw	r4, #9373	; 0x249d
    z3 <<= CONST_BITS;
 801497a:	ea4f 3e4e 	mov.w	lr, lr, lsl #13
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801497e:	fb04 f503 	mul.w	r5, r4, r3
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 8014982:	f640 54fc 	movw	r4, #3580	; 0xdfc
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014986:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 801498a:	4363      	muls	r3, r4
    tmp10 = z3 + z1;
 801498c:	eb0e 0a05 	add.w	sl, lr, r5
    tmp11 = z3 - z2;
 8014990:	ebae 0403 	sub.w	r4, lr, r3
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 8014994:	1aeb      	subs	r3, r5, r3
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014996:	f9b0 5060 	ldrsh.w	r5, [r0, #96]	; 0x60
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 801499a:	ebae 0343 	sub.w	r3, lr, r3, lsl #1

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801499e:	f9b0 e050 	ldrsh.w	lr, [r0, #80]	; 0x50
    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80149a2:	9304      	str	r3, [sp, #16]
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80149a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80149a6:	fb03 fb0b 	mul.w	fp, r3, fp
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80149aa:	f8d1 30c0 	ldr.w	r3, [r1, #192]	; 0xc0
 80149ae:	436b      	muls	r3, r5
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80149b0:	eb0b 0503 	add.w	r5, fp, r3
 80149b4:	4375      	muls	r5, r6
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 80149b6:	f241 0671 	movw	r6, #4209	; 0x1071
 80149ba:	fb06 5b0b 	mla	fp, r6, fp, r5
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 80149be:	4e6c      	ldr	r6, [pc, #432]	; (8014b70 <jpeg_idct_5x10+0x238>)
 80149c0:	fb06 5303 	mla	r3, r6, r3, r5
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80149c4:	6a0d      	ldr	r5, [r1, #32]
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80149c6:	f9b0 6070 	ldrsh.w	r6, [r0, #112]	; 0x70
    tmp20 = tmp10 + tmp12;
 80149ca:	eb0a 0c0b 	add.w	ip, sl, fp
    tmp21 = tmp11 + tmp13;
 80149ce:	18e7      	adds	r7, r4, r3
    tmp23 = tmp11 - tmp13;
 80149d0:	1ae3      	subs	r3, r4, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80149d2:	f9b0 4030 	ldrsh.w	r4, [r0, #48]	; 0x30
    tmp24 = tmp10 - tmp12;
 80149d6:	ebaa 0b0b 	sub.w	fp, sl, fp
    tmp23 = tmp11 - tmp13;
 80149da:	9301      	str	r3, [sp, #4]
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80149dc:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 80149e0:	435d      	muls	r5, r3
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80149e2:	6e0b      	ldr	r3, [r1, #96]	; 0x60
 80149e4:	4363      	muls	r3, r4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80149e6:	f8d1 40a0 	ldr.w	r4, [r1, #160]	; 0xa0
 80149ea:	fb04 fe0e 	mul.w	lr, r4, lr
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80149ee:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
 80149f2:	4374      	muls	r4, r6

    tmp11 = z2 + z4;
 80149f4:	eb03 0904 	add.w	r9, r3, r4
    tmp13 = z2 - z4;
 80149f8:	1b1b      	subs	r3, r3, r4

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80149fa:	f640 14e3 	movw	r4, #2531	; 0x9e3
 80149fe:	435c      	muls	r4, r3
 8014a00:	9402      	str	r4, [sp, #8]
    z5 = z3 << CONST_BITS;

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8014a02:	f641 646f 	movw	r4, #7791	; 0x1e6f
 8014a06:	fb04 f609 	mul.w	r6, r4, r9
    z4 = z5 + tmp12;
 8014a0a:	9c02      	ldr	r4, [sp, #8]
 8014a0c:	eb04 3a4e 	add.w	sl, r4, lr, lsl #13

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014a10:	f642 44b3 	movw	r4, #11443	; 0x2cb3
 8014a14:	fb04 6805 	mla	r8, r4, r5, r6
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014a18:	f240 7414 	movw	r4, #1812	; 0x714
 8014a1c:	436c      	muls	r4, r5
    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8014a1e:	44d0      	add	r8, sl
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014a20:	1ba6      	subs	r6, r4, r6

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8014a22:	9c02      	ldr	r4, [sp, #8]
 8014a24:	ebc4 344e 	rsb	r4, r4, lr, lsl #13
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8014a28:	44b2      	add	sl, r6
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8014a2a:	f241 26cf 	movw	r6, #4815	; 0x12cf
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8014a2e:	eba4 3403 	sub.w	r4, r4, r3, lsl #12

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8014a32:	1aeb      	subs	r3, r5, r3
    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8014a34:	fb06 f909 	mul.w	r9, r6, r9

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014a38:	f642 0653 	movw	r6, #10323	; 0x2853
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8014a3c:	eba3 0e0e 	sub.w	lr, r3, lr
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014a40:	f241 438c 	movw	r3, #5260	; 0x148c
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014a44:	436e      	muls	r6, r5
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014a46:	435d      	muls	r5, r3

    /* Final output stage */

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014a48:	eb0c 0308 	add.w	r3, ip, r8
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014a4c:	eba6 0609 	sub.w	r6, r6, r9
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014a50:	ebac 0c08 	sub.w	ip, ip, r8
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014a54:	12db      	asrs	r3, r3, #11
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014a56:	eba5 0909 	sub.w	r9, r5, r9
    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8014a5a:	1b36      	subs	r6, r6, r4
    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 8014a5c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014a60:	f842 3c04 	str.w	r3, [r2, #-4]
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014a64:	ea4f 23ec 	mov.w	r3, ip, asr #11
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8014a68:	444c      	add	r4, r9
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014a6a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014a6e:	19bb      	adds	r3, r7, r6
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014a70:	1bbf      	subs	r7, r7, r6
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014a72:	12db      	asrs	r3, r3, #11
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014a74:	12ff      	asrs	r7, r7, #11
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014a76:	6113      	str	r3, [r2, #16]
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8014a78:	9b04      	ldr	r3, [sp, #16]
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014a7a:	f8c2 709c 	str.w	r7, [r2, #156]	; 0x9c
    wsptr[5*2] = (int) (tmp22 + tmp12);
 8014a7e:	eb0e 23e3 	add.w	r3, lr, r3, asr #11
 8014a82:	6253      	str	r3, [r2, #36]	; 0x24
    wsptr[5*7] = (int) (tmp22 - tmp12);
 8014a84:	9b04      	ldr	r3, [sp, #16]
 8014a86:	ebce 23e3 	rsb	r3, lr, r3, asr #11
 8014a8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8014a8e:	9b01      	ldr	r3, [sp, #4]
 8014a90:	4423      	add	r3, r4
 8014a92:	12db      	asrs	r3, r3, #11
 8014a94:	6393      	str	r3, [r2, #56]	; 0x38
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8014a96:	9b01      	ldr	r3, [sp, #4]
 8014a98:	1b1c      	subs	r4, r3, r4
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014a9a:	eb0b 030a 	add.w	r3, fp, sl
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014a9e:	ebab 0a0a 	sub.w	sl, fp, sl
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014aa2:	12db      	asrs	r3, r3, #11
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8014aa4:	12e4      	asrs	r4, r4, #11
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014aa6:	ea4f 26ea 	mov.w	r6, sl, asr #11
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8014aaa:	6754      	str	r4, [r2, #116]	; 0x74
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014aac:	64d3      	str	r3, [r2, #76]	; 0x4c
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8014aae:	9b05      	ldr	r3, [sp, #20]
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014ab0:	6616      	str	r6, [r2, #96]	; 0x60
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8014ab2:	4283      	cmp	r3, r0
 8014ab4:	f47f af4f 	bne.w	8014956 <jpeg_idct_5x10+0x1e>
 8014ab8:	9b03      	ldr	r3, [sp, #12]
  }

  /* Pass 2: process 10 rows from work array, store into output array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  wsptr = workspace;
 8014aba:	a906      	add	r1, sp, #24
    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp12 <<= CONST_BITS;
    tmp13 = (INT32) wsptr[2];
    tmp14 = (INT32) wsptr[4];
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8014abc:	f641 1a4c 	movw	sl, #6476	; 0x194c
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014ac0:	f44f 6935 	mov.w	r9, #2896	; 0xb50
 8014ac4:	f1a3 0c04 	sub.w	ip, r3, #4
    /* Odd part */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8014ac8:	f641 289a 	movw	r8, #6810	; 0x1a9a
 8014acc:	3324      	adds	r3, #36	; 0x24
 8014ace:	9302      	str	r3, [sp, #8]
    outptr = output_buf[ctr] + output_col;
 8014ad0:	f85c ef04 	ldr.w	lr, [ip, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 5;		/* advance pointer to next row */
 8014ad4:	3114      	adds	r1, #20
    outptr = output_buf[ctr] + output_col;
 8014ad6:	9b42      	ldr	r3, [sp, #264]	; 0x108
    tmp14 = (INT32) wsptr[4];
 8014ad8:	f851 0c04 	ldr.w	r0, [r1, #-4]
    outptr = output_buf[ctr] + output_col;
 8014adc:	eb0e 0603 	add.w	r6, lr, r3
    tmp13 = (INT32) wsptr[2];
 8014ae0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014ae4:	f851 7c14 	ldr.w	r7, [r1, #-20]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8014ae8:	181a      	adds	r2, r3, r0
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014aea:	1a1b      	subs	r3, r3, r0
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014aec:	3710      	adds	r7, #16
    z3 = (INT32) wsptr[3];
 8014aee:	f851 bc08 	ldr.w	fp, [r1, #-8]
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014af2:	fb09 f303 	mul.w	r3, r9, r3
    z2 = (INT32) wsptr[1];
 8014af6:	f851 5c10 	ldr.w	r5, [r1, #-16]
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8014afa:	fb0a f202 	mul.w	r2, sl, r2
    z3 = tmp12 + z2;
 8014afe:	eb03 3447 	add.w	r4, r3, r7, lsl #13
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 8014b02:	9301      	str	r3, [sp, #4]
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8014b04:	f241 0371 	movw	r3, #4209	; 0x1071
    tmp10 = z3 + z1;
 8014b08:	1910      	adds	r0, r2, r4
    tmp11 = z3 - z1;
 8014b0a:	1aa2      	subs	r2, r4, r2
    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 8014b0c:	eb05 040b 	add.w	r4, r5, fp
 8014b10:	fb08 f404 	mul.w	r4, r8, r4
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 8014b14:	fb03 4505 	mla	r5, r3, r5, r4
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 8014b18:	4b15      	ldr	r3, [pc, #84]	; (8014b70 <jpeg_idct_5x10+0x238>)
 8014b1a:	fb03 440b 	mla	r4, r3, fp, r4
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 8014b1e:	eb00 0b05 	add.w	fp, r0, r5
 8014b22:	9b00      	ldr	r3, [sp, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8014b24:	1b40      	subs	r0, r0, r5
			    & RANGE_MASK];
 8014b26:	f3cb 4b89 	ubfx	fp, fp, #18, #10
			    & RANGE_MASK];
 8014b2a:	f3c0 4089 	ubfx	r0, r0, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 8014b2e:	f813 b00b 	ldrb.w	fp, [r3, fp]
 8014b32:	9b42      	ldr	r3, [sp, #264]	; 0x108
 8014b34:	f80e b003 	strb.w	fp, [lr, r3]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 8014b38:	9b00      	ldr	r3, [sp, #0]
 8014b3a:	5c18      	ldrb	r0, [r3, r0]
 8014b3c:	7130      	strb	r0, [r6, #4]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 8014b3e:	1910      	adds	r0, r2, r4
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8014b40:	1b12      	subs	r2, r2, r4
			    & RANGE_MASK];
 8014b42:	f3c0 4089 	ubfx	r0, r0, #18, #10
			    & RANGE_MASK];
 8014b46:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 8014b4a:	5c18      	ldrb	r0, [r3, r0]
 8014b4c:	7070      	strb	r0, [r6, #1]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8014b4e:	5c9a      	ldrb	r2, [r3, r2]
    tmp12 -= z2 << 2;
 8014b50:	9b01      	ldr	r3, [sp, #4]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 8014b52:	70f2      	strb	r2, [r6, #3]
    tmp12 -= z2 << 2;
 8014b54:	009b      	lsls	r3, r3, #2
 8014b56:	ebc3 3747 	rsb	r7, r3, r7, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8014b5a:	9b00      	ldr	r3, [sp, #0]
			    & RANGE_MASK];
 8014b5c:	f3c7 4789 	ubfx	r7, r7, #18, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8014b60:	5ddb      	ldrb	r3, [r3, r7]
 8014b62:	70b3      	strb	r3, [r6, #2]
  for (ctr = 0; ctr < 10; ctr++) {
 8014b64:	9b02      	ldr	r3, [sp, #8]
 8014b66:	4563      	cmp	r3, ip
 8014b68:	d1b2      	bne.n	8014ad0 <jpeg_idct_5x10+0x198>
  }
}
 8014b6a:	b039      	add	sp, #228	; 0xe4
 8014b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b70:	ffffba5c 	.word	0xffffba5c

08014b74 <jpeg_idct_4x8>:

GLOBAL(void)
jpeg_idct_4x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b78:	b0a7      	sub	sp, #156	; 0x9c
 8014b7a:	3a02      	subs	r2, #2
 8014b7c:	9304      	str	r3, [sp, #16]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014b7e:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8014b82:	6d48      	ldr	r0, [r1, #84]	; 0x54
  wsptr = workspace;
 8014b84:	a906      	add	r1, sp, #24
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014b86:	3380      	adds	r3, #128	; 0x80
 8014b88:	9301      	str	r3, [sp, #4]
  for (ctr = 4; ctr > 0; ctr--) {
 8014b8a:	f100 0310 	add.w	r3, r0, #16
 8014b8e:	9305      	str	r3, [sp, #20]
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8014b90:	f9b2 a012 	ldrsh.w	sl, [r2, #18]
 8014b94:	3104      	adds	r1, #4
 8014b96:	f9b2 4022 	ldrsh.w	r4, [r2, #34]	; 0x22
 8014b9a:	f9b2 c032 	ldrsh.w	ip, [r2, #50]	; 0x32
 8014b9e:	f9b2 e042 	ldrsh.w	lr, [r2, #66]	; 0x42
 8014ba2:	f9b2 8052 	ldrsh.w	r8, [r2, #82]	; 0x52
 8014ba6:	f9b2 3062 	ldrsh.w	r3, [r2, #98]	; 0x62
 8014baa:	f9b2 9072 	ldrsh.w	r9, [r2, #114]	; 0x72
 8014bae:	f850 7b04 	ldr.w	r7, [r0], #4
 8014bb2:	f932 5f02 	ldrsh.w	r5, [r2, #2]!
 8014bb6:	436f      	muls	r7, r5
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8014bb8:	ea4a 0504 	orr.w	r5, sl, r4
 8014bbc:	ea4c 0505 	orr.w	r5, ip, r5
 8014bc0:	ea4e 0505 	orr.w	r5, lr, r5
 8014bc4:	ea48 0505 	orr.w	r5, r8, r5
 8014bc8:	431d      	orrs	r5, r3
 8014bca:	ea59 0505 	orrs.w	r5, r9, r5
 8014bce:	d155      	bne.n	8014c7c <jpeg_idct_4x8+0x108>
	inptr[DCTSIZE*7] == 0) {
      /* AC terms all zero */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8014bd0:	00bf      	lsls	r7, r7, #2

      wsptr[4*0] = dcval;
 8014bd2:	f841 7c04 	str.w	r7, [r1, #-4]
      wsptr[4*1] = dcval;
 8014bd6:	60cf      	str	r7, [r1, #12]
      wsptr[4*2] = dcval;
 8014bd8:	61cf      	str	r7, [r1, #28]
      wsptr[4*3] = dcval;
 8014bda:	62cf      	str	r7, [r1, #44]	; 0x2c
      wsptr[4*4] = dcval;
 8014bdc:	63cf      	str	r7, [r1, #60]	; 0x3c
      wsptr[4*5] = dcval;
 8014bde:	64cf      	str	r7, [r1, #76]	; 0x4c
      wsptr[4*6] = dcval;
 8014be0:	65cf      	str	r7, [r1, #92]	; 0x5c
      wsptr[4*7] = dcval;
 8014be2:	66cf      	str	r7, [r1, #108]	; 0x6c
  for (ctr = 4; ctr > 0; ctr--) {
 8014be4:	9b05      	ldr	r3, [sp, #20]
 8014be6:	4283      	cmp	r3, r0
 8014be8:	d1d2      	bne.n	8014b90 <jpeg_idct_4x8+0x1c>
 8014bea:	9b04      	ldr	r3, [sp, #16]
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  wsptr = workspace;
 8014bec:	ac06      	add	r4, sp, #24
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
    z3 = (INT32) wsptr[3];

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014bee:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014bf2:	f641 0e7e 	movw	lr, #6270	; 0x187e
 8014bf6:	1f1d      	subs	r5, r3, #4
 8014bf8:	f103 0b1c 	add.w	fp, r3, #28
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014bfc:	f8df c184 	ldr.w	ip, [pc, #388]	; 8014d84 <jpeg_idct_4x8+0x210>
    outptr = output_buf[ctr] + output_col;
 8014c00:	f855 7f04 	ldr.w	r7, [r5, #4]!
			    & RANGE_MASK];
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
    
    wsptr += 4;		/* advance pointer to next row */
 8014c04:	3410      	adds	r4, #16
    outptr = output_buf[ctr] + output_col;
 8014c06:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014c08:	f854 0c10 	ldr.w	r0, [r4, #-16]
  for (ctr = 0; ctr < 8; ctr++) {
 8014c0c:	45ab      	cmp	fp, r5
    outptr = output_buf[ctr] + output_col;
 8014c0e:	eb07 0602 	add.w	r6, r7, r2
    z3 = (INT32) wsptr[3];
 8014c12:	f854 ac04 	ldr.w	sl, [r4, #-4]
    tmp2 = (INT32) wsptr[2];
 8014c16:	f854 2c08 	ldr.w	r2, [r4, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014c1a:	f100 0010 	add.w	r0, r0, #16
    z2 = (INT32) wsptr[1];
 8014c1e:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8014c22:	eb00 0902 	add.w	r9, r0, r2
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8014c26:	eba0 0002 	sub.w	r0, r0, r2
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014c2a:	eb01 020a 	add.w	r2, r1, sl
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014c2e:	9b01      	ldr	r3, [sp, #4]
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014c30:	fb08 f202 	mul.w	r2, r8, r2
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014c34:	fb0e 2101 	mla	r1, lr, r1, r2
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014c38:	fb0c 220a 	mla	r2, ip, sl, r2
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014c3c:	eb01 3a49 	add.w	sl, r1, r9, lsl #13
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014c40:	ebc1 3149 	rsb	r1, r1, r9, lsl #13
			    & RANGE_MASK];
 8014c44:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8014c48:	f3c1 4189 	ubfx	r1, r1, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014c4c:	f813 a00a 	ldrb.w	sl, [r3, sl]
 8014c50:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8014c52:	f807 a003 	strb.w	sl, [r7, r3]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014c56:	9b01      	ldr	r3, [sp, #4]
 8014c58:	5c59      	ldrb	r1, [r3, r1]
 8014c5a:	70f1      	strb	r1, [r6, #3]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014c5c:	eb02 3140 	add.w	r1, r2, r0, lsl #13
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014c60:	ebc2 3240 	rsb	r2, r2, r0, lsl #13
			    & RANGE_MASK];
 8014c64:	f3c1 4189 	ubfx	r1, r1, #18, #10
			    & RANGE_MASK];
 8014c68:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8014c6c:	5c59      	ldrb	r1, [r3, r1]
 8014c6e:	7071      	strb	r1, [r6, #1]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8014c70:	5c9a      	ldrb	r2, [r3, r2]
 8014c72:	70b2      	strb	r2, [r6, #2]
  for (ctr = 0; ctr < 8; ctr++) {
 8014c74:	d1c4      	bne.n	8014c00 <jpeg_idct_4x8+0x8c>
  }
}
 8014c76:	b027      	add	sp, #156	; 0x9c
 8014c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014c7c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014c7e:	f8d0 50bc 	ldr.w	r5, [r0, #188]	; 0xbc
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014c82:	4366      	muls	r6, r4
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014c84:	f241 1451 	movw	r4, #4433	; 0x1151
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8014c88:	435d      	muls	r5, r3
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8014c8a:	1973      	adds	r3, r6, r5
 8014c8c:	4363      	muls	r3, r4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8014c8e:	f641 047e 	movw	r4, #6270	; 0x187e
 8014c92:	fb04 3606 	mla	r6, r4, r6, r3
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8014c96:	4c3b      	ldr	r4, [pc, #236]	; (8014d84 <jpeg_idct_4x8+0x210>)
 8014c98:	fb04 3505 	mla	r5, r4, r5, r3
    z2 <<= CONST_BITS;
 8014c9c:	037b      	lsls	r3, r7, #13
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014c9e:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014ca0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014ca4:	fb04 f40e 	mul.w	r4, r4, lr
    tmp0 = z2 + z3;
 8014ca8:	eb03 3b44 	add.w	fp, r3, r4, lsl #13
    tmp1 = z2 - z3;
 8014cac:	eba3 3344 	sub.w	r3, r3, r4, lsl #13
    tmp13 = tmp0 - tmp2;
 8014cb0:	ebab 0406 	sub.w	r4, fp, r6
    tmp10 = tmp0 + tmp2;
 8014cb4:	eb06 070b 	add.w	r7, r6, fp
    tmp11 = tmp1 + tmp3;
 8014cb8:	18ee      	adds	r6, r5, r3
    tmp12 = tmp1 - tmp3;
 8014cba:	1b5b      	subs	r3, r3, r5
    tmp13 = tmp0 - tmp2;
 8014cbc:	9402      	str	r4, [sp, #8]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014cbe:	f8d0 40dc 	ldr.w	r4, [r0, #220]	; 0xdc
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014cc2:	69c5      	ldr	r5, [r0, #28]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8014cc4:	fb04 f909 	mul.w	r9, r4, r9
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014cc8:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014ccc:	fb05 fa0a 	mul.w	sl, r5, sl
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014cd0:	fb04 f808 	mul.w	r8, r4, r8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014cd4:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
    tmp12 = tmp1 - tmp3;
 8014cd6:	9303      	str	r3, [sp, #12]
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014cd8:	f242 53a1 	movw	r3, #9633	; 0x25a1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014cdc:	fb04 fc0c 	mul.w	ip, r4, ip
    z3 = tmp1 + tmp3;
 8014ce0:	eb08 0e0a 	add.w	lr, r8, sl
    z2 = tmp0 + tmp2;
 8014ce4:	eb09 050c 	add.w	r5, r9, ip
    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8014ce8:	eb05 040e 	add.w	r4, r5, lr
 8014cec:	435c      	muls	r4, r3
    z2 += z1;
 8014cee:	4b26      	ldr	r3, [pc, #152]	; (8014d88 <jpeg_idct_4x8+0x214>)
 8014cf0:	fb03 4505 	mla	r5, r3, r5, r4
    z3 += z1;
 8014cf4:	4b25      	ldr	r3, [pc, #148]	; (8014d8c <jpeg_idct_4x8+0x218>)
 8014cf6:	fb03 440e 	mla	r4, r3, lr, r4
    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8014cfa:	eb09 0e0a 	add.w	lr, r9, sl
 8014cfe:	4b24      	ldr	r3, [pc, #144]	; (8014d90 <jpeg_idct_4x8+0x21c>)
 8014d00:	fb03 fe0e 	mul.w	lr, r3, lr
    tmp0 += z1 + z2;
 8014d04:	f640 138e 	movw	r3, #2446	; 0x98e
 8014d08:	eb05 0b0e 	add.w	fp, r5, lr
    tmp3 += z1 + z3;
 8014d0c:	44a6      	add	lr, r4
    tmp0 += z1 + z2;
 8014d0e:	fb03 b909 	mla	r9, r3, r9, fp
    tmp3 += z1 + z3;
 8014d12:	f243 0b0b 	movw	fp, #12299	; 0x300b
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014d16:	4b1f      	ldr	r3, [pc, #124]	; (8014d94 <jpeg_idct_4x8+0x220>)
    tmp3 += z1 + z3;
 8014d18:	fb0b ee0a 	mla	lr, fp, sl, lr
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014d1c:	eb08 0a0c 	add.w	sl, r8, ip
    tmp1 += z1 + z3;
 8014d20:	f244 1bb3 	movw	fp, #16819	; 0x41b3
    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8014d24:	fb03 fa0a 	mul.w	sl, r3, sl
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014d28:	9b03      	ldr	r3, [sp, #12]
    tmp2 += z1 + z2;
 8014d2a:	4455      	add	r5, sl
    tmp1 += z1 + z3;
 8014d2c:	4454      	add	r4, sl
    tmp2 += z1 + z2;
 8014d2e:	f246 2a54 	movw	sl, #25172	; 0x6254
    tmp1 += z1 + z3;
 8014d32:	fb0b 4408 	mla	r4, fp, r8, r4
    tmp2 += z1 + z2;
 8014d36:	fb0a 5a0c 	mla	sl, sl, ip, r5
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014d3a:	eb07 050e 	add.w	r5, r7, lr
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014d3e:	eba7 0e0e 	sub.w	lr, r7, lr
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014d42:	12ed      	asrs	r5, r5, #11
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014d44:	ea4f 27ee 	mov.w	r7, lr, asr #11
    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8014d48:	f841 5c04 	str.w	r5, [r1, #-4]
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014d4c:	eb06 050a 	add.w	r5, r6, sl
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8014d50:	eba6 0a0a 	sub.w	sl, r6, sl
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8014d54:	66cf      	str	r7, [r1, #108]	; 0x6c
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014d56:	12ed      	asrs	r5, r5, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8014d58:	ea4f 26ea 	mov.w	r6, sl, asr #11
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8014d5c:	60cd      	str	r5, [r1, #12]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014d5e:	191d      	adds	r5, r3, r4
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014d60:	1b1c      	subs	r4, r3, r4
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014d62:	9b02      	ldr	r3, [sp, #8]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014d64:	12ed      	asrs	r5, r5, #11
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8014d66:	65ce      	str	r6, [r1, #92]	; 0x5c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014d68:	444b      	add	r3, r9
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014d6a:	12e4      	asrs	r4, r4, #11
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8014d6c:	61cd      	str	r5, [r1, #28]
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014d6e:	12db      	asrs	r3, r3, #11
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8014d70:	64cc      	str	r4, [r1, #76]	; 0x4c
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8014d72:	62cb      	str	r3, [r1, #44]	; 0x2c
    wsptr[4*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8014d74:	9b02      	ldr	r3, [sp, #8]
 8014d76:	eba3 0909 	sub.w	r9, r3, r9
 8014d7a:	ea4f 23e9 	mov.w	r3, r9, asr #11
 8014d7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    wsptr++;
 8014d80:	e730      	b.n	8014be4 <jpeg_idct_4x8+0x70>
 8014d82:	bf00      	nop
 8014d84:	ffffc4df 	.word	0xffffc4df
 8014d88:	ffffc13b 	.word	0xffffc13b
 8014d8c:	fffff384 	.word	0xfffff384
 8014d90:	ffffe333 	.word	0xffffe333
 8014d94:	ffffadfd 	.word	0xffffadfd

08014d98 <jpeg_idct_3x6>:

GLOBAL(void)
jpeg_idct_3x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014d9c:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
{
 8014da0:	b095      	sub	sp, #84	; 0x54
 8014da2:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8014da4:	1e95      	subs	r5, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014da6:	f100 0e80 	add.w	lr, r0, #128	; 0x80
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014daa:	3204      	adds	r2, #4
 8014dac:	3c04      	subs	r4, #4
  wsptr = workspace;
 8014dae:	ae02      	add	r6, sp, #8
{
 8014db0:	9300      	str	r3, [sp, #0]
 8014db2:	9201      	str	r2, [sp, #4]
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014db4:	f935 2f02 	ldrsh.w	r2, [r5, #2]!
    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014db8:	f640 33b6 	movw	r3, #2998	; 0xbb6
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014dbc:	f854 1f04 	ldr.w	r1, [r4, #4]!
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014dc0:	3604      	adds	r6, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014dc2:	f9b5 0040 	ldrsh.w	r0, [r5, #64]	; 0x40
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014dc6:	4351      	muls	r1, r2
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014dc8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014dcc:	f9b5 7020 	ldrsh.w	r7, [r5, #32]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014dd0:	4342      	muls	r2, r0
    tmp0 <<= CONST_BITS;
 8014dd2:	0349      	lsls	r1, r1, #13
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8014dd4:	f241 60a1 	movw	r0, #5793	; 0x16a1
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014dd8:	f9b5 9030 	ldrsh.w	r9, [r5, #48]	; 0x30
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8014ddc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014de0:	f9b5 8050 	ldrsh.w	r8, [r5, #80]	; 0x50
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8014de4:	4342      	muls	r2, r0
    tmp1 = tmp0 + tmp10;
 8014de6:	1888      	adds	r0, r1, r2
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8014de8:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014dec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8014dee:	437a      	muls	r2, r7
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8014df0:	f242 7731 	movw	r7, #10033	; 0x2731
 8014df4:	437a      	muls	r2, r7
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014df6:	f9b5 7010 	ldrsh.w	r7, [r5, #16]
    tmp10 = tmp1 + tmp0;
 8014dfa:	eb00 0c02 	add.w	ip, r0, r2
    tmp12 = tmp1 - tmp0;
 8014dfe:	1a80      	subs	r0, r0, r2
    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014e00:	6a22      	ldr	r2, [r4, #32]
 8014e02:	437a      	muls	r2, r7
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014e04:	6e27      	ldr	r7, [r4, #96]	; 0x60
 8014e06:	fb07 f909 	mul.w	r9, r7, r9
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8014e0a:	f8d4 70a0 	ldr.w	r7, [r4, #160]	; 0xa0
 8014e0e:	fb07 f808 	mul.w	r8, r7, r8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8014e12:	eb02 0a09 	add.w	sl, r2, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014e16:	eb02 0708 	add.w	r7, r2, r8
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8014e1a:	eba8 0b09 	sub.w	fp, r8, r9
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8014e1e:	435f      	muls	r7, r3
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014e20:	9b01      	ldr	r3, [sp, #4]
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8014e22:	eb07 3a4a 	add.w	sl, r7, sl, lsl #13
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014e26:	42ab      	cmp	r3, r5
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8014e28:	eb07 3b4b 	add.w	fp, r7, fp, lsl #13
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8014e2c:	eba2 0709 	sub.w	r7, r2, r9

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014e30:	eb0c 020a 	add.w	r2, ip, sl
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014e34:	ebac 0c0a 	sub.w	ip, ip, sl
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8014e38:	eba7 0808 	sub.w	r8, r7, r8
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014e3c:	ea4f 22e2 	mov.w	r2, r2, asr #11
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8014e40:	ea4f 0888 	mov.w	r8, r8, lsl #2
    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8014e44:	f846 2c04 	str.w	r2, [r6, #-4]
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8014e48:	ea4f 22ec 	mov.w	r2, ip, asr #11
 8014e4c:	63b2      	str	r2, [r6, #56]	; 0x38
    wsptr[3*1] = (int) (tmp11 + tmp1);
 8014e4e:	eb08 22e1 	add.w	r2, r8, r1, asr #11
    wsptr[3*4] = (int) (tmp11 - tmp1);
 8014e52:	ebc8 21e1 	rsb	r1, r8, r1, asr #11
    wsptr[3*1] = (int) (tmp11 + tmp1);
 8014e56:	60b2      	str	r2, [r6, #8]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8014e58:	eb00 020b 	add.w	r2, r0, fp
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8014e5c:	eba0 0b0b 	sub.w	fp, r0, fp
    wsptr[3*4] = (int) (tmp11 - tmp1);
 8014e60:	62f1      	str	r1, [r6, #44]	; 0x2c
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8014e62:	ea4f 22e2 	mov.w	r2, r2, asr #11
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8014e66:	ea4f 20eb 	mov.w	r0, fp, asr #11
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8014e6a:	6172      	str	r2, [r6, #20]
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8014e6c:	6230      	str	r0, [r6, #32]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8014e6e:	d1a1      	bne.n	8014db4 <jpeg_idct_3x6+0x1c>
 8014e70:	9b00      	ldr	r3, [sp, #0]
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  wsptr = workspace;
 8014e72:	a902      	add	r1, sp, #8

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
    tmp0 <<= CONST_BITS;
    tmp2 = (INT32) wsptr[2];
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8014e74:	f241 6ca1 	movw	ip, #5793	; 0x16a1
    tmp2 = tmp0 - tmp12 - tmp12;

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8014e78:	f242 7b31 	movw	fp, #10033	; 0x2731
 8014e7c:	1f1d      	subs	r5, r3, #4
 8014e7e:	3314      	adds	r3, #20
    outptr = output_buf[ctr] + output_col;
 8014e80:	f855 9f04 	ldr.w	r9, [r5, #4]!
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

    wsptr += 3;		/* advance pointer to next row */
 8014e84:	310c      	adds	r1, #12
    outptr = output_buf[ctr] + output_col;
 8014e86:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8014e88:	f851 0c04 	ldr.w	r0, [r1, #-4]
  for (ctr = 0; ctr < 6; ctr++) {
 8014e8c:	42ab      	cmp	r3, r5
    outptr = output_buf[ctr] + output_col;
 8014e8e:	eb09 0602 	add.w	r6, r9, r2
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014e92:	f851 2c0c 	ldr.w	r2, [r1, #-12]
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8014e96:	fb0c f000 	mul.w	r0, ip, r0
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8014e9a:	f851 4c08 	ldr.w	r4, [r1, #-8]
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014e9e:	f102 0210 	add.w	r2, r2, #16
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014ea2:	9f1e      	ldr	r7, [sp, #120]	; 0x78
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8014ea4:	fb0b f404 	mul.w	r4, fp, r4
    tmp10 = tmp0 + tmp12;
 8014ea8:	eb00 3842 	add.w	r8, r0, r2, lsl #13
    tmp2 = tmp0 - tmp12 - tmp12;
 8014eac:	ebc0 3242 	rsb	r2, r0, r2, lsl #13
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014eb0:	eb08 0a04 	add.w	sl, r8, r4
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014eb4:	eba8 0804 	sub.w	r8, r8, r4
    tmp2 = tmp0 - tmp12 - tmp12;
 8014eb8:	eba2 0200 	sub.w	r2, r2, r0
			    & RANGE_MASK];
 8014ebc:	f3ca 4a89 	ubfx	sl, sl, #18, #10
			    & RANGE_MASK];
 8014ec0:	f3c8 4889 	ubfx	r8, r8, #18, #10
			    & RANGE_MASK];
 8014ec4:	f3c2 4289 	ubfx	r2, r2, #18, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8014ec8:	f81e a00a 	ldrb.w	sl, [lr, sl]
 8014ecc:	f809 a007 	strb.w	sl, [r9, r7]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8014ed0:	f81e 4008 	ldrb.w	r4, [lr, r8]
 8014ed4:	70b4      	strb	r4, [r6, #2]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 8014ed6:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8014eda:	7072      	strb	r2, [r6, #1]
  for (ctr = 0; ctr < 6; ctr++) {
 8014edc:	d1d0      	bne.n	8014e80 <jpeg_idct_3x6+0xe8>
  }
}
 8014ede:	b015      	add	sp, #84	; 0x54
 8014ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014ee4 <jpeg_idct_2x4>:

GLOBAL(void)
jpeg_idct_2x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014ee8:	f8d0 714c 	ldr.w	r7, [r0, #332]	; 0x14c
{
 8014eec:	b08b      	sub	sp, #44	; 0x2c
 8014eee:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 8014ef0:	1e96      	subs	r6, r2, #2
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014ef2:	f107 0080 	add.w	r0, r7, #128	; 0x80
   * 4-point IDCT kernel,
   * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
   */
  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
 8014ef6:	ad02      	add	r5, sp, #8
 8014ef8:	3c04      	subs	r4, #4
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014efa:	f241 1851 	movw	r8, #4433	; 0x1151
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014efe:	f641 0e7e 	movw	lr, #6270	; 0x187e
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014f02:	9001      	str	r0, [sp, #4]
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014f04:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8014f08:	46b4      	mov	ip, r6
 8014f0a:	f936 1f02 	ldrsh.w	r1, [r6, #2]!
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8014f0e:	3504      	adds	r5, #4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014f10:	6c27      	ldr	r7, [r4, #64]	; 0x40
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8014f12:	4562      	cmp	r2, ip
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014f14:	fb00 f001 	mul.w	r0, r0, r1
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014f18:	f9b6 1020 	ldrsh.w	r1, [r6, #32]
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014f1c:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8014f20:	fb07 f101 	mul.w	r1, r7, r1
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014f24:	f9b6 b030 	ldrsh.w	fp, [r6, #48]	; 0x30
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014f28:	4f22      	ldr	r7, [pc, #136]	; (8014fb4 <jpeg_idct_2x4+0xd0>)
    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 8014f2a:	eb00 0901 	add.w	r9, r0, r1
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8014f2e:	eba0 0001 	sub.w	r0, r0, r1
    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014f32:	6a21      	ldr	r1, [r4, #32]
 8014f34:	fb01 fa0a 	mul.w	sl, r1, sl
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8014f38:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8014f3a:	fb01 f10b 	mul.w	r1, r1, fp
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8014f3e:	eb0a 0b01 	add.w	fp, sl, r1
 8014f42:	fb08 fb0b 	mul.w	fp, r8, fp
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8014f46:	fb0e ba0a 	mla	sl, lr, sl, fp
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8014f4a:	fb07 bb01 	mla	fp, r7, r1, fp

    /* Final output stage */

    wsptr[2*0] = tmp10 + tmp0;
 8014f4e:	eb0a 3149 	add.w	r1, sl, r9, lsl #13
 8014f52:	f845 1c04 	str.w	r1, [r5, #-4]
    wsptr[2*3] = tmp10 - tmp0;
 8014f56:	ebca 3149 	rsb	r1, sl, r9, lsl #13
 8014f5a:	6169      	str	r1, [r5, #20]
    wsptr[2*1] = tmp12 + tmp2;
 8014f5c:	eb0b 3140 	add.w	r1, fp, r0, lsl #13
    wsptr[2*2] = tmp12 - tmp2;
 8014f60:	ebcb 3040 	rsb	r0, fp, r0, lsl #13
    wsptr[2*1] = tmp12 + tmp2;
 8014f64:	6069      	str	r1, [r5, #4]
    wsptr[2*2] = tmp12 - tmp2;
 8014f66:	60e8      	str	r0, [r5, #12]
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 8014f68:	d1cc      	bne.n	8014f04 <jpeg_idct_2x4+0x20>
 8014f6a:	1f18      	subs	r0, r3, #4
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 8014f6c:	a902      	add	r1, sp, #8
 8014f6e:	330c      	adds	r3, #12
  for (ctr = 0; ctr < 4; ctr++) {
    outptr = output_buf[ctr] + output_col;
 8014f70:	f850 6f04 	ldr.w	r6, [r0, #4]!
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
			    & RANGE_MASK];
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
			    & RANGE_MASK];

    wsptr += 2;		/* advance pointer to next row */
 8014f74:	3108      	adds	r1, #8
    outptr = output_buf[ctr] + output_col;
 8014f76:	9a14      	ldr	r2, [sp, #80]	; 0x50
    tmp0 = wsptr[1];
 8014f78:	f851 5c04 	ldr.w	r5, [r1, #-4]
  for (ctr = 0; ctr < 4; ctr++) {
 8014f7c:	4283      	cmp	r3, r0
    outptr = output_buf[ctr] + output_col;
 8014f7e:	eb06 0c02 	add.w	ip, r6, r2
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 8014f82:	f851 2c08 	ldr.w	r2, [r1, #-8]
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8014f86:	9f01      	ldr	r7, [sp, #4]
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 8014f88:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8014f8c:	eb02 0405 	add.w	r4, r2, r5
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 8014f90:	eba2 0205 	sub.w	r2, r2, r5
			    & RANGE_MASK];
 8014f94:	f3c4 4409 	ubfx	r4, r4, #16, #10
			    & RANGE_MASK];
 8014f98:	f3c2 4209 	ubfx	r2, r2, #16, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 8014f9c:	5d3c      	ldrb	r4, [r7, r4]
 8014f9e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014fa0:	55f4      	strb	r4, [r6, r7]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 8014fa2:	9c01      	ldr	r4, [sp, #4]
 8014fa4:	5ca2      	ldrb	r2, [r4, r2]
 8014fa6:	f88c 2001 	strb.w	r2, [ip, #1]
  for (ctr = 0; ctr < 4; ctr++) {
 8014faa:	d1e1      	bne.n	8014f70 <jpeg_idct_2x4+0x8c>
  }
}
 8014fac:	b00b      	add	sp, #44	; 0x2c
 8014fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fb2:	bf00      	nop
 8014fb4:	ffffc4df 	.word	0xffffc4df

08014fb8 <jpeg_idct_1x2>:

GLOBAL(void)
jpeg_idct_1x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014fb8:	b570      	push	{r4, r5, r6, lr}
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* Process 1 column from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8014fba:	6d4c      	ldr	r4, [r1, #84]	; 0x54

  /* Even part */
    
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014fbc:	f9b2 6000 	ldrsh.w	r6, [r2]
 8014fc0:	6821      	ldr	r1, [r4, #0]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014fc2:	f8d0 014c 	ldr.w	r0, [r0, #332]	; 0x14c
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8014fc6:	4371      	muls	r1, r6
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014fc8:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8014fcc:	6a22      	ldr	r2, [r4, #32]
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8014fce:	3080      	adds	r0, #128	; 0x80
  tmp10 += ONE << 2;
 8014fd0:	3104      	adds	r1, #4
{
 8014fd2:	9d04      	ldr	r5, [sp, #16]
  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014fd4:	4372      	muls	r2, r6

  /* Final output stage */

  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 8014fd6:	188c      	adds	r4, r1, r2
					  & RANGE_MASK];
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8014fd8:	1a89      	subs	r1, r1, r2
					  & RANGE_MASK];
 8014fda:	f3c4 04c9 	ubfx	r4, r4, #3, #10
					  & RANGE_MASK];
 8014fde:	f3c1 01c9 	ubfx	r1, r1, #3, #10
  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 8014fe2:	5d06      	ldrb	r6, [r0, r4]
 8014fe4:	681c      	ldr	r4, [r3, #0]
 8014fe6:	5566      	strb	r6, [r4, r5]
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 8014fe8:	5c42      	ldrb	r2, [r0, r1]
 8014fea:	685b      	ldr	r3, [r3, #4]
 8014fec:	555a      	strb	r2, [r3, r5]
}
 8014fee:	bd70      	pop	{r4, r5, r6, pc}

08014ff0 <out_of_memory>:
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
 8014ff0:	6803      	ldr	r3, [r0, #0]
 8014ff2:	2238      	movs	r2, #56	; 0x38
 8014ff4:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	4718      	bx	r3

08014ffc <do_barray_io>:
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 8014ffc:	688b      	ldr	r3, [r1, #8]
{
 8014ffe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 8015002:	ea4f 18c3 	mov.w	r8, r3, lsl #7
  file_offset = ptr->cur_start_row * bytesperrow;
 8015006:	698b      	ldr	r3, [r1, #24]
{
 8015008:	b085      	sub	sp, #20
 801500a:	4681      	mov	r9, r0
 801500c:	460c      	mov	r4, r1
 801500e:	4692      	mov	sl, r2
  file_offset = ptr->cur_start_row * bytesperrow;
 8015010:	fb03 f708 	mul.w	r7, r3, r8
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015014:	2600      	movs	r6, #0
 8015016:	f101 0b30 	add.w	fp, r1, #48	; 0x30
 801501a:	6922      	ldr	r2, [r4, #16]
 801501c:	42b2      	cmp	r2, r6
 801501e:	dc02      	bgt.n	8015026 <do_barray_io+0x2a>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
    file_offset += byte_count;
  }
}
 8015020:	b005      	add	sp, #20
 8015022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8015026:	1b92      	subs	r2, r2, r6
 8015028:	6961      	ldr	r1, [r4, #20]
    thisrow = (long) ptr->cur_start_row + i;
 801502a:	69a0      	ldr	r0, [r4, #24]
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 801502c:	428a      	cmp	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 801502e:	6863      	ldr	r3, [r4, #4]
    thisrow = (long) ptr->cur_start_row + i;
 8015030:	eb06 0500 	add.w	r5, r6, r0
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8015034:	bfa8      	it	ge
 8015036:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015038:	69e1      	ldr	r1, [r4, #28]
 801503a:	1b49      	subs	r1, r1, r5
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 801503c:	1b5d      	subs	r5, r3, r5
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 801503e:	428a      	cmp	r2, r1
 8015040:	bfa8      	it	ge
 8015042:	460a      	movge	r2, r1
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8015044:	42aa      	cmp	r2, r5
 8015046:	bfa8      	it	ge
 8015048:	462a      	movge	r2, r5
    if (rows <= 0)		/* this chunk might be past end of file! */
 801504a:	2a00      	cmp	r2, #0
 801504c:	dde8      	ble.n	8015020 <do_barray_io+0x24>
    byte_count = rows * bytesperrow;
 801504e:	fb02 f308 	mul.w	r3, r2, r8
 8015052:	6822      	ldr	r2, [r4, #0]
 8015054:	9303      	str	r3, [sp, #12]
    if (writing)
 8015056:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 801505a:	f1ba 0f00 	cmp.w	sl, #0
 801505e:	d00a      	beq.n	8015076 <do_barray_io+0x7a>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8015060:	9300      	str	r3, [sp, #0]
 8015062:	4659      	mov	r1, fp
 8015064:	463b      	mov	r3, r7
 8015066:	4648      	mov	r0, r9
 8015068:	6b65      	ldr	r5, [r4, #52]	; 0x34
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 801506a:	47a8      	blx	r5
    file_offset += byte_count;
 801506c:	9b03      	ldr	r3, [sp, #12]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801506e:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8015070:	441f      	add	r7, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015072:	4416      	add	r6, r2
 8015074:	e7d1      	b.n	801501a <do_barray_io+0x1e>
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8015076:	9b03      	ldr	r3, [sp, #12]
 8015078:	4659      	mov	r1, fp
 801507a:	4648      	mov	r0, r9
 801507c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801507e:	9300      	str	r3, [sp, #0]
 8015080:	463b      	mov	r3, r7
 8015082:	e7f2      	b.n	801506a <do_barray_io+0x6e>

08015084 <alloc_small>:
{
 8015084:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8015088:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 801508c:	4606      	mov	r6, r0
 801508e:	460d      	mov	r5, r1
 8015090:	4614      	mov	r4, r2
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8015092:	429a      	cmp	r2, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8015094:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 8015096:	d902      	bls.n	801509e <alloc_small+0x1a>
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 8015098:	2101      	movs	r1, #1
 801509a:	f7ff ffa9 	bl	8014ff0 <out_of_memory>
  if (odd_bytes > 0)
 801509e:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 80150a2:	bf1c      	itt	ne
 80150a4:	3408      	addne	r4, #8
 80150a6:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 80150a8:	2d01      	cmp	r5, #1
 80150aa:	d906      	bls.n	80150ba <alloc_small+0x36>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 80150ac:	6833      	ldr	r3, [r6, #0]
 80150ae:	220f      	movs	r2, #15
 80150b0:	4630      	mov	r0, r6
 80150b2:	e9c3 2505 	strd	r2, r5, [r3, #20]
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	4798      	blx	r3
  hdr_ptr = mem->small_list[pool_id];
 80150ba:	eb07 0885 	add.w	r8, r7, r5, lsl #2
  prev_hdr_ptr = NULL;
 80150be:	f04f 0a00 	mov.w	sl, #0
  hdr_ptr = mem->small_list[pool_id];
 80150c2:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
  while (hdr_ptr != NULL) {
 80150c6:	b9e8      	cbnz	r0, 8015104 <alloc_small+0x80>
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
 80150c8:	f104 0910 	add.w	r9, r4, #16
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 80150cc:	f1ba 0f00 	cmp.w	sl, #0
 80150d0:	d11e      	bne.n	8015110 <alloc_small+0x8c>
      slop = first_pool_slop[pool_id];
 80150d2:	4b1d      	ldr	r3, [pc, #116]	; (8015148 <alloc_small+0xc4>)
      slop = extra_pool_slop[pool_id];
 80150d4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 80150d8:	f5c9 3580 	rsb	r5, r9, #65536	; 0x10000
 80150dc:	429d      	cmp	r5, r3
 80150de:	bf28      	it	cs
 80150e0:	461d      	movcs	r5, r3
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 80150e2:	eb05 0b09 	add.w	fp, r5, r9
 80150e6:	4630      	mov	r0, r6
 80150e8:	4659      	mov	r1, fp
 80150ea:	f000 fbcf 	bl	801588c <jpeg_get_small>
      if (hdr_ptr != NULL)
 80150ee:	b988      	cbnz	r0, 8015114 <alloc_small+0x90>
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 80150f0:	2d63      	cmp	r5, #99	; 0x63
      slop /= 2;
 80150f2:	ea4f 0b55 	mov.w	fp, r5, lsr #1
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 80150f6:	d803      	bhi.n	8015100 <alloc_small+0x7c>
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 80150f8:	2102      	movs	r1, #2
 80150fa:	4630      	mov	r0, r6
 80150fc:	f7ff ff78 	bl	8014ff0 <out_of_memory>
    hdr_ptr = hdr_ptr->hdr.next;
 8015100:	465d      	mov	r5, fp
 8015102:	e7ee      	b.n	80150e2 <alloc_small+0x5e>
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 8015104:	6883      	ldr	r3, [r0, #8]
 8015106:	42a3      	cmp	r3, r4
 8015108:	d211      	bcs.n	801512e <alloc_small+0xaa>
    hdr_ptr = hdr_ptr->hdr.next;
 801510a:	4682      	mov	sl, r0
 801510c:	6800      	ldr	r0, [r0, #0]
 801510e:	e7da      	b.n	80150c6 <alloc_small+0x42>
      slop = extra_pool_slop[pool_id];
 8015110:	4b0e      	ldr	r3, [pc, #56]	; (801514c <alloc_small+0xc8>)
 8015112:	e7df      	b.n	80150d4 <alloc_small+0x50>
    mem->total_space_allocated += min_request + slop;
 8015114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 8015116:	4425      	add	r5, r4
    mem->total_space_allocated += min_request + slop;
 8015118:	445b      	add	r3, fp
 801511a:	64fb      	str	r3, [r7, #76]	; 0x4c
    hdr_ptr->hdr.next = NULL;
 801511c:	2300      	movs	r3, #0
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 801511e:	6085      	str	r5, [r0, #8]
    hdr_ptr->hdr.bytes_used = 0;
 8015120:	e9c0 3300 	strd	r3, r3, [r0]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 8015124:	f1ba 0f00 	cmp.w	sl, #0
 8015128:	d10b      	bne.n	8015142 <alloc_small+0xbe>
      mem->small_list[pool_id] = hdr_ptr;
 801512a:	f8c8 0034 	str.w	r0, [r8, #52]	; 0x34
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 801512e:	6843      	ldr	r3, [r0, #4]
  hdr_ptr->hdr.bytes_used += sizeofobject;
 8015130:	191a      	adds	r2, r3, r4
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 8015132:	3310      	adds	r3, #16
  hdr_ptr->hdr.bytes_used += sizeofobject;
 8015134:	6042      	str	r2, [r0, #4]
  hdr_ptr->hdr.bytes_left -= sizeofobject;
 8015136:	6882      	ldr	r2, [r0, #8]
 8015138:	1b12      	subs	r2, r2, r4
 801513a:	6082      	str	r2, [r0, #8]
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 801513c:	4418      	add	r0, r3
}
 801513e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      prev_hdr_ptr->hdr.next = hdr_ptr;
 8015142:	f8ca 0000 	str.w	r0, [sl]
 8015146:	e7f2      	b.n	801512e <alloc_small+0xaa>
 8015148:	0802f26c 	.word	0x0802f26c
 801514c:	0802f264 	.word	0x0802f264

08015150 <request_virt_barray>:
  if (pool_id != JPOOL_IMAGE)
 8015150:	2901      	cmp	r1, #1
{
 8015152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015156:	4604      	mov	r4, r0
 8015158:	460d      	mov	r5, r1
 801515a:	4616      	mov	r6, r2
 801515c:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801515e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 8015162:	d005      	beq.n	8015170 <request_virt_barray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 8015164:	6803      	ldr	r3, [r0, #0]
 8015166:	220f      	movs	r2, #15
 8015168:	e9c3 2105 	strd	r2, r1, [r3, #20]
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	4798      	blx	r3
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 8015170:	223c      	movs	r2, #60	; 0x3c
 8015172:	4629      	mov	r1, r5
 8015174:	4620      	mov	r0, r4
 8015176:	f7ff ff85 	bl	8015084 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 801517a:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 801517c:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 801517e:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 8015180:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 8015182:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
  result->pre_zero = pre_zero;
 8015186:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 8015188:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->blocksperrow = blocksperrow;
 801518a:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 801518e:	9a07      	ldr	r2, [sp, #28]
 8015190:	60c2      	str	r2, [r0, #12]
  mem->virt_barray_list = result;
 8015192:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
}
 8015196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801519a <request_virt_sarray>:
  if (pool_id != JPOOL_IMAGE)
 801519a:	2901      	cmp	r1, #1
{
 801519c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151a0:	4604      	mov	r4, r0
 80151a2:	460d      	mov	r5, r1
 80151a4:	4616      	mov	r6, r2
 80151a6:	461f      	mov	r7, r3
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80151a8:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (pool_id != JPOOL_IMAGE)
 80151ac:	d005      	beq.n	80151ba <request_virt_sarray+0x20>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 80151ae:	6803      	ldr	r3, [r0, #0]
 80151b0:	220f      	movs	r2, #15
 80151b2:	e9c3 2105 	strd	r2, r1, [r3, #20]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	4798      	blx	r3
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 80151ba:	223c      	movs	r2, #60	; 0x3c
 80151bc:	4629      	mov	r1, r5
 80151be:	4620      	mov	r0, r4
 80151c0:	f7ff ff60 	bl	8015084 <alloc_small>
  result->mem_buffer = NULL;	/* marks array not yet realized */
 80151c4:	2300      	movs	r3, #0
  result->rows_in_array = numrows;
 80151c6:	9a06      	ldr	r2, [sp, #24]
  result->mem_buffer = NULL;	/* marks array not yet realized */
 80151c8:	6003      	str	r3, [r0, #0]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 80151ca:	6283      	str	r3, [r0, #40]	; 0x28
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 80151cc:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  result->pre_zero = pre_zero;
 80151d0:	6206      	str	r6, [r0, #32]
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 80151d2:	62c3      	str	r3, [r0, #44]	; 0x2c
  result->samplesperrow = samplesperrow;
 80151d4:	e9c0 2701 	strd	r2, r7, [r0, #4]
  result->maxaccess = maxaccess;
 80151d8:	9a07      	ldr	r2, [sp, #28]
 80151da:	60c2      	str	r2, [r0, #12]
  mem->virt_sarray_list = result;
 80151dc:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
}
 80151e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080151e4 <free_pool>:
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 80151e4:	2901      	cmp	r1, #1
{
 80151e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151ea:	4606      	mov	r6, r0
 80151ec:	4688      	mov	r8, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80151ee:	6845      	ldr	r5, [r0, #4]
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 80151f0:	d910      	bls.n	8015214 <free_pool+0x30>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 80151f2:	6803      	ldr	r3, [r0, #0]
 80151f4:	220f      	movs	r2, #15
 80151f6:	e9c3 2105 	strd	r2, r1, [r3, #20]
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	4798      	blx	r3
    }
    mem->virt_barray_list = NULL;
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
 80151fe:	eb05 0488 	add.w	r4, r5, r8, lsl #2
  mem->large_list[pool_id] = NULL;
 8015202:	2200      	movs	r2, #0
  lhdr_ptr = mem->large_list[pool_id];
 8015204:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  mem->large_list[pool_id] = NULL;
 8015206:	63e2      	str	r2, [r4, #60]	; 0x3c

  while (lhdr_ptr != NULL) {
 8015208:	bb0b      	cbnz	r3, 801524e <free_pool+0x6a>
    mem->total_space_allocated -= space_freed;
    lhdr_ptr = next_lhdr_ptr;
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
 801520a:	6b61      	ldr	r1, [r4, #52]	; 0x34
  mem->small_list[pool_id] = NULL;
 801520c:	6363      	str	r3, [r4, #52]	; 0x34

  while (shdr_ptr != NULL) {
 801520e:	bb69      	cbnz	r1, 801526c <free_pool+0x88>
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
    mem->total_space_allocated -= space_freed;
    shdr_ptr = next_shdr_ptr;
  }
}
 8015210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pool_id == JPOOL_IMAGE) {
 8015214:	d1f3      	bne.n	80151fe <free_pool+0x1a>
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015216:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8015218:	2700      	movs	r7, #0
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 801521a:	b924      	cbnz	r4, 8015226 <free_pool+0x42>
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801521c:	6caf      	ldr	r7, [r5, #72]	; 0x48
    mem->virt_sarray_list = NULL;
 801521e:	646c      	str	r4, [r5, #68]	; 0x44
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8015220:	b95f      	cbnz	r7, 801523a <free_pool+0x56>
    mem->virt_barray_list = NULL;
 8015222:	64af      	str	r7, [r5, #72]	; 0x48
 8015224:	e7eb      	b.n	80151fe <free_pool+0x1a>
      if (sptr->b_s_open) {	/* there may be no backing store */
 8015226:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015228:	b12b      	cbz	r3, 8015236 <free_pool+0x52>
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 801522a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801522c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8015230:	4630      	mov	r0, r6
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8015232:	62a7      	str	r7, [r4, #40]	; 0x28
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 8015234:	4798      	blx	r3
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015236:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8015238:	e7ef      	b.n	801521a <free_pool+0x36>
      if (bptr->b_s_open) {	/* there may be no backing store */
 801523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801523c:	b12b      	cbz	r3, 801524a <free_pool+0x66>
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 801523e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015240:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8015244:	4630      	mov	r0, r6
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 8015246:	62bc      	str	r4, [r7, #40]	; 0x28
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 8015248:	4798      	blx	r3
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801524a:	6aff      	ldr	r7, [r7, #44]	; 0x2c
 801524c:	e7e8      	b.n	8015220 <free_pool+0x3c>
    space_freed = lhdr_ptr->hdr.bytes_used +
 801524e:	689a      	ldr	r2, [r3, #8]
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 8015250:	4619      	mov	r1, r3
 8015252:	4630      	mov	r0, r6
    space_freed = lhdr_ptr->hdr.bytes_used +
 8015254:	e9d3 8700 	ldrd	r8, r7, [r3]
 8015258:	4417      	add	r7, r2
 801525a:	3710      	adds	r7, #16
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 801525c:	463a      	mov	r2, r7
 801525e:	f000 fb1e 	bl	801589e <jpeg_free_large>
    mem->total_space_allocated -= space_freed;
 8015262:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    lhdr_ptr = next_lhdr_ptr;
 8015264:	4643      	mov	r3, r8
    mem->total_space_allocated -= space_freed;
 8015266:	1bd2      	subs	r2, r2, r7
 8015268:	64ea      	str	r2, [r5, #76]	; 0x4c
    lhdr_ptr = next_lhdr_ptr;
 801526a:	e7cd      	b.n	8015208 <free_pool+0x24>
    space_freed = shdr_ptr->hdr.bytes_used +
 801526c:	688a      	ldr	r2, [r1, #8]
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 801526e:	4630      	mov	r0, r6
    space_freed = shdr_ptr->hdr.bytes_used +
 8015270:	e9d1 7400 	ldrd	r7, r4, [r1]
 8015274:	4414      	add	r4, r2
 8015276:	3410      	adds	r4, #16
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 8015278:	4622      	mov	r2, r4
 801527a:	f000 fb0a 	bl	8015892 <jpeg_free_small>
    mem->total_space_allocated -= space_freed;
 801527e:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 8015280:	4639      	mov	r1, r7
    mem->total_space_allocated -= space_freed;
 8015282:	1b12      	subs	r2, r2, r4
 8015284:	64ea      	str	r2, [r5, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 8015286:	e7c2      	b.n	801520e <free_pool+0x2a>

08015288 <self_destruct>:
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
 8015288:	b510      	push	{r4, lr}
 801528a:	4604      	mov	r4, r0
  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    free_pool(cinfo, pool);
 801528c:	2101      	movs	r1, #1
 801528e:	f7ff ffa9 	bl	80151e4 <free_pool>
 8015292:	2100      	movs	r1, #0
 8015294:	4620      	mov	r0, r4
 8015296:	f7ff ffa5 	bl	80151e4 <free_pool>
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 801529a:	4620      	mov	r0, r4
 801529c:	6861      	ldr	r1, [r4, #4]
 801529e:	2254      	movs	r2, #84	; 0x54
 80152a0:	f000 faf7 	bl	8015892 <jpeg_free_small>
  cinfo->mem = NULL;		/* ensures I will be called only once */
 80152a4:	2300      	movs	r3, #0

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 80152a6:	4620      	mov	r0, r4
  cinfo->mem = NULL;		/* ensures I will be called only once */
 80152a8:	6063      	str	r3, [r4, #4]
}
 80152aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 80152ae:	f000 bb02 	b.w	80158b6 <jpeg_mem_term>

080152b2 <access_virt_barray>:
{
 80152b2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  JDIMENSION end_row = start_row + num_rows;
 80152b6:	18d7      	adds	r7, r2, r3
{
 80152b8:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80152ba:	684a      	ldr	r2, [r1, #4]
{
 80152bc:	460c      	mov	r4, r1
 80152be:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 80152c2:	42ba      	cmp	r2, r7
 80152c4:	d304      	bcc.n	80152d0 <access_virt_barray+0x1e>
 80152c6:	68ca      	ldr	r2, [r1, #12]
 80152c8:	429a      	cmp	r2, r3
 80152ca:	d301      	bcc.n	80152d0 <access_virt_barray+0x1e>
 80152cc:	680b      	ldr	r3, [r1, #0]
 80152ce:	b933      	cbnz	r3, 80152de <access_virt_barray+0x2c>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80152d0:	6803      	ldr	r3, [r0, #0]
 80152d2:	2217      	movs	r2, #23
 80152d4:	9001      	str	r0, [sp, #4]
 80152d6:	615a      	str	r2, [r3, #20]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	4798      	blx	r3
 80152dc:	9801      	ldr	r0, [sp, #4]
  if (start_row < ptr->cur_start_row ||
 80152de:	69a3      	ldr	r3, [r4, #24]
 80152e0:	42ab      	cmp	r3, r5
 80152e2:	d803      	bhi.n	80152ec <access_virt_barray+0x3a>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 80152e4:	6922      	ldr	r2, [r4, #16]
 80152e6:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 80152e8:	42bb      	cmp	r3, r7
 80152ea:	d221      	bcs.n	8015330 <access_virt_barray+0x7e>
    if (! ptr->b_s_open)
 80152ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80152ee:	b933      	cbnz	r3, 80152fe <access_virt_barray+0x4c>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 80152f0:	6803      	ldr	r3, [r0, #0]
 80152f2:	2247      	movs	r2, #71	; 0x47
 80152f4:	9001      	str	r0, [sp, #4]
 80152f6:	615a      	str	r2, [r3, #20]
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	4798      	blx	r3
 80152fc:	9801      	ldr	r0, [sp, #4]
    if (ptr->dirty) {
 80152fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015300:	b13b      	cbz	r3, 8015312 <access_virt_barray+0x60>
      do_barray_io(cinfo, ptr, TRUE);
 8015302:	2201      	movs	r2, #1
 8015304:	4621      	mov	r1, r4
 8015306:	9001      	str	r0, [sp, #4]
 8015308:	f7ff fe78 	bl	8014ffc <do_barray_io>
      ptr->dirty = FALSE;
 801530c:	2300      	movs	r3, #0
 801530e:	9801      	ldr	r0, [sp, #4]
 8015310:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 8015312:	69a3      	ldr	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 8015314:	2200      	movs	r2, #0
 8015316:	4621      	mov	r1, r4
 8015318:	9001      	str	r0, [sp, #4]
    if (start_row > ptr->cur_start_row) {
 801531a:	42ab      	cmp	r3, r5
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 801531c:	bf29      	itett	cs
 801531e:	6923      	ldrcs	r3, [r4, #16]
 8015320:	462b      	movcc	r3, r5
 8015322:	1afb      	subcs	r3, r7, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 8015324:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 8015328:	61a3      	str	r3, [r4, #24]
    do_barray_io(cinfo, ptr, FALSE);
 801532a:	f7ff fe67 	bl	8014ffc <do_barray_io>
 801532e:	9801      	ldr	r0, [sp, #4]
  if (ptr->first_undef_row < end_row) {
 8015330:	69e6      	ldr	r6, [r4, #28]
 8015332:	42be      	cmp	r6, r7
 8015334:	d21c      	bcs.n	8015370 <access_virt_barray+0xbe>
    if (ptr->first_undef_row < start_row) {
 8015336:	42ae      	cmp	r6, r5
 8015338:	d20c      	bcs.n	8015354 <access_virt_barray+0xa2>
      if (writable)		/* writer skipped over a section of array */
 801533a:	f1b8 0f00 	cmp.w	r8, #0
 801533e:	d01b      	beq.n	8015378 <access_virt_barray+0xc6>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 8015340:	6803      	ldr	r3, [r0, #0]
 8015342:	2217      	movs	r2, #23
 8015344:	9001      	str	r0, [sp, #4]
 8015346:	462e      	mov	r6, r5
 8015348:	615a      	str	r2, [r3, #20]
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	4798      	blx	r3
    if (writable)
 801534e:	9801      	ldr	r0, [sp, #4]
      ptr->first_undef_row = end_row;
 8015350:	61e7      	str	r7, [r4, #28]
 8015352:	e002      	b.n	801535a <access_virt_barray+0xa8>
    if (writable)
 8015354:	f1b8 0f00 	cmp.w	r8, #0
 8015358:	d1fa      	bne.n	8015350 <access_virt_barray+0x9e>
    if (ptr->pre_zero) {
 801535a:	6a22      	ldr	r2, [r4, #32]
 801535c:	b1b2      	cbz	r2, 801538c <access_virt_barray+0xda>
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 801535e:	68a2      	ldr	r2, [r4, #8]
 8015360:	ea4f 19c2 	mov.w	r9, r2, lsl #7
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 8015364:	69a2      	ldr	r2, [r4, #24]
 8015366:	1ab6      	subs	r6, r6, r2
      end_row -= ptr->cur_start_row;
 8015368:	1abf      	subs	r7, r7, r2
      while (undef_row < end_row) {
 801536a:	42be      	cmp	r6, r7
 801536c:	6823      	ldr	r3, [r4, #0]
 801536e:	d305      	bcc.n	801537c <access_virt_barray+0xca>
  if (writable)
 8015370:	f1b8 0f00 	cmp.w	r8, #0
 8015374:	d00f      	beq.n	8015396 <access_virt_barray+0xe4>
 8015376:	e00c      	b.n	8015392 <access_virt_barray+0xe0>
 8015378:	462e      	mov	r6, r5
 801537a:	e7ee      	b.n	801535a <access_virt_barray+0xa8>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 801537c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015380:	464a      	mov	r2, r9
 8015382:	2100      	movs	r1, #0
	undef_row++;
 8015384:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 8015386:	f014 fdf3 	bl	8029f70 <memset>
	undef_row++;
 801538a:	e7ee      	b.n	801536a <access_virt_barray+0xb8>
      if (! writable)		/* reader looking at undefined data */
 801538c:	f1b8 0f00 	cmp.w	r8, #0
 8015390:	d009      	beq.n	80153a6 <access_virt_barray+0xf4>
    ptr->dirty = TRUE;
 8015392:	2301      	movs	r3, #1
 8015394:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 8015396:	69a0      	ldr	r0, [r4, #24]
 8015398:	1a2d      	subs	r5, r5, r0
 801539a:	6820      	ldr	r0, [r4, #0]
}
 801539c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80153a0:	b003      	add	sp, #12
 80153a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80153a6:	6803      	ldr	r3, [r0, #0]
 80153a8:	2217      	movs	r2, #23
 80153aa:	615a      	str	r2, [r3, #20]
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	4798      	blx	r3
  if (writable)
 80153b0:	e7f1      	b.n	8015396 <access_virt_barray+0xe4>

080153b2 <alloc_large>:
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 80153b2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80153b6:	429a      	cmp	r2, r3
{
 80153b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153bc:	4606      	mov	r6, r0
 80153be:	4688      	mov	r8, r1
 80153c0:	4614      	mov	r4, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80153c2:	6847      	ldr	r7, [r0, #4]
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 80153c4:	d902      	bls.n	80153cc <alloc_large+0x1a>
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 80153c6:	2103      	movs	r1, #3
 80153c8:	f7ff fe12 	bl	8014ff0 <out_of_memory>
  if (odd_bytes > 0)
 80153cc:	f014 0307 	ands.w	r3, r4, #7
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 80153d0:	bf1c      	itt	ne
 80153d2:	3408      	addne	r4, #8
 80153d4:	1ae4      	subne	r4, r4, r3
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 80153d6:	f1b8 0f01 	cmp.w	r8, #1
 80153da:	d906      	bls.n	80153ea <alloc_large+0x38>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 80153dc:	6833      	ldr	r3, [r6, #0]
 80153de:	220f      	movs	r2, #15
 80153e0:	4630      	mov	r0, r6
 80153e2:	e9c3 2805 	strd	r2, r8, [r3, #20]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	4798      	blx	r3
  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 80153ea:	f104 0110 	add.w	r1, r4, #16
 80153ee:	4630      	mov	r0, r6
 80153f0:	f000 fa52 	bl	8015898 <jpeg_get_large>
  if (hdr_ptr == NULL)
 80153f4:	4605      	mov	r5, r0
 80153f6:	b918      	cbnz	r0, 8015400 <alloc_large+0x4e>
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 80153f8:	2104      	movs	r1, #4
 80153fa:	4630      	mov	r0, r6
 80153fc:	f7ff fdf8 	bl	8014ff0 <out_of_memory>
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 8015400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8015402:	f105 0010 	add.w	r0, r5, #16
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 8015406:	3310      	adds	r3, #16
 8015408:	4423      	add	r3, r4
 801540a:	64fb      	str	r3, [r7, #76]	; 0x4c
  hdr_ptr->hdr.next = mem->large_list[pool_id];
 801540c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8015410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  hdr_ptr->hdr.bytes_used = sizeofobject;
 8015412:	e9c5 3400 	strd	r3, r4, [r5]
  hdr_ptr->hdr.bytes_left = 0;
 8015416:	2300      	movs	r3, #0
 8015418:	60ab      	str	r3, [r5, #8]
  mem->large_list[pool_id] = hdr_ptr;
 801541a:	63fd      	str	r5, [r7, #60]	; 0x3c
}
 801541c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015420 <alloc_barray>:
{
 8015420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	  ((long) blocksperrow * SIZEOF(JBLOCK));
 8015424:	01d7      	lsls	r7, r2, #7
{
 8015426:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8015428:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 801542c:	4680      	mov	r8, r0
 801542e:	468a      	mov	sl, r1
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8015430:	6846      	ldr	r6, [r0, #4]
  if (ltemp <= 0)
 8015432:	429f      	cmp	r7, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8015434:	fbb3 f4f7 	udiv	r4, r3, r7
  if (ltemp <= 0)
 8015438:	d904      	bls.n	8015444 <alloc_barray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 801543a:	6803      	ldr	r3, [r0, #0]
 801543c:	2248      	movs	r2, #72	; 0x48
 801543e:	615a      	str	r2, [r3, #20]
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	4798      	blx	r3
  if (ltemp < (long) numrows)
 8015444:	42ac      	cmp	r4, r5
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8015446:	ea4f 0285 	mov.w	r2, r5, lsl #2
 801544a:	4651      	mov	r1, sl
 801544c:	4640      	mov	r0, r8
  if (ltemp < (long) numrows)
 801544e:	bfa8      	it	ge
 8015450:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 8015452:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 8015454:	2600      	movs	r6, #0
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 8015456:	f7ff fe15 	bl	8015084 <alloc_small>
 801545a:	4681      	mov	r9, r0
  while (currow < numrows) {
 801545c:	42ae      	cmp	r6, r5
 801545e:	d302      	bcc.n	8015466 <alloc_barray+0x46>
}
 8015460:	4648      	mov	r0, r9
 8015462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 8015466:	1bab      	subs	r3, r5, r6
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8015468:	4651      	mov	r1, sl
 801546a:	4640      	mov	r0, r8
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 801546c:	429c      	cmp	r4, r3
 801546e:	bf28      	it	cs
 8015470:	461c      	movcs	r4, r3
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 8015472:	fb04 f207 	mul.w	r2, r4, r7
 8015476:	f7ff ff9c 	bl	80153b2 <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 801547a:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 801547e:	4426      	add	r6, r4
 8015480:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 8015484:	4293      	cmp	r3, r2
 8015486:	d0e9      	beq.n	801545c <alloc_barray+0x3c>
      result[currow++] = workspace;
 8015488:	f843 0b04 	str.w	r0, [r3], #4
      workspace += blocksperrow;
 801548c:	4438      	add	r0, r7
    for (i = rowsperchunk; i > 0; i--) {
 801548e:	e7f9      	b.n	8015484 <alloc_barray+0x64>

08015490 <alloc_sarray>:
{
 8015490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015494:	461d      	mov	r5, r3
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 8015496:	f64f 73f0 	movw	r3, #65520	; 0xfff0
{
 801549a:	4607      	mov	r7, r0
 801549c:	468a      	mov	sl, r1
  if (ltemp <= 0)
 801549e:	429a      	cmp	r2, r3
{
 80154a0:	4690      	mov	r8, r2
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 80154a2:	6846      	ldr	r6, [r0, #4]
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 80154a4:	fbb3 f4f2 	udiv	r4, r3, r2
  if (ltemp <= 0)
 80154a8:	d904      	bls.n	80154b4 <alloc_sarray+0x24>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 80154aa:	6803      	ldr	r3, [r0, #0]
 80154ac:	2248      	movs	r2, #72	; 0x48
 80154ae:	615a      	str	r2, [r3, #20]
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	4798      	blx	r3
  if (ltemp < (long) numrows)
 80154b4:	42ac      	cmp	r4, r5
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 80154b6:	ea4f 0285 	mov.w	r2, r5, lsl #2
 80154ba:	4651      	mov	r1, sl
 80154bc:	4638      	mov	r0, r7
  if (ltemp < (long) numrows)
 80154be:	bfa8      	it	ge
 80154c0:	462c      	movge	r4, r5
  mem->last_rowsperchunk = rowsperchunk;
 80154c2:	6534      	str	r4, [r6, #80]	; 0x50
  currow = 0;
 80154c4:	2600      	movs	r6, #0
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 80154c6:	f7ff fddd 	bl	8015084 <alloc_small>
 80154ca:	4681      	mov	r9, r0
  while (currow < numrows) {
 80154cc:	42ae      	cmp	r6, r5
 80154ce:	d302      	bcc.n	80154d6 <alloc_sarray+0x46>
}
 80154d0:	4648      	mov	r0, r9
 80154d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 80154d6:	1bab      	subs	r3, r5, r6
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 80154d8:	4651      	mov	r1, sl
 80154da:	4638      	mov	r0, r7
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 80154dc:	429c      	cmp	r4, r3
 80154de:	bf28      	it	cs
 80154e0:	461c      	movcs	r4, r3
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 80154e2:	fb04 f208 	mul.w	r2, r4, r8
 80154e6:	f7ff ff64 	bl	80153b2 <alloc_large>
    for (i = rowsperchunk; i > 0; i--) {
 80154ea:	eb09 0386 	add.w	r3, r9, r6, lsl #2
 80154ee:	4426      	add	r6, r4
 80154f0:	eb09 0286 	add.w	r2, r9, r6, lsl #2
 80154f4:	4293      	cmp	r3, r2
 80154f6:	d0e9      	beq.n	80154cc <alloc_sarray+0x3c>
      result[currow++] = workspace;
 80154f8:	f843 0b04 	str.w	r0, [r3], #4
      workspace += samplesperrow;
 80154fc:	4440      	add	r0, r8
    for (i = rowsperchunk; i > 0; i--) {
 80154fe:	e7f9      	b.n	80154f4 <alloc_sarray+0x64>

08015500 <realize_virt_arrays>:
{
 8015500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 8015504:	f8d0 8004 	ldr.w	r8, [r0, #4]
  maximum_space = 0;
 8015508:	2500      	movs	r5, #0
{
 801550a:	4607      	mov	r7, r0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 801550c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
  space_per_minheight = 0;
 8015510:	462e      	mov	r6, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015512:	bb03      	cbnz	r3, 8015556 <realize_virt_arrays+0x56>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8015514:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8015518:	bb43      	cbnz	r3, 801556c <realize_virt_arrays+0x6c>
  if (space_per_minheight <= 0)
 801551a:	2e00      	cmp	r6, #0
 801551c:	dd19      	ble.n	8015552 <realize_virt_arrays+0x52>
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 801551e:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8015522:	462a      	mov	r2, r5
 8015524:	4631      	mov	r1, r6
 8015526:	4638      	mov	r0, r7
 8015528:	f000 f9bc 	bl	80158a4 <jpeg_mem_available>
  if (avail_mem >= maximum_space)
 801552c:	4285      	cmp	r5, r0
 801552e:	dd2a      	ble.n	8015586 <realize_virt_arrays+0x86>
    max_minheights = avail_mem / space_per_minheight;
 8015530:	fb90 f6f6 	sdiv	r6, r0, r6
 8015534:	2e01      	cmp	r6, #1
 8015536:	bfb8      	it	lt
 8015538:	2601      	movlt	r6, #1
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 801553a:	f8d8 4044 	ldr.w	r4, [r8, #68]	; 0x44
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 801553e:	f04f 0901 	mov.w	r9, #1
      sptr->cur_start_row = 0;
 8015542:	2500      	movs	r5, #0
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015544:	bb0c      	cbnz	r4, 801558a <realize_virt_arrays+0x8a>
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8015546:	f8d8 5048 	ldr.w	r5, [r8, #72]	; 0x48
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 801554a:	f04f 0901 	mov.w	r9, #1
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801554e:	2d00      	cmp	r5, #0
 8015550:	d141      	bne.n	80155d6 <realize_virt_arrays+0xd6>
}
 8015552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 8015556:	681a      	ldr	r2, [r3, #0]
 8015558:	b932      	cbnz	r2, 8015568 <realize_virt_arrays+0x68>
      space_per_minheight += (long) sptr->maxaccess *
 801555a:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 801555e:	fb01 6602 	mla	r6, r1, r2, r6
      maximum_space += (long) sptr->rows_in_array *
 8015562:	6859      	ldr	r1, [r3, #4]
 8015564:	fb01 5502 	mla	r5, r1, r2, r5
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 8015568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801556a:	e7d2      	b.n	8015512 <realize_virt_arrays+0x12>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 801556c:	681a      	ldr	r2, [r3, #0]
 801556e:	b942      	cbnz	r2, 8015582 <realize_virt_arrays+0x82>
      maximum_space += (long) bptr->rows_in_array *
 8015570:	685a      	ldr	r2, [r3, #4]
      space_per_minheight += (long) bptr->maxaccess *
 8015572:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8015576:	4341      	muls	r1, r0
      maximum_space += (long) bptr->rows_in_array *
 8015578:	4342      	muls	r2, r0
      space_per_minheight += (long) bptr->maxaccess *
 801557a:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
      maximum_space += (long) bptr->rows_in_array *
 801557e:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8015582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015584:	e7c8      	b.n	8015518 <realize_virt_arrays+0x18>
    max_minheights = 1000000000L;
 8015586:	4e27      	ldr	r6, [pc, #156]	; (8015624 <realize_virt_arrays+0x124>)
 8015588:	e7d7      	b.n	801553a <realize_virt_arrays+0x3a>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 801558a:	6823      	ldr	r3, [r4, #0]
 801558c:	b9ab      	cbnz	r3, 80155ba <realize_virt_arrays+0xba>
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 801558e:	6862      	ldr	r2, [r4, #4]
 8015590:	68e1      	ldr	r1, [r4, #12]
 8015592:	1e53      	subs	r3, r2, #1
 8015594:	fbb3 f3f1 	udiv	r3, r3, r1
 8015598:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 801559a:	429e      	cmp	r6, r3
 801559c:	db0f      	blt.n	80155be <realize_virt_arrays+0xbe>
	sptr->rows_in_mem = sptr->rows_in_array;
 801559e:	6122      	str	r2, [r4, #16]
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 80155a0:	6923      	ldr	r3, [r4, #16]
 80155a2:	2101      	movs	r1, #1
 80155a4:	68a2      	ldr	r2, [r4, #8]
 80155a6:	4638      	mov	r0, r7
 80155a8:	f7ff ff72 	bl	8015490 <alloc_sarray>
      sptr->rowsperchunk = mem->last_rowsperchunk;
 80155ac:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 80155b0:	6020      	str	r0, [r4, #0]
      sptr->first_undef_row = 0;
 80155b2:	61e5      	str	r5, [r4, #28]
      sptr->dirty = FALSE;
 80155b4:	6265      	str	r5, [r4, #36]	; 0x24
      sptr->cur_start_row = 0;
 80155b6:	e9c4 3505 	strd	r3, r5, [r4, #20]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 80155ba:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80155bc:	e7c2      	b.n	8015544 <realize_virt_arrays+0x44>
 80155be:	68a3      	ldr	r3, [r4, #8]
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 80155c0:	4371      	muls	r1, r6
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 80155c2:	4638      	mov	r0, r7
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 80155c4:	6121      	str	r1, [r4, #16]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 80155c6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80155ca:	435a      	muls	r2, r3
 80155cc:	f000 f96c 	bl	80158a8 <jpeg_open_backing_store>
	sptr->b_s_open = TRUE;
 80155d0:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
 80155d4:	e7e4      	b.n	80155a0 <realize_virt_arrays+0xa0>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 80155d6:	682b      	ldr	r3, [r5, #0]
 80155d8:	b9ab      	cbnz	r3, 8015606 <realize_virt_arrays+0x106>
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 80155da:	686a      	ldr	r2, [r5, #4]
 80155dc:	68e9      	ldr	r1, [r5, #12]
 80155de:	1e53      	subs	r3, r2, #1
 80155e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80155e4:	3301      	adds	r3, #1
      if (minheights <= max_minheights) {
 80155e6:	429e      	cmp	r6, r3
 80155e8:	db0f      	blt.n	801560a <realize_virt_arrays+0x10a>
	bptr->rows_in_mem = bptr->rows_in_array;
 80155ea:	612a      	str	r2, [r5, #16]
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 80155ec:	692b      	ldr	r3, [r5, #16]
 80155ee:	2101      	movs	r1, #1
 80155f0:	68aa      	ldr	r2, [r5, #8]
 80155f2:	4638      	mov	r0, r7
 80155f4:	f7ff ff14 	bl	8015420 <alloc_barray>
      bptr->rowsperchunk = mem->last_rowsperchunk;
 80155f8:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 80155fc:	6028      	str	r0, [r5, #0]
      bptr->first_undef_row = 0;
 80155fe:	61ec      	str	r4, [r5, #28]
      bptr->dirty = FALSE;
 8015600:	626c      	str	r4, [r5, #36]	; 0x24
      bptr->cur_start_row = 0;
 8015602:	e9c5 3405 	strd	r3, r4, [r5, #20]
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 8015606:	6aed      	ldr	r5, [r5, #44]	; 0x2c
 8015608:	e7a1      	b.n	801554e <realize_virt_arrays+0x4e>
 801560a:	68ab      	ldr	r3, [r5, #8]
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 801560c:	4371      	muls	r1, r6
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 801560e:	4638      	mov	r0, r7
				(long) bptr->rows_in_array *
 8015610:	435a      	muls	r2, r3
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 8015612:	6129      	str	r1, [r5, #16]
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 8015614:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8015618:	01d2      	lsls	r2, r2, #7
 801561a:	f000 f945 	bl	80158a8 <jpeg_open_backing_store>
	bptr->b_s_open = TRUE;
 801561e:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8015622:	e7e3      	b.n	80155ec <realize_virt_arrays+0xec>
 8015624:	3b9aca00 	.word	0x3b9aca00

08015628 <access_virt_sarray>:
{
 8015628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  JDIMENSION end_row = start_row + num_rows;
 801562c:	eb02 0803 	add.w	r8, r2, r3
{
 8015630:	4615      	mov	r5, r2
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8015632:	684a      	ldr	r2, [r1, #4]
{
 8015634:	b087      	sub	sp, #28
 8015636:	460c      	mov	r4, r1
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 8015638:	4542      	cmp	r2, r8
{
 801563a:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 801563e:	d304      	bcc.n	801564a <access_virt_sarray+0x22>
 8015640:	68ca      	ldr	r2, [r1, #12]
 8015642:	429a      	cmp	r2, r3
 8015644:	d301      	bcc.n	801564a <access_virt_sarray+0x22>
 8015646:	680b      	ldr	r3, [r1, #0]
 8015648:	b933      	cbnz	r3, 8015658 <access_virt_sarray+0x30>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801564a:	6803      	ldr	r3, [r0, #0]
 801564c:	2217      	movs	r2, #23
 801564e:	9003      	str	r0, [sp, #12]
 8015650:	615a      	str	r2, [r3, #20]
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	4798      	blx	r3
 8015656:	9803      	ldr	r0, [sp, #12]
  if (start_row < ptr->cur_start_row ||
 8015658:	69a3      	ldr	r3, [r4, #24]
 801565a:	42ab      	cmp	r3, r5
 801565c:	d80c      	bhi.n	8015678 <access_virt_sarray+0x50>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 801565e:	6922      	ldr	r2, [r4, #16]
 8015660:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 8015662:	4543      	cmp	r3, r8
 8015664:	d308      	bcc.n	8015678 <access_virt_sarray+0x50>
  if (ptr->first_undef_row < end_row) {
 8015666:	69e6      	ldr	r6, [r4, #28]
 8015668:	4546      	cmp	r6, r8
 801566a:	f0c0 8082 	bcc.w	8015772 <access_virt_sarray+0x14a>
  if (writable)
 801566e:	f1ba 0f00 	cmp.w	sl, #0
 8015672:	f000 80ab 	beq.w	80157cc <access_virt_sarray+0x1a4>
 8015676:	e0a7      	b.n	80157c8 <access_virt_sarray+0x1a0>
    if (! ptr->b_s_open)
 8015678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801567a:	b933      	cbnz	r3, 801568a <access_virt_sarray+0x62>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 801567c:	6803      	ldr	r3, [r0, #0]
 801567e:	2247      	movs	r2, #71	; 0x47
 8015680:	9003      	str	r0, [sp, #12]
 8015682:	615a      	str	r2, [r3, #20]
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	4798      	blx	r3
 8015688:	9803      	ldr	r0, [sp, #12]
    if (ptr->dirty) {
 801568a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801568c:	b17b      	cbz	r3, 80156ae <access_virt_sarray+0x86>
 801568e:	f8d4 b008 	ldr.w	fp, [r4, #8]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015692:	f04f 0900 	mov.w	r9, #0
  file_offset = ptr->cur_start_row * bytesperrow;
 8015696:	69a3      	ldr	r3, [r4, #24]
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8015698:	f104 0130 	add.w	r1, r4, #48	; 0x30
  file_offset = ptr->cur_start_row * bytesperrow;
 801569c:	fb03 f30b 	mul.w	r3, r3, fp
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80156a0:	6922      	ldr	r2, [r4, #16]
 80156a2:	454a      	cmp	r2, r9
 80156a4:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 80156a8:	dc3c      	bgt.n	8015724 <access_virt_sarray+0xfc>
      ptr->dirty = FALSE;
 80156aa:	2300      	movs	r3, #0
 80156ac:	6263      	str	r3, [r4, #36]	; 0x24
    if (start_row > ptr->cur_start_row) {
 80156ae:	69a2      	ldr	r2, [r4, #24]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80156b0:	f04f 0900 	mov.w	r9, #0
 80156b4:	6923      	ldr	r3, [r4, #16]
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 80156b6:	f104 0130 	add.w	r1, r4, #48	; 0x30
    if (start_row > ptr->cur_start_row) {
 80156ba:	42aa      	cmp	r2, r5
  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 80156bc:	f8d4 b008 	ldr.w	fp, [r4, #8]
      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 80156c0:	bf2a      	itet	cs
 80156c2:	eba8 0303 	subcs.w	r3, r8, r3
      ptr->cur_start_row = (JDIMENSION) ltemp;
 80156c6:	462b      	movcc	r3, r5
 80156c8:	ea23 73e3 	biccs.w	r3, r3, r3, asr #31
 80156cc:	61a3      	str	r3, [r4, #24]
  file_offset = ptr->cur_start_row * bytesperrow;
 80156ce:	fb0b f303 	mul.w	r3, fp, r3
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 80156d2:	6922      	ldr	r2, [r4, #16]
 80156d4:	69e6      	ldr	r6, [r4, #28]
 80156d6:	454a      	cmp	r2, r9
 80156d8:	ddc5      	ble.n	8015666 <access_virt_sarray+0x3e>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 80156da:	eba2 0209 	sub.w	r2, r2, r9
 80156de:	6967      	ldr	r7, [r4, #20]
 80156e0:	42ba      	cmp	r2, r7
 80156e2:	bfa8      	it	ge
 80156e4:	463a      	movge	r2, r7
    thisrow = (long) ptr->cur_start_row + i;
 80156e6:	69a7      	ldr	r7, [r4, #24]
 80156e8:	444f      	add	r7, r9
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 80156ea:	1bf6      	subs	r6, r6, r7
 80156ec:	42b2      	cmp	r2, r6
 80156ee:	bfa8      	it	ge
 80156f0:	4632      	movge	r2, r6
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 80156f2:	6866      	ldr	r6, [r4, #4]
 80156f4:	1bf6      	subs	r6, r6, r7
 80156f6:	42b2      	cmp	r2, r6
 80156f8:	bfa8      	it	ge
 80156fa:	4632      	movge	r2, r6
    if (rows <= 0)		/* this chunk might be past end of file! */
 80156fc:	2a00      	cmp	r2, #0
 80156fe:	ddb2      	ble.n	8015666 <access_virt_sarray+0x3e>
    byte_count = rows * bytesperrow;
 8015700:	fb02 f60b 	mul.w	r6, r2, fp
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 8015704:	6822      	ldr	r2, [r4, #0]
 8015706:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8015708:	9600      	str	r6, [sp, #0]
 801570a:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 801570e:	9305      	str	r3, [sp, #20]
 8015710:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8015714:	47b8      	blx	r7
    file_offset += byte_count;
 8015716:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015718:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 801571a:	4433      	add	r3, r6
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801571c:	4491      	add	r9, r2
 801571e:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 8015722:	e7d6      	b.n	80156d2 <access_virt_sarray+0xaa>
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 8015724:	eba2 0c09 	sub.w	ip, r2, r9
 8015728:	6962      	ldr	r2, [r4, #20]
 801572a:	4562      	cmp	r2, ip
 801572c:	bfa8      	it	ge
 801572e:	4662      	movge	r2, ip
    thisrow = (long) ptr->cur_start_row + i;
 8015730:	eb06 0c09 	add.w	ip, r6, r9
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8015734:	6866      	ldr	r6, [r4, #4]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 8015736:	eba7 070c 	sub.w	r7, r7, ip
 801573a:	42ba      	cmp	r2, r7
 801573c:	bfa8      	it	ge
 801573e:	463a      	movge	r2, r7
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 8015740:	eba6 070c 	sub.w	r7, r6, ip
 8015744:	42ba      	cmp	r2, r7
 8015746:	bfa8      	it	ge
 8015748:	463a      	movge	r2, r7
    if (rows <= 0)		/* this chunk might be past end of file! */
 801574a:	2a00      	cmp	r2, #0
 801574c:	ddad      	ble.n	80156aa <access_virt_sarray+0x82>
    byte_count = rows * bytesperrow;
 801574e:	fb0b f702 	mul.w	r7, fp, r2
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 8015752:	6822      	ldr	r2, [r4, #0]
 8015754:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8015756:	9700      	str	r7, [sp, #0]
 8015758:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
 801575c:	9305      	str	r3, [sp, #20]
 801575e:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8015762:	47b0      	blx	r6
    file_offset += byte_count;
 8015764:	9b05      	ldr	r3, [sp, #20]
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 8015766:	6962      	ldr	r2, [r4, #20]
    file_offset += byte_count;
 8015768:	443b      	add	r3, r7
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801576a:	4491      	add	r9, r2
 801576c:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 8015770:	e796      	b.n	80156a0 <access_virt_sarray+0x78>
    if (ptr->first_undef_row < start_row) {
 8015772:	42ae      	cmp	r6, r5
 8015774:	d20d      	bcs.n	8015792 <access_virt_sarray+0x16a>
      if (writable)		/* writer skipped over a section of array */
 8015776:	f1ba 0f00 	cmp.w	sl, #0
 801577a:	d020      	beq.n	80157be <access_virt_sarray+0x196>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801577c:	6803      	ldr	r3, [r0, #0]
 801577e:	2217      	movs	r2, #23
 8015780:	9003      	str	r0, [sp, #12]
 8015782:	462e      	mov	r6, r5
 8015784:	615a      	str	r2, [r3, #20]
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	4798      	blx	r3
    if (writable)
 801578a:	9803      	ldr	r0, [sp, #12]
      ptr->first_undef_row = end_row;
 801578c:	f8c4 801c 	str.w	r8, [r4, #28]
 8015790:	e002      	b.n	8015798 <access_virt_sarray+0x170>
    if (writable)
 8015792:	f1ba 0f00 	cmp.w	sl, #0
 8015796:	d1f9      	bne.n	801578c <access_virt_sarray+0x164>
    if (ptr->pre_zero) {
 8015798:	6a22      	ldr	r2, [r4, #32]
 801579a:	b192      	cbz	r2, 80157c2 <access_virt_sarray+0x19a>
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 801579c:	69a1      	ldr	r1, [r4, #24]
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 801579e:	68a7      	ldr	r7, [r4, #8]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 80157a0:	1a76      	subs	r6, r6, r1
      end_row -= ptr->cur_start_row;
 80157a2:	eba8 0801 	sub.w	r8, r8, r1
      while (undef_row < end_row) {
 80157a6:	4546      	cmp	r6, r8
 80157a8:	6823      	ldr	r3, [r4, #0]
 80157aa:	f4bf af60 	bcs.w	801566e <access_virt_sarray+0x46>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 80157ae:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80157b2:	463a      	mov	r2, r7
 80157b4:	2100      	movs	r1, #0
	undef_row++;
 80157b6:	3601      	adds	r6, #1
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 80157b8:	f014 fbda 	bl	8029f70 <memset>
	undef_row++;
 80157bc:	e7f3      	b.n	80157a6 <access_virt_sarray+0x17e>
 80157be:	462e      	mov	r6, r5
 80157c0:	e7ea      	b.n	8015798 <access_virt_sarray+0x170>
      if (! writable)		/* reader looking at undefined data */
 80157c2:	f1ba 0f00 	cmp.w	sl, #0
 80157c6:	d009      	beq.n	80157dc <access_virt_sarray+0x1b4>
    ptr->dirty = TRUE;
 80157c8:	2301      	movs	r3, #1
 80157ca:	6263      	str	r3, [r4, #36]	; 0x24
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 80157cc:	69a0      	ldr	r0, [r4, #24]
 80157ce:	1a2d      	subs	r5, r5, r0
 80157d0:	6820      	ldr	r0, [r4, #0]
}
 80157d2:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80157d6:	b007      	add	sp, #28
 80157d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 80157dc:	6803      	ldr	r3, [r0, #0]
 80157de:	2217      	movs	r2, #23
 80157e0:	615a      	str	r2, [r3, #20]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	4798      	blx	r3
  if (writable)
 80157e6:	e7f1      	b.n	80157cc <access_virt_sarray+0x1a4>

080157e8 <jinit_memory_mgr>:
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */
 80157e8:	2300      	movs	r3, #0
{
 80157ea:	b570      	push	{r4, r5, r6, lr}
 80157ec:	4605      	mov	r5, r0
  cinfo->mem = NULL;		/* for safety if init fails */
 80157ee:	6043      	str	r3, [r0, #4]
  test_mac = (size_t) MAX_ALLOC_CHUNK;
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 80157f0:	f000 f85f 	bl	80158b2 <jpeg_mem_init>

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 80157f4:	2154      	movs	r1, #84	; 0x54
  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 80157f6:	4606      	mov	r6, r0
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 80157f8:	4628      	mov	r0, r5
 80157fa:	f000 f847 	bl	801588c <jpeg_get_small>

  if (mem == NULL) {
 80157fe:	4604      	mov	r4, r0
 8015800:	b948      	cbnz	r0, 8015816 <jinit_memory_mgr+0x2e>
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
 8015802:	4628      	mov	r0, r5
 8015804:	f000 f857 	bl	80158b6 <jpeg_mem_term>
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 8015808:	682b      	ldr	r3, [r5, #0]
 801580a:	2238      	movs	r2, #56	; 0x38
 801580c:	4628      	mov	r0, r5
 801580e:	e9c3 2405 	strd	r2, r4, [r3, #20]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	4798      	blx	r3
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
 8015816:	4b12      	ldr	r3, [pc, #72]	; (8015860 <jinit_memory_mgr+0x78>)
 8015818:	6023      	str	r3, [r4, #0]
  mem->pub.alloc_large = alloc_large;
 801581a:	4b12      	ldr	r3, [pc, #72]	; (8015864 <jinit_memory_mgr+0x7c>)
 801581c:	6063      	str	r3, [r4, #4]
  mem->pub.alloc_sarray = alloc_sarray;
 801581e:	4b12      	ldr	r3, [pc, #72]	; (8015868 <jinit_memory_mgr+0x80>)
 8015820:	60a3      	str	r3, [r4, #8]
  mem->pub.alloc_barray = alloc_barray;
 8015822:	4b12      	ldr	r3, [pc, #72]	; (801586c <jinit_memory_mgr+0x84>)
 8015824:	60e3      	str	r3, [r4, #12]
  mem->pub.request_virt_sarray = request_virt_sarray;
 8015826:	4b12      	ldr	r3, [pc, #72]	; (8015870 <jinit_memory_mgr+0x88>)
 8015828:	6123      	str	r3, [r4, #16]
  mem->pub.request_virt_barray = request_virt_barray;
 801582a:	4b12      	ldr	r3, [pc, #72]	; (8015874 <jinit_memory_mgr+0x8c>)
 801582c:	6163      	str	r3, [r4, #20]
  mem->pub.realize_virt_arrays = realize_virt_arrays;
 801582e:	4b12      	ldr	r3, [pc, #72]	; (8015878 <jinit_memory_mgr+0x90>)
 8015830:	61a3      	str	r3, [r4, #24]
  mem->pub.access_virt_sarray = access_virt_sarray;
 8015832:	4b12      	ldr	r3, [pc, #72]	; (801587c <jinit_memory_mgr+0x94>)
 8015834:	61e3      	str	r3, [r4, #28]
  mem->pub.access_virt_barray = access_virt_barray;
 8015836:	4b12      	ldr	r3, [pc, #72]	; (8015880 <jinit_memory_mgr+0x98>)
 8015838:	6223      	str	r3, [r4, #32]
  mem->pub.free_pool = free_pool;
 801583a:	4b12      	ldr	r3, [pc, #72]	; (8015884 <jinit_memory_mgr+0x9c>)
 801583c:	6263      	str	r3, [r4, #36]	; 0x24
  mem->pub.self_destruct = self_destruct;
 801583e:	4b12      	ldr	r3, [pc, #72]	; (8015888 <jinit_memory_mgr+0xa0>)
 8015840:	62a3      	str	r3, [r4, #40]	; 0x28

  /* Make MAX_ALLOC_CHUNK accessible to other modules */
  mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 8015842:	f44f 3380 	mov.w	r3, #65536	; 0x10000

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;
 8015846:	e9c4 630b 	strd	r6, r3, [r4, #44]	; 0x2c

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
    mem->small_list[pool] = NULL;
 801584a:	2300      	movs	r3, #0
 801584c:	63a3      	str	r3, [r4, #56]	; 0x38
    mem->large_list[pool] = NULL;
 801584e:	6423      	str	r3, [r4, #64]	; 0x40
    mem->small_list[pool] = NULL;
 8015850:	6363      	str	r3, [r4, #52]	; 0x34
    mem->large_list[pool] = NULL;
 8015852:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
  mem->virt_sarray_list = NULL;
  mem->virt_barray_list = NULL;
 8015854:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44

  mem->total_space_allocated = SIZEOF(my_memory_mgr);
 8015858:	2354      	movs	r3, #84	; 0x54
 801585a:	64e3      	str	r3, [r4, #76]	; 0x4c

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;
 801585c:	606c      	str	r4, [r5, #4]
      }
    }
  }
#endif

}
 801585e:	bd70      	pop	{r4, r5, r6, pc}
 8015860:	08015085 	.word	0x08015085
 8015864:	080153b3 	.word	0x080153b3
 8015868:	08015491 	.word	0x08015491
 801586c:	08015421 	.word	0x08015421
 8015870:	0801519b 	.word	0x0801519b
 8015874:	08015151 	.word	0x08015151
 8015878:	08015501 	.word	0x08015501
 801587c:	08015629 	.word	0x08015629
 8015880:	080152b3 	.word	0x080152b3
 8015884:	080151e5 	.word	0x080151e5
 8015888:	08015289 	.word	0x08015289

0801588c <jpeg_get_small>:
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
  return (void *) JMALLOC(sizeofobject);
 801588c:	4608      	mov	r0, r1
 801588e:	f7f2 b85f 	b.w	8007950 <pvPortMalloc>

08015892 <jpeg_free_small>:
}

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
  JFREE(object);
 8015892:	4608      	mov	r0, r1
 8015894:	f7f2 b8ea 	b.w	8007a6c <vPortFree>

08015898 <jpeg_get_large>:
 8015898:	4608      	mov	r0, r1
 801589a:	f7f2 b859 	b.w	8007950 <pvPortMalloc>

0801589e <jpeg_free_large>:
 801589e:	4608      	mov	r0, r1
 80158a0:	f7f2 b8e4 	b.w	8007a6c <vPortFree>

080158a4 <jpeg_mem_available>:
GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
  return max_bytes_needed;
}
 80158a4:	4610      	mov	r0, r2
 80158a6:	4770      	bx	lr

080158a8 <jpeg_open_backing_store>:

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
 80158a8:	6803      	ldr	r3, [r0, #0]
 80158aa:	2233      	movs	r2, #51	; 0x33
 80158ac:	615a      	str	r2, [r3, #20]
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	4718      	bx	r3

080158b2 <jpeg_mem_init>:

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
  return 0;			/* just set max_memory_to_use to 0 */
}
 80158b2:	2000      	movs	r0, #0
 80158b4:	4770      	bx	lr

080158b6 <jpeg_mem_term>:

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
}
 80158b6:	4770      	bx	lr

080158b8 <color_quantize>:

METHODDEF(void)
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
 80158b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  register int nc = cinfo->out_color_components;
 80158bc:	f8d0 c078 	ldr.w	ip, [r0, #120]	; 0x78
{
 80158c0:	4698      	mov	r8, r3
  JSAMPARRAY colorindex = cquantize->colorindex;
 80158c2:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 80158c6:	ea2c 79ec 	bic.w	r9, ip, ip, asr #31
 80158ca:	f8d3 e018 	ldr.w	lr, [r3, #24]
  JDIMENSION width = cinfo->output_width;
 80158ce:	6f03      	ldr	r3, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 80158d0:	2000      	movs	r0, #0
  JDIMENSION width = cinfo->output_width;
 80158d2:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 80158d4:	4540      	cmp	r0, r8
 80158d6:	db02      	blt.n	80158de <color_quantize+0x26>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
      }
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 80158d8:	b003      	add	sp, #12
 80158da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ptrout = output_buf[row];
 80158de:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
 80158e2:	9b01      	ldr	r3, [sp, #4]
    ptrin = input_buf[row];
 80158e4:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
    for (col = width; col > 0; col--) {
 80158e8:	eb04 0a03 	add.w	sl, r4, r3
 80158ec:	4554      	cmp	r4, sl
 80158ee:	d10f      	bne.n	8015910 <color_quantize+0x58>
  for (row = 0; row < num_rows; row++) {
 80158f0:	3001      	adds	r0, #1
 80158f2:	e7ef      	b.n	80158d4 <color_quantize+0x1c>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 80158f4:	f815 b003 	ldrb.w	fp, [r5, r3]
 80158f8:	f85e 7023 	ldr.w	r7, [lr, r3, lsl #2]
      for (ci = 0; ci < nc; ci++) {
 80158fc:	3301      	adds	r3, #1
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 80158fe:	f817 700b 	ldrb.w	r7, [r7, fp]
 8015902:	443e      	add	r6, r7
      for (ci = 0; ci < nc; ci++) {
 8015904:	4563      	cmp	r3, ip
 8015906:	dbf5      	blt.n	80158f4 <color_quantize+0x3c>
 8015908:	444d      	add	r5, r9
      *ptrout++ = (JSAMPLE) pixcode;
 801590a:	f804 6b01 	strb.w	r6, [r4], #1
    for (col = width; col > 0; col--) {
 801590e:	e7ed      	b.n	80158ec <color_quantize+0x34>
      for (ci = 0; ci < nc; ci++) {
 8015910:	2300      	movs	r3, #0
      pixcode = 0;
 8015912:	461e      	mov	r6, r3
 8015914:	e7f6      	b.n	8015904 <color_quantize+0x4c>

08015916 <color_quantize3>:

METHODDEF(void)
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
 8015916:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 801591a:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 801591e:	f8d0 9070 	ldr.w	r9, [r0, #112]	; 0x70

  for (row = 0; row < num_rows; row++) {
 8015922:	2000      	movs	r0, #0
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8015924:	69a4      	ldr	r4, [r4, #24]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 8015926:	e9d4 ce00 	ldrd	ip, lr, [r4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 801592a:	f8d4 8008 	ldr.w	r8, [r4, #8]
  for (row = 0; row < num_rows; row++) {
 801592e:	4298      	cmp	r0, r3
 8015930:	db01      	blt.n	8015936 <color_quantize3+0x20>
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
      *ptrout++ = (JSAMPLE) pixcode;
    }
  }
}
 8015932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ptrout = output_buf[row];
 8015936:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
    for (col = width; col > 0; col--) {
 801593a:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 801593e:	eb05 0a09 	add.w	sl, r5, r9
 8015942:	4555      	cmp	r5, sl
 8015944:	f104 0403 	add.w	r4, r4, #3
 8015948:	d101      	bne.n	801594e <color_quantize3+0x38>
  for (row = 0; row < num_rows; row++) {
 801594a:	3001      	adds	r0, #1
 801594c:	e7ef      	b.n	801592e <color_quantize3+0x18>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 801594e:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8015952:	f81c 7006 	ldrb.w	r7, [ip, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 8015956:	f814 6c02 	ldrb.w	r6, [r4, #-2]
 801595a:	f81e 6006 	ldrb.w	r6, [lr, r6]
 801595e:	4437      	add	r7, r6
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
 8015960:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8015964:	f818 6006 	ldrb.w	r6, [r8, r6]
 8015968:	443e      	add	r6, r7
      *ptrout++ = (JSAMPLE) pixcode;
 801596a:	f805 6b01 	strb.w	r6, [r5], #1
    for (col = width; col > 0; col--) {
 801596e:	e7e8      	b.n	8015942 <color_quantize3+0x2c>

08015970 <quantize3_ord_dither>:

METHODDEF(void)
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
 8015970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015974:	469a      	mov	sl, r3
 8015976:	b08b      	sub	sp, #44	; 0x2c
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015978:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 801597c:	e9cd 1208 	strd	r1, r2, [sp, #32]
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 8015980:	699a      	ldr	r2, [r3, #24]
 8015982:	6811      	ldr	r1, [r2, #0]
 8015984:	9104      	str	r1, [sp, #16]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 8015986:	6851      	ldr	r1, [r2, #4]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 8015988:	6892      	ldr	r2, [r2, #8]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 801598a:	9105      	str	r1, [sp, #20]
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
 801598c:	2100      	movs	r1, #0
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 801598e:	9206      	str	r2, [sp, #24]
  JDIMENSION width = cinfo->output_width;
 8015990:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8015992:	9207      	str	r2, [sp, #28]
  for (row = 0; row < num_rows; row++) {
 8015994:	4551      	cmp	r1, sl
 8015996:	db02      	blt.n	801599e <quantize3_ord_dither+0x2e>
      col_index = (col_index + 1) & ODITHER_MASK;
    }
    row_index = (row_index + 1) & ODITHER_MASK;
    cquantize->row_index = row_index;
  }
}
 8015998:	b00b      	add	sp, #44	; 0x2c
 801599a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    row_index = cquantize->row_index;
 801599e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    output_ptr = output_buf[row];
 80159a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80159a2:	9c07      	ldr	r4, [sp, #28]
 80159a4:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    dither0 = cquantize->odither[0][row_index];
 80159a8:	0190      	lsls	r0, r2, #6
 80159aa:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 80159ae:	9002      	str	r0, [sp, #8]
 80159b0:	eb05 0e04 	add.w	lr, r5, r4
    col_index = 0;
 80159b4:	2400      	movs	r4, #0
    row_index = cquantize->row_index;
 80159b6:	9201      	str	r2, [sp, #4]
    dither2 = cquantize->odither[2][row_index];
 80159b8:	e9d3 900e 	ldrd	r9, r0, [r3, #56]	; 0x38
 80159bc:	9003      	str	r0, [sp, #12]
    for (col = width; col > 0; col--) {
 80159be:	9808      	ldr	r0, [sp, #32]
 80159c0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80159c4:	4575      	cmp	r5, lr
 80159c6:	f100 0003 	add.w	r0, r0, #3
 80159ca:	d106      	bne.n	80159da <quantize3_ord_dither+0x6a>
    row_index = (row_index + 1) & ODITHER_MASK;
 80159cc:	9a01      	ldr	r2, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 80159ce:	3101      	adds	r1, #1
    row_index = (row_index + 1) & ODITHER_MASK;
 80159d0:	3201      	adds	r2, #1
 80159d2:	f002 020f 	and.w	r2, r2, #15
    cquantize->row_index = row_index;
 80159d6:	631a      	str	r2, [r3, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 80159d8:	e7dc      	b.n	8015994 <quantize3_ord_dither+0x24>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 80159da:	9e02      	ldr	r6, [sp, #8]
 80159dc:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 80159e0:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 80159e4:	9a04      	ldr	r2, [sp, #16]
      col_index = (col_index + 1) & ODITHER_MASK;
 80159e6:	3401      	adds	r4, #1
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 80159e8:	f858 7006 	ldr.w	r7, [r8, r6]
 80159ec:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 80159ee:	9a05      	ldr	r2, [sp, #20]
      col_index = (col_index + 1) & ODITHER_MASK;
 80159f0:	f004 040f 	and.w	r4, r4, #15
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 80159f4:	f81c b007 	ldrb.w	fp, [ip, r7]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 80159f8:	f810 cc02 	ldrb.w	ip, [r0, #-2]
 80159fc:	f859 7006 	ldr.w	r7, [r9, r6]
 8015a00:	4494      	add	ip, r2
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8015a02:	9a03      	ldr	r2, [sp, #12]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8015a04:	f81c 7007 	ldrb.w	r7, [ip, r7]
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8015a08:	5996      	ldr	r6, [r2, r6]
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 8015a0a:	44bb      	add	fp, r7
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 8015a0c:	9a06      	ldr	r2, [sp, #24]
 8015a0e:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8015a12:	4417      	add	r7, r2
 8015a14:	5dbe      	ldrb	r6, [r7, r6]
 8015a16:	44b3      	add	fp, r6
      *output_ptr++ = (JSAMPLE) pixcode;
 8015a18:	f805 bb01 	strb.w	fp, [r5], #1
    for (col = width; col > 0; col--) {
 8015a1c:	e7d2      	b.n	80159c4 <quantize3_ord_dither+0x54>

08015a1e <alloc_fs_workspace>:
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015a1e:	6f02      	ldr	r2, [r0, #112]	; 0x70
{
 8015a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015a22:	3202      	adds	r2, #2
 8015a24:	f8d0 61e0 	ldr.w	r6, [r0, #480]	; 0x1e0
{
 8015a28:	4604      	mov	r4, r0
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015a2a:	2700      	movs	r7, #0
  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015a2c:	0055      	lsls	r5, r2, #1
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015a2e:	3644      	adds	r6, #68	; 0x44
 8015a30:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015a32:	42bb      	cmp	r3, r7
 8015a34:	dc00      	bgt.n	8015a38 <alloc_fs_workspace+0x1a>
    cquantize->fserrors[i] = (FSERRPTR)
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
  }
}
 8015a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 8015a38:	6863      	ldr	r3, [r4, #4]
 8015a3a:	462a      	mov	r2, r5
 8015a3c:	2101      	movs	r1, #1
 8015a3e:	4620      	mov	r0, r4
 8015a40:	685b      	ldr	r3, [r3, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015a42:	3701      	adds	r7, #1
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 8015a44:	4798      	blx	r3
    cquantize->fserrors[i] = (FSERRPTR)
 8015a46:	f846 0b04 	str.w	r0, [r6], #4
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015a4a:	e7f1      	b.n	8015a30 <alloc_fs_workspace+0x12>

08015a4c <finish_pass_1_quant>:

METHODDEF(void)
finish_pass_1_quant (j_decompress_ptr cinfo)
{
  /* no work in 1-pass case */
}
 8015a4c:	4770      	bx	lr

08015a4e <new_color_map_1_quant>:
 */

METHODDEF(void)
new_color_map_1_quant (j_decompress_ptr cinfo)
{
  ERREXIT(cinfo, JERR_MODE_CHANGE);
 8015a4e:	6803      	ldr	r3, [r0, #0]
 8015a50:	222f      	movs	r2, #47	; 0x2f
 8015a52:	615a      	str	r2, [r3, #20]
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	4718      	bx	r3

08015a58 <quantize_fs_dither>:
{
 8015a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a5c:	b091      	sub	sp, #68	; 0x44
  JDIMENSION width = cinfo->output_width;
 8015a5e:	6f06      	ldr	r6, [r0, #112]	; 0x70
  int nc = cinfo->out_color_components;
 8015a60:	f8d0 b078 	ldr.w	fp, [r0, #120]	; 0x78
 8015a64:	4689      	mov	r9, r1
{
 8015a66:	930e      	str	r3, [sp, #56]	; 0x38
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8015a68:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015a6c:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8015a70:	930b      	str	r3, [sp, #44]	; 0x2c
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 8015a72:	1e73      	subs	r3, r6, #1
 8015a74:	9304      	str	r3, [sp, #16]
 8015a76:	fb03 f30b 	mul.w	r3, r3, fp
 8015a7a:	9309      	str	r3, [sp, #36]	; 0x24
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8015a7c:	1c73      	adds	r3, r6, #1
 8015a7e:	005b      	lsls	r3, r3, #1
 8015a80:	930a      	str	r3, [sp, #40]	; 0x28
 8015a82:	1f13      	subs	r3, r2, #4
 8015a84:	9303      	str	r3, [sp, #12]
  for (row = 0; row < num_rows; row++) {
 8015a86:	2300      	movs	r3, #0
 8015a88:	9301      	str	r3, [sp, #4]
 8015a8a:	9b01      	ldr	r3, [sp, #4]
 8015a8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015a8e:	4293      	cmp	r3, r2
 8015a90:	db02      	blt.n	8015a98 <quantize_fs_dither+0x40>
}
 8015a92:	b011      	add	sp, #68	; 0x44
 8015a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 8015a98:	9b03      	ldr	r3, [sp, #12]
 8015a9a:	4632      	mov	r2, r6
 8015a9c:	2100      	movs	r1, #0
 8015a9e:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8015aa2:	9303      	str	r3, [sp, #12]
 8015aa4:	f014 fa64 	bl	8029f70 <memset>
    for (ci = 0; ci < nc; ci++) {
 8015aa8:	f105 0344 	add.w	r3, r5, #68	; 0x44
 8015aac:	2000      	movs	r0, #0
 8015aae:	9306      	str	r3, [sp, #24]
	dirnc = -nc;
 8015ab0:	f1cb 0300 	rsb	r3, fp, #0
 8015ab4:	930f      	str	r3, [sp, #60]	; 0x3c
    for (ci = 0; ci < nc; ci++) {
 8015ab6:	4558      	cmp	r0, fp
 8015ab8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8015aba:	db09      	blt.n	8015ad0 <quantize_fs_dither+0x78>
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 8015abc:	fab3 f383 	clz	r3, r3
 8015ac0:	f109 0904 	add.w	r9, r9, #4
 8015ac4:	095b      	lsrs	r3, r3, #5
 8015ac6:	656b      	str	r3, [r5, #84]	; 0x54
  for (row = 0; row < num_rows; row++) {
 8015ac8:	9b01      	ldr	r3, [sp, #4]
 8015aca:	3301      	adds	r3, #1
 8015acc:	9301      	str	r3, [sp, #4]
 8015ace:	e7dc      	b.n	8015a8a <quantize_fs_dither+0x32>
      output_ptr = output_buf[row];
 8015ad0:	9a03      	ldr	r2, [sp, #12]
      input_ptr = input_buf[row] + ci;
 8015ad2:	f8d9 1000 	ldr.w	r1, [r9]
      output_ptr = output_buf[row];
 8015ad6:	6814      	ldr	r4, [r2, #0]
 8015ad8:	9a06      	ldr	r2, [sp, #24]
      input_ptr = input_buf[row] + ci;
 8015ada:	4401      	add	r1, r0
      if (cquantize->on_odd_row) {
 8015adc:	f852 cb04 	ldr.w	ip, [r2], #4
 8015ae0:	9206      	str	r2, [sp, #24]
 8015ae2:	b30b      	cbz	r3, 8015b28 <quantize_fs_dither+0xd0>
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 8015ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
	dir = -1;
 8015ae6:	f04f 3eff 	mov.w	lr, #4294967295
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 8015aea:	4419      	add	r1, r3
	output_ptr += width-1;
 8015aec:	9b04      	ldr	r3, [sp, #16]
 8015aee:	441c      	add	r4, r3
	dirnc = -nc;
 8015af0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015af2:	9308      	str	r3, [sp, #32]
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 8015af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015af6:	449c      	add	ip, r3
      colorindex_ci = cquantize->colorindex[ci];
 8015af8:	69ab      	ldr	r3, [r5, #24]
      for (col = width; col > 0; col--) {
 8015afa:	4667      	mov	r7, ip
 8015afc:	9602      	str	r6, [sp, #8]
      colorindex_ci = cquantize->colorindex[ci];
 8015afe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015b02:	930c      	str	r3, [sp, #48]	; 0x30
      colormap_ci = cquantize->sv_colormap[ci];
 8015b04:	692b      	ldr	r3, [r5, #16]
 8015b06:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015b0a:	930d      	str	r3, [sp, #52]	; 0x34
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015b0c:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8015b10:	9300      	str	r3, [sp, #0]
      belowerr = bpreverr = 0;
 8015b12:	2300      	movs	r3, #0
      cur = 0;
 8015b14:	4698      	mov	r8, r3
      belowerr = bpreverr = 0;
 8015b16:	9307      	str	r3, [sp, #28]
      for (col = width; col > 0; col--) {
 8015b18:	9a02      	ldr	r2, [sp, #8]
 8015b1a:	b952      	cbnz	r2, 8015b32 <quantize_fs_dither+0xda>
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 8015b1c:	9a00      	ldr	r2, [sp, #0]
    for (ci = 0; ci < nc; ci++) {
 8015b1e:	3001      	adds	r0, #1
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 8015b20:	4372      	muls	r2, r6
 8015b22:	f82c 3002 	strh.w	r3, [ip, r2]
    for (ci = 0; ci < nc; ci++) {
 8015b26:	e7c6      	b.n	8015ab6 <quantize_fs_dither+0x5e>
	dir = 1;
 8015b28:	f04f 0e01 	mov.w	lr, #1
 8015b2c:	f8cd b020 	str.w	fp, [sp, #32]
 8015b30:	e7e2      	b.n	8015af8 <quantize_fs_dither+0xa0>
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015b32:	9a00      	ldr	r2, [sp, #0]
 8015b34:	f937 a002 	ldrsh.w	sl, [r7, r2]
	cur = GETJSAMPLE(range_limit[cur]);
 8015b38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015b3a:	44d0      	add	r8, sl
	cur += GETJSAMPLE(*input_ptr);
 8015b3c:	f891 a000 	ldrb.w	sl, [r1]
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 8015b40:	f108 0808 	add.w	r8, r8, #8
	cur = GETJSAMPLE(range_limit[cur]);
 8015b44:	eb02 1828 	add.w	r8, r2, r8, asr #4
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8015b48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	cur = GETJSAMPLE(range_limit[cur]);
 8015b4a:	f818 a00a 	ldrb.w	sl, [r8, sl]
	*output_ptr += (JSAMPLE) pixcode;
 8015b4e:	f894 8000 	ldrb.w	r8, [r4]
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8015b52:	f812 200a 	ldrb.w	r2, [r2, sl]
	*output_ptr += (JSAMPLE) pixcode;
 8015b56:	4490      	add	r8, r2
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 8015b58:	9205      	str	r2, [sp, #20]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8015b5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	*output_ptr += (JSAMPLE) pixcode;
 8015b5c:	f884 8000 	strb.w	r8, [r4]
	output_ptr += dir;	/* advance output ptr to next column */
 8015b60:	4474      	add	r4, lr
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8015b62:	4690      	mov	r8, r2
 8015b64:	9a05      	ldr	r2, [sp, #20]
 8015b66:	f818 8002 	ldrb.w	r8, [r8, r2]
	input_ptr += dirnc;	/* advance input ptr to next column */
 8015b6a:	9a08      	ldr	r2, [sp, #32]
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 8015b6c:	ebaa 0a08 	sub.w	sl, sl, r8
	input_ptr += dirnc;	/* advance input ptr to next column */
 8015b70:	4411      	add	r1, r2
      for (col = width; col > 0; col--) {
 8015b72:	9a02      	ldr	r2, [sp, #8]
	cur += delta;		/* form error * 3 */
 8015b74:	eb0a 084a 	add.w	r8, sl, sl, lsl #1
      for (col = width; col > 0; col--) {
 8015b78:	3a01      	subs	r2, #1
	errorptr[0] = (FSERROR) (bpreverr + cur);
 8015b7a:	4443      	add	r3, r8
	cur += delta;		/* form error * 5 */
 8015b7c:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 8015b80:	9202      	str	r2, [sp, #8]
	errorptr[0] = (FSERROR) (bpreverr + cur);
 8015b82:	803b      	strh	r3, [r7, #0]
      for (col = width; col > 0; col--) {
 8015b84:	9a00      	ldr	r2, [sp, #0]
	bpreverr = belowerr + cur;
 8015b86:	9b07      	ldr	r3, [sp, #28]
      for (col = width; col > 0; col--) {
 8015b88:	4417      	add	r7, r2
	belowerr = bnexterr;
 8015b8a:	f8cd a01c 	str.w	sl, [sp, #28]
	bpreverr = belowerr + cur;
 8015b8e:	4443      	add	r3, r8
	cur += delta;		/* form error * 7 */
 8015b90:	eb08 084a 	add.w	r8, r8, sl, lsl #1
      for (col = width; col > 0; col--) {
 8015b94:	e7c0      	b.n	8015b18 <quantize_fs_dither+0xc0>

08015b96 <quantize_ord_dither>:
{
 8015b96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b9a:	b089      	sub	sp, #36	; 0x24
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015b9c:	f8d0 71e0 	ldr.w	r7, [r0, #480]	; 0x1e0
  JDIMENSION width = cinfo->output_width;
 8015ba0:	f8d0 9070 	ldr.w	r9, [r0, #112]	; 0x70
 8015ba4:	1f14      	subs	r4, r2, #4
{
 8015ba6:	9307      	str	r3, [sp, #28]
 8015ba8:	460d      	mov	r5, r1
  int nc = cinfo->out_color_components;
 8015baa:	6f83      	ldr	r3, [r0, #120]	; 0x78
  for (row = 0; row < num_rows; row++) {
 8015bac:	f04f 0800 	mov.w	r8, #0
  int nc = cinfo->out_color_components;
 8015bb0:	9301      	str	r3, [sp, #4]
  for (row = 0; row < num_rows; row++) {
 8015bb2:	9b07      	ldr	r3, [sp, #28]
 8015bb4:	4598      	cmp	r8, r3
 8015bb6:	db02      	blt.n	8015bbe <quantize_ord_dither+0x28>
}
 8015bb8:	b009      	add	sp, #36	; 0x24
 8015bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    FMEMZERO((void FAR *) output_buf[row],
 8015bbe:	464a      	mov	r2, r9
 8015bc0:	2100      	movs	r1, #0
 8015bc2:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8015bc6:	f014 f9d3 	bl	8029f70 <memset>
    row_index = cquantize->row_index;
 8015bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    for (ci = 0; ci < nc; ci++) {
 8015bcc:	f107 0e34 	add.w	lr, r7, #52	; 0x34
 8015bd0:	2100      	movs	r1, #0
      dither = cquantize->odither[ci][row_index];
 8015bd2:	019a      	lsls	r2, r3, #6
 8015bd4:	9203      	str	r2, [sp, #12]
    for (ci = 0; ci < nc; ci++) {
 8015bd6:	9a01      	ldr	r2, [sp, #4]
 8015bd8:	4291      	cmp	r1, r2
 8015bda:	db07      	blt.n	8015bec <quantize_ord_dither+0x56>
    row_index = (row_index + 1) & ODITHER_MASK;
 8015bdc:	3301      	adds	r3, #1
  for (row = 0; row < num_rows; row++) {
 8015bde:	f108 0801 	add.w	r8, r8, #1
 8015be2:	3504      	adds	r5, #4
    row_index = (row_index + 1) & ODITHER_MASK;
 8015be4:	f003 030f 	and.w	r3, r3, #15
    cquantize->row_index = row_index;
 8015be8:	633b      	str	r3, [r7, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 8015bea:	e7e2      	b.n	8015bb2 <quantize_ord_dither+0x1c>
      input_ptr = input_buf[row] + ci;
 8015bec:	682a      	ldr	r2, [r5, #0]
      col_index = 0;
 8015bee:	2600      	movs	r6, #0
 8015bf0:	6820      	ldr	r0, [r4, #0]
      input_ptr = input_buf[row] + ci;
 8015bf2:	eb02 0c01 	add.w	ip, r2, r1
      colorindex_ci = cquantize->colorindex[ci];
 8015bf6:	69ba      	ldr	r2, [r7, #24]
 8015bf8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8015bfc:	9205      	str	r2, [sp, #20]
      dither = cquantize->odither[ci][row_index];
 8015bfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015c02:	9202      	str	r2, [sp, #8]
      for (col = width; col > 0; col--) {
 8015c04:	eb09 0200 	add.w	r2, r9, r0
 8015c08:	9206      	str	r2, [sp, #24]
 8015c0a:	9a06      	ldr	r2, [sp, #24]
 8015c0c:	4290      	cmp	r0, r2
 8015c0e:	d101      	bne.n	8015c14 <quantize_ord_dither+0x7e>
    for (ci = 0; ci < nc; ci++) {
 8015c10:	3101      	adds	r1, #1
 8015c12:	e7e0      	b.n	8015bd6 <quantize_ord_dither+0x40>
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8015c14:	7802      	ldrb	r2, [r0, #0]
 8015c16:	f89c a000 	ldrb.w	sl, [ip]
 8015c1a:	9204      	str	r2, [sp, #16]
 8015c1c:	9a02      	ldr	r2, [sp, #8]
 8015c1e:	eb02 0b86 	add.w	fp, r2, r6, lsl #2
 8015c22:	9a03      	ldr	r2, [sp, #12]
	col_index = (col_index + 1) & ODITHER_MASK;
 8015c24:	3601      	adds	r6, #1
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8015c26:	f85b b002 	ldr.w	fp, [fp, r2]
 8015c2a:	9a05      	ldr	r2, [sp, #20]
	col_index = (col_index + 1) & ODITHER_MASK;
 8015c2c:	f006 060f 	and.w	r6, r6, #15
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 8015c30:	4492      	add	sl, r2
 8015c32:	9a04      	ldr	r2, [sp, #16]
 8015c34:	f81a a00b 	ldrb.w	sl, [sl, fp]
 8015c38:	4452      	add	r2, sl
 8015c3a:	f800 2b01 	strb.w	r2, [r0], #1
	input_ptr += nc;
 8015c3e:	9a01      	ldr	r2, [sp, #4]
 8015c40:	4494      	add	ip, r2
      for (col = width; col > 0; col--) {
 8015c42:	e7e2      	b.n	8015c0a <quantize_ord_dither+0x74>

08015c44 <create_colorindex>:
{
 8015c44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8015c48:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8015c4c:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015c4e:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 8015c52:	4604      	mov	r4, r0
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 8015c54:	2b01      	cmp	r3, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8015c56:	f44f 78ff 	mov.w	r8, #510	; 0x1fe
    cquantize->is_padded = FALSE;
 8015c5a:	bf16      	itet	ne
 8015c5c:	2300      	movne	r3, #0
    pad = MAXJSAMPLE*2;
 8015c5e:	f44f 76ff 	moveq.w	r6, #510	; 0x1fe
    pad = 0;
 8015c62:	461e      	movne	r6, r3
 8015c64:	61eb      	str	r3, [r5, #28]
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8015c66:	6843      	ldr	r3, [r0, #4]
 8015c68:	f506 7280 	add.w	r2, r6, #256	; 0x100
 8015c6c:	689f      	ldr	r7, [r3, #8]
 8015c6e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8015c70:	47b8      	blx	r7
  blksize = cquantize->sv_actual;
 8015c72:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8015c76:	f105 0e20 	add.w	lr, r5, #32
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015c7a:	2300      	movs	r3, #0
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 8015c7c:	61a8      	str	r0, [r5, #24]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015c7e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8015c80:	429a      	cmp	r2, r3
 8015c82:	dc01      	bgt.n	8015c88 <create_colorindex+0x44>
}
 8015c84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8015c88:	f85e 1b04 	ldr.w	r1, [lr], #4
    blksize = blksize / nci;
 8015c8c:	009f      	lsls	r7, r3, #2
 8015c8e:	69a8      	ldr	r0, [r5, #24]
 8015c90:	fb9c fcf1 	sdiv	ip, ip, r1
    if (pad)
 8015c94:	b126      	cbz	r6, 8015ca0 <create_colorindex+0x5c>
      cquantize->colorindex[i] += MAXJSAMPLE;
 8015c96:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 8015c9a:	32ff      	adds	r2, #255	; 0xff
 8015c9c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    k = largest_input_value(cinfo, i, 0, nci-1);
 8015ca0:	f101 39ff 	add.w	r9, r1, #4294967295
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8015ca4:	f101 0afe 	add.w	sl, r1, #254	; 0xfe
    indexptr = cquantize->colorindex[i];
 8015ca8:	59c2      	ldr	r2, [r0, r7]
    val = 0;
 8015caa:	2000      	movs	r0, #0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8015cac:	ea4f 0949 	mov.w	r9, r9, lsl #1
    for (j = 0; j <= MAXJSAMPLE; j++) {
 8015cb0:	4601      	mov	r1, r0
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8015cb2:	fb9a f7f9 	sdiv	r7, sl, r9
      while (j > k)		/* advance val if past boundary */
 8015cb6:	428f      	cmp	r7, r1
 8015cb8:	db0a      	blt.n	8015cd0 <create_colorindex+0x8c>
      indexptr[j] = (JSAMPLE) (val * blksize);
 8015cba:	fb10 fb0c 	smulbb	fp, r0, ip
 8015cbe:	f802 b001 	strb.w	fp, [r2, r1]
    for (j = 0; j <= MAXJSAMPLE; j++) {
 8015cc2:	3101      	adds	r1, #1
 8015cc4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8015cc8:	d1f5      	bne.n	8015cb6 <create_colorindex+0x72>
    if (pad)
 8015cca:	b93e      	cbnz	r6, 8015cdc <create_colorindex+0x98>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015ccc:	3301      	adds	r3, #1
 8015cce:	e7d6      	b.n	8015c7e <create_colorindex+0x3a>
	k = largest_input_value(cinfo, i, ++val, nci-1);
 8015cd0:	3001      	adds	r0, #1
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 8015cd2:	fb08 a700 	mla	r7, r8, r0, sl
 8015cd6:	fb97 f7f9 	sdiv	r7, r7, r9
 8015cda:	e7ec      	b.n	8015cb6 <create_colorindex+0x72>
 8015cdc:	4611      	mov	r1, r2
 8015cde:	f102 00ff 	add.w	r0, r2, #255	; 0xff
 8015ce2:	f1a2 07ff 	sub.w	r7, r2, #255	; 0xff
	indexptr[-j] = indexptr[0];
 8015ce6:	f892 9000 	ldrb.w	r9, [r2]
 8015cea:	f801 9d01 	strb.w	r9, [r1, #-1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 8015cee:	42b9      	cmp	r1, r7
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 8015cf0:	f892 90ff 	ldrb.w	r9, [r2, #255]	; 0xff
 8015cf4:	f800 9f01 	strb.w	r9, [r0, #1]!
      for (j = 1; j <= MAXJSAMPLE; j++) {
 8015cf8:	d1f5      	bne.n	8015ce6 <create_colorindex+0xa2>
 8015cfa:	e7e7      	b.n	8015ccc <create_colorindex+0x88>

08015cfc <start_pass_1_quant>:
{
 8015cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015d00:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 8015d04:	4604      	mov	r4, r0
  cinfo->colormap = cquantize->sv_colormap;
 8015d06:	692b      	ldr	r3, [r5, #16]
 8015d08:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  cinfo->actual_number_of_colors = cquantize->sv_actual;
 8015d0c:	696b      	ldr	r3, [r5, #20]
 8015d0e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  switch (cinfo->dither_mode) {
 8015d12:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8015d16:	2b01      	cmp	r3, #1
 8015d18:	d00b      	beq.n	8015d32 <start_pass_1_quant+0x36>
 8015d1a:	2b02      	cmp	r3, #2
 8015d1c:	d05e      	beq.n	8015ddc <start_pass_1_quant+0xe0>
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d174      	bne.n	8015e0c <start_pass_1_quant+0x110>
    if (cinfo->out_color_components == 3)
 8015d22:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8015d24:	2b03      	cmp	r3, #3
      cquantize->pub.color_quantize = color_quantize3;
 8015d26:	bf0c      	ite	eq
 8015d28:	4b3c      	ldreq	r3, [pc, #240]	; (8015e1c <start_pass_1_quant+0x120>)
      cquantize->pub.color_quantize = color_quantize;
 8015d2a:	4b3d      	ldrne	r3, [pc, #244]	; (8015e20 <start_pass_1_quant+0x124>)
 8015d2c:	606b      	str	r3, [r5, #4]
}
 8015d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (cinfo->out_color_components == 3)
 8015d32:	6f81      	ldr	r1, [r0, #120]	; 0x78
      cquantize->pub.color_quantize = quantize_ord_dither;
 8015d34:	4b3b      	ldr	r3, [pc, #236]	; (8015e24 <start_pass_1_quant+0x128>)
 8015d36:	4a3c      	ldr	r2, [pc, #240]	; (8015e28 <start_pass_1_quant+0x12c>)
 8015d38:	2903      	cmp	r1, #3
 8015d3a:	bf18      	it	ne
 8015d3c:	4613      	movne	r3, r2
 8015d3e:	606b      	str	r3, [r5, #4]
    cquantize->row_index = 0;	/* initialize state for ordered dither */
 8015d40:	2300      	movs	r3, #0
 8015d42:	632b      	str	r3, [r5, #48]	; 0x30
    if (! cquantize->is_padded)
 8015d44:	69eb      	ldr	r3, [r5, #28]
 8015d46:	b90b      	cbnz	r3, 8015d4c <start_pass_1_quant+0x50>
      create_colorindex(cinfo);
 8015d48:	f7ff ff7c 	bl	8015c44 <create_colorindex>
    if (cquantize->odither[0] == NULL)
 8015d4c:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 8015d4e:	2d00      	cmp	r5, #0
 8015d50:	d1ed      	bne.n	8015d2e <start_pass_1_quant+0x32>
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015d52:	f8d4 71e0 	ldr.w	r7, [r4, #480]	; 0x1e0
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015d56:	f107 0820 	add.w	r8, r7, #32
 8015d5a:	4646      	mov	r6, r8
 8015d5c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015d5e:	429d      	cmp	r5, r3
 8015d60:	dae5      	bge.n	8015d2e <start_pass_1_quant+0x32>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8015d62:	f856 9b04 	ldr.w	r9, [r6], #4
    for (j = 0; j < i; j++) {
 8015d66:	4642      	mov	r2, r8
 8015d68:	2300      	movs	r3, #0
 8015d6a:	429d      	cmp	r5, r3
 8015d6c:	d007      	beq.n	8015d7e <start_pass_1_quant+0x82>
      if (nci == cquantize->Ncolors[j]) {
 8015d6e:	f852 1b04 	ldr.w	r1, [r2], #4
 8015d72:	4589      	cmp	r9, r1
 8015d74:	d130      	bne.n	8015dd8 <start_pass_1_quant+0xdc>
	odither = cquantize->odither[j];
 8015d76:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015d7a:	6b58      	ldr	r0, [r3, #52]	; 0x34
    if (odither == NULL)	/* need a new table? */
 8015d7c:	bb48      	cbnz	r0, 8015dd2 <start_pass_1_quant+0xd6>
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8015d7e:	6863      	ldr	r3, [r4, #4]
 8015d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015d84:	2101      	movs	r1, #1
 8015d86:	4620      	mov	r0, r4
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	4798      	blx	r3
  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
 8015d8c:	f109 32ff 	add.w	r2, r9, #4294967295
 8015d90:	f100 013c 	add.w	r1, r0, #60	; 0x3c
 8015d94:	f8df c098 	ldr.w	ip, [pc, #152]	; 8015e30 <start_pass_1_quant+0x134>
 8015d98:	0252      	lsls	r2, r2, #9
  for (j = 0; j < ODITHER_SIZE; j++) {
 8015d9a:	f200 4a3c 	addw	sl, r0, #1084	; 0x43c
    for (k = 0; k < ODITHER_SIZE; k++) {
 8015d9e:	f1a1 0e40 	sub.w	lr, r1, #64	; 0x40
    for (j = 0; j < i; j++) {
 8015da2:	46e1      	mov	r9, ip
      num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 8015da4:	f819 3b01 	ldrb.w	r3, [r9], #1
 8015da8:	005b      	lsls	r3, r3, #1
 8015daa:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
      odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
 8015dae:	ebd3 2303 	rsbs	r3, r3, r3, lsl #8
 8015db2:	bf45      	ittet	mi
 8015db4:	425b      	negmi	r3, r3
 8015db6:	fb93 f3f2 	sdivmi	r3, r3, r2
 8015dba:	fb93 f3f2 	sdivpl	r3, r3, r2
 8015dbe:	425b      	negmi	r3, r3
 8015dc0:	f84e 3f04 	str.w	r3, [lr, #4]!
    for (k = 0; k < ODITHER_SIZE; k++) {
 8015dc4:	458e      	cmp	lr, r1
 8015dc6:	d1ed      	bne.n	8015da4 <start_pass_1_quant+0xa8>
  for (j = 0; j < ODITHER_SIZE; j++) {
 8015dc8:	3140      	adds	r1, #64	; 0x40
 8015dca:	f10c 0c10 	add.w	ip, ip, #16
 8015dce:	458a      	cmp	sl, r1
 8015dd0:	d1e5      	bne.n	8015d9e <start_pass_1_quant+0xa2>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015dd2:	3501      	adds	r5, #1
    cquantize->odither[i] = odither;
 8015dd4:	6130      	str	r0, [r6, #16]
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015dd6:	e7c1      	b.n	8015d5c <start_pass_1_quant+0x60>
    for (j = 0; j < i; j++) {
 8015dd8:	3301      	adds	r3, #1
 8015dda:	e7c6      	b.n	8015d6a <start_pass_1_quant+0x6e>
    cquantize->pub.color_quantize = quantize_fs_dither;
 8015ddc:	4b13      	ldr	r3, [pc, #76]	; (8015e2c <start_pass_1_quant+0x130>)
 8015dde:	606b      	str	r3, [r5, #4]
    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 8015de0:	2300      	movs	r3, #0
 8015de2:	656b      	str	r3, [r5, #84]	; 0x54
    if (cquantize->fserrors[0] == NULL)
 8015de4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8015de6:	b90b      	cbnz	r3, 8015dec <start_pass_1_quant+0xf0>
      alloc_fs_workspace(cinfo);
 8015de8:	f7ff fe19 	bl	8015a1e <alloc_fs_workspace>
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015dec:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8015dee:	3544      	adds	r5, #68	; 0x44
    for (i = 0; i < cinfo->out_color_components; i++)
 8015df0:	2700      	movs	r7, #0
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 8015df2:	3202      	adds	r2, #2
 8015df4:	0056      	lsls	r6, r2, #1
    for (i = 0; i < cinfo->out_color_components; i++)
 8015df6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015df8:	42bb      	cmp	r3, r7
 8015dfa:	dd98      	ble.n	8015d2e <start_pass_1_quant+0x32>
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 8015dfc:	4632      	mov	r2, r6
 8015dfe:	2100      	movs	r1, #0
 8015e00:	f855 0b04 	ldr.w	r0, [r5], #4
    for (i = 0; i < cinfo->out_color_components; i++)
 8015e04:	3701      	adds	r7, #1
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 8015e06:	f014 f8b3 	bl	8029f70 <memset>
    for (i = 0; i < cinfo->out_color_components; i++)
 8015e0a:	e7f4      	b.n	8015df6 <start_pass_1_quant+0xfa>
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8015e0c:	6803      	ldr	r3, [r0, #0]
 8015e0e:	2231      	movs	r2, #49	; 0x31
}
 8015e10:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 8015e14:	615a      	str	r2, [r3, #20]
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	4718      	bx	r3
 8015e1a:	bf00      	nop
 8015e1c:	08015917 	.word	0x08015917
 8015e20:	080158b9 	.word	0x080158b9
 8015e24:	08015971 	.word	0x08015971
 8015e28:	08015b97 	.word	0x08015b97
 8015e2c:	08015a59 	.word	0x08015a59
 8015e30:	0802f280 	.word	0x0802f280

08015e34 <jinit_1pass_quantizer>:
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8015e34:	6843      	ldr	r3, [r0, #4]
 8015e36:	2258      	movs	r2, #88	; 0x58
 8015e38:	2101      	movs	r1, #1
 8015e3a:	681b      	ldr	r3, [r3, #0]
{
 8015e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e40:	b085      	sub	sp, #20
 8015e42:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8015e44:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_1_quant;
 8015e46:	4b69      	ldr	r3, [pc, #420]	; (8015fec <jinit_1pass_quantizer+0x1b8>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8015e48:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
  cquantize->pub.start_pass = start_pass_1_quant;
 8015e4c:	6003      	str	r3, [r0, #0]
  cquantize->pub.finish_pass = finish_pass_1_quant;
 8015e4e:	4b68      	ldr	r3, [pc, #416]	; (8015ff0 <jinit_1pass_quantizer+0x1bc>)
 8015e50:	6083      	str	r3, [r0, #8]
  cquantize->pub.new_color_map = new_color_map_1_quant;
 8015e52:	4b68      	ldr	r3, [pc, #416]	; (8015ff4 <jinit_1pass_quantizer+0x1c0>)
 8015e54:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
 8015e56:	2300      	movs	r3, #0
 8015e58:	6443      	str	r3, [r0, #68]	; 0x44
  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
 8015e5a:	6343      	str	r3, [r0, #52]	; 0x34

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
 8015e5c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015e5e:	2b04      	cmp	r3, #4
 8015e60:	dd07      	ble.n	8015e72 <jinit_1pass_quantizer+0x3e>
    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
 8015e62:	6823      	ldr	r3, [r4, #0]
 8015e64:	2039      	movs	r0, #57	; 0x39
 8015e66:	2204      	movs	r2, #4
 8015e68:	e9c3 0205 	strd	r0, r2, [r3, #20]
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	4620      	mov	r0, r4
 8015e70:	4798      	blx	r3
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
 8015e72:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8015e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015e78:	dd08      	ble.n	8015e8c <jinit_1pass_quantizer+0x58>
 8015e7a:	6823      	ldr	r3, [r4, #0]
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
 8015e7c:	213b      	movs	r1, #59	; 0x3b
 8015e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015e82:	4620      	mov	r0, r4
 8015e84:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	4798      	blx	r3
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8015e8c:	f8d4 61e0 	ldr.w	r6, [r4, #480]	; 0x1e0
  iroot = 1;
 8015e90:	2301      	movs	r3, #1
  int nc = cinfo->out_color_components; /* number of color components */
 8015e92:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
  total_colors = select_ncolors(cinfo, cquantize->Ncolors);
 8015e96:	f106 0720 	add.w	r7, r6, #32
  int max_colors = cinfo->desired_number_of_colors;
 8015e9a:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
    iroot++;
 8015e9e:	469a      	mov	sl, r3
 8015ea0:	3301      	adds	r3, #1
    for (i = 1; i < nc; i++)
 8015ea2:	2101      	movs	r1, #1
    temp = iroot;		/* set temp = iroot ** nc */
 8015ea4:	461a      	mov	r2, r3
    for (i = 1; i < nc; i++)
 8015ea6:	4588      	cmp	r8, r1
 8015ea8:	dc49      	bgt.n	8015f3e <jinit_1pass_quantizer+0x10a>
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
 8015eaa:	4591      	cmp	r9, r2
 8015eac:	daf7      	bge.n	8015e9e <jinit_1pass_quantizer+0x6a>
  if (iroot < 2)
 8015eae:	f1ba 0f01 	cmp.w	sl, #1
 8015eb2:	d106      	bne.n	8015ec2 <jinit_1pass_quantizer+0x8e>
 8015eb4:	6823      	ldr	r3, [r4, #0]
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
 8015eb6:	213a      	movs	r1, #58	; 0x3a
 8015eb8:	4620      	mov	r0, r4
 8015eba:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	4798      	blx	r3
 8015ec2:	f106 021c 	add.w	r2, r6, #28
    for (i = 1; i < nc; i++)
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	2501      	movs	r5, #1
  for (i = 0; i < nc; i++) {
 8015eca:	4598      	cmp	r8, r3
 8015ecc:	dc3a      	bgt.n	8015f44 <jinit_1pass_quantizer+0x110>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8015ece:	f8df e128 	ldr.w	lr, [pc, #296]	; 8015ff8 <jinit_1pass_quantizer+0x1c4>
    changed = FALSE;
 8015ed2:	2100      	movs	r1, #0
    for (i = 0; i < nc; i++) {
 8015ed4:	460b      	mov	r3, r1
 8015ed6:	4598      	cmp	r8, r3
 8015ed8:	dc3a      	bgt.n	8015f50 <jinit_1pass_quantizer+0x11c>
  } while (changed);
 8015eda:	2900      	cmp	r1, #0
 8015edc:	d1f9      	bne.n	8015ed2 <jinit_1pass_quantizer+0x9e>
  if (cinfo->out_color_components == 3)
 8015ede:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8015ee0:	6823      	ldr	r3, [r4, #0]
 8015ee2:	2903      	cmp	r1, #3
 8015ee4:	685a      	ldr	r2, [r3, #4]
 8015ee6:	d14a      	bne.n	8015f7e <jinit_1pass_quantizer+0x14a>
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 8015ee8:	619d      	str	r5, [r3, #24]
 8015eea:	6a31      	ldr	r1, [r6, #32]
 8015eec:	61d9      	str	r1, [r3, #28]
 8015eee:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8015ef0:	6219      	str	r1, [r3, #32]
 8015ef2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8015ef4:	6259      	str	r1, [r3, #36]	; 0x24
 8015ef6:	2160      	movs	r1, #96	; 0x60
 8015ef8:	6159      	str	r1, [r3, #20]
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8015efa:	2101      	movs	r1, #1
 8015efc:	4620      	mov	r0, r4
 8015efe:	4790      	blx	r2
  colormap = (*cinfo->mem->alloc_sarray)
 8015f00:	6863      	ldr	r3, [r4, #4]
 8015f02:	462a      	mov	r2, r5
 8015f04:	2101      	movs	r1, #1
 8015f06:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8015f0a:	4620      	mov	r0, r4
 8015f0c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015f0e:	47c0      	blx	r8
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015f10:	46ae      	mov	lr, r5
 8015f12:	2200      	movs	r2, #0
 8015f14:	e9cd 7000 	strd	r7, r0, [sp]
 8015f18:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015f1a:	429a      	cmp	r2, r3
 8015f1c:	db33      	blt.n	8015f86 <jinit_1pass_quantizer+0x152>
  cquantize->sv_colormap = colormap;
 8015f1e:	9b01      	ldr	r3, [sp, #4]

  /* Create the colormap and color index table. */
  create_colormap(cinfo);
  create_colorindex(cinfo);
 8015f20:	4620      	mov	r0, r4
  cquantize->sv_actual = total_colors;
 8015f22:	e9c6 3504 	strd	r3, r5, [r6, #16]
  create_colorindex(cinfo);
 8015f26:	f7ff fe8d 	bl	8015c44 <create_colorindex>
   * We do this now since it is FAR storage and may affect the memory
   * manager's space calculations.  If the user changes to FS dither
   * mode in a later pass, we will allocate the space then, and will
   * possibly overrun the max_memory_to_use setting.
   */
  if (cinfo->dither_mode == JDITHER_FS)
 8015f2a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8015f2e:	2b02      	cmp	r3, #2
 8015f30:	d158      	bne.n	8015fe4 <jinit_1pass_quantizer+0x1b0>
    alloc_fs_workspace(cinfo);
 8015f32:	4620      	mov	r0, r4
}
 8015f34:	b005      	add	sp, #20
 8015f36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    alloc_fs_workspace(cinfo);
 8015f3a:	f7ff bd70 	b.w	8015a1e <alloc_fs_workspace>
      temp *= iroot;
 8015f3e:	435a      	muls	r2, r3
    for (i = 1; i < nc; i++)
 8015f40:	3101      	adds	r1, #1
 8015f42:	e7b0      	b.n	8015ea6 <jinit_1pass_quantizer+0x72>
    total_colors *= iroot;
 8015f44:	fb0a f505 	mul.w	r5, sl, r5
  for (i = 0; i < nc; i++) {
 8015f48:	3301      	adds	r3, #1
    Ncolors[i] = iroot;
 8015f4a:	f842 af04 	str.w	sl, [r2, #4]!
  for (i = 0; i < nc; i++) {
 8015f4e:	e7bc      	b.n	8015eca <jinit_1pass_quantizer+0x96>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 8015f50:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8015f54:	2a02      	cmp	r2, #2
 8015f56:	bf0c      	ite	eq
 8015f58:	f85e 0023 	ldreq.w	r0, [lr, r3, lsl #2]
 8015f5c:	4618      	movne	r0, r3
      temp = total_colors / Ncolors[j];
 8015f5e:	f857 c020 	ldr.w	ip, [r7, r0, lsl #2]
 8015f62:	fb95 f2fc 	sdiv	r2, r5, ip
      temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 8015f66:	fb0c 2202 	mla	r2, ip, r2, r2
 8015f6a:	f10c 0a01 	add.w	sl, ip, #1
      if (temp > (long) max_colors)
 8015f6e:	4591      	cmp	r9, r2
 8015f70:	dbb3      	blt.n	8015eda <jinit_1pass_quantizer+0xa6>
    for (i = 0; i < nc; i++) {
 8015f72:	3301      	adds	r3, #1
 8015f74:	4615      	mov	r5, r2
      changed = TRUE;
 8015f76:	2101      	movs	r1, #1
      Ncolors[j]++;		/* OK, apply the increment */
 8015f78:	f847 a020 	str.w	sl, [r7, r0, lsl #2]
    for (i = 0; i < nc; i++) {
 8015f7c:	e7ab      	b.n	8015ed6 <jinit_1pass_quantizer+0xa2>
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 8015f7e:	2161      	movs	r1, #97	; 0x61
 8015f80:	e9c3 1505 	strd	r1, r5, [r3, #20]
 8015f84:	e7b9      	b.n	8015efa <jinit_1pass_quantizer+0xc6>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8015f86:	9b00      	ldr	r3, [sp, #0]
 8015f88:	f853 9b04 	ldr.w	r9, [r3], #4
      val = output_value(cinfo, i, j, nci-1);
 8015f8c:	f109 3bff 	add.w	fp, r9, #4294967295
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 8015f90:	9300      	str	r3, [sp, #0]
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8015f92:	ea4f 036b 	mov.w	r3, fp, asr #1
    blksize = blkdist / nci;
 8015f96:	fb9e f8f9 	sdiv	r8, lr, r9
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8015f9a:	9302      	str	r3, [sp, #8]
    for (j = 0; j < nci; j++) {
 8015f9c:	2300      	movs	r3, #0
 8015f9e:	469a      	mov	sl, r3
 8015fa0:	4599      	cmp	r9, r3
 8015fa2:	dc02      	bgt.n	8015faa <jinit_1pass_quantizer+0x176>
  for (i = 0; i < cinfo->out_color_components; i++) {
 8015fa4:	3201      	adds	r2, #1
    blkdist = blksize;		/* blksize of this color is blkdist of next */
 8015fa6:	46c6      	mov	lr, r8
 8015fa8:	e7b6      	b.n	8015f18 <jinit_1pass_quantizer+0xe4>
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 8015faa:	ebc3 2103 	rsb	r1, r3, r3, lsl #8
 8015fae:	9f02      	ldr	r7, [sp, #8]
 8015fb0:	4439      	add	r1, r7
 8015fb2:	fb91 f1fb 	sdiv	r1, r1, fp
 8015fb6:	9103      	str	r1, [sp, #12]
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 8015fb8:	4651      	mov	r1, sl
 8015fba:	42a9      	cmp	r1, r5
 8015fbc:	db0f      	blt.n	8015fde <jinit_1pass_quantizer+0x1aa>
    for (j = 0; j < nci; j++) {
 8015fbe:	3301      	adds	r3, #1
 8015fc0:	44c2      	add	sl, r8
 8015fc2:	e7ed      	b.n	8015fa0 <jinit_1pass_quantizer+0x16c>
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8015fc4:	9801      	ldr	r0, [sp, #4]
 8015fc6:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
 8015fca:	4467      	add	r7, ip
	for (k = 0; k < blksize; k++)
 8015fcc:	f10c 0c01 	add.w	ip, ip, #1
	  colormap[i][ptr+k] = (JSAMPLE) val;
 8015fd0:	4638      	mov	r0, r7
 8015fd2:	9f03      	ldr	r7, [sp, #12]
 8015fd4:	5447      	strb	r7, [r0, r1]
	for (k = 0; k < blksize; k++)
 8015fd6:	45e0      	cmp	r8, ip
 8015fd8:	dcf4      	bgt.n	8015fc4 <jinit_1pass_quantizer+0x190>
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 8015fda:	4471      	add	r1, lr
 8015fdc:	e7ed      	b.n	8015fba <jinit_1pass_quantizer+0x186>
	for (k = 0; k < blksize; k++)
 8015fde:	f04f 0c00 	mov.w	ip, #0
 8015fe2:	e7f8      	b.n	8015fd6 <jinit_1pass_quantizer+0x1a2>
}
 8015fe4:	b005      	add	sp, #20
 8015fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fea:	bf00      	nop
 8015fec:	08015cfd 	.word	0x08015cfd
 8015ff0:	08015a4d 	.word	0x08015a4d
 8015ff4:	08015a4f 	.word	0x08015a4f
 8015ff8:	0802f274 	.word	0x0802f274

08015ffc <prescan_quantize>:
		  JSAMPARRAY output_buf, int num_rows)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
 8015ffc:	f8d0 21e0 	ldr.w	r2, [r0, #480]	; 0x1e0
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 8016000:	f8d0 c070 	ldr.w	ip, [r0, #112]	; 0x70
{
 8016004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  register hist3d histogram = cquantize->histogram;
 8016008:	6997      	ldr	r7, [r2, #24]

  for (row = 0; row < num_rows; row++) {
 801600a:	2500      	movs	r5, #0
 801600c:	f04f 0e02 	mov.w	lr, #2
 8016010:	429d      	cmp	r5, r3
 8016012:	db01      	blt.n	8016018 <prescan_quantize+0x1c>
      if (++(*histp) <= 0)
	(*histp)--;
      ptr += 3;
    }
  }
}
 8016014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (col = width; col > 0; col--) {
 8016018:	f851 2025 	ldr.w	r2, [r1, r5, lsl #2]
 801601c:	4666      	mov	r6, ip
 801601e:	3203      	adds	r2, #3
 8016020:	b90e      	cbnz	r6, 8016026 <prescan_quantize+0x2a>
  for (row = 0; row < num_rows; row++) {
 8016022:	3501      	adds	r5, #1
 8016024:	e7f4      	b.n	8016010 <prescan_quantize+0x14>
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8016026:	f812 4c02 	ldrb.w	r4, [r2, #-2]
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 801602a:	f812 8c03 	ldrb.w	r8, [r2, #-3]
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 801602e:	f812 0c01 	ldrb.w	r0, [r2, #-1]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8016032:	08a4      	lsrs	r4, r4, #2
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 8016034:	ea4f 08d8 	mov.w	r8, r8, lsr #3
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 8016038:	01a4      	lsls	r4, r4, #6
 801603a:	08c0      	lsrs	r0, r0, #3
 801603c:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 8016040:	fb1e 4000 	smlabb	r0, lr, r0, r4
      if (++(*histp) <= 0)
 8016044:	f838 4000 	ldrh.w	r4, [r8, r0]
 8016048:	3401      	adds	r4, #1
 801604a:	b2a4      	uxth	r4, r4
 801604c:	b10c      	cbz	r4, 8016052 <prescan_quantize+0x56>
 801604e:	f828 4000 	strh.w	r4, [r8, r0]
    for (col = width; col > 0; col--) {
 8016052:	3e01      	subs	r6, #1
 8016054:	3203      	adds	r2, #3
 8016056:	e7e3      	b.n	8016020 <prescan_quantize+0x24>

08016058 <init_error_limit>:
 */

LOCAL(void)
init_error_limit (j_decompress_ptr cinfo)
/* Allocate and fill in the error_limiter table */
{
 8016058:	b538      	push	{r3, r4, r5, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  int * table;
  int in, out;

  table = (int *) (*cinfo->mem->alloc_small)
 801605a:	6843      	ldr	r3, [r0, #4]
 801605c:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8016060:	2101      	movs	r1, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016062:	f8d0 41e0 	ldr.w	r4, [r0, #480]	; 0x1e0
  table = (int *) (*cinfo->mem->alloc_small)
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	4798      	blx	r3
    ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
 801606a:	f500 737f 	add.w	r3, r0, #1020	; 0x3fc
 801606e:	f500 717e 	add.w	r1, r0, #1016	; 0x3f8
 8016072:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  cquantize->error_limiter = table;
 8016076:	62a3      	str	r3, [r4, #40]	; 0x28

#define STEPSIZE ((MAXJSAMPLE+1)/16)
  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
  out = 0;
  for (in = 0; in < STEPSIZE; in++, out++) {
 8016078:	2300      	movs	r3, #0
    table[in] = out; table[-in] = -out;
 801607a:	425c      	negs	r4, r3
 801607c:	f841 3f04 	str.w	r3, [r1, #4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 8016080:	3301      	adds	r3, #1
    table[in] = out; table[-in] = -out;
 8016082:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (in = 0; in < STEPSIZE; in++, out++) {
 8016086:	2b10      	cmp	r3, #16
 8016088:	d1f7      	bne.n	801607a <init_error_limit+0x22>
 801608a:	f500 6487 	add.w	r4, r0, #1080	; 0x438
 801608e:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
 8016092:	f06f 0211 	mvn.w	r2, #17
  }
  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
    table[in] = out; table[-in] = -out;
 8016096:	425d      	negs	r5, r3
 8016098:	f844 3f04 	str.w	r3, [r4, #4]!
 801609c:	f841 5d04 	str.w	r5, [r1, #-4]!
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 80160a0:	f002 0501 	and.w	r5, r2, #1
 80160a4:	3a01      	subs	r2, #1
 80160a6:	442b      	add	r3, r5
 80160a8:	f112 0f32 	cmn.w	r2, #50	; 0x32
 80160ac:	d1f3      	bne.n	8016096 <init_error_limit+0x3e>
 80160ae:	f500 6197 	add.w	r1, r0, #1208	; 0x4b8
 80160b2:	f500 7250 	add.w	r2, r0, #832	; 0x340
  }
  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
  for (; in <= MAXJSAMPLE; in++) {
    table[in] = out; table[-in] = -out;
 80160b6:	425c      	negs	r4, r3
 80160b8:	f841 3f04 	str.w	r3, [r1, #4]!
 80160bc:	f842 4d04 	str.w	r4, [r2, #-4]!
  for (; in <= MAXJSAMPLE; in++) {
 80160c0:	4282      	cmp	r2, r0
 80160c2:	d1f9      	bne.n	80160b8 <init_error_limit+0x60>
  }
#undef STEPSIZE
}
 80160c4:	bd38      	pop	{r3, r4, r5, pc}

080160c6 <finish_pass2>:

METHODDEF(void)
finish_pass2 (j_decompress_ptr cinfo)
{
  /* no work */
}
 80160c6:	4770      	bx	lr

080160c8 <new_color_map_2_quant>:
new_color_map_2_quant (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;

  /* Reset the inverse color map */
  cquantize->needs_zeroed = TRUE;
 80160c8:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 80160cc:	2201      	movs	r2, #1
 80160ce:	61da      	str	r2, [r3, #28]
}
 80160d0:	4770      	bx	lr
	...

080160d4 <start_pass_2_quant>:
{
 80160d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 80160d6:	f8d0 51e0 	ldr.w	r5, [r0, #480]	; 0x1e0
{
 80160da:	4604      	mov	r4, r0
  if (cinfo->dither_mode != JDITHER_NONE)
 80160dc:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
  hist3d histogram = cquantize->histogram;
 80160e0:	69ae      	ldr	r6, [r5, #24]
  if (cinfo->dither_mode != JDITHER_NONE)
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d050      	beq.n	8016188 <start_pass_2_quant+0xb4>
    cinfo->dither_mode = JDITHER_FS;
 80160e6:	2302      	movs	r3, #2
 80160e8:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  if (is_pre_scan) {
 80160ec:	b189      	cbz	r1, 8016112 <start_pass_2_quant+0x3e>
    cquantize->pub.color_quantize = prescan_quantize;
 80160ee:	4b28      	ldr	r3, [pc, #160]	; (8016190 <start_pass_2_quant+0xbc>)
 80160f0:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass1;
 80160f2:	4b28      	ldr	r3, [pc, #160]	; (8016194 <start_pass_2_quant+0xc0>)
 80160f4:	60ab      	str	r3, [r5, #8]
  if (cquantize->needs_zeroed) {
 80160f6:	1f34      	subs	r4, r6, #4
 80160f8:	367c      	adds	r6, #124	; 0x7c
      FMEMZERO((void FAR *) histogram[i],
 80160fa:	f854 0f04 	ldr.w	r0, [r4, #4]!
 80160fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016102:	2100      	movs	r1, #0
 8016104:	f013 ff34 	bl	8029f70 <memset>
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 8016108:	42a6      	cmp	r6, r4
 801610a:	d1f6      	bne.n	80160fa <start_pass_2_quant+0x26>
    cquantize->needs_zeroed = FALSE;
 801610c:	2300      	movs	r3, #0
 801610e:	61eb      	str	r3, [r5, #28]
}
 8016110:	e02f      	b.n	8016172 <start_pass_2_quant+0x9e>
      cquantize->pub.color_quantize = pass2_fs_dither;
 8016112:	4b21      	ldr	r3, [pc, #132]	; (8016198 <start_pass_2_quant+0xc4>)
 8016114:	606b      	str	r3, [r5, #4]
    cquantize->pub.finish_pass = finish_pass2;
 8016116:	4b21      	ldr	r3, [pc, #132]	; (801619c <start_pass_2_quant+0xc8>)
 8016118:	60ab      	str	r3, [r5, #8]
    i = cinfo->actual_number_of_colors;
 801611a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    if (i < 1)
 801611e:	2b00      	cmp	r3, #0
 8016120:	dc29      	bgt.n	8016176 <start_pass_2_quant+0xa2>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
 8016122:	223a      	movs	r2, #58	; 0x3a
 8016124:	6823      	ldr	r3, [r4, #0]
 8016126:	615a      	str	r2, [r3, #20]
 8016128:	2201      	movs	r2, #1
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 801612a:	619a      	str	r2, [r3, #24]
 801612c:	4620      	mov	r0, r4
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	4798      	blx	r3
    if (cinfo->dither_mode == JDITHER_FS) {
 8016132:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8016136:	2b02      	cmp	r3, #2
 8016138:	d118      	bne.n	801616c <start_pass_2_quant+0x98>
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 801613a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801613c:	2206      	movs	r2, #6
 801613e:	435a      	muls	r2, r3
      if (cquantize->fserrors == NULL)
 8016140:	6a2b      	ldr	r3, [r5, #32]
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 8016142:	320c      	adds	r2, #12
      if (cquantize->fserrors == NULL)
 8016144:	b93b      	cbnz	r3, 8016156 <start_pass_2_quant+0x82>
	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8016146:	6863      	ldr	r3, [r4, #4]
 8016148:	2101      	movs	r1, #1
 801614a:	4620      	mov	r0, r4
 801614c:	9201      	str	r2, [sp, #4]
 801614e:	685b      	ldr	r3, [r3, #4]
 8016150:	4798      	blx	r3
 8016152:	9a01      	ldr	r2, [sp, #4]
 8016154:	6228      	str	r0, [r5, #32]
      FMEMZERO((void FAR *) cquantize->fserrors, arraysize);
 8016156:	2100      	movs	r1, #0
 8016158:	6a28      	ldr	r0, [r5, #32]
 801615a:	f013 ff09 	bl	8029f70 <memset>
      if (cquantize->error_limiter == NULL)
 801615e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8016160:	b913      	cbnz	r3, 8016168 <start_pass_2_quant+0x94>
	init_error_limit(cinfo);
 8016162:	4620      	mov	r0, r4
 8016164:	f7ff ff78 	bl	8016058 <init_error_limit>
      cquantize->on_odd_row = FALSE;
 8016168:	2300      	movs	r3, #0
 801616a:	626b      	str	r3, [r5, #36]	; 0x24
  if (cquantize->needs_zeroed) {
 801616c:	69eb      	ldr	r3, [r5, #28]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d1c1      	bne.n	80160f6 <start_pass_2_quant+0x22>
}
 8016172:	b002      	add	sp, #8
 8016174:	bd70      	pop	{r4, r5, r6, pc}
    if (i > MAXNUMCOLORS)
 8016176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801617a:	ddda      	ble.n	8016132 <start_pass_2_quant+0x5e>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 801617c:	223b      	movs	r2, #59	; 0x3b
 801617e:	6823      	ldr	r3, [r4, #0]
 8016180:	615a      	str	r2, [r3, #20]
 8016182:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016186:	e7d0      	b.n	801612a <start_pass_2_quant+0x56>
  if (is_pre_scan) {
 8016188:	2900      	cmp	r1, #0
 801618a:	d1b0      	bne.n	80160ee <start_pass_2_quant+0x1a>
      cquantize->pub.color_quantize = pass2_no_dither;
 801618c:	4b04      	ldr	r3, [pc, #16]	; (80161a0 <start_pass_2_quant+0xcc>)
 801618e:	e7c1      	b.n	8016114 <start_pass_2_quant+0x40>
 8016190:	08015ffd 	.word	0x08015ffd
 8016194:	080168ff 	.word	0x080168ff
 8016198:	080166fd 	.word	0x080166fd
 801619c:	080160c7 	.word	0x080160c7
 80161a0:	08016673 	.word	0x08016673

080161a4 <update_box.isra.0>:
update_box (j_decompress_ptr cinfo, boxptr boxp)
 80161a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  c0min = boxp->c0min;  c0max = boxp->c0max;
 80161a8:	e9d1 7b00 	ldrd	r7, fp, [r1]
  hist3d histogram = cquantize->histogram;
 80161ac:	6983      	ldr	r3, [r0, #24]
update_box (j_decompress_ptr cinfo, boxptr boxp)
 80161ae:	b085      	sub	sp, #20
  if (c0max > c0min)
 80161b0:	455f      	cmp	r7, fp
  hist3d histogram = cquantize->histogram;
 80161b2:	9301      	str	r3, [sp, #4]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 80161b4:	463b      	mov	r3, r7
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80161b6:	e9d1 6404 	ldrd	r6, r4, [r1, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 80161ba:	e9d1 c002 	ldrd	ip, r0, [r1, #8]
  if (c0max > c0min)
 80161be:	ea4f 0e46 	mov.w	lr, r6, lsl #1
 80161c2:	db24      	blt.n	801620e <update_box.isra.0+0x6a>
  if (c1max > c1min)
 80161c4:	4584      	cmp	ip, r0
 80161c6:	4662      	mov	r2, ip
 80161c8:	db5d      	blt.n	8016286 <update_box.isra.0+0xe2>
  if (c2max > c2min)
 80161ca:	42a6      	cmp	r6, r4
 80161cc:	f280 80ec 	bge.w	80163a8 <update_box.isra.0+0x204>
	histp = & histogram[c0][c1min][c2];
 80161d0:	0195      	lsls	r5, r2, #6
 80161d2:	f06f 073f 	mvn.w	r7, #63	; 0x3f
 80161d6:	46b4      	mov	ip, r6
 80161d8:	9502      	str	r5, [sp, #8]
 80161da:	fb07 f502 	mul.w	r5, r7, r2
 80161de:	9503      	str	r5, [sp, #12]
 80161e0:	9d02      	ldr	r5, [sp, #8]
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80161e2:	469e      	mov	lr, r3
 80161e4:	eb05 094c 	add.w	r9, r5, ip, lsl #1
 80161e8:	9d03      	ldr	r5, [sp, #12]
 80161ea:	44a9      	add	r9, r5
 80161ec:	e083      	b.n	80162f6 <update_box.isra.0+0x152>
	histp = & histogram[c0][c1][c2min];
 80161ee:	9a01      	ldr	r2, [sp, #4]
 80161f0:	eb0e 1988 	add.w	r9, lr, r8, lsl #6
 80161f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80161f8:	444a      	add	r2, r9
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80161fa:	46b1      	mov	r9, r6
	for (c2 = c2min; c2 <= c2max; c2++)
 80161fc:	454c      	cmp	r4, r9
 80161fe:	da08      	bge.n	8016212 <update_box.isra.0+0x6e>
      for (c1 = c1min; c1 <= c1max; c1++) {
 8016200:	f108 0801 	add.w	r8, r8, #1
 8016204:	4540      	cmp	r0, r8
 8016206:	daf2      	bge.n	80161ee <update_box.isra.0+0x4a>
    for (c0 = c0min; c0 <= c0max; c0++)
 8016208:	3301      	adds	r3, #1
 801620a:	459b      	cmp	fp, r3
 801620c:	db0f      	blt.n	801622e <update_box.isra.0+0x8a>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 801620e:	46e0      	mov	r8, ip
 8016210:	e7f8      	b.n	8016204 <update_box.isra.0+0x60>
	  if (*histp++ != 0) {
 8016212:	f832 ab02 	ldrh.w	sl, [r2], #2
 8016216:	f1ba 0f00 	cmp.w	sl, #0
 801621a:	d005      	beq.n	8016228 <update_box.isra.0+0x84>
  if (c0max > c0min)
 801621c:	459b      	cmp	fp, r3
	    boxp->c0min = c0min = c0;
 801621e:	600b      	str	r3, [r1, #0]
  if (c0max > c0min)
 8016220:	ddd0      	ble.n	80161c4 <update_box.isra.0+0x20>
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8016222:	465f      	mov	r7, fp
 8016224:	46e0      	mov	r8, ip
 8016226:	e00f      	b.n	8016248 <update_box.isra.0+0xa4>
	for (c2 = c2min; c2 <= c2max; c2++)
 8016228:	f109 0901 	add.w	r9, r9, #1
 801622c:	e7e6      	b.n	80161fc <update_box.isra.0+0x58>
 have_c0min:
 801622e:	463b      	mov	r3, r7
 8016230:	e7f7      	b.n	8016222 <update_box.isra.0+0x7e>
	histp = & histogram[c0][c1][c2min];
 8016232:	9a01      	ldr	r2, [sp, #4]
 8016234:	eb0e 1988 	add.w	r9, lr, r8, lsl #6
 8016238:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801623c:	444a      	add	r2, r9
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801623e:	46b1      	mov	r9, r6
	for (c2 = c2min; c2 <= c2max; c2++)
 8016240:	454c      	cmp	r4, r9
 8016242:	da07      	bge.n	8016254 <update_box.isra.0+0xb0>
      for (c1 = c1min; c1 <= c1max; c1++) {
 8016244:	f108 0801 	add.w	r8, r8, #1
 8016248:	4540      	cmp	r0, r8
 801624a:	daf2      	bge.n	8016232 <update_box.isra.0+0x8e>
    for (c0 = c0max; c0 >= c0min; c0--)
 801624c:	3f01      	subs	r7, #1
 801624e:	429f      	cmp	r7, r3
 8016250:	dbb8      	blt.n	80161c4 <update_box.isra.0+0x20>
 8016252:	e7e7      	b.n	8016224 <update_box.isra.0+0x80>
	  if (*histp++ != 0) {
 8016254:	f832 ab02 	ldrh.w	sl, [r2], #2
 8016258:	f1ba 0f00 	cmp.w	sl, #0
 801625c:	d002      	beq.n	8016264 <update_box.isra.0+0xc0>
	    goto have_c0max;
 801625e:	46bb      	mov	fp, r7
	    boxp->c0max = c0max = c0;
 8016260:	604f      	str	r7, [r1, #4]
	    goto have_c0max;
 8016262:	e7af      	b.n	80161c4 <update_box.isra.0+0x20>
	for (c2 = c2min; c2 <= c2max; c2++)
 8016264:	f109 0901 	add.w	r9, r9, #1
 8016268:	e7ea      	b.n	8016240 <update_box.isra.0+0x9c>
	histp = & histogram[c0][c1][c2min];
 801626a:	9d01      	ldr	r5, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801626c:	46b1      	mov	r9, r6
	histp = & histogram[c0][c1][c2min];
 801626e:	f855 7028 	ldr.w	r7, [r5, r8, lsl #2]
 8016272:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 8016274:	454c      	cmp	r4, r9
 8016276:	da0a      	bge.n	801628e <update_box.isra.0+0xea>
      for (c0 = c0min; c0 <= c0max; c0++) {
 8016278:	f108 0801 	add.w	r8, r8, #1
 801627c:	45d8      	cmp	r8, fp
 801627e:	ddf4      	ble.n	801626a <update_box.isra.0+0xc6>
    for (c1 = c1min; c1 <= c1max; c1++)
 8016280:	3201      	adds	r2, #1
 8016282:	4290      	cmp	r0, r2
 8016284:	db11      	blt.n	80162aa <update_box.isra.0+0x106>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016286:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 8016288:	eb0e 1a82 	add.w	sl, lr, r2, lsl #6
 801628c:	e7f6      	b.n	801627c <update_box.isra.0+0xd8>
	  if (*histp++ != 0) {
 801628e:	f837 5b02 	ldrh.w	r5, [r7], #2
 8016292:	b13d      	cbz	r5, 80162a4 <update_box.isra.0+0x100>
  if (c1max > c1min)
 8016294:	4290      	cmp	r0, r2
	    boxp->c1min = c1min = c1;
 8016296:	608a      	str	r2, [r1, #8]
  if (c1max > c1min)
 8016298:	dd97      	ble.n	80161ca <update_box.isra.0+0x26>
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801629a:	4684      	mov	ip, r0
 801629c:	4698      	mov	r8, r3
	histp = & histogram[c0][c1][c2min];
 801629e:	eb0e 1a8c 	add.w	sl, lr, ip, lsl #6
 80162a2:	e00d      	b.n	80162c0 <update_box.isra.0+0x11c>
	for (c2 = c2min; c2 <= c2max; c2++)
 80162a4:	f109 0901 	add.w	r9, r9, #1
 80162a8:	e7e4      	b.n	8016274 <update_box.isra.0+0xd0>
 have_c1min:
 80162aa:	4662      	mov	r2, ip
 80162ac:	e7f5      	b.n	801629a <update_box.isra.0+0xf6>
	histp = & histogram[c0][c1][c2min];
 80162ae:	9d01      	ldr	r5, [sp, #4]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 80162b0:	46b1      	mov	r9, r6
	histp = & histogram[c0][c1][c2min];
 80162b2:	f855 7028 	ldr.w	r7, [r5, r8, lsl #2]
 80162b6:	4457      	add	r7, sl
	for (c2 = c2min; c2 <= c2max; c2++)
 80162b8:	454c      	cmp	r4, r9
 80162ba:	da09      	bge.n	80162d0 <update_box.isra.0+0x12c>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80162bc:	f108 0801 	add.w	r8, r8, #1
 80162c0:	45c3      	cmp	fp, r8
 80162c2:	daf4      	bge.n	80162ae <update_box.isra.0+0x10a>
    for (c1 = c1max; c1 >= c1min; c1--)
 80162c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80162c8:	4594      	cmp	ip, r2
 80162ca:	f6ff af7e 	blt.w	80161ca <update_box.isra.0+0x26>
 80162ce:	e7e5      	b.n	801629c <update_box.isra.0+0xf8>
	  if (*histp++ != 0) {
 80162d0:	f837 5b02 	ldrh.w	r5, [r7], #2
 80162d4:	b11d      	cbz	r5, 80162de <update_box.isra.0+0x13a>
	    goto have_c1max;
 80162d6:	4660      	mov	r0, ip
	    boxp->c1max = c1max = c1;
 80162d8:	f8c1 c00c 	str.w	ip, [r1, #12]
	    goto have_c1max;
 80162dc:	e775      	b.n	80161ca <update_box.isra.0+0x26>
	for (c2 = c2min; c2 <= c2max; c2++)
 80162de:	f109 0901 	add.w	r9, r9, #1
 80162e2:	e7e9      	b.n	80162b8 <update_box.isra.0+0x114>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80162e4:	9d01      	ldr	r5, [sp, #4]
 80162e6:	4690      	mov	r8, r2
 80162e8:	f855 702e 	ldr.w	r7, [r5, lr, lsl #2]
 80162ec:	444f      	add	r7, r9
 80162ee:	4580      	cmp	r8, r0
 80162f0:	dd11      	ble.n	8016316 <update_box.isra.0+0x172>
      for (c0 = c0min; c0 <= c0max; c0++) {
 80162f2:	f10e 0e01 	add.w	lr, lr, #1
 80162f6:	45f3      	cmp	fp, lr
 80162f8:	daf4      	bge.n	80162e4 <update_box.isra.0+0x140>
    for (c2 = c2min; c2 <= c2max; c2++)
 80162fa:	f10c 0c01 	add.w	ip, ip, #1
 80162fe:	4564      	cmp	r4, ip
 8016300:	f6bf af6e 	bge.w	80161e0 <update_box.isra.0+0x3c>
 have_c2min:
 8016304:	46b4      	mov	ip, r6
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016306:	4627      	mov	r7, r4
 8016308:	9d02      	ldr	r5, [sp, #8]
 801630a:	469e      	mov	lr, r3
 801630c:	eb05 0947 	add.w	r9, r5, r7, lsl #1
 8016310:	9d03      	ldr	r5, [sp, #12]
 8016312:	44a9      	add	r9, r5
 8016314:	e035      	b.n	8016382 <update_box.isra.0+0x1de>
	  if (*histp != 0) {
 8016316:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 801631a:	f837 a00a 	ldrh.w	sl, [r7, sl]
 801631e:	f1ba 0f00 	cmp.w	sl, #0
 8016322:	d022      	beq.n	801636a <update_box.isra.0+0x1c6>
  if (c2max > c2min)
 8016324:	4564      	cmp	r4, ip
	    boxp->c2min = c2min = c2;
 8016326:	f8c1 c010 	str.w	ip, [r1, #16]
  if (c2max > c2min)
 801632a:	dcec      	bgt.n	8016306 <update_box.isra.0+0x162>
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 801632c:	1a86      	subs	r6, r0, r2
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 801632e:	ebab 0e03 	sub.w	lr, fp, r3
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 8016332:	eba4 070c 	sub.w	r7, r4, ip
 8016336:	9d01      	ldr	r5, [sp, #4]
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 8016338:	ea4f 08c6 	mov.w	r8, r6, lsl #3
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 801633c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 8016340:	eb08 0886 	add.w	r8, r8, r6, lsl #2
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 8016344:	013e      	lsls	r6, r7, #4
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 8016346:	fb08 f808 	mul.w	r8, r8, r8
 801634a:	fb0e 8e0e 	mla	lr, lr, lr, r8
 801634e:	ea4f 084c 	mov.w	r8, ip, lsl #1
 8016352:	fb06 e606 	mla	r6, r6, r6, lr
 8016356:	eb05 0e83 	add.w	lr, r5, r3, lsl #2
  ccount = 0;
 801635a:	2500      	movs	r5, #0
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 801635c:	618e      	str	r6, [r1, #24]
  for (c0 = c0min; c0 <= c0max; c0++)
 801635e:	459b      	cmp	fp, r3
 8016360:	da3e      	bge.n	80163e0 <update_box.isra.0+0x23c>
  boxp->colorcount = ccount;
 8016362:	61cd      	str	r5, [r1, #28]
}
 8016364:	b005      	add	sp, #20
 8016366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 801636a:	f108 0801 	add.w	r8, r8, #1
 801636e:	e7be      	b.n	80162ee <update_box.isra.0+0x14a>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 8016370:	9d01      	ldr	r5, [sp, #4]
 8016372:	4690      	mov	r8, r2
 8016374:	f855 602e 	ldr.w	r6, [r5, lr, lsl #2]
 8016378:	444e      	add	r6, r9
 801637a:	4540      	cmp	r0, r8
 801637c:	da07      	bge.n	801638e <update_box.isra.0+0x1ea>
      for (c0 = c0min; c0 <= c0max; c0++) {
 801637e:	f10e 0e01 	add.w	lr, lr, #1
 8016382:	45f3      	cmp	fp, lr
 8016384:	daf4      	bge.n	8016370 <update_box.isra.0+0x1cc>
    for (c2 = c2max; c2 >= c2min; c2--)
 8016386:	3f01      	subs	r7, #1
 8016388:	4567      	cmp	r7, ip
 801638a:	dbcf      	blt.n	801632c <update_box.isra.0+0x188>
 801638c:	e7bc      	b.n	8016308 <update_box.isra.0+0x164>
	  if (*histp != 0) {
 801638e:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 8016392:	f836 a00a 	ldrh.w	sl, [r6, sl]
 8016396:	f1ba 0f00 	cmp.w	sl, #0
 801639a:	d002      	beq.n	80163a2 <update_box.isra.0+0x1fe>
	    goto have_c2max;
 801639c:	463c      	mov	r4, r7
	    boxp->c2max = c2max = c2;
 801639e:	614f      	str	r7, [r1, #20]
	    goto have_c2max;
 80163a0:	e7c4      	b.n	801632c <update_box.isra.0+0x188>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 80163a2:	f108 0801 	add.w	r8, r8, #1
 80163a6:	e7e8      	b.n	801637a <update_box.isra.0+0x1d6>
 have_c2min:
 80163a8:	46b4      	mov	ip, r6
 80163aa:	e7bf      	b.n	801632c <update_box.isra.0+0x188>
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 80163ac:	eb08 1687 	add.w	r6, r8, r7, lsl #6
 80163b0:	f1a6 0902 	sub.w	r9, r6, #2
 80163b4:	f8de 6000 	ldr.w	r6, [lr]
 80163b8:	444e      	add	r6, r9
 80163ba:	46e1      	mov	r9, ip
 80163bc:	454c      	cmp	r4, r9
 80163be:	da06      	bge.n	80163ce <update_box.isra.0+0x22a>
    for (c1 = c1min; c1 <= c1max; c1++) {
 80163c0:	3701      	adds	r7, #1
 80163c2:	42b8      	cmp	r0, r7
 80163c4:	daf2      	bge.n	80163ac <update_box.isra.0+0x208>
  for (c0 = c0min; c0 <= c0max; c0++)
 80163c6:	3301      	adds	r3, #1
 80163c8:	f10e 0e04 	add.w	lr, lr, #4
 80163cc:	e7c7      	b.n	801635e <update_box.isra.0+0x1ba>
	if (*histp != 0) {
 80163ce:	f836 af02 	ldrh.w	sl, [r6, #2]!
 80163d2:	f1ba 0f00 	cmp.w	sl, #0
 80163d6:	d000      	beq.n	80163da <update_box.isra.0+0x236>
	  ccount++;
 80163d8:	3501      	adds	r5, #1
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 80163da:	f109 0901 	add.w	r9, r9, #1
 80163de:	e7ed      	b.n	80163bc <update_box.isra.0+0x218>
 80163e0:	4617      	mov	r7, r2
 80163e2:	e7ee      	b.n	80163c2 <update_box.isra.0+0x21e>

080163e4 <fill_inverse_cmap>:
{
 80163e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163e8:	f2ad 5dc4 	subw	sp, sp, #1476	; 0x5c4
  minmaxdist = 0x7FFFFFFFL;
 80163ec:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  for (i = 0; i < numcolors; i++) {
 80163f0:	2500      	movs	r5, #0
{
 80163f2:	930a      	str	r3, [sp, #40]	; 0x28
  hist3d histogram = cquantize->histogram;
 80163f4:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 80163f8:	9001      	str	r0, [sp, #4]
  c1 >>= BOX_C1_LOG;
 80163fa:	10d0      	asrs	r0, r2, #3
  hist3d histogram = cquantize->histogram;
 80163fc:	699b      	ldr	r3, [r3, #24]
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 80163fe:	0140      	lsls	r0, r0, #5
  hist3d histogram = cquantize->histogram;
 8016400:	9306      	str	r3, [sp, #24]
  c2 >>= BOX_C2_LOG;
 8016402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 8016404:	f100 0a02 	add.w	sl, r0, #2
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 8016408:	301e      	adds	r0, #30
  c2 >>= BOX_C2_LOG;
 801640a:	109c      	asrs	r4, r3, #2
  int numcolors = cinfo->actual_number_of_colors;
 801640c:	9b01      	ldr	r3, [sp, #4]
  centerc1 = (minc1 + maxc1) >> 1;
 801640e:	eb0a 0b00 	add.w	fp, sl, r0
  int numcolors = cinfo->actual_number_of_colors;
 8016412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 8016416:	0164      	lsls	r4, r4, #5
  centerc1 = (minc1 + maxc1) >> 1;
 8016418:	ea4f 0b6b 	mov.w	fp, fp, asr #1
  int numcolors = cinfo->actual_number_of_colors;
 801641c:	9302      	str	r3, [sp, #8]
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 801641e:	f104 0804 	add.w	r8, r4, #4
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 8016422:	341c      	adds	r4, #28
{
 8016424:	e9cd 1208 	strd	r1, r2, [sp, #32]
  c0 >>= BOX_C0_LOG;
 8016428:	1089      	asrs	r1, r1, #2
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 801642a:	0149      	lsls	r1, r1, #5
 801642c:	f101 0904 	add.w	r9, r1, #4
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
 8016430:	311c      	adds	r1, #28
  centerc0 = (minc0 + maxc0) >> 1;
 8016432:	eb09 0301 	add.w	r3, r9, r1
 8016436:	105b      	asrs	r3, r3, #1
 8016438:	9303      	str	r3, [sp, #12]
  centerc2 = (minc2 + maxc2) >> 1;
 801643a:	eb08 0304 	add.w	r3, r8, r4
 801643e:	105b      	asrs	r3, r3, #1
 8016440:	9304      	str	r3, [sp, #16]
  for (i = 0; i < numcolors; i++) {
 8016442:	9b02      	ldr	r3, [sp, #8]
 8016444:	42ab      	cmp	r3, r5
 8016446:	dc3e      	bgt.n	80164c6 <fill_inverse_cmap+0xe2>
  ncolors = 0;
 8016448:	2200      	movs	r2, #0
 801644a:	a970      	add	r1, sp, #448	; 0x1c0
      colorlist[ncolors++] = (JSAMPLE) i;
 801644c:	ac30      	add	r4, sp, #192	; 0xc0
  for (i = 0; i < numcolors; i++) {
 801644e:	4610      	mov	r0, r2
 8016450:	9b02      	ldr	r3, [sp, #8]
 8016452:	4283      	cmp	r3, r0
 8016454:	f300 8097 	bgt.w	8016586 <fill_inverse_cmap+0x1a2>
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8016458:	2380      	movs	r3, #128	; 0x80
    *bptr++ = 0x7FFFFFFFL;
 801645a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 801645e:	3b01      	subs	r3, #1
    *bptr++ = 0x7FFFFFFFL;
 8016460:	f841 0b04 	str.w	r0, [r1], #4
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 8016464:	d1fb      	bne.n	801645e <fill_inverse_cmap+0x7a>
  for (i = 0; i < numcolors; i++) {
 8016466:	469b      	mov	fp, r3
 8016468:	4593      	cmp	fp, r2
 801646a:	f040 8094 	bne.w	8016596 <fill_inverse_cmap+0x1b2>
  c2 <<= BOX_C2_LOG;
 801646e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016470:	ad19      	add	r5, sp, #100	; 0x64
 8016472:	f023 0203 	bic.w	r2, r3, #3
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 8016476:	9b08      	ldr	r3, [sp, #32]
 8016478:	f023 0103 	bic.w	r1, r3, #3
 801647c:	9b06      	ldr	r3, [sp, #24]
 801647e:	eb03 0681 	add.w	r6, r3, r1, lsl #2
  c1 <<= BOX_C1_LOG;
 8016482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016484:	f023 0307 	bic.w	r3, r3, #7
 8016488:	4631      	mov	r1, r6
 801648a:	019b      	lsls	r3, r3, #6
 801648c:	3110      	adds	r1, #16
 801648e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 8016492:	f856 2b04 	ldr.w	r2, [r6], #4
 8016496:	f1a5 0420 	sub.w	r4, r5, #32
 801649a:	441a      	add	r2, r3
 801649c:	1f20      	subs	r0, r4, #4
 801649e:	4694      	mov	ip, r2
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 80164a0:	f810 7b01 	ldrb.w	r7, [r0], #1
 80164a4:	3701      	adds	r7, #1
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 80164a6:	42a0      	cmp	r0, r4
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 80164a8:	f82c 7b02 	strh.w	r7, [ip], #2
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 80164ac:	d1f8      	bne.n	80164a0 <fill_inverse_cmap+0xbc>
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 80164ae:	1d04      	adds	r4, r0, #4
 80164b0:	3240      	adds	r2, #64	; 0x40
 80164b2:	42ac      	cmp	r4, r5
 80164b4:	d1f2      	bne.n	801649c <fill_inverse_cmap+0xb8>
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 80164b6:	42b1      	cmp	r1, r6
 80164b8:	f100 0524 	add.w	r5, r0, #36	; 0x24
 80164bc:	d1e9      	bne.n	8016492 <fill_inverse_cmap+0xae>
}
 80164be:	f20d 5dc4 	addw	sp, sp, #1476	; 0x5c4
 80164c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    x = GETJSAMPLE(cinfo->colormap[0][i]);
 80164c6:	9b01      	ldr	r3, [sp, #4]
 80164c8:	f8d3 7088 	ldr.w	r7, [r3, #136]	; 0x88
 80164cc:	683b      	ldr	r3, [r7, #0]
 80164ce:	5d5a      	ldrb	r2, [r3, r5]
    if (x < minc0) {
 80164d0:	4591      	cmp	r9, r2
 80164d2:	dd2a      	ble.n	801652a <fill_inverse_cmap+0x146>
      tdist = (x - minc0) * C0_SCALE;
 80164d4:	eba2 0c09 	sub.w	ip, r2, r9
      tdist = (x - maxc0) * C0_SCALE;
 80164d8:	1a52      	subs	r2, r2, r1
      min_dist = tdist*tdist;
 80164da:	fb0c fc0c 	mul.w	ip, ip, ip
      max_dist = tdist*tdist;
 80164de:	4352      	muls	r2, r2
    x = GETJSAMPLE(cinfo->colormap[1][i]);
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc1) {
 80164e4:	459a      	cmp	sl, r3
 80164e6:	dd33      	ble.n	8016550 <fill_inverse_cmap+0x16c>
      tdist = (x - minc1) * C1_SCALE;
 80164e8:	eba3 0e0a 	sub.w	lr, r3, sl
 80164ec:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 80164f0:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - maxc1) * C1_SCALE;
 80164f4:	1a1b      	subs	r3, r3, r0
	tdist = (x - minc1) * C1_SCALE;
 80164f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	max_dist += tdist*tdist;
 80164fa:	fb03 2203 	mla	r2, r3, r3, r2
    x = GETJSAMPLE(cinfo->colormap[2][i]);
 80164fe:	68bb      	ldr	r3, [r7, #8]
 8016500:	5d5b      	ldrb	r3, [r3, r5]
    if (x < minc2) {
 8016502:	4598      	cmp	r8, r3
 8016504:	dd32      	ble.n	801656c <fill_inverse_cmap+0x188>
      tdist = (x - minc2) * C2_SCALE;
 8016506:	eba3 0708 	sub.w	r7, r3, r8
 801650a:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 801650c:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - maxc2) * C2_SCALE;
 8016510:	1b1b      	subs	r3, r3, r4
	tdist = (x - minc2) * C2_SCALE;
 8016512:	005b      	lsls	r3, r3, #1
	max_dist += tdist*tdist;
 8016514:	fb03 2303 	mla	r3, r3, r3, r2
    mindist[i] = min_dist;	/* save away the results */
 8016518:	aa70      	add	r2, sp, #448	; 0x1c0
 801651a:	429e      	cmp	r6, r3
 801651c:	f842 c025 	str.w	ip, [r2, r5, lsl #2]
  for (i = 0; i < numcolors; i++) {
 8016520:	f105 0501 	add.w	r5, r5, #1
 8016524:	bfa8      	it	ge
 8016526:	461e      	movge	r6, r3
 8016528:	e78b      	b.n	8016442 <fill_inverse_cmap+0x5e>
    } else if (x > maxc0) {
 801652a:	4291      	cmp	r1, r2
 801652c:	da06      	bge.n	801653c <fill_inverse_cmap+0x158>
      tdist = (x - maxc0) * C0_SCALE;
 801652e:	eba2 0c01 	sub.w	ip, r2, r1
      tdist = (x - minc0) * C0_SCALE;
 8016532:	eba2 0209 	sub.w	r2, r2, r9
      min_dist = tdist*tdist;
 8016536:	fb0c fc0c 	mul.w	ip, ip, ip
      tdist = (x - minc0) * C0_SCALE;
 801653a:	e7d0      	b.n	80164de <fill_inverse_cmap+0xfa>
      if (x <= centerc0) {
 801653c:	9b03      	ldr	r3, [sp, #12]
      min_dist = 0;
 801653e:	f04f 0c00 	mov.w	ip, #0
      if (x <= centerc0) {
 8016542:	4293      	cmp	r3, r2
	tdist = (x - maxc0) * C0_SCALE;
 8016544:	bfac      	ite	ge
 8016546:	1a52      	subge	r2, r2, r1
	tdist = (x - minc0) * C0_SCALE;
 8016548:	eba2 0209 	sublt.w	r2, r2, r9
	max_dist = tdist*tdist;
 801654c:	4352      	muls	r2, r2
 801654e:	e7c7      	b.n	80164e0 <fill_inverse_cmap+0xfc>
    } else if (x > maxc1) {
 8016550:	4298      	cmp	r0, r3
 8016552:	da08      	bge.n	8016566 <fill_inverse_cmap+0x182>
      tdist = (x - maxc1) * C1_SCALE;
 8016554:	eba3 0e00 	sub.w	lr, r3, r0
 8016558:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
      min_dist += tdist*tdist;
 801655c:	fb0e cc0e 	mla	ip, lr, lr, ip
	tdist = (x - minc1) * C1_SCALE;
 8016560:	eba3 030a 	sub.w	r3, r3, sl
 8016564:	e7c7      	b.n	80164f6 <fill_inverse_cmap+0x112>
      if (x <= centerc1) {
 8016566:	459b      	cmp	fp, r3
 8016568:	dbfa      	blt.n	8016560 <fill_inverse_cmap+0x17c>
 801656a:	e7c3      	b.n	80164f4 <fill_inverse_cmap+0x110>
    } else if (x > maxc2) {
 801656c:	429c      	cmp	r4, r3
 801656e:	da06      	bge.n	801657e <fill_inverse_cmap+0x19a>
      tdist = (x - maxc2) * C2_SCALE;
 8016570:	1b1f      	subs	r7, r3, r4
 8016572:	007f      	lsls	r7, r7, #1
      min_dist += tdist*tdist;
 8016574:	fb07 cc07 	mla	ip, r7, r7, ip
	tdist = (x - minc2) * C2_SCALE;
 8016578:	eba3 0308 	sub.w	r3, r3, r8
 801657c:	e7c9      	b.n	8016512 <fill_inverse_cmap+0x12e>
      if (x <= centerc2) {
 801657e:	9f04      	ldr	r7, [sp, #16]
 8016580:	429f      	cmp	r7, r3
 8016582:	dbf9      	blt.n	8016578 <fill_inverse_cmap+0x194>
 8016584:	e7c4      	b.n	8016510 <fill_inverse_cmap+0x12c>
    if (mindist[i] <= minmaxdist)
 8016586:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 801658a:	429e      	cmp	r6, r3
      colorlist[ncolors++] = (JSAMPLE) i;
 801658c:	bfa4      	itt	ge
 801658e:	54a0      	strbge	r0, [r4, r2]
 8016590:	3201      	addge	r2, #1
  for (i = 0; i < numcolors; i++) {
 8016592:	3001      	adds	r0, #1
 8016594:	e75c      	b.n	8016450 <fill_inverse_cmap+0x6c>
    icolor = GETJSAMPLE(colorlist[i]);
 8016596:	ab30      	add	r3, sp, #192	; 0xc0
 8016598:	f813 600b 	ldrb.w	r6, [r3, fp]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 801659c:	9b01      	ldr	r3, [sp, #4]
 801659e:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80165a2:	680b      	ldr	r3, [r1, #0]
 80165a4:	5d98      	ldrb	r0, [r3, r6]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80165a6:	684b      	ldr	r3, [r1, #4]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80165a8:	6889      	ldr	r1, [r1, #8]
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 80165aa:	eba9 0000 	sub.w	r0, r9, r0
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80165ae:	5d9b      	ldrb	r3, [r3, r6]
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80165b0:	5d89      	ldrb	r1, [r1, r6]
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80165b2:	ebaa 0303 	sub.w	r3, sl, r3
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80165b6:	eba8 0101 	sub.w	r1, r8, r1
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 80165ba:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 80165be:	0049      	lsls	r1, r1, #1
    dist0 += inc1*inc1;
 80165c0:	4364      	muls	r4, r4
 80165c2:	fb00 4400 	mla	r4, r0, r0, r4
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 80165c6:	3004      	adds	r0, #4
 80165c8:	0100      	lsls	r0, r0, #4
    dist0 += inc2*inc2;
 80165ca:	fb01 4401 	mla	r4, r1, r1, r4
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 80165ce:	3108      	adds	r1, #8
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 80165d0:	900b      	str	r0, [sp, #44]	; 0x2c
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 80165d2:	2048      	movs	r0, #72	; 0x48
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 80165d4:	0149      	lsls	r1, r1, #5
    dist0 += inc2*inc2;
 80165d6:	9403      	str	r4, [sp, #12]
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 80165d8:	4343      	muls	r3, r0
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 80165da:	9107      	str	r1, [sp, #28]
 80165dc:	2100      	movs	r1, #0
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 80165de:	f103 0090 	add.w	r0, r3, #144	; 0x90
 80165e2:	f503 6319 	add.w	r3, r3, #2448	; 0x990
 80165e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80165e8:	9b07      	ldr	r3, [sp, #28]
 80165ea:	900c      	str	r0, [sp, #48]	; 0x30
    cptr = bestcolor;
 80165ec:	a810      	add	r0, sp, #64	; 0x40
 80165ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80165f2:	9004      	str	r0, [sp, #16]
 80165f4:	930e      	str	r3, [sp, #56]	; 0x38
 80165f6:	ab70      	add	r3, sp, #448	; 0x1c0
      xx1 = inc1;
 80165f8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80165fa:	eb03 0c01 	add.w	ip, r3, r1
 80165fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016600:	440b      	add	r3, r1
 8016602:	930d      	str	r3, [sp, #52]	; 0x34
	xx2 = inc2;
 8016604:	9b04      	ldr	r3, [sp, #16]
 8016606:	9305      	str	r3, [sp, #20]
      xx1 = inc1;
 8016608:	9b03      	ldr	r3, [sp, #12]
 801660a:	9302      	str	r3, [sp, #8]
 801660c:	e01c      	b.n	8016648 <fill_inverse_cmap+0x264>
	  if (dist2 < *bptr) {
 801660e:	f853 7f04 	ldr.w	r7, [r3, #4]!
	  cptr++;
 8016612:	f10e 0e01 	add.w	lr, lr, #1
	  if (dist2 < *bptr) {
 8016616:	42a7      	cmp	r7, r4
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8016618:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	    *bptr = dist2;
 801661a:	bfc8      	it	gt
 801661c:	601c      	strgt	r4, [r3, #0]
	  dist2 += xx2;
 801661e:	442c      	add	r4, r5
	  xx2 += 2 * STEP_C2 * STEP_C2;
 8016620:	f505 7500 	add.w	r5, r5, #512	; 0x200
	    *cptr = (JSAMPLE) icolor;
 8016624:	bfc8      	it	gt
 8016626:	f80e 6c01 	strbgt.w	r6, [lr, #-1]
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 801662a:	42bd      	cmp	r5, r7
 801662c:	d1ef      	bne.n	801660e <fill_inverse_cmap+0x22a>
 801662e:	9b05      	ldr	r3, [sp, #20]
 8016630:	f10c 0c10 	add.w	ip, ip, #16
 8016634:	3304      	adds	r3, #4
 8016636:	9305      	str	r3, [sp, #20]
	dist1 += xx1;
 8016638:	9b02      	ldr	r3, [sp, #8]
 801663a:	4403      	add	r3, r0
	xx1 += 2 * STEP_C1 * STEP_C1;
 801663c:	f500 7090 	add.w	r0, r0, #288	; 0x120
	dist1 += xx1;
 8016640:	9302      	str	r3, [sp, #8]
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 8016642:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016644:	4298      	cmp	r0, r3
 8016646:	d006      	beq.n	8016656 <fill_inverse_cmap+0x272>
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 8016648:	f1ac 0304 	sub.w	r3, ip, #4
	xx2 = inc2;
 801664c:	9d07      	ldr	r5, [sp, #28]
 801664e:	f8dd e014 	ldr.w	lr, [sp, #20]
 8016652:	9c02      	ldr	r4, [sp, #8]
 8016654:	e7db      	b.n	801660e <fill_inverse_cmap+0x22a>
 8016656:	9b04      	ldr	r3, [sp, #16]
 8016658:	3180      	adds	r1, #128	; 0x80
      dist0 += xx0;
 801665a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801665c:	3320      	adds	r3, #32
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 801665e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016662:	9304      	str	r3, [sp, #16]
      dist0 += xx0;
 8016664:	9b03      	ldr	r3, [sp, #12]
 8016666:	4403      	add	r3, r0
 8016668:	9303      	str	r3, [sp, #12]
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 801666a:	d1c4      	bne.n	80165f6 <fill_inverse_cmap+0x212>
  for (i = 0; i < numcolors; i++) {
 801666c:	f10b 0b01 	add.w	fp, fp, #1
 8016670:	e6fa      	b.n	8016468 <fill_inverse_cmap+0x84>

08016672 <pass2_no_dither>:
{
 8016672:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016676:	b087      	sub	sp, #28
 8016678:	4688      	mov	r8, r1
  for (row = 0; row < num_rows; row++) {
 801667a:	2600      	movs	r6, #0
 801667c:	f04f 0a02 	mov.w	sl, #2
{
 8016680:	e9cd 2303 	strd	r2, r3, [sp, #12]
  hist3d histogram = cquantize->histogram;
 8016684:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
 8016688:	699b      	ldr	r3, [r3, #24]
 801668a:	9301      	str	r3, [sp, #4]
  JDIMENSION width = cinfo->output_width;
 801668c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 801668e:	9302      	str	r3, [sp, #8]
  for (row = 0; row < num_rows; row++) {
 8016690:	9b04      	ldr	r3, [sp, #16]
 8016692:	429e      	cmp	r6, r3
 8016694:	db02      	blt.n	801669c <pass2_no_dither+0x2a>
}
 8016696:	b007      	add	sp, #28
 8016698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outptr = output_buf[row];
 801669c:	9b03      	ldr	r3, [sp, #12]
 801669e:	f858 5026 	ldr.w	r5, [r8, r6, lsl #2]
 80166a2:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
    for (col = width; col > 0; col--) {
 80166a6:	9b02      	ldr	r3, [sp, #8]
 80166a8:	3503      	adds	r5, #3
 80166aa:	eb07 0b03 	add.w	fp, r7, r3
 80166ae:	455f      	cmp	r7, fp
 80166b0:	d101      	bne.n	80166b6 <pass2_no_dither+0x44>
  for (row = 0; row < num_rows; row++) {
 80166b2:	3601      	adds	r6, #1
 80166b4:	e7ec      	b.n	8016690 <pass2_no_dither+0x1e>
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 80166b6:	f815 4c02 	ldrb.w	r4, [r5, #-2]
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 80166ba:	f815 cc03 	ldrb.w	ip, [r5, #-3]
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 80166be:	ea4f 0e94 	mov.w	lr, r4, lsr #2
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 80166c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 80166c6:	ea4f 01dc 	mov.w	r1, ip, lsr #3
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 80166ca:	9a01      	ldr	r2, [sp, #4]
      cachep = & histogram[c0][c1][c2];
 80166cc:	4674      	mov	r4, lr
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 80166ce:	08db      	lsrs	r3, r3, #3
      if (*cachep == 0)
 80166d0:	f852 9021 	ldr.w	r9, [r2, r1, lsl #2]
      cachep = & histogram[c0][c1][c2];
 80166d4:	01a4      	lsls	r4, r4, #6
 80166d6:	fb1a 4403 	smlabb	r4, sl, r3, r4
      if (*cachep == 0)
 80166da:	f839 c004 	ldrh.w	ip, [r9, r4]
 80166de:	f1bc 0f00 	cmp.w	ip, #0
 80166e2:	d104      	bne.n	80166ee <pass2_no_dither+0x7c>
	fill_inverse_cmap(cinfo, c0,c1,c2);
 80166e4:	4672      	mov	r2, lr
 80166e6:	9005      	str	r0, [sp, #20]
 80166e8:	f7ff fe7c 	bl	80163e4 <fill_inverse_cmap>
 80166ec:	9805      	ldr	r0, [sp, #20]
      *outptr++ = (JSAMPLE) (*cachep - 1);
 80166ee:	f819 3004 	ldrb.w	r3, [r9, r4]
 80166f2:	3503      	adds	r5, #3
 80166f4:	3b01      	subs	r3, #1
 80166f6:	f807 3b01 	strb.w	r3, [r7], #1
    for (col = width; col > 0; col--) {
 80166fa:	e7d8      	b.n	80166ae <pass2_no_dither+0x3c>

080166fc <pass2_fs_dither>:
{
 80166fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016700:	f8d0 b1e0 	ldr.w	fp, [r0, #480]	; 0x1e0
{
 8016704:	b09f      	sub	sp, #124	; 0x7c
 8016706:	931c      	str	r3, [sp, #112]	; 0x70
  hist3d histogram = cquantize->histogram;
 8016708:	f8db 3018 	ldr.w	r3, [fp, #24]
 801670c:	9316      	str	r3, [sp, #88]	; 0x58
  JDIMENSION width = cinfo->output_width;
 801670e:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8016710:	9305      	str	r3, [sp, #20]
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 8016712:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8016716:	930a      	str	r3, [sp, #40]	; 0x28
  int *error_limit = cquantize->error_limiter;
 8016718:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
 801671c:	930b      	str	r3, [sp, #44]	; 0x2c
  JSAMPROW colormap0 = cinfo->colormap[0];
 801671e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8016722:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
  JSAMPROW colormap0 = cinfo->colormap[0];
 8016726:	681a      	ldr	r2, [r3, #0]
 8016728:	9217      	str	r2, [sp, #92]	; 0x5c
  JSAMPROW colormap1 = cinfo->colormap[1];
 801672a:	685a      	ldr	r2, [r3, #4]
  JSAMPROW colormap2 = cinfo->colormap[2];
 801672c:	689b      	ldr	r3, [r3, #8]
  JSAMPROW colormap1 = cinfo->colormap[1];
 801672e:	9218      	str	r2, [sp, #96]	; 0x60
  JSAMPROW colormap2 = cinfo->colormap[2];
 8016730:	9319      	str	r3, [sp, #100]	; 0x64
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8016732:	9b05      	ldr	r3, [sp, #20]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8016734:	9a05      	ldr	r2, [sp, #20]
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8016736:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801673a:	3b03      	subs	r3, #3
 801673c:	9311      	str	r3, [sp, #68]	; 0x44
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 801673e:	2306      	movs	r3, #6
 8016740:	fb02 3303 	mla	r3, r2, r3, r3
 8016744:	9313      	str	r3, [sp, #76]	; 0x4c
  for (row = 0; row < num_rows; row++) {
 8016746:	2300      	movs	r3, #0
 8016748:	9304      	str	r3, [sp, #16]
 801674a:	9b04      	ldr	r3, [sp, #16]
 801674c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801674e:	4293      	cmp	r3, r2
 8016750:	db02      	blt.n	8016758 <pass2_fs_dither+0x5c>
}
 8016752:	b01f      	add	sp, #124	; 0x7c
 8016754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inptr = input_buf[row];
 8016758:	9a04      	ldr	r2, [sp, #16]
 801675a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801675c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016760:	9300      	str	r3, [sp, #0]
    outptr = output_buf[row];
 8016762:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016768:	9303      	str	r3, [sp, #12]
    if (cquantize->on_odd_row) {
 801676a:	f8db 3020 	ldr.w	r3, [fp, #32]
 801676e:	9302      	str	r3, [sp, #8]
 8016770:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8016774:	2b00      	cmp	r3, #0
 8016776:	d039      	beq.n	80167ec <pass2_fs_dither+0xf0>
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8016778:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801677a:	9a00      	ldr	r2, [sp, #0]
 801677c:	441a      	add	r2, r3
      outptr += width-1;
 801677e:	9b05      	ldr	r3, [sp, #20]
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 8016780:	9200      	str	r2, [sp, #0]
      outptr += width-1;
 8016782:	3b01      	subs	r3, #1
 8016784:	9a03      	ldr	r2, [sp, #12]
 8016786:	441a      	add	r2, r3
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8016788:	9b02      	ldr	r3, [sp, #8]
      outptr += width-1;
 801678a:	9203      	str	r2, [sp, #12]
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 801678c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801678e:	4413      	add	r3, r2
      dir3 = -3;
 8016790:	f06f 0202 	mvn.w	r2, #2
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 8016794:	9302      	str	r3, [sp, #8]
      cquantize->on_odd_row = FALSE; /* flip for next time */
 8016796:	2300      	movs	r3, #0
      dir3 = -3;
 8016798:	9208      	str	r2, [sp, #32]
      dir = -1;
 801679a:	f04f 32ff 	mov.w	r2, #4294967295
 801679e:	920f      	str	r2, [sp, #60]	; 0x3c
 80167a0:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 80167a4:	2400      	movs	r4, #0
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80167a6:	9b08      	ldr	r3, [sp, #32]
 80167a8:	9e02      	ldr	r6, [sp, #8]
    cur0 = cur1 = cur2 = 0;
 80167aa:	4621      	mov	r1, r4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80167ac:	005b      	lsls	r3, r3, #1
    cur0 = cur1 = cur2 = 0;
 80167ae:	4622      	mov	r2, r4
    belowerr0 = belowerr1 = belowerr2 = 0;
 80167b0:	940c      	str	r4, [sp, #48]	; 0x30
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80167b2:	9301      	str	r3, [sp, #4]
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 80167b4:	3302      	adds	r3, #2
 80167b6:	9314      	str	r3, [sp, #80]	; 0x50
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 80167b8:	9b01      	ldr	r3, [sp, #4]
 80167ba:	3304      	adds	r3, #4
 80167bc:	9315      	str	r3, [sp, #84]	; 0x54
    for (col = width; col > 0; col--) {
 80167be:	9b05      	ldr	r3, [sp, #20]
 80167c0:	9309      	str	r3, [sp, #36]	; 0x24
    cur0 = cur1 = cur2 = 0;
 80167c2:	4623      	mov	r3, r4
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 80167c4:	e9cd 4406 	strd	r4, r4, [sp, #24]
    belowerr0 = belowerr1 = belowerr2 = 0;
 80167c8:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    for (col = width; col > 0; col--) {
 80167cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80167ce:	b995      	cbnz	r5, 80167f6 <pass2_fs_dither+0xfa>
 80167d0:	9b05      	ldr	r3, [sp, #20]
 80167d2:	9d01      	ldr	r5, [sp, #4]
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 80167d4:	9a02      	ldr	r2, [sp, #8]
 80167d6:	435d      	muls	r5, r3
 80167d8:	9906      	ldr	r1, [sp, #24]
 80167da:	9b02      	ldr	r3, [sp, #8]
 80167dc:	5351      	strh	r1, [r2, r5]
 80167de:	442b      	add	r3, r5
    errorptr[1] = (FSERROR) bpreverr1;
 80167e0:	9a07      	ldr	r2, [sp, #28]
    errorptr[2] = (FSERROR) bpreverr2;
 80167e2:	809c      	strh	r4, [r3, #4]
    errorptr[1] = (FSERROR) bpreverr1;
 80167e4:	805a      	strh	r2, [r3, #2]
  for (row = 0; row < num_rows; row++) {
 80167e6:	9b04      	ldr	r3, [sp, #16]
 80167e8:	3301      	adds	r3, #1
 80167ea:	e7ad      	b.n	8016748 <pass2_fs_dither+0x4c>
      cquantize->on_odd_row = TRUE; /* flip for next time */
 80167ec:	2301      	movs	r3, #1
      dir3 = 3;
 80167ee:	2203      	movs	r2, #3
      dir = 1;
 80167f0:	930f      	str	r3, [sp, #60]	; 0x3c
      dir3 = 3;
 80167f2:	9208      	str	r2, [sp, #32]
 80167f4:	e7d4      	b.n	80167a0 <pass2_fs_dither+0xa4>
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80167f6:	9f01      	ldr	r7, [sp, #4]
      cur0 += GETJSAMPLE(inptr[0]);
 80167f8:	9d00      	ldr	r5, [sp, #0]
 80167fa:	19f7      	adds	r7, r6, r7
 80167fc:	9712      	str	r7, [sp, #72]	; 0x48
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 80167fe:	9f01      	ldr	r7, [sp, #4]
 8016800:	5ff7      	ldrsh	r7, [r6, r7]
 8016802:	443b      	add	r3, r7
 8016804:	f103 0708 	add.w	r7, r3, #8
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8016808:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801680a:	5ef3      	ldrsh	r3, [r6, r3]
 801680c:	441a      	add	r2, r3
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 801680e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016810:	5ef3      	ldrsh	r3, [r6, r3]
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8016812:	3208      	adds	r2, #8
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8016814:	440b      	add	r3, r1
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 8016816:	1112      	asrs	r2, r2, #4
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 8016818:	1139      	asrs	r1, r7, #4
      cur0 = error_limit[cur0];
 801681a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 801681c:	3308      	adds	r3, #8
      cur0 = error_limit[cur0];
 801681e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 8016822:	111b      	asrs	r3, r3, #4
      cur1 = error_limit[cur1];
 8016824:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
      cur2 = error_limit[cur2];
 8016828:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
      cur0 += GETJSAMPLE(inptr[0]);
 801682c:	782f      	ldrb	r7, [r5, #0]
      cur0 = GETJSAMPLE(range_limit[cur0]);
 801682e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016830:	4429      	add	r1, r5
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8016832:	442a      	add	r2, r5
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8016834:	442b      	add	r3, r5
 8016836:	9d16      	ldr	r5, [sp, #88]	; 0x58
      cur0 = GETJSAMPLE(range_limit[cur0]);
 8016838:	f811 a007 	ldrb.w	sl, [r1, r7]
      cur1 += GETJSAMPLE(inptr[1]);
 801683c:	9900      	ldr	r1, [sp, #0]
 801683e:	7849      	ldrb	r1, [r1, #1]
      cur1 = GETJSAMPLE(range_limit[cur1]);
 8016840:	f812 9001 	ldrb.w	r9, [r2, r1]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8016844:	ea4f 01ea 	mov.w	r1, sl, asr #3
      cur2 += GETJSAMPLE(inptr[2]);
 8016848:	9a00      	ldr	r2, [sp, #0]
 801684a:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801684e:	7892      	ldrb	r2, [r2, #2]
 8016850:	9510      	str	r5, [sp, #64]	; 0x40
      cur2 = GETJSAMPLE(range_limit[cur2]);
 8016852:	f813 8002 	ldrb.w	r8, [r3, r2]
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 8016856:	ea4f 02a9 	mov.w	r2, r9, asr #2
 801685a:	ea4f 03e8 	mov.w	r3, r8, asr #3
 801685e:	0197      	lsls	r7, r2, #6
 8016860:	eb07 0743 	add.w	r7, r7, r3, lsl #1
      if (*cachep == 0)
 8016864:	f835 c007 	ldrh.w	ip, [r5, r7]
 8016868:	f1bc 0f00 	cmp.w	ip, #0
 801686c:	d103      	bne.n	8016876 <pass2_fs_dither+0x17a>
	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 801686e:	901d      	str	r0, [sp, #116]	; 0x74
 8016870:	f7ff fdb8 	bl	80163e4 <fill_inverse_cmap>
 8016874:	981d      	ldr	r0, [sp, #116]	; 0x74
      { register int pixcode = *cachep - 1;
 8016876:	9b10      	ldr	r3, [sp, #64]	; 0x40
	*outptr = (JSAMPLE) pixcode;
 8016878:	9a03      	ldr	r2, [sp, #12]
      { register int pixcode = *cachep - 1;
 801687a:	5bdb      	ldrh	r3, [r3, r7]
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 801687c:	9907      	ldr	r1, [sp, #28]
      { register int pixcode = *cachep - 1;
 801687e:	3b01      	subs	r3, #1
      inptr += dir3;		/* Advance pixel pointers to next column */
 8016880:	9d08      	ldr	r5, [sp, #32]
	*outptr = (JSAMPLE) pixcode;
 8016882:	7013      	strb	r3, [r2, #0]
	cur0 -= GETJSAMPLE(colormap0[pixcode]);
 8016884:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016886:	5cd2      	ldrb	r2, [r2, r3]
 8016888:	ebaa 0a02 	sub.w	sl, sl, r2
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 801688c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801688e:	5cd2      	ldrb	r2, [r2, r3]
 8016890:	eba9 0902 	sub.w	r9, r9, r2
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 8016894:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016896:	5cd3      	ldrb	r3, [r2, r3]
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 8016898:	9a06      	ldr	r2, [sp, #24]
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 801689a:	eba8 0803 	sub.w	r8, r8, r3
	cur0 += delta;		/* form error * 3 */
 801689e:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 80168a2:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 5 */
 80168a4:	eb03 034a 	add.w	r3, r3, sl, lsl #1
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 80168a8:	8032      	strh	r2, [r6, #0]
	bpreverr0 = belowerr0 + cur0;
 80168aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	belowerr0 = bnexterr;
 80168ac:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
	bpreverr0 = belowerr0 + cur0;
 80168b0:	441a      	add	r2, r3
	cur0 += delta;		/* form error * 7 */
 80168b2:	eb03 034a 	add.w	r3, r3, sl, lsl #1
	bpreverr0 = belowerr0 + cur0;
 80168b6:	9206      	str	r2, [sp, #24]
	cur1 += delta;		/* form error * 3 */
 80168b8:	eb09 0249 	add.w	r2, r9, r9, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 80168bc:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 5 */
 80168be:	eb02 0249 	add.w	r2, r2, r9, lsl #1
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 80168c2:	8071      	strh	r1, [r6, #2]
	bpreverr1 = belowerr1 + cur1;
 80168c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80168c6:	4411      	add	r1, r2
	cur1 += delta;		/* form error * 7 */
 80168c8:	eb02 0249 	add.w	r2, r2, r9, lsl #1
	bpreverr1 = belowerr1 + cur1;
 80168cc:	9107      	str	r1, [sp, #28]
	cur2 += delta;		/* form error * 3 */
 80168ce:	eb08 0148 	add.w	r1, r8, r8, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 80168d2:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 5 */
 80168d4:	eb01 0148 	add.w	r1, r1, r8, lsl #1
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 80168d8:	80b4      	strh	r4, [r6, #4]
      inptr += dir3;		/* Advance pixel pointers to next column */
 80168da:	9e00      	ldr	r6, [sp, #0]
	bpreverr2 = belowerr2 + cur2;
 80168dc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
      inptr += dir3;		/* Advance pixel pointers to next column */
 80168de:	442e      	add	r6, r5
      outptr += dir;
 80168e0:	9d03      	ldr	r5, [sp, #12]
	bpreverr2 = belowerr2 + cur2;
 80168e2:	440c      	add	r4, r1
	cur2 += delta;		/* form error * 7 */
 80168e4:	eb01 0148 	add.w	r1, r1, r8, lsl #1
      inptr += dir3;		/* Advance pixel pointers to next column */
 80168e8:	9600      	str	r6, [sp, #0]
      outptr += dir;
 80168ea:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80168ec:	4435      	add	r5, r6
    for (col = width; col > 0; col--) {
 80168ee:	9e12      	ldr	r6, [sp, #72]	; 0x48
      outptr += dir;
 80168f0:	9503      	str	r5, [sp, #12]
    for (col = width; col > 0; col--) {
 80168f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80168f4:	3d01      	subs	r5, #1
	belowerr1 = bnexterr;
 80168f6:	e9cd 980d 	strd	r9, r8, [sp, #52]	; 0x34
    for (col = width; col > 0; col--) {
 80168fa:	9509      	str	r5, [sp, #36]	; 0x24
 80168fc:	e766      	b.n	80167cc <pass2_fs_dither+0xd0>

080168fe <finish_pass1>:
{
 80168fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 8016902:	f8d0 31e0 	ldr.w	r3, [r0, #480]	; 0x1e0
{
 8016906:	b08b      	sub	sp, #44	; 0x2c
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 8016908:	2101      	movs	r1, #1
  update_box(cinfo, & boxlist[0]);
 801690a:	f04f 0b01 	mov.w	fp, #1
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801690e:	9302      	str	r3, [sp, #8]
  cinfo->colormap = cquantize->sv_colormap;
 8016910:	691b      	ldr	r3, [r3, #16]
{
 8016912:	9000      	str	r0, [sp, #0]
  cinfo->colormap = cquantize->sv_colormap;
 8016914:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  select_colors(cinfo, cquantize->desired);
 8016918:	9b02      	ldr	r3, [sp, #8]
 801691a:	695b      	ldr	r3, [r3, #20]
 801691c:	9301      	str	r3, [sp, #4]
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 801691e:	9a01      	ldr	r2, [sp, #4]
 8016920:	6843      	ldr	r3, [r0, #4]
 8016922:	0152      	lsls	r2, r2, #5
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	4798      	blx	r3
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 8016928:	2300      	movs	r3, #0
 801692a:	221f      	movs	r2, #31
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 801692c:	213f      	movs	r1, #63	; 0x3f
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 801692e:	4605      	mov	r5, r0
  boxlist[0].c1min = 0;
 8016930:	6083      	str	r3, [r0, #8]
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 8016932:	6142      	str	r2, [r0, #20]
 8016934:	46a8      	mov	r8, r5
  update_box(cinfo, & boxlist[0]);
 8016936:	462e      	mov	r6, r5
  boxlist[0].c2min = 0;
 8016938:	e9c0 1303 	strd	r1, r3, [r0, #12]
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 801693c:	e9c0 3200 	strd	r3, r2, [r0]
  update_box(cinfo, & boxlist[0]);
 8016940:	9b00      	ldr	r3, [sp, #0]
 8016942:	4601      	mov	r1, r0
 8016944:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 8016948:	f7ff fc2c 	bl	80161a4 <update_box.isra.0>
  while (numboxes < desired_colors) {
 801694c:	9b01      	ldr	r3, [sp, #4]
 801694e:	455b      	cmp	r3, fp
 8016950:	dc24      	bgt.n	801699c <finish_pass1+0x9e>
 8016952:	2100      	movs	r1, #0
  hist3d histogram = cquantize->histogram;
 8016954:	9b00      	ldr	r3, [sp, #0]
 8016956:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801695a:	699b      	ldr	r3, [r3, #24]
 801695c:	9303      	str	r3, [sp, #12]
  c0min = boxp->c0min;  c0max = boxp->c0max;
 801695e:	e9d8 7300 	ldrd	r7, r3, [r8]
 8016962:	9304      	str	r3, [sp, #16]
  c1min = boxp->c1min;  c1max = boxp->c1max;
 8016964:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016968:	9305      	str	r3, [sp, #20]
 801696a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801696e:	9306      	str	r3, [sp, #24]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 8016970:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016974:	9301      	str	r3, [sp, #4]
 8016976:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801697a:	9307      	str	r3, [sp, #28]
  for (c0 = c0min; c0 <= c0max; c0++)
 801697c:	9b01      	ldr	r3, [sp, #4]
 801697e:	005b      	lsls	r3, r3, #1
 8016980:	9309      	str	r3, [sp, #36]	; 0x24
  long c2total = 0;
 8016982:	2300      	movs	r3, #0
  long c1total = 0;
 8016984:	469a      	mov	sl, r3
  long c0total = 0;
 8016986:	4699      	mov	r9, r3
  long total = 0;
 8016988:	461a      	mov	r2, r3
  for (c0 = c0min; c0 <= c0max; c0++)
 801698a:	9804      	ldr	r0, [sp, #16]
 801698c:	42b8      	cmp	r0, r7
 801698e:	f2c0 8098 	blt.w	8016ac2 <finish_pass1+0x1c4>
 8016992:	00f8      	lsls	r0, r7, #3
    for (c1 = c1min; c1 <= c1max; c1++) {
 8016994:	9e05      	ldr	r6, [sp, #20]
 8016996:	3004      	adds	r0, #4
 8016998:	9008      	str	r0, [sp, #32]
 801699a:	e07c      	b.n	8016a96 <finish_pass1+0x198>
    if (numboxes*2 <= desired_colors) {
 801699c:	9b01      	ldr	r3, [sp, #4]
 801699e:	ebb3 0f4b 	cmp.w	r3, fp, lsl #1
 80169a2:	db50      	blt.n	8016a46 <finish_pass1+0x148>
  boxptr which = NULL;
 80169a4:	2100      	movs	r1, #0
 80169a6:	462a      	mov	r2, r5
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 80169a8:	4608      	mov	r0, r1
  register long maxc = 0;
 80169aa:	460f      	mov	r7, r1
    if (boxp->colorcount > maxc && boxp->volume > 0) {
 80169ac:	69d3      	ldr	r3, [r2, #28]
 80169ae:	42bb      	cmp	r3, r7
 80169b0:	dd04      	ble.n	80169bc <finish_pass1+0xbe>
 80169b2:	6994      	ldr	r4, [r2, #24]
 80169b4:	2c00      	cmp	r4, #0
 80169b6:	bfc4      	itt	gt
 80169b8:	4611      	movgt	r1, r2
 80169ba:	461f      	movgt	r7, r3
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 80169bc:	3001      	adds	r0, #1
 80169be:	3220      	adds	r2, #32
 80169c0:	4583      	cmp	fp, r0
 80169c2:	d1f3      	bne.n	80169ac <finish_pass1+0xae>
    if (b1 == NULL)		/* no splittable boxes left! */
 80169c4:	2900      	cmp	r1, #0
 80169c6:	d0c5      	beq.n	8016954 <finish_pass1+0x56>
    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
 80169c8:	684b      	ldr	r3, [r1, #4]
 80169ca:	f106 0720 	add.w	r7, r6, #32
 80169ce:	6273      	str	r3, [r6, #36]	; 0x24
 80169d0:	68ca      	ldr	r2, [r1, #12]
 80169d2:	62f2      	str	r2, [r6, #44]	; 0x2c
 80169d4:	694a      	ldr	r2, [r1, #20]
 80169d6:	6372      	str	r2, [r6, #52]	; 0x34
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 80169d8:	680a      	ldr	r2, [r1, #0]
 80169da:	6232      	str	r2, [r6, #32]
 80169dc:	688a      	ldr	r2, [r1, #8]
 80169de:	62b2      	str	r2, [r6, #40]	; 0x28
 80169e0:	690a      	ldr	r2, [r1, #16]
 80169e2:	6332      	str	r2, [r6, #48]	; 0x30
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 80169e4:	680a      	ldr	r2, [r1, #0]
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 80169e6:	e9d1 9002 	ldrd	r9, r0, [r1, #8]
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 80169ea:	9203      	str	r2, [sp, #12]
 80169ec:	1a9a      	subs	r2, r3, r2
 80169ee:	ea4f 0ec2 	mov.w	lr, r2, lsl #3
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 80169f2:	eba0 0209 	sub.w	r2, r0, r9
 80169f6:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 80169fa:	eb0c 0c82 	add.w	ip, ip, r2, lsl #2
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 80169fe:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
 8016a02:	eba2 0a04 	sub.w	sl, r2, r4
 8016a06:	9404      	str	r4, [sp, #16]
    if (c2 > cmax) { cmax = c2; n = 2; }
 8016a08:	ebbc 1f0a 	cmp.w	ip, sl, lsl #4
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 8016a0c:	ea4f 140a 	mov.w	r4, sl, lsl #4
    if (c2 > cmax) { cmax = c2; n = 2; }
 8016a10:	f2c0 808b 	blt.w	8016b2a <finish_pass1+0x22c>
    if (c0 > cmax) { n = 0; }
 8016a14:	45e6      	cmp	lr, ip
 8016a16:	dd25      	ble.n	8016a64 <finish_pass1+0x166>
      lb = (b1->c0max + b1->c0min) / 2;
 8016a18:	9a03      	ldr	r2, [sp, #12]
 8016a1a:	4413      	add	r3, r2
 8016a1c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8016a20:	105b      	asrs	r3, r3, #1
      b1->c0max = lb;
 8016a22:	604b      	str	r3, [r1, #4]
      b2->c0min = lb+1;
 8016a24:	3301      	adds	r3, #1
 8016a26:	6233      	str	r3, [r6, #32]
    update_box(cinfo, b1);
 8016a28:	9b00      	ldr	r3, [sp, #0]
    numboxes++;
 8016a2a:	f10b 0b01 	add.w	fp, fp, #1
 8016a2e:	463e      	mov	r6, r7
    update_box(cinfo, b1);
 8016a30:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 8016a34:	f7ff fbb6 	bl	80161a4 <update_box.isra.0>
    update_box(cinfo, b2);
 8016a38:	9b00      	ldr	r3, [sp, #0]
 8016a3a:	4639      	mov	r1, r7
 8016a3c:	f8d3 01e0 	ldr.w	r0, [r3, #480]	; 0x1e0
 8016a40:	f7ff fbb0 	bl	80161a4 <update_box.isra.0>
    numboxes++;
 8016a44:	e782      	b.n	801694c <finish_pass1+0x4e>
  boxptr which = NULL;
 8016a46:	2100      	movs	r1, #0
 8016a48:	462b      	mov	r3, r5
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8016a4a:	460a      	mov	r2, r1
  register INT32 maxv = 0;
 8016a4c:	4608      	mov	r0, r1
    if (boxp->volume > maxv) {
 8016a4e:	699f      	ldr	r7, [r3, #24]
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8016a50:	3201      	adds	r2, #1
    if (boxp->volume > maxv) {
 8016a52:	4287      	cmp	r7, r0
 8016a54:	bfc4      	itt	gt
 8016a56:	4619      	movgt	r1, r3
 8016a58:	4638      	movgt	r0, r7
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 8016a5a:	4593      	cmp	fp, r2
 8016a5c:	f103 0320 	add.w	r3, r3, #32
 8016a60:	d1f5      	bne.n	8016a4e <finish_pass1+0x150>
 8016a62:	e7af      	b.n	80169c4 <finish_pass1+0xc6>
      lb = (b1->c1max + b1->c1min) / 2;
 8016a64:	4448      	add	r0, r9
 8016a66:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8016a6a:	1040      	asrs	r0, r0, #1
      b1->c1max = lb;
 8016a6c:	60c8      	str	r0, [r1, #12]
      b2->c1min = lb+1;
 8016a6e:	3001      	adds	r0, #1
 8016a70:	62b0      	str	r0, [r6, #40]	; 0x28
      break;
 8016a72:	e7d9      	b.n	8016a28 <finish_pass1+0x12a>
      histp = & histogram[c0][c1][c2min];
 8016a74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016a76:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8016a7a:	9c03      	ldr	r4, [sp, #12]
 8016a7c:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8016a80:	f10e 0e02 	add.w	lr, lr, #2
 8016a84:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
      for (c2 = c2min; c2 <= c2max; c2++) {
 8016a88:	f8dd c004 	ldr.w	ip, [sp, #4]
      histp = & histogram[c0][c1][c2min];
 8016a8c:	4428      	add	r0, r5
      for (c2 = c2min; c2 <= c2max; c2++) {
 8016a8e:	9c07      	ldr	r4, [sp, #28]
 8016a90:	4564      	cmp	r4, ip
 8016a92:	da05      	bge.n	8016aa0 <finish_pass1+0x1a2>
    for (c1 = c1min; c1 <= c1max; c1++) {
 8016a94:	3601      	adds	r6, #1
 8016a96:	9806      	ldr	r0, [sp, #24]
 8016a98:	42b0      	cmp	r0, r6
 8016a9a:	daeb      	bge.n	8016a74 <finish_pass1+0x176>
  for (c0 = c0min; c0 <= c0max; c0++)
 8016a9c:	3701      	adds	r7, #1
 8016a9e:	e774      	b.n	801698a <finish_pass1+0x8c>
	if ((count = *histp++) != 0) {
 8016aa0:	f830 5b02 	ldrh.w	r5, [r0], #2
 8016aa4:	b155      	cbz	r5, 8016abc <finish_pass1+0x1be>
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 8016aa6:	9c08      	ldr	r4, [sp, #32]
	  total += count;
 8016aa8:	442a      	add	r2, r5
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 8016aaa:	fb0e aa05 	mla	sl, lr, r5, sl
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 8016aae:	fb04 9905 	mla	r9, r4, r5, r9
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 8016ab2:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 8016ab6:	3404      	adds	r4, #4
 8016ab8:	fb05 3304 	mla	r3, r5, r4, r3
      for (c2 = c2min; c2 <= c2max; c2++) {
 8016abc:	f10c 0c01 	add.w	ip, ip, #1
 8016ac0:	e7e5      	b.n	8016a8e <finish_pass1+0x190>
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8016ac2:	eb09 0962 	add.w	r9, r9, r2, asr #1
 8016ac6:	9800      	ldr	r0, [sp, #0]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 8016ac8:	eb0a 0a62 	add.w	sl, sl, r2, asr #1
 8016acc:	f108 0820 	add.w	r8, r8, #32
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8016ad0:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8016ad4:	eb03 0362 	add.w	r3, r3, r2, asr #1
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 8016ad8:	fb99 f9f2 	sdiv	r9, r9, r2
 8016adc:	6800      	ldr	r0, [r0, #0]
 8016ade:	f800 9001 	strb.w	r9, [r0, r1]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 8016ae2:	9800      	ldr	r0, [sp, #0]
 8016ae4:	fb9a faf2 	sdiv	sl, sl, r2
 8016ae8:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8016aec:	6840      	ldr	r0, [r0, #4]
 8016aee:	f800 a001 	strb.w	sl, [r0, r1]
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 8016af2:	9800      	ldr	r0, [sp, #0]
 8016af4:	fb93 f2f2 	sdiv	r2, r3, r2
 8016af8:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8016afc:	6880      	ldr	r0, [r0, #8]
 8016afe:	5442      	strb	r2, [r0, r1]
  for (i = 0; i < numboxes; i++)
 8016b00:	3101      	adds	r1, #1
 8016b02:	4559      	cmp	r1, fp
 8016b04:	f47f af26 	bne.w	8016954 <finish_pass1+0x56>
  cinfo->actual_number_of_colors = numboxes;
 8016b08:	9b00      	ldr	r3, [sp, #0]
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 8016b0a:	2262      	movs	r2, #98	; 0x62
 8016b0c:	9800      	ldr	r0, [sp, #0]
  cinfo->actual_number_of_colors = numboxes;
 8016b0e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	e9c3 2105 	strd	r2, r1, [r3, #20]
 8016b18:	685b      	ldr	r3, [r3, #4]
 8016b1a:	2101      	movs	r1, #1
 8016b1c:	4798      	blx	r3
  cquantize->needs_zeroed = TRUE;
 8016b1e:	2301      	movs	r3, #1
 8016b20:	9a02      	ldr	r2, [sp, #8]
 8016b22:	61d3      	str	r3, [r2, #28]
}
 8016b24:	b00b      	add	sp, #44	; 0x2c
 8016b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c0 > cmax) { n = 0; }
 8016b2a:	45a6      	cmp	lr, r4
 8016b2c:	f73f af74 	bgt.w	8016a18 <finish_pass1+0x11a>
      lb = (b1->c2max + b1->c2min) / 2;
 8016b30:	9b04      	ldr	r3, [sp, #16]
 8016b32:	441a      	add	r2, r3
 8016b34:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8016b38:	1052      	asrs	r2, r2, #1
      b1->c2max = lb;
 8016b3a:	614a      	str	r2, [r1, #20]
      b2->c2min = lb+1;
 8016b3c:	3201      	adds	r2, #1
 8016b3e:	6332      	str	r2, [r6, #48]	; 0x30
      break;
 8016b40:	e772      	b.n	8016a28 <finish_pass1+0x12a>
	...

08016b44 <jinit_2pass_quantizer>:
 * Module initialization routine for 2-pass color quantization.
 */

GLOBAL(void)
jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
 8016b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  my_cquantize_ptr cquantize;
  int i;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016b46:	6843      	ldr	r3, [r0, #4]
 8016b48:	222c      	movs	r2, #44	; 0x2c
 8016b4a:	2101      	movs	r1, #1
{
 8016b4c:	4604      	mov	r4, r0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	4798      	blx	r3
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_2_quant;
 8016b52:	4b30      	ldr	r3, [pc, #192]	; (8016c14 <jinit_2pass_quantizer+0xd0>)
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 8016b54:	f8c4 01e0 	str.w	r0, [r4, #480]	; 0x1e0
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8016b58:	4605      	mov	r5, r0
  cquantize->pub.start_pass = start_pass_2_quant;
 8016b5a:	6003      	str	r3, [r0, #0]
  cquantize->pub.new_color_map = new_color_map_2_quant;
 8016b5c:	4b2e      	ldr	r3, [pc, #184]	; (8016c18 <jinit_2pass_quantizer+0xd4>)
 8016b5e:	60c3      	str	r3, [r0, #12]
  cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
 8016b60:	2300      	movs	r3, #0
 8016b62:	6203      	str	r3, [r0, #32]
  cquantize->error_limiter = NULL;
 8016b64:	6283      	str	r3, [r0, #40]	; 0x28

  /* Make sure jdmaster didn't give me a case I can't handle */
  if (cinfo->out_color_components != 3)
 8016b66:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8016b68:	2b03      	cmp	r3, #3
 8016b6a:	d005      	beq.n	8016b78 <jinit_2pass_quantizer+0x34>
    ERREXIT(cinfo, JERR_NOTIMPL);
 8016b6c:	6823      	ldr	r3, [r4, #0]
 8016b6e:	2230      	movs	r2, #48	; 0x30
 8016b70:	4620      	mov	r0, r4
 8016b72:	615a      	str	r2, [r3, #20]
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	4798      	blx	r3

  /* Allocate the histogram/inverse colormap storage */
  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
 8016b78:	6863      	ldr	r3, [r4, #4]
 8016b7a:	2600      	movs	r6, #0
 8016b7c:	2280      	movs	r2, #128	; 0x80
 8016b7e:	2101      	movs	r1, #1
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	4620      	mov	r0, r4
 8016b84:	4798      	blx	r3
 8016b86:	61a8      	str	r0, [r5, #24]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
  for (i = 0; i < HIST_C0_ELEMS; i++) {
    cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 8016b88:	6863      	ldr	r3, [r4, #4]
 8016b8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016b8e:	69af      	ldr	r7, [r5, #24]
 8016b90:	2101      	movs	r1, #1
 8016b92:	685b      	ldr	r3, [r3, #4]
 8016b94:	4620      	mov	r0, r4
 8016b96:	4798      	blx	r3
 8016b98:	51b8      	str	r0, [r7, r6]
  for (i = 0; i < HIST_C0_ELEMS; i++) {
 8016b9a:	3604      	adds	r6, #4
 8016b9c:	2e80      	cmp	r6, #128	; 0x80
 8016b9e:	d1f3      	bne.n	8016b88 <jinit_2pass_quantizer+0x44>
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }
  cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
 8016ba0:	2301      	movs	r3, #1
 8016ba2:	61eb      	str	r3, [r5, #28]

  /* Allocate storage for the completed colormap, if required.
   * We do this now since it is FAR storage and may affect
   * the memory manager's space calculations.
   */
  if (cinfo->enable_2pass_quant) {
 8016ba4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d031      	beq.n	8016c0e <jinit_2pass_quantizer+0xca>
    /* Make sure color count is acceptable */
    int desired = cinfo->desired_number_of_colors;
 8016baa:	6e26      	ldr	r6, [r4, #96]	; 0x60
    /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
    if (desired < 8)
 8016bac:	2e07      	cmp	r6, #7
 8016bae:	dc25      	bgt.n	8016bfc <jinit_2pass_quantizer+0xb8>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
 8016bb0:	223a      	movs	r2, #58	; 0x3a
 8016bb2:	6823      	ldr	r3, [r4, #0]
 8016bb4:	615a      	str	r2, [r3, #20]
 8016bb6:	2208      	movs	r2, #8
    /* Make sure colormap indexes can be represented by JSAMPLEs */
    if (desired > MAXNUMCOLORS)
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8016bb8:	619a      	str	r2, [r3, #24]
 8016bba:	4620      	mov	r0, r4
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	4798      	blx	r3
    cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 8016bc0:	6863      	ldr	r3, [r4, #4]
 8016bc2:	4632      	mov	r2, r6
 8016bc4:	2101      	movs	r1, #1
 8016bc6:	4620      	mov	r0, r4
 8016bc8:	689f      	ldr	r7, [r3, #8]
 8016bca:	2303      	movs	r3, #3
 8016bcc:	47b8      	blx	r7
      ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
    cquantize->desired = desired;
 8016bce:	e9c5 0604 	strd	r0, r6, [r5, #16]
  } else
    cquantize->sv_colormap = NULL;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
 8016bd2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8016bd6:	b1e3      	cbz	r3, 8016c12 <jinit_2pass_quantizer+0xce>
    cinfo->dither_mode = JDITHER_FS;
 8016bd8:	2302      	movs	r3, #2
   * This isn't really needed until pass 2, but again it is FAR storage.
   * Although we will cope with a later change in dither_mode,
   * we do not promise to honor max_memory_to_use if dither_mode changes.
   */
  if (cinfo->dither_mode == JDITHER_FS) {
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8016bda:	2206      	movs	r2, #6
 8016bdc:	4620      	mov	r0, r4
 8016bde:	2101      	movs	r1, #1
    cinfo->dither_mode = JDITHER_FS;
 8016be0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 8016be4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016be6:	435a      	muls	r2, r3
 8016be8:	6863      	ldr	r3, [r4, #4]
 8016bea:	320c      	adds	r2, #12
 8016bec:	685b      	ldr	r3, [r3, #4]
 8016bee:	4798      	blx	r3
 8016bf0:	6228      	str	r0, [r5, #32]
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
    /* Might as well create the error-limiting table too. */
    init_error_limit(cinfo);
 8016bf2:	4620      	mov	r0, r4
  }
}
 8016bf4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    init_error_limit(cinfo);
 8016bf8:	f7ff ba2e 	b.w	8016058 <init_error_limit>
    if (desired > MAXNUMCOLORS)
 8016bfc:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8016c00:	ddde      	ble.n	8016bc0 <jinit_2pass_quantizer+0x7c>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 8016c02:	223b      	movs	r2, #59	; 0x3b
 8016c04:	6823      	ldr	r3, [r4, #0]
 8016c06:	615a      	str	r2, [r3, #20]
 8016c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016c0c:	e7d4      	b.n	8016bb8 <jinit_2pass_quantizer+0x74>
    cquantize->sv_colormap = NULL;
 8016c0e:	612b      	str	r3, [r5, #16]
 8016c10:	e7df      	b.n	8016bd2 <jinit_2pass_quantizer+0x8e>
}
 8016c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c14:	080160d5 	.word	0x080160d5
 8016c18:	080160c9 	.word	0x080160c9

08016c1c <jdiv_round_up>:
GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
  return (a + b - 1L) / b;
 8016c1c:	1843      	adds	r3, r0, r1
 8016c1e:	3b01      	subs	r3, #1
}
 8016c20:	fb93 f0f1 	sdiv	r0, r3, r1
 8016c24:	4770      	bx	lr

08016c26 <jround_up>:
GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
  a += b - 1L;
 8016c26:	1e4b      	subs	r3, r1, #1
 8016c28:	4418      	add	r0, r3
  return a - (a % b);
 8016c2a:	fb90 f3f1 	sdiv	r3, r0, r1
 8016c2e:	fb01 0113 	mls	r1, r1, r3, r0
}
 8016c32:	1a40      	subs	r0, r0, r1
 8016c34:	4770      	bx	lr

08016c36 <jcopy_sample_rows>:
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
 8016c36:	b570      	push	{r4, r5, r6, lr}
 8016c38:	9e04      	ldr	r6, [sp, #16]
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
 8016c3a:	eb00 0481 	add.w	r4, r0, r1, lsl #2
  output_array += dest_row;
 8016c3e:	eb02 0583 	add.w	r5, r2, r3, lsl #2

  for (row = num_rows; row > 0; row--) {
 8016c42:	2e00      	cmp	r6, #0
 8016c44:	dc00      	bgt.n	8016c48 <jcopy_sample_rows+0x12>
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}
 8016c46:	bd70      	pop	{r4, r5, r6, pc}
    FMEMCOPY(outptr, inptr, count);
 8016c48:	9a05      	ldr	r2, [sp, #20]
  for (row = num_rows; row > 0; row--) {
 8016c4a:	3e01      	subs	r6, #1
    FMEMCOPY(outptr, inptr, count);
 8016c4c:	f854 1b04 	ldr.w	r1, [r4], #4
 8016c50:	f855 0b04 	ldr.w	r0, [r5], #4
 8016c54:	f013 f97e 	bl	8029f54 <memcpy>
  for (row = num_rows; row > 0; row--) {
 8016c58:	e7f3      	b.n	8016c42 <jcopy_sample_rows+0xc>

08016c5a <jcopy_block_row>:

GLOBAL(void)
jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
		 JDIMENSION num_blocks)
/* Copy a row of coefficient blocks from one place to another. */
{
 8016c5a:	460b      	mov	r3, r1
#ifdef FMEMCOPY
  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
 8016c5c:	01d2      	lsls	r2, r2, #7
 8016c5e:	4601      	mov	r1, r0
 8016c60:	4618      	mov	r0, r3
 8016c62:	f013 b977 	b.w	8029f54 <memcpy>

08016c66 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8016c66:	8880      	ldrh	r0, [r0, #4]
 8016c68:	4770      	bx	lr

08016c6a <_ZN8touchgfx17AbstractPartition5clearEv>:
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	8083      	strh	r3, [r0, #4]
 8016c6e:	4770      	bx	lr

08016c70 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8016c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c72:	6803      	ldr	r3, [r0, #0]
 8016c74:	460e      	mov	r6, r1
 8016c76:	2100      	movs	r1, #0
 8016c78:	4605      	mov	r5, r0
 8016c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c7c:	4798      	blx	r3
 8016c7e:	4604      	mov	r4, r0
 8016c80:	682b      	ldr	r3, [r5, #0]
 8016c82:	4628      	mov	r0, r5
 8016c84:	1b34      	subs	r4, r6, r4
 8016c86:	6a1b      	ldr	r3, [r3, #32]
 8016c88:	b2a4      	uxth	r4, r4
 8016c8a:	4798      	blx	r3
 8016c8c:	88ab      	ldrh	r3, [r5, #4]
 8016c8e:	fbb4 f4f0 	udiv	r4, r4, r0
 8016c92:	42a3      	cmp	r3, r4
 8016c94:	d805      	bhi.n	8016ca2 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x32>
 8016c96:	4b0e      	ldr	r3, [pc, #56]	; (8016cd0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x60>)
 8016c98:	211e      	movs	r1, #30
 8016c9a:	4a0e      	ldr	r2, [pc, #56]	; (8016cd4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8016c9c:	480e      	ldr	r0, [pc, #56]	; (8016cd8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8016c9e:	f013 f8d7 	bl	8029e50 <__assert_func>
 8016ca2:	682b      	ldr	r3, [r5, #0]
 8016ca4:	2100      	movs	r1, #0
 8016ca6:	4628      	mov	r0, r5
 8016ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016caa:	4798      	blx	r3
 8016cac:	682b      	ldr	r3, [r5, #0]
 8016cae:	4607      	mov	r7, r0
 8016cb0:	4628      	mov	r0, r5
 8016cb2:	6a1b      	ldr	r3, [r3, #32]
 8016cb4:	4798      	blx	r3
 8016cb6:	1bf3      	subs	r3, r6, r7
 8016cb8:	b29b      	uxth	r3, r3
 8016cba:	fbb3 f2f0 	udiv	r2, r3, r0
 8016cbe:	fb02 3010 	mls	r0, r2, r0, r3
 8016cc2:	b118      	cbz	r0, 8016ccc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5c>
 8016cc4:	4b05      	ldr	r3, [pc, #20]	; (8016cdc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8016cc6:	211f      	movs	r1, #31
 8016cc8:	4a02      	ldr	r2, [pc, #8]	; (8016cd4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8016cca:	e7e7      	b.n	8016c9c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2c>
 8016ccc:	4620      	mov	r0, r4
 8016cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cd0:	0802f86c 	.word	0x0802f86c
 8016cd4:	0802f9da 	.word	0x0802f9da
 8016cd8:	0802f881 	.word	0x0802f881
 8016cdc:	0802f8af 	.word	0x0802f8af

08016ce0 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8016ce0:	b538      	push	{r3, r4, r5, lr}
 8016ce2:	6803      	ldr	r3, [r0, #0]
 8016ce4:	460d      	mov	r5, r1
 8016ce6:	4604      	mov	r4, r0
 8016ce8:	6a1b      	ldr	r3, [r3, #32]
 8016cea:	4798      	blx	r3
 8016cec:	4285      	cmp	r5, r0
 8016cee:	d905      	bls.n	8016cfc <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8016cf0:	4b0c      	ldr	r3, [pc, #48]	; (8016d24 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8016cf2:	2130      	movs	r1, #48	; 0x30
 8016cf4:	4a0c      	ldr	r2, [pc, #48]	; (8016d28 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016cf6:	480d      	ldr	r0, [pc, #52]	; (8016d2c <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8016cf8:	f013 f8aa 	bl	8029e50 <__assert_func>
 8016cfc:	6823      	ldr	r3, [r4, #0]
 8016cfe:	4620      	mov	r0, r4
 8016d00:	88a5      	ldrh	r5, [r4, #4]
 8016d02:	69db      	ldr	r3, [r3, #28]
 8016d04:	4798      	blx	r3
 8016d06:	4285      	cmp	r5, r0
 8016d08:	d303      	bcc.n	8016d12 <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8016d0a:	4b09      	ldr	r3, [pc, #36]	; (8016d30 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8016d0c:	2131      	movs	r1, #49	; 0x31
 8016d0e:	4a06      	ldr	r2, [pc, #24]	; (8016d28 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8016d10:	e7f1      	b.n	8016cf6 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8016d12:	6823      	ldr	r3, [r4, #0]
 8016d14:	4620      	mov	r0, r4
 8016d16:	88a1      	ldrh	r1, [r4, #4]
 8016d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d1a:	4798      	blx	r3
 8016d1c:	88a3      	ldrh	r3, [r4, #4]
 8016d1e:	3301      	adds	r3, #1
 8016d20:	80a3      	strh	r3, [r4, #4]
 8016d22:	bd38      	pop	{r3, r4, r5, pc}
 8016d24:	0802f929 	.word	0x0802f929
 8016d28:	0802fa1d 	.word	0x0802fa1d
 8016d2c:	0802f881 	.word	0x0802f881
 8016d30:	0802f940 	.word	0x0802f940

08016d34 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8016d34:	b570      	push	{r4, r5, r6, lr}
 8016d36:	6803      	ldr	r3, [r0, #0]
 8016d38:	4616      	mov	r6, r2
 8016d3a:	4604      	mov	r4, r0
 8016d3c:	460d      	mov	r5, r1
 8016d3e:	6a1b      	ldr	r3, [r3, #32]
 8016d40:	4798      	blx	r3
 8016d42:	4286      	cmp	r6, r0
 8016d44:	d905      	bls.n	8016d52 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8016d46:	4b06      	ldr	r3, [pc, #24]	; (8016d60 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8016d48:	213a      	movs	r1, #58	; 0x3a
 8016d4a:	4a06      	ldr	r2, [pc, #24]	; (8016d64 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8016d4c:	4806      	ldr	r0, [pc, #24]	; (8016d68 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8016d4e:	f013 f87f 	bl	8029e50 <__assert_func>
 8016d52:	6823      	ldr	r3, [r4, #0]
 8016d54:	4629      	mov	r1, r5
 8016d56:	4620      	mov	r0, r4
 8016d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d5e:	4718      	bx	r3
 8016d60:	0802f929 	.word	0x0802f929
 8016d64:	0802f990 	.word	0x0802f990
 8016d68:	0802f881 	.word	0x0802f881

08016d6c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8016d6c:	4770      	bx	lr
	...

08016d70 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8016d70:	4a02      	ldr	r2, [pc, #8]	; (8016d7c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8016d72:	6002      	str	r2, [r0, #0]
 8016d74:	2200      	movs	r2, #0
 8016d76:	8082      	strh	r2, [r0, #4]
 8016d78:	4770      	bx	lr
 8016d7a:	bf00      	nop
 8016d7c:	0802f964 	.word	0x0802f964

08016d80 <_ZN8touchgfx9Container13getFirstChildEv>:
 8016d80:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016d82:	4770      	bx	lr

08016d84 <_ZN8touchgfx12DigitalClock14setDisplayModeENS0_11DisplayModeE>:
 8016d84:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
 8016d88:	4770      	bx	lr

08016d8a <_ZNK8touchgfx12DigitalClock14getDisplayModeEv>:
 8016d8a:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
 8016d8e:	4770      	bx	lr

08016d90 <_ZN8touchgfx12DigitalClock8setWidthEs>:
 8016d90:	8101      	strh	r1, [r0, #8]
 8016d92:	8781      	strh	r1, [r0, #60]	; 0x3c
 8016d94:	4770      	bx	lr

08016d96 <_ZN8touchgfx12DigitalClock9setHeightEs>:
 8016d96:	8141      	strh	r1, [r0, #10]
 8016d98:	87c1      	strh	r1, [r0, #62]	; 0x3e
 8016d9a:	4770      	bx	lr

08016d9c <_ZN8touchgfx12DigitalClock8setAlphaEh>:
 8016d9c:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
 8016da0:	4770      	bx	lr

08016da2 <_ZNK8touchgfx12DigitalClock8getAlphaEv>:
 8016da2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8016da6:	4770      	bx	lr

08016da8 <_ZNK8touchgfx12DigitalClock8getColorEv>:
 8016da8:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8016daa:	4770      	bx	lr

08016dac <_ZN8touchgfx12DigitalClockD1Ev>:
 8016dac:	4770      	bx	lr

08016dae <_ZN8touchgfx12DigitalClock8setColorENS_9colortypeE>:
 8016dae:	6641      	str	r1, [r0, #100]	; 0x64
 8016db0:	3034      	adds	r0, #52	; 0x34
 8016db2:	f004 bf61 	b.w	801bc78 <_ZNK8touchgfx8Drawable10invalidateEv>
	...

08016db8 <_ZN8touchgfx12DigitalClock12setBaselineYEs>:
 8016db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016dc0:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8016dc4:	4605      	mov	r5, r0
 8016dc6:	4293      	cmp	r3, r2
 8016dc8:	d026      	beq.n	8016e18 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x60>
 8016dca:	6802      	ldr	r2, [r0, #0]
 8016dcc:	b28c      	uxth	r4, r1
 8016dce:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 8016dd2:	6d56      	ldr	r6, [r2, #84]	; 0x54
 8016dd4:	4a11      	ldr	r2, [pc, #68]	; (8016e1c <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x64>)
 8016dd6:	6812      	ldr	r2, [r2, #0]
 8016dd8:	b92a      	cbnz	r2, 8016de6 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x2e>
 8016dda:	4b11      	ldr	r3, [pc, #68]	; (8016e20 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x68>)
 8016ddc:	21ae      	movs	r1, #174	; 0xae
 8016dde:	4a11      	ldr	r2, [pc, #68]	; (8016e24 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x6c>)
 8016de0:	4811      	ldr	r0, [pc, #68]	; (8016e28 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x70>)
 8016de2:	f013 f835 	bl	8029e50 <__assert_func>
 8016de6:	4911      	ldr	r1, [pc, #68]	; (8016e2c <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x74>)
 8016de8:	8809      	ldrh	r1, [r1, #0]
 8016dea:	4299      	cmp	r1, r3
 8016dec:	d803      	bhi.n	8016df6 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x3e>
 8016dee:	4b10      	ldr	r3, [pc, #64]	; (8016e30 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x78>)
 8016df0:	21af      	movs	r1, #175	; 0xaf
 8016df2:	4a0c      	ldr	r2, [pc, #48]	; (8016e24 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x6c>)
 8016df4:	e7f4      	b.n	8016de0 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x28>
 8016df6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8016dfa:	4b0e      	ldr	r3, [pc, #56]	; (8016e34 <_ZN8touchgfx12DigitalClock12setBaselineYEs+0x7c>)
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016e02:	6803      	ldr	r3, [r0, #0]
 8016e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e06:	4798      	blx	r3
 8016e08:	1a22      	subs	r2, r4, r0
 8016e0a:	4639      	mov	r1, r7
 8016e0c:	4628      	mov	r0, r5
 8016e0e:	4633      	mov	r3, r6
 8016e10:	b212      	sxth	r2, r2
 8016e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e16:	4718      	bx	r3
 8016e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e1c:	2002b8f0 	.word	0x2002b8f0
 8016e20:	0802d58c 	.word	0x0802d58c
 8016e24:	0802fb6c 	.word	0x0802fb6c
 8016e28:	0802d61a 	.word	0x0802d61a
 8016e2c:	2002b8f4 	.word	0x2002b8f4
 8016e30:	0802d643 	.word	0x0802d643
 8016e34:	2002b8f8 	.word	0x2002b8f8

08016e38 <_ZN8touchgfx12DigitalClockD0Ev>:
 8016e38:	b510      	push	{r4, lr}
 8016e3a:	4604      	mov	r4, r0
 8016e3c:	218c      	movs	r1, #140	; 0x8c
 8016e3e:	f012 ffd9 	bl	8029df4 <_ZdlPvj>
 8016e42:	4620      	mov	r0, r4
 8016e44:	bd10      	pop	{r4, pc}

08016e46 <_ZN8touchgfx12DigitalClock12setTypedTextENS_9TypedTextE>:
 8016e46:	b510      	push	{r4, lr}
 8016e48:	f100 0434 	add.w	r4, r0, #52	; 0x34
 8016e4c:	4620      	mov	r0, r4
 8016e4e:	f001 fe3d 	bl	8018acc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8016e52:	4620      	mov	r0, r4
 8016e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e58:	f004 bf0e 	b.w	801bc78 <_ZNK8touchgfx8Drawable10invalidateEv>

08016e5c <_ZN8touchgfx12DigitalClock11updateClockEv>:
 8016e5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e60:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8016e64:	b085      	sub	sp, #20
 8016e66:	4604      	mov	r4, r0
 8016e68:	bb03      	cbnz	r3, 8016eac <_ZN8touchgfx12DigitalClock11updateClockEv+0x50>
 8016e6a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8016e6e:	f100 0574 	add.w	r5, r0, #116	; 0x74
 8016e72:	4a3f      	ldr	r2, [pc, #252]	; (8016f70 <_ZN8touchgfx12DigitalClock11updateClockEv+0x114>)
 8016e74:	4e3f      	ldr	r6, [pc, #252]	; (8016f74 <_ZN8touchgfx12DigitalClock11updateClockEv+0x118>)
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	bf08      	it	eq
 8016e7a:	4616      	moveq	r6, r2
 8016e7c:	f000 f969 	bl	8017152 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 8016e80:	4607      	mov	r7, r0
 8016e82:	4620      	mov	r0, r4
 8016e84:	f000 f978 	bl	8017178 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8016e88:	4680      	mov	r8, r0
 8016e8a:	4620      	mov	r0, r4
 8016e8c:	f000 f96d 	bl	801716a <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 8016e90:	2800      	cmp	r0, #0
 8016e92:	4632      	mov	r2, r6
 8016e94:	f04f 010c 	mov.w	r1, #12
 8016e98:	bf14      	ite	ne
 8016e9a:	2341      	movne	r3, #65	; 0x41
 8016e9c:	2350      	moveq	r3, #80	; 0x50
 8016e9e:	4628      	mov	r0, r5
 8016ea0:	e9cd 8300 	strd	r8, r3, [sp]
 8016ea4:	463b      	mov	r3, r7
 8016ea6:	f006 fe59 	bl	801db5c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8016eaa:	e016      	b.n	8016eda <_ZN8touchgfx12DigitalClock11updateClockEv+0x7e>
 8016eac:	2b01      	cmp	r3, #1
 8016eae:	d11b      	bne.n	8016ee8 <_ZN8touchgfx12DigitalClock11updateClockEv+0x8c>
 8016eb0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8016eb4:	4a30      	ldr	r2, [pc, #192]	; (8016f78 <_ZN8touchgfx12DigitalClock11updateClockEv+0x11c>)
 8016eb6:	4d31      	ldr	r5, [pc, #196]	; (8016f7c <_ZN8touchgfx12DigitalClock11updateClockEv+0x120>)
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	bf08      	it	eq
 8016ebc:	4615      	moveq	r5, r2
 8016ebe:	f000 f945 	bl	801714c <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 8016ec2:	4606      	mov	r6, r0
 8016ec4:	4620      	mov	r0, r4
 8016ec6:	f000 f957 	bl	8017178 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8016eca:	462a      	mov	r2, r5
 8016ecc:	9000      	str	r0, [sp, #0]
 8016ece:	4633      	mov	r3, r6
 8016ed0:	210c      	movs	r1, #12
 8016ed2:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8016ed6:	f006 fe41 	bl	801db5c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8016eda:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8016ede:	b005      	add	sp, #20
 8016ee0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ee4:	f004 bec8 	b.w	801bc78 <_ZNK8touchgfx8Drawable10invalidateEv>
 8016ee8:	2b02      	cmp	r3, #2
 8016eea:	d125      	bne.n	8016f38 <_ZN8touchgfx12DigitalClock11updateClockEv+0xdc>
 8016eec:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8016ef0:	f100 0574 	add.w	r5, r0, #116	; 0x74
 8016ef4:	4a22      	ldr	r2, [pc, #136]	; (8016f80 <_ZN8touchgfx12DigitalClock11updateClockEv+0x124>)
 8016ef6:	4e23      	ldr	r6, [pc, #140]	; (8016f84 <_ZN8touchgfx12DigitalClock11updateClockEv+0x128>)
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	bf08      	it	eq
 8016efc:	4616      	moveq	r6, r2
 8016efe:	f000 f928 	bl	8017152 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>
 8016f02:	4607      	mov	r7, r0
 8016f04:	4620      	mov	r0, r4
 8016f06:	f000 f937 	bl	8017178 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8016f0a:	4680      	mov	r8, r0
 8016f0c:	4620      	mov	r0, r4
 8016f0e:	f000 f936 	bl	801717e <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8016f12:	4681      	mov	r9, r0
 8016f14:	4620      	mov	r0, r4
 8016f16:	f000 f928 	bl	801716a <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>
 8016f1a:	2800      	cmp	r0, #0
 8016f1c:	f8cd 8000 	str.w	r8, [sp]
 8016f20:	4632      	mov	r2, r6
 8016f22:	bf14      	ite	ne
 8016f24:	2341      	movne	r3, #65	; 0x41
 8016f26:	2350      	moveq	r3, #80	; 0x50
 8016f28:	210c      	movs	r1, #12
 8016f2a:	4628      	mov	r0, r5
 8016f2c:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8016f30:	463b      	mov	r3, r7
 8016f32:	f006 fe13 	bl	801db5c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8016f36:	e7d0      	b.n	8016eda <_ZN8touchgfx12DigitalClock11updateClockEv+0x7e>
 8016f38:	2b03      	cmp	r3, #3
 8016f3a:	d1ce      	bne.n	8016eda <_ZN8touchgfx12DigitalClock11updateClockEv+0x7e>
 8016f3c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8016f40:	4a11      	ldr	r2, [pc, #68]	; (8016f88 <_ZN8touchgfx12DigitalClock11updateClockEv+0x12c>)
 8016f42:	4d12      	ldr	r5, [pc, #72]	; (8016f8c <_ZN8touchgfx12DigitalClock11updateClockEv+0x130>)
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	bf08      	it	eq
 8016f48:	4615      	moveq	r5, r2
 8016f4a:	f000 f8ff 	bl	801714c <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>
 8016f4e:	4606      	mov	r6, r0
 8016f50:	4620      	mov	r0, r4
 8016f52:	f000 f911 	bl	8017178 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>
 8016f56:	4607      	mov	r7, r0
 8016f58:	4620      	mov	r0, r4
 8016f5a:	f000 f910 	bl	801717e <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>
 8016f5e:	4633      	mov	r3, r6
 8016f60:	462a      	mov	r2, r5
 8016f62:	210c      	movs	r1, #12
 8016f64:	e9cd 7000 	strd	r7, r0, [sp]
 8016f68:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8016f6c:	e79b      	b.n	8016ea6 <_ZN8touchgfx12DigitalClock11updateClockEv+0x4a>
 8016f6e:	bf00      	nop
 8016f70:	0802fa5b 	.word	0x0802fa5b
 8016f74:	0802fa85 	.word	0x0802fa85
 8016f78:	0802fa67 	.word	0x0802fa67
 8016f7c:	0802faa5 	.word	0x0802faa5
 8016f80:	0802fa82 	.word	0x0802fa82
 8016f84:	0802fa6f 	.word	0x0802fa6f
 8016f88:	0802faa2 	.word	0x0802faa2
 8016f8c:	0802fa93 	.word	0x0802fa93

08016f90 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
 8016f90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016f92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016f96:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016f98:	4606      	mov	r6, r0
 8016f9a:	4299      	cmp	r1, r3
 8016f9c:	d02a      	beq.n	8016ff4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x64>
 8016f9e:	4b16      	ldr	r3, [pc, #88]	; (8016ff8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x68>)
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	b92b      	cbnz	r3, 8016fb0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x20>
 8016fa4:	4b15      	ldr	r3, [pc, #84]	; (8016ffc <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x6c>)
 8016fa6:	21ae      	movs	r1, #174	; 0xae
 8016fa8:	4a15      	ldr	r2, [pc, #84]	; (8017000 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8016faa:	4816      	ldr	r0, [pc, #88]	; (8017004 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x74>)
 8016fac:	f012 ff50 	bl	8029e50 <__assert_func>
 8016fb0:	4a15      	ldr	r2, [pc, #84]	; (8017008 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x78>)
 8016fb2:	8812      	ldrh	r2, [r2, #0]
 8016fb4:	428a      	cmp	r2, r1
 8016fb6:	d803      	bhi.n	8016fc0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x30>
 8016fb8:	4b14      	ldr	r3, [pc, #80]	; (801700c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x7c>)
 8016fba:	21af      	movs	r1, #175	; 0xaf
 8016fbc:	4a10      	ldr	r2, [pc, #64]	; (8017000 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x70>)
 8016fbe:	e7f4      	b.n	8016faa <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x1a>
 8016fc0:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8016fc4:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8016fc8:	4b11      	ldr	r3, [pc, #68]	; (8017010 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x80>)
 8016fca:	7854      	ldrb	r4, [r2, #1]
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8016fd2:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8016fd6:	682b      	ldr	r3, [r5, #0]
 8016fd8:	69df      	ldr	r7, [r3, #28]
 8016fda:	4b0e      	ldr	r3, [pc, #56]	; (8017014 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x84>)
 8016fdc:	6818      	ldr	r0, [r3, #0]
 8016fde:	f7ec fc53 	bl	8003888 <_ZNK8touchgfx5Texts7getTextEt>
 8016fe2:	2300      	movs	r3, #0
 8016fe4:	4602      	mov	r2, r0
 8016fe6:	4621      	mov	r1, r4
 8016fe8:	9300      	str	r3, [sp, #0]
 8016fea:	4628      	mov	r0, r5
 8016fec:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 8016fee:	47b8      	blx	r7
 8016ff0:	b003      	add	sp, #12
 8016ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ff4:	2000      	movs	r0, #0
 8016ff6:	e7fb      	b.n	8016ff0 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x60>
 8016ff8:	2002b8f0 	.word	0x2002b8f0
 8016ffc:	0802d58c 	.word	0x0802d58c
 8017000:	0802fb6c 	.word	0x0802fb6c
 8017004:	0802d61a 	.word	0x0802d61a
 8017008:	2002b8f4 	.word	0x2002b8f4
 801700c:	0802d643 	.word	0x0802d643
 8017010:	2002b8f8 	.word	0x2002b8f8
 8017014:	2002b8fc 	.word	0x2002b8fc

08017018 <_ZNK8touchgfx12DigitalClock12getTextWidthEv>:
 8017018:	b508      	push	{r3, lr}
 801701a:	3034      	adds	r0, #52	; 0x34
 801701c:	f7ff ffb8 	bl	8016f90 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>
 8017020:	bd08      	pop	{r3, pc}
	...

08017024 <_ZN8touchgfx12DigitalClockC1Ev>:
 8017024:	b510      	push	{r4, lr}
 8017026:	4604      	mov	r4, r0
 8017028:	f000 f874 	bl	8017114 <_ZN8touchgfx13AbstractClockC1Ev>
 801702c:	2201      	movs	r2, #1
 801702e:	4b1d      	ldr	r3, [pc, #116]	; (80170a4 <_ZN8touchgfx12DigitalClockC1Ev+0x80>)
 8017030:	4620      	mov	r0, r4
 8017032:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8017036:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801703a:	4a1b      	ldr	r2, [pc, #108]	; (80170a8 <_ZN8touchgfx12DigitalClockC1Ev+0x84>)
 801703c:	6023      	str	r3, [r4, #0]
 801703e:	2303      	movs	r3, #3
 8017040:	65e2      	str	r2, [r4, #92]	; 0x5c
 8017042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017046:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 801704a:	2300      	movs	r3, #0
 801704c:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
 8017050:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8017054:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8017058:	66a2      	str	r2, [r4, #104]	; 0x68
 801705a:	4a14      	ldr	r2, [pc, #80]	; (80170ac <_ZN8touchgfx12DigitalClockC1Ev+0x88>)
 801705c:	8723      	strh	r3, [r4, #56]	; 0x38
 801705e:	6362      	str	r2, [r4, #52]	; 0x34
 8017060:	4622      	mov	r2, r4
 8017062:	8763      	strh	r3, [r4, #58]	; 0x3a
 8017064:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8017066:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8017068:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801706c:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
 8017070:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 8017074:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8017078:	6523      	str	r3, [r4, #80]	; 0x50
 801707a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 801707e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8017082:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8017086:	6663      	str	r3, [r4, #100]	; 0x64
 8017088:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
 801708c:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 8017090:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017094:	f822 3f74 	strh.w	r3, [r2, #116]!
 8017098:	6722      	str	r2, [r4, #112]	; 0x70
 801709a:	f000 f8e3 	bl	8017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801709e:	4620      	mov	r0, r4
 80170a0:	bd10      	pop	{r4, pc}
 80170a2:	bf00      	nop
 80170a4:	0802fab8 	.word	0x0802fab8
 80170a8:	0802ce4c 	.word	0x0802ce4c
 80170ac:	08030728 	.word	0x08030728

080170b0 <_ZN8touchgfx12DigitalClock34displayLeadingZeroForHourIndicatorEb>:
 80170b0:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
 80170b4:	4770      	bx	lr

080170b6 <_ZN8touchgfx13AbstractClock13setTime24HourEhhh>:
 80170b6:	b470      	push	{r4, r5, r6}
 80170b8:	2518      	movs	r5, #24
 80170ba:	fbb1 f6f5 	udiv	r6, r1, r5
 80170be:	fb06 1115 	mls	r1, r6, r5, r1
 80170c2:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
 80170c6:	213c      	movs	r1, #60	; 0x3c
 80170c8:	fbb2 f5f1 	udiv	r5, r2, r1
 80170cc:	fb05 2211 	mls	r2, r5, r1, r2
 80170d0:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
 80170d4:	fbb3 f2f1 	udiv	r2, r3, r1
 80170d8:	fb02 3311 	mls	r3, r2, r1, r3
 80170dc:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
 80170e0:	6803      	ldr	r3, [r0, #0]
 80170e2:	bc70      	pop	{r4, r5, r6}
 80170e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80170e8:	4718      	bx	r3

080170ea <_ZN8touchgfx13AbstractClock13setTime12HourEhhhb>:
 80170ea:	b4f0      	push	{r4, r5, r6, r7}
 80170ec:	6804      	ldr	r4, [r0, #0]
 80170ee:	f89d 6010 	ldrb.w	r6, [sp, #16]
 80170f2:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 80170f6:	240c      	movs	r4, #12
 80170f8:	2e00      	cmp	r6, #0
 80170fa:	46ac      	mov	ip, r5
 80170fc:	fbb1 f7f4 	udiv	r7, r1, r4
 8017100:	fb07 1114 	mls	r1, r7, r4, r1
 8017104:	bf18      	it	ne
 8017106:	2400      	movne	r4, #0
 8017108:	fa54 f181 	uxtab	r1, r4, r1
 801710c:	bcf0      	pop	{r4, r5, r6, r7}
 801710e:	b2c9      	uxtb	r1, r1
 8017110:	4760      	bx	ip
	...

08017114 <_ZN8touchgfx13AbstractClockC1Ev>:
 8017114:	2101      	movs	r1, #1
 8017116:	2200      	movs	r2, #0
 8017118:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801711c:	490a      	ldr	r1, [pc, #40]	; (8017148 <_ZN8touchgfx13AbstractClockC1Ev+0x34>)
 801711e:	8082      	strh	r2, [r0, #4]
 8017120:	80c2      	strh	r2, [r0, #6]
 8017122:	8102      	strh	r2, [r0, #8]
 8017124:	8142      	strh	r2, [r0, #10]
 8017126:	8182      	strh	r2, [r0, #12]
 8017128:	81c2      	strh	r2, [r0, #14]
 801712a:	8202      	strh	r2, [r0, #16]
 801712c:	8242      	strh	r2, [r0, #18]
 801712e:	61c2      	str	r2, [r0, #28]
 8017130:	8402      	strh	r2, [r0, #32]
 8017132:	8442      	strh	r2, [r0, #34]	; 0x22
 8017134:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8017138:	6001      	str	r1, [r0, #0]
 801713a:	6282      	str	r2, [r0, #40]	; 0x28
 801713c:	8582      	strh	r2, [r0, #44]	; 0x2c
 801713e:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
 8017142:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8017146:	4770      	bx	lr
 8017148:	0802fba4 	.word	0x0802fba4

0801714c <_ZNK8touchgfx13AbstractClock16getCurrentHour24Ev>:
 801714c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8017150:	4770      	bx	lr

08017152 <_ZNK8touchgfx13AbstractClock16getCurrentHour12Ev>:
 8017152:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8017156:	220c      	movs	r2, #12
 8017158:	f100 030b 	add.w	r3, r0, #11
 801715c:	fb93 f0f2 	sdiv	r0, r3, r2
 8017160:	fb02 3010 	mls	r0, r2, r0, r3
 8017164:	3001      	adds	r0, #1
 8017166:	b2c0      	uxtb	r0, r0
 8017168:	4770      	bx	lr

0801716a <_ZNK8touchgfx13AbstractClock12getCurrentAMEv>:
 801716a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801716e:	280b      	cmp	r0, #11
 8017170:	bf8c      	ite	hi
 8017172:	2000      	movhi	r0, #0
 8017174:	2001      	movls	r0, #1
 8017176:	4770      	bx	lr

08017178 <_ZNK8touchgfx13AbstractClock16getCurrentMinuteEv>:
 8017178:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 801717c:	4770      	bx	lr

0801717e <_ZNK8touchgfx13AbstractClock16getCurrentSecondEv>:
 801717e:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
 8017182:	4770      	bx	lr

08017184 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8017184:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017186:	2000      	movs	r0, #0
 8017188:	b12b      	cbz	r3, 8017196 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801718a:	b920      	cbnz	r0, 8017196 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801718c:	1a5a      	subs	r2, r3, r1
 801718e:	699b      	ldr	r3, [r3, #24]
 8017190:	4250      	negs	r0, r2
 8017192:	4150      	adcs	r0, r2
 8017194:	e7f8      	b.n	8017188 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8017196:	4770      	bx	lr

08017198 <_ZN8touchgfx9Container9removeAllEv>:
 8017198:	2200      	movs	r2, #0
 801719a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801719c:	b123      	cbz	r3, 80171a8 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801719e:	6999      	ldr	r1, [r3, #24]
 80171a0:	6281      	str	r1, [r0, #40]	; 0x28
 80171a2:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80171a6:	e7f8      	b.n	801719a <_ZN8touchgfx9Container9removeAllEv+0x2>
 80171a8:	4770      	bx	lr

080171aa <_ZN8touchgfx9Container6unlinkEv>:
 80171aa:	2300      	movs	r3, #0
 80171ac:	6283      	str	r3, [r0, #40]	; 0x28
 80171ae:	4770      	bx	lr

080171b0 <_ZNK8touchgfx9Container12getSolidRectEv>:
 80171b0:	2200      	movs	r2, #0
 80171b2:	8002      	strh	r2, [r0, #0]
 80171b4:	8042      	strh	r2, [r0, #2]
 80171b6:	8082      	strh	r2, [r0, #4]
 80171b8:	80c2      	strh	r2, [r0, #6]
 80171ba:	4770      	bx	lr

080171bc <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80171bc:	b570      	push	{r4, r5, r6, lr}
 80171be:	460d      	mov	r5, r1
 80171c0:	4616      	mov	r6, r2
 80171c2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80171c4:	b13c      	cbz	r4, 80171d6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80171c6:	6823      	ldr	r3, [r4, #0]
 80171c8:	4620      	mov	r0, r4
 80171ca:	4632      	mov	r2, r6
 80171cc:	4629      	mov	r1, r5
 80171ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80171d0:	4798      	blx	r3
 80171d2:	69a4      	ldr	r4, [r4, #24]
 80171d4:	e7f6      	b.n	80171c4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80171d6:	bd70      	pop	{r4, r5, r6, pc}

080171d8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80171d8:	b538      	push	{r3, r4, r5, lr}
 80171da:	460d      	mov	r5, r1
 80171dc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80171de:	b134      	cbz	r4, 80171ee <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80171e0:	682b      	ldr	r3, [r5, #0]
 80171e2:	4621      	mov	r1, r4
 80171e4:	4628      	mov	r0, r5
 80171e6:	689b      	ldr	r3, [r3, #8]
 80171e8:	4798      	blx	r3
 80171ea:	69a4      	ldr	r4, [r4, #24]
 80171ec:	e7f7      	b.n	80171de <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80171ee:	bd38      	pop	{r3, r4, r5, pc}

080171f0 <_ZN8touchgfx9ContainerD1Ev>:
 80171f0:	4770      	bx	lr

080171f2 <_ZN8touchgfx9ContainerD0Ev>:
 80171f2:	b510      	push	{r4, lr}
 80171f4:	4604      	mov	r4, r0
 80171f6:	212c      	movs	r1, #44	; 0x2c
 80171f8:	f012 fdfc 	bl	8029df4 <_ZdlPvj>
 80171fc:	4620      	mov	r0, r4
 80171fe:	bd10      	pop	{r4, pc}

08017200 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8017200:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017202:	b19b      	cbz	r3, 801722c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8017204:	428b      	cmp	r3, r1
 8017206:	d109      	bne.n	801721c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8017208:	699a      	ldr	r2, [r3, #24]
 801720a:	2100      	movs	r1, #0
 801720c:	6159      	str	r1, [r3, #20]
 801720e:	6282      	str	r2, [r0, #40]	; 0x28
 8017210:	b902      	cbnz	r2, 8017214 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8017212:	4770      	bx	lr
 8017214:	6199      	str	r1, [r3, #24]
 8017216:	4770      	bx	lr
 8017218:	4613      	mov	r3, r2
 801721a:	b13a      	cbz	r2, 801722c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801721c:	699a      	ldr	r2, [r3, #24]
 801721e:	428a      	cmp	r2, r1
 8017220:	d1fa      	bne.n	8017218 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8017222:	698a      	ldr	r2, [r1, #24]
 8017224:	619a      	str	r2, [r3, #24]
 8017226:	2300      	movs	r3, #0
 8017228:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801722c:	4770      	bx	lr

0801722e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801722e:	b410      	push	{r4}
 8017230:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017232:	4604      	mov	r4, r0
 8017234:	b92b      	cbnz	r3, 8017242 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8017236:	6803      	ldr	r3, [r0, #0]
 8017238:	4611      	mov	r1, r2
 801723a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801723e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017240:	4718      	bx	r3
 8017242:	b941      	cbnz	r1, 8017256 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8017244:	6193      	str	r3, [r2, #24]
 8017246:	6282      	str	r2, [r0, #40]	; 0x28
 8017248:	6154      	str	r4, [r2, #20]
 801724a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801724e:	4770      	bx	lr
 8017250:	4603      	mov	r3, r0
 8017252:	2800      	cmp	r0, #0
 8017254:	d0f9      	beq.n	801724a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8017256:	4299      	cmp	r1, r3
 8017258:	6998      	ldr	r0, [r3, #24]
 801725a:	d1f9      	bne.n	8017250 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801725c:	6190      	str	r0, [r2, #24]
 801725e:	618a      	str	r2, [r1, #24]
 8017260:	e7f2      	b.n	8017248 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>
	...

08017264 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8017264:	4288      	cmp	r0, r1
 8017266:	b508      	push	{r3, lr}
 8017268:	d105      	bne.n	8017276 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x12>
 801726a:	4b11      	ldr	r3, [pc, #68]	; (80172b0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4c>)
 801726c:	2123      	movs	r1, #35	; 0x23
 801726e:	4a11      	ldr	r2, [pc, #68]	; (80172b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017270:	4811      	ldr	r0, [pc, #68]	; (80172b8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>)
 8017272:	f012 fded 	bl	8029e50 <__assert_func>
 8017276:	694b      	ldr	r3, [r1, #20]
 8017278:	b11b      	cbz	r3, 8017282 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 801727a:	4b10      	ldr	r3, [pc, #64]	; (80172bc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x58>)
 801727c:	2124      	movs	r1, #36	; 0x24
 801727e:	4a0d      	ldr	r2, [pc, #52]	; (80172b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 8017280:	e7f6      	b.n	8017270 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 8017282:	e9c1 0305 	strd	r0, r3, [r1, #20]
 8017286:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017288:	b913      	cbnz	r3, 8017290 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2c>
 801728a:	6281      	str	r1, [r0, #40]	; 0x28
 801728c:	bd08      	pop	{r3, pc}
 801728e:	4613      	mov	r3, r2
 8017290:	699a      	ldr	r2, [r3, #24]
 8017292:	b12a      	cbz	r2, 80172a0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x3c>
 8017294:	428b      	cmp	r3, r1
 8017296:	d1fa      	bne.n	801728e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x2a>
 8017298:	4b09      	ldr	r3, [pc, #36]	; (80172c0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 801729a:	2135      	movs	r1, #53	; 0x35
 801729c:	4a05      	ldr	r2, [pc, #20]	; (80172b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 801729e:	e7e7      	b.n	8017270 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80172a0:	428b      	cmp	r3, r1
 80172a2:	d103      	bne.n	80172ac <_ZN8touchgfx9Container3addERNS_8DrawableE+0x48>
 80172a4:	4b06      	ldr	r3, [pc, #24]	; (80172c0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x5c>)
 80172a6:	2138      	movs	r1, #56	; 0x38
 80172a8:	4a02      	ldr	r2, [pc, #8]	; (80172b4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x50>)
 80172aa:	e7e1      	b.n	8017270 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xc>
 80172ac:	6199      	str	r1, [r3, #24]
 80172ae:	e7ed      	b.n	801728c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x28>
 80172b0:	0802fc34 	.word	0x0802fc34
 80172b4:	0802fd88 	.word	0x0802fd88
 80172b8:	0802fc60 	.word	0x0802fc60
 80172bc:	0802fc93 	.word	0x0802fc93
 80172c0:	0802fcc9 	.word	0x0802fcc9

080172c4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80172c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172c8:	461f      	mov	r7, r3
 80172ca:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80172ce:	460d      	mov	r5, r1
 80172d0:	4616      	mov	r6, r2
 80172d2:	b103      	cbz	r3, 80172d6 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80172d4:	6038      	str	r0, [r7, #0]
 80172d6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80172d8:	b314      	cbz	r4, 8017320 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80172da:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80172de:	b1eb      	cbz	r3, 801731c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80172e0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80172e4:	428d      	cmp	r5, r1
 80172e6:	db19      	blt.n	801731c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80172e8:	b289      	uxth	r1, r1
 80172ea:	8923      	ldrh	r3, [r4, #8]
 80172ec:	440b      	add	r3, r1
 80172ee:	b21b      	sxth	r3, r3
 80172f0:	429d      	cmp	r5, r3
 80172f2:	da13      	bge.n	801731c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80172f4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80172f8:	4296      	cmp	r6, r2
 80172fa:	db0f      	blt.n	801731c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80172fc:	b292      	uxth	r2, r2
 80172fe:	8963      	ldrh	r3, [r4, #10]
 8017300:	4413      	add	r3, r2
 8017302:	b21b      	sxth	r3, r3
 8017304:	429e      	cmp	r6, r3
 8017306:	da09      	bge.n	801731c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8017308:	6823      	ldr	r3, [r4, #0]
 801730a:	1ab2      	subs	r2, r6, r2
 801730c:	1a69      	subs	r1, r5, r1
 801730e:	4620      	mov	r0, r4
 8017310:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8017314:	b212      	sxth	r2, r2
 8017316:	463b      	mov	r3, r7
 8017318:	b209      	sxth	r1, r1
 801731a:	47c0      	blx	r8
 801731c:	69a4      	ldr	r4, [r4, #24]
 801731e:	e7db      	b.n	80172d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8017320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017324 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8017324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017328:	4c6d      	ldr	r4, [pc, #436]	; (80174e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 801732a:	b0a1      	sub	sp, #132	; 0x84
 801732c:	4606      	mov	r6, r0
 801732e:	6824      	ldr	r4, [r4, #0]
 8017330:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8017332:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8017336:	2400      	movs	r4, #0
 8017338:	9303      	str	r3, [sp, #12]
 801733a:	802c      	strh	r4, [r5, #0]
 801733c:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801733e:	802c      	strh	r4, [r5, #0]
 8017340:	601c      	str	r4, [r3, #0]
 8017342:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8017346:	f7ff ffbd 	bl	80172c4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801734a:	f1b9 0f03 	cmp.w	r9, #3
 801734e:	f340 80c1 	ble.w	80174d4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8017352:	4631      	mov	r1, r6
 8017354:	a80c      	add	r0, sp, #48	; 0x30
 8017356:	f004 fd27 	bl	801bda8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801735a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801735e:	9306      	str	r3, [sp, #24]
 8017360:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8017364:	9307      	str	r3, [sp, #28]
 8017366:	9b03      	ldr	r3, [sp, #12]
 8017368:	f8d3 a000 	ldr.w	sl, [r3]
 801736c:	f1ba 0f00 	cmp.w	sl, #0
 8017370:	f000 80b3 	beq.w	80174da <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8017374:	4651      	mov	r1, sl
 8017376:	a810      	add	r0, sp, #64	; 0x40
 8017378:	f004 fd16 	bl	801bda8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801737c:	2002      	movs	r0, #2
 801737e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8017382:	9b01      	ldr	r3, [sp, #4]
 8017384:	9a06      	ldr	r2, [sp, #24]
 8017386:	fb91 f1f0 	sdiv	r1, r1, r0
 801738a:	189d      	adds	r5, r3, r2
 801738c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8017390:	9a07      	ldr	r2, [sp, #28]
 8017392:	4419      	add	r1, r3
 8017394:	9b02      	ldr	r3, [sp, #8]
 8017396:	4413      	add	r3, r2
 8017398:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 801739c:	1a6d      	subs	r5, r5, r1
 801739e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80173a2:	fb92 f2f0 	sdiv	r2, r2, r0
 80173a6:	440a      	add	r2, r1
 80173a8:	1a9b      	subs	r3, r3, r2
 80173aa:	435b      	muls	r3, r3
 80173ac:	fb05 3505 	mla	r5, r5, r5, r3
 80173b0:	4f4c      	ldr	r7, [pc, #304]	; (80174e4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80173b2:	ac10      	add	r4, sp, #64	; 0x40
 80173b4:	f1b9 0f0c 	cmp.w	r9, #12
 80173b8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80173ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80173bc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80173be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80173c0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80173c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80173c4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80173c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80173cc:	f04f 0303 	mov.w	r3, #3
 80173d0:	bfd8      	it	le
 80173d2:	f109 32ff 	addle.w	r2, r9, #4294967295
 80173d6:	f04f 0400 	mov.w	r4, #0
 80173da:	f8cd 9000 	str.w	r9, [sp]
 80173de:	bfcc      	ite	gt
 80173e0:	4698      	movgt	r8, r3
 80173e2:	fb92 f8f3 	sdivle	r8, r2, r3
 80173e6:	1c63      	adds	r3, r4, #1
 80173e8:	aa10      	add	r2, sp, #64	; 0x40
 80173ea:	f004 0401 	and.w	r4, r4, #1
 80173ee:	f04f 0b00 	mov.w	fp, #0
 80173f2:	9308      	str	r3, [sp, #32]
 80173f4:	9b00      	ldr	r3, [sp, #0]
 80173f6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80173fa:	fb93 f3f8 	sdiv	r3, r3, r8
 80173fe:	3404      	adds	r4, #4
 8017400:	b29b      	uxth	r3, r3
 8017402:	9304      	str	r3, [sp, #16]
 8017404:	9a04      	ldr	r2, [sp, #16]
 8017406:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801740a:	fb13 f302 	smulbb	r3, r3, r2
 801740e:	9a01      	ldr	r2, [sp, #4]
 8017410:	b29b      	uxth	r3, r3
 8017412:	1899      	adds	r1, r3, r2
 8017414:	9305      	str	r3, [sp, #20]
 8017416:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801741a:	b209      	sxth	r1, r1
 801741c:	4299      	cmp	r1, r3
 801741e:	db4d      	blt.n	80174bc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017420:	8932      	ldrh	r2, [r6, #8]
 8017422:	4413      	add	r3, r2
 8017424:	b21b      	sxth	r3, r3
 8017426:	4299      	cmp	r1, r3
 8017428:	da48      	bge.n	80174bc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801742a:	9b04      	ldr	r3, [sp, #16]
 801742c:	6827      	ldr	r7, [r4, #0]
 801742e:	fb17 f703 	smulbb	r7, r7, r3
 8017432:	9b02      	ldr	r3, [sp, #8]
 8017434:	b2bf      	uxth	r7, r7
 8017436:	18fa      	adds	r2, r7, r3
 8017438:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801743c:	b212      	sxth	r2, r2
 801743e:	429a      	cmp	r2, r3
 8017440:	db3c      	blt.n	80174bc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017442:	8970      	ldrh	r0, [r6, #10]
 8017444:	4403      	add	r3, r0
 8017446:	b21b      	sxth	r3, r3
 8017448:	429a      	cmp	r2, r3
 801744a:	da37      	bge.n	80174bc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801744c:	2300      	movs	r3, #0
 801744e:	4630      	mov	r0, r6
 8017450:	930b      	str	r3, [sp, #44]	; 0x2c
 8017452:	ab0b      	add	r3, sp, #44	; 0x2c
 8017454:	f7ff ff36 	bl	80172c4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8017458:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801745a:	b37a      	cbz	r2, 80174bc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801745c:	4552      	cmp	r2, sl
 801745e:	d02d      	beq.n	80174bc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8017460:	4611      	mov	r1, r2
 8017462:	a80e      	add	r0, sp, #56	; 0x38
 8017464:	9209      	str	r2, [sp, #36]	; 0x24
 8017466:	f004 fc9f 	bl	801bda8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801746a:	f04f 0e02 	mov.w	lr, #2
 801746e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8017472:	9a06      	ldr	r2, [sp, #24]
 8017474:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8017478:	9b01      	ldr	r3, [sp, #4]
 801747a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801747e:	4413      	add	r3, r2
 8017480:	9a07      	ldr	r2, [sp, #28]
 8017482:	fb91 f1fe 	sdiv	r1, r1, lr
 8017486:	fb9c fcfe 	sdiv	ip, ip, lr
 801748a:	4401      	add	r1, r0
 801748c:	1a58      	subs	r0, r3, r1
 801748e:	9b02      	ldr	r3, [sp, #8]
 8017490:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8017494:	4413      	add	r3, r2
 8017496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017498:	448c      	add	ip, r1
 801749a:	eba3 030c 	sub.w	r3, r3, ip
 801749e:	435b      	muls	r3, r3
 80174a0:	fb00 3300 	mla	r3, r0, r0, r3
 80174a4:	42ab      	cmp	r3, r5
 80174a6:	d208      	bcs.n	80174ba <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80174a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80174aa:	461d      	mov	r5, r3
 80174ac:	9803      	ldr	r0, [sp, #12]
 80174ae:	6001      	str	r1, [r0, #0]
 80174b0:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80174b2:	9805      	ldr	r0, [sp, #20]
 80174b4:	8008      	strh	r0, [r1, #0]
 80174b6:	992b      	ldr	r1, [sp, #172]	; 0xac
 80174b8:	800f      	strh	r7, [r1, #0]
 80174ba:	4692      	mov	sl, r2
 80174bc:	f10b 0b01 	add.w	fp, fp, #1
 80174c0:	3408      	adds	r4, #8
 80174c2:	f1bb 0f04 	cmp.w	fp, #4
 80174c6:	d19d      	bne.n	8017404 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 80174c8:	9b00      	ldr	r3, [sp, #0]
 80174ca:	9c08      	ldr	r4, [sp, #32]
 80174cc:	444b      	add	r3, r9
 80174ce:	4544      	cmp	r4, r8
 80174d0:	9300      	str	r3, [sp, #0]
 80174d2:	d188      	bne.n	80173e6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 80174d4:	b021      	add	sp, #132	; 0x84
 80174d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174da:	f04f 35ff 	mov.w	r5, #4294967295
 80174de:	e767      	b.n	80173b0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80174e0:	2002b8a0 	.word	0x2002b8a0
 80174e4:	0802b308 	.word	0x0802b308

080174e8 <_ZN8touchgfx4RectaNERKS0_>:
 80174e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80174ec:	f9b1 7000 	ldrsh.w	r7, [r1]
 80174f0:	888c      	ldrh	r4, [r1, #4]
 80174f2:	f9b0 9000 	ldrsh.w	r9, [r0]
 80174f6:	443c      	add	r4, r7
 80174f8:	b2a4      	uxth	r4, r4
 80174fa:	fa0f f884 	sxth.w	r8, r4
 80174fe:	45c1      	cmp	r9, r8
 8017500:	da2f      	bge.n	8017562 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017502:	8882      	ldrh	r2, [r0, #4]
 8017504:	444a      	add	r2, r9
 8017506:	b292      	uxth	r2, r2
 8017508:	fa0f fe82 	sxth.w	lr, r2
 801750c:	4577      	cmp	r7, lr
 801750e:	da28      	bge.n	8017562 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017510:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8017514:	88cb      	ldrh	r3, [r1, #6]
 8017516:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801751a:	442b      	add	r3, r5
 801751c:	b21b      	sxth	r3, r3
 801751e:	429e      	cmp	r6, r3
 8017520:	da1f      	bge.n	8017562 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017522:	88c3      	ldrh	r3, [r0, #6]
 8017524:	4433      	add	r3, r6
 8017526:	b29b      	uxth	r3, r3
 8017528:	fa0f fc83 	sxth.w	ip, r3
 801752c:	4565      	cmp	r5, ip
 801752e:	da18      	bge.n	8017562 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8017530:	454f      	cmp	r7, r9
 8017532:	bfb8      	it	lt
 8017534:	464f      	movlt	r7, r9
 8017536:	42b5      	cmp	r5, r6
 8017538:	bfb8      	it	lt
 801753a:	4635      	movlt	r5, r6
 801753c:	45f0      	cmp	r8, lr
 801753e:	bfd8      	it	le
 8017540:	4622      	movle	r2, r4
 8017542:	1bd2      	subs	r2, r2, r7
 8017544:	8082      	strh	r2, [r0, #4]
 8017546:	884a      	ldrh	r2, [r1, #2]
 8017548:	88c9      	ldrh	r1, [r1, #6]
 801754a:	8007      	strh	r7, [r0, #0]
 801754c:	440a      	add	r2, r1
 801754e:	8045      	strh	r5, [r0, #2]
 8017550:	b292      	uxth	r2, r2
 8017552:	b211      	sxth	r1, r2
 8017554:	458c      	cmp	ip, r1
 8017556:	bfa8      	it	ge
 8017558:	4613      	movge	r3, r2
 801755a:	1b5b      	subs	r3, r3, r5
 801755c:	80c3      	strh	r3, [r0, #6]
 801755e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017562:	2300      	movs	r3, #0
 8017564:	8003      	strh	r3, [r0, #0]
 8017566:	8043      	strh	r3, [r0, #2]
 8017568:	8083      	strh	r3, [r0, #4]
 801756a:	80c3      	strh	r3, [r0, #6]
 801756c:	e7f7      	b.n	801755e <_ZN8touchgfx4RectaNERKS0_+0x76>

0801756e <_ZNK8touchgfx4Rect7isEmptyEv>:
 801756e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8017572:	2b00      	cmp	r3, #0
 8017574:	dd06      	ble.n	8017584 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8017576:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801757a:	2800      	cmp	r0, #0
 801757c:	bfcc      	ite	gt
 801757e:	2000      	movgt	r0, #0
 8017580:	2001      	movle	r0, #1
 8017582:	4770      	bx	lr
 8017584:	2001      	movs	r0, #1
 8017586:	4770      	bx	lr

08017588 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8017588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801758c:	2300      	movs	r3, #0
 801758e:	4604      	mov	r4, r0
 8017590:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8017592:	8003      	strh	r3, [r0, #0]
 8017594:	8043      	strh	r3, [r0, #2]
 8017596:	8083      	strh	r3, [r0, #4]
 8017598:	80c3      	strh	r3, [r0, #6]
 801759a:	2d00      	cmp	r5, #0
 801759c:	d040      	beq.n	8017620 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801759e:	1d28      	adds	r0, r5, #4
 80175a0:	f7ff ffe5 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 80175a4:	b988      	cbnz	r0, 80175ca <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80175a6:	4620      	mov	r0, r4
 80175a8:	f7ff ffe1 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 80175ac:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80175b0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80175b4:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80175b8:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80175bc:	b138      	cbz	r0, 80175ce <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80175be:	8022      	strh	r2, [r4, #0]
 80175c0:	8063      	strh	r3, [r4, #2]
 80175c2:	f8a4 e004 	strh.w	lr, [r4, #4]
 80175c6:	f8a4 c006 	strh.w	ip, [r4, #6]
 80175ca:	69ad      	ldr	r5, [r5, #24]
 80175cc:	e7e5      	b.n	801759a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80175ce:	f9b4 0000 	ldrsh.w	r0, [r4]
 80175d2:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80175d6:	4290      	cmp	r0, r2
 80175d8:	4607      	mov	r7, r0
 80175da:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80175de:	460e      	mov	r6, r1
 80175e0:	bfa8      	it	ge
 80175e2:	4617      	movge	r7, r2
 80175e4:	4299      	cmp	r1, r3
 80175e6:	4472      	add	r2, lr
 80175e8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80175ec:	bfa8      	it	ge
 80175ee:	461e      	movge	r6, r3
 80175f0:	4440      	add	r0, r8
 80175f2:	4471      	add	r1, lr
 80175f4:	4463      	add	r3, ip
 80175f6:	b200      	sxth	r0, r0
 80175f8:	8027      	strh	r7, [r4, #0]
 80175fa:	b212      	sxth	r2, r2
 80175fc:	8066      	strh	r6, [r4, #2]
 80175fe:	b209      	sxth	r1, r1
 8017600:	b21b      	sxth	r3, r3
 8017602:	4290      	cmp	r0, r2
 8017604:	bfac      	ite	ge
 8017606:	ebc7 0200 	rsbge	r2, r7, r0
 801760a:	ebc7 0202 	rsblt	r2, r7, r2
 801760e:	4299      	cmp	r1, r3
 8017610:	bfac      	ite	ge
 8017612:	ebc6 0301 	rsbge	r3, r6, r1
 8017616:	ebc6 0303 	rsblt	r3, r6, r3
 801761a:	80a2      	strh	r2, [r4, #4]
 801761c:	80e3      	strh	r3, [r4, #6]
 801761e:	e7d4      	b.n	80175ca <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8017620:	4620      	mov	r0, r4
 8017622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017626 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8017626:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801762a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801762e:	b383      	cbz	r3, 8017692 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017630:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017632:	b374      	cbz	r4, 8017692 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8017634:	f9b1 5000 	ldrsh.w	r5, [r1]
 8017638:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 801763c:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8017640:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8017644:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8017648:	b303      	cbz	r3, 801768c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801764a:	4668      	mov	r0, sp
 801764c:	1d21      	adds	r1, r4, #4
 801764e:	f8ad 5000 	strh.w	r5, [sp]
 8017652:	f8ad 6002 	strh.w	r6, [sp, #2]
 8017656:	f8ad 7004 	strh.w	r7, [sp, #4]
 801765a:	f8ad 8006 	strh.w	r8, [sp, #6]
 801765e:	f7ff ff43 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 8017662:	4668      	mov	r0, sp
 8017664:	f7ff ff83 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 8017668:	b980      	cbnz	r0, 801768c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801766a:	f8bd 3000 	ldrh.w	r3, [sp]
 801766e:	4669      	mov	r1, sp
 8017670:	88a2      	ldrh	r2, [r4, #4]
 8017672:	4620      	mov	r0, r4
 8017674:	1a9b      	subs	r3, r3, r2
 8017676:	88e2      	ldrh	r2, [r4, #6]
 8017678:	f8ad 3000 	strh.w	r3, [sp]
 801767c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017680:	1a9b      	subs	r3, r3, r2
 8017682:	f8ad 3002 	strh.w	r3, [sp, #2]
 8017686:	6823      	ldr	r3, [r4, #0]
 8017688:	689b      	ldr	r3, [r3, #8]
 801768a:	4798      	blx	r3
 801768c:	69a4      	ldr	r4, [r4, #24]
 801768e:	2c00      	cmp	r4, #0
 8017690:	d1d8      	bne.n	8017644 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8017692:	b002      	add	sp, #8
 8017694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017698 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8017698:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801769a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801769e:	460d      	mov	r5, r1
 80176a0:	4616      	mov	r6, r2
 80176a2:	b323      	cbz	r3, 80176ee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80176a4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80176a6:	b314      	cbz	r4, 80176ee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80176a8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80176ac:	b1eb      	cbz	r3, 80176ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80176ae:	6828      	ldr	r0, [r5, #0]
 80176b0:	466b      	mov	r3, sp
 80176b2:	6869      	ldr	r1, [r5, #4]
 80176b4:	c303      	stmia	r3!, {r0, r1}
 80176b6:	4668      	mov	r0, sp
 80176b8:	1d21      	adds	r1, r4, #4
 80176ba:	f7ff ff15 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 80176be:	4668      	mov	r0, sp
 80176c0:	f7ff ff55 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 80176c4:	b988      	cbnz	r0, 80176ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80176c6:	f8bd 3000 	ldrh.w	r3, [sp]
 80176ca:	4669      	mov	r1, sp
 80176cc:	88a2      	ldrh	r2, [r4, #4]
 80176ce:	4620      	mov	r0, r4
 80176d0:	1a9b      	subs	r3, r3, r2
 80176d2:	88e2      	ldrh	r2, [r4, #6]
 80176d4:	f8ad 3000 	strh.w	r3, [sp]
 80176d8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80176dc:	1a9b      	subs	r3, r3, r2
 80176de:	4632      	mov	r2, r6
 80176e0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80176e4:	6823      	ldr	r3, [r4, #0]
 80176e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80176e8:	4798      	blx	r3
 80176ea:	69a4      	ldr	r4, [r4, #24]
 80176ec:	e7db      	b.n	80176a6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80176ee:	b002      	add	sp, #8
 80176f0:	bd70      	pop	{r4, r5, r6, pc}

080176f2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80176f2:	6803      	ldr	r3, [r0, #0]
 80176f4:	b513      	push	{r0, r1, r4, lr}
 80176f6:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 80176fa:	2300      	movs	r3, #0
 80176fc:	e9cd 3300 	strd	r3, r3, [sp]
 8017700:	466b      	mov	r3, sp
 8017702:	47a0      	blx	r4
 8017704:	b002      	add	sp, #8
 8017706:	bd10      	pop	{r4, pc}

08017708 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8017708:	2301      	movs	r3, #1
 801770a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801770e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8017712:	4770      	bx	lr

08017714 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8017714:	2301      	movs	r3, #1
 8017716:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 801771a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801771e:	4770      	bx	lr

08017720 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8017720:	6843      	ldr	r3, [r0, #4]
 8017722:	2201      	movs	r2, #1
 8017724:	725a      	strb	r2, [r3, #9]
 8017726:	6840      	ldr	r0, [r0, #4]
 8017728:	6803      	ldr	r3, [r0, #0]
 801772a:	691b      	ldr	r3, [r3, #16]
 801772c:	4718      	bx	r3

0801772e <_ZN8touchgfx3HAL8flushDMAEv>:
 801772e:	6840      	ldr	r0, [r0, #4]
 8017730:	6803      	ldr	r3, [r0, #0]
 8017732:	689b      	ldr	r3, [r3, #8]
 8017734:	4718      	bx	r3

08017736 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8017736:	b530      	push	{r4, r5, lr}
 8017738:	b08b      	sub	sp, #44	; 0x2c
 801773a:	6804      	ldr	r4, [r0, #0]
 801773c:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8017740:	9509      	str	r5, [sp, #36]	; 0x24
 8017742:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8017746:	9508      	str	r5, [sp, #32]
 8017748:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 801774c:	9507      	str	r5, [sp, #28]
 801774e:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8017752:	9506      	str	r5, [sp, #24]
 8017754:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8017758:	9505      	str	r5, [sp, #20]
 801775a:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 801775e:	9504      	str	r5, [sp, #16]
 8017760:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8017764:	9503      	str	r5, [sp, #12]
 8017766:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801776a:	9502      	str	r5, [sp, #8]
 801776c:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8017770:	e9cd 3500 	strd	r3, r5, [sp]
 8017774:	4613      	mov	r3, r2
 8017776:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8017778:	2200      	movs	r2, #0
 801777a:	47a0      	blx	r4
 801777c:	b00b      	add	sp, #44	; 0x2c
 801777e:	bd30      	pop	{r4, r5, pc}

08017780 <_ZN8touchgfx3HAL10beginFrameEv>:
 8017780:	4b04      	ldr	r3, [pc, #16]	; (8017794 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8017782:	781b      	ldrb	r3, [r3, #0]
 8017784:	b123      	cbz	r3, 8017790 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8017786:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801778a:	f080 0001 	eor.w	r0, r0, #1
 801778e:	4770      	bx	lr
 8017790:	2001      	movs	r0, #1
 8017792:	4770      	bx	lr
 8017794:	2002b89e 	.word	0x2002b89e

08017798 <_ZN8touchgfx3HAL8endFrameEv>:
 8017798:	b510      	push	{r4, lr}
 801779a:	4604      	mov	r4, r0
 801779c:	6840      	ldr	r0, [r0, #4]
 801779e:	6803      	ldr	r3, [r0, #0]
 80177a0:	689b      	ldr	r3, [r3, #8]
 80177a2:	4798      	blx	r3
 80177a4:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80177a8:	b113      	cbz	r3, 80177b0 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80177aa:	2301      	movs	r3, #1
 80177ac:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80177b0:	bd10      	pop	{r4, pc}

080177b2 <_ZN8touchgfx3HAL10initializeEv>:
 80177b2:	b510      	push	{r4, lr}
 80177b4:	4604      	mov	r4, r0
 80177b6:	f7ea fa91 	bl	8001cdc <_ZN8touchgfx10OSWrappers10initializeEv>
 80177ba:	6860      	ldr	r0, [r4, #4]
 80177bc:	6803      	ldr	r3, [r0, #0]
 80177be:	68db      	ldr	r3, [r3, #12]
 80177c0:	4798      	blx	r3
 80177c2:	68e0      	ldr	r0, [r4, #12]
 80177c4:	6803      	ldr	r3, [r0, #0]
 80177c6:	689b      	ldr	r3, [r3, #8]
 80177c8:	4798      	blx	r3
 80177ca:	6823      	ldr	r3, [r4, #0]
 80177cc:	4620      	mov	r0, r4
 80177ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80177d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177d4:	4718      	bx	r3

080177d6 <_ZN8touchgfx3HAL9taskEntryEv>:
 80177d6:	b508      	push	{r3, lr}
 80177d8:	6803      	ldr	r3, [r0, #0]
 80177da:	4604      	mov	r4, r0
 80177dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80177de:	4798      	blx	r3
 80177e0:	6823      	ldr	r3, [r4, #0]
 80177e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80177e4:	4620      	mov	r0, r4
 80177e6:	4798      	blx	r3
 80177e8:	f7ea fac4 	bl	8001d74 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80177ec:	6823      	ldr	r3, [r4, #0]
 80177ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80177f0:	e7f8      	b.n	80177e4 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080177f4 <_ZN8touchgfx3HAL4tickEv>:
 80177f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80177f6:	6803      	ldr	r3, [r0, #0]
 80177f8:	4604      	mov	r4, r0
 80177fa:	4d5c      	ldr	r5, [pc, #368]	; (801796c <_ZN8touchgfx3HAL4tickEv+0x178>)
 80177fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8017800:	4798      	blx	r3
 8017802:	2800      	cmp	r0, #0
 8017804:	f000 8097 	beq.w	8017936 <_ZN8touchgfx3HAL4tickEv+0x142>
 8017808:	2001      	movs	r0, #1
 801780a:	2600      	movs	r6, #0
 801780c:	f7ea f95a 	bl	8001ac4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8017810:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8017814:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8017818:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801781c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8017820:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8017824:	b133      	cbz	r3, 8017834 <_ZN8touchgfx3HAL4tickEv+0x40>
 8017826:	6823      	ldr	r3, [r4, #0]
 8017828:	4620      	mov	r0, r4
 801782a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801782e:	4798      	blx	r3
 8017830:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8017834:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8017838:	2601      	movs	r6, #1
 801783a:	6862      	ldr	r2, [r4, #4]
 801783c:	f083 0301 	eor.w	r3, r3, #1
 8017840:	702e      	strb	r6, [r5, #0]
 8017842:	7253      	strb	r3, [r2, #9]
 8017844:	f003 fa96 	bl	801ad74 <_ZN8touchgfx11Application11getInstanceEv>
 8017848:	6803      	ldr	r3, [r0, #0]
 801784a:	4631      	mov	r1, r6
 801784c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801784e:	4798      	blx	r3
 8017850:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8017854:	b90b      	cbnz	r3, 801785a <_ZN8touchgfx3HAL4tickEv+0x66>
 8017856:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801785a:	f003 fa8b 	bl	801ad74 <_ZN8touchgfx11Application11getInstanceEv>
 801785e:	6803      	ldr	r3, [r0, #0]
 8017860:	695b      	ldr	r3, [r3, #20]
 8017862:	4798      	blx	r3
 8017864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017866:	6803      	ldr	r3, [r0, #0]
 8017868:	691b      	ldr	r3, [r3, #16]
 801786a:	4798      	blx	r3
 801786c:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8017870:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8017874:	3b01      	subs	r3, #1
 8017876:	b2db      	uxtb	r3, r3
 8017878:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801787c:	b10a      	cbz	r2, 8017882 <_ZN8touchgfx3HAL4tickEv+0x8e>
 801787e:	2b00      	cmp	r3, #0
 8017880:	d1eb      	bne.n	801785a <_ZN8touchgfx3HAL4tickEv+0x66>
 8017882:	4a3b      	ldr	r2, [pc, #236]	; (8017970 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8017884:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8017888:	7813      	ldrb	r3, [r2, #0]
 801788a:	3301      	adds	r3, #1
 801788c:	b25b      	sxtb	r3, r3
 801788e:	4299      	cmp	r1, r3
 8017890:	7013      	strb	r3, [r2, #0]
 8017892:	dc10      	bgt.n	80178b6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8017894:	2300      	movs	r3, #0
 8017896:	68e0      	ldr	r0, [r4, #12]
 8017898:	a902      	add	r1, sp, #8
 801789a:	7013      	strb	r3, [r2, #0]
 801789c:	aa03      	add	r2, sp, #12
 801789e:	6803      	ldr	r3, [r0, #0]
 80178a0:	68db      	ldr	r3, [r3, #12]
 80178a2:	4798      	blx	r3
 80178a4:	6823      	ldr	r3, [r4, #0]
 80178a6:	2800      	cmp	r0, #0
 80178a8:	d051      	beq.n	801794e <_ZN8touchgfx3HAL4tickEv+0x15a>
 80178aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80178ae:	4620      	mov	r0, r4
 80178b0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80178b4:	4798      	blx	r3
 80178b6:	2300      	movs	r3, #0
 80178b8:	6960      	ldr	r0, [r4, #20]
 80178ba:	f88d 3007 	strb.w	r3, [sp, #7]
 80178be:	b158      	cbz	r0, 80178d8 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80178c0:	6803      	ldr	r3, [r0, #0]
 80178c2:	f10d 0107 	add.w	r1, sp, #7
 80178c6:	68db      	ldr	r3, [r3, #12]
 80178c8:	4798      	blx	r3
 80178ca:	b128      	cbz	r0, 80178d8 <_ZN8touchgfx3HAL4tickEv+0xe4>
 80178cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80178ce:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80178d2:	6803      	ldr	r3, [r0, #0]
 80178d4:	68db      	ldr	r3, [r3, #12]
 80178d6:	4798      	blx	r3
 80178d8:	f104 001c 	add.w	r0, r4, #28
 80178dc:	f012 f9b2 	bl	8029c44 <_ZN8touchgfx8Gestures4tickEv>
 80178e0:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80178e4:	b30b      	cbz	r3, 801792a <_ZN8touchgfx3HAL4tickEv+0x136>
 80178e6:	6920      	ldr	r0, [r4, #16]
 80178e8:	6803      	ldr	r3, [r0, #0]
 80178ea:	691b      	ldr	r3, [r3, #16]
 80178ec:	4798      	blx	r3
 80178ee:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80178f0:	4606      	mov	r6, r0
 80178f2:	b903      	cbnz	r3, 80178f6 <_ZN8touchgfx3HAL4tickEv+0x102>
 80178f4:	6720      	str	r0, [r4, #112]	; 0x70
 80178f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80178f8:	4a1e      	ldr	r2, [pc, #120]	; (8017974 <_ZN8touchgfx3HAL4tickEv+0x180>)
 80178fa:	1af3      	subs	r3, r6, r3
 80178fc:	4293      	cmp	r3, r2
 80178fe:	d914      	bls.n	801792a <_ZN8touchgfx3HAL4tickEv+0x136>
 8017900:	6920      	ldr	r0, [r4, #16]
 8017902:	6803      	ldr	r3, [r0, #0]
 8017904:	699b      	ldr	r3, [r3, #24]
 8017906:	4798      	blx	r3
 8017908:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801790a:	2264      	movs	r2, #100	; 0x64
 801790c:	1af3      	subs	r3, r6, r3
 801790e:	fbb3 f3f2 	udiv	r3, r3, r2
 8017912:	fbb0 f0f3 	udiv	r0, r0, r3
 8017916:	2800      	cmp	r0, #0
 8017918:	dc1e      	bgt.n	8017958 <_ZN8touchgfx3HAL4tickEv+0x164>
 801791a:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 801791e:	6920      	ldr	r0, [r4, #16]
 8017920:	2100      	movs	r1, #0
 8017922:	6803      	ldr	r3, [r0, #0]
 8017924:	69db      	ldr	r3, [r3, #28]
 8017926:	4798      	blx	r3
 8017928:	6726      	str	r6, [r4, #112]	; 0x70
 801792a:	f003 fa23 	bl	801ad74 <_ZN8touchgfx11Application11getInstanceEv>
 801792e:	6803      	ldr	r3, [r0, #0]
 8017930:	2100      	movs	r1, #0
 8017932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017934:	4798      	blx	r3
 8017936:	6823      	ldr	r3, [r4, #0]
 8017938:	4620      	mov	r0, r4
 801793a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801793e:	4798      	blx	r3
 8017940:	2001      	movs	r0, #1
 8017942:	f7ea f8c0 	bl	8001ac6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8017946:	2300      	movs	r3, #0
 8017948:	702b      	strb	r3, [r5, #0]
 801794a:	b004      	add	sp, #16
 801794c:	bd70      	pop	{r4, r5, r6, pc}
 801794e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8017952:	4620      	mov	r0, r4
 8017954:	4798      	blx	r3
 8017956:	e7ae      	b.n	80178b6 <_ZN8touchgfx3HAL4tickEv+0xc2>
 8017958:	2863      	cmp	r0, #99	; 0x63
 801795a:	bfcb      	itete	gt
 801795c:	2300      	movgt	r3, #0
 801795e:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8017962:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8017966:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801796a:	e7d8      	b.n	801791e <_ZN8touchgfx3HAL4tickEv+0x12a>
 801796c:	2002b8a4 	.word	0x2002b8a4
 8017970:	2002b8a5 	.word	0x2002b8a5
 8017974:	05f5e100 	.word	0x05f5e100

08017978 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8017978:	f7ea b9e0 	b.w	8001d3c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801797c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801797c:	6581      	str	r1, [r0, #88]	; 0x58
 801797e:	301c      	adds	r0, #28
 8017980:	f012 b95e 	b.w	8029c40 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08017984 <_ZN8touchgfx3HAL5touchEll>:
 8017984:	b530      	push	{r4, r5, lr}
 8017986:	b087      	sub	sp, #28
 8017988:	4604      	mov	r4, r0
 801798a:	a804      	add	r0, sp, #16
 801798c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8017990:	f002 ffa6 	bl	801a8e0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8017994:	9b04      	ldr	r3, [sp, #16]
 8017996:	a906      	add	r1, sp, #24
 8017998:	a803      	add	r0, sp, #12
 801799a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801799e:	9b05      	ldr	r3, [sp, #20]
 80179a0:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80179a4:	f002 ffee 	bl	801a984 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80179a8:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80179ac:	f104 001c 	add.w	r0, r4, #28
 80179b0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80179b4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80179b8:	b189      	cbz	r1, 80179de <_ZN8touchgfx3HAL5touchEll+0x5a>
 80179ba:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80179be:	9300      	str	r3, [sp, #0]
 80179c0:	4613      	mov	r3, r2
 80179c2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80179c6:	462a      	mov	r2, r5
 80179c8:	f012 f94a 	bl	8029c60 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80179cc:	b128      	cbz	r0, 80179da <_ZN8touchgfx3HAL5touchEll+0x56>
 80179ce:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80179d2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80179d4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80179d8:	6623      	str	r3, [r4, #96]	; 0x60
 80179da:	b007      	add	sp, #28
 80179dc:	bd30      	pop	{r4, r5, pc}
 80179de:	f012 f983 	bl	8029ce8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80179e2:	2301      	movs	r3, #1
 80179e4:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80179e8:	e7f1      	b.n	80179ce <_ZN8touchgfx3HAL5touchEll+0x4a>

080179ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80179ea:	b510      	push	{r4, lr}
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d046      	beq.n	8017a7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80179f0:	ea81 0002 	eor.w	r0, r1, r2
 80179f4:	07c4      	lsls	r4, r0, #31
 80179f6:	d508      	bpl.n	8017a0a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80179f8:	440b      	add	r3, r1
 80179fa:	3a01      	subs	r2, #1
 80179fc:	428b      	cmp	r3, r1
 80179fe:	d93e      	bls.n	8017a7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017a00:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017a04:	f801 0b01 	strb.w	r0, [r1], #1
 8017a08:	e7f8      	b.n	80179fc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8017a0a:	07d0      	lsls	r0, r2, #31
 8017a0c:	bf42      	ittt	mi
 8017a0e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8017a12:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8017a16:	f801 0b01 	strbmi.w	r0, [r1], #1
 8017a1a:	2b01      	cmp	r3, #1
 8017a1c:	d911      	bls.n	8017a42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017a1e:	ea81 0402 	eor.w	r4, r1, r2
 8017a22:	4610      	mov	r0, r2
 8017a24:	07a4      	lsls	r4, r4, #30
 8017a26:	d022      	beq.n	8017a6e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8017a28:	f023 0401 	bic.w	r4, r3, #1
 8017a2c:	440c      	add	r4, r1
 8017a2e:	428c      	cmp	r4, r1
 8017a30:	4602      	mov	r2, r0
 8017a32:	d904      	bls.n	8017a3e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8017a34:	8812      	ldrh	r2, [r2, #0]
 8017a36:	3002      	adds	r0, #2
 8017a38:	f821 2b02 	strh.w	r2, [r1], #2
 8017a3c:	e7f7      	b.n	8017a2e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8017a3e:	f003 0301 	and.w	r3, r3, #1
 8017a42:	f023 0003 	bic.w	r0, r3, #3
 8017a46:	4408      	add	r0, r1
 8017a48:	4288      	cmp	r0, r1
 8017a4a:	4614      	mov	r4, r2
 8017a4c:	d904      	bls.n	8017a58 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8017a4e:	6824      	ldr	r4, [r4, #0]
 8017a50:	3204      	adds	r2, #4
 8017a52:	f841 4b04 	str.w	r4, [r1], #4
 8017a56:	e7f7      	b.n	8017a48 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8017a58:	f003 0303 	and.w	r3, r3, #3
 8017a5c:	3a01      	subs	r2, #1
 8017a5e:	440b      	add	r3, r1
 8017a60:	428b      	cmp	r3, r1
 8017a62:	d90c      	bls.n	8017a7e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8017a64:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8017a68:	f801 0b01 	strb.w	r0, [r1], #1
 8017a6c:	e7f8      	b.n	8017a60 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8017a6e:	0790      	lsls	r0, r2, #30
 8017a70:	d0e7      	beq.n	8017a42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017a72:	f832 0b02 	ldrh.w	r0, [r2], #2
 8017a76:	3b02      	subs	r3, #2
 8017a78:	f821 0b02 	strh.w	r0, [r1], #2
 8017a7c:	e7e1      	b.n	8017a42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8017a7e:	2001      	movs	r0, #1
 8017a80:	bd10      	pop	{r4, pc}

08017a82 <_ZN8touchgfx3HAL7noTouchEv>:
 8017a82:	b510      	push	{r4, lr}
 8017a84:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8017a88:	4604      	mov	r4, r0
 8017a8a:	b153      	cbz	r3, 8017aa2 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8017a8c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8017a90:	2101      	movs	r1, #1
 8017a92:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8017a96:	301c      	adds	r0, #28
 8017a98:	f012 f926 	bl	8029ce8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8017a9c:	2300      	movs	r3, #0
 8017a9e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8017aa2:	bd10      	pop	{r4, pc}

08017aa4 <_ZN8touchgfx3HAL3lcdEv>:
 8017aa4:	4b04      	ldr	r3, [pc, #16]	; (8017ab8 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017aac:	b10a      	cbz	r2, 8017ab2 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8017aae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8017ab0:	b900      	cbnz	r0, 8017ab4 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8017ab2:	6898      	ldr	r0, [r3, #8]
 8017ab4:	4770      	bx	lr
 8017ab6:	bf00      	nop
 8017ab8:	2002b8a0 	.word	0x2002b8a0

08017abc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8017abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ac0:	4604      	mov	r4, r0
 8017ac2:	6980      	ldr	r0, [r0, #24]
 8017ac4:	b085      	sub	sp, #20
 8017ac6:	460f      	mov	r7, r1
 8017ac8:	4690      	mov	r8, r2
 8017aca:	4699      	mov	r9, r3
 8017acc:	b930      	cbnz	r0, 8017adc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 8017ace:	4b1c      	ldr	r3, [pc, #112]	; (8017b40 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x84>)
 8017ad0:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8017ad4:	4a1b      	ldr	r2, [pc, #108]	; (8017b44 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8017ad6:	481c      	ldr	r0, [pc, #112]	; (8017b48 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x8c>)
 8017ad8:	f012 f9ba 	bl	8029e50 <__assert_func>
 8017adc:	ad04      	add	r5, sp, #16
 8017ade:	2600      	movs	r6, #0
 8017ae0:	f845 6d04 	str.w	r6, [r5, #-4]!
 8017ae4:	6806      	ldr	r6, [r0, #0]
 8017ae6:	9501      	str	r5, [sp, #4]
 8017ae8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8017aec:	9500      	str	r5, [sp, #0]
 8017aee:	6835      	ldr	r5, [r6, #0]
 8017af0:	47a8      	blx	r5
 8017af2:	4d16      	ldr	r5, [pc, #88]	; (8017b4c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8017af4:	4606      	mov	r6, r0
 8017af6:	f8a5 9000 	strh.w	r9, [r5]
 8017afa:	f7ff ffd3 	bl	8017aa4 <_ZN8touchgfx3HAL3lcdEv>
 8017afe:	6803      	ldr	r3, [r0, #0]
 8017b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b02:	4798      	blx	r3
 8017b04:	2801      	cmp	r0, #1
 8017b06:	d012      	beq.n	8017b2e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x72>
 8017b08:	d306      	bcc.n	8017b18 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x5c>
 8017b0a:	280d      	cmp	r0, #13
 8017b0c:	d80b      	bhi.n	8017b26 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8017b0e:	4b10      	ldr	r3, [pc, #64]	; (8017b50 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8017b10:	f240 1167 	movw	r1, #359	; 0x167
 8017b14:	4a0b      	ldr	r2, [pc, #44]	; (8017b44 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x88>)
 8017b16:	e7de      	b.n	8017ad6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 8017b18:	882b      	ldrh	r3, [r5, #0]
 8017b1a:	fb08 7203 	mla	r2, r8, r3, r7
 8017b1e:	9b03      	ldr	r3, [sp, #12]
 8017b20:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8017b24:	63e3      	str	r3, [r4, #60]	; 0x3c
 8017b26:	4630      	mov	r0, r6
 8017b28:	b005      	add	sp, #20
 8017b2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b2e:	882a      	ldrh	r2, [r5, #0]
 8017b30:	9b03      	ldr	r3, [sp, #12]
 8017b32:	fb08 7202 	mla	r2, r8, r2, r7
 8017b36:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017b3a:	1a9a      	subs	r2, r3, r2
 8017b3c:	63e2      	str	r2, [r4, #60]	; 0x3c
 8017b3e:	e7f2      	b.n	8017b26 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 8017b40:	0802ff30 	.word	0x0802ff30
 8017b44:	080301ee 	.word	0x080301ee
 8017b48:	0802ff75 	.word	0x0802ff75
 8017b4c:	2002b89a 	.word	0x2002b89a
 8017b50:	0802ff9b 	.word	0x0802ff9b

08017b54 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8017b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b56:	b08b      	sub	sp, #44	; 0x2c
 8017b58:	4617      	mov	r7, r2
 8017b5a:	4604      	mov	r4, r0
 8017b5c:	460e      	mov	r6, r1
 8017b5e:	461d      	mov	r5, r3
 8017b60:	f7ff ffa0 	bl	8017aa4 <_ZN8touchgfx3HAL3lcdEv>
 8017b64:	6803      	ldr	r3, [r0, #0]
 8017b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b68:	4798      	blx	r3
 8017b6a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8017b6e:	9007      	str	r0, [sp, #28]
 8017b70:	4631      	mov	r1, r6
 8017b72:	6822      	ldr	r2, [r4, #0]
 8017b74:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017b78:	4b0c      	ldr	r3, [pc, #48]	; (8017bac <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8017b7a:	4620      	mov	r0, r4
 8017b7c:	881b      	ldrh	r3, [r3, #0]
 8017b7e:	9306      	str	r3, [sp, #24]
 8017b80:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8017b84:	9305      	str	r3, [sp, #20]
 8017b86:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017b8a:	9304      	str	r3, [sp, #16]
 8017b8c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017b90:	9303      	str	r3, [sp, #12]
 8017b92:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8017b96:	9302      	str	r3, [sp, #8]
 8017b98:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017b9c:	e9cd 5300 	strd	r5, r3, [sp]
 8017ba0:	463b      	mov	r3, r7
 8017ba2:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8017ba4:	2200      	movs	r2, #0
 8017ba6:	47a8      	blx	r5
 8017ba8:	b00b      	add	sp, #44	; 0x2c
 8017baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017bac:	2002b89a 	.word	0x2002b89a

08017bb0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8017bb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017bb4:	4698      	mov	r8, r3
 8017bb6:	6803      	ldr	r3, [r0, #0]
 8017bb8:	b08b      	sub	sp, #44	; 0x2c
 8017bba:	4617      	mov	r7, r2
 8017bbc:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8017bbe:	460e      	mov	r6, r1
 8017bc0:	4b13      	ldr	r3, [pc, #76]	; (8017c10 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8017bc2:	4604      	mov	r4, r0
 8017bc4:	f8b3 9000 	ldrh.w	r9, [r3]
 8017bc8:	f7ff ff6c 	bl	8017aa4 <_ZN8touchgfx3HAL3lcdEv>
 8017bcc:	6803      	ldr	r3, [r0, #0]
 8017bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bd0:	4798      	blx	r3
 8017bd2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8017bd6:	2200      	movs	r2, #0
 8017bd8:	4631      	mov	r1, r6
 8017bda:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8017bde:	2302      	movs	r3, #2
 8017be0:	4620      	mov	r0, r4
 8017be2:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8017be6:	2301      	movs	r3, #1
 8017be8:	9305      	str	r3, [sp, #20]
 8017bea:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8017bee:	9304      	str	r3, [sp, #16]
 8017bf0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8017bf4:	9303      	str	r3, [sp, #12]
 8017bf6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8017bfa:	9302      	str	r3, [sp, #8]
 8017bfc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017c00:	e9cd 8300 	strd	r8, r3, [sp]
 8017c04:	463b      	mov	r3, r7
 8017c06:	47a8      	blx	r5
 8017c08:	b00b      	add	sp, #44	; 0x2c
 8017c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c0e:	bf00      	nop
 8017c10:	2002b89a 	.word	0x2002b89a

08017c14 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8017c14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017c18:	4698      	mov	r8, r3
 8017c1a:	6803      	ldr	r3, [r0, #0]
 8017c1c:	b087      	sub	sp, #28
 8017c1e:	460e      	mov	r6, r1
 8017c20:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8017c22:	4617      	mov	r7, r2
 8017c24:	4b0f      	ldr	r3, [pc, #60]	; (8017c64 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8017c26:	4604      	mov	r4, r0
 8017c28:	f8b3 9000 	ldrh.w	r9, [r3]
 8017c2c:	f7ff ff3a 	bl	8017aa4 <_ZN8touchgfx3HAL3lcdEv>
 8017c30:	6803      	ldr	r3, [r0, #0]
 8017c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c34:	4798      	blx	r3
 8017c36:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8017c3a:	463a      	mov	r2, r7
 8017c3c:	4631      	mov	r1, r6
 8017c3e:	f8cd 900c 	str.w	r9, [sp, #12]
 8017c42:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8017c46:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8017c4a:	4620      	mov	r0, r4
 8017c4c:	9302      	str	r3, [sp, #8]
 8017c4e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8017c52:	9301      	str	r3, [sp, #4]
 8017c54:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017c58:	9300      	str	r3, [sp, #0]
 8017c5a:	4643      	mov	r3, r8
 8017c5c:	47a8      	blx	r5
 8017c5e:	b007      	add	sp, #28
 8017c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c64:	2002b89a 	.word	0x2002b89a

08017c68 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8017c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c6c:	4604      	mov	r4, r0
 8017c6e:	b08f      	sub	sp, #60	; 0x3c
 8017c70:	4610      	mov	r0, r2
 8017c72:	460d      	mov	r5, r1
 8017c74:	4691      	mov	r9, r2
 8017c76:	461e      	mov	r6, r3
 8017c78:	f005 ff96 	bl	801dba8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017c7c:	2800      	cmp	r0, #0
 8017c7e:	f000 809c 	beq.w	8017dba <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x152>
 8017c82:	6823      	ldr	r3, [r4, #0]
 8017c84:	4620      	mov	r0, r4
 8017c86:	f8df b194 	ldr.w	fp, [pc, #404]	; 8017e1c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>
 8017c8a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8017c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c90:	4798      	blx	r3
 8017c92:	6823      	ldr	r3, [r4, #0]
 8017c94:	4620      	mov	r0, r4
 8017c96:	f8df a188 	ldr.w	sl, [pc, #392]	; 8017e20 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8017c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c9c:	4798      	blx	r3
 8017c9e:	f8bb 3000 	ldrh.w	r3, [fp]
 8017ca2:	4f5b      	ldr	r7, [pc, #364]	; (8017e10 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8017ca4:	9301      	str	r3, [sp, #4]
 8017ca6:	f8ba 3000 	ldrh.w	r3, [sl]
 8017caa:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8017cae:	4640      	mov	r0, r8
 8017cb0:	9302      	str	r3, [sp, #8]
 8017cb2:	883b      	ldrh	r3, [r7, #0]
 8017cb4:	9303      	str	r3, [sp, #12]
 8017cb6:	4b57      	ldr	r3, [pc, #348]	; (8017e14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017cb8:	881a      	ldrh	r2, [r3, #0]
 8017cba:	9305      	str	r3, [sp, #20]
 8017cbc:	9204      	str	r2, [sp, #16]
 8017cbe:	f006 f82d 	bl	801dd1c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017cc2:	8038      	strh	r0, [r7, #0]
 8017cc4:	4640      	mov	r0, r8
 8017cc6:	f006 f863 	bl	801dd90 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017cca:	9b05      	ldr	r3, [sp, #20]
 8017ccc:	8018      	strh	r0, [r3, #0]
 8017cce:	4b52      	ldr	r3, [pc, #328]	; (8017e18 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8017cd0:	781b      	ldrb	r3, [r3, #0]
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d174      	bne.n	8017dc0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8017cd6:	883b      	ldrh	r3, [r7, #0]
 8017cd8:	f8aa 0000 	strh.w	r0, [sl]
 8017cdc:	f8ab 3000 	strh.w	r3, [fp]
 8017ce0:	4648      	mov	r0, r9
 8017ce2:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8017ce6:	f005 ff5f 	bl	801dba8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8017cea:	2200      	movs	r2, #0
 8017cec:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8017cf0:	4611      	mov	r1, r2
 8017cf2:	4628      	mov	r0, r5
 8017cf4:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8017cf8:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8017cfc:	f7eb fe51 	bl	80039a2 <_ZN8touchgfx8Drawable5setXYEss>
 8017d00:	2301      	movs	r3, #1
 8017d02:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8017d06:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8017d0a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	dd5c      	ble.n	8017dcc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8017d12:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	dd58      	ble.n	8017dcc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x164>
 8017d1a:	462a      	mov	r2, r5
 8017d1c:	ab0a      	add	r3, sp, #40	; 0x28
 8017d1e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017d22:	6851      	ldr	r1, [r2, #4]
 8017d24:	c303      	stmia	r3!, {r0, r1}
 8017d26:	4631      	mov	r1, r6
 8017d28:	a80a      	add	r0, sp, #40	; 0x28
 8017d2a:	f7ff fbdd 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 8017d2e:	4b38      	ldr	r3, [pc, #224]	; (8017e10 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8017d30:	2100      	movs	r1, #0
 8017d32:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017d36:	4b37      	ldr	r3, [pc, #220]	; (8017e14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017d38:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8017d3c:	aa0a      	add	r2, sp, #40	; 0x28
 8017d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017d42:	910c      	str	r1, [sp, #48]	; 0x30
 8017d44:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017d48:	ab08      	add	r3, sp, #32
 8017d4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017d4e:	e883 0003 	stmia.w	r3, {r0, r1}
 8017d52:	4618      	mov	r0, r3
 8017d54:	a90c      	add	r1, sp, #48	; 0x30
 8017d56:	f7ff fbc7 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 8017d5a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d13c      	bne.n	8017dda <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x172>
 8017d60:	2000      	movs	r0, #0
 8017d62:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8017d66:	2600      	movs	r6, #0
 8017d68:	696b      	ldr	r3, [r5, #20]
 8017d6a:	a908      	add	r1, sp, #32
 8017d6c:	682a      	ldr	r2, [r5, #0]
 8017d6e:	4628      	mov	r0, r5
 8017d70:	9305      	str	r3, [sp, #20]
 8017d72:	616e      	str	r6, [r5, #20]
 8017d74:	6892      	ldr	r2, [r2, #8]
 8017d76:	4790      	blx	r2
 8017d78:	9b05      	ldr	r3, [sp, #20]
 8017d7a:	4652      	mov	r2, sl
 8017d7c:	4649      	mov	r1, r9
 8017d7e:	616b      	str	r3, [r5, #20]
 8017d80:	4628      	mov	r0, r5
 8017d82:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8017d86:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8017d8a:	f7eb fe0a 	bl	80039a2 <_ZN8touchgfx8Drawable5setXYEss>
 8017d8e:	9a01      	ldr	r2, [sp, #4]
 8017d90:	4b22      	ldr	r3, [pc, #136]	; (8017e1c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8017d92:	4620      	mov	r0, r4
 8017d94:	801a      	strh	r2, [r3, #0]
 8017d96:	9a02      	ldr	r2, [sp, #8]
 8017d98:	4b21      	ldr	r3, [pc, #132]	; (8017e20 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8017d9a:	801a      	strh	r2, [r3, #0]
 8017d9c:	9a03      	ldr	r2, [sp, #12]
 8017d9e:	4b1c      	ldr	r3, [pc, #112]	; (8017e10 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1a8>)
 8017da0:	801a      	strh	r2, [r3, #0]
 8017da2:	4b1c      	ldr	r3, [pc, #112]	; (8017e14 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8017da4:	9a04      	ldr	r2, [sp, #16]
 8017da6:	801a      	strh	r2, [r3, #0]
 8017da8:	6823      	ldr	r3, [r4, #0]
 8017daa:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8017dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017db0:	4798      	blx	r3
 8017db2:	6823      	ldr	r3, [r4, #0]
 8017db4:	4620      	mov	r0, r4
 8017db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017db8:	4798      	blx	r3
 8017dba:	b00f      	add	sp, #60	; 0x3c
 8017dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dc0:	883b      	ldrh	r3, [r7, #0]
 8017dc2:	f8ab 0000 	strh.w	r0, [fp]
 8017dc6:	f8aa 3000 	strh.w	r3, [sl]
 8017dca:	e789      	b.n	8017ce0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x78>
 8017dcc:	462a      	mov	r2, r5
 8017dce:	ab0a      	add	r3, sp, #40	; 0x28
 8017dd0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8017dd4:	6851      	ldr	r1, [r2, #4]
 8017dd6:	c303      	stmia	r3!, {r0, r1}
 8017dd8:	e7a9      	b.n	8017d2e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc6>
 8017dda:	a807      	add	r0, sp, #28
 8017ddc:	f006 f930 	bl	801e040 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017de0:	4606      	mov	r6, r0
 8017de2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8017de4:	6803      	ldr	r3, [r0, #0]
 8017de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017de8:	4798      	blx	r3
 8017dea:	4286      	cmp	r6, r0
 8017dec:	d1b8      	bne.n	8017d60 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xf8>
 8017dee:	f7ff fe59 	bl	8017aa4 <_ZN8touchgfx3HAL3lcdEv>
 8017df2:	6803      	ldr	r3, [r0, #0]
 8017df4:	4606      	mov	r6, r0
 8017df6:	a807      	add	r0, sp, #28
 8017df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dfa:	9305      	str	r3, [sp, #20]
 8017dfc:	f006 f920 	bl	801e040 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017e00:	9b05      	ldr	r3, [sp, #20]
 8017e02:	4601      	mov	r1, r0
 8017e04:	4630      	mov	r0, r6
 8017e06:	4798      	blx	r3
 8017e08:	f080 0001 	eor.w	r0, r0, #1
 8017e0c:	b2c0      	uxtb	r0, r0
 8017e0e:	e7a8      	b.n	8017d62 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8017e10:	2002b894 	.word	0x2002b894
 8017e14:	2002b896 	.word	0x2002b896
 8017e18:	2002b898 	.word	0x2002b898
 8017e1c:	2002b89a 	.word	0x2002b89a
 8017e20:	2002b89c 	.word	0x2002b89c

08017e24 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8017e24:	4b07      	ldr	r3, [pc, #28]	; (8017e44 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8017e26:	b510      	push	{r4, lr}
 8017e28:	781b      	ldrb	r3, [r3, #0]
 8017e2a:	4604      	mov	r4, r0
 8017e2c:	b13b      	cbz	r3, 8017e3e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017e2e:	6803      	ldr	r3, [r0, #0]
 8017e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e32:	4798      	blx	r3
 8017e34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017e36:	4283      	cmp	r3, r0
 8017e38:	d101      	bne.n	8017e3e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8017e3a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8017e3c:	bd10      	pop	{r4, pc}
 8017e3e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8017e40:	e7fc      	b.n	8017e3c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8017e42:	bf00      	nop
 8017e44:	2002b89e 	.word	0x2002b89e

08017e48 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8017e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e4c:	b088      	sub	sp, #32
 8017e4e:	4692      	mov	sl, r2
 8017e50:	461d      	mov	r5, r3
 8017e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017e56:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 8017e5a:	2400      	movs	r4, #0
 8017e5c:	f8bd 8040 	ldrh.w	r8, [sp, #64]	; 0x40
 8017e60:	4606      	mov	r6, r0
 8017e62:	f8bd 7044 	ldrh.w	r7, [sp, #68]	; 0x44
 8017e66:	fb09 a505 	mla	r5, r9, r5, sl
 8017e6a:	9403      	str	r4, [sp, #12]
 8017e6c:	f8ad 8014 	strh.w	r8, [sp, #20]
 8017e70:	f8ad 7016 	strh.w	r7, [sp, #22]
 8017e74:	f88d 401c 	strb.w	r4, [sp, #28]
 8017e78:	e9cd 3100 	strd	r3, r1, [sp]
 8017e7c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8017e80:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017e84:	f7ff ffce 	bl	8017e24 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017e88:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8017e8c:	f8ad 901a 	strh.w	r9, [sp, #26]
 8017e90:	f88d 401e 	strb.w	r4, [sp, #30]
 8017e94:	9504      	str	r5, [sp, #16]
 8017e96:	f88d 401d 	strb.w	r4, [sp, #29]
 8017e9a:	f88d 401f 	strb.w	r4, [sp, #31]
 8017e9e:	f1b8 0f00 	cmp.w	r8, #0
 8017ea2:	d000      	beq.n	8017ea6 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x5e>
 8017ea4:	b937      	cbnz	r7, 8017eb4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x6c>
 8017ea6:	4b0d      	ldr	r3, [pc, #52]	; (8017edc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x94>)
 8017ea8:	f240 210b 	movw	r1, #523	; 0x20b
 8017eac:	4a0c      	ldr	r2, [pc, #48]	; (8017ee0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8017eae:	480d      	ldr	r0, [pc, #52]	; (8017ee4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x9c>)
 8017eb0:	f011 ffce 	bl	8029e50 <__assert_func>
 8017eb4:	6833      	ldr	r3, [r6, #0]
 8017eb6:	4630      	mov	r0, r6
 8017eb8:	9c00      	ldr	r4, [sp, #0]
 8017eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ebc:	4798      	blx	r3
 8017ebe:	4220      	tst	r0, r4
 8017ec0:	d104      	bne.n	8017ecc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x84>
 8017ec2:	4b09      	ldr	r3, [pc, #36]	; (8017ee8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0xa0>)
 8017ec4:	f44f 7103 	mov.w	r1, #524	; 0x20c
 8017ec8:	4a05      	ldr	r2, [pc, #20]	; (8017ee0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x98>)
 8017eca:	e7f0      	b.n	8017eae <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt+0x66>
 8017ecc:	6870      	ldr	r0, [r6, #4]
 8017ece:	4669      	mov	r1, sp
 8017ed0:	6803      	ldr	r3, [r0, #0]
 8017ed2:	685b      	ldr	r3, [r3, #4]
 8017ed4:	4798      	blx	r3
 8017ed6:	b008      	add	sp, #32
 8017ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017edc:	0802fdc3 	.word	0x0802fdc3
 8017ee0:	08030023 	.word	0x08030023
 8017ee4:	0802ff75 	.word	0x0802ff75
 8017ee8:	0802fdfb 	.word	0x0802fdfb

08017eec <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8017eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ef0:	b089      	sub	sp, #36	; 0x24
 8017ef2:	4693      	mov	fp, r2
 8017ef4:	461d      	mov	r5, r3
 8017ef6:	2400      	movs	r4, #0
 8017ef8:	f8bd 9050 	ldrh.w	r9, [sp, #80]	; 0x50
 8017efc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017f00:	468a      	mov	sl, r1
 8017f02:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
 8017f06:	fb09 b505 	mla	r5, r9, r5, fp
 8017f0a:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 8017f0e:	4606      	mov	r6, r0
 8017f10:	9403      	str	r4, [sp, #12]
 8017f12:	e9cd 3400 	strd	r3, r4, [sp]
 8017f16:	f7ff ff85 	bl	8017e24 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8017f1a:	f8ad 8014 	strh.w	r8, [sp, #20]
 8017f1e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8017f22:	f8ad 7016 	strh.w	r7, [sp, #22]
 8017f26:	f8ad 4018 	strh.w	r4, [sp, #24]
 8017f2a:	9504      	str	r5, [sp, #16]
 8017f2c:	f8ad 901a 	strh.w	r9, [sp, #26]
 8017f30:	f8cd a00c 	str.w	sl, [sp, #12]
 8017f34:	f8ad 401c 	strh.w	r4, [sp, #28]
 8017f38:	f88d 401e 	strb.w	r4, [sp, #30]
 8017f3c:	f88d 401f 	strb.w	r4, [sp, #31]
 8017f40:	f1b8 0f00 	cmp.w	r8, #0
 8017f44:	d000      	beq.n	8017f48 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x5c>
 8017f46:	b937      	cbnz	r7, 8017f56 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x6a>
 8017f48:	4b0d      	ldr	r3, [pc, #52]	; (8017f80 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x94>)
 8017f4a:	f240 2121 	movw	r1, #545	; 0x221
 8017f4e:	4a0d      	ldr	r2, [pc, #52]	; (8017f84 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8017f50:	480d      	ldr	r0, [pc, #52]	; (8017f88 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x9c>)
 8017f52:	f011 ff7d 	bl	8029e50 <__assert_func>
 8017f56:	6833      	ldr	r3, [r6, #0]
 8017f58:	4630      	mov	r0, r6
 8017f5a:	9c00      	ldr	r4, [sp, #0]
 8017f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017f5e:	4798      	blx	r3
 8017f60:	4220      	tst	r0, r4
 8017f62:	d104      	bne.n	8017f6e <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x82>
 8017f64:	4b09      	ldr	r3, [pc, #36]	; (8017f8c <_ZN8touchgfx3HAL12blitFillWordEtttttt+0xa0>)
 8017f66:	f240 2122 	movw	r1, #546	; 0x222
 8017f6a:	4a06      	ldr	r2, [pc, #24]	; (8017f84 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x98>)
 8017f6c:	e7f0      	b.n	8017f50 <_ZN8touchgfx3HAL12blitFillWordEtttttt+0x64>
 8017f6e:	6870      	ldr	r0, [r6, #4]
 8017f70:	4669      	mov	r1, sp
 8017f72:	6803      	ldr	r3, [r0, #0]
 8017f74:	685b      	ldr	r3, [r3, #4]
 8017f76:	4798      	blx	r3
 8017f78:	b009      	add	sp, #36	; 0x24
 8017f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f7e:	bf00      	nop
 8017f80:	0802fe40 	.word	0x0802fe40
 8017f84:	08030099 	.word	0x08030099
 8017f88:	0802ff75 	.word	0x0802ff75
 8017f8c:	0802fe78 	.word	0x0802fe78

08017f90 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8017f90:	b508      	push	{r3, lr}
 8017f92:	290d      	cmp	r1, #13
 8017f94:	d817      	bhi.n	8017fc6 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x36>
 8017f96:	e8df f001 	tbb	[pc, r1]
 8017f9a:	090b      	.short	0x090b
 8017f9c:	0d0d0d07 	.word	0x0d0d0d07
 8017fa0:	1414140d 	.word	0x1414140d
 8017fa4:	0d0d1414 	.word	0x0d0d1414
 8017fa8:	2020      	movs	r0, #32
 8017faa:	bd08      	pop	{r3, pc}
 8017fac:	2018      	movs	r0, #24
 8017fae:	e7fc      	b.n	8017faa <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017fb0:	2010      	movs	r0, #16
 8017fb2:	e7fa      	b.n	8017faa <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017fb4:	4b05      	ldr	r3, [pc, #20]	; (8017fcc <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 8017fb6:	f240 2182 	movw	r1, #642	; 0x282
 8017fba:	4a05      	ldr	r2, [pc, #20]	; (8017fd0 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8017fbc:	4805      	ldr	r0, [pc, #20]	; (8017fd4 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x44>)
 8017fbe:	f011 ff47 	bl	8029e50 <__assert_func>
 8017fc2:	2008      	movs	r0, #8
 8017fc4:	e7f1      	b.n	8017faa <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017fc6:	2000      	movs	r0, #0
 8017fc8:	e7ef      	b.n	8017faa <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x1a>
 8017fca:	bf00      	nop
 8017fcc:	0802fff1 	.word	0x0802fff1
 8017fd0:	080303c4 	.word	0x080303c4
 8017fd4:	0802ff75 	.word	0x0802ff75

08017fd8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 8017fd8:	b570      	push	{r4, r5, r6, lr}
 8017fda:	460d      	mov	r5, r1
 8017fdc:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8017fe0:	4616      	mov	r6, r2
 8017fe2:	461c      	mov	r4, r3
 8017fe4:	f7ff ffd4 	bl	8017f90 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 8017fe8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8017fec:	10c0      	asrs	r0, r0, #3
 8017fee:	fb06 5101 	mla	r1, r6, r1, r5
 8017ff2:	fb00 4001 	mla	r0, r0, r1, r4
 8017ff6:	bd70      	pop	{r4, r5, r6, pc}

08017ff8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8017ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ffc:	b08a      	sub	sp, #40	; 0x28
 8017ffe:	f04f 0c00 	mov.w	ip, #0
 8018002:	4604      	mov	r4, r0
 8018004:	469a      	mov	sl, r3
 8018006:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 801800a:	f8bd 704c 	ldrh.w	r7, [sp, #76]	; 0x4c
 801800e:	2d0b      	cmp	r5, #11
 8018010:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8018014:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8018018:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 801801c:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8018020:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8018024:	f8cd c014 	str.w	ip, [sp, #20]
 8018028:	d12d      	bne.n	8018086 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x8e>
 801802a:	2080      	movs	r0, #128	; 0x80
 801802c:	9204      	str	r2, [sp, #16]
 801802e:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8018032:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018036:	f8ad 2020 	strh.w	r2, [sp, #32]
 801803a:	f8ad 701c 	strh.w	r7, [sp, #28]
 801803e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8018042:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018046:	4620      	mov	r0, r4
 8018048:	f7ff feec 	bl	8017e24 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801804c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8018050:	4603      	mov	r3, r0
 8018052:	4651      	mov	r1, sl
 8018054:	4620      	mov	r0, r4
 8018056:	e9cd 9800 	strd	r9, r8, [sp]
 801805a:	f7ff ffbd 	bl	8017fd8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 801805e:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8018062:	9006      	str	r0, [sp, #24]
 8018064:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
 8018068:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801806c:	f88d 8026 	strb.w	r8, [sp, #38]	; 0x26
 8018070:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8018074:	b107      	cbz	r7, 8018078 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x80>
 8018076:	b9d6      	cbnz	r6, 80180ae <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb6>
 8018078:	4b17      	ldr	r3, [pc, #92]	; (80180d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe0>)
 801807a:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 801807e:	4a17      	ldr	r2, [pc, #92]	; (80180dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 8018080:	4817      	ldr	r0, [pc, #92]	; (80180e0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe8>)
 8018082:	f011 fee5 	bl	8029e50 <__assert_func>
 8018086:	2d02      	cmp	r5, #2
 8018088:	d108      	bne.n	801809c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa4>
 801808a:	2bff      	cmp	r3, #255	; 0xff
 801808c:	d104      	bne.n	8018098 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xa0>
 801808e:	2800      	cmp	r0, #0
 8018090:	bf14      	ite	ne
 8018092:	2040      	movne	r0, #64	; 0x40
 8018094:	2020      	moveq	r0, #32
 8018096:	e7c9      	b.n	801802c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 8018098:	2040      	movs	r0, #64	; 0x40
 801809a:	e7c7      	b.n	801802c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 801809c:	2bff      	cmp	r3, #255	; 0xff
 801809e:	d104      	bne.n	80180aa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb2>
 80180a0:	2800      	cmp	r0, #0
 80180a2:	bf14      	ite	ne
 80180a4:	2004      	movne	r0, #4
 80180a6:	2001      	moveq	r0, #1
 80180a8:	e7c0      	b.n	801802c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 80180aa:	2004      	movs	r0, #4
 80180ac:	e7be      	b.n	801802c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x34>
 80180ae:	6823      	ldr	r3, [r4, #0]
 80180b0:	4620      	mov	r0, r4
 80180b2:	9d02      	ldr	r5, [sp, #8]
 80180b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80180b6:	4798      	blx	r3
 80180b8:	4228      	tst	r0, r5
 80180ba:	d104      	bne.n	80180c6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xce>
 80180bc:	4b09      	ldr	r3, [pc, #36]	; (80180e4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xec>)
 80180be:	f240 11d5 	movw	r1, #469	; 0x1d5
 80180c2:	4a06      	ldr	r2, [pc, #24]	; (80180dc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xe4>)
 80180c4:	e7dc      	b.n	8018080 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x88>
 80180c6:	6860      	ldr	r0, [r4, #4]
 80180c8:	a902      	add	r1, sp, #8
 80180ca:	6803      	ldr	r3, [r0, #0]
 80180cc:	685b      	ldr	r3, [r3, #4]
 80180ce:	4798      	blx	r3
 80180d0:	b00a      	add	sp, #40	; 0x28
 80180d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180d6:	bf00      	nop
 80180d8:	0802fdc3 	.word	0x0802fdc3
 80180dc:	08030252 	.word	0x08030252
 80180e0:	0802ff75 	.word	0x0802ff75
 80180e4:	0802fdfb 	.word	0x0802fdfb

080180e8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80180e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180ec:	b08b      	sub	sp, #44	; 0x2c
 80180ee:	469b      	mov	fp, r3
 80180f0:	4604      	mov	r4, r0
 80180f2:	4692      	mov	sl, r2
 80180f4:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80180f8:	2600      	movs	r6, #0
 80180fa:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 80180fe:	4689      	mov	r9, r1
 8018100:	2fff      	cmp	r7, #255	; 0xff
 8018102:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8018106:	9605      	str	r6, [sp, #20]
 8018108:	bf14      	ite	ne
 801810a:	2308      	movne	r3, #8
 801810c:	2302      	moveq	r3, #2
 801810e:	e9cd 3602 	strd	r3, r6, [sp, #8]
 8018112:	f7ff fe87 	bl	8017e24 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018116:	465a      	mov	r2, fp
 8018118:	4603      	mov	r3, r0
 801811a:	4651      	mov	r1, sl
 801811c:	4620      	mov	r0, r4
 801811e:	e9cd 8500 	strd	r8, r5, [sp]
 8018122:	f7ff ff59 	bl	8017fd8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8018126:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801812a:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 801812e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018132:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8018136:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 801813a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801813e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8018142:	9d02      	ldr	r5, [sp, #8]
 8018144:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
 8018148:	6823      	ldr	r3, [r4, #0]
 801814a:	9006      	str	r0, [sp, #24]
 801814c:	4620      	mov	r0, r4
 801814e:	f8ad 6020 	strh.w	r6, [sp, #32]
 8018152:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 8018156:	f8cd 9014 	str.w	r9, [sp, #20]
 801815a:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 801815e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018160:	4798      	blx	r3
 8018162:	4228      	tst	r0, r5
 8018164:	d106      	bne.n	8018174 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>
 8018166:	4b07      	ldr	r3, [pc, #28]	; (8018184 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x9c>)
 8018168:	f240 2137 	movw	r1, #567	; 0x237
 801816c:	4a06      	ldr	r2, [pc, #24]	; (8018188 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa0>)
 801816e:	4807      	ldr	r0, [pc, #28]	; (801818c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0xa4>)
 8018170:	f011 fe6e 	bl	8029e50 <__assert_func>
 8018174:	6860      	ldr	r0, [r4, #4]
 8018176:	a902      	add	r1, sp, #8
 8018178:	6803      	ldr	r3, [r0, #0]
 801817a:	685b      	ldr	r3, [r3, #4]
 801817c:	4798      	blx	r3
 801817e:	b00b      	add	sp, #44	; 0x2c
 8018180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018184:	0802fdfb 	.word	0x0802fdfb
 8018188:	08030329 	.word	0x08030329
 801818c:	0802ff75 	.word	0x0802ff75

08018190 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8018190:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018194:	461f      	mov	r7, r3
 8018196:	4b0b      	ldr	r3, [pc, #44]	; (80181c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8018198:	460d      	mov	r5, r1
 801819a:	4616      	mov	r6, r2
 801819c:	f8b3 8000 	ldrh.w	r8, [r3]
 80181a0:	4604      	mov	r4, r0
 80181a2:	f7ff fc7f 	bl	8017aa4 <_ZN8touchgfx3HAL3lcdEv>
 80181a6:	6803      	ldr	r3, [r0, #0]
 80181a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181aa:	4798      	blx	r3
 80181ac:	463b      	mov	r3, r7
 80181ae:	4632      	mov	r2, r6
 80181b0:	4629      	mov	r1, r5
 80181b2:	e9cd 8000 	strd	r8, r0, [sp]
 80181b6:	4620      	mov	r0, r4
 80181b8:	f7ff ff0e 	bl	8017fd8 <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80181bc:	b002      	add	sp, #8
 80181be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181c2:	bf00      	nop
 80181c4:	2002b89a 	.word	0x2002b89a

080181c8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 80181c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181cc:	4698      	mov	r8, r3
 80181ce:	b088      	sub	sp, #32
 80181d0:	2300      	movs	r3, #0
 80181d2:	4617      	mov	r7, r2
 80181d4:	4604      	mov	r4, r0
 80181d6:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 80181da:	9303      	str	r3, [sp, #12]
 80181dc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80181e0:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 80181e4:	f8ad 6014 	strh.w	r6, [sp, #20]
 80181e8:	f8ad 5016 	strh.w	r5, [sp, #22]
 80181ec:	e9cd 3100 	strd	r3, r1, [sp]
 80181f0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80181f4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80181f8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 80181fc:	f88d 301c 	strb.w	r3, [sp, #28]
 8018200:	f7ff fe10 	bl	8017e24 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018204:	4642      	mov	r2, r8
 8018206:	4603      	mov	r3, r0
 8018208:	4639      	mov	r1, r7
 801820a:	4620      	mov	r0, r4
 801820c:	f7ff ffc0 	bl	8018190 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018210:	4b18      	ldr	r3, [pc, #96]	; (8018274 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xac>)
 8018212:	9004      	str	r0, [sp, #16]
 8018214:	881b      	ldrh	r3, [r3, #0]
 8018216:	f8ad 301a 	strh.w	r3, [sp, #26]
 801821a:	f7ff fc43 	bl	8017aa4 <_ZN8touchgfx3HAL3lcdEv>
 801821e:	6803      	ldr	r3, [r0, #0]
 8018220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018222:	4798      	blx	r3
 8018224:	f88d 001e 	strb.w	r0, [sp, #30]
 8018228:	f88d 001d 	strb.w	r0, [sp, #29]
 801822c:	b106      	cbz	r6, 8018230 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x68>
 801822e:	b935      	cbnz	r5, 801823e <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x76>
 8018230:	4b11      	ldr	r3, [pc, #68]	; (8018278 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb0>)
 8018232:	f240 11f1 	movw	r1, #497	; 0x1f1
 8018236:	4a11      	ldr	r2, [pc, #68]	; (801827c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8018238:	4811      	ldr	r0, [pc, #68]	; (8018280 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb8>)
 801823a:	f011 fe09 	bl	8029e50 <__assert_func>
 801823e:	6823      	ldr	r3, [r4, #0]
 8018240:	4620      	mov	r0, r4
 8018242:	9d00      	ldr	r5, [sp, #0]
 8018244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018246:	4798      	blx	r3
 8018248:	4228      	tst	r0, r5
 801824a:	d104      	bne.n	8018256 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x8e>
 801824c:	4b0d      	ldr	r3, [pc, #52]	; (8018284 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xbc>)
 801824e:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8018252:	4a0a      	ldr	r2, [pc, #40]	; (801827c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0xb4>)
 8018254:	e7f0      	b.n	8018238 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x70>
 8018256:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018258:	4669      	mov	r1, sp
 801825a:	6860      	ldr	r0, [r4, #4]
 801825c:	9303      	str	r3, [sp, #12]
 801825e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8018262:	f88d 301f 	strb.w	r3, [sp, #31]
 8018266:	6803      	ldr	r3, [r0, #0]
 8018268:	685b      	ldr	r3, [r3, #4]
 801826a:	4798      	blx	r3
 801826c:	b008      	add	sp, #32
 801826e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018272:	bf00      	nop
 8018274:	2002b89a 	.word	0x2002b89a
 8018278:	0802fdc3 	.word	0x0802fdc3
 801827c:	080300fe 	.word	0x080300fe
 8018280:	0802ff75 	.word	0x0802ff75
 8018284:	0802fdfb 	.word	0x0802fdfb

08018288 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8018288:	b5f0      	push	{r4, r5, r6, r7, lr}
 801828a:	b08b      	sub	sp, #44	; 0x2c
 801828c:	4604      	mov	r4, r0
 801828e:	466b      	mov	r3, sp
 8018290:	e883 0006 	stmia.w	r3, {r1, r2}
 8018294:	4b20      	ldr	r3, [pc, #128]	; (8018318 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8018296:	781b      	ldrb	r3, [r3, #0]
 8018298:	b933      	cbnz	r3, 80182a8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x20>
 801829a:	4b20      	ldr	r3, [pc, #128]	; (801831c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 801829c:	f44f 7112 	mov.w	r1, #584	; 0x248
 80182a0:	4a1f      	ldr	r2, [pc, #124]	; (8018320 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 80182a2:	4820      	ldr	r0, [pc, #128]	; (8018324 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 80182a4:	f011 fdd4 	bl	8029e50 <__assert_func>
 80182a8:	2301      	movs	r3, #1
 80182aa:	2500      	movs	r5, #0
 80182ac:	f8bd 6000 	ldrh.w	r6, [sp]
 80182b0:	9302      	str	r3, [sp, #8]
 80182b2:	6803      	ldr	r3, [r0, #0]
 80182b4:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80182b8:	9505      	str	r5, [sp, #20]
 80182ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80182bc:	4798      	blx	r3
 80182be:	463a      	mov	r2, r7
 80182c0:	4631      	mov	r1, r6
 80182c2:	4603      	mov	r3, r0
 80182c4:	4620      	mov	r0, r4
 80182c6:	f7ff ff63 	bl	8018190 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80182ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80182cc:	9003      	str	r0, [sp, #12]
 80182ce:	9306      	str	r3, [sp, #24]
 80182d0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80182d4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80182d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80182dc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80182e0:	4b11      	ldr	r3, [pc, #68]	; (8018328 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0xa0>)
 80182e2:	881b      	ldrh	r3, [r3, #0]
 80182e4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80182e8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80182ec:	f7ff fbda 	bl	8017aa4 <_ZN8touchgfx3HAL3lcdEv>
 80182f0:	6803      	ldr	r3, [r0, #0]
 80182f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182f4:	4798      	blx	r3
 80182f6:	23ff      	movs	r3, #255	; 0xff
 80182f8:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 80182fc:	a902      	add	r1, sp, #8
 80182fe:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8018302:	6860      	ldr	r0, [r4, #4]
 8018304:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018308:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
 801830c:	6803      	ldr	r3, [r0, #0]
 801830e:	685b      	ldr	r3, [r3, #4]
 8018310:	4798      	blx	r3
 8018312:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8018314:	b00b      	add	sp, #44	; 0x2c
 8018316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018318:	2002b89f 	.word	0x2002b89f
 801831c:	0802fec2 	.word	0x0802fec2
 8018320:	080301a8 	.word	0x080301a8
 8018324:	0802ff75 	.word	0x0802ff75
 8018328:	2002b89a 	.word	0x2002b89a

0801832c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801832c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018330:	b08a      	sub	sp, #40	; 0x28
 8018332:	2600      	movs	r6, #0
 8018334:	4604      	mov	r4, r0
 8018336:	466d      	mov	r5, sp
 8018338:	9605      	str	r6, [sp, #20]
 801833a:	e885 0006 	stmia.w	r5, {r1, r2}
 801833e:	461d      	mov	r5, r3
 8018340:	2301      	movs	r3, #1
 8018342:	f8bd 7000 	ldrh.w	r7, [sp]
 8018346:	9302      	str	r3, [sp, #8]
 8018348:	6803      	ldr	r3, [r0, #0]
 801834a:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801834e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018350:	4798      	blx	r3
 8018352:	4642      	mov	r2, r8
 8018354:	4639      	mov	r1, r7
 8018356:	4603      	mov	r3, r0
 8018358:	4620      	mov	r0, r4
 801835a:	f7ff ff19 	bl	8018190 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801835e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018362:	9003      	str	r0, [sp, #12]
 8018364:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018368:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801836c:	9506      	str	r5, [sp, #24]
 801836e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018372:	4b0f      	ldr	r3, [pc, #60]	; (80183b0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x84>)
 8018374:	881b      	ldrh	r3, [r3, #0]
 8018376:	f8ad 3020 	strh.w	r3, [sp, #32]
 801837a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801837c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018380:	f7ff fb90 	bl	8017aa4 <_ZN8touchgfx3HAL3lcdEv>
 8018384:	6803      	ldr	r3, [r0, #0]
 8018386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018388:	4798      	blx	r3
 801838a:	23ff      	movs	r3, #255	; 0xff
 801838c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8018390:	a902      	add	r1, sp, #8
 8018392:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8018396:	6860      	ldr	r0, [r4, #4]
 8018398:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801839c:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
 80183a0:	6803      	ldr	r3, [r0, #0]
 80183a2:	685b      	ldr	r3, [r3, #4]
 80183a4:	4798      	blx	r3
 80183a6:	4628      	mov	r0, r5
 80183a8:	b00a      	add	sp, #40	; 0x28
 80183aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183ae:	bf00      	nop
 80183b0:	2002b89a 	.word	0x2002b89a

080183b4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 80183b4:	b570      	push	{r4, r5, r6, lr}
 80183b6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80183ba:	4604      	mov	r4, r0
 80183bc:	b19b      	cbz	r3, 80183e6 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 80183be:	2002      	movs	r0, #2
 80183c0:	f7e9 fb82 	bl	8001ac8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 80183c4:	2300      	movs	r3, #0
 80183c6:	4620      	mov	r0, r4
 80183c8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80183cc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 80183d0:	6823      	ldr	r3, [r4, #0]
 80183d2:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 80183d6:	f7ff fd25 	bl	8017e24 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80183da:	4601      	mov	r1, r0
 80183dc:	4620      	mov	r0, r4
 80183de:	462b      	mov	r3, r5
 80183e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80183e4:	4718      	bx	r3
 80183e6:	bd70      	pop	{r4, r5, r6, pc}

080183e8 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 80183e8:	b570      	push	{r4, r5, r6, lr}
 80183ea:	4605      	mov	r5, r0
 80183ec:	460c      	mov	r4, r1
 80183ee:	2003      	movs	r0, #3
 80183f0:	b149      	cbz	r1, 8018406 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 80183f2:	f7e9 fb67 	bl	8001ac4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80183f6:	6928      	ldr	r0, [r5, #16]
 80183f8:	b168      	cbz	r0, 8018416 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 80183fa:	6803      	ldr	r3, [r0, #0]
 80183fc:	2101      	movs	r1, #1
 80183fe:	695b      	ldr	r3, [r3, #20]
 8018400:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018404:	4718      	bx	r3
 8018406:	f7e9 fb5e 	bl	8001ac6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801840a:	6928      	ldr	r0, [r5, #16]
 801840c:	b118      	cbz	r0, 8018416 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801840e:	6803      	ldr	r3, [r0, #0]
 8018410:	4621      	mov	r1, r4
 8018412:	695b      	ldr	r3, [r3, #20]
 8018414:	e7f4      	b.n	8018400 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8018416:	bd70      	pop	{r4, r5, r6, pc}

08018418 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8018418:	b538      	push	{r3, r4, r5, lr}
 801841a:	f890 2078 	ldrb.w	r2, [r0, #120]	; 0x78
 801841e:	4604      	mov	r4, r0
 8018420:	460d      	mov	r5, r1
 8018422:	428a      	cmp	r2, r1
 8018424:	d008      	beq.n	8018438 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x20>
 8018426:	2a01      	cmp	r2, #1
 8018428:	6803      	ldr	r3, [r0, #0]
 801842a:	d106      	bne.n	801843a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 801842c:	b929      	cbnz	r1, 801843a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x22>
 801842e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8018432:	4798      	blx	r3
 8018434:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8018438:	bd38      	pop	{r3, r4, r5, pc}
 801843a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 801843e:	4620      	mov	r0, r4
 8018440:	e7f7      	b.n	8018432 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1a>
	...

08018444 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8018444:	4b0d      	ldr	r3, [pc, #52]	; (801847c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8018446:	b510      	push	{r4, lr}
 8018448:	781b      	ldrb	r3, [r3, #0]
 801844a:	4604      	mov	r4, r0
 801844c:	b95b      	cbnz	r3, 8018466 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801844e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8018452:	2b02      	cmp	r3, #2
 8018454:	d007      	beq.n	8018466 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8018456:	6840      	ldr	r0, [r0, #4]
 8018458:	f000 f93a 	bl	80186d0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801845c:	b118      	cbz	r0, 8018466 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801845e:	6862      	ldr	r2, [r4, #4]
 8018460:	7a53      	ldrb	r3, [r2, #9]
 8018462:	2b00      	cmp	r3, #0
 8018464:	d0fc      	beq.n	8018460 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8018466:	f7e9 fc61 	bl	8001d2c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801846a:	4620      	mov	r0, r4
 801846c:	2100      	movs	r1, #0
 801846e:	f7ff ffd3 	bl	8018418 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8018472:	4620      	mov	r0, r4
 8018474:	f7ff fcd6 	bl	8017e24 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018478:	bd10      	pop	{r4, pc}
 801847a:	bf00      	nop
 801847c:	2002b89e 	.word	0x2002b89e

08018480 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8018480:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8018484:	1a13      	subs	r3, r2, r0
 8018486:	4258      	negs	r0, r3
 8018488:	4158      	adcs	r0, r3
 801848a:	4770      	bx	lr

0801848c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801848c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8018490:	1a9b      	subs	r3, r3, r2
 8018492:	2b00      	cmp	r3, #0
 8018494:	bfdc      	itt	le
 8018496:	6882      	ldrle	r2, [r0, #8]
 8018498:	189b      	addle	r3, r3, r2
 801849a:	2b01      	cmp	r3, #1
 801849c:	bfcc      	ite	gt
 801849e:	2000      	movgt	r0, #0
 80184a0:	2001      	movle	r0, #1
 80184a2:	4770      	bx	lr

080184a4 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80184a4:	6902      	ldr	r2, [r0, #16]
 80184a6:	6840      	ldr	r0, [r0, #4]
 80184a8:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 80184ac:	4770      	bx	lr

080184ae <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80184ae:	6803      	ldr	r3, [r0, #0]
 80184b0:	691b      	ldr	r3, [r3, #16]
 80184b2:	4718      	bx	r3

080184b4 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80184b4:	4770      	bx	lr

080184b6 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80184b6:	4770      	bx	lr

080184b8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 80184b8:	4770      	bx	lr
	...

080184bc <_ZN8touchgfx13DMA_Interface7executeEv>:
 80184bc:	2301      	movs	r3, #1
 80184be:	b570      	push	{r4, r5, r6, lr}
 80184c0:	7203      	strb	r3, [r0, #8]
 80184c2:	4604      	mov	r4, r0
 80184c4:	6840      	ldr	r0, [r0, #4]
 80184c6:	6803      	ldr	r3, [r0, #0]
 80184c8:	699b      	ldr	r3, [r3, #24]
 80184ca:	4798      	blx	r3
 80184cc:	6803      	ldr	r3, [r0, #0]
 80184ce:	4605      	mov	r5, r0
 80184d0:	2b40      	cmp	r3, #64	; 0x40
 80184d2:	d039      	beq.n	8018548 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80184d4:	d815      	bhi.n	8018502 <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 80184d6:	2b04      	cmp	r3, #4
 80184d8:	d022      	beq.n	8018520 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 80184da:	d808      	bhi.n	80184ee <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80184dc:	2b01      	cmp	r3, #1
 80184de:	d033      	beq.n	8018548 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80184e0:	2b02      	cmp	r3, #2
 80184e2:	d108      	bne.n	80184f6 <_ZN8touchgfx13DMA_Interface7executeEv+0x3a>
 80184e4:	6823      	ldr	r3, [r4, #0]
 80184e6:	4620      	mov	r0, r4
 80184e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80184ea:	4798      	blx	r3
 80184ec:	e025      	b.n	801853a <_ZN8touchgfx13DMA_Interface7executeEv+0x7e>
 80184ee:	2b08      	cmp	r3, #8
 80184f0:	d01e      	beq.n	8018530 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>
 80184f2:	2b20      	cmp	r3, #32
 80184f4:	d028      	beq.n	8018548 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 80184f6:	4b17      	ldr	r3, [pc, #92]	; (8018554 <_ZN8touchgfx13DMA_Interface7executeEv+0x98>)
 80184f8:	218b      	movs	r1, #139	; 0x8b
 80184fa:	4a17      	ldr	r2, [pc, #92]	; (8018558 <_ZN8touchgfx13DMA_Interface7executeEv+0x9c>)
 80184fc:	4817      	ldr	r0, [pc, #92]	; (801855c <_ZN8touchgfx13DMA_Interface7executeEv+0xa0>)
 80184fe:	f011 fca7 	bl	8029e50 <__assert_func>
 8018502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018506:	d01f      	beq.n	8018548 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 8018508:	d804      	bhi.n	8018514 <_ZN8touchgfx13DMA_Interface7executeEv+0x58>
 801850a:	2b80      	cmp	r3, #128	; 0x80
 801850c:	d01c      	beq.n	8018548 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801850e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018512:	e7ef      	b.n	80184f4 <_ZN8touchgfx13DMA_Interface7executeEv+0x38>
 8018514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018518:	d016      	beq.n	8018548 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>
 801851a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801851e:	e7e0      	b.n	80184e2 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8018520:	6823      	ldr	r3, [r4, #0]
 8018522:	7f01      	ldrb	r1, [r0, #28]
 8018524:	4620      	mov	r0, r4
 8018526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018528:	4798      	blx	r3
 801852a:	6823      	ldr	r3, [r4, #0]
 801852c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801852e:	e006      	b.n	801853e <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8018530:	6823      	ldr	r3, [r4, #0]
 8018532:	7f01      	ldrb	r1, [r0, #28]
 8018534:	4620      	mov	r0, r4
 8018536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018538:	4798      	blx	r3
 801853a:	6823      	ldr	r3, [r4, #0]
 801853c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801853e:	4629      	mov	r1, r5
 8018540:	4620      	mov	r0, r4
 8018542:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018546:	4718      	bx	r3
 8018548:	6823      	ldr	r3, [r4, #0]
 801854a:	4620      	mov	r0, r4
 801854c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801854e:	4798      	blx	r3
 8018550:	e7eb      	b.n	801852a <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8018552:	bf00      	nop
 8018554:	0803040d 	.word	0x0803040d
 8018558:	080304cc 	.word	0x080304cc
 801855c:	08030432 	.word	0x08030432

08018560 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8018560:	b570      	push	{r4, r5, r6, lr}
 8018562:	4604      	mov	r4, r0
 8018564:	460e      	mov	r6, r1
 8018566:	6860      	ldr	r0, [r4, #4]
 8018568:	6803      	ldr	r3, [r0, #0]
 801856a:	685b      	ldr	r3, [r3, #4]
 801856c:	4798      	blx	r3
 801856e:	2800      	cmp	r0, #0
 8018570:	d1f9      	bne.n	8018566 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8018572:	4d0d      	ldr	r5, [pc, #52]	; (80185a8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8018574:	6828      	ldr	r0, [r5, #0]
 8018576:	6803      	ldr	r3, [r0, #0]
 8018578:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801857a:	4798      	blx	r3
 801857c:	f7e9 fbe4 	bl	8001d48 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8018580:	6828      	ldr	r0, [r5, #0]
 8018582:	2101      	movs	r1, #1
 8018584:	f7ff ff48 	bl	8018418 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8018588:	6860      	ldr	r0, [r4, #4]
 801858a:	4631      	mov	r1, r6
 801858c:	6803      	ldr	r3, [r0, #0]
 801858e:	689b      	ldr	r3, [r3, #8]
 8018590:	4798      	blx	r3
 8018592:	6823      	ldr	r3, [r4, #0]
 8018594:	4620      	mov	r0, r4
 8018596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018598:	4798      	blx	r3
 801859a:	6828      	ldr	r0, [r5, #0]
 801859c:	6803      	ldr	r3, [r0, #0]
 801859e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80185a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80185a4:	4718      	bx	r3
 80185a6:	bf00      	nop
 80185a8:	2002b8a0 	.word	0x2002b8a0

080185ac <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 80185ac:	b508      	push	{r3, lr}
 80185ae:	f7e9 fbbd 	bl	8001d2c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80185b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80185b6:	f7e9 bbc1 	b.w	8001d3c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080185ba <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80185ba:	b510      	push	{r4, lr}
 80185bc:	4604      	mov	r4, r0
 80185be:	2114      	movs	r1, #20
 80185c0:	f011 fc18 	bl	8029df4 <_ZdlPvj>
 80185c4:	4620      	mov	r0, r4
 80185c6:	bd10      	pop	{r4, pc}

080185c8 <_ZN8touchgfx13DMA_Interface5startEv>:
 80185c8:	b510      	push	{r4, lr}
 80185ca:	4604      	mov	r4, r0
 80185cc:	6840      	ldr	r0, [r0, #4]
 80185ce:	6803      	ldr	r3, [r0, #0]
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	4798      	blx	r3
 80185d4:	b948      	cbnz	r0, 80185ea <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80185d6:	7a63      	ldrb	r3, [r4, #9]
 80185d8:	b13b      	cbz	r3, 80185ea <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80185da:	7a23      	ldrb	r3, [r4, #8]
 80185dc:	b92b      	cbnz	r3, 80185ea <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80185de:	6823      	ldr	r3, [r4, #0]
 80185e0:	4620      	mov	r0, r4
 80185e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80185e8:	4718      	bx	r3
 80185ea:	bd10      	pop	{r4, pc}

080185ec <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80185ec:	b570      	push	{r4, r5, r6, lr}
 80185ee:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80185f2:	4606      	mov	r6, r0
 80185f4:	1a9b      	subs	r3, r3, r2
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	bfdc      	itt	le
 80185fa:	6880      	ldrle	r0, [r0, #8]
 80185fc:	181b      	addle	r3, r3, r0
 80185fe:	2b01      	cmp	r3, #1
 8018600:	dd13      	ble.n	801862a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x3e>
 8018602:	6874      	ldr	r4, [r6, #4]
 8018604:	460d      	mov	r5, r1
 8018606:	eb04 1442 	add.w	r4, r4, r2, lsl #5
 801860a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801860c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801860e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8018612:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8018616:	68f3      	ldr	r3, [r6, #12]
 8018618:	68b2      	ldr	r2, [r6, #8]
 801861a:	f3bf 8f5b 	dmb	ish
 801861e:	3301      	adds	r3, #1
 8018620:	429a      	cmp	r2, r3
 8018622:	bfd8      	it	le
 8018624:	1a9b      	suble	r3, r3, r2
 8018626:	60f3      	str	r3, [r6, #12]
 8018628:	bd70      	pop	{r4, r5, r6, pc}
 801862a:	4b03      	ldr	r3, [pc, #12]	; (8018638 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x4c>)
 801862c:	2139      	movs	r1, #57	; 0x39
 801862e:	4a03      	ldr	r2, [pc, #12]	; (801863c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 8018630:	4803      	ldr	r0, [pc, #12]	; (8018640 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8018632:	f011 fc0d 	bl	8029e50 <__assert_func>
 8018636:	bf00      	nop
 8018638:	08030458 	.word	0x08030458
 801863c:	080304fc 	.word	0x080304fc
 8018640:	08030432 	.word	0x08030432

08018644 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8018644:	b510      	push	{r4, lr}
 8018646:	6803      	ldr	r3, [r0, #0]
 8018648:	4604      	mov	r4, r0
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	4798      	blx	r3
 801864e:	b128      	cbz	r0, 801865c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8018650:	4b07      	ldr	r3, [pc, #28]	; (8018670 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8018652:	213f      	movs	r1, #63	; 0x3f
 8018654:	4a07      	ldr	r2, [pc, #28]	; (8018674 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8018656:	4808      	ldr	r0, [pc, #32]	; (8018678 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8018658:	f011 fbfa 	bl	8029e50 <__assert_func>
 801865c:	6923      	ldr	r3, [r4, #16]
 801865e:	68a2      	ldr	r2, [r4, #8]
 8018660:	f3bf 8f5b 	dmb	ish
 8018664:	3301      	adds	r3, #1
 8018666:	429a      	cmp	r2, r3
 8018668:	bfd8      	it	le
 801866a:	1a9b      	suble	r3, r3, r2
 801866c:	6123      	str	r3, [r4, #16]
 801866e:	bd10      	pop	{r4, pc}
 8018670:	0803047b 	.word	0x0803047b
 8018674:	0803054a 	.word	0x0803054a
 8018678:	08030432 	.word	0x08030432

0801867c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801867c:	b570      	push	{r4, r5, r6, lr}
 801867e:	4604      	mov	r4, r0
 8018680:	6840      	ldr	r0, [r0, #4]
 8018682:	6803      	ldr	r3, [r0, #0]
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	4798      	blx	r3
 8018688:	4605      	mov	r5, r0
 801868a:	b930      	cbnz	r0, 801869a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801868c:	7a23      	ldrb	r3, [r4, #8]
 801868e:	b123      	cbz	r3, 801869a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8018690:	6860      	ldr	r0, [r4, #4]
 8018692:	6803      	ldr	r3, [r0, #0]
 8018694:	695b      	ldr	r3, [r3, #20]
 8018696:	4798      	blx	r3
 8018698:	7225      	strb	r5, [r4, #8]
 801869a:	6860      	ldr	r0, [r4, #4]
 801869c:	6803      	ldr	r3, [r0, #0]
 801869e:	681b      	ldr	r3, [r3, #0]
 80186a0:	4798      	blx	r3
 80186a2:	b928      	cbnz	r0, 80186b0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80186a4:	6823      	ldr	r3, [r4, #0]
 80186a6:	4620      	mov	r0, r4
 80186a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80186ae:	4718      	bx	r3
 80186b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80186b4:	f7e9 bb50 	b.w	8001d58 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

080186b8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80186b8:	b510      	push	{r4, lr}
 80186ba:	6082      	str	r2, [r0, #8]
 80186bc:	2200      	movs	r2, #0
 80186be:	4c03      	ldr	r4, [pc, #12]	; (80186cc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80186c0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80186c4:	e9c0 4100 	strd	r4, r1, [r0]
 80186c8:	bd10      	pop	{r4, pc}
 80186ca:	bf00      	nop
 80186cc:	080304b0 	.word	0x080304b0

080186d0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80186d0:	6840      	ldr	r0, [r0, #4]
 80186d2:	6803      	ldr	r3, [r0, #0]
 80186d4:	681b      	ldr	r3, [r3, #0]
 80186d6:	4718      	bx	r3

080186d8 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 80186d8:	2200      	movs	r2, #0
 80186da:	8002      	strh	r2, [r0, #0]
 80186dc:	8042      	strh	r2, [r0, #2]
 80186de:	8082      	strh	r2, [r0, #4]
 80186e0:	80c2      	strh	r2, [r0, #6]
 80186e2:	4770      	bx	lr

080186e4 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 80186e4:	b570      	push	{r4, r5, r6, lr}
 80186e6:	6803      	ldr	r3, [r0, #0]
 80186e8:	4604      	mov	r4, r0
 80186ea:	4615      	mov	r5, r2
 80186ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186ee:	4798      	blx	r3
 80186f0:	6823      	ldr	r3, [r4, #0]
 80186f2:	4629      	mov	r1, r5
 80186f4:	4620      	mov	r0, r4
 80186f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80186f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80186fc:	4718      	bx	r3

080186fe <_ZN8touchgfx8TextAreaD1Ev>:
 80186fe:	4770      	bx	lr

08018700 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8018700:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018702:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018706:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018708:	4299      	cmp	r1, r3
 801870a:	d029      	beq.n	8018760 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x60>
 801870c:	4b15      	ldr	r3, [pc, #84]	; (8018764 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	b92b      	cbnz	r3, 801871e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x1e>
 8018712:	4b15      	ldr	r3, [pc, #84]	; (8018768 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8018714:	21ae      	movs	r1, #174	; 0xae
 8018716:	4a15      	ldr	r2, [pc, #84]	; (801876c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8018718:	4815      	ldr	r0, [pc, #84]	; (8018770 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801871a:	f011 fb99 	bl	8029e50 <__assert_func>
 801871e:	4a15      	ldr	r2, [pc, #84]	; (8018774 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x74>)
 8018720:	8812      	ldrh	r2, [r2, #0]
 8018722:	428a      	cmp	r2, r1
 8018724:	d803      	bhi.n	801872e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x2e>
 8018726:	4b14      	ldr	r3, [pc, #80]	; (8018778 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x78>)
 8018728:	21af      	movs	r1, #175	; 0xaf
 801872a:	4a10      	ldr	r2, [pc, #64]	; (801876c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801872c:	e7f4      	b.n	8018718 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x18>
 801872e:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8018732:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8018736:	4b11      	ldr	r3, [pc, #68]	; (801877c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x7c>)
 8018738:	7854      	ldrb	r4, [r2, #1]
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	f3c4 0481 	ubfx	r4, r4, #2, #2
 8018740:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8018744:	682b      	ldr	r3, [r5, #0]
 8018746:	69de      	ldr	r6, [r3, #28]
 8018748:	4b0d      	ldr	r3, [pc, #52]	; (8018780 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x80>)
 801874a:	6818      	ldr	r0, [r3, #0]
 801874c:	f7eb f89c 	bl	8003888 <_ZNK8touchgfx5Texts7getTextEt>
 8018750:	2300      	movs	r3, #0
 8018752:	4602      	mov	r2, r0
 8018754:	4621      	mov	r1, r4
 8018756:	9300      	str	r3, [sp, #0]
 8018758:	4628      	mov	r0, r5
 801875a:	47b0      	blx	r6
 801875c:	b002      	add	sp, #8
 801875e:	bd70      	pop	{r4, r5, r6, pc}
 8018760:	2000      	movs	r0, #0
 8018762:	e7fb      	b.n	801875c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5c>
 8018764:	2002b8f0 	.word	0x2002b8f0
 8018768:	0802d58c 	.word	0x0802d58c
 801876c:	080305f4 	.word	0x080305f4
 8018770:	0802d61a 	.word	0x0802d61a
 8018774:	2002b8f4 	.word	0x2002b8f4
 8018778:	0802d643 	.word	0x0802d643
 801877c:	2002b8f8 	.word	0x2002b8f8
 8018780:	2002b8fc 	.word	0x2002b8fc

08018784 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8018784:	b570      	push	{r4, r5, r6, lr}
 8018786:	6803      	ldr	r3, [r0, #0]
 8018788:	4604      	mov	r4, r0
 801878a:	b28d      	uxth	r5, r1
 801878c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801878e:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8018790:	4b10      	ldr	r3, [pc, #64]	; (80187d4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	b92b      	cbnz	r3, 80187a2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1e>
 8018796:	4b10      	ldr	r3, [pc, #64]	; (80187d8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8018798:	21ae      	movs	r1, #174	; 0xae
 801879a:	4a10      	ldr	r2, [pc, #64]	; (80187dc <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 801879c:	4810      	ldr	r0, [pc, #64]	; (80187e0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 801879e:	f011 fb57 	bl	8029e50 <__assert_func>
 80187a2:	4910      	ldr	r1, [pc, #64]	; (80187e4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80187a4:	8809      	ldrh	r1, [r1, #0]
 80187a6:	4291      	cmp	r1, r2
 80187a8:	d803      	bhi.n	80187b2 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80187aa:	4b0f      	ldr	r3, [pc, #60]	; (80187e8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 80187ac:	21af      	movs	r1, #175	; 0xaf
 80187ae:	4a0b      	ldr	r2, [pc, #44]	; (80187dc <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80187b0:	e7f4      	b.n	801879c <_ZN8touchgfx8TextArea12setBaselineYEs+0x18>
 80187b2:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80187b6:	4b0d      	ldr	r3, [pc, #52]	; (80187ec <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80187be:	6803      	ldr	r3, [r0, #0]
 80187c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187c2:	4798      	blx	r3
 80187c4:	1a29      	subs	r1, r5, r0
 80187c6:	4633      	mov	r3, r6
 80187c8:	4620      	mov	r0, r4
 80187ca:	b209      	sxth	r1, r1
 80187cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80187d0:	4718      	bx	r3
 80187d2:	bf00      	nop
 80187d4:	2002b8f0 	.word	0x2002b8f0
 80187d8:	0802d58c 	.word	0x0802d58c
 80187dc:	080305f4 	.word	0x080305f4
 80187e0:	0802d61a 	.word	0x0802d61a
 80187e4:	2002b8f4 	.word	0x2002b8f4
 80187e8:	0802d643 	.word	0x0802d643
 80187ec:	2002b8f8 	.word	0x2002b8f8

080187f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80187f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80187f8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80187fa:	b08c      	sub	sp, #48	; 0x30
 80187fc:	4604      	mov	r4, r0
 80187fe:	4293      	cmp	r3, r2
 8018800:	4688      	mov	r8, r1
 8018802:	d05f      	beq.n	80188c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 8018804:	4e31      	ldr	r6, [pc, #196]	; (80188cc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xdc>)
 8018806:	6832      	ldr	r2, [r6, #0]
 8018808:	b92a      	cbnz	r2, 8018816 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x26>
 801880a:	4b31      	ldr	r3, [pc, #196]	; (80188d0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe0>)
 801880c:	21ae      	movs	r1, #174	; 0xae
 801880e:	4a31      	ldr	r2, [pc, #196]	; (80188d4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8018810:	4831      	ldr	r0, [pc, #196]	; (80188d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe8>)
 8018812:	f011 fb1d 	bl	8029e50 <__assert_func>
 8018816:	4d31      	ldr	r5, [pc, #196]	; (80188dc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xec>)
 8018818:	8829      	ldrh	r1, [r5, #0]
 801881a:	4299      	cmp	r1, r3
 801881c:	d803      	bhi.n	8018826 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x36>
 801881e:	4b30      	ldr	r3, [pc, #192]	; (80188e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf0>)
 8018820:	21af      	movs	r1, #175	; 0xaf
 8018822:	4a2c      	ldr	r2, [pc, #176]	; (80188d4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xe4>)
 8018824:	e7f4      	b.n	8018810 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x20>
 8018826:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801882a:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801882e:	4b2d      	ldr	r3, [pc, #180]	; (80188e4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf4>)
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8018836:	2a00      	cmp	r2, #0
 8018838:	d044      	beq.n	80188c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd4>
 801883a:	784b      	ldrb	r3, [r1, #1]
 801883c:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8018840:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8018844:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018848:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 801884c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8018850:	4b25      	ldr	r3, [pc, #148]	; (80188e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xf8>)
 8018852:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8018856:	681b      	ldr	r3, [r3, #0]
 8018858:	f890 7037 	ldrb.w	r7, [r0, #55]	; 0x37
 801885c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8018860:	9207      	str	r2, [sp, #28]
 8018862:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8018864:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018868:	f88d a020 	strb.w	sl, [sp, #32]
 801886c:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8018870:	9009      	str	r0, [sp, #36]	; 0x24
 8018872:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8018876:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 801887a:	f88d 702b 	strb.w	r7, [sp, #43]	; 0x2b
 801887e:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8018882:	b10a      	cbz	r2, 8018888 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x98>
 8018884:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 8018886:	b907      	cbnz	r7, 801888a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x9a>
 8018888:	689f      	ldr	r7, [r3, #8]
 801888a:	f10d 0914 	add.w	r9, sp, #20
 801888e:	4621      	mov	r1, r4
 8018890:	4648      	mov	r0, r9
 8018892:	f003 fa89 	bl	801bda8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018896:	6833      	ldr	r3, [r6, #0]
 8018898:	2b00      	cmp	r3, #0
 801889a:	d0b6      	beq.n	801880a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x1a>
 801889c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801889e:	882b      	ldrh	r3, [r5, #0]
 80188a0:	428b      	cmp	r3, r1
 80188a2:	d9bc      	bls.n	801881e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x2e>
 80188a4:	4b11      	ldr	r3, [pc, #68]	; (80188ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xfc>)
 80188a6:	6818      	ldr	r0, [r3, #0]
 80188a8:	f7ea ffee 	bl	8003888 <_ZNK8touchgfx5Texts7getTextEt>
 80188ac:	2300      	movs	r3, #0
 80188ae:	9001      	str	r0, [sp, #4]
 80188b0:	4638      	mov	r0, r7
 80188b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80188b6:	ab07      	add	r3, sp, #28
 80188b8:	9300      	str	r3, [sp, #0]
 80188ba:	4643      	mov	r3, r8
 80188bc:	e899 0006 	ldmia.w	r9, {r1, r2}
 80188c0:	f7ea ff94 	bl	80037ec <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80188c4:	b00c      	add	sp, #48	; 0x30
 80188c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188ca:	bf00      	nop
 80188cc:	2002b8f0 	.word	0x2002b8f0
 80188d0:	0802d58c 	.word	0x0802d58c
 80188d4:	080305f4 	.word	0x080305f4
 80188d8:	0802d61a 	.word	0x0802d61a
 80188dc:	2002b8f4 	.word	0x2002b8f4
 80188e0:	0802d643 	.word	0x0802d643
 80188e4:	2002b8f8 	.word	0x2002b8f8
 80188e8:	2002b8a0 	.word	0x2002b8a0
 80188ec:	2002b8fc 	.word	0x2002b8fc

080188f0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 80188f0:	b40e      	push	{r1, r2, r3}
 80188f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80188f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188fa:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 80188fc:	b09c      	sub	sp, #112	; 0x70
 80188fe:	4604      	mov	r4, r0
 8018900:	4293      	cmp	r3, r2
 8018902:	d06b      	beq.n	80189dc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xec>
 8018904:	aa26      	add	r2, sp, #152	; 0x98
 8018906:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 80189f0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x100>
 801890a:	9202      	str	r2, [sp, #8]
 801890c:	f8da 2000 	ldr.w	r2, [sl]
 8018910:	b92a      	cbnz	r2, 801891e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x2e>
 8018912:	4b33      	ldr	r3, [pc, #204]	; (80189e0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf0>)
 8018914:	21ae      	movs	r1, #174	; 0xae
 8018916:	4a33      	ldr	r2, [pc, #204]	; (80189e4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8018918:	4833      	ldr	r0, [pc, #204]	; (80189e8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf8>)
 801891a:	f011 fa99 	bl	8029e50 <__assert_func>
 801891e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80189f4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x104>
 8018922:	f8b8 1000 	ldrh.w	r1, [r8]
 8018926:	4299      	cmp	r1, r3
 8018928:	d803      	bhi.n	8018932 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x42>
 801892a:	4b30      	ldr	r3, [pc, #192]	; (80189ec <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xfc>)
 801892c:	21af      	movs	r1, #175	; 0xaf
 801892e:	4a2d      	ldr	r2, [pc, #180]	; (80189e4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xf4>)
 8018930:	e7f2      	b.n	8018918 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x28>
 8018932:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80189f8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x108>
 8018936:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801893a:	f8d9 3000 	ldr.w	r3, [r9]
 801893e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8018942:	682b      	ldr	r3, [r5, #0]
 8018944:	4628      	mov	r0, r5
 8018946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018948:	4798      	blx	r3
 801894a:	4606      	mov	r6, r0
 801894c:	b207      	sxth	r7, r0
 801894e:	a803      	add	r0, sp, #12
 8018950:	f003 fde2 	bl	801c518 <_ZN8touchgfx12TextProviderC1Ev>
 8018954:	682b      	ldr	r3, [r5, #0]
 8018956:	4628      	mov	r0, r5
 8018958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801895a:	4798      	blx	r3
 801895c:	682b      	ldr	r3, [r5, #0]
 801895e:	4683      	mov	fp, r0
 8018960:	4628      	mov	r0, r5
 8018962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018964:	4798      	blx	r3
 8018966:	465b      	mov	r3, fp
 8018968:	9000      	str	r0, [sp, #0]
 801896a:	a803      	add	r0, sp, #12
 801896c:	9925      	ldr	r1, [sp, #148]	; 0x94
 801896e:	9a02      	ldr	r2, [sp, #8]
 8018970:	f003 fe25 	bl	801c5be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018974:	f8da 3000 	ldr.w	r3, [sl]
 8018978:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801897c:	2b00      	cmp	r3, #0
 801897e:	d0c8      	beq.n	8018912 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x22>
 8018980:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8018982:	f8b8 0000 	ldrh.w	r0, [r8]
 8018986:	4290      	cmp	r0, r2
 8018988:	d9cf      	bls.n	801892a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0x3a>
 801898a:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 801898e:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8018992:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8018996:	786a      	ldrb	r2, [r5, #1]
 8018998:	8925      	ldrh	r5, [r4, #8]
 801899a:	f8d9 3000 	ldr.w	r3, [r9]
 801899e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80189a2:	eba5 050c 	sub.w	r5, r5, ip
 80189a6:	b22d      	sxth	r5, r5
 80189a8:	9500      	str	r5, [sp, #0]
 80189aa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80189ae:	a803      	add	r0, sp, #12
 80189b0:	f001 fd31 	bl	801a416 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80189b4:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 80189b8:	b203      	sxth	r3, r0
 80189ba:	18b9      	adds	r1, r7, r2
 80189bc:	2900      	cmp	r1, #0
 80189be:	dd0b      	ble.n	80189d8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xe8>
 80189c0:	3b01      	subs	r3, #1
 80189c2:	fb13 f302 	smulbb	r3, r3, r2
 80189c6:	fb16 3300 	smlabb	r3, r6, r0, r3
 80189ca:	b21f      	sxth	r7, r3
 80189cc:	4638      	mov	r0, r7
 80189ce:	b01c      	add	sp, #112	; 0x70
 80189d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189d4:	b003      	add	sp, #12
 80189d6:	4770      	bx	lr
 80189d8:	2b00      	cmp	r3, #0
 80189da:	dcf7      	bgt.n	80189cc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 80189dc:	2700      	movs	r7, #0
 80189de:	e7f5      	b.n	80189cc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xdc>
 80189e0:	0802d58c 	.word	0x0802d58c
 80189e4:	080305f4 	.word	0x080305f4
 80189e8:	0802d61a 	.word	0x0802d61a
 80189ec:	0802d643 	.word	0x0802d643
 80189f0:	2002b8f0 	.word	0x2002b8f0
 80189f4:	2002b8f4 	.word	0x2002b8f4
 80189f8:	2002b8f8 	.word	0x2002b8f8

080189fc <_ZN8touchgfx8TextAreaD0Ev>:
 80189fc:	b510      	push	{r4, lr}
 80189fe:	4604      	mov	r4, r0
 8018a00:	213c      	movs	r1, #60	; 0x3c
 8018a02:	f011 f9f7 	bl	8029df4 <_ZdlPvj>
 8018a06:	4620      	mov	r0, r4
 8018a08:	bd10      	pop	{r4, pc}
	...

08018a0c <_ZN8touchgfx8TextArea13getTextHeightEv>:
 8018a0c:	b570      	push	{r4, r5, r6, lr}
 8018a0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018a12:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018a14:	4604      	mov	r4, r0
 8018a16:	4299      	cmp	r1, r3
 8018a18:	d01e      	beq.n	8018a58 <_ZN8touchgfx8TextArea13getTextHeightEv+0x4c>
 8018a1a:	6803      	ldr	r3, [r0, #0]
 8018a1c:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8018a1e:	4b0f      	ldr	r3, [pc, #60]	; (8018a5c <_ZN8touchgfx8TextArea13getTextHeightEv+0x50>)
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	b92b      	cbnz	r3, 8018a30 <_ZN8touchgfx8TextArea13getTextHeightEv+0x24>
 8018a24:	4b0e      	ldr	r3, [pc, #56]	; (8018a60 <_ZN8touchgfx8TextArea13getTextHeightEv+0x54>)
 8018a26:	21ae      	movs	r1, #174	; 0xae
 8018a28:	4a0e      	ldr	r2, [pc, #56]	; (8018a64 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8018a2a:	480f      	ldr	r0, [pc, #60]	; (8018a68 <_ZN8touchgfx8TextArea13getTextHeightEv+0x5c>)
 8018a2c:	f011 fa10 	bl	8029e50 <__assert_func>
 8018a30:	4b0e      	ldr	r3, [pc, #56]	; (8018a6c <_ZN8touchgfx8TextArea13getTextHeightEv+0x60>)
 8018a32:	881b      	ldrh	r3, [r3, #0]
 8018a34:	428b      	cmp	r3, r1
 8018a36:	d803      	bhi.n	8018a40 <_ZN8touchgfx8TextArea13getTextHeightEv+0x34>
 8018a38:	4b0d      	ldr	r3, [pc, #52]	; (8018a70 <_ZN8touchgfx8TextArea13getTextHeightEv+0x64>)
 8018a3a:	21af      	movs	r1, #175	; 0xaf
 8018a3c:	4a09      	ldr	r2, [pc, #36]	; (8018a64 <_ZN8touchgfx8TextArea13getTextHeightEv+0x58>)
 8018a3e:	e7f4      	b.n	8018a2a <_ZN8touchgfx8TextArea13getTextHeightEv+0x1e>
 8018a40:	4b0c      	ldr	r3, [pc, #48]	; (8018a74 <_ZN8touchgfx8TextArea13getTextHeightEv+0x68>)
 8018a42:	6818      	ldr	r0, [r3, #0]
 8018a44:	f7ea ff20 	bl	8003888 <_ZNK8touchgfx5Texts7getTextEt>
 8018a48:	2300      	movs	r3, #0
 8018a4a:	4601      	mov	r1, r0
 8018a4c:	46ac      	mov	ip, r5
 8018a4e:	4620      	mov	r0, r4
 8018a50:	461a      	mov	r2, r3
 8018a52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a56:	4760      	bx	ip
 8018a58:	2000      	movs	r0, #0
 8018a5a:	bd70      	pop	{r4, r5, r6, pc}
 8018a5c:	2002b8f0 	.word	0x2002b8f0
 8018a60:	0802d58c 	.word	0x0802d58c
 8018a64:	080305f4 	.word	0x080305f4
 8018a68:	0802d61a 	.word	0x0802d61a
 8018a6c:	2002b8f4 	.word	0x2002b8f4
 8018a70:	0802d643 	.word	0x0802d643
 8018a74:	2002b8fc 	.word	0x2002b8fc

08018a78 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 8018a78:	b570      	push	{r4, r5, r6, lr}
 8018a7a:	6803      	ldr	r3, [r0, #0]
 8018a7c:	4604      	mov	r4, r0
 8018a7e:	4615      	mov	r5, r2
 8018a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018a82:	4798      	blx	r3
 8018a84:	6823      	ldr	r3, [r4, #0]
 8018a86:	4629      	mov	r1, r5
 8018a88:	4620      	mov	r0, r4
 8018a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a90:	4718      	bx	r3

08018a92 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8018a92:	b538      	push	{r3, r4, r5, lr}
 8018a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018a98:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018a9a:	4604      	mov	r4, r0
 8018a9c:	429a      	cmp	r2, r3
 8018a9e:	d014      	beq.n	8018aca <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8018aa0:	6803      	ldr	r3, [r0, #0]
 8018aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8018aa4:	4798      	blx	r3
 8018aa6:	6823      	ldr	r3, [r4, #0]
 8018aa8:	4605      	mov	r5, r0
 8018aaa:	4620      	mov	r0, r4
 8018aac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018aae:	4798      	blx	r3
 8018ab0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018ab4:	b22d      	sxth	r5, r5
 8018ab6:	4601      	mov	r1, r0
 8018ab8:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8018abc:	bf06      	itte	eq
 8018abe:	4602      	moveq	r2, r0
 8018ac0:	4629      	moveq	r1, r5
 8018ac2:	462a      	movne	r2, r5
 8018ac4:	4620      	mov	r0, r4
 8018ac6:	f7ff ffd7 	bl	8018a78 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018aca:	bd38      	pop	{r3, r4, r5, pc}

08018acc <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8018acc:	888a      	ldrh	r2, [r1, #4]
 8018ace:	8582      	strh	r2, [r0, #44]	; 0x2c
 8018ad0:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 8018ad4:	b922      	cbnz	r2, 8018ae0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8018ad6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8018ada:	b90b      	cbnz	r3, 8018ae0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x14>
 8018adc:	f7ff bfd9 	b.w	8018a92 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8018ae0:	4770      	bx	lr

08018ae2 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8018ae2:	2300      	movs	r3, #0
 8018ae4:	8083      	strh	r3, [r0, #4]
 8018ae6:	80c3      	strh	r3, [r0, #6]
 8018ae8:	8003      	strh	r3, [r0, #0]
 8018aea:	8043      	strh	r3, [r0, #2]
 8018aec:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8018af0:	2bff      	cmp	r3, #255	; 0xff
 8018af2:	bf01      	itttt	eq
 8018af4:	890b      	ldrheq	r3, [r1, #8]
 8018af6:	8083      	strheq	r3, [r0, #4]
 8018af8:	894b      	ldrheq	r3, [r1, #10]
 8018afa:	80c3      	strheq	r3, [r0, #6]
 8018afc:	4770      	bx	lr
	...

08018b00 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8018b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018b02:	4604      	mov	r4, r0
 8018b04:	466b      	mov	r3, sp
 8018b06:	6808      	ldr	r0, [r1, #0]
 8018b08:	6849      	ldr	r1, [r1, #4]
 8018b0a:	c303      	stmia	r3!, {r0, r1}
 8018b0c:	6823      	ldr	r3, [r4, #0]
 8018b0e:	4669      	mov	r1, sp
 8018b10:	4620      	mov	r0, r4
 8018b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b14:	4798      	blx	r3
 8018b16:	4b08      	ldr	r3, [pc, #32]	; (8018b38 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8018b18:	681b      	ldr	r3, [r3, #0]
 8018b1a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018b1e:	b10a      	cbz	r2, 8018b24 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8018b20:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018b22:	b900      	cbnz	r0, 8018b26 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8018b24:	6898      	ldr	r0, [r3, #8]
 8018b26:	6803      	ldr	r3, [r0, #0]
 8018b28:	4669      	mov	r1, sp
 8018b2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8018b2c:	699d      	ldr	r5, [r3, #24]
 8018b2e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8018b32:	47a8      	blx	r5
 8018b34:	b003      	add	sp, #12
 8018b36:	bd30      	pop	{r4, r5, pc}
 8018b38:	2002b8a0 	.word	0x2002b8a0

08018b3c <_ZN8touchgfx3BoxD1Ev>:
 8018b3c:	4770      	bx	lr

08018b3e <_ZN8touchgfx3BoxD0Ev>:
 8018b3e:	b510      	push	{r4, lr}
 8018b40:	4604      	mov	r4, r0
 8018b42:	212c      	movs	r1, #44	; 0x2c
 8018b44:	f011 f956 	bl	8029df4 <_ZdlPvj>
 8018b48:	4620      	mov	r0, r4
 8018b4a:	bd10      	pop	{r4, pc}

08018b4c <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8018b4c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8018b50:	4770      	bx	lr

08018b52 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8018b52:	b570      	push	{r4, r5, r6, lr}
 8018b54:	880b      	ldrh	r3, [r1, #0]
 8018b56:	4605      	mov	r5, r0
 8018b58:	4604      	mov	r4, r0
 8018b5a:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8018b5c:	8813      	ldrh	r3, [r2, #0]
 8018b5e:	f825 3f30 	strh.w	r3, [r5, #48]!
 8018b62:	4628      	mov	r0, r5
 8018b64:	f005 f8da 	bl	801dd1c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018b68:	4606      	mov	r6, r0
 8018b6a:	4628      	mov	r0, r5
 8018b6c:	f005 f910 	bl	801dd90 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018b70:	6823      	ldr	r3, [r4, #0]
 8018b72:	4605      	mov	r5, r0
 8018b74:	b231      	sxth	r1, r6
 8018b76:	4620      	mov	r0, r4
 8018b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018b7a:	4798      	blx	r3
 8018b7c:	6823      	ldr	r3, [r4, #0]
 8018b7e:	b229      	sxth	r1, r5
 8018b80:	4620      	mov	r0, r4
 8018b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018b84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b88:	4718      	bx	r3

08018b8a <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8018b8a:	b510      	push	{r4, lr}
 8018b8c:	4604      	mov	r4, r0
 8018b8e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8018b90:	b150      	cbz	r0, 8018ba8 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8018b92:	6803      	ldr	r3, [r0, #0]
 8018b94:	68db      	ldr	r3, [r3, #12]
 8018b96:	4798      	blx	r3
 8018b98:	b130      	cbz	r0, 8018ba8 <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8018b9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8018b9c:	4621      	mov	r1, r4
 8018b9e:	6803      	ldr	r3, [r0, #0]
 8018ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ba4:	689b      	ldr	r3, [r3, #8]
 8018ba6:	4718      	bx	r3
 8018ba8:	bd10      	pop	{r4, pc}

08018baa <_ZNK8touchgfx6Button12getSolidRectEv>:
 8018baa:	b510      	push	{r4, lr}
 8018bac:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8018bb0:	4604      	mov	r4, r0
 8018bb2:	2bff      	cmp	r3, #255	; 0xff
 8018bb4:	d006      	beq.n	8018bc4 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8018bb6:	2300      	movs	r3, #0
 8018bb8:	8003      	strh	r3, [r0, #0]
 8018bba:	8043      	strh	r3, [r0, #2]
 8018bbc:	8083      	strh	r3, [r0, #4]
 8018bbe:	80c3      	strh	r3, [r0, #6]
 8018bc0:	4620      	mov	r0, r4
 8018bc2:	bd10      	pop	{r4, pc}
 8018bc4:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8018bc8:	b11b      	cbz	r3, 8018bd2 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8018bca:	3130      	adds	r1, #48	; 0x30
 8018bcc:	f005 f91a 	bl	801de04 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8018bd0:	e7f6      	b.n	8018bc0 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8018bd2:	312e      	adds	r1, #46	; 0x2e
 8018bd4:	e7fa      	b.n	8018bcc <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

08018bd8 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8018bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bdc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8018be0:	b08a      	sub	sp, #40	; 0x28
 8018be2:	4604      	mov	r4, r0
 8018be4:	4688      	mov	r8, r1
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d044      	beq.n	8018c74 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x9c>
 8018bea:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8018bec:	a805      	add	r0, sp, #20
 8018bee:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018bf2:	f005 f893 	bl	801dd1c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018bf6:	4605      	mov	r5, r0
 8018bf8:	b206      	sxth	r6, r0
 8018bfa:	a805      	add	r0, sp, #20
 8018bfc:	f005 f8c8 	bl	801dd90 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018c00:	f9b8 2000 	ldrsh.w	r2, [r8]
 8018c04:	f8b8 7004 	ldrh.w	r7, [r8, #4]
 8018c08:	2300      	movs	r3, #0
 8018c0a:	fa0f fc80 	sxth.w	ip, r0
 8018c0e:	4417      	add	r7, r2
 8018c10:	9306      	str	r3, [sp, #24]
 8018c12:	b2bf      	uxth	r7, r7
 8018c14:	fa0f fe87 	sxth.w	lr, r7
 8018c18:	459e      	cmp	lr, r3
 8018c1a:	dd2d      	ble.n	8018c78 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8018c1c:	4296      	cmp	r6, r2
 8018c1e:	dd2b      	ble.n	8018c78 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8018c20:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
 8018c24:	f8b8 1006 	ldrh.w	r1, [r8, #6]
 8018c28:	4419      	add	r1, r3
 8018c2a:	b289      	uxth	r1, r1
 8018c2c:	fa0f f881 	sxth.w	r8, r1
 8018c30:	f1b8 0f00 	cmp.w	r8, #0
 8018c34:	dd20      	ble.n	8018c78 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8018c36:	459c      	cmp	ip, r3
 8018c38:	dd1e      	ble.n	8018c78 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa0>
 8018c3a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8018c3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018c42:	4576      	cmp	r6, lr
 8018c44:	bfa8      	it	ge
 8018c46:	463d      	movge	r5, r7
 8018c48:	45c4      	cmp	ip, r8
 8018c4a:	bfa8      	it	ge
 8018c4c:	4608      	movge	r0, r1
 8018c4e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8018c52:	1aad      	subs	r5, r5, r2
 8018c54:	1ac0      	subs	r0, r0, r3
 8018c56:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018c5a:	f8ad 501c 	strh.w	r5, [sp, #28]
 8018c5e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8018c62:	4b1f      	ldr	r3, [pc, #124]	; (8018ce0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x108>)
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	b953      	cbnz	r3, 8018c7e <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xa6>
 8018c68:	4b1e      	ldr	r3, [pc, #120]	; (8018ce4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x10c>)
 8018c6a:	2187      	movs	r1, #135	; 0x87
 8018c6c:	4a1e      	ldr	r2, [pc, #120]	; (8018ce8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x110>)
 8018c6e:	481f      	ldr	r0, [pc, #124]	; (8018cec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x114>)
 8018c70:	f011 f8ee 	bl	8029e50 <__assert_func>
 8018c74:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8018c76:	e7b9      	b.n	8018bec <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8018c78:	2300      	movs	r3, #0
 8018c7a:	9307      	str	r3, [sp, #28]
 8018c7c:	e7f1      	b.n	8018c62 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8018c7e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8018c82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018c86:	429a      	cmp	r2, r3
 8018c88:	d026      	beq.n	8018cd8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8018c8a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	dd22      	ble.n	8018cd8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8018c92:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	dd1e      	ble.n	8018cd8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x100>
 8018c9a:	2300      	movs	r3, #0
 8018c9c:	a908      	add	r1, sp, #32
 8018c9e:	4620      	mov	r0, r4
 8018ca0:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8018ca4:	6823      	ldr	r3, [r4, #0]
 8018ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ca8:	4798      	blx	r3
 8018caa:	4b11      	ldr	r3, [pc, #68]	; (8018cf0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x118>)
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8018cb2:	b10a      	cbz	r2, 8018cb8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8018cb4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8018cb6:	b900      	cbnz	r0, 8018cba <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe2>
 8018cb8:	6898      	ldr	r0, [r3, #8]
 8018cba:	2501      	movs	r5, #1
 8018cbc:	6801      	ldr	r1, [r0, #0]
 8018cbe:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8018cc2:	9502      	str	r5, [sp, #8]
 8018cc4:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8018cc8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8018ccc:	9401      	str	r4, [sp, #4]
 8018cce:	ac06      	add	r4, sp, #24
 8018cd0:	9400      	str	r4, [sp, #0]
 8018cd2:	688c      	ldr	r4, [r1, #8]
 8018cd4:	a905      	add	r1, sp, #20
 8018cd6:	47a0      	blx	r4
 8018cd8:	b00a      	add	sp, #40	; 0x28
 8018cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cde:	bf00      	nop
 8018ce0:	2002b928 	.word	0x2002b928
 8018ce4:	08030688 	.word	0x08030688
 8018ce8:	080306ea 	.word	0x080306ea
 8018cec:	080306c4 	.word	0x080306c4
 8018cf0:	2002b8a0 	.word	0x2002b8a0

08018cf4 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
 8018cf4:	4770      	bx	lr
	...

08018cf8 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
 8018cf8:	b570      	push	{r4, r5, r6, lr}
 8018cfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018cfe:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8018d00:	4604      	mov	r4, r0
 8018d02:	4299      	cmp	r1, r3
 8018d04:	d01e      	beq.n	8018d44 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x4c>
 8018d06:	6803      	ldr	r3, [r0, #0]
 8018d08:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 8018d0a:	4b0f      	ldr	r3, [pc, #60]	; (8018d48 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x50>)
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	b92b      	cbnz	r3, 8018d1c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x24>
 8018d10:	4b0e      	ldr	r3, [pc, #56]	; (8018d4c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x54>)
 8018d12:	21ae      	movs	r1, #174	; 0xae
 8018d14:	4a0e      	ldr	r2, [pc, #56]	; (8018d50 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8018d16:	480f      	ldr	r0, [pc, #60]	; (8018d54 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x5c>)
 8018d18:	f011 f89a 	bl	8029e50 <__assert_func>
 8018d1c:	4b0e      	ldr	r3, [pc, #56]	; (8018d58 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x60>)
 8018d1e:	881b      	ldrh	r3, [r3, #0]
 8018d20:	428b      	cmp	r3, r1
 8018d22:	d803      	bhi.n	8018d2c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x34>
 8018d24:	4b0d      	ldr	r3, [pc, #52]	; (8018d5c <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x64>)
 8018d26:	21af      	movs	r1, #175	; 0xaf
 8018d28:	4a09      	ldr	r2, [pc, #36]	; (8018d50 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x58>)
 8018d2a:	e7f4      	b.n	8018d16 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x1e>
 8018d2c:	4b0c      	ldr	r3, [pc, #48]	; (8018d60 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x68>)
 8018d2e:	6818      	ldr	r0, [r3, #0]
 8018d30:	f7ea fdaa 	bl	8003888 <_ZNK8touchgfx5Texts7getTextEt>
 8018d34:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8018d36:	4601      	mov	r1, r0
 8018d38:	46ac      	mov	ip, r5
 8018d3a:	4620      	mov	r0, r4
 8018d3c:	2300      	movs	r3, #0
 8018d3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018d42:	4760      	bx	ip
 8018d44:	2000      	movs	r0, #0
 8018d46:	bd70      	pop	{r4, r5, r6, pc}
 8018d48:	2002b8f0 	.word	0x2002b8f0
 8018d4c:	0802d58c 	.word	0x0802d58c
 8018d50:	08030798 	.word	0x08030798
 8018d54:	0802d61a 	.word	0x0802d61a
 8018d58:	2002b8f4 	.word	0x2002b8f4
 8018d5c:	0802d643 	.word	0x0802d643
 8018d60:	2002b8fc 	.word	0x2002b8fc

08018d64 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8018d64:	b510      	push	{r4, lr}
 8018d66:	4604      	mov	r4, r0
 8018d68:	2140      	movs	r1, #64	; 0x40
 8018d6a:	f011 f843 	bl	8029df4 <_ZdlPvj>
 8018d6e:	4620      	mov	r0, r4
 8018d70:	bd10      	pop	{r4, pc}
	...

08018d74 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
 8018d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018d7c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8018d7e:	b08c      	sub	sp, #48	; 0x30
 8018d80:	4604      	mov	r4, r0
 8018d82:	4293      	cmp	r3, r2
 8018d84:	460e      	mov	r6, r1
 8018d86:	d05d      	beq.n	8018e44 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8018d88:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8018e68 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf4>
 8018d8c:	f8d8 2000 	ldr.w	r2, [r8]
 8018d90:	b92a      	cbnz	r2, 8018d9e <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x2a>
 8018d92:	4b2e      	ldr	r3, [pc, #184]	; (8018e4c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd8>)
 8018d94:	21ae      	movs	r1, #174	; 0xae
 8018d96:	4a2e      	ldr	r2, [pc, #184]	; (8018e50 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8018d98:	482e      	ldr	r0, [pc, #184]	; (8018e54 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe0>)
 8018d9a:	f011 f859 	bl	8029e50 <__assert_func>
 8018d9e:	4f2e      	ldr	r7, [pc, #184]	; (8018e58 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe4>)
 8018da0:	8839      	ldrh	r1, [r7, #0]
 8018da2:	4299      	cmp	r1, r3
 8018da4:	d803      	bhi.n	8018dae <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x3a>
 8018da6:	4b2d      	ldr	r3, [pc, #180]	; (8018e5c <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xe8>)
 8018da8:	21af      	movs	r1, #175	; 0xaf
 8018daa:	4a29      	ldr	r2, [pc, #164]	; (8018e50 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xdc>)
 8018dac:	e7f4      	b.n	8018d98 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x24>
 8018dae:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8018db2:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8018db6:	4b2a      	ldr	r3, [pc, #168]	; (8018e60 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xec>)
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8018dbe:	2a00      	cmp	r2, #0
 8018dc0:	d040      	beq.n	8018e44 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xd0>
 8018dc2:	784b      	ldrb	r3, [r1, #1]
 8018dc4:	f890 5037 	ldrb.w	r5, [r0, #55]	; 0x37
 8018dc8:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8018dcc:	f3c3 0a01 	ubfx	sl, r3, #0, #2
 8018dd0:	f890 c036 	ldrb.w	ip, [r0, #54]	; 0x36
 8018dd4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018dd8:	f9b0 e034 	ldrsh.w	lr, [r0, #52]	; 0x34
 8018ddc:	f890 9038 	ldrb.w	r9, [r0, #56]	; 0x38
 8018de0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8018de4:	ad05      	add	r5, sp, #20
 8018de6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8018de8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8018dec:	9207      	str	r2, [sp, #28]
 8018dee:	f88d 9022 	strb.w	r9, [sp, #34]	; 0x22
 8018df2:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8018df6:	f88d c02a 	strb.w	ip, [sp, #42]	; 0x2a
 8018dfa:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 8018dfe:	f88d a020 	strb.w	sl, [sp, #32]
 8018e02:	9009      	str	r0, [sp, #36]	; 0x24
 8018e04:	f7fe fe4e 	bl	8017aa4 <_ZN8touchgfx3HAL3lcdEv>
 8018e08:	4621      	mov	r1, r4
 8018e0a:	4681      	mov	r9, r0
 8018e0c:	4628      	mov	r0, r5
 8018e0e:	f002 ffcb 	bl	801bda8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018e12:	f8d8 3000 	ldr.w	r3, [r8]
 8018e16:	2b00      	cmp	r3, #0
 8018e18:	d0bb      	beq.n	8018d92 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x1e>
 8018e1a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8018e1c:	883b      	ldrh	r3, [r7, #0]
 8018e1e:	428b      	cmp	r3, r1
 8018e20:	d9c1      	bls.n	8018da6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0x32>
 8018e22:	4b10      	ldr	r3, [pc, #64]	; (8018e64 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xf0>)
 8018e24:	6818      	ldr	r0, [r3, #0]
 8018e26:	f7ea fd2f 	bl	8003888 <_ZNK8touchgfx5Texts7getTextEt>
 8018e2a:	2300      	movs	r3, #0
 8018e2c:	9303      	str	r3, [sp, #12]
 8018e2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018e30:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8018e34:	ab07      	add	r3, sp, #28
 8018e36:	4648      	mov	r0, r9
 8018e38:	9300      	str	r3, [sp, #0]
 8018e3a:	4633      	mov	r3, r6
 8018e3c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8018e40:	f7ea fcd4 	bl	80037ec <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8018e44:	b00c      	add	sp, #48	; 0x30
 8018e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e4a:	bf00      	nop
 8018e4c:	0802d58c 	.word	0x0802d58c
 8018e50:	08030798 	.word	0x08030798
 8018e54:	0802d61a 	.word	0x0802d61a
 8018e58:	2002b8f4 	.word	0x2002b8f4
 8018e5c:	0802d643 	.word	0x0802d643
 8018e60:	2002b8f8 	.word	0x2002b8f8
 8018e64:	2002b8fc 	.word	0x2002b8fc
 8018e68:	2002b8f0 	.word	0x2002b8f0

08018e6c <_ZN8touchgfx13BoxWithBorderD1Ev>:
 8018e6c:	4770      	bx	lr

08018e6e <_ZN8touchgfx13BoxWithBorderD0Ev>:
 8018e6e:	b510      	push	{r4, lr}
 8018e70:	4604      	mov	r4, r0
 8018e72:	2134      	movs	r1, #52	; 0x34
 8018e74:	f010 ffbe 	bl	8029df4 <_ZdlPvj>
 8018e78:	4620      	mov	r0, r4
 8018e7a:	bd10      	pop	{r4, pc}

08018e7c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8018e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e80:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8018e82:	4604      	mov	r4, r0
 8018e84:	460e      	mov	r6, r1
 8018e86:	b08e      	sub	sp, #56	; 0x38
 8018e88:	b218      	sxth	r0, r3
 8018e8a:	8921      	ldrh	r1, [r4, #8]
 8018e8c:	005b      	lsls	r3, r3, #1
 8018e8e:	8962      	ldrh	r2, [r4, #10]
 8018e90:	f8ad 0000 	strh.w	r0, [sp]
 8018e94:	b29b      	uxth	r3, r3
 8018e96:	f8ad 0002 	strh.w	r0, [sp, #2]
 8018e9a:	1ac9      	subs	r1, r1, r3
 8018e9c:	1ad3      	subs	r3, r2, r3
 8018e9e:	b209      	sxth	r1, r1
 8018ea0:	b21b      	sxth	r3, r3
 8018ea2:	2900      	cmp	r1, #0
 8018ea4:	f8ad 1004 	strh.w	r1, [sp, #4]
 8018ea8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018eac:	dd5e      	ble.n	8018f6c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	dd5c      	ble.n	8018f6c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8018eb2:	6830      	ldr	r0, [r6, #0]
 8018eb4:	ab02      	add	r3, sp, #8
 8018eb6:	6871      	ldr	r1, [r6, #4]
 8018eb8:	c303      	stmia	r3!, {r0, r1}
 8018eba:	4669      	mov	r1, sp
 8018ebc:	a802      	add	r0, sp, #8
 8018ebe:	f7fe fb13 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 8018ec2:	4620      	mov	r0, r4
 8018ec4:	a902      	add	r1, sp, #8
 8018ec6:	f7ff fe1b 	bl	8018b00 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 8018eca:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8018ecc:	2800      	cmp	r0, #0
 8018ece:	d05f      	beq.n	8018f90 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8018ed0:	8963      	ldrh	r3, [r4, #10]
 8018ed2:	b202      	sxth	r2, r0
 8018ed4:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8018ed8:	2500      	movs	r5, #0
 8018eda:	1a1f      	subs	r7, r3, r0
 8018edc:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8018ee0:	f8ad 101c 	strh.w	r1, [sp, #28]
 8018ee4:	b21b      	sxth	r3, r3
 8018ee6:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8018eea:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8018eee:	af04      	add	r7, sp, #16
 8018ef0:	1a09      	subs	r1, r1, r0
 8018ef2:	9506      	str	r5, [sp, #24]
 8018ef4:	f8ad 201e 	strh.w	r2, [sp, #30]
 8018ef8:	f8ad 5020 	strh.w	r5, [sp, #32]
 8018efc:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8018f00:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 8018f04:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8018f08:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8018f0c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8018f10:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8018f14:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8018f18:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8018f1c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018f20:	ab06      	add	r3, sp, #24
 8018f22:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018f26:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018f2a:	e887 0003 	stmia.w	r7, {r0, r1}
 8018f2e:	4631      	mov	r1, r6
 8018f30:	4638      	mov	r0, r7
 8018f32:	f7fe fad9 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 8018f36:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	dd12      	ble.n	8018f64 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8018f3e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	dd0e      	ble.n	8018f64 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8018f46:	6823      	ldr	r3, [r4, #0]
 8018f48:	4639      	mov	r1, r7
 8018f4a:	4620      	mov	r0, r4
 8018f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f4e:	4798      	blx	r3
 8018f50:	f7fe fda8 	bl	8017aa4 <_ZN8touchgfx3HAL3lcdEv>
 8018f54:	6803      	ldr	r3, [r0, #0]
 8018f56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018f58:	4639      	mov	r1, r7
 8018f5a:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8018f5e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8018f62:	47c0      	blx	r8
 8018f64:	3501      	adds	r5, #1
 8018f66:	2d04      	cmp	r5, #4
 8018f68:	d1da      	bne.n	8018f20 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8018f6a:	e011      	b.n	8018f90 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8018f6c:	6830      	ldr	r0, [r6, #0]
 8018f6e:	ab06      	add	r3, sp, #24
 8018f70:	6871      	ldr	r1, [r6, #4]
 8018f72:	c303      	stmia	r3!, {r0, r1}
 8018f74:	6823      	ldr	r3, [r4, #0]
 8018f76:	a906      	add	r1, sp, #24
 8018f78:	4620      	mov	r0, r4
 8018f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f7c:	4798      	blx	r3
 8018f7e:	f7fe fd91 	bl	8017aa4 <_ZN8touchgfx3HAL3lcdEv>
 8018f82:	6803      	ldr	r3, [r0, #0]
 8018f84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018f86:	a906      	add	r1, sp, #24
 8018f88:	699d      	ldr	r5, [r3, #24]
 8018f8a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8018f8e:	47a8      	blx	r5
 8018f90:	b00e      	add	sp, #56	; 0x38
 8018f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018f96 <_ZN8touchgfx14ButtonWithIconD1Ev>:
 8018f96:	4770      	bx	lr

08018f98 <_ZN8touchgfx14ButtonWithIconD0Ev>:
 8018f98:	b510      	push	{r4, lr}
 8018f9a:	4604      	mov	r4, r0
 8018f9c:	213c      	movs	r1, #60	; 0x3c
 8018f9e:	f010 ff29 	bl	8029df4 <_ZdlPvj>
 8018fa2:	4620      	mov	r0, r4
 8018fa4:	bd10      	pop	{r4, pc}

08018fa6 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 8018fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018faa:	461c      	mov	r4, r3
 8018fac:	4606      	mov	r6, r0
 8018fae:	9f06      	ldr	r7, [sp, #24]
 8018fb0:	f7ff fdcf 	bl	8018b52 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
 8018fb4:	8823      	ldrh	r3, [r4, #0]
 8018fb6:	f04f 0802 	mov.w	r8, #2
 8018fba:	f9b6 5008 	ldrsh.w	r5, [r6, #8]
 8018fbe:	4638      	mov	r0, r7
 8018fc0:	86b3      	strh	r3, [r6, #52]	; 0x34
 8018fc2:	883b      	ldrh	r3, [r7, #0]
 8018fc4:	fb95 f5f8 	sdiv	r5, r5, r8
 8018fc8:	86f3      	strh	r3, [r6, #54]	; 0x36
 8018fca:	b2ad      	uxth	r5, r5
 8018fcc:	f004 fea6 	bl	801dd1c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018fd0:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 8018fd4:	eba5 0050 	sub.w	r0, r5, r0, lsr #1
 8018fd8:	fb94 f4f8 	sdiv	r4, r4, r8
 8018fdc:	b2a4      	uxth	r4, r4
 8018fde:	8730      	strh	r0, [r6, #56]	; 0x38
 8018fe0:	4638      	mov	r0, r7
 8018fe2:	f004 fed5 	bl	801dd90 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018fe6:	eba4 0050 	sub.w	r0, r4, r0, lsr #1
 8018fea:	8770      	strh	r0, [r6, #58]	; 0x3a
 8018fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018ff0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:
 8018ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ff4:	4604      	mov	r4, r0
 8018ff6:	b08c      	sub	sp, #48	; 0x30
 8018ff8:	460d      	mov	r5, r1
 8018ffa:	f7ff fded 	bl	8018bd8 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8018ffe:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019002:	b33b      	cbz	r3, 8019054 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x64>
 8019004:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8019006:	a805      	add	r0, sp, #20
 8019008:	f8ad 3014 	strh.w	r3, [sp, #20]
 801900c:	f9b4 8038 	ldrsh.w	r8, [r4, #56]	; 0x38
 8019010:	f9b4 703a 	ldrsh.w	r7, [r4, #58]	; 0x3a
 8019014:	f004 fe82 	bl	801dd1c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019018:	4606      	mov	r6, r0
 801901a:	a805      	add	r0, sp, #20
 801901c:	f004 feb8 	bl	801dd90 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019020:	6869      	ldr	r1, [r5, #4]
 8019022:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019026:	ab08      	add	r3, sp, #32
 8019028:	6828      	ldr	r0, [r5, #0]
 801902a:	ad08      	add	r5, sp, #32
 801902c:	f8ad 8018 	strh.w	r8, [sp, #24]
 8019030:	f8ad 701a 	strh.w	r7, [sp, #26]
 8019034:	f8ad 601c 	strh.w	r6, [sp, #28]
 8019038:	c303      	stmia	r3!, {r0, r1}
 801903a:	a906      	add	r1, sp, #24
 801903c:	4628      	mov	r0, r5
 801903e:	f7fe fa53 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 8019042:	4b25      	ldr	r3, [pc, #148]	; (80190d8 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe8>)
 8019044:	681b      	ldr	r3, [r3, #0]
 8019046:	b93b      	cbnz	r3, 8019058 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x68>
 8019048:	4b24      	ldr	r3, [pc, #144]	; (80190dc <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xec>)
 801904a:	2187      	movs	r1, #135	; 0x87
 801904c:	4a24      	ldr	r2, [pc, #144]	; (80190e0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf0>)
 801904e:	4825      	ldr	r0, [pc, #148]	; (80190e4 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf4>)
 8019050:	f010 fefe 	bl	8029e50 <__assert_func>
 8019054:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019056:	e7d6      	b.n	8019006 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x16>
 8019058:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801905c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019060:	429a      	cmp	r2, r3
 8019062:	d035      	beq.n	80190d0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 8019064:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8019068:	2b00      	cmp	r3, #0
 801906a:	dd31      	ble.n	80190d0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 801906c:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8019070:	2b00      	cmp	r3, #0
 8019072:	dd2d      	ble.n	80190d0 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xe0>
 8019074:	2300      	movs	r3, #0
 8019076:	a90a      	add	r1, sp, #40	; 0x28
 8019078:	4620      	mov	r0, r4
 801907a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 801907e:	6823      	ldr	r3, [r4, #0]
 8019080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019082:	4798      	blx	r3
 8019084:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8019088:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801908a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801908e:	1a9b      	subs	r3, r3, r2
 8019090:	f8ad 3020 	strh.w	r3, [sp, #32]
 8019094:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8019096:	1ac9      	subs	r1, r1, r3
 8019098:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 801909c:	4912      	ldr	r1, [pc, #72]	; (80190e8 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xf8>)
 801909e:	6809      	ldr	r1, [r1, #0]
 80190a0:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
 80190a4:	b108      	cbz	r0, 80190aa <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xba>
 80190a6:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 80190a8:	b900      	cbnz	r0, 80190ac <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xbc>
 80190aa:	6888      	ldr	r0, [r1, #8]
 80190ac:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
 80190b0:	2601      	movs	r6, #1
 80190b2:	440b      	add	r3, r1
 80190b4:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80190b8:	440a      	add	r2, r1
 80190ba:	6801      	ldr	r1, [r0, #0]
 80190bc:	9602      	str	r6, [sp, #8]
 80190be:	b21b      	sxth	r3, r3
 80190c0:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 80190c4:	b212      	sxth	r2, r2
 80190c6:	e9cd 5400 	strd	r5, r4, [sp]
 80190ca:	688c      	ldr	r4, [r1, #8]
 80190cc:	a905      	add	r1, sp, #20
 80190ce:	47a0      	blx	r4
 80190d0:	b00c      	add	sp, #48	; 0x30
 80190d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190d6:	bf00      	nop
 80190d8:	2002b928 	.word	0x2002b928
 80190dc:	08030688 	.word	0x08030688
 80190e0:	080308a0 	.word	0x080308a0
 80190e4:	080306c4 	.word	0x080306c4
 80190e8:	2002b8a0 	.word	0x2002b8a0

080190ec <_ZN8touchgfx14ButtonWithIconC1Ev>:
 80190ec:	2101      	movs	r1, #1
 80190ee:	2200      	movs	r2, #0
 80190f0:	b510      	push	{r4, lr}
 80190f2:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80190f6:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80190fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80190fe:	4c0d      	ldr	r4, [pc, #52]	; (8019134 <_ZN8touchgfx14ButtonWithIconC1Ev+0x48>)
 8019100:	8082      	strh	r2, [r0, #4]
 8019102:	80c2      	strh	r2, [r0, #6]
 8019104:	8102      	strh	r2, [r0, #8]
 8019106:	8142      	strh	r2, [r0, #10]
 8019108:	8182      	strh	r2, [r0, #12]
 801910a:	81c2      	strh	r2, [r0, #14]
 801910c:	8202      	strh	r2, [r0, #16]
 801910e:	8242      	strh	r2, [r0, #18]
 8019110:	61c2      	str	r2, [r0, #28]
 8019112:	8402      	strh	r2, [r0, #32]
 8019114:	8442      	strh	r2, [r0, #34]	; 0x22
 8019116:	6282      	str	r2, [r0, #40]	; 0x28
 8019118:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 801911c:	85c1      	strh	r1, [r0, #46]	; 0x2e
 801911e:	8601      	strh	r1, [r0, #48]	; 0x30
 8019120:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 8019124:	6004      	str	r4, [r0, #0]
 8019126:	8681      	strh	r1, [r0, #52]	; 0x34
 8019128:	86c1      	strh	r1, [r0, #54]	; 0x36
 801912a:	8702      	strh	r2, [r0, #56]	; 0x38
 801912c:	8742      	strh	r2, [r0, #58]	; 0x3a
 801912e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8019132:	bd10      	pop	{r4, pc}
 8019134:	08030834 	.word	0x08030834

08019138 <_ZN8touchgfx5ImageD1Ev>:
 8019138:	4770      	bx	lr

0801913a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 801913a:	b570      	push	{r4, r5, r6, lr}
 801913c:	880b      	ldrh	r3, [r1, #0]
 801913e:	460d      	mov	r5, r1
 8019140:	4604      	mov	r4, r0
 8019142:	84c3      	strh	r3, [r0, #38]	; 0x26
 8019144:	4608      	mov	r0, r1
 8019146:	f004 fde9 	bl	801dd1c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801914a:	4606      	mov	r6, r0
 801914c:	4628      	mov	r0, r5
 801914e:	f004 fe1f 	bl	801dd90 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019152:	6823      	ldr	r3, [r4, #0]
 8019154:	4605      	mov	r5, r0
 8019156:	b231      	sxth	r1, r6
 8019158:	4620      	mov	r0, r4
 801915a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801915c:	4798      	blx	r3
 801915e:	6823      	ldr	r3, [r4, #0]
 8019160:	b229      	sxth	r1, r5
 8019162:	4620      	mov	r0, r4
 8019164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801916a:	4718      	bx	r3

0801916c <_ZN8touchgfx5ImageD0Ev>:
 801916c:	b510      	push	{r4, lr}
 801916e:	4604      	mov	r4, r0
 8019170:	212c      	movs	r1, #44	; 0x2c
 8019172:	f010 fe3f 	bl	8029df4 <_ZdlPvj>
 8019176:	4620      	mov	r0, r4
 8019178:	bd10      	pop	{r4, pc}

0801917a <_ZNK8touchgfx5Image12getSolidRectEv>:
 801917a:	b510      	push	{r4, lr}
 801917c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8019180:	4604      	mov	r4, r0
 8019182:	2bff      	cmp	r3, #255	; 0xff
 8019184:	d006      	beq.n	8019194 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8019186:	2300      	movs	r3, #0
 8019188:	8003      	strh	r3, [r0, #0]
 801918a:	8043      	strh	r3, [r0, #2]
 801918c:	8083      	strh	r3, [r0, #4]
 801918e:	80c3      	strh	r3, [r0, #6]
 8019190:	4620      	mov	r0, r4
 8019192:	bd10      	pop	{r4, pc}
 8019194:	3126      	adds	r1, #38	; 0x26
 8019196:	f004 fe35 	bl	801de04 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801919a:	e7f9      	b.n	8019190 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801919c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 801919c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191a0:	4604      	mov	r4, r0
 80191a2:	b088      	sub	sp, #32
 80191a4:	2500      	movs	r5, #0
 80191a6:	460f      	mov	r7, r1
 80191a8:	f854 3b26 	ldr.w	r3, [r4], #38
 80191ac:	a904      	add	r1, sp, #16
 80191ae:	4606      	mov	r6, r0
 80191b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80191b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80191b6:	4798      	blx	r3
 80191b8:	4620      	mov	r0, r4
 80191ba:	f004 fdaf 	bl	801dd1c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80191be:	4680      	mov	r8, r0
 80191c0:	4620      	mov	r0, r4
 80191c2:	f004 fde5 	bl	801dd90 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80191c6:	9506      	str	r5, [sp, #24]
 80191c8:	ad06      	add	r5, sp, #24
 80191ca:	f8ad 001e 	strh.w	r0, [sp, #30]
 80191ce:	4639      	mov	r1, r7
 80191d0:	f8ad 801c 	strh.w	r8, [sp, #28]
 80191d4:	4628      	mov	r0, r5
 80191d6:	f7fe f987 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 80191da:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80191de:	2b00      	cmp	r3, #0
 80191e0:	dd19      	ble.n	8019216 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80191e2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	dd15      	ble.n	8019216 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80191ea:	4b0c      	ldr	r3, [pc, #48]	; (801921c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80191f2:	b10a      	cbz	r2, 80191f8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80191f4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80191f6:	b900      	cbnz	r0, 80191fa <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80191f8:	6898      	ldr	r0, [r3, #8]
 80191fa:	2701      	movs	r7, #1
 80191fc:	6801      	ldr	r1, [r0, #0]
 80191fe:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019202:	9702      	str	r7, [sp, #8]
 8019204:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8019208:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801920c:	e9cd 5600 	strd	r5, r6, [sp]
 8019210:	688d      	ldr	r5, [r1, #8]
 8019212:	4621      	mov	r1, r4
 8019214:	47a8      	blx	r5
 8019216:	b008      	add	sp, #32
 8019218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801921c:	2002b8a0 	.word	0x2002b8a0

08019220 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 8019220:	4770      	bx	lr

08019222 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8019222:	b510      	push	{r4, lr}
 8019224:	4604      	mov	r4, r0
 8019226:	2148      	movs	r1, #72	; 0x48
 8019228:	f010 fde4 	bl	8029df4 <_ZdlPvj>
 801922c:	4620      	mov	r0, r4
 801922e:	bd10      	pop	{r4, pc}

08019230 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8019230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019234:	4604      	mov	r4, r0
 8019236:	b08c      	sub	sp, #48	; 0x30
 8019238:	4688      	mov	r8, r1
 801923a:	f7ff fccd 	bl	8018bd8 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 801923e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019244:	4293      	cmp	r3, r2
 8019246:	f000 809a 	beq.w	801937e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 801924a:	4e55      	ldr	r6, [pc, #340]	; (80193a0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 801924c:	6832      	ldr	r2, [r6, #0]
 801924e:	b92a      	cbnz	r2, 801925c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x2c>
 8019250:	4b54      	ldr	r3, [pc, #336]	; (80193a4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 8019252:	21ae      	movs	r1, #174	; 0xae
 8019254:	4a54      	ldr	r2, [pc, #336]	; (80193a8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 8019256:	4855      	ldr	r0, [pc, #340]	; (80193ac <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>)
 8019258:	f010 fdfa 	bl	8029e50 <__assert_func>
 801925c:	4d54      	ldr	r5, [pc, #336]	; (80193b0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x180>)
 801925e:	8829      	ldrh	r1, [r5, #0]
 8019260:	4299      	cmp	r1, r3
 8019262:	d803      	bhi.n	801926c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 8019264:	4b53      	ldr	r3, [pc, #332]	; (80193b4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x184>)
 8019266:	21af      	movs	r1, #175	; 0xaf
 8019268:	4a4f      	ldr	r2, [pc, #316]	; (80193a8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x178>)
 801926a:	e7f4      	b.n	8019256 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x26>
 801926c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019270:	f04f 0c02 	mov.w	ip, #2
 8019274:	4b50      	ldr	r3, [pc, #320]	; (80193b8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x188>)
 8019276:	f894 e044 	ldrb.w	lr, [r4, #68]	; 0x44
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019280:	f1be 0f01 	cmp.w	lr, #1
 8019284:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8019288:	f04f 0300 	mov.w	r3, #0
 801928c:	b208      	sxth	r0, r1
 801928e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8019292:	9303      	str	r3, [sp, #12]
 8019294:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8019298:	d074      	beq.n	8019384 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 801929a:	f1be 0f03 	cmp.w	lr, #3
 801929e:	d071      	beq.n	8019384 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>
 80192a0:	1a52      	subs	r2, r2, r1
 80192a2:	f8ad 3010 	strh.w	r3, [sp, #16]
 80192a6:	f8ad 0012 	strh.w	r0, [sp, #18]
 80192aa:	fb92 f2fc 	sdiv	r2, r2, ip
 80192ae:	f8ad 200e 	strh.w	r2, [sp, #14]
 80192b2:	f10d 090c 	add.w	r9, sp, #12
 80192b6:	f10d 0a14 	add.w	sl, sp, #20
 80192ba:	e899 0003 	ldmia.w	r9, {r0, r1}
 80192be:	e88a 0003 	stmia.w	sl, {r0, r1}
 80192c2:	4641      	mov	r1, r8
 80192c4:	4650      	mov	r0, sl
 80192c6:	f7fe f90f 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 80192ca:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80192ce:	2b00      	cmp	r3, #0
 80192d0:	dd55      	ble.n	801937e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 80192d2:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	dd51      	ble.n	801937e <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14e>
 80192da:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80192de:	4649      	mov	r1, r9
 80192e0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80192e4:	4620      	mov	r0, r4
 80192e6:	1a9b      	subs	r3, r3, r2
 80192e8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80192ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80192f0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80192f4:	1a9b      	subs	r3, r3, r2
 80192f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80192fa:	6823      	ldr	r3, [r4, #0]
 80192fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80192fe:	4798      	blx	r3
 8019300:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019304:	2b00      	cmp	r3, #0
 8019306:	d047      	beq.n	8019398 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 8019308:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801930c:	6833      	ldr	r3, [r6, #0]
 801930e:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 8019312:	2b00      	cmp	r3, #0
 8019314:	d09c      	beq.n	8019250 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x20>
 8019316:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8019318:	882d      	ldrh	r5, [r5, #0]
 801931a:	428d      	cmp	r5, r1
 801931c:	d9a2      	bls.n	8019264 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x34>
 801931e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8019322:	6812      	ldr	r2, [r2, #0]
 8019324:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
 8019328:	785b      	ldrb	r3, [r3, #1]
 801932a:	9209      	str	r2, [sp, #36]	; 0x24
 801932c:	f3c3 0501 	ubfx	r5, r3, #0, #2
 8019330:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8019334:	9707      	str	r7, [sp, #28]
 8019336:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 801933a:	2300      	movs	r3, #0
 801933c:	f88d 5020 	strb.w	r5, [sp, #32]
 8019340:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8019344:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8019348:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801934c:	4b1b      	ldr	r3, [pc, #108]	; (80193bc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x18c>)
 801934e:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8019358:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801935c:	b10a      	cbz	r2, 8019362 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x132>
 801935e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8019360:	b904      	cbnz	r4, 8019364 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x134>
 8019362:	689c      	ldr	r4, [r3, #8]
 8019364:	4b16      	ldr	r3, [pc, #88]	; (80193c0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x190>)
 8019366:	6818      	ldr	r0, [r3, #0]
 8019368:	f7ea fa8e 	bl	8003888 <_ZNK8touchgfx5Texts7getTextEt>
 801936c:	ab07      	add	r3, sp, #28
 801936e:	9001      	str	r0, [sp, #4]
 8019370:	4620      	mov	r0, r4
 8019372:	9300      	str	r3, [sp, #0]
 8019374:	4653      	mov	r3, sl
 8019376:	e899 0006 	ldmia.w	r9, {r1, r2}
 801937a:	f7ea fa37 	bl	80037ec <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801937e:	b00c      	add	sp, #48	; 0x30
 8019380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019384:	1a5b      	subs	r3, r3, r1
 8019386:	f8ad 0010 	strh.w	r0, [sp, #16]
 801938a:	f8ad 2012 	strh.w	r2, [sp, #18]
 801938e:	fb93 f3fc 	sdiv	r3, r3, ip
 8019392:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019396:	e78c      	b.n	80192b2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x82>
 8019398:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801939c:	e7b6      	b.n	801930c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xdc>
 801939e:	bf00      	nop
 80193a0:	2002b8f0 	.word	0x2002b8f0
 80193a4:	0802d58c 	.word	0x0802d58c
 80193a8:	080309ac 	.word	0x080309ac
 80193ac:	0802d61a 	.word	0x0802d61a
 80193b0:	2002b8f4 	.word	0x2002b8f4
 80193b4:	0802d643 	.word	0x0802d643
 80193b8:	2002b8f8 	.word	0x2002b8f8
 80193bc:	2002b8a0 	.word	0x2002b8a0
 80193c0:	2002b8fc 	.word	0x2002b8fc

080193c4 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 80193c4:	2101      	movs	r1, #1
 80193c6:	2200      	movs	r2, #0
 80193c8:	b510      	push	{r4, lr}
 80193ca:	4c13      	ldr	r4, [pc, #76]	; (8019418 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 80193cc:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80193d0:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80193d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80193d8:	6004      	str	r4, [r0, #0]
 80193da:	4c10      	ldr	r4, [pc, #64]	; (801941c <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 80193dc:	8082      	strh	r2, [r0, #4]
 80193de:	80c2      	strh	r2, [r0, #6]
 80193e0:	8102      	strh	r2, [r0, #8]
 80193e2:	8142      	strh	r2, [r0, #10]
 80193e4:	8182      	strh	r2, [r0, #12]
 80193e6:	81c2      	strh	r2, [r0, #14]
 80193e8:	8202      	strh	r2, [r0, #16]
 80193ea:	8242      	strh	r2, [r0, #18]
 80193ec:	61c2      	str	r2, [r0, #28]
 80193ee:	8402      	strh	r2, [r0, #32]
 80193f0:	8442      	strh	r2, [r0, #34]	; 0x22
 80193f2:	6282      	str	r2, [r0, #40]	; 0x28
 80193f4:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 80193f8:	85c1      	strh	r1, [r0, #46]	; 0x2e
 80193fa:	8601      	strh	r1, [r0, #48]	; 0x30
 80193fc:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 8019400:	6344      	str	r4, [r0, #52]	; 0x34
 8019402:	8701      	strh	r1, [r0, #56]	; 0x38
 8019404:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8019408:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 801940c:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8019410:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 8019414:	bd10      	pop	{r4, pc}
 8019416:	bf00      	nop
 8019418:	08030944 	.word	0x08030944
 801941c:	0802ce4c 	.word	0x0802ce4c

08019420 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8019420:	b510      	push	{r4, lr}
 8019422:	6803      	ldr	r3, [r0, #0]
 8019424:	460c      	mov	r4, r1
 8019426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019428:	4798      	blx	r3
 801942a:	1b03      	subs	r3, r0, r4
 801942c:	4258      	negs	r0, r3
 801942e:	4158      	adcs	r0, r3
 8019430:	bd10      	pop	{r4, pc}
	...

08019434 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8019434:	4b01      	ldr	r3, [pc, #4]	; (801943c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8019436:	6019      	str	r1, [r3, #0]
 8019438:	4770      	bx	lr
 801943a:	bf00      	nop
 801943c:	2002b8a8 	.word	0x2002b8a8

08019440 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019444:	4696      	mov	lr, r2
 8019446:	b097      	sub	sp, #92	; 0x5c
 8019448:	4605      	mov	r5, r0
 801944a:	4614      	mov	r4, r2
 801944c:	460e      	mov	r6, r1
 801944e:	461f      	mov	r7, r3
 8019450:	f10d 0c1c 	add.w	ip, sp, #28
 8019454:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8019458:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801945c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8019460:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019464:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019468:	f8de 3000 	ldr.w	r3, [lr]
 801946c:	f104 0e14 	add.w	lr, r4, #20
 8019470:	f8cc 3000 	str.w	r3, [ip]
 8019474:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8019478:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801947c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019480:	f8de 3000 	ldr.w	r3, [lr]
 8019484:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8019488:	f8cc 3000 	str.w	r3, [ip]
 801948c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8019490:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019494:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019498:	f8de 3000 	ldr.w	r3, [lr]
 801949c:	4631      	mov	r1, r6
 801949e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80194a0:	4628      	mov	r0, r5
 80194a2:	f8cc 3000 	str.w	r3, [ip]
 80194a6:	682b      	ldr	r3, [r5, #0]
 80194a8:	9201      	str	r2, [sp, #4]
 80194aa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80194ac:	f8cd 8008 	str.w	r8, [sp, #8]
 80194b0:	9200      	str	r2, [sp, #0]
 80194b2:	aa07      	add	r2, sp, #28
 80194b4:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80194b8:	f8d3 b034 	ldr.w	fp, [r3, #52]	; 0x34
 80194bc:	463b      	mov	r3, r7
 80194be:	47d8      	blx	fp
 80194c0:	46a6      	mov	lr, r4
 80194c2:	f10d 0c1c 	add.w	ip, sp, #28
 80194c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80194ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80194ce:	f8de 3000 	ldr.w	r3, [lr]
 80194d2:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80194d6:	343c      	adds	r4, #60	; 0x3c
 80194d8:	f8cc 3000 	str.w	r3, [ip]
 80194dc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80194e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80194e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80194e8:	f8de 3000 	ldr.w	r3, [lr]
 80194ec:	f8cc 3000 	str.w	r3, [ip]
 80194f0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80194f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80194f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80194fa:	6823      	ldr	r3, [r4, #0]
 80194fc:	4631      	mov	r1, r6
 80194fe:	4628      	mov	r0, r5
 8019500:	f8cc 3000 	str.w	r3, [ip]
 8019504:	682b      	ldr	r3, [r5, #0]
 8019506:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801950a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801950c:	f8cd 8008 	str.w	r8, [sp, #8]
 8019510:	9201      	str	r2, [sp, #4]
 8019512:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019514:	9200      	str	r2, [sp, #0]
 8019516:	aa07      	add	r2, sp, #28
 8019518:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 801951a:	463b      	mov	r3, r7
 801951c:	47a0      	blx	r4
 801951e:	b017      	add	sp, #92	; 0x5c
 8019520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019524 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8019524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019528:	b08d      	sub	sp, #52	; 0x34
 801952a:	4688      	mov	r8, r1
 801952c:	f8d3 c000 	ldr.w	ip, [r3]
 8019530:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019532:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8019536:	680f      	ldr	r7, [r1, #0]
 8019538:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801953c:	eba7 070c 	sub.w	r7, r7, ip
 8019540:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8019544:	edd3 6a07 	vldr	s13, [r3, #28]
 8019548:	42bc      	cmp	r4, r7
 801954a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801954c:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8019550:	bfa8      	it	ge
 8019552:	463c      	movge	r4, r7
 8019554:	f9b1 9000 	ldrsh.w	r9, [r1]
 8019558:	f9ba 1000 	ldrsh.w	r1, [sl]
 801955c:	ee07 4a90 	vmov	s15, r4
 8019560:	eb09 0e0c 	add.w	lr, r9, ip
 8019564:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8019568:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801956c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8019570:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8019574:	4571      	cmp	r1, lr
 8019576:	ee25 4a04 	vmul.f32	s8, s10, s8
 801957a:	ee65 4a24 	vmul.f32	s9, s10, s9
 801957e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8019582:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019586:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801958a:	ee32 1a05 	vadd.f32	s2, s4, s10
 801958e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019592:	ee36 0a84 	vadd.f32	s0, s13, s8
 8019596:	ee61 1a87 	vmul.f32	s3, s3, s14
 801959a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801959e:	f340 808c 	ble.w	80196ba <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80195a2:	eba1 060e 	sub.w	r6, r1, lr
 80195a6:	fb96 f5f4 	sdiv	r5, r6, r4
 80195aa:	ee07 5a10 	vmov	s14, r5
 80195ae:	2d00      	cmp	r5, #0
 80195b0:	fb04 6615 	mls	r6, r4, r5, r6
 80195b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80195b8:	eea7 0a04 	vfma.f32	s0, s14, s8
 80195bc:	eee7 0a24 	vfma.f32	s1, s14, s9
 80195c0:	eea7 1a05 	vfma.f32	s2, s14, s10
 80195c4:	dd12      	ble.n	80195ec <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80195c6:	ee70 6a44 	vsub.f32	s13, s0, s8
 80195ca:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80195ce:	ee31 2a45 	vsub.f32	s4, s2, s10
 80195d2:	eef5 6a40 	vcmp.f32	s13, #0.0
 80195d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80195da:	bf14      	ite	ne
 80195dc:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80195e0:	eeb0 7a67 	vmoveq.f32	s14, s15
 80195e4:	ee61 1a87 	vmul.f32	s3, s3, s14
 80195e8:	ee22 2a07 	vmul.f32	s4, s4, s14
 80195ec:	fb05 f204 	mul.w	r2, r5, r4
 80195f0:	1abf      	subs	r7, r7, r2
 80195f2:	4494      	add	ip, r2
 80195f4:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80195f8:	4411      	add	r1, r2
 80195fa:	eb09 020c 	add.w	r2, r9, ip
 80195fe:	b209      	sxth	r1, r1
 8019600:	443a      	add	r2, r7
 8019602:	428a      	cmp	r2, r1
 8019604:	bfc4      	itt	gt
 8019606:	eba1 0209 	subgt.w	r2, r1, r9
 801960a:	eba2 070c 	subgt.w	r7, r2, ip
 801960e:	2f00      	cmp	r7, #0
 8019610:	dd50      	ble.n	80196b4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8019612:	fb97 f1f4 	sdiv	r1, r7, r4
 8019616:	fb04 7211 	mls	r2, r4, r1, r7
 801961a:	b90a      	cbnz	r2, 8019620 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801961c:	3901      	subs	r1, #1
 801961e:	4622      	mov	r2, r4
 8019620:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8019624:	6840      	ldr	r0, [r0, #4]
 8019626:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801962a:	44b6      	add	lr, r6
 801962c:	f8d0 a000 	ldr.w	sl, [r0]
 8019630:	2900      	cmp	r1, #0
 8019632:	bfcc      	ite	gt
 8019634:	46a1      	movgt	r9, r4
 8019636:	4691      	movle	r9, r2
 8019638:	900b      	str	r0, [sp, #44]	; 0x2c
 801963a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801963c:	fb04 e505 	mla	r5, r4, r5, lr
 8019640:	eef0 6a42 	vmov.f32	s13, s4
 8019644:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8019648:	9008      	str	r0, [sp, #32]
 801964a:	eeb0 7a61 	vmov.f32	s14, s3
 801964e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8019650:	695b      	ldr	r3, [r3, #20]
 8019652:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019656:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801965a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801965e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019660:	445b      	add	r3, fp
 8019662:	9307      	str	r3, [sp, #28]
 8019664:	ee16 3a90 	vmov	r3, s13
 8019668:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801966c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8019670:	ee21 3a23 	vmul.f32	s6, s2, s7
 8019674:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8019678:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801967c:	ee17 7a90 	vmov	r7, s15
 8019680:	ee73 7a42 	vsub.f32	s15, s6, s4
 8019684:	fb97 f7f4 	sdiv	r7, r7, r4
 8019688:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801968c:	ee17 ca90 	vmov	ip, s15
 8019690:	fb9c fcf4 	sdiv	ip, ip, r4
 8019694:	fb0c 3306 	mla	r3, ip, r6, r3
 8019698:	9302      	str	r3, [sp, #8]
 801969a:	ee17 3a10 	vmov	r3, s14
 801969e:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80196a2:	fb07 3706 	mla	r7, r7, r6, r3
 80196a6:	eba9 0306 	sub.w	r3, r9, r6
 80196aa:	e9cd 4700 	strd	r4, r7, [sp]
 80196ae:	f8da 4008 	ldr.w	r4, [sl, #8]
 80196b2:	47a0      	blx	r4
 80196b4:	b00d      	add	sp, #52	; 0x34
 80196b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196ba:	2500      	movs	r5, #0
 80196bc:	462e      	mov	r6, r5
 80196be:	e799      	b.n	80195f4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080196c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80196c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196c4:	b0db      	sub	sp, #364	; 0x16c
 80196c6:	461d      	mov	r5, r3
 80196c8:	4614      	mov	r4, r2
 80196ca:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80196ce:	910f      	str	r1, [sp, #60]	; 0x3c
 80196d0:	4629      	mov	r1, r5
 80196d2:	930a      	str	r3, [sp, #40]	; 0x28
 80196d4:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80196d8:	9009      	str	r0, [sp, #36]	; 0x24
 80196da:	930b      	str	r3, [sp, #44]	; 0x2c
 80196dc:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80196e0:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80196e4:	9310      	str	r3, [sp, #64]	; 0x40
 80196e6:	6803      	ldr	r3, [r0, #0]
 80196e8:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 80196ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80196ee:	47b8      	blx	r7
 80196f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196f2:	6058      	str	r0, [r3, #4]
 80196f4:	2800      	cmp	r0, #0
 80196f6:	f000 83a1 	beq.w	8019e3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80196fa:	682b      	ldr	r3, [r5, #0]
 80196fc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8019700:	ed94 7a02 	vldr	s14, [r4, #8]
 8019704:	9314      	str	r3, [sp, #80]	; 0x50
 8019706:	686b      	ldr	r3, [r5, #4]
 8019708:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801970c:	9315      	str	r3, [sp, #84]	; 0x54
 801970e:	4bc1      	ldr	r3, [pc, #772]	; (8019a14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8019710:	7819      	ldrb	r1, [r3, #0]
 8019712:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8019716:	2900      	cmp	r1, #0
 8019718:	bf16      	itet	ne
 801971a:	4619      	movne	r1, r3
 801971c:	4611      	moveq	r1, r2
 801971e:	4613      	movne	r3, r2
 8019720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019724:	9116      	str	r1, [sp, #88]	; 0x58
 8019726:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801972a:	f240 8387 	bls.w	8019e3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801972e:	ed94 7a07 	vldr	s14, [r4, #28]
 8019732:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801973a:	f240 837f 	bls.w	8019e3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801973e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8019742:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801974a:	f240 8377 	bls.w	8019e3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801974e:	6822      	ldr	r2, [r4, #0]
 8019750:	4bb1      	ldr	r3, [pc, #708]	; (8019a18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8019752:	429a      	cmp	r2, r3
 8019754:	f2c0 8372 	blt.w	8019e3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019758:	49b0      	ldr	r1, [pc, #704]	; (8019a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801975a:	6963      	ldr	r3, [r4, #20]
 801975c:	428a      	cmp	r2, r1
 801975e:	f300 836d 	bgt.w	8019e3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019762:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8019766:	48ae      	ldr	r0, [pc, #696]	; (8019a20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8019768:	33ff      	adds	r3, #255	; 0xff
 801976a:	4283      	cmp	r3, r0
 801976c:	f200 8366 	bhi.w	8019e3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019770:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019772:	4dac      	ldr	r5, [pc, #688]	; (8019a24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8019774:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8019778:	33ff      	adds	r3, #255	; 0xff
 801977a:	42ab      	cmp	r3, r5
 801977c:	f200 835e 	bhi.w	8019e3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019780:	6862      	ldr	r2, [r4, #4]
 8019782:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8019786:	33ff      	adds	r3, #255	; 0xff
 8019788:	4283      	cmp	r3, r0
 801978a:	f200 8357 	bhi.w	8019e3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801978e:	69a1      	ldr	r1, [r4, #24]
 8019790:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8019794:	33ff      	adds	r3, #255	; 0xff
 8019796:	4283      	cmp	r3, r0
 8019798:	f200 8350 	bhi.w	8019e3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801979c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801979e:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 80197a2:	30ff      	adds	r0, #255	; 0xff
 80197a4:	42a8      	cmp	r0, r5
 80197a6:	f200 8349 	bhi.w	8019e3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80197aa:	428a      	cmp	r2, r1
 80197ac:	f280 8110 	bge.w	80199d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80197b0:	429a      	cmp	r2, r3
 80197b2:	f300 8119 	bgt.w	80199e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80197b6:	4299      	cmp	r1, r3
 80197b8:	f280 811d 	bge.w	80199f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80197bc:	2502      	movs	r5, #2
 80197be:	2701      	movs	r7, #1
 80197c0:	46a9      	mov	r9, r5
 80197c2:	46b8      	mov	r8, r7
 80197c4:	f04f 0a00 	mov.w	sl, #0
 80197c8:	4621      	mov	r1, r4
 80197ca:	a849      	add	r0, sp, #292	; 0x124
 80197cc:	f003 fc74 	bl	801d0b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80197d0:	4622      	mov	r2, r4
 80197d2:	4653      	mov	r3, sl
 80197d4:	a949      	add	r1, sp, #292	; 0x124
 80197d6:	f8cd 9000 	str.w	r9, [sp]
 80197da:	a819      	add	r0, sp, #100	; 0x64
 80197dc:	f003 fd9c 	bl	801d318 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80197e0:	4622      	mov	r2, r4
 80197e2:	4653      	mov	r3, sl
 80197e4:	a949      	add	r1, sp, #292	; 0x124
 80197e6:	f8cd 8000 	str.w	r8, [sp]
 80197ea:	a829      	add	r0, sp, #164	; 0xa4
 80197ec:	f003 fd94 	bl	801d318 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80197f0:	4643      	mov	r3, r8
 80197f2:	4622      	mov	r2, r4
 80197f4:	a949      	add	r1, sp, #292	; 0x124
 80197f6:	f8cd 9000 	str.w	r9, [sp]
 80197fa:	a839      	add	r0, sp, #228	; 0xe4
 80197fc:	f003 fd8c 	bl	801d318 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019800:	42af      	cmp	r7, r5
 8019802:	af12      	add	r7, sp, #72	; 0x48
 8019804:	bfb7      	itett	lt
 8019806:	2300      	movlt	r3, #0
 8019808:	2301      	movge	r3, #1
 801980a:	ad29      	addlt	r5, sp, #164	; 0xa4
 801980c:	ac19      	addlt	r4, sp, #100	; 0x64
 801980e:	bfb1      	iteee	lt
 8019810:	930e      	strlt	r3, [sp, #56]	; 0x38
 8019812:	ad19      	addge	r5, sp, #100	; 0x64
 8019814:	930e      	strge	r3, [sp, #56]	; 0x38
 8019816:	ac29      	addge	r4, sp, #164	; 0xa4
 8019818:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801981a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801981e:	e887 0003 	stmia.w	r7, {r0, r1}
 8019822:	b928      	cbnz	r0, 8019830 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8019824:	4b80      	ldr	r3, [pc, #512]	; (8019a28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8019826:	6818      	ldr	r0, [r3, #0]
 8019828:	6803      	ldr	r3, [r0, #0]
 801982a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801982c:	4798      	blx	r3
 801982e:	6038      	str	r0, [r7, #0]
 8019830:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019832:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8019836:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801983a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801983c:	930c      	str	r3, [sp, #48]	; 0x30
 801983e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019840:	6963      	ldr	r3, [r4, #20]
 8019842:	440b      	add	r3, r1
 8019844:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019848:	4408      	add	r0, r1
 801984a:	b200      	sxth	r0, r0
 801984c:	4283      	cmp	r3, r0
 801984e:	900d      	str	r0, [sp, #52]	; 0x34
 8019850:	f280 80dd 	bge.w	8019a0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8019854:	428b      	cmp	r3, r1
 8019856:	da08      	bge.n	801986a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019858:	2a00      	cmp	r2, #0
 801985a:	dd06      	ble.n	801986a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801985c:	1acb      	subs	r3, r1, r3
 801985e:	429a      	cmp	r2, r3
 8019860:	f2c0 80e4 	blt.w	8019a2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8019864:	2b00      	cmp	r3, #0
 8019866:	f300 80e2 	bgt.w	8019a2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801986a:	6967      	ldr	r7, [r4, #20]
 801986c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8019870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019872:	443b      	add	r3, r7
 8019874:	461f      	mov	r7, r3
 8019876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019878:	1bdf      	subs	r7, r3, r7
 801987a:	4297      	cmp	r7, r2
 801987c:	bfa8      	it	ge
 801987e:	4617      	movge	r7, r2
 8019880:	2f00      	cmp	r7, #0
 8019882:	f340 8166 	ble.w	8019b52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8019886:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019888:	6829      	ldr	r1, [r5, #0]
 801988a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801988e:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019892:	4411      	add	r1, r2
 8019894:	6820      	ldr	r0, [r4, #0]
 8019896:	4299      	cmp	r1, r3
 8019898:	dd1a      	ble.n	80198d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801989a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801989e:	4402      	add	r2, r0
 80198a0:	440b      	add	r3, r1
 80198a2:	b21b      	sxth	r3, r3
 80198a4:	429a      	cmp	r2, r3
 80198a6:	dc13      	bgt.n	80198d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80198a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80198aa:	a912      	add	r1, sp, #72	; 0x48
 80198ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	9206      	str	r2, [sp, #24]
 80198b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80198b6:	9500      	str	r5, [sp, #0]
 80198b8:	9205      	str	r2, [sp, #20]
 80198ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80198bc:	e9cd b203 	strd	fp, r2, [sp, #12]
 80198c0:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80198c2:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80198c6:	aa49      	add	r2, sp, #292	; 0x124
 80198c8:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 80198cc:	4623      	mov	r3, r4
 80198ce:	47c8      	blx	r9
 80198d0:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80198d4:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80198d8:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80198dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80198e0:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80198e4:	68a1      	ldr	r1, [r4, #8]
 80198e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80198ea:	ed94 6a08 	vldr	s12, [r4, #32]
 80198ee:	edd4 6a07 	vldr	s13, [r4, #28]
 80198f2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80198f6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80198fa:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80198fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019902:	edc4 6a07 	vstr	s13, [r4, #28]
 8019906:	441a      	add	r2, r3
 8019908:	6963      	ldr	r3, [r4, #20]
 801990a:	3301      	adds	r3, #1
 801990c:	6022      	str	r2, [r4, #0]
 801990e:	6163      	str	r3, [r4, #20]
 8019910:	69a3      	ldr	r3, [r4, #24]
 8019912:	3b01      	subs	r3, #1
 8019914:	61a3      	str	r3, [r4, #24]
 8019916:	6923      	ldr	r3, [r4, #16]
 8019918:	440b      	add	r3, r1
 801991a:	68e1      	ldr	r1, [r4, #12]
 801991c:	428b      	cmp	r3, r1
 801991e:	6123      	str	r3, [r4, #16]
 8019920:	db15      	blt.n	801994e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8019922:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8019926:	3201      	adds	r2, #1
 8019928:	1a5b      	subs	r3, r3, r1
 801992a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801992e:	6022      	str	r2, [r4, #0]
 8019930:	6123      	str	r3, [r4, #16]
 8019932:	edc4 6a07 	vstr	s13, [r4, #28]
 8019936:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801993a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801993e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019942:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8019946:	ee77 7a27 	vadd.f32	s15, s14, s15
 801994a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801994e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8019952:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8019956:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801995a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801995e:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8019962:	68a9      	ldr	r1, [r5, #8]
 8019964:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019968:	ed95 6a08 	vldr	s12, [r5, #32]
 801996c:	edd5 6a07 	vldr	s13, [r5, #28]
 8019970:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019974:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019978:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801997c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019980:	edc5 6a07 	vstr	s13, [r5, #28]
 8019984:	441a      	add	r2, r3
 8019986:	696b      	ldr	r3, [r5, #20]
 8019988:	3301      	adds	r3, #1
 801998a:	602a      	str	r2, [r5, #0]
 801998c:	616b      	str	r3, [r5, #20]
 801998e:	69ab      	ldr	r3, [r5, #24]
 8019990:	3b01      	subs	r3, #1
 8019992:	61ab      	str	r3, [r5, #24]
 8019994:	692b      	ldr	r3, [r5, #16]
 8019996:	440b      	add	r3, r1
 8019998:	68e9      	ldr	r1, [r5, #12]
 801999a:	428b      	cmp	r3, r1
 801999c:	612b      	str	r3, [r5, #16]
 801999e:	db15      	blt.n	80199cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80199a0:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80199a4:	3201      	adds	r2, #1
 80199a6:	1a5b      	subs	r3, r3, r1
 80199a8:	ee76 6a26 	vadd.f32	s13, s12, s13
 80199ac:	602a      	str	r2, [r5, #0]
 80199ae:	612b      	str	r3, [r5, #16]
 80199b0:	edc5 6a07 	vstr	s13, [r5, #28]
 80199b4:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80199b8:	ee36 7a87 	vadd.f32	s14, s13, s14
 80199bc:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80199c0:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80199c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80199c8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80199cc:	3f01      	subs	r7, #1
 80199ce:	e757      	b.n	8019880 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80199d0:	4299      	cmp	r1, r3
 80199d2:	dc13      	bgt.n	80199fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80199d4:	429a      	cmp	r2, r3
 80199d6:	da14      	bge.n	8019a02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80199d8:	2502      	movs	r5, #2
 80199da:	2703      	movs	r7, #3
 80199dc:	f04f 0800 	mov.w	r8, #0
 80199e0:	46a9      	mov	r9, r5
 80199e2:	f04f 0a01 	mov.w	sl, #1
 80199e6:	e6ef      	b.n	80197c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80199e8:	2501      	movs	r5, #1
 80199ea:	2700      	movs	r7, #0
 80199ec:	46a9      	mov	r9, r5
 80199ee:	46b8      	mov	r8, r7
 80199f0:	f04f 0a02 	mov.w	sl, #2
 80199f4:	e6e8      	b.n	80197c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80199f6:	2501      	movs	r5, #1
 80199f8:	2702      	movs	r7, #2
 80199fa:	e6e1      	b.n	80197c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80199fc:	2500      	movs	r5, #0
 80199fe:	2701      	movs	r7, #1
 8019a00:	e7f4      	b.n	80199ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8019a02:	2702      	movs	r7, #2
 8019a04:	2503      	movs	r5, #3
 8019a06:	f04f 0900 	mov.w	r9, #0
 8019a0a:	46b8      	mov	r8, r7
 8019a0c:	e7e9      	b.n	80199e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8019a0e:	4613      	mov	r3, r2
 8019a10:	e728      	b.n	8019864 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8019a12:	bf00      	nop
 8019a14:	2002b898 	.word	0x2002b898
 8019a18:	fffd8f01 	.word	0xfffd8f01
 8019a1c:	00027100 	.word	0x00027100
 8019a20:	0004e1ff 	.word	0x0004e1ff
 8019a24:	0004e1fe 	.word	0x0004e1fe
 8019a28:	2002b8a0 	.word	0x2002b8a0
 8019a2c:	4613      	mov	r3, r2
 8019a2e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8019a30:	469e      	mov	lr, r3
 8019a32:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8019a34:	469c      	mov	ip, r3
 8019a36:	9111      	str	r1, [sp, #68]	; 0x44
 8019a38:	f04f 0900 	mov.w	r9, #0
 8019a3c:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8019a40:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8019a44:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8019a48:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8019a4c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8019a50:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8019a54:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8019a58:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8019a5c:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8019a60:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8019a64:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8019a68:	f1bc 0f00 	cmp.w	ip, #0
 8019a6c:	d147      	bne.n	8019afe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8019a6e:	eb03 0c07 	add.w	ip, r3, r7
 8019a72:	1ad7      	subs	r7, r2, r3
 8019a74:	f1b9 0f00 	cmp.w	r9, #0
 8019a78:	d009      	beq.n	8019a8e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8019a7a:	9029      	str	r0, [sp, #164]	; 0xa4
 8019a7c:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8019a80:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8019a84:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8019a88:	912d      	str	r1, [sp, #180]	; 0xb4
 8019a8a:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8019a8e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8019a90:	f04f 0800 	mov.w	r8, #0
 8019a94:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019a98:	9111      	str	r1, [sp, #68]	; 0x44
 8019a9a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8019a9e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8019aa2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8019aa6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8019aaa:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8019aae:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8019ab2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8019ab6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8019aba:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8019abe:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8019ac2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8019ac6:	f1be 0f00 	cmp.w	lr, #0
 8019aca:	d031      	beq.n	8019b30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8019acc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019ace:	4450      	add	r0, sl
 8019ad0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019ad4:	4431      	add	r1, r6
 8019ad6:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019ada:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019ade:	4549      	cmp	r1, r9
 8019ae0:	db08      	blt.n	8019af4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8019ae2:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019ae6:	3001      	adds	r0, #1
 8019ae8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019aec:	eba1 0109 	sub.w	r1, r1, r9
 8019af0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019af4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019af8:	f04f 0801 	mov.w	r8, #1
 8019afc:	e7e3      	b.n	8019ac6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8019afe:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019b00:	4450      	add	r0, sl
 8019b02:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019b06:	4431      	add	r1, r6
 8019b08:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019b0c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019b10:	4541      	cmp	r1, r8
 8019b12:	db08      	blt.n	8019b26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8019b14:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019b18:	3001      	adds	r0, #1
 8019b1a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019b1e:	eba1 0108 	sub.w	r1, r1, r8
 8019b22:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019b26:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019b2a:	f04f 0901 	mov.w	r9, #1
 8019b2e:	e79b      	b.n	8019a68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8019b30:	449c      	add	ip, r3
 8019b32:	1aff      	subs	r7, r7, r3
 8019b34:	f1b8 0f00 	cmp.w	r8, #0
 8019b38:	d009      	beq.n	8019b4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8019b3a:	9019      	str	r0, [sp, #100]	; 0x64
 8019b3c:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8019b40:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8019b44:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8019b48:	911d      	str	r1, [sp, #116]	; 0x74
 8019b4a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8019b4e:	1ad2      	subs	r2, r2, r3
 8019b50:	e68b      	b.n	801986a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019b52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019b54:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	f000 80d1 	beq.w	8019cfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8019b5c:	ad19      	add	r5, sp, #100	; 0x64
 8019b5e:	ac39      	add	r4, sp, #228	; 0xe4
 8019b60:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019b62:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8019b66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019b6a:	930c      	str	r3, [sp, #48]	; 0x30
 8019b6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019b6e:	6963      	ldr	r3, [r4, #20]
 8019b70:	440b      	add	r3, r1
 8019b72:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019b76:	4408      	add	r0, r1
 8019b78:	b200      	sxth	r0, r0
 8019b7a:	4283      	cmp	r3, r0
 8019b7c:	900d      	str	r0, [sp, #52]	; 0x34
 8019b7e:	f280 80c1 	bge.w	8019d04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8019b82:	428b      	cmp	r3, r1
 8019b84:	da08      	bge.n	8019b98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019b86:	2a00      	cmp	r2, #0
 8019b88:	dd06      	ble.n	8019b98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019b8a:	1acb      	subs	r3, r1, r3
 8019b8c:	429a      	cmp	r2, r3
 8019b8e:	f2c0 80bb 	blt.w	8019d08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	f300 80b9 	bgt.w	8019d0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8019b98:	6967      	ldr	r7, [r4, #20]
 8019b9a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8019b9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019ba0:	443b      	add	r3, r7
 8019ba2:	461f      	mov	r7, r3
 8019ba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019ba6:	1bdf      	subs	r7, r3, r7
 8019ba8:	4297      	cmp	r7, r2
 8019baa:	bfa8      	it	ge
 8019bac:	4617      	movge	r7, r2
 8019bae:	2f00      	cmp	r7, #0
 8019bb0:	f340 813c 	ble.w	8019e2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8019bb4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019bb6:	6829      	ldr	r1, [r5, #0]
 8019bb8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019bbc:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019bc0:	4411      	add	r1, r2
 8019bc2:	6820      	ldr	r0, [r4, #0]
 8019bc4:	4299      	cmp	r1, r3
 8019bc6:	dd1a      	ble.n	8019bfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019bc8:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019bcc:	4402      	add	r2, r0
 8019bce:	440b      	add	r3, r1
 8019bd0:	b21b      	sxth	r3, r3
 8019bd2:	429a      	cmp	r2, r3
 8019bd4:	dc13      	bgt.n	8019bfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019bd6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019bd8:	a912      	add	r1, sp, #72	; 0x48
 8019bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	9206      	str	r2, [sp, #24]
 8019be2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019be4:	9500      	str	r5, [sp, #0]
 8019be6:	9205      	str	r2, [sp, #20]
 8019be8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019bea:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019bee:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019bf0:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019bf4:	aa49      	add	r2, sp, #292	; 0x124
 8019bf6:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 8019bfa:	4623      	mov	r3, r4
 8019bfc:	47c8      	blx	r9
 8019bfe:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8019c02:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8019c06:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8019c0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019c0e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8019c12:	68a1      	ldr	r1, [r4, #8]
 8019c14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019c18:	ed94 6a08 	vldr	s12, [r4, #32]
 8019c1c:	edd4 6a07 	vldr	s13, [r4, #28]
 8019c20:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019c24:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019c28:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019c2c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019c30:	edc4 6a07 	vstr	s13, [r4, #28]
 8019c34:	441a      	add	r2, r3
 8019c36:	6963      	ldr	r3, [r4, #20]
 8019c38:	3301      	adds	r3, #1
 8019c3a:	6022      	str	r2, [r4, #0]
 8019c3c:	6163      	str	r3, [r4, #20]
 8019c3e:	69a3      	ldr	r3, [r4, #24]
 8019c40:	3b01      	subs	r3, #1
 8019c42:	61a3      	str	r3, [r4, #24]
 8019c44:	6923      	ldr	r3, [r4, #16]
 8019c46:	440b      	add	r3, r1
 8019c48:	68e1      	ldr	r1, [r4, #12]
 8019c4a:	428b      	cmp	r3, r1
 8019c4c:	6123      	str	r3, [r4, #16]
 8019c4e:	db15      	blt.n	8019c7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8019c50:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8019c54:	3201      	adds	r2, #1
 8019c56:	1a5b      	subs	r3, r3, r1
 8019c58:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019c5c:	6022      	str	r2, [r4, #0]
 8019c5e:	6123      	str	r3, [r4, #16]
 8019c60:	edc4 6a07 	vstr	s13, [r4, #28]
 8019c64:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8019c68:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019c6c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019c70:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8019c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019c78:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019c7c:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8019c80:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8019c84:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8019c88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019c8c:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8019c90:	68a9      	ldr	r1, [r5, #8]
 8019c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019c96:	ed95 6a08 	vldr	s12, [r5, #32]
 8019c9a:	edd5 6a07 	vldr	s13, [r5, #28]
 8019c9e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019ca2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019ca6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019caa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019cae:	edc5 6a07 	vstr	s13, [r5, #28]
 8019cb2:	441a      	add	r2, r3
 8019cb4:	696b      	ldr	r3, [r5, #20]
 8019cb6:	3301      	adds	r3, #1
 8019cb8:	602a      	str	r2, [r5, #0]
 8019cba:	616b      	str	r3, [r5, #20]
 8019cbc:	69ab      	ldr	r3, [r5, #24]
 8019cbe:	3b01      	subs	r3, #1
 8019cc0:	61ab      	str	r3, [r5, #24]
 8019cc2:	692b      	ldr	r3, [r5, #16]
 8019cc4:	440b      	add	r3, r1
 8019cc6:	68e9      	ldr	r1, [r5, #12]
 8019cc8:	428b      	cmp	r3, r1
 8019cca:	612b      	str	r3, [r5, #16]
 8019ccc:	db15      	blt.n	8019cfa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8019cce:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8019cd2:	3201      	adds	r2, #1
 8019cd4:	1a5b      	subs	r3, r3, r1
 8019cd6:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019cda:	602a      	str	r2, [r5, #0]
 8019cdc:	612b      	str	r3, [r5, #16]
 8019cde:	edc5 6a07 	vstr	s13, [r5, #28]
 8019ce2:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8019ce6:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019cea:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019cee:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8019cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019cf6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019cfa:	3f01      	subs	r7, #1
 8019cfc:	e757      	b.n	8019bae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8019cfe:	ad39      	add	r5, sp, #228	; 0xe4
 8019d00:	ac19      	add	r4, sp, #100	; 0x64
 8019d02:	e72d      	b.n	8019b60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8019d04:	4613      	mov	r3, r2
 8019d06:	e744      	b.n	8019b92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8019d08:	4613      	mov	r3, r2
 8019d0a:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8019d0c:	469e      	mov	lr, r3
 8019d0e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8019d12:	461f      	mov	r7, r3
 8019d14:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8019d18:	f04f 0900 	mov.w	r9, #0
 8019d1c:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8019d20:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8019d24:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8019d28:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8019d2c:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8019d30:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8019d32:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8019d36:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8019d3a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8019d3e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8019d42:	960e      	str	r6, [sp, #56]	; 0x38
 8019d44:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8019d48:	2f00      	cmp	r7, #0
 8019d4a:	d146      	bne.n	8019dda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8019d4c:	449c      	add	ip, r3
 8019d4e:	1ad7      	subs	r7, r2, r3
 8019d50:	f1b9 0f00 	cmp.w	r9, #0
 8019d54:	d009      	beq.n	8019d6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8019d56:	9039      	str	r0, [sp, #228]	; 0xe4
 8019d58:	913d      	str	r1, [sp, #244]	; 0xf4
 8019d5a:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8019d5e:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8019d62:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8019d66:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8019d6a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8019d6c:	f04f 0800 	mov.w	r8, #0
 8019d70:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019d74:	910e      	str	r1, [sp, #56]	; 0x38
 8019d76:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8019d7a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8019d7e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8019d82:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8019d86:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8019d8a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8019d8e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8019d92:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8019d96:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8019d9a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8019d9e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8019da2:	f1be 0f00 	cmp.w	lr, #0
 8019da6:	d030      	beq.n	8019e0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8019da8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019daa:	4450      	add	r0, sl
 8019dac:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019db0:	4431      	add	r1, r6
 8019db2:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019db6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019dba:	4549      	cmp	r1, r9
 8019dbc:	db08      	blt.n	8019dd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8019dbe:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019dc2:	3001      	adds	r0, #1
 8019dc4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019dc8:	eba1 0109 	sub.w	r1, r1, r9
 8019dcc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019dd0:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019dd4:	f04f 0801 	mov.w	r8, #1
 8019dd8:	e7e3      	b.n	8019da2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8019dda:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019ddc:	4450      	add	r0, sl
 8019dde:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019de2:	4431      	add	r1, r6
 8019de4:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019de8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019dec:	4541      	cmp	r1, r8
 8019dee:	db08      	blt.n	8019e02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8019df0:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019df4:	3001      	adds	r0, #1
 8019df6:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019dfa:	eba1 0108 	sub.w	r1, r1, r8
 8019dfe:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019e02:	3f01      	subs	r7, #1
 8019e04:	f04f 0901 	mov.w	r9, #1
 8019e08:	e79e      	b.n	8019d48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8019e0a:	449c      	add	ip, r3
 8019e0c:	1aff      	subs	r7, r7, r3
 8019e0e:	f1b8 0f00 	cmp.w	r8, #0
 8019e12:	d009      	beq.n	8019e28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8019e14:	9019      	str	r0, [sp, #100]	; 0x64
 8019e16:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8019e1a:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8019e1e:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8019e22:	911d      	str	r1, [sp, #116]	; 0x74
 8019e24:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8019e28:	1ad2      	subs	r2, r2, r3
 8019e2a:	e6b5      	b.n	8019b98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019e2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019e2e:	681b      	ldr	r3, [r3, #0]
 8019e30:	b923      	cbnz	r3, 8019e3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019e32:	4b04      	ldr	r3, [pc, #16]	; (8019e44 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8019e34:	6818      	ldr	r0, [r3, #0]
 8019e36:	6803      	ldr	r3, [r0, #0]
 8019e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e3a:	4798      	blx	r3
 8019e3c:	b05b      	add	sp, #364	; 0x16c
 8019e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e42:	bf00      	nop
 8019e44:	2002b8a0 	.word	0x2002b8a0

08019e48 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8019e48:	b570      	push	{r4, r5, r6, lr}
 8019e4a:	4604      	mov	r4, r0
 8019e4c:	2500      	movs	r5, #0
 8019e4e:	9804      	ldr	r0, [sp, #16]
 8019e50:	7223      	strb	r3, [r4, #8]
 8019e52:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8019e56:	8025      	strh	r5, [r4, #0]
 8019e58:	6061      	str	r1, [r4, #4]
 8019e5a:	7263      	strb	r3, [r4, #9]
 8019e5c:	60e0      	str	r0, [r4, #12]
 8019e5e:	8222      	strh	r2, [r4, #16]
 8019e60:	8265      	strh	r5, [r4, #18]
 8019e62:	82a5      	strh	r5, [r4, #20]
 8019e64:	82e5      	strh	r5, [r4, #22]
 8019e66:	8325      	strh	r5, [r4, #24]
 8019e68:	8365      	strh	r5, [r4, #26]
 8019e6a:	83a5      	strh	r5, [r4, #28]
 8019e6c:	77a5      	strb	r5, [r4, #30]
 8019e6e:	6803      	ldr	r3, [r0, #0]
 8019e70:	695b      	ldr	r3, [r3, #20]
 8019e72:	4798      	blx	r3
 8019e74:	4606      	mov	r6, r0
 8019e76:	b1f8      	cbz	r0, 8019eb8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8019e78:	68e0      	ldr	r0, [r4, #12]
 8019e7a:	4631      	mov	r1, r6
 8019e7c:	6803      	ldr	r3, [r0, #0]
 8019e7e:	68db      	ldr	r3, [r3, #12]
 8019e80:	4798      	blx	r3
 8019e82:	7b43      	ldrb	r3, [r0, #13]
 8019e84:	7a82      	ldrb	r2, [r0, #10]
 8019e86:	4605      	mov	r5, r0
 8019e88:	005b      	lsls	r3, r3, #1
 8019e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019e8e:	4313      	orrs	r3, r2
 8019e90:	83a3      	strh	r3, [r4, #28]
 8019e92:	7a63      	ldrb	r3, [r4, #9]
 8019e94:	2b04      	cmp	r3, #4
 8019e96:	d10f      	bne.n	8019eb8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x70>
 8019e98:	68e0      	ldr	r0, [r4, #12]
 8019e9a:	462a      	mov	r2, r5
 8019e9c:	4631      	mov	r1, r6
 8019e9e:	6803      	ldr	r3, [r0, #0]
 8019ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019ea2:	4798      	blx	r3
 8019ea4:	7b6b      	ldrb	r3, [r5, #13]
 8019ea6:	005b      	lsls	r3, r3, #1
 8019ea8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019eac:	7aab      	ldrb	r3, [r5, #10]
 8019eae:	4313      	orrs	r3, r2
 8019eb0:	4418      	add	r0, r3
 8019eb2:	8ba3      	ldrh	r3, [r4, #28]
 8019eb4:	4418      	add	r0, r3
 8019eb6:	83a0      	strh	r0, [r4, #28]
 8019eb8:	4620      	mov	r0, r4
 8019eba:	bd70      	pop	{r4, r5, r6, pc}

08019ebc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8019ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ec0:	2400      	movs	r4, #0
 8019ec2:	b085      	sub	sp, #20
 8019ec4:	4681      	mov	r9, r0
 8019ec6:	4688      	mov	r8, r1
 8019ec8:	4692      	mov	sl, r2
 8019eca:	469b      	mov	fp, r3
 8019ecc:	4627      	mov	r7, r4
 8019ece:	4625      	mov	r5, r4
 8019ed0:	4626      	mov	r6, r4
 8019ed2:	4554      	cmp	r4, sl
 8019ed4:	da2a      	bge.n	8019f2c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019ed6:	2300      	movs	r3, #0
 8019ed8:	9303      	str	r3, [sp, #12]
 8019eda:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019ede:	429d      	cmp	r5, r3
 8019ee0:	d004      	beq.n	8019eec <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8019ee2:	f242 030b 	movw	r3, #8203	; 0x200b
 8019ee6:	429d      	cmp	r5, r3
 8019ee8:	bf18      	it	ne
 8019eea:	462f      	movne	r7, r5
 8019eec:	ab03      	add	r3, sp, #12
 8019eee:	4642      	mov	r2, r8
 8019ef0:	4659      	mov	r1, fp
 8019ef2:	4648      	mov	r0, r9
 8019ef4:	f002 fe64 	bl	801cbc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019ef8:	4605      	mov	r5, r0
 8019efa:	b1b8      	cbz	r0, 8019f2c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019efc:	280a      	cmp	r0, #10
 8019efe:	d015      	beq.n	8019f2c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019f00:	9a03      	ldr	r2, [sp, #12]
 8019f02:	b18a      	cbz	r2, 8019f28 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8019f04:	7b50      	ldrb	r0, [r2, #13]
 8019f06:	4639      	mov	r1, r7
 8019f08:	7a93      	ldrb	r3, [r2, #10]
 8019f0a:	0040      	lsls	r0, r0, #1
 8019f0c:	8895      	ldrh	r5, [r2, #4]
 8019f0e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8019f12:	4303      	orrs	r3, r0
 8019f14:	4640      	mov	r0, r8
 8019f16:	9301      	str	r3, [sp, #4]
 8019f18:	f8d8 3000 	ldr.w	r3, [r8]
 8019f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019f1e:	4798      	blx	r3
 8019f20:	9b01      	ldr	r3, [sp, #4]
 8019f22:	4418      	add	r0, r3
 8019f24:	4406      	add	r6, r0
 8019f26:	b2b6      	uxth	r6, r6
 8019f28:	3401      	adds	r4, #1
 8019f2a:	e7d2      	b.n	8019ed2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8019f2c:	4630      	mov	r0, r6
 8019f2e:	b005      	add	sp, #20
 8019f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019f34 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8019f34:	2a02      	cmp	r2, #2
 8019f36:	b530      	push	{r4, r5, lr}
 8019f38:	d011      	beq.n	8019f5e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8019f3a:	2a03      	cmp	r2, #3
 8019f3c:	d01c      	beq.n	8019f78 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8019f3e:	2a01      	cmp	r2, #1
 8019f40:	d10c      	bne.n	8019f5c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019f42:	888b      	ldrh	r3, [r1, #4]
 8019f44:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8019f48:	8801      	ldrh	r1, [r0, #0]
 8019f4a:	1a9b      	subs	r3, r3, r2
 8019f4c:	8844      	ldrh	r4, [r0, #2]
 8019f4e:	1a5b      	subs	r3, r3, r1
 8019f50:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019f54:	8004      	strh	r4, [r0, #0]
 8019f56:	8043      	strh	r3, [r0, #2]
 8019f58:	8081      	strh	r1, [r0, #4]
 8019f5a:	80c2      	strh	r2, [r0, #6]
 8019f5c:	bd30      	pop	{r4, r5, pc}
 8019f5e:	88cb      	ldrh	r3, [r1, #6]
 8019f60:	88c2      	ldrh	r2, [r0, #6]
 8019f62:	1a9b      	subs	r3, r3, r2
 8019f64:	8842      	ldrh	r2, [r0, #2]
 8019f66:	1a9b      	subs	r3, r3, r2
 8019f68:	888a      	ldrh	r2, [r1, #4]
 8019f6a:	8881      	ldrh	r1, [r0, #4]
 8019f6c:	8043      	strh	r3, [r0, #2]
 8019f6e:	1a52      	subs	r2, r2, r1
 8019f70:	8801      	ldrh	r1, [r0, #0]
 8019f72:	1a52      	subs	r2, r2, r1
 8019f74:	8002      	strh	r2, [r0, #0]
 8019f76:	e7f1      	b.n	8019f5c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019f78:	88cb      	ldrh	r3, [r1, #6]
 8019f7a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019f7e:	8841      	ldrh	r1, [r0, #2]
 8019f80:	1a9b      	subs	r3, r3, r2
 8019f82:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019f86:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8019f8a:	1a5b      	subs	r3, r3, r1
 8019f8c:	8045      	strh	r5, [r0, #2]
 8019f8e:	8082      	strh	r2, [r0, #4]
 8019f90:	8003      	strh	r3, [r0, #0]
 8019f92:	80c4      	strh	r4, [r0, #6]
 8019f94:	e7e2      	b.n	8019f5c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08019f96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8019f96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f9a:	b09f      	sub	sp, #124	; 0x7c
 8019f9c:	9116      	str	r1, [sp, #88]	; 0x58
 8019f9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8019fa0:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019fa2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019fa4:	8809      	ldrh	r1, [r1, #0]
 8019fa6:	889b      	ldrh	r3, [r3, #4]
 8019fa8:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8019fac:	440b      	add	r3, r1
 8019fae:	9212      	str	r2, [sp, #72]	; 0x48
 8019fb0:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8019fb4:	b21b      	sxth	r3, r3
 8019fb6:	9011      	str	r0, [sp, #68]	; 0x44
 8019fb8:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8019fbc:	9310      	str	r3, [sp, #64]	; 0x40
 8019fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8019fc2:	7a59      	ldrb	r1, [r3, #9]
 8019fc4:	7a1b      	ldrb	r3, [r3, #8]
 8019fc6:	9114      	str	r1, [sp, #80]	; 0x50
 8019fc8:	9315      	str	r3, [sp, #84]	; 0x54
 8019fca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019fcc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019fd0:	2a00      	cmp	r2, #0
 8019fd2:	d067      	beq.n	801a0a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x10e>
 8019fd4:	f898 3010 	ldrb.w	r3, [r8, #16]
 8019fd8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019fda:	2b04      	cmp	r3, #4
 8019fdc:	bf14      	ite	ne
 8019fde:	2301      	movne	r3, #1
 8019fe0:	2302      	moveq	r3, #2
 8019fe2:	4413      	add	r3, r2
 8019fe4:	f04f 0900 	mov.w	r9, #0
 8019fe8:	930f      	str	r3, [sp, #60]	; 0x3c
 8019fea:	464c      	mov	r4, r9
 8019fec:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8019ff0:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8019ff4:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8019ff8:	4293      	cmp	r3, r2
 8019ffa:	f280 808c 	bge.w	801a116 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8019ffe:	2300      	movs	r3, #0
 801a000:	931c      	str	r3, [sp, #112]	; 0x70
 801a002:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a006:	429c      	cmp	r4, r3
 801a008:	d006      	beq.n	801a018 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801a00a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a00c:	f242 020b 	movw	r2, #8203	; 0x200b
 801a010:	4294      	cmp	r4, r2
 801a012:	bf18      	it	ne
 801a014:	4623      	movne	r3, r4
 801a016:	930d      	str	r3, [sp, #52]	; 0x34
 801a018:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a01a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801a01c:	f8d8 2000 	ldr.w	r2, [r8]
 801a020:	428b      	cmp	r3, r1
 801a022:	db41      	blt.n	801a0a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801a024:	6813      	ldr	r3, [r2, #0]
 801a026:	4610      	mov	r0, r2
 801a028:	695b      	ldr	r3, [r3, #20]
 801a02a:	4798      	blx	r3
 801a02c:	4604      	mov	r4, r0
 801a02e:	f8d8 0000 	ldr.w	r0, [r8]
 801a032:	aa1d      	add	r2, sp, #116	; 0x74
 801a034:	4621      	mov	r1, r4
 801a036:	6803      	ldr	r3, [r0, #0]
 801a038:	689e      	ldr	r6, [r3, #8]
 801a03a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801a03e:	47b0      	blx	r6
 801a040:	901c      	str	r0, [sp, #112]	; 0x70
 801a042:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a046:	429c      	cmp	r4, r3
 801a048:	f000 80ea 	beq.w	801a220 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a04c:	f242 030b 	movw	r3, #8203	; 0x200b
 801a050:	429c      	cmp	r4, r3
 801a052:	f000 80e5 	beq.w	801a220 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a056:	2c00      	cmp	r4, #0
 801a058:	f000 80f7 	beq.w	801a24a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801a05c:	2c0a      	cmp	r4, #10
 801a05e:	d060      	beq.n	801a122 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801a060:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a062:	b36a      	cbz	r2, 801a0c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801a064:	8894      	ldrh	r4, [r2, #4]
 801a066:	f1bb 0f00 	cmp.w	fp, #0
 801a06a:	d03b      	beq.n	801a0e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x14e>
 801a06c:	f892 900d 	ldrb.w	r9, [r2, #13]
 801a070:	f1bb 0f01 	cmp.w	fp, #1
 801a074:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a078:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801a07c:	f892 900a 	ldrb.w	r9, [r2, #10]
 801a080:	ea49 0903 	orr.w	r9, r9, r3
 801a084:	d134      	bne.n	801a0f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15a>
 801a086:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a088:	eba5 0509 	sub.w	r5, r5, r9
 801a08c:	2b00      	cmp	r3, #0
 801a08e:	d14f      	bne.n	801a130 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801a090:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a092:	eb09 0305 	add.w	r3, r9, r5
 801a096:	4413      	add	r3, r2
 801a098:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a09a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a09e:	4293      	cmp	r3, r2
 801a0a0:	da51      	bge.n	801a146 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801a0a2:	e038      	b.n	801a116 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 801a0a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a0a6:	e79d      	b.n	8019fe4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4e>
 801a0a8:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801a0ac:	4659      	mov	r1, fp
 801a0ae:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801a0b0:	9301      	str	r3, [sp, #4]
 801a0b2:	ab1d      	add	r3, sp, #116	; 0x74
 801a0b4:	9300      	str	r3, [sp, #0]
 801a0b6:	ab1c      	add	r3, sp, #112	; 0x70
 801a0b8:	f002 fdda 	bl	801cc70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801a0bc:	4604      	mov	r4, r0
 801a0be:	e7c0      	b.n	801a042 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xac>
 801a0c0:	f8d8 0000 	ldr.w	r0, [r8]
 801a0c4:	6803      	ldr	r3, [r0, #0]
 801a0c6:	691b      	ldr	r3, [r3, #16]
 801a0c8:	4798      	blx	r3
 801a0ca:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a0ce:	4298      	cmp	r0, r3
 801a0d0:	f000 80a6 	beq.w	801a220 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a0d4:	f242 030b 	movw	r3, #8203	; 0x200b
 801a0d8:	4298      	cmp	r0, r3
 801a0da:	f000 80a1 	beq.w	801a220 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a0de:	f1bb 0f00 	cmp.w	fp, #0
 801a0e2:	d100      	bne.n	801a0e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801a0e4:	444d      	add	r5, r9
 801a0e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a0e8:	2a00      	cmp	r2, #0
 801a0ea:	d1bf      	bne.n	801a06c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801a0ec:	4691      	mov	r9, r2
 801a0ee:	e097      	b.n	801a220 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a0f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	f000 80ab 	beq.w	801a24e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801a0f8:	f1bb 0f00 	cmp.w	fp, #0
 801a0fc:	d118      	bne.n	801a130 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 801a0fe:	f8d8 0000 	ldr.w	r0, [r8]
 801a102:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a104:	6803      	ldr	r3, [r0, #0]
 801a106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a108:	4798      	blx	r3
 801a10a:	4405      	add	r5, r0
 801a10c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a10e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a110:	1aeb      	subs	r3, r5, r3
 801a112:	4293      	cmp	r3, r2
 801a114:	dd17      	ble.n	801a146 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>
 801a116:	2c00      	cmp	r4, #0
 801a118:	f000 8097 	beq.w	801a24a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801a11c:	2c0a      	cmp	r4, #10
 801a11e:	f040 8085 	bne.w	801a22c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801a122:	240a      	movs	r4, #10
 801a124:	fab4 f084 	clz	r0, r4
 801a128:	0940      	lsrs	r0, r0, #5
 801a12a:	b01f      	add	sp, #124	; 0x7c
 801a12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a130:	f8d8 0000 	ldr.w	r0, [r8]
 801a134:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a136:	6803      	ldr	r3, [r0, #0]
 801a138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a13a:	4798      	blx	r3
 801a13c:	f1bb 0f01 	cmp.w	fp, #1
 801a140:	eba5 0500 	sub.w	r5, r5, r0
 801a144:	d0a4      	beq.n	801a090 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801a146:	981c      	ldr	r0, [sp, #112]	; 0x70
 801a148:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a14a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801a14e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a152:	7b43      	ldrb	r3, [r0, #13]
 801a154:	4429      	add	r1, r5
 801a156:	015b      	lsls	r3, r3, #5
 801a158:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a15c:	7983      	ldrb	r3, [r0, #6]
 801a15e:	4313      	orrs	r3, r2
 801a160:	440b      	add	r3, r1
 801a162:	42b3      	cmp	r3, r6
 801a164:	db5c      	blt.n	801a220 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a166:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a168:	4299      	cmp	r1, r3
 801a16a:	da59      	bge.n	801a220 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a16c:	f8d8 0000 	ldr.w	r0, [r8]
 801a170:	42ae      	cmp	r6, r5
 801a172:	6803      	ldr	r3, [r0, #0]
 801a174:	bfcc      	ite	gt
 801a176:	1b76      	subgt	r6, r6, r5
 801a178:	2600      	movle	r6, #0
 801a17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a17c:	bfc8      	it	gt
 801a17e:	b2b6      	uxthgt	r6, r6
 801a180:	4798      	blx	r3
 801a182:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a184:	7b5a      	ldrb	r2, [r3, #13]
 801a186:	00d1      	lsls	r1, r2, #3
 801a188:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801a18c:	7a19      	ldrb	r1, [r3, #8]
 801a18e:	4339      	orrs	r1, r7
 801a190:	0657      	lsls	r7, r2, #25
 801a192:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801a194:	bf48      	it	mi
 801a196:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801a19a:	4407      	add	r7, r0
 801a19c:	bf48      	it	mi
 801a19e:	b209      	sxthmi	r1, r1
 801a1a0:	1a7f      	subs	r7, r7, r1
 801a1a2:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801a1a4:	b2bf      	uxth	r7, r7
 801a1a6:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801a1aa:	fa0f fa87 	sxth.w	sl, r7
 801a1ae:	4551      	cmp	r1, sl
 801a1b0:	dd3a      	ble.n	801a228 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801a1b2:	0112      	lsls	r2, r2, #4
 801a1b4:	79d8      	ldrb	r0, [r3, #7]
 801a1b6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a1ba:	4302      	orrs	r2, r0
 801a1bc:	4492      	add	sl, r2
 801a1be:	4551      	cmp	r1, sl
 801a1c0:	dc2e      	bgt.n	801a220 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28a>
 801a1c2:	1bcf      	subs	r7, r1, r7
 801a1c4:	468a      	mov	sl, r1
 801a1c6:	b2bf      	uxth	r7, r7
 801a1c8:	9319      	str	r3, [sp, #100]	; 0x64
 801a1ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a1cc:	f8d8 0000 	ldr.w	r0, [r8]
 801a1d0:	681a      	ldr	r2, [r3, #0]
 801a1d2:	6801      	ldr	r1, [r0, #0]
 801a1d4:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801a1d6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a1d8:	9313      	str	r3, [sp, #76]	; 0x4c
 801a1da:	9218      	str	r2, [sp, #96]	; 0x60
 801a1dc:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801a1de:	4788      	blx	r1
 801a1e0:	f898 1006 	ldrb.w	r1, [r8, #6]
 801a1e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a1e6:	910b      	str	r1, [sp, #44]	; 0x2c
 801a1e8:	f898 100e 	ldrb.w	r1, [r8, #14]
 801a1ec:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a1ee:	910a      	str	r1, [sp, #40]	; 0x28
 801a1f0:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801a1f4:	9109      	str	r1, [sp, #36]	; 0x24
 801a1f6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801a1fa:	9305      	str	r3, [sp, #20]
 801a1fc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a1fe:	9206      	str	r2, [sp, #24]
 801a200:	e9cd a601 	strd	sl, r6, [sp, #4]
 801a204:	442e      	add	r6, r5
 801a206:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801a20a:	b236      	sxth	r6, r6
 801a20c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a20e:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801a212:	9600      	str	r6, [sp, #0]
 801a214:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a216:	681a      	ldr	r2, [r3, #0]
 801a218:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a21a:	685b      	ldr	r3, [r3, #4]
 801a21c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a21e:	47b0      	blx	r6
 801a220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a222:	3301      	adds	r3, #1
 801a224:	930e      	str	r3, [sp, #56]	; 0x38
 801a226:	e6e5      	b.n	8019ff4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5e>
 801a228:	2700      	movs	r7, #0
 801a22a:	e7cd      	b.n	801a1c8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 801a22c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801a22e:	3501      	adds	r5, #1
 801a230:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a232:	429d      	cmp	r5, r3
 801a234:	f6bf af76 	bge.w	801a124 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801a238:	4659      	mov	r1, fp
 801a23a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801a23c:	f7e9 fa92 	bl	8003764 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a240:	4604      	mov	r4, r0
 801a242:	b110      	cbz	r0, 801a24a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b4>
 801a244:	280a      	cmp	r0, #10
 801a246:	d1f2      	bne.n	801a22e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801a248:	e76b      	b.n	801a122 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 801a24a:	2400      	movs	r4, #0
 801a24c:	e76a      	b.n	801a124 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 801a24e:	f1bb 0f00 	cmp.w	fp, #0
 801a252:	f43f af5b 	beq.w	801a10c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 801a256:	e776      	b.n	801a146 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b0>

0801a258 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801a258:	b530      	push	{r4, r5, lr}
 801a25a:	8a44      	ldrh	r4, [r0, #18]
 801a25c:	8ac5      	ldrh	r5, [r0, #22]
 801a25e:	82c3      	strh	r3, [r0, #22]
 801a260:	442c      	add	r4, r5
 801a262:	1ae4      	subs	r4, r4, r3
 801a264:	8b03      	ldrh	r3, [r0, #24]
 801a266:	8244      	strh	r4, [r0, #18]
 801a268:	8a84      	ldrh	r4, [r0, #20]
 801a26a:	4422      	add	r2, r4
 801a26c:	440c      	add	r4, r1
 801a26e:	1a59      	subs	r1, r3, r1
 801a270:	8342      	strh	r2, [r0, #26]
 801a272:	8284      	strh	r4, [r0, #20]
 801a274:	8301      	strh	r1, [r0, #24]
 801a276:	bd30      	pop	{r4, r5, pc}

0801a278 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801a278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a27c:	7a43      	ldrb	r3, [r0, #9]
 801a27e:	b087      	sub	sp, #28
 801a280:	4604      	mov	r4, r0
 801a282:	460f      	mov	r7, r1
 801a284:	1eda      	subs	r2, r3, #3
 801a286:	b2d2      	uxtb	r2, r2
 801a288:	2900      	cmp	r1, #0
 801a28a:	d036      	beq.n	801a2fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801a28c:	2a01      	cmp	r2, #1
 801a28e:	d932      	bls.n	801a2f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801a290:	1e58      	subs	r0, r3, #1
 801a292:	f1d0 0b00 	rsbs	fp, r0, #0
 801a296:	eb4b 0b00 	adc.w	fp, fp, r0
 801a29a:	1e99      	subs	r1, r3, #2
 801a29c:	424b      	negs	r3, r1
 801a29e:	414b      	adcs	r3, r1
 801a2a0:	9303      	str	r3, [sp, #12]
 801a2a2:	2300      	movs	r3, #0
 801a2a4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801a2a8:	2500      	movs	r5, #0
 801a2aa:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801a2ae:	46a9      	mov	r9, r5
 801a2b0:	8265      	strh	r5, [r4, #18]
 801a2b2:	82a5      	strh	r5, [r4, #20]
 801a2b4:	2300      	movs	r3, #0
 801a2b6:	9305      	str	r3, [sp, #20]
 801a2b8:	8823      	ldrh	r3, [r4, #0]
 801a2ba:	2b20      	cmp	r3, #32
 801a2bc:	d02b      	beq.n	801a316 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801a2be:	eba3 020a 	sub.w	r2, r3, sl
 801a2c2:	4256      	negs	r6, r2
 801a2c4:	4156      	adcs	r6, r2
 801a2c6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801a2ca:	4293      	cmp	r3, r2
 801a2cc:	d004      	beq.n	801a2d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801a2ce:	4553      	cmp	r3, sl
 801a2d0:	bf16      	itet	ne
 801a2d2:	4699      	movne	r9, r3
 801a2d4:	2601      	moveq	r6, #1
 801a2d6:	2600      	movne	r6, #0
 801a2d8:	ab05      	add	r3, sp, #20
 801a2da:	68e2      	ldr	r2, [r4, #12]
 801a2dc:	7a21      	ldrb	r1, [r4, #8]
 801a2de:	6860      	ldr	r0, [r4, #4]
 801a2e0:	f002 fc6e 	bl	801cbc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a2e4:	8020      	strh	r0, [r4, #0]
 801a2e6:	b9c8      	cbnz	r0, 801a31c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801a2e8:	8b22      	ldrh	r2, [r4, #24]
 801a2ea:	2300      	movs	r3, #0
 801a2ec:	4611      	mov	r1, r2
 801a2ee:	4620      	mov	r0, r4
 801a2f0:	f7ff ffb2 	bl	801a258 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a2f4:	e066      	b.n	801a3c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801a2f6:	468b      	mov	fp, r1
 801a2f8:	e7cf      	b.n	801a29a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801a2fa:	3b01      	subs	r3, #1
 801a2fc:	2a01      	cmp	r2, #1
 801a2fe:	9103      	str	r1, [sp, #12]
 801a300:	468b      	mov	fp, r1
 801a302:	bf8c      	ite	hi
 801a304:	2200      	movhi	r2, #0
 801a306:	2201      	movls	r2, #1
 801a308:	2b01      	cmp	r3, #1
 801a30a:	9202      	str	r2, [sp, #8]
 801a30c:	bf8c      	ite	hi
 801a30e:	2300      	movhi	r3, #0
 801a310:	2301      	movls	r3, #1
 801a312:	9301      	str	r3, [sp, #4]
 801a314:	e7c8      	b.n	801a2a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801a316:	4699      	mov	r9, r3
 801a318:	2601      	movs	r6, #1
 801a31a:	e7dd      	b.n	801a2d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801a31c:	8ae3      	ldrh	r3, [r4, #22]
 801a31e:	280a      	cmp	r0, #10
 801a320:	f103 0301 	add.w	r3, r3, #1
 801a324:	82e3      	strh	r3, [r4, #22]
 801a326:	d0df      	beq.n	801a2e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801a328:	9a05      	ldr	r2, [sp, #20]
 801a32a:	bb42      	cbnz	r2, 801a37e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801a32c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a330:	4298      	cmp	r0, r3
 801a332:	d001      	beq.n	801a338 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801a334:	4550      	cmp	r0, sl
 801a336:	d1bd      	bne.n	801a2b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a338:	8823      	ldrh	r3, [r4, #0]
 801a33a:	8b21      	ldrh	r1, [r4, #24]
 801a33c:	2b20      	cmp	r3, #32
 801a33e:	d001      	beq.n	801a344 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801a340:	4553      	cmp	r3, sl
 801a342:	d131      	bne.n	801a3a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801a344:	2e00      	cmp	r6, #0
 801a346:	bf0a      	itet	eq
 801a348:	460d      	moveq	r5, r1
 801a34a:	4630      	movne	r0, r6
 801a34c:	2001      	moveq	r0, #1
 801a34e:	440a      	add	r2, r1
 801a350:	8aa3      	ldrh	r3, [r4, #20]
 801a352:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801a356:	b292      	uxth	r2, r2
 801a358:	8322      	strh	r2, [r4, #24]
 801a35a:	4413      	add	r3, r2
 801a35c:	2f00      	cmp	r7, #0
 801a35e:	d03a      	beq.n	801a3d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801a360:	f1bb 0f00 	cmp.w	fp, #0
 801a364:	d102      	bne.n	801a36c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801a366:	9903      	ldr	r1, [sp, #12]
 801a368:	b301      	cbz	r1, 801a3ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801a36a:	b1f8      	cbz	r0, 801a3ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801a36c:	8ba1      	ldrh	r1, [r4, #28]
 801a36e:	4419      	add	r1, r3
 801a370:	458c      	cmp	ip, r1
 801a372:	da2a      	bge.n	801a3ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801a374:	8a61      	ldrh	r1, [r4, #18]
 801a376:	b341      	cbz	r1, 801a3ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801a378:	4563      	cmp	r3, ip
 801a37a:	dd9b      	ble.n	801a2b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a37c:	e01c      	b.n	801a3b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801a37e:	8893      	ldrh	r3, [r2, #4]
 801a380:	4649      	mov	r1, r9
 801a382:	8023      	strh	r3, [r4, #0]
 801a384:	f892 800d 	ldrb.w	r8, [r2, #13]
 801a388:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801a38c:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801a390:	f892 800a 	ldrb.w	r8, [r2, #10]
 801a394:	ea48 0800 	orr.w	r8, r8, r0
 801a398:	68e0      	ldr	r0, [r4, #12]
 801a39a:	6803      	ldr	r3, [r0, #0]
 801a39c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a39e:	4798      	blx	r3
 801a3a0:	eb08 0200 	add.w	r2, r8, r0
 801a3a4:	b292      	uxth	r2, r2
 801a3a6:	e7c7      	b.n	801a338 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801a3a8:	2000      	movs	r0, #0
 801a3aa:	e7d0      	b.n	801a34e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801a3ac:	4563      	cmp	r3, ip
 801a3ae:	dd81      	ble.n	801a2b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a3b0:	8a63      	ldrh	r3, [r4, #18]
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	f43f af7e 	beq.w	801a2b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a3b8:	2301      	movs	r3, #1
 801a3ba:	8ba2      	ldrh	r2, [r4, #28]
 801a3bc:	77a3      	strb	r3, [r4, #30]
 801a3be:	8b63      	ldrh	r3, [r4, #26]
 801a3c0:	4413      	add	r3, r2
 801a3c2:	8363      	strh	r3, [r4, #26]
 801a3c4:	b007      	add	sp, #28
 801a3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3ca:	2300      	movs	r3, #0
 801a3cc:	4611      	mov	r1, r2
 801a3ce:	4620      	mov	r0, r4
 801a3d0:	f7ff ff42 	bl	801a258 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a3d4:	e76e      	b.n	801a2b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a3d6:	4563      	cmp	r3, ip
 801a3d8:	dd14      	ble.n	801a404 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801a3da:	9b02      	ldr	r3, [sp, #8]
 801a3dc:	b113      	cbz	r3, 801a3e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801a3de:	2301      	movs	r3, #1
 801a3e0:	460a      	mov	r2, r1
 801a3e2:	e783      	b.n	801a2ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801a3e4:	9b01      	ldr	r3, [sp, #4]
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	f43f af64 	beq.w	801a2b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a3ec:	2800      	cmp	r0, #0
 801a3ee:	f47f af61 	bne.w	801a2b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a3f2:	b116      	cbz	r6, 801a3fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801a3f4:	2301      	movs	r3, #1
 801a3f6:	462a      	mov	r2, r5
 801a3f8:	e779      	b.n	801a2ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801a3fa:	8a63      	ldrh	r3, [r4, #18]
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	f43f af59 	beq.w	801a2b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a402:	e7df      	b.n	801a3c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801a404:	2800      	cmp	r0, #0
 801a406:	f47f af55 	bne.w	801a2b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a40a:	2e00      	cmp	r6, #0
 801a40c:	f43f af52 	beq.w	801a2b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a410:	2301      	movs	r3, #1
 801a412:	462a      	mov	r2, r5
 801a414:	e7db      	b.n	801a3ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801a416 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801a416:	b530      	push	{r4, r5, lr}
 801a418:	4605      	mov	r5, r0
 801a41a:	b08b      	sub	sp, #44	; 0x2c
 801a41c:	b191      	cbz	r1, 801a444 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801a41e:	2401      	movs	r4, #1
 801a420:	e9cd 3100 	strd	r3, r1, [sp]
 801a424:	4613      	mov	r3, r2
 801a426:	4601      	mov	r1, r0
 801a428:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801a42c:	a802      	add	r0, sp, #8
 801a42e:	f7ff fd0b 	bl	8019e48 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801a432:	2100      	movs	r1, #0
 801a434:	a802      	add	r0, sp, #8
 801a436:	f7ff ff1f 	bl	801a278 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a43a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a43e:	b163      	cbz	r3, 801a45a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801a440:	3401      	adds	r4, #1
 801a442:	e7f6      	b.n	801a432 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801a444:	2401      	movs	r4, #1
 801a446:	f002 fcb5 	bl	801cdb4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a44a:	280a      	cmp	r0, #10
 801a44c:	4628      	mov	r0, r5
 801a44e:	bf08      	it	eq
 801a450:	3401      	addeq	r4, #1
 801a452:	f002 fcaf 	bl	801cdb4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a456:	2800      	cmp	r0, #0
 801a458:	d1f7      	bne.n	801a44a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801a45a:	b2a0      	uxth	r0, r4
 801a45c:	b00b      	add	sp, #44	; 0x2c
 801a45e:	bd30      	pop	{r4, r5, pc}

0801a460 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801a460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a464:	b0e5      	sub	sp, #404	; 0x194
 801a466:	4689      	mov	r9, r1
 801a468:	461c      	mov	r4, r3
 801a46a:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801a46e:	900a      	str	r0, [sp, #40]	; 0x28
 801a470:	f1ba 0f00 	cmp.w	sl, #0
 801a474:	f000 80b4 	beq.w	801a5e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a478:	681b      	ldr	r3, [r3, #0]
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	f000 80b0 	beq.w	801a5e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a480:	7ba3      	ldrb	r3, [r4, #14]
 801a482:	2b00      	cmp	r3, #0
 801a484:	f000 80ac 	beq.w	801a5e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a488:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801a48c:	6810      	ldr	r0, [r2, #0]
 801a48e:	6851      	ldr	r1, [r2, #4]
 801a490:	2500      	movs	r5, #0
 801a492:	4643      	mov	r3, r8
 801a494:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801a498:	950f      	str	r5, [sp, #60]	; 0x3c
 801a49a:	af19      	add	r7, sp, #100	; 0x64
 801a49c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801a4a0:	79a2      	ldrb	r2, [r4, #6]
 801a4a2:	c303      	stmia	r3!, {r0, r1}
 801a4a4:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801a4a8:	a90f      	add	r1, sp, #60	; 0x3c
 801a4aa:	4640      	mov	r0, r8
 801a4ac:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a4b0:	f7ff fd40 	bl	8019f34 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a4b4:	a90f      	add	r1, sp, #60	; 0x3c
 801a4b6:	79a2      	ldrb	r2, [r4, #6]
 801a4b8:	4608      	mov	r0, r1
 801a4ba:	f7ff fd3b 	bl	8019f34 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a4be:	4638      	mov	r0, r7
 801a4c0:	f002 f82a 	bl	801c518 <_ZN8touchgfx12TextProviderC1Ev>
 801a4c4:	6820      	ldr	r0, [r4, #0]
 801a4c6:	6803      	ldr	r3, [r0, #0]
 801a4c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a4ca:	4798      	blx	r3
 801a4cc:	4606      	mov	r6, r0
 801a4ce:	6820      	ldr	r0, [r4, #0]
 801a4d0:	6803      	ldr	r3, [r0, #0]
 801a4d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a4d4:	4798      	blx	r3
 801a4d6:	4633      	mov	r3, r6
 801a4d8:	9000      	str	r0, [sp, #0]
 801a4da:	4651      	mov	r1, sl
 801a4dc:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801a4de:	4638      	mov	r0, r7
 801a4e0:	f002 f86d 	bl	801c5be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a4e4:	7923      	ldrb	r3, [r4, #4]
 801a4e6:	6820      	ldr	r0, [r4, #0]
 801a4e8:	9308      	str	r3, [sp, #32]
 801a4ea:	6803      	ldr	r3, [r0, #0]
 801a4ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a4ee:	4798      	blx	r3
 801a4f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a4f4:	181e      	adds	r6, r3, r0
 801a4f6:	42ae      	cmp	r6, r5
 801a4f8:	dd06      	ble.n	801a508 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801a4fa:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801a4fe:	4282      	cmp	r2, r0
 801a500:	bfa4      	itt	ge
 801a502:	189d      	addge	r5, r3, r2
 801a504:	fb95 f5f6 	sdivge	r5, r5, r6
 801a508:	a832      	add	r0, sp, #200	; 0xc8
 801a50a:	f002 f805 	bl	801c518 <_ZN8touchgfx12TextProviderC1Ev>
 801a50e:	7c23      	ldrb	r3, [r4, #16]
 801a510:	b17b      	cbz	r3, 801a532 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801a512:	6820      	ldr	r0, [r4, #0]
 801a514:	6803      	ldr	r3, [r0, #0]
 801a516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a518:	4798      	blx	r3
 801a51a:	4683      	mov	fp, r0
 801a51c:	6820      	ldr	r0, [r4, #0]
 801a51e:	6803      	ldr	r3, [r0, #0]
 801a520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a522:	4798      	blx	r3
 801a524:	465b      	mov	r3, fp
 801a526:	9000      	str	r0, [sp, #0]
 801a528:	4651      	mov	r1, sl
 801a52a:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801a52c:	a832      	add	r0, sp, #200	; 0xc8
 801a52e:	f002 f846 	bl	801c5be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a532:	7be1      	ldrb	r1, [r4, #15]
 801a534:	a811      	add	r0, sp, #68	; 0x44
 801a536:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801a53a:	7963      	ldrb	r3, [r4, #5]
 801a53c:	1a52      	subs	r2, r2, r1
 801a53e:	7c21      	ldrb	r1, [r4, #16]
 801a540:	9101      	str	r1, [sp, #4]
 801a542:	b292      	uxth	r2, r2
 801a544:	6821      	ldr	r1, [r4, #0]
 801a546:	9100      	str	r1, [sp, #0]
 801a548:	a932      	add	r1, sp, #200	; 0xc8
 801a54a:	f7ff fc7d 	bl	8019e48 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801a54e:	7c23      	ldrb	r3, [r4, #16]
 801a550:	b9bb      	cbnz	r3, 801a582 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801a552:	fa1f fa86 	uxth.w	sl, r6
 801a556:	2d00      	cmp	r5, #0
 801a558:	dd45      	ble.n	801a5e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801a55a:	4638      	mov	r0, r7
 801a55c:	f002 fc2a 	bl	801cdb4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a560:	2800      	cmp	r0, #0
 801a562:	d03d      	beq.n	801a5e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a564:	280a      	cmp	r0, #10
 801a566:	d1f6      	bne.n	801a556 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801a568:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a56c:	3d01      	subs	r5, #1
 801a56e:	4453      	add	r3, sl
 801a570:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a574:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801a578:	eba3 030a 	sub.w	r3, r3, sl
 801a57c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a580:	e7e9      	b.n	801a556 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801a582:	0073      	lsls	r3, r6, #1
 801a584:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801a588:	fa1f fa86 	uxth.w	sl, r6
 801a58c:	9309      	str	r3, [sp, #36]	; 0x24
 801a58e:	2d00      	cmp	r5, #0
 801a590:	dd29      	ble.n	801a5e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801a592:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801a596:	a811      	add	r0, sp, #68	; 0x44
 801a598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a59a:	428b      	cmp	r3, r1
 801a59c:	bfd4      	ite	le
 801a59e:	2100      	movle	r1, #0
 801a5a0:	2101      	movgt	r1, #1
 801a5a2:	f7ff fe69 	bl	801a278 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a5a6:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801a5aa:	3b01      	subs	r3, #1
 801a5ac:	b29b      	uxth	r3, r3
 801a5ae:	455b      	cmp	r3, fp
 801a5b0:	930b      	str	r3, [sp, #44]	; 0x2c
 801a5b2:	d005      	beq.n	801a5c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 801a5b4:	7961      	ldrb	r1, [r4, #5]
 801a5b6:	4638      	mov	r0, r7
 801a5b8:	f7e9 f8d4 	bl	8003764 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a5bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a5be:	e7f4      	b.n	801a5aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801a5c0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a5c4:	3d01      	subs	r5, #1
 801a5c6:	4453      	add	r3, sl
 801a5c8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a5cc:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801a5d0:	eba3 030a 	sub.w	r3, r3, sl
 801a5d4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a5d8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	d1d6      	bne.n	801a58e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801a5e0:	b065      	add	sp, #404	; 0x194
 801a5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5e6:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 801a5ea:	ad4b      	add	r5, sp, #300	; 0x12c
 801a5ec:	f04f 0b00 	mov.w	fp, #0
 801a5f0:	7c23      	ldrb	r3, [r4, #16]
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d067      	beq.n	801a6c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
 801a5f6:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801a5fa:	a811      	add	r0, sp, #68	; 0x44
 801a5fc:	458a      	cmp	sl, r1
 801a5fe:	bfd4      	ite	le
 801a600:	2100      	movle	r1, #0
 801a602:	2101      	movgt	r1, #1
 801a604:	f7ff fe38 	bl	801a278 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a608:	9b08      	ldr	r3, [sp, #32]
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	d056      	beq.n	801a6bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801a60e:	7c23      	ldrb	r3, [r4, #16]
 801a610:	2264      	movs	r2, #100	; 0x64
 801a612:	4639      	mov	r1, r7
 801a614:	4628      	mov	r0, r5
 801a616:	9309      	str	r3, [sp, #36]	; 0x24
 801a618:	f00f fc9c 	bl	8029f54 <memcpy>
 801a61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d059      	beq.n	801a6d6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x276>
 801a622:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801a626:	7922      	ldrb	r2, [r4, #4]
 801a628:	2a01      	cmp	r2, #1
 801a62a:	d13d      	bne.n	801a6a8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
 801a62c:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801a630:	1ac0      	subs	r0, r0, r3
 801a632:	2302      	movs	r3, #2
 801a634:	fb90 f0f3 	sdiv	r0, r0, r3
 801a638:	b200      	sxth	r0, r0
 801a63a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801a63e:	4418      	add	r0, r3
 801a640:	7c23      	ldrb	r3, [r4, #16]
 801a642:	f8ad 012c 	strh.w	r0, [sp, #300]	; 0x12c
 801a646:	2b00      	cmp	r3, #0
 801a648:	d03a      	beq.n	801a6c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801a64a:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801a64e:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801a652:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801a656:	9500      	str	r5, [sp, #0]
 801a658:	980a      	ldr	r0, [sp, #40]	; 0x28
 801a65a:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801a65e:	e9cd b703 	strd	fp, r7, [sp, #12]
 801a662:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801a666:	464a      	mov	r2, r9
 801a668:	2100      	movs	r1, #0
 801a66a:	f7ff fc94 	bl	8019f96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801a66e:	2800      	cmp	r0, #0
 801a670:	d1b6      	bne.n	801a5e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a672:	b2b2      	uxth	r2, r6
 801a674:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a678:	4611      	mov	r1, r2
 801a67a:	4413      	add	r3, r2
 801a67c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801a680:	b21b      	sxth	r3, r3
 801a682:	1a52      	subs	r2, r2, r1
 801a684:	7c21      	ldrb	r1, [r4, #16]
 801a686:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a68a:	b212      	sxth	r2, r2
 801a68c:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801a690:	b109      	cbz	r1, 801a696 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801a692:	42b2      	cmp	r2, r6
 801a694:	dba4      	blt.n	801a5e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a696:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801a69a:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801a69e:	440a      	add	r2, r1
 801a6a0:	b212      	sxth	r2, r2
 801a6a2:	4293      	cmp	r3, r2
 801a6a4:	dda4      	ble.n	801a5f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x190>
 801a6a6:	e79b      	b.n	801a5e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a6a8:	2a02      	cmp	r2, #2
 801a6aa:	d105      	bne.n	801a6b8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x258>
 801a6ac:	7be2      	ldrb	r2, [r4, #15]
 801a6ae:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801a6b2:	1a80      	subs	r0, r0, r2
 801a6b4:	1ac0      	subs	r0, r0, r3
 801a6b6:	e7bf      	b.n	801a638 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d8>
 801a6b8:	2000      	movs	r0, #0
 801a6ba:	e7be      	b.n	801a63a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801a6bc:	7be0      	ldrb	r0, [r4, #15]
 801a6be:	e7bc      	b.n	801a63a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1da>
 801a6c0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a6c4:	e7c3      	b.n	801a64e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ee>
 801a6c6:	9b08      	ldr	r3, [sp, #32]
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	d0f7      	beq.n	801a6bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801a6cc:	2264      	movs	r2, #100	; 0x64
 801a6ce:	4639      	mov	r1, r7
 801a6d0:	4628      	mov	r0, r5
 801a6d2:	f00f fc3f 	bl	8029f54 <memcpy>
 801a6d6:	2300      	movs	r3, #0
 801a6d8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a6dc:	6821      	ldr	r1, [r4, #0]
 801a6de:	4628      	mov	r0, r5
 801a6e0:	f7ff fbec 	bl	8019ebc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801a6e4:	b203      	sxth	r3, r0
 801a6e6:	e79e      	b.n	801a626 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>

0801a6e8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801a6e8:	2b02      	cmp	r3, #2
 801a6ea:	b510      	push	{r4, lr}
 801a6ec:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a6f0:	d00b      	beq.n	801a70a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801a6f2:	2b03      	cmp	r3, #3
 801a6f4:	d00e      	beq.n	801a714 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2c>
 801a6f6:	2b01      	cmp	r3, #1
 801a6f8:	d001      	beq.n	801a6fe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x16>
 801a6fa:	1860      	adds	r0, r4, r1
 801a6fc:	bd10      	pop	{r4, pc}
 801a6fe:	8880      	ldrh	r0, [r0, #4]
 801a700:	4420      	add	r0, r4
 801a702:	b200      	sxth	r0, r0
 801a704:	1a80      	subs	r0, r0, r2
 801a706:	3801      	subs	r0, #1
 801a708:	e7f8      	b.n	801a6fc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801a70a:	8880      	ldrh	r0, [r0, #4]
 801a70c:	4420      	add	r0, r4
 801a70e:	b200      	sxth	r0, r0
 801a710:	1a40      	subs	r0, r0, r1
 801a712:	e7f8      	b.n	801a706 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801a714:	18a0      	adds	r0, r4, r2
 801a716:	e7f1      	b.n	801a6fc <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>

0801a718 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801a718:	2b02      	cmp	r3, #2
 801a71a:	b510      	push	{r4, lr}
 801a71c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801a720:	d006      	beq.n	801a730 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x18>
 801a722:	2b03      	cmp	r3, #3
 801a724:	d00a      	beq.n	801a73c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801a726:	2b01      	cmp	r3, #1
 801a728:	bf14      	ite	ne
 801a72a:	18a0      	addne	r0, r4, r2
 801a72c:	1860      	addeq	r0, r4, r1
 801a72e:	bd10      	pop	{r4, pc}
 801a730:	88c0      	ldrh	r0, [r0, #6]
 801a732:	4420      	add	r0, r4
 801a734:	b200      	sxth	r0, r0
 801a736:	1a80      	subs	r0, r0, r2
 801a738:	3801      	subs	r0, #1
 801a73a:	e7f8      	b.n	801a72e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801a73c:	88c0      	ldrh	r0, [r0, #6]
 801a73e:	4420      	add	r0, r4
 801a740:	b200      	sxth	r0, r0
 801a742:	1a40      	subs	r0, r0, r1
 801a744:	e7f8      	b.n	801a738 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>
	...

0801a748 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801a748:	4b01      	ldr	r3, [pc, #4]	; (801a750 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801a74a:	2200      	movs	r2, #0
 801a74c:	601a      	str	r2, [r3, #0]
 801a74e:	4770      	bx	lr
 801a750:	2002b8a8 	.word	0x2002b8a8

0801a754 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801a754:	4603      	mov	r3, r0
 801a756:	b1c8      	cbz	r0, 801a78c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801a758:	0c02      	lsrs	r2, r0, #16
 801a75a:	0412      	lsls	r2, r2, #16
 801a75c:	b9a2      	cbnz	r2, 801a788 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801a75e:	0403      	lsls	r3, r0, #16
 801a760:	2010      	movs	r0, #16
 801a762:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801a766:	bf04      	itt	eq
 801a768:	021b      	lsleq	r3, r3, #8
 801a76a:	3008      	addeq	r0, #8
 801a76c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801a770:	bf04      	itt	eq
 801a772:	011b      	lsleq	r3, r3, #4
 801a774:	3004      	addeq	r0, #4
 801a776:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801a77a:	bf04      	itt	eq
 801a77c:	009b      	lsleq	r3, r3, #2
 801a77e:	3002      	addeq	r0, #2
 801a780:	2b00      	cmp	r3, #0
 801a782:	db04      	blt.n	801a78e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801a784:	3001      	adds	r0, #1
 801a786:	4770      	bx	lr
 801a788:	2000      	movs	r0, #0
 801a78a:	e7ea      	b.n	801a762 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801a78c:	2020      	movs	r0, #32
 801a78e:	4770      	bx	lr

0801a790 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801a790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a794:	b087      	sub	sp, #28
 801a796:	4681      	mov	r9, r0
 801a798:	4698      	mov	r8, r3
 801a79a:	4610      	mov	r0, r2
 801a79c:	460d      	mov	r5, r1
 801a79e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801a7a2:	b981      	cbnz	r1, 801a7c6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801a7a4:	b14b      	cbz	r3, 801a7ba <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801a7a6:	460b      	mov	r3, r1
 801a7a8:	464a      	mov	r2, r9
 801a7aa:	4641      	mov	r1, r8
 801a7ac:	e9cd 4700 	strd	r4, r7, [sp]
 801a7b0:	f7ff ffee 	bl	801a790 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a7b4:	b007      	add	sp, #28
 801a7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7ba:	f04f 33ff 	mov.w	r3, #4294967295
 801a7be:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801a7c2:	603b      	str	r3, [r7, #0]
 801a7c4:	e7f6      	b.n	801a7b4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801a7c6:	fa32 fa01 	lsrs.w	sl, r2, r1
 801a7ca:	d107      	bne.n	801a7dc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801a7cc:	fb09 f602 	mul.w	r6, r9, r2
 801a7d0:	fbb6 f0f4 	udiv	r0, r6, r4
 801a7d4:	fb04 6610 	mls	r6, r4, r0, r6
 801a7d8:	603e      	str	r6, [r7, #0]
 801a7da:	e7eb      	b.n	801a7b4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801a7dc:	2601      	movs	r6, #1
 801a7de:	fa09 fb01 	lsl.w	fp, r9, r1
 801a7e2:	408e      	lsls	r6, r1
 801a7e4:	fbbb f3f4 	udiv	r3, fp, r4
 801a7e8:	3e01      	subs	r6, #1
 801a7ea:	9302      	str	r3, [sp, #8]
 801a7ec:	fb0a f303 	mul.w	r3, sl, r3
 801a7f0:	4016      	ands	r6, r2
 801a7f2:	9303      	str	r3, [sp, #12]
 801a7f4:	4630      	mov	r0, r6
 801a7f6:	f7ff ffad 	bl	801a754 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a7fa:	464a      	mov	r2, r9
 801a7fc:	460b      	mov	r3, r1
 801a7fe:	4601      	mov	r1, r0
 801a800:	4630      	mov	r0, r6
 801a802:	e9cd 4700 	strd	r4, r7, [sp]
 801a806:	f7ff ffc3 	bl	801a790 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a80a:	9b02      	ldr	r3, [sp, #8]
 801a80c:	4606      	mov	r6, r0
 801a80e:	eb05 0108 	add.w	r1, r5, r8
 801a812:	fb04 bb13 	mls	fp, r4, r3, fp
 801a816:	4658      	mov	r0, fp
 801a818:	f7ff ff9c 	bl	801a754 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a81c:	ab05      	add	r3, sp, #20
 801a81e:	465a      	mov	r2, fp
 801a820:	e9cd 4300 	strd	r4, r3, [sp]
 801a824:	4603      	mov	r3, r0
 801a826:	4650      	mov	r0, sl
 801a828:	f7ff ffb2 	bl	801a790 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a82c:	6839      	ldr	r1, [r7, #0]
 801a82e:	9a05      	ldr	r2, [sp, #20]
 801a830:	9b03      	ldr	r3, [sp, #12]
 801a832:	4411      	add	r1, r2
 801a834:	fbb1 f2f4 	udiv	r2, r1, r4
 801a838:	18d3      	adds	r3, r2, r3
 801a83a:	fb04 1412 	mls	r4, r4, r2, r1
 801a83e:	441e      	add	r6, r3
 801a840:	603c      	str	r4, [r7, #0]
 801a842:	4430      	add	r0, r6
 801a844:	e7b6      	b.n	801a7b4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801a846 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801a846:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a84a:	b085      	sub	sp, #20
 801a84c:	f1b0 0900 	subs.w	r9, r0, #0
 801a850:	461d      	mov	r5, r3
 801a852:	4617      	mov	r7, r2
 801a854:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a856:	bfbb      	ittet	lt
 801a858:	f1c9 0900 	rsblt	r9, r9, #0
 801a85c:	f04f 36ff 	movlt.w	r6, #4294967295
 801a860:	2601      	movge	r6, #1
 801a862:	6823      	ldrlt	r3, [r4, #0]
 801a864:	bfbc      	itt	lt
 801a866:	425b      	neglt	r3, r3
 801a868:	6023      	strlt	r3, [r4, #0]
 801a86a:	2a00      	cmp	r2, #0
 801a86c:	da04      	bge.n	801a878 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801a86e:	6823      	ldr	r3, [r4, #0]
 801a870:	4257      	negs	r7, r2
 801a872:	4276      	negs	r6, r6
 801a874:	425b      	negs	r3, r3
 801a876:	6023      	str	r3, [r4, #0]
 801a878:	2d00      	cmp	r5, #0
 801a87a:	4638      	mov	r0, r7
 801a87c:	bfba      	itte	lt
 801a87e:	426d      	neglt	r5, r5
 801a880:	f04f 38ff 	movlt.w	r8, #4294967295
 801a884:	f04f 0801 	movge.w	r8, #1
 801a888:	f7ff ff64 	bl	801a754 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a88c:	ab03      	add	r3, sp, #12
 801a88e:	463a      	mov	r2, r7
 801a890:	e9cd 5300 	strd	r5, r3, [sp]
 801a894:	4603      	mov	r3, r0
 801a896:	4648      	mov	r0, r9
 801a898:	f7ff ff7a 	bl	801a790 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a89c:	6823      	ldr	r3, [r4, #0]
 801a89e:	9a03      	ldr	r2, [sp, #12]
 801a8a0:	4546      	cmp	r6, r8
 801a8a2:	441a      	add	r2, r3
 801a8a4:	fb92 f3f5 	sdiv	r3, r2, r5
 801a8a8:	4418      	add	r0, r3
 801a8aa:	fb05 2313 	mls	r3, r5, r3, r2
 801a8ae:	bf18      	it	ne
 801a8b0:	4240      	negne	r0, r0
 801a8b2:	1c72      	adds	r2, r6, #1
 801a8b4:	6023      	str	r3, [r4, #0]
 801a8b6:	d105      	bne.n	801a8c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	f1c3 0200 	rsb	r2, r3, #0
 801a8be:	db0b      	blt.n	801a8d8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801a8c0:	6022      	str	r2, [r4, #0]
 801a8c2:	e006      	b.n	801a8d2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a8c4:	2e01      	cmp	r6, #1
 801a8c6:	d104      	bne.n	801a8d2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	da02      	bge.n	801a8d2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a8cc:	442b      	add	r3, r5
 801a8ce:	3801      	subs	r0, #1
 801a8d0:	6023      	str	r3, [r4, #0]
 801a8d2:	b005      	add	sp, #20
 801a8d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a8d8:	3801      	subs	r0, #1
 801a8da:	1b52      	subs	r2, r2, r5
 801a8dc:	e7f0      	b.n	801a8c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801a8e0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801a8e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801a8e4:	4c1c      	ldr	r4, [pc, #112]	; (801a958 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801a8e6:	4605      	mov	r5, r0
 801a8e8:	6807      	ldr	r7, [r0, #0]
 801a8ea:	69a3      	ldr	r3, [r4, #24]
 801a8ec:	b92b      	cbnz	r3, 801a8fa <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801a8ee:	6840      	ldr	r0, [r0, #4]
 801a8f0:	e9c5 7000 	strd	r7, r0, [r5]
 801a8f4:	b004      	add	sp, #16
 801a8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8fa:	f04f 0802 	mov.w	r8, #2
 801a8fe:	68a2      	ldr	r2, [r4, #8]
 801a900:	ae04      	add	r6, sp, #16
 801a902:	6820      	ldr	r0, [r4, #0]
 801a904:	fb93 f1f8 	sdiv	r1, r3, r8
 801a908:	440a      	add	r2, r1
 801a90a:	69e1      	ldr	r1, [r4, #28]
 801a90c:	f846 2d04 	str.w	r2, [r6, #-4]!
 801a910:	463a      	mov	r2, r7
 801a912:	9600      	str	r6, [sp, #0]
 801a914:	f7ff ff97 	bl	801a846 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a918:	69a3      	ldr	r3, [r4, #24]
 801a91a:	4607      	mov	r7, r0
 801a91c:	686a      	ldr	r2, [r5, #4]
 801a91e:	6a21      	ldr	r1, [r4, #32]
 801a920:	9600      	str	r6, [sp, #0]
 801a922:	6860      	ldr	r0, [r4, #4]
 801a924:	f7ff ff8f 	bl	801a846 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a928:	69a3      	ldr	r3, [r4, #24]
 801a92a:	6962      	ldr	r2, [r4, #20]
 801a92c:	4407      	add	r7, r0
 801a92e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a930:	9600      	str	r6, [sp, #0]
 801a932:	68e0      	ldr	r0, [r4, #12]
 801a934:	fb93 f8f8 	sdiv	r8, r3, r8
 801a938:	4442      	add	r2, r8
 801a93a:	9203      	str	r2, [sp, #12]
 801a93c:	682a      	ldr	r2, [r5, #0]
 801a93e:	f7ff ff82 	bl	801a846 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a942:	4680      	mov	r8, r0
 801a944:	9600      	str	r6, [sp, #0]
 801a946:	69a3      	ldr	r3, [r4, #24]
 801a948:	686a      	ldr	r2, [r5, #4]
 801a94a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a94c:	6920      	ldr	r0, [r4, #16]
 801a94e:	f7ff ff7a 	bl	801a846 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a952:	4440      	add	r0, r8
 801a954:	e7cc      	b.n	801a8f0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801a956:	bf00      	nop
 801a958:	2002b8ac 	.word	0x2002b8ac

0801a95c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801a95c:	4b07      	ldr	r3, [pc, #28]	; (801a97c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801a95e:	781b      	ldrb	r3, [r3, #0]
 801a960:	2b01      	cmp	r3, #1
 801a962:	d109      	bne.n	801a978 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801a964:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a968:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a96c:	8003      	strh	r3, [r0, #0]
 801a96e:	4b04      	ldr	r3, [pc, #16]	; (801a980 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801a970:	881b      	ldrh	r3, [r3, #0]
 801a972:	3b01      	subs	r3, #1
 801a974:	1a9b      	subs	r3, r3, r2
 801a976:	800b      	strh	r3, [r1, #0]
 801a978:	4770      	bx	lr
 801a97a:	bf00      	nop
 801a97c:	2002b898 	.word	0x2002b898
 801a980:	2002b89c 	.word	0x2002b89c

0801a984 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801a984:	4b07      	ldr	r3, [pc, #28]	; (801a9a4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801a986:	b510      	push	{r4, lr}
 801a988:	781b      	ldrb	r3, [r3, #0]
 801a98a:	2b01      	cmp	r3, #1
 801a98c:	d108      	bne.n	801a9a0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801a98e:	4b06      	ldr	r3, [pc, #24]	; (801a9a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801a990:	880c      	ldrh	r4, [r1, #0]
 801a992:	881b      	ldrh	r3, [r3, #0]
 801a994:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a998:	3b01      	subs	r3, #1
 801a99a:	1b1b      	subs	r3, r3, r4
 801a99c:	8003      	strh	r3, [r0, #0]
 801a99e:	800a      	strh	r2, [r1, #0]
 801a9a0:	bd10      	pop	{r4, pc}
 801a9a2:	bf00      	nop
 801a9a4:	2002b898 	.word	0x2002b898
 801a9a8:	2002b89c 	.word	0x2002b89c

0801a9ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801a9ac:	4b0a      	ldr	r3, [pc, #40]	; (801a9d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801a9ae:	b510      	push	{r4, lr}
 801a9b0:	781b      	ldrb	r3, [r3, #0]
 801a9b2:	2b01      	cmp	r3, #1
 801a9b4:	d10e      	bne.n	801a9d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801a9b6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a9ba:	8843      	ldrh	r3, [r0, #2]
 801a9bc:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a9c0:	18ca      	adds	r2, r1, r3
 801a9c2:	4b06      	ldr	r3, [pc, #24]	; (801a9dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801a9c4:	8044      	strh	r4, [r0, #2]
 801a9c6:	881b      	ldrh	r3, [r3, #0]
 801a9c8:	1a9b      	subs	r3, r3, r2
 801a9ca:	8003      	strh	r3, [r0, #0]
 801a9cc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a9d0:	8081      	strh	r1, [r0, #4]
 801a9d2:	80c3      	strh	r3, [r0, #6]
 801a9d4:	bd10      	pop	{r4, pc}
 801a9d6:	bf00      	nop
 801a9d8:	2002b898 	.word	0x2002b898
 801a9dc:	2002b89c 	.word	0x2002b89c

0801a9e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801a9e0:	4b08      	ldr	r3, [pc, #32]	; (801aa04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801a9e2:	781b      	ldrb	r3, [r3, #0]
 801a9e4:	2b01      	cmp	r3, #1
 801a9e6:	d10c      	bne.n	801aa02 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801a9e8:	8803      	ldrh	r3, [r0, #0]
 801a9ea:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801a9ee:	8842      	ldrh	r2, [r0, #2]
 801a9f0:	8002      	strh	r2, [r0, #0]
 801a9f2:	185a      	adds	r2, r3, r1
 801a9f4:	4b04      	ldr	r3, [pc, #16]	; (801aa08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801a9f6:	881b      	ldrh	r3, [r3, #0]
 801a9f8:	1a9b      	subs	r3, r3, r2
 801a9fa:	8043      	strh	r3, [r0, #2]
 801a9fc:	88c3      	ldrh	r3, [r0, #6]
 801a9fe:	80c1      	strh	r1, [r0, #6]
 801aa00:	8083      	strh	r3, [r0, #4]
 801aa02:	4770      	bx	lr
 801aa04:	2002b898 	.word	0x2002b898
 801aa08:	2002b89c 	.word	0x2002b89c

0801aa0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801aa0c:	4b07      	ldr	r3, [pc, #28]	; (801aa2c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801aa0e:	b510      	push	{r4, lr}
 801aa10:	781b      	ldrb	r3, [r3, #0]
 801aa12:	2b01      	cmp	r3, #1
 801aa14:	d108      	bne.n	801aa28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801aa16:	f9b1 3000 	ldrsh.w	r3, [r1]
 801aa1a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801aa1e:	8003      	strh	r3, [r0, #0]
 801aa20:	8893      	ldrh	r3, [r2, #4]
 801aa22:	3b01      	subs	r3, #1
 801aa24:	1b1b      	subs	r3, r3, r4
 801aa26:	800b      	strh	r3, [r1, #0]
 801aa28:	bd10      	pop	{r4, pc}
 801aa2a:	bf00      	nop
 801aa2c:	2002b898 	.word	0x2002b898

0801aa30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801aa30:	4b0a      	ldr	r3, [pc, #40]	; (801aa5c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801aa32:	460a      	mov	r2, r1
 801aa34:	b510      	push	{r4, lr}
 801aa36:	781b      	ldrb	r3, [r3, #0]
 801aa38:	2b01      	cmp	r3, #1
 801aa3a:	d10d      	bne.n	801aa58 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801aa3c:	8881      	ldrh	r1, [r0, #4]
 801aa3e:	8803      	ldrh	r3, [r0, #0]
 801aa40:	440b      	add	r3, r1
 801aa42:	4601      	mov	r1, r0
 801aa44:	3b01      	subs	r3, #1
 801aa46:	f821 3b02 	strh.w	r3, [r1], #2
 801aa4a:	f7ff ffdf 	bl	801aa0c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801aa4e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801aa52:	88c2      	ldrh	r2, [r0, #6]
 801aa54:	80c3      	strh	r3, [r0, #6]
 801aa56:	8082      	strh	r2, [r0, #4]
 801aa58:	bd10      	pop	{r4, pc}
 801aa5a:	bf00      	nop
 801aa5c:	2002b898 	.word	0x2002b898

0801aa60 <_ZN8touchgfx11Application13requestRedrawEv>:
 801aa60:	4b06      	ldr	r3, [pc, #24]	; (801aa7c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801aa62:	2100      	movs	r1, #0
 801aa64:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aa68:	4b05      	ldr	r3, [pc, #20]	; (801aa80 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801aa6a:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801aa6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801aa72:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801aa76:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801aa7a:	4770      	bx	lr
 801aa7c:	2002b894 	.word	0x2002b894
 801aa80:	2002b896 	.word	0x2002b896

0801aa84 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801aa84:	4b03      	ldr	r3, [pc, #12]	; (801aa94 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801aa86:	6818      	ldr	r0, [r3, #0]
 801aa88:	b110      	cbz	r0, 801aa90 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801aa8a:	6803      	ldr	r3, [r0, #0]
 801aa8c:	699b      	ldr	r3, [r3, #24]
 801aa8e:	4718      	bx	r3
 801aa90:	4770      	bx	lr
 801aa92:	bf00      	nop
 801aa94:	2002b8dc 	.word	0x2002b8dc

0801aa98 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801aa98:	4770      	bx	lr
	...

0801aa9c <_ZN8touchgfx11Application4drawEv>:
 801aa9c:	4b09      	ldr	r3, [pc, #36]	; (801aac4 <_ZN8touchgfx11Application4drawEv+0x28>)
 801aa9e:	b507      	push	{r0, r1, r2, lr}
 801aaa0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aaa4:	2100      	movs	r1, #0
 801aaa6:	4b08      	ldr	r3, [pc, #32]	; (801aac8 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801aaa8:	9100      	str	r1, [sp, #0]
 801aaaa:	4669      	mov	r1, sp
 801aaac:	f9b3 3000 	ldrsh.w	r3, [r3]
 801aab0:	f8ad 2004 	strh.w	r2, [sp, #4]
 801aab4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801aab8:	6803      	ldr	r3, [r0, #0]
 801aaba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801aabc:	4798      	blx	r3
 801aabe:	b003      	add	sp, #12
 801aac0:	f85d fb04 	ldr.w	pc, [sp], #4
 801aac4:	2002b894 	.word	0x2002b894
 801aac8:	2002b896 	.word	0x2002b896

0801aacc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801aacc:	4b03      	ldr	r3, [pc, #12]	; (801aadc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801aace:	6818      	ldr	r0, [r3, #0]
 801aad0:	b110      	cbz	r0, 801aad8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801aad2:	6803      	ldr	r3, [r0, #0]
 801aad4:	69db      	ldr	r3, [r3, #28]
 801aad6:	4718      	bx	r3
 801aad8:	4770      	bx	lr
 801aada:	bf00      	nop
 801aadc:	2002b8dc 	.word	0x2002b8dc

0801aae0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801aae0:	4b03      	ldr	r3, [pc, #12]	; (801aaf0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801aae2:	6818      	ldr	r0, [r3, #0]
 801aae4:	b110      	cbz	r0, 801aaec <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801aae6:	6803      	ldr	r3, [r0, #0]
 801aae8:	6a1b      	ldr	r3, [r3, #32]
 801aaea:	4718      	bx	r3
 801aaec:	4770      	bx	lr
 801aaee:	bf00      	nop
 801aaf0:	2002b8dc 	.word	0x2002b8dc

0801aaf4 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801aaf4:	4b03      	ldr	r3, [pc, #12]	; (801ab04 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801aaf6:	6818      	ldr	r0, [r3, #0]
 801aaf8:	b110      	cbz	r0, 801ab00 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801aafa:	6803      	ldr	r3, [r0, #0]
 801aafc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aafe:	4718      	bx	r3
 801ab00:	4770      	bx	lr
 801ab02:	bf00      	nop
 801ab04:	2002b8dc 	.word	0x2002b8dc

0801ab08 <_ZN8touchgfx11ApplicationD1Ev>:
 801ab08:	4770      	bx	lr

0801ab0a <_ZN8touchgfx11ApplicationD0Ev>:
 801ab0a:	b510      	push	{r4, lr}
 801ab0c:	4604      	mov	r4, r0
 801ab0e:	f44f 719c 	mov.w	r1, #312	; 0x138
 801ab12:	f00f f96f 	bl	8029df4 <_ZdlPvj>
 801ab16:	4620      	mov	r0, r4
 801ab18:	bd10      	pop	{r4, pc}
	...

0801ab1c <_ZN8touchgfx11Application15handleTickEventEv>:
 801ab1c:	b570      	push	{r4, r5, r6, lr}
 801ab1e:	4d38      	ldr	r5, [pc, #224]	; (801ac00 <_ZN8touchgfx11Application15handleTickEventEv+0xe4>)
 801ab20:	4604      	mov	r4, r0
 801ab22:	6828      	ldr	r0, [r5, #0]
 801ab24:	b140      	cbz	r0, 801ab38 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801ab26:	7a03      	ldrb	r3, [r0, #8]
 801ab28:	b933      	cbnz	r3, 801ab38 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801ab2a:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801ab2e:	6803      	ldr	r3, [r0, #0]
 801ab30:	689b      	ldr	r3, [r3, #8]
 801ab32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab36:	4718      	bx	r3
 801ab38:	f894 3135 	ldrb.w	r3, [r4, #309]	; 0x135
 801ab3c:	b97b      	cbnz	r3, 801ab5e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ab3e:	b170      	cbz	r0, 801ab5e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ab40:	7a03      	ldrb	r3, [r0, #8]
 801ab42:	b163      	cbz	r3, 801ab5e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ab44:	4b2f      	ldr	r3, [pc, #188]	; (801ac04 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801ab46:	6818      	ldr	r0, [r3, #0]
 801ab48:	b110      	cbz	r0, 801ab50 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801ab4a:	6803      	ldr	r3, [r0, #0]
 801ab4c:	691b      	ldr	r3, [r3, #16]
 801ab4e:	4798      	blx	r3
 801ab50:	6828      	ldr	r0, [r5, #0]
 801ab52:	6803      	ldr	r3, [r0, #0]
 801ab54:	68db      	ldr	r3, [r3, #12]
 801ab56:	4798      	blx	r3
 801ab58:	2301      	movs	r3, #1
 801ab5a:	f884 3135 	strb.w	r3, [r4, #309]	; 0x135
 801ab5e:	2500      	movs	r5, #0
 801ab60:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801ab64:	42a8      	cmp	r0, r5
 801ab66:	dd0c      	ble.n	801ab82 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801ab68:	1963      	adds	r3, r4, r5
 801ab6a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801ab6e:	b132      	cbz	r2, 801ab7e <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801ab70:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801ab74:	4413      	add	r3, r2
 801ab76:	6858      	ldr	r0, [r3, #4]
 801ab78:	6803      	ldr	r3, [r0, #0]
 801ab7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ab7c:	4798      	blx	r3
 801ab7e:	3501      	adds	r5, #1
 801ab80:	e7ee      	b.n	801ab60 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801ab82:	2300      	movs	r3, #0
 801ab84:	461a      	mov	r2, r3
 801ab86:	4298      	cmp	r0, r3
 801ab88:	d10f      	bne.n	801abaa <_ZN8touchgfx11Application15handleTickEventEv+0x8e>
 801ab8a:	1d25      	adds	r5, r4, #4
 801ab8c:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 801ab90:	4291      	cmp	r1, r2
 801ab92:	dd2d      	ble.n	801abf0 <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801ab94:	1e48      	subs	r0, r1, #1
 801ab96:	b280      	uxth	r0, r0
 801ab98:	4288      	cmp	r0, r1
 801ab9a:	d31a      	bcc.n	801abd2 <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801ab9c:	4b1a      	ldr	r3, [pc, #104]	; (801ac08 <_ZN8touchgfx11Application15handleTickEventEv+0xec>)
 801ab9e:	f240 11a9 	movw	r1, #425	; 0x1a9
 801aba2:	4a1a      	ldr	r2, [pc, #104]	; (801ac0c <_ZN8touchgfx11Application15handleTickEventEv+0xf0>)
 801aba4:	481a      	ldr	r0, [pc, #104]	; (801ac10 <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801aba6:	f00f f953 	bl	8029e50 <__assert_func>
 801abaa:	18e1      	adds	r1, r4, r3
 801abac:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801abb0:	b16d      	cbz	r5, 801abce <_ZN8touchgfx11Application15handleTickEventEv+0xb2>
 801abb2:	429a      	cmp	r2, r3
 801abb4:	d00a      	beq.n	801abcc <_ZN8touchgfx11Application15handleTickEventEv+0xb0>
 801abb6:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801abba:	4431      	add	r1, r6
 801abbc:	684e      	ldr	r6, [r1, #4]
 801abbe:	b291      	uxth	r1, r2
 801abc0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801abc4:	604e      	str	r6, [r1, #4]
 801abc6:	18a1      	adds	r1, r4, r2
 801abc8:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801abcc:	3201      	adds	r2, #1
 801abce:	3301      	adds	r3, #1
 801abd0:	e7d9      	b.n	801ab86 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801abd2:	eb04 0380 	add.w	r3, r4, r0, lsl #2
 801abd6:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 801abda:	3304      	adds	r3, #4
 801abdc:	428b      	cmp	r3, r1
 801abde:	d004      	beq.n	801abea <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 801abe0:	f853 6f04 	ldr.w	r6, [r3, #4]!
 801abe4:	f843 6c04 	str.w	r6, [r3, #-4]
 801abe8:	e7f8      	b.n	801abdc <_ZN8touchgfx11Application15handleTickEventEv+0xc0>
 801abea:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 801abee:	e7cd      	b.n	801ab8c <_ZN8touchgfx11Application15handleTickEventEv+0x70>
 801abf0:	4b04      	ldr	r3, [pc, #16]	; (801ac04 <_ZN8touchgfx11Application15handleTickEventEv+0xe8>)
 801abf2:	6818      	ldr	r0, [r3, #0]
 801abf4:	b110      	cbz	r0, 801abfc <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801abf6:	6803      	ldr	r3, [r0, #0]
 801abf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801abfa:	e79a      	b.n	801ab32 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801abfc:	bd70      	pop	{r4, r5, r6, pc}
 801abfe:	bf00      	nop
 801ac00:	2002b8e0 	.word	0x2002b8e0
 801ac04:	2002b8dc 	.word	0x2002b8dc
 801ac08:	08030a0e 	.word	0x08030a0e
 801ac0c:	08030bf8 	.word	0x08030bf8
 801ac10:	08030a1c 	.word	0x08030a1c

0801ac14 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801ac14:	b570      	push	{r4, r5, r6, lr}
 801ac16:	4606      	mov	r6, r0
 801ac18:	460c      	mov	r4, r1
 801ac1a:	b929      	cbnz	r1, 801ac28 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801ac1c:	4b0c      	ldr	r3, [pc, #48]	; (801ac50 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801ac1e:	2167      	movs	r1, #103	; 0x67
 801ac20:	4a0c      	ldr	r2, [pc, #48]	; (801ac54 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801ac22:	480d      	ldr	r0, [pc, #52]	; (801ac58 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801ac24:	f00f f914 	bl	8029e50 <__assert_func>
 801ac28:	2300      	movs	r3, #0
 801ac2a:	4d0c      	ldr	r5, [pc, #48]	; (801ac5c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801ac2c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801ac30:	6828      	ldr	r0, [r5, #0]
 801ac32:	b110      	cbz	r0, 801ac3a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801ac34:	6803      	ldr	r3, [r0, #0]
 801ac36:	695b      	ldr	r3, [r3, #20]
 801ac38:	4798      	blx	r3
 801ac3a:	602c      	str	r4, [r5, #0]
 801ac3c:	4620      	mov	r0, r4
 801ac3e:	6823      	ldr	r3, [r4, #0]
 801ac40:	68db      	ldr	r3, [r3, #12]
 801ac42:	4798      	blx	r3
 801ac44:	6833      	ldr	r3, [r6, #0]
 801ac46:	4630      	mov	r0, r6
 801ac48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ac4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac4e:	4718      	bx	r3
 801ac50:	080309da 	.word	0x080309da
 801ac54:	08030ab8 	.word	0x08030ab8
 801ac58:	080309e4 	.word	0x080309e4
 801ac5c:	2002b8dc 	.word	0x2002b8dc

0801ac60 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801ac60:	b510      	push	{r4, lr}
 801ac62:	f9b1 4000 	ldrsh.w	r4, [r1]
 801ac66:	888a      	ldrh	r2, [r1, #4]
 801ac68:	f9b0 3000 	ldrsh.w	r3, [r0]
 801ac6c:	4422      	add	r2, r4
 801ac6e:	b212      	sxth	r2, r2
 801ac70:	4293      	cmp	r3, r2
 801ac72:	da15      	bge.n	801aca0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801ac74:	8882      	ldrh	r2, [r0, #4]
 801ac76:	4413      	add	r3, r2
 801ac78:	b21b      	sxth	r3, r3
 801ac7a:	429c      	cmp	r4, r3
 801ac7c:	da10      	bge.n	801aca0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801ac7e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801ac82:	88c9      	ldrh	r1, [r1, #6]
 801ac84:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801ac88:	4419      	add	r1, r3
 801ac8a:	b209      	sxth	r1, r1
 801ac8c:	428a      	cmp	r2, r1
 801ac8e:	da07      	bge.n	801aca0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801ac90:	88c0      	ldrh	r0, [r0, #6]
 801ac92:	4410      	add	r0, r2
 801ac94:	b200      	sxth	r0, r0
 801ac96:	4283      	cmp	r3, r0
 801ac98:	bfac      	ite	ge
 801ac9a:	2000      	movge	r0, #0
 801ac9c:	2001      	movlt	r0, #1
 801ac9e:	bd10      	pop	{r4, pc}
 801aca0:	2000      	movs	r0, #0
 801aca2:	e7fc      	b.n	801ac9e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801aca4 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801aca4:	b570      	push	{r4, r5, r6, lr}
 801aca6:	f9b1 4000 	ldrsh.w	r4, [r1]
 801acaa:	f9b0 5000 	ldrsh.w	r5, [r0]
 801acae:	42ac      	cmp	r4, r5
 801acb0:	db18      	blt.n	801ace4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801acb2:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801acb6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801acba:	429a      	cmp	r2, r3
 801acbc:	db12      	blt.n	801ace4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801acbe:	8886      	ldrh	r6, [r0, #4]
 801acc0:	4435      	add	r5, r6
 801acc2:	888e      	ldrh	r6, [r1, #4]
 801acc4:	4434      	add	r4, r6
 801acc6:	b22d      	sxth	r5, r5
 801acc8:	b224      	sxth	r4, r4
 801acca:	42a5      	cmp	r5, r4
 801accc:	db0a      	blt.n	801ace4 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801acce:	88c0      	ldrh	r0, [r0, #6]
 801acd0:	4418      	add	r0, r3
 801acd2:	88cb      	ldrh	r3, [r1, #6]
 801acd4:	441a      	add	r2, r3
 801acd6:	b200      	sxth	r0, r0
 801acd8:	b212      	sxth	r2, r2
 801acda:	4290      	cmp	r0, r2
 801acdc:	bfb4      	ite	lt
 801acde:	2000      	movlt	r0, #0
 801ace0:	2001      	movge	r0, #1
 801ace2:	bd70      	pop	{r4, r5, r6, pc}
 801ace4:	2000      	movs	r0, #0
 801ace6:	e7fc      	b.n	801ace2 <_ZNK8touchgfx4Rect8includesERKS0_+0x3e>

0801ace8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801ace8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acea:	4604      	mov	r4, r0
 801acec:	4608      	mov	r0, r1
 801acee:	460d      	mov	r5, r1
 801acf0:	f7fc fc3d 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 801acf4:	b978      	cbnz	r0, 801ad16 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801acf6:	4620      	mov	r0, r4
 801acf8:	f7fc fc39 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 801acfc:	f9b5 6000 	ldrsh.w	r6, [r5]
 801ad00:	b150      	cbz	r0, 801ad18 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801ad02:	8026      	strh	r6, [r4, #0]
 801ad04:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801ad08:	8063      	strh	r3, [r4, #2]
 801ad0a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801ad0e:	80a3      	strh	r3, [r4, #4]
 801ad10:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801ad14:	80e3      	strh	r3, [r4, #6]
 801ad16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad18:	f9b4 1000 	ldrsh.w	r1, [r4]
 801ad1c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801ad20:	42b1      	cmp	r1, r6
 801ad22:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801ad26:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801ad2a:	460f      	mov	r7, r1
 801ad2c:	88ed      	ldrh	r5, [r5, #6]
 801ad2e:	bfa8      	it	ge
 801ad30:	4637      	movge	r7, r6
 801ad32:	4293      	cmp	r3, r2
 801ad34:	4618      	mov	r0, r3
 801ad36:	4466      	add	r6, ip
 801ad38:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801ad3c:	bfa8      	it	ge
 801ad3e:	4610      	movge	r0, r2
 801ad40:	442a      	add	r2, r5
 801ad42:	88e5      	ldrh	r5, [r4, #6]
 801ad44:	4461      	add	r1, ip
 801ad46:	b236      	sxth	r6, r6
 801ad48:	8027      	strh	r7, [r4, #0]
 801ad4a:	442b      	add	r3, r5
 801ad4c:	b209      	sxth	r1, r1
 801ad4e:	b212      	sxth	r2, r2
 801ad50:	8060      	strh	r0, [r4, #2]
 801ad52:	b21b      	sxth	r3, r3
 801ad54:	428e      	cmp	r6, r1
 801ad56:	bfac      	ite	ge
 801ad58:	ebc7 0106 	rsbge	r1, r7, r6
 801ad5c:	ebc7 0101 	rsblt	r1, r7, r1
 801ad60:	429a      	cmp	r2, r3
 801ad62:	bfac      	ite	ge
 801ad64:	ebc0 0202 	rsbge	r2, r0, r2
 801ad68:	ebc0 0203 	rsblt	r2, r0, r3
 801ad6c:	80a1      	strh	r1, [r4, #4]
 801ad6e:	80e2      	strh	r2, [r4, #6]
 801ad70:	e7d1      	b.n	801ad16 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801ad74 <_ZN8touchgfx11Application11getInstanceEv>:
 801ad74:	4b01      	ldr	r3, [pc, #4]	; (801ad7c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801ad76:	6818      	ldr	r0, [r3, #0]
 801ad78:	4770      	bx	lr
 801ad7a:	bf00      	nop
 801ad7c:	2002b8ec 	.word	0x2002b8ec

0801ad80 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801ad80:	2300      	movs	r3, #0
 801ad82:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801ad86:	30a8      	adds	r0, #168	; 0xa8
 801ad88:	f820 3c24 	strh.w	r3, [r0, #-36]
 801ad8c:	f802 3b01 	strb.w	r3, [r2], #1
 801ad90:	4282      	cmp	r2, r0
 801ad92:	d1fb      	bne.n	801ad8c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801ad94:	4770      	bx	lr

0801ad96 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801ad96:	4603      	mov	r3, r0
 801ad98:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801ad9c:	2200      	movs	r2, #0
 801ad9e:	801a      	strh	r2, [r3, #0]
 801ada0:	3308      	adds	r3, #8
 801ada2:	f823 2c06 	strh.w	r2, [r3, #-6]
 801ada6:	f823 2c04 	strh.w	r2, [r3, #-4]
 801adaa:	f823 2c02 	strh.w	r2, [r3, #-2]
 801adae:	428b      	cmp	r3, r1
 801adb0:	d1f5      	bne.n	801ad9e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801adb2:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801adb6:	4770      	bx	lr

0801adb8 <_ZN8touchgfx11ApplicationC1Ev>:
 801adb8:	b570      	push	{r4, r5, r6, lr}
 801adba:	4b1a      	ldr	r3, [pc, #104]	; (801ae24 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801adbc:	2500      	movs	r5, #0
 801adbe:	4604      	mov	r4, r0
 801adc0:	30a8      	adds	r0, #168	; 0xa8
 801adc2:	f840 3ca8 	str.w	r3, [r0, #-168]
 801adc6:	f820 5c24 	strh.w	r5, [r0, #-36]
 801adca:	f7ff ffe4 	bl	801ad96 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801adce:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801add2:	f7ff ffe0 	bl	801ad96 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801add6:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801adda:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801adde:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801ade2:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801ade6:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801adea:	f884 5135 	strb.w	r5, [r4, #309]	; 0x135
 801adee:	490e      	ldr	r1, [pc, #56]	; (801ae28 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801adf0:	480e      	ldr	r0, [pc, #56]	; (801ae2c <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801adf2:	f00e fed3 	bl	8029b9c <CRC_Lock>
 801adf6:	4e0e      	ldr	r6, [pc, #56]	; (801ae30 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801adf8:	4b0e      	ldr	r3, [pc, #56]	; (801ae34 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801adfa:	b158      	cbz	r0, 801ae14 <_ZN8touchgfx11ApplicationC1Ev+0x5c>
 801adfc:	801d      	strh	r5, [r3, #0]
 801adfe:	2300      	movs	r3, #0
 801ae00:	4a0d      	ldr	r2, [pc, #52]	; (801ae38 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801ae02:	4620      	mov	r0, r4
 801ae04:	6013      	str	r3, [r2, #0]
 801ae06:	4a0d      	ldr	r2, [pc, #52]	; (801ae3c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801ae08:	6033      	str	r3, [r6, #0]
 801ae0a:	6013      	str	r3, [r2, #0]
 801ae0c:	f7ff ffb8 	bl	801ad80 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801ae10:	4620      	mov	r0, r4
 801ae12:	bd70      	pop	{r4, r5, r6, pc}
 801ae14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ae18:	2002      	movs	r0, #2
 801ae1a:	801a      	strh	r2, [r3, #0]
 801ae1c:	6030      	str	r0, [r6, #0]
 801ae1e:	f001 fa01 	bl	801c224 <_ZN8touchgfx6Screen4drawEv>
 801ae22:	e7ec      	b.n	801adfe <_ZN8touchgfx11ApplicationC1Ev+0x46>
 801ae24:	08030a7c 	.word	0x08030a7c
 801ae28:	b5e8b5cd 	.word	0xb5e8b5cd
 801ae2c:	f407a5c2 	.word	0xf407a5c2
 801ae30:	2002b8dc 	.word	0x2002b8dc
 801ae34:	20000044 	.word	0x20000044
 801ae38:	2002b8ec 	.word	0x2002b8ec
 801ae3c:	2002b8e0 	.word	0x2002b8e0

0801ae40 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801ae40:	b510      	push	{r4, lr}
 801ae42:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801ae46:	428b      	cmp	r3, r1
 801ae48:	d806      	bhi.n	801ae58 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x18>
 801ae4a:	4b0b      	ldr	r3, [pc, #44]	; (801ae78 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x38>)
 801ae4c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 801ae50:	4a0a      	ldr	r2, [pc, #40]	; (801ae7c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3c>)
 801ae52:	480b      	ldr	r0, [pc, #44]	; (801ae80 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x40>)
 801ae54:	f00e fffc 	bl	8029e50 <__assert_func>
 801ae58:	3b01      	subs	r3, #1
 801ae5a:	b29b      	uxth	r3, r3
 801ae5c:	428b      	cmp	r3, r1
 801ae5e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801ae62:	d908      	bls.n	801ae76 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x36>
 801ae64:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801ae68:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801ae6c:	681a      	ldr	r2, [r3, #0]
 801ae6e:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801ae72:	685a      	ldr	r2, [r3, #4]
 801ae74:	6062      	str	r2, [r4, #4]
 801ae76:	bd10      	pop	{r4, pc}
 801ae78:	08030a0e 	.word	0x08030a0e
 801ae7c:	08030afc 	.word	0x08030afc
 801ae80:	08030a1c 	.word	0x08030a1c

0801ae84 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801ae84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ae86:	466b      	mov	r3, sp
 801ae88:	4604      	mov	r4, r0
 801ae8a:	e883 0006 	stmia.w	r3, {r1, r2}
 801ae8e:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801ae92:	2a07      	cmp	r2, #7
 801ae94:	d906      	bls.n	801aea4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801ae96:	4b09      	ldr	r3, [pc, #36]	; (801aebc <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801ae98:	f44f 71c1 	mov.w	r1, #386	; 0x182
 801ae9c:	4a08      	ldr	r2, [pc, #32]	; (801aec0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801ae9e:	4809      	ldr	r0, [pc, #36]	; (801aec4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801aea0:	f00e ffd6 	bl	8029e50 <__assert_func>
 801aea4:	1c51      	adds	r1, r2, #1
 801aea6:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801aeaa:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801aeae:	cb03      	ldmia	r3!, {r0, r1}
 801aeb0:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801aeb4:	6069      	str	r1, [r5, #4]
 801aeb6:	b003      	add	sp, #12
 801aeb8:	bd30      	pop	{r4, r5, pc}
 801aeba:	bf00      	nop
 801aebc:	08030a45 	.word	0x08030a45
 801aec0:	08030b92 	.word	0x08030b92
 801aec4:	08030a1c 	.word	0x08030a1c

0801aec8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801aec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aecc:	b08d      	sub	sp, #52	; 0x34
 801aece:	4683      	mov	fp, r0
 801aed0:	ac08      	add	r4, sp, #32
 801aed2:	4620      	mov	r0, r4
 801aed4:	e884 0006 	stmia.w	r4, {r1, r2}
 801aed8:	f7fc fb49 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 801aedc:	2800      	cmp	r0, #0
 801aede:	d16a      	bne.n	801afb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801aee0:	9402      	str	r4, [sp, #8]
 801aee2:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801aee6:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801aeea:	2400      	movs	r4, #0
 801aeec:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801aef0:	9301      	str	r3, [sp, #4]
 801aef2:	36a0      	adds	r6, #160	; 0xa0
 801aef4:	42a5      	cmp	r5, r4
 801aef6:	d00d      	beq.n	801af14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c>
 801aef8:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801aefc:	9802      	ldr	r0, [sp, #8]
 801aefe:	f7ff fed1 	bl	801aca4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801af02:	b128      	cbz	r0, 801af10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x48>
 801af04:	1e69      	subs	r1, r5, #1
 801af06:	9801      	ldr	r0, [sp, #4]
 801af08:	1b09      	subs	r1, r1, r4
 801af0a:	b289      	uxth	r1, r1
 801af0c:	f7ff ff98 	bl	801ae40 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801af10:	3401      	adds	r4, #1
 801af12:	e7ef      	b.n	801aef4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801af14:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801af18:	1e7b      	subs	r3, r7, #1
 801af1a:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801af1e:	9703      	str	r7, [sp, #12]
 801af20:	9300      	str	r3, [sp, #0]
 801af22:	2400      	movs	r4, #0
 801af24:	4655      	mov	r5, sl
 801af26:	9704      	str	r7, [sp, #16]
 801af28:	4626      	mov	r6, r4
 801af2a:	9b04      	ldr	r3, [sp, #16]
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d078      	beq.n	801b022 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x15a>
 801af30:	9902      	ldr	r1, [sp, #8]
 801af32:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801af36:	f7ff fe93 	bl	801ac60 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801af3a:	b360      	cbz	r0, 801af96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801af3c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801af40:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801af44:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
 801af48:	45e6      	cmp	lr, ip
 801af4a:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801af4e:	db35      	blt.n	801afbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801af50:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801af54:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801af58:	4472      	add	r2, lr
 801af5a:	4463      	add	r3, ip
 801af5c:	b212      	sxth	r2, r2
 801af5e:	b21b      	sxth	r3, r3
 801af60:	429a      	cmp	r2, r3
 801af62:	dc2b      	bgt.n	801afbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xf4>
 801af64:	fa1f f288 	uxth.w	r2, r8
 801af68:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801af6c:	45c1      	cmp	r9, r8
 801af6e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801af72:	4413      	add	r3, r2
 801af74:	fa1f fc89 	uxth.w	ip, r9
 801af78:	b29b      	uxth	r3, r3
 801af7a:	fa0f fe83 	sxth.w	lr, r3
 801af7e:	db0f      	blt.n	801afa0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xd8>
 801af80:	eba3 030c 	sub.w	r3, r3, ip
 801af84:	1ac9      	subs	r1, r1, r3
 801af86:	b209      	sxth	r1, r1
 801af88:	2900      	cmp	r1, #0
 801af8a:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801af8e:	dd12      	ble.n	801afb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801af90:	f8ad e022 	strh.w	lr, [sp, #34]	; 0x22
 801af94:	4604      	mov	r4, r0
 801af96:	9b04      	ldr	r3, [sp, #16]
 801af98:	3d08      	subs	r5, #8
 801af9a:	3b01      	subs	r3, #1
 801af9c:	9304      	str	r3, [sp, #16]
 801af9e:	e7c4      	b.n	801af2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62>
 801afa0:	4461      	add	r1, ip
 801afa2:	b209      	sxth	r1, r1
 801afa4:	4571      	cmp	r1, lr
 801afa6:	dc3a      	bgt.n	801b01e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801afa8:	eba2 020c 	sub.w	r2, r2, ip
 801afac:	b212      	sxth	r2, r2
 801afae:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801afb2:	2a00      	cmp	r2, #0
 801afb4:	dcee      	bgt.n	801af94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801afb6:	b00d      	add	sp, #52	; 0x34
 801afb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afbc:	45c1      	cmp	r9, r8
 801afbe:	db2e      	blt.n	801b01e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801afc0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801afc4:	4499      	add	r9, r3
 801afc6:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801afca:	4498      	add	r8, r3
 801afcc:	fa0f f989 	sxth.w	r9, r9
 801afd0:	fa0f f888 	sxth.w	r8, r8
 801afd4:	45c1      	cmp	r9, r8
 801afd6:	dc22      	bgt.n	801b01e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801afd8:	fa1f f28c 	uxth.w	r2, ip
 801afdc:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801afe0:	45e6      	cmp	lr, ip
 801afe2:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801afe6:	4413      	add	r3, r2
 801afe8:	fa1f f88e 	uxth.w	r8, lr
 801afec:	b29b      	uxth	r3, r3
 801afee:	fa0f f983 	sxth.w	r9, r3
 801aff2:	db0a      	blt.n	801b00a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x142>
 801aff4:	eba3 0308 	sub.w	r3, r3, r8
 801aff8:	1ac9      	subs	r1, r1, r3
 801affa:	b209      	sxth	r1, r1
 801affc:	2900      	cmp	r1, #0
 801affe:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 801b002:	ddd8      	ble.n	801afb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801b004:	f8ad 9020 	strh.w	r9, [sp, #32]
 801b008:	e7c4      	b.n	801af94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xcc>
 801b00a:	4441      	add	r1, r8
 801b00c:	b209      	sxth	r1, r1
 801b00e:	4549      	cmp	r1, r9
 801b010:	dc05      	bgt.n	801b01e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x156>
 801b012:	eba2 0208 	sub.w	r2, r2, r8
 801b016:	b212      	sxth	r2, r2
 801b018:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 801b01c:	e7c9      	b.n	801afb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801b01e:	4606      	mov	r6, r0
 801b020:	e7b9      	b.n	801af96 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xce>
 801b022:	2c00      	cmp	r4, #0
 801b024:	f47f af7d 	bne.w	801af22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801b028:	2e00      	cmp	r6, #0
 801b02a:	f000 81dc 	beq.w	801b3e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801b02e:	f9bd 7022 	ldrsh.w	r7, [sp, #34]	; 0x22
 801b032:	4655      	mov	r5, sl
 801b034:	f9bd 6020 	ldrsh.w	r6, [sp, #32]
 801b038:	b2b9      	uxth	r1, r7
 801b03a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801b03e:	b2b3      	uxth	r3, r6
 801b040:	9104      	str	r1, [sp, #16]
 801b042:	9804      	ldr	r0, [sp, #16]
 801b044:	441a      	add	r2, r3
 801b046:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801b04a:	b292      	uxth	r2, r2
 801b04c:	4401      	add	r1, r0
 801b04e:	fa0f f882 	sxth.w	r8, r2
 801b052:	b289      	uxth	r1, r1
 801b054:	9105      	str	r1, [sp, #20]
 801b056:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 801b05a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b05e:	9b03      	ldr	r3, [sp, #12]
 801b060:	2b00      	cmp	r3, #0
 801b062:	d054      	beq.n	801b10e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801b064:	9902      	ldr	r1, [sp, #8]
 801b066:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801b06a:	f7ff fdf9 	bl	801ac60 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b06e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b072:	b1d8      	cbz	r0, 801b0ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801b074:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801b078:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801b07c:	4576      	cmp	r6, lr
 801b07e:	dc26      	bgt.n	801b0ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801b080:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801b084:	44f4      	add	ip, lr
 801b086:	fa0f fc8c 	sxth.w	ip, ip
 801b08a:	45e0      	cmp	r8, ip
 801b08c:	db1f      	blt.n	801b0ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801b08e:	428f      	cmp	r7, r1
 801b090:	fa1f fc81 	uxth.w	ip, r1
 801b094:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801b098:	dc0f      	bgt.n	801b0ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 801b09a:	9805      	ldr	r0, [sp, #20]
 801b09c:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801b0a0:	eba0 0c0c 	sub.w	ip, r0, ip
 801b0a4:	eba1 010c 	sub.w	r1, r1, ip
 801b0a8:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801b0ac:	4620      	mov	r0, r4
 801b0ae:	9903      	ldr	r1, [sp, #12]
 801b0b0:	3d08      	subs	r5, #8
 801b0b2:	4604      	mov	r4, r0
 801b0b4:	3901      	subs	r1, #1
 801b0b6:	9103      	str	r1, [sp, #12]
 801b0b8:	e7cf      	b.n	801b05a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x192>
 801b0ba:	4461      	add	r1, ip
 801b0bc:	b209      	sxth	r1, r1
 801b0be:	4549      	cmp	r1, r9
 801b0c0:	dcf5      	bgt.n	801b0ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b0c2:	9904      	ldr	r1, [sp, #16]
 801b0c4:	eba1 0c0c 	sub.w	ip, r1, ip
 801b0c8:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801b0cc:	e7ee      	b.n	801b0ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801b0ce:	428f      	cmp	r7, r1
 801b0d0:	dced      	bgt.n	801b0ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b0d2:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801b0d6:	4461      	add	r1, ip
 801b0d8:	b209      	sxth	r1, r1
 801b0da:	4589      	cmp	r9, r1
 801b0dc:	dbe7      	blt.n	801b0ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b0de:	4576      	cmp	r6, lr
 801b0e0:	fa1f fc8e 	uxth.w	ip, lr
 801b0e4:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801b0e8:	dc08      	bgt.n	801b0fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x234>
 801b0ea:	eba2 0c0c 	sub.w	ip, r2, ip
 801b0ee:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801b0f2:	eba1 010c 	sub.w	r1, r1, ip
 801b0f6:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801b0fa:	e7d7      	b.n	801b0ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801b0fc:	4461      	add	r1, ip
 801b0fe:	b209      	sxth	r1, r1
 801b100:	4588      	cmp	r8, r1
 801b102:	dbd4      	blt.n	801b0ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801b104:	eba3 0c0c 	sub.w	ip, r3, ip
 801b108:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801b10c:	e7ce      	b.n	801b0ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 801b10e:	2c00      	cmp	r4, #0
 801b110:	f000 8169 	beq.w	801b3e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801b114:	9b00      	ldr	r3, [sp, #0]
 801b116:	3301      	adds	r3, #1
 801b118:	f000 8165 	beq.w	801b3e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x51e>
 801b11c:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801b120:	9802      	ldr	r0, [sp, #8]
 801b122:	4621      	mov	r1, r4
 801b124:	f7ff fdbe 	bl	801aca4 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b128:	b120      	cbz	r0, 801b134 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x26c>
 801b12a:	f8bd 1000 	ldrh.w	r1, [sp]
 801b12e:	9801      	ldr	r0, [sp, #4]
 801b130:	f7ff fe86 	bl	801ae40 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b134:	9902      	ldr	r1, [sp, #8]
 801b136:	4620      	mov	r0, r4
 801b138:	f7ff fd92 	bl	801ac60 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b13c:	2800      	cmp	r0, #0
 801b13e:	f000 809b 	beq.w	801b278 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3b0>
 801b142:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 801b146:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 801b14a:	fa1f f288 	uxth.w	r2, r8
 801b14e:	f9ba 40a0 	ldrsh.w	r4, [sl, #160]	; 0xa0
 801b152:	f8ba 30a4 	ldrh.w	r3, [sl, #164]	; 0xa4
 801b156:	19d5      	adds	r5, r2, r7
 801b158:	b2a1      	uxth	r1, r4
 801b15a:	45a0      	cmp	r8, r4
 801b15c:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801b160:	fa1f f985 	uxth.w	r9, r5
 801b164:	440b      	add	r3, r1
 801b166:	f9ba 00a2 	ldrsh.w	r0, [sl, #162]	; 0xa2
 801b16a:	fa0f f589 	sxth.w	r5, r9
 801b16e:	b29b      	uxth	r3, r3
 801b170:	9503      	str	r5, [sp, #12]
 801b172:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801b176:	9507      	str	r5, [sp, #28]
 801b178:	f340 809d 	ble.w	801b2b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801b17c:	1a52      	subs	r2, r2, r1
 801b17e:	4584      	cmp	ip, r0
 801b180:	fa0f fe83 	sxth.w	lr, r3
 801b184:	b292      	uxth	r2, r2
 801b186:	b215      	sxth	r5, r2
 801b188:	dd2f      	ble.n	801b1ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x322>
 801b18a:	9e00      	ldr	r6, [sp, #0]
 801b18c:	fa1f fc8c 	uxth.w	ip, ip
 801b190:	b280      	uxth	r0, r0
 801b192:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 801b196:	eb0b 08c6 	add.w	r8, fp, r6, lsl #3
 801b19a:	9e03      	ldr	r6, [sp, #12]
 801b19c:	ebac 0300 	sub.w	r3, ip, r0
 801b1a0:	448c      	add	ip, r1
 801b1a2:	eba6 060e 	sub.w	r6, r6, lr
 801b1a6:	f8b8 e0ae 	ldrh.w	lr, [r8, #174]	; 0xae
 801b1aa:	b29b      	uxth	r3, r3
 801b1ac:	4470      	add	r0, lr
 801b1ae:	fa0f fc8c 	sxth.w	ip, ip
 801b1b2:	b21c      	sxth	r4, r3
 801b1b4:	b200      	sxth	r0, r0
 801b1b6:	4366      	muls	r6, r4
 801b1b8:	ebac 0000 	sub.w	r0, ip, r0
 801b1bc:	4368      	muls	r0, r5
 801b1be:	4286      	cmp	r6, r0
 801b1c0:	db09      	blt.n	801b1d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x30e>
 801b1c2:	f8b8 30a8 	ldrh.w	r3, [r8, #168]	; 0xa8
 801b1c6:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801b1ca:	4417      	add	r7, r2
 801b1cc:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b1d0:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801b1d4:	e685      	b.n	801aee2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b1d6:	440b      	add	r3, r1
 801b1d8:	f8a8 50ac 	strh.w	r5, [r8, #172]	; 0xac
 801b1dc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801b1e0:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801b1e4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b1e8:	e67b      	b.n	801aee2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b1ea:	9e03      	ldr	r6, [sp, #12]
 801b1ec:	45b6      	cmp	lr, r6
 801b1ee:	da28      	bge.n	801b242 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37a>
 801b1f0:	9b00      	ldr	r3, [sp, #0]
 801b1f2:	eba6 060e 	sub.w	r6, r6, lr
 801b1f6:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801b1fa:	eb0b 01c3 	add.w	r1, fp, r3, lsl #3
 801b1fe:	eb04 030c 	add.w	r3, r4, ip
 801b202:	fa1f f883 	uxth.w	r8, r3
 801b206:	f8b1 30ae 	ldrh.w	r3, [r1, #174]	; 0xae
 801b20a:	4403      	add	r3, r0
 801b20c:	fa0f f988 	sxth.w	r9, r8
 801b210:	eba0 000c 	sub.w	r0, r0, ip
 801b214:	eba3 0308 	sub.w	r3, r3, r8
 801b218:	4368      	muls	r0, r5
 801b21a:	b29b      	uxth	r3, r3
 801b21c:	fa0f f883 	sxth.w	r8, r3
 801b220:	fb08 f606 	mul.w	r6, r8, r6
 801b224:	42b0      	cmp	r0, r6
 801b226:	dc06      	bgt.n	801b236 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x36e>
 801b228:	f8a1 90aa 	strh.w	r9, [r1, #170]	; 0xaa
 801b22c:	f8a1 80ae 	strh.w	r8, [r1, #174]	; 0xae
 801b230:	f8b1 30a8 	ldrh.w	r3, [r1, #168]	; 0xa8
 801b234:	e7c9      	b.n	801b1ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x302>
 801b236:	4423      	add	r3, r4
 801b238:	f8a1 50ac 	strh.w	r5, [r1, #172]	; 0xac
 801b23c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801b240:	e64f      	b.n	801aee2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b242:	eba3 0309 	sub.w	r3, r3, r9
 801b246:	9807      	ldr	r0, [sp, #28]
 801b248:	b29b      	uxth	r3, r3
 801b24a:	2806      	cmp	r0, #6
 801b24c:	fa0f fc83 	sxth.w	ip, r3
 801b250:	d818      	bhi.n	801b284 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3bc>
 801b252:	4652      	mov	r2, sl
 801b254:	ab0a      	add	r3, sp, #40	; 0x28
 801b256:	f852 0fa0 	ldr.w	r0, [r2, #160]!
 801b25a:	6851      	ldr	r1, [r2, #4]
 801b25c:	f8aa c0a4 	strh.w	ip, [sl, #164]	; 0xa4
 801b260:	c303      	stmia	r3!, {r0, r1}
 801b262:	9b03      	ldr	r3, [sp, #12]
 801b264:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
 801b268:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801b26c:	ab0a      	add	r3, sp, #40	; 0x28
 801b26e:	9801      	ldr	r0, [sp, #4]
 801b270:	e893 0006 	ldmia.w	r3, {r1, r2}
 801b274:	f7ff fe06 	bl	801ae84 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b278:	9b00      	ldr	r3, [sp, #0]
 801b27a:	f1aa 0a08 	sub.w	sl, sl, #8
 801b27e:	3b01      	subs	r3, #1
 801b280:	9300      	str	r3, [sp, #0]
 801b282:	e747      	b.n	801b114 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801b284:	9800      	ldr	r0, [sp, #0]
 801b286:	45ac      	cmp	ip, r5
 801b288:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801b28c:	db0c      	blt.n	801b2a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e0>
 801b28e:	4417      	add	r7, r2
 801b290:	4458      	add	r0, fp
 801b292:	f8ad 4020 	strh.w	r4, [sp, #32]
 801b296:	b2bf      	uxth	r7, r7
 801b298:	f8a0 c0ac 	strh.w	ip, [r0, #172]	; 0xac
 801b29c:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 801b2a0:	440f      	add	r7, r1
 801b2a2:	f8a0 70a8 	strh.w	r7, [r0, #168]	; 0xa8
 801b2a6:	e61c      	b.n	801aee2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b2a8:	4458      	add	r0, fp
 801b2aa:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 801b2ae:	443b      	add	r3, r7
 801b2b0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801b2b4:	e615      	b.n	801aee2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b2b6:	fa1f f18c 	uxth.w	r1, ip
 801b2ba:	f8bd 5026 	ldrh.w	r5, [sp, #38]	; 0x26
 801b2be:	b282      	uxth	r2, r0
 801b2c0:	4584      	cmp	ip, r0
 801b2c2:	eb01 0e05 	add.w	lr, r1, r5
 801b2c6:	9204      	str	r2, [sp, #16]
 801b2c8:	fa1f fe8e 	uxth.w	lr, lr
 801b2cc:	9e04      	ldr	r6, [sp, #16]
 801b2ce:	fa0f f28e 	sxth.w	r2, lr
 801b2d2:	9205      	str	r2, [sp, #20]
 801b2d4:	f8ba 20a6 	ldrh.w	r2, [sl, #166]	; 0xa6
 801b2d8:	4432      	add	r2, r6
 801b2da:	b292      	uxth	r2, r2
 801b2dc:	9206      	str	r2, [sp, #24]
 801b2de:	da26      	bge.n	801b32e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x466>
 801b2e0:	eba3 0309 	sub.w	r3, r3, r9
 801b2e4:	eba2 020e 	sub.w	r2, r2, lr
 801b2e8:	eba0 000c 	sub.w	r0, r0, ip
 801b2ec:	eba4 0408 	sub.w	r4, r4, r8
 801b2f0:	b29b      	uxth	r3, r3
 801b2f2:	b292      	uxth	r2, r2
 801b2f4:	fa0f fa83 	sxth.w	sl, r3
 801b2f8:	b211      	sxth	r1, r2
 801b2fa:	fb0a f000 	mul.w	r0, sl, r0
 801b2fe:	434c      	muls	r4, r1
 801b300:	42a0      	cmp	r0, r4
 801b302:	9800      	ldr	r0, [sp, #0]
 801b304:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801b308:	dc06      	bgt.n	801b318 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x450>
 801b30a:	4458      	add	r0, fp
 801b30c:	9a05      	ldr	r2, [sp, #20]
 801b30e:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
 801b312:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 801b316:	e7ca      	b.n	801b2ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801b318:	eb0b 0300 	add.w	r3, fp, r0
 801b31c:	9903      	ldr	r1, [sp, #12]
 801b31e:	f8a3 a0ac 	strh.w	sl, [r3, #172]	; 0xac
 801b322:	f8a3 10a8 	strh.w	r1, [r3, #168]	; 0xa8
 801b326:	442a      	add	r2, r5
 801b328:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 801b32c:	e5d9      	b.n	801aee2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b32e:	9e04      	ldr	r6, [sp, #16]
 801b330:	9a03      	ldr	r2, [sp, #12]
 801b332:	1b89      	subs	r1, r1, r6
 801b334:	b21e      	sxth	r6, r3
 801b336:	b289      	uxth	r1, r1
 801b338:	4296      	cmp	r6, r2
 801b33a:	fa0f fc81 	sxth.w	ip, r1
 801b33e:	dd25      	ble.n	801b38c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c4>
 801b340:	eba3 0309 	sub.w	r3, r3, r9
 801b344:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801b348:	9e05      	ldr	r6, [sp, #20]
 801b34a:	eba4 0408 	sub.w	r4, r4, r8
 801b34e:	b29b      	uxth	r3, r3
 801b350:	eba6 0902 	sub.w	r9, r6, r2
 801b354:	fb0c f404 	mul.w	r4, ip, r4
 801b358:	b218      	sxth	r0, r3
 801b35a:	9a00      	ldr	r2, [sp, #0]
 801b35c:	fb00 f909 	mul.w	r9, r0, r9
 801b360:	00d2      	lsls	r2, r2, #3
 801b362:	454c      	cmp	r4, r9
 801b364:	db03      	blt.n	801b36e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4a6>
 801b366:	445a      	add	r2, fp
 801b368:	f8a2 c0ae 	strh.w	ip, [r2, #174]	; 0xae
 801b36c:	e79f      	b.n	801b2ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e6>
 801b36e:	eb0b 0302 	add.w	r3, fp, r2
 801b372:	9a03      	ldr	r2, [sp, #12]
 801b374:	4429      	add	r1, r5
 801b376:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801b37a:	f8a3 00ac 	strh.w	r0, [r3, #172]	; 0xac
 801b37e:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801b382:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801b386:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b38a:	e5aa      	b.n	801aee2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b38c:	9b06      	ldr	r3, [sp, #24]
 801b38e:	9c07      	ldr	r4, [sp, #28]
 801b390:	eba3 020e 	sub.w	r2, r3, lr
 801b394:	2c06      	cmp	r4, #6
 801b396:	b292      	uxth	r2, r2
 801b398:	b213      	sxth	r3, r2
 801b39a:	d80d      	bhi.n	801b3b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4f0>
 801b39c:	4651      	mov	r1, sl
 801b39e:	aa0a      	add	r2, sp, #40	; 0x28
 801b3a0:	f851 0fa0 	ldr.w	r0, [r1, #160]!
 801b3a4:	6849      	ldr	r1, [r1, #4]
 801b3a6:	f8aa 30a6 	strh.w	r3, [sl, #166]	; 0xa6
 801b3aa:	9b05      	ldr	r3, [sp, #20]
 801b3ac:	c203      	stmia	r2!, {r0, r1}
 801b3ae:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801b3b2:	f8ad c02e 	strh.w	ip, [sp, #46]	; 0x2e
 801b3b6:	e759      	b.n	801b26c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3a4>
 801b3b8:	9c00      	ldr	r4, [sp, #0]
 801b3ba:	4563      	cmp	r3, ip
 801b3bc:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801b3c0:	db0d      	blt.n	801b3de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x516>
 801b3c2:	4429      	add	r1, r5
 801b3c4:	9a04      	ldr	r2, [sp, #16]
 801b3c6:	445c      	add	r4, fp
 801b3c8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b3cc:	b289      	uxth	r1, r1
 801b3ce:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
 801b3d2:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
 801b3d6:	4411      	add	r1, r2
 801b3d8:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
 801b3dc:	e581      	b.n	801aee2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b3de:	445c      	add	r4, fp
 801b3e0:	f8a4 c0ae 	strh.w	ip, [r4, #174]	; 0xae
 801b3e4:	e79f      	b.n	801b326 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45e>
 801b3e6:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801b3ea:	2f07      	cmp	r7, #7
 801b3ec:	d806      	bhi.n	801b3fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x534>
 801b3ee:	ab08      	add	r3, sp, #32
 801b3f0:	9801      	ldr	r0, [sp, #4]
 801b3f2:	e893 0006 	ldmia.w	r3, {r1, r2}
 801b3f6:	f7ff fd45 	bl	801ae84 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b3fa:	e5dc      	b.n	801afb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xee>
 801b3fc:	f107 39ff 	add.w	r9, r7, #4294967295
 801b400:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801b404:	eb0b 07c7 	add.w	r7, fp, r7, lsl #3
 801b408:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801b40c:	f04f 35ff 	mov.w	r5, #4294967295
 801b410:	2400      	movs	r4, #0
 801b412:	9304      	str	r3, [sp, #16]
 801b414:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 801b418:	f109 32ff 	add.w	r2, r9, #4294967295
 801b41c:	9300      	str	r3, [sp, #0]
 801b41e:	4690      	mov	r8, r2
 801b420:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 801b424:	9303      	str	r3, [sp, #12]
 801b426:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801b42a:	f1b8 3fff 	cmp.w	r8, #4294967295
 801b42e:	6818      	ldr	r0, [r3, #0]
 801b430:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801b434:	9206      	str	r2, [sp, #24]
 801b436:	bf16      	itet	ne
 801b438:	9904      	ldrne	r1, [sp, #16]
 801b43a:	f8dd e008 	ldreq.w	lr, [sp, #8]
 801b43e:	eb01 0ec8 	addne.w	lr, r1, r8, lsl #3
 801b442:	9305      	str	r3, [sp, #20]
 801b444:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801b448:	f8be 6004 	ldrh.w	r6, [lr, #4]
 801b44c:	fb16 f601 	smulbb	r6, r6, r1
 801b450:	6859      	ldr	r1, [r3, #4]
 801b452:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801b456:	4671      	mov	r1, lr
 801b458:	a80a      	add	r0, sp, #40	; 0x28
 801b45a:	f7ff fc45 	bl	801ace8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b45e:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801b462:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801b466:	9b03      	ldr	r3, [sp, #12]
 801b468:	9a00      	ldr	r2, [sp, #0]
 801b46a:	fb11 f100 	smulbb	r1, r1, r0
 801b46e:	2008      	movs	r0, #8
 801b470:	fb02 6603 	mla	r6, r2, r3, r6
 801b474:	1b8e      	subs	r6, r1, r6
 801b476:	fb91 f1f0 	sdiv	r1, r1, r0
 801b47a:	42b1      	cmp	r1, r6
 801b47c:	dc21      	bgt.n	801b4c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801b47e:	4556      	cmp	r6, sl
 801b480:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 801b484:	da03      	bge.n	801b48e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c6>
 801b486:	b1e6      	cbz	r6, 801b4c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fa>
 801b488:	46b2      	mov	sl, r6
 801b48a:	4645      	mov	r5, r8
 801b48c:	464c      	mov	r4, r9
 801b48e:	f108 38ff 	add.w	r8, r8, #4294967295
 801b492:	f118 0f02 	cmn.w	r8, #2
 801b496:	d1c8      	bne.n	801b42a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x562>
 801b498:	f1b2 3fff 	cmp.w	r2, #4294967295
 801b49c:	f1a7 0708 	sub.w	r7, r7, #8
 801b4a0:	4691      	mov	r9, r2
 801b4a2:	d1b7      	bne.n	801b414 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x54c>
 801b4a4:	9b01      	ldr	r3, [sp, #4]
 801b4a6:	b2a6      	uxth	r6, r4
 801b4a8:	00e4      	lsls	r4, r4, #3
 801b4aa:	1918      	adds	r0, r3, r4
 801b4ac:	1c6b      	adds	r3, r5, #1
 801b4ae:	d10b      	bne.n	801b4c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x600>
 801b4b0:	4601      	mov	r1, r0
 801b4b2:	9802      	ldr	r0, [sp, #8]
 801b4b4:	f7ff fc18 	bl	801ace8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b4b8:	4631      	mov	r1, r6
 801b4ba:	9801      	ldr	r0, [sp, #4]
 801b4bc:	f7ff fcc0 	bl	801ae40 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b4c0:	e50f      	b.n	801aee2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a>
 801b4c2:	4645      	mov	r5, r8
 801b4c4:	464c      	mov	r4, r9
 801b4c6:	e7ed      	b.n	801b4a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5dc>
 801b4c8:	9b01      	ldr	r3, [sp, #4]
 801b4ca:	00ed      	lsls	r5, r5, #3
 801b4cc:	445c      	add	r4, fp
 801b4ce:	1959      	adds	r1, r3, r5
 801b4d0:	445d      	add	r5, fp
 801b4d2:	f7ff fc09 	bl	801ace8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b4d6:	9b02      	ldr	r3, [sp, #8]
 801b4d8:	cb03      	ldmia	r3!, {r0, r1}
 801b4da:	9b02      	ldr	r3, [sp, #8]
 801b4dc:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 801b4e0:	f8c5 10ac 	str.w	r1, [r5, #172]	; 0xac
 801b4e4:	f854 0fa8 	ldr.w	r0, [r4, #168]!
 801b4e8:	6861      	ldr	r1, [r4, #4]
 801b4ea:	c303      	stmia	r3!, {r0, r1}
 801b4ec:	e7e4      	b.n	801b4b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
	...

0801b4f0 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801b4f0:	4b1d      	ldr	r3, [pc, #116]	; (801b568 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801b4f2:	b530      	push	{r4, r5, lr}
 801b4f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b4f8:	b085      	sub	sp, #20
 801b4fa:	4b1c      	ldr	r3, [pc, #112]	; (801b56c <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801b4fc:	460c      	mov	r4, r1
 801b4fe:	2100      	movs	r1, #0
 801b500:	4605      	mov	r5, r0
 801b502:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b506:	6820      	ldr	r0, [r4, #0]
 801b508:	9100      	str	r1, [sp, #0]
 801b50a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b50e:	ab02      	add	r3, sp, #8
 801b510:	6861      	ldr	r1, [r4, #4]
 801b512:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b516:	c303      	stmia	r3!, {r0, r1}
 801b518:	4669      	mov	r1, sp
 801b51a:	a802      	add	r0, sp, #8
 801b51c:	f7fb ffe4 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 801b520:	ab02      	add	r3, sp, #8
 801b522:	cb03      	ldmia	r3!, {r0, r1}
 801b524:	4b12      	ldr	r3, [pc, #72]	; (801b570 <_ZN8touchgfx11Application4drawERNS_4RectE+0x80>)
 801b526:	6020      	str	r0, [r4, #0]
 801b528:	6818      	ldr	r0, [r3, #0]
 801b52a:	6061      	str	r1, [r4, #4]
 801b52c:	b138      	cbz	r0, 801b53e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801b52e:	f895 3134 	ldrb.w	r3, [r5, #308]	; 0x134
 801b532:	b133      	cbz	r3, 801b542 <_ZN8touchgfx11Application4drawERNS_4RectE+0x52>
 801b534:	6821      	ldr	r1, [r4, #0]
 801b536:	4628      	mov	r0, r5
 801b538:	6862      	ldr	r2, [r4, #4]
 801b53a:	f7ff fcc5 	bl	801aec8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b53e:	b005      	add	sp, #20
 801b540:	bd30      	pop	{r4, r5, pc}
 801b542:	6803      	ldr	r3, [r0, #0]
 801b544:	4621      	mov	r1, r4
 801b546:	689b      	ldr	r3, [r3, #8]
 801b548:	4798      	blx	r3
 801b54a:	4b0a      	ldr	r3, [pc, #40]	; (801b574 <_ZN8touchgfx11Application4drawERNS_4RectE+0x84>)
 801b54c:	6818      	ldr	r0, [r3, #0]
 801b54e:	b118      	cbz	r0, 801b558 <_ZN8touchgfx11Application4drawERNS_4RectE+0x68>
 801b550:	6803      	ldr	r3, [r0, #0]
 801b552:	4621      	mov	r1, r4
 801b554:	689b      	ldr	r3, [r3, #8]
 801b556:	4798      	blx	r3
 801b558:	4b07      	ldr	r3, [pc, #28]	; (801b578 <_ZN8touchgfx11Application4drawERNS_4RectE+0x88>)
 801b55a:	4621      	mov	r1, r4
 801b55c:	6818      	ldr	r0, [r3, #0]
 801b55e:	6803      	ldr	r3, [r0, #0]
 801b560:	69db      	ldr	r3, [r3, #28]
 801b562:	4798      	blx	r3
 801b564:	e7eb      	b.n	801b53e <_ZN8touchgfx11Application4drawERNS_4RectE+0x4e>
 801b566:	bf00      	nop
 801b568:	2002b894 	.word	0x2002b894
 801b56c:	2002b896 	.word	0x2002b896
 801b570:	2002b8dc 	.word	0x2002b8dc
 801b574:	2002b8d8 	.word	0x2002b8d8
 801b578:	2002b8a0 	.word	0x2002b8a0

0801b57c <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801b57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b580:	4604      	mov	r4, r0
 801b582:	b09b      	sub	sp, #108	; 0x6c
 801b584:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
 801b588:	b129      	cbz	r1, 801b596 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801b58a:	2300      	movs	r3, #0
 801b58c:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801b590:	b01b      	add	sp, #108	; 0x6c
 801b592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b596:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801b59a:	4630      	mov	r0, r6
 801b59c:	f7fb ffe7 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b5a0:	4605      	mov	r5, r0
 801b5a2:	b940      	cbnz	r0, 801b5b6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3a>
 801b5a4:	4620      	mov	r0, r4
 801b5a6:	e896 0006 	ldmia.w	r6, {r1, r2}
 801b5aa:	f7ff fc8d 	bl	801aec8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b5ae:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801b5b2:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801b5b6:	4ba6      	ldr	r3, [pc, #664]	; (801b850 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d4>)
 801b5b8:	681b      	ldr	r3, [r3, #0]
 801b5ba:	b33b      	cbz	r3, 801b60c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801b5bc:	4da5      	ldr	r5, [pc, #660]	; (801b854 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2d8>)
 801b5be:	4628      	mov	r0, r5
 801b5c0:	f7fb ffd5 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b5c4:	4606      	mov	r6, r0
 801b5c6:	bb08      	cbnz	r0, 801b60c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x90>
 801b5c8:	4628      	mov	r0, r5
 801b5ca:	f7ff f9ef 	bl	801a9ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b5ce:	6829      	ldr	r1, [r5, #0]
 801b5d0:	686a      	ldr	r2, [r5, #4]
 801b5d2:	4620      	mov	r0, r4
 801b5d4:	f7ff fc78 	bl	801aec8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b5d8:	802e      	strh	r6, [r5, #0]
 801b5da:	806e      	strh	r6, [r5, #2]
 801b5dc:	80ae      	strh	r6, [r5, #4]
 801b5de:	80ee      	strh	r6, [r5, #6]
 801b5e0:	4f9d      	ldr	r7, [pc, #628]	; (801b858 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2dc>)
 801b5e2:	a809      	add	r0, sp, #36	; 0x24
 801b5e4:	f7ff fbd7 	bl	801ad96 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b5e8:	883d      	ldrh	r5, [r7, #0]
 801b5ea:	462e      	mov	r6, r5
 801b5ec:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b5f0:	42b3      	cmp	r3, r6
 801b5f2:	d910      	bls.n	801b616 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9a>
 801b5f4:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801b5f8:	3601      	adds	r6, #1
 801b5fa:	a809      	add	r0, sp, #36	; 0x24
 801b5fc:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801b600:	b2b6      	uxth	r6, r6
 801b602:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801b606:	f7ff fc3d 	bl	801ae84 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b60a:	e7ef      	b.n	801b5ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801b60c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b610:	2b00      	cmp	r3, #0
 801b612:	d1e5      	bne.n	801b5e0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x64>
 801b614:	e7bc      	b.n	801b590 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b616:	462e      	mov	r6, r5
 801b618:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801b61c:	42b3      	cmp	r3, r6
 801b61e:	d90b      	bls.n	801b638 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xbc>
 801b620:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801b624:	3601      	adds	r6, #1
 801b626:	4620      	mov	r0, r4
 801b628:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801b62c:	b2b6      	uxth	r6, r6
 801b62e:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801b632:	f7ff fc49 	bl	801aec8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b636:	e7ef      	b.n	801b618 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x9c>
 801b638:	4a88      	ldr	r2, [pc, #544]	; (801b85c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e0>)
 801b63a:	6813      	ldr	r3, [r2, #0]
 801b63c:	4690      	mov	r8, r2
 801b63e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801b642:	2b01      	cmp	r3, #1
 801b644:	f040 8094 	bne.w	801b770 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f4>
 801b648:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801b64c:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801b650:	f04f 0900 	mov.w	r9, #0
 801b654:	33aa      	adds	r3, #170	; 0xaa
 801b656:	42a8      	cmp	r0, r5
 801b658:	f103 0308 	add.w	r3, r3, #8
 801b65c:	dd0a      	ble.n	801b674 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xf8>
 801b65e:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801b662:	3501      	adds	r5, #1
 801b664:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801b668:	440a      	add	r2, r1
 801b66a:	b212      	sxth	r2, r2
 801b66c:	4591      	cmp	r9, r2
 801b66e:	bfb8      	it	lt
 801b670:	4691      	movlt	r9, r2
 801b672:	e7f0      	b.n	801b656 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xda>
 801b674:	4b7a      	ldr	r3, [pc, #488]	; (801b860 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e4>)
 801b676:	4e7b      	ldr	r6, [pc, #492]	; (801b864 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e8>)
 801b678:	881d      	ldrh	r5, [r3, #0]
 801b67a:	2300      	movs	r3, #0
 801b67c:	2d0f      	cmp	r5, #15
 801b67e:	bf8c      	ite	hi
 801b680:	08ed      	lsrhi	r5, r5, #3
 801b682:	2501      	movls	r5, #1
 801b684:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801b688:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b68c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 801b690:	f8d8 0000 	ldr.w	r0, [r8]
 801b694:	440b      	add	r3, r1
 801b696:	6802      	ldr	r2, [r0, #0]
 801b698:	b21b      	sxth	r3, r3
 801b69a:	4599      	cmp	r9, r3
 801b69c:	dd4b      	ble.n	801b736 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ba>
 801b69e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 801b6a2:	4798      	blx	r3
 801b6a4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b6a8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b6ac:	4413      	add	r3, r2
 801b6ae:	b21b      	sxth	r3, r3
 801b6b0:	195a      	adds	r2, r3, r5
 801b6b2:	4290      	cmp	r0, r2
 801b6b4:	da07      	bge.n	801b6c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801b6b6:	4581      	cmp	r9, r0
 801b6b8:	dd05      	ble.n	801b6c6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14a>
 801b6ba:	4298      	cmp	r0, r3
 801b6bc:	da33      	bge.n	801b726 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	dd31      	ble.n	801b726 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1aa>
 801b6c2:	4648      	mov	r0, r9
 801b6c4:	e004      	b.n	801b6d0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x154>
 801b6c6:	4298      	cmp	r0, r3
 801b6c8:	dbfb      	blt.n	801b6c2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x146>
 801b6ca:	4548      	cmp	r0, r9
 801b6cc:	bfa8      	it	ge
 801b6ce:	4648      	movge	r0, r9
 801b6d0:	f9b6 2000 	ldrsh.w	r2, [r6]
 801b6d4:	2100      	movs	r1, #0
 801b6d6:	1ac0      	subs	r0, r0, r3
 801b6d8:	f8b7 a000 	ldrh.w	sl, [r7]
 801b6dc:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b6e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b6e4:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b6e8:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b6ec:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b6f0:	4553      	cmp	r3, sl
 801b6f2:	d9c9      	bls.n	801b688 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801b6f4:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801b6f8:	ab07      	add	r3, sp, #28
 801b6fa:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b6fe:	6851      	ldr	r1, [r2, #4]
 801b700:	c303      	stmia	r3!, {r0, r1}
 801b702:	a807      	add	r0, sp, #28
 801b704:	a905      	add	r1, sp, #20
 801b706:	f7fb feef 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 801b70a:	a807      	add	r0, sp, #28
 801b70c:	f7fb ff2f 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b710:	b920      	cbnz	r0, 801b71c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a0>
 801b712:	6823      	ldr	r3, [r4, #0]
 801b714:	a907      	add	r1, sp, #28
 801b716:	4620      	mov	r0, r4
 801b718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b71a:	4798      	blx	r3
 801b71c:	f10a 0a01 	add.w	sl, sl, #1
 801b720:	fa1f fa8a 	uxth.w	sl, sl
 801b724:	e7e2      	b.n	801b6ec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801b726:	f8d8 0000 	ldr.w	r0, [r8]
 801b72a:	2101      	movs	r1, #1
 801b72c:	6803      	ldr	r3, [r0, #0]
 801b72e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b732:	4798      	blx	r3
 801b734:	e7a8      	b.n	801b688 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10c>
 801b736:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801b738:	4798      	blx	r3
 801b73a:	4b4b      	ldr	r3, [pc, #300]	; (801b868 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ec>)
 801b73c:	781b      	ldrb	r3, [r3, #0]
 801b73e:	2b00      	cmp	r3, #0
 801b740:	f43f af26 	beq.w	801b590 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b744:	2300      	movs	r3, #0
 801b746:	883d      	ldrh	r5, [r7, #0]
 801b748:	34ea      	adds	r4, #234	; 0xea
 801b74a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801b74e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801b752:	42ab      	cmp	r3, r5
 801b754:	f67f af1c 	bls.w	801b590 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801b758:	ab1a      	add	r3, sp, #104	; 0x68
 801b75a:	4620      	mov	r0, r4
 801b75c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801b760:	3501      	adds	r5, #1
 801b762:	3b44      	subs	r3, #68	; 0x44
 801b764:	b2ad      	uxth	r5, r5
 801b766:	e893 0006 	ldmia.w	r3, {r1, r2}
 801b76a:	f7ff fb8b 	bl	801ae84 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801b76e:	e7ee      	b.n	801b74e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801b770:	2b02      	cmp	r3, #2
 801b772:	f040 813d 	bne.w	801b9f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>
 801b776:	4b3d      	ldr	r3, [pc, #244]	; (801b86c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f0>)
 801b778:	781b      	ldrb	r3, [r3, #0]
 801b77a:	2b01      	cmp	r3, #1
 801b77c:	d02c      	beq.n	801b7d8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x25c>
 801b77e:	f104 0ba8 	add.w	fp, r4, #168	; 0xa8
 801b782:	883a      	ldrh	r2, [r7, #0]
 801b784:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
 801b788:	3201      	adds	r2, #1
 801b78a:	b292      	uxth	r2, r2
 801b78c:	2900      	cmp	r1, #0
 801b78e:	d0d4      	beq.n	801b73a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801b790:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801b794:	4610      	mov	r0, r2
 801b796:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801b79a:	f04f 0a00 	mov.w	sl, #0
 801b79e:	441d      	add	r5, r3
 801b7a0:	b22d      	sxth	r5, r5
 801b7a2:	b283      	uxth	r3, r0
 801b7a4:	ea4f 06ca 	mov.w	r6, sl, lsl #3
 801b7a8:	4299      	cmp	r1, r3
 801b7aa:	f240 80c3 	bls.w	801b934 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3b8>
 801b7ae:	4426      	add	r6, r4
 801b7b0:	eb04 09c0 	add.w	r9, r4, r0, lsl #3
 801b7b4:	4684      	mov	ip, r0
 801b7b6:	f9b6 30aa 	ldrsh.w	r3, [r6, #170]	; 0xaa
 801b7ba:	f9b9 e0aa 	ldrsh.w	lr, [r9, #170]	; 0xaa
 801b7be:	4573      	cmp	r3, lr
 801b7c0:	f340 80a5 	ble.w	801b90e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x392>
 801b7c4:	f8b9 50ae 	ldrh.w	r5, [r9, #174]	; 0xae
 801b7c8:	4475      	add	r5, lr
 801b7ca:	b22d      	sxth	r5, r5
 801b7cc:	429d      	cmp	r5, r3
 801b7ce:	bfa8      	it	ge
 801b7d0:	461d      	movge	r5, r3
 801b7d2:	3001      	adds	r0, #1
 801b7d4:	46e2      	mov	sl, ip
 801b7d6:	e7e4      	b.n	801b7a2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x226>
 801b7d8:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801b7dc:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801b7e0:	f1bb 0f00 	cmp.w	fp, #0
 801b7e4:	d0a9      	beq.n	801b73a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801b7e6:	883b      	ldrh	r3, [r7, #0]
 801b7e8:	2600      	movs	r6, #0
 801b7ea:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801b7ee:	3301      	adds	r3, #1
 801b7f0:	b29b      	uxth	r3, r3
 801b7f2:	b299      	uxth	r1, r3
 801b7f4:	00f5      	lsls	r5, r6, #3
 801b7f6:	458b      	cmp	fp, r1
 801b7f8:	d93a      	bls.n	801b870 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2f4>
 801b7fa:	4425      	add	r5, r4
 801b7fc:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801b800:	469c      	mov	ip, r3
 801b802:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801b806:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801b80a:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801b80e:	4408      	add	r0, r1
 801b810:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801b814:	4471      	add	r1, lr
 801b816:	b200      	sxth	r0, r0
 801b818:	b209      	sxth	r1, r1
 801b81a:	4288      	cmp	r0, r1
 801b81c:	da06      	bge.n	801b82c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2b0>
 801b81e:	4586      	cmp	lr, r0
 801b820:	4672      	mov	r2, lr
 801b822:	bfb8      	it	lt
 801b824:	4602      	movlt	r2, r0
 801b826:	3301      	adds	r3, #1
 801b828:	4666      	mov	r6, ip
 801b82a:	e7e2      	b.n	801b7f2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x276>
 801b82c:	d10b      	bne.n	801b846 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2ca>
 801b82e:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801b832:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801b836:	458c      	cmp	ip, r1
 801b838:	bfb4      	ite	lt
 801b83a:	469c      	movlt	ip, r3
 801b83c:	46b4      	movge	ip, r6
 801b83e:	4572      	cmp	r2, lr
 801b840:	bfb8      	it	lt
 801b842:	4672      	movlt	r2, lr
 801b844:	e7ef      	b.n	801b826 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801b846:	428a      	cmp	r2, r1
 801b848:	46b4      	mov	ip, r6
 801b84a:	bfb8      	it	lt
 801b84c:	460a      	movlt	r2, r1
 801b84e:	e7ea      	b.n	801b826 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2aa>
 801b850:	2002b8d8 	.word	0x2002b8d8
 801b854:	2002b8e4 	.word	0x2002b8e4
 801b858:	20000044 	.word	0x20000044
 801b85c:	2002b8a0 	.word	0x2002b8a0
 801b860:	2002b896 	.word	0x2002b896
 801b864:	2002b894 	.word	0x2002b894
 801b868:	2002b89e 	.word	0x2002b89e
 801b86c:	2002b898 	.word	0x2002b898
 801b870:	1961      	adds	r1, r4, r5
 801b872:	ab07      	add	r3, sp, #28
 801b874:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801b878:	6849      	ldr	r1, [r1, #4]
 801b87a:	c303      	stmia	r3!, {r0, r1}
 801b87c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b880:	a807      	add	r0, sp, #28
 801b882:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b886:	2b13      	cmp	r3, #19
 801b888:	440b      	add	r3, r1
 801b88a:	bfd8      	it	le
 801b88c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801b890:	1a9b      	subs	r3, r3, r2
 801b892:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b896:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b89a:	f7ff f8a1 	bl	801a9e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b89e:	a807      	add	r0, sp, #28
 801b8a0:	f7fb fe65 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b8a4:	2800      	cmp	r0, #0
 801b8a6:	d199      	bne.n	801b7dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801b8a8:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801b8ac:	4425      	add	r5, r4
 801b8ae:	f8d8 0000 	ldr.w	r0, [r8]
 801b8b2:	f1bc 0f14 	cmp.w	ip, #20
 801b8b6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b8ba:	f8d0 e000 	ldr.w	lr, [r0]
 801b8be:	bfa8      	it	ge
 801b8c0:	f04f 0c14 	movge.w	ip, #20
 801b8c4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801b8c8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b8cc:	fa1f fc8c 	uxth.w	ip, ip
 801b8d0:	f8cd c000 	str.w	ip, [sp]
 801b8d4:	f8de a088 	ldr.w	sl, [lr, #136]	; 0x88
 801b8d8:	47d0      	blx	sl
 801b8da:	4682      	mov	sl, r0
 801b8dc:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b8e0:	a807      	add	r0, sp, #28
 801b8e2:	f7ff f863 	bl	801a9ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b8e6:	6823      	ldr	r3, [r4, #0]
 801b8e8:	4620      	mov	r0, r4
 801b8ea:	a907      	add	r1, sp, #28
 801b8ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b8ee:	4798      	blx	r3
 801b8f0:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801b8f4:	eba0 000a 	sub.w	r0, r0, sl
 801b8f8:	b200      	sxth	r0, r0
 801b8fa:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801b8fe:	2800      	cmp	r0, #0
 801b900:	f47f af6c 	bne.w	801b7dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801b904:	b2b1      	uxth	r1, r6
 801b906:	4648      	mov	r0, r9
 801b908:	f7ff fa9a 	bl	801ae40 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b90c:	e766      	b.n	801b7dc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x260>
 801b90e:	d10c      	bne.n	801b92a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x3ae>
 801b910:	f9b6 c0ac 	ldrsh.w	ip, [r6, #172]	; 0xac
 801b914:	f9b9 60ac 	ldrsh.w	r6, [r9, #172]	; 0xac
 801b918:	45b4      	cmp	ip, r6
 801b91a:	bfb4      	ite	lt
 801b91c:	4684      	movlt	ip, r0
 801b91e:	46d4      	movge	ip, sl
 801b920:	f8b9 60ae 	ldrh.w	r6, [r9, #174]	; 0xae
 801b924:	4433      	add	r3, r6
 801b926:	b21b      	sxth	r3, r3
 801b928:	e750      	b.n	801b7cc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x250>
 801b92a:	4575      	cmp	r5, lr
 801b92c:	46d4      	mov	ip, sl
 801b92e:	bfa8      	it	ge
 801b930:	4675      	movge	r5, lr
 801b932:	e74e      	b.n	801b7d2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x256>
 801b934:	eb0b 0006 	add.w	r0, fp, r6
 801b938:	4426      	add	r6, r4
 801b93a:	f9b6 90ae 	ldrsh.w	r9, [r6, #174]	; 0xae
 801b93e:	f1b9 0f13 	cmp.w	r9, #19
 801b942:	bfdc      	itt	le
 801b944:	f8b6 50aa 	ldrhle.w	r5, [r6, #170]	; 0xaa
 801b948:	444d      	addle	r5, r9
 801b94a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801b94e:	bfd8      	it	le
 801b950:	b22d      	sxthle	r5, r5
 801b952:	f7fb fe0c 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 801b956:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801b95a:	2800      	cmp	r0, #0
 801b95c:	f47f af16 	bne.w	801b78c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x210>
 801b960:	f9b6 c0aa 	ldrsh.w	ip, [r6, #170]	; 0xaa
 801b964:	fa1f f989 	uxth.w	r9, r9
 801b968:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b96c:	eba5 050c 	sub.w	r5, r5, ip
 801b970:	fa1f f28c 	uxth.w	r2, ip
 801b974:	f9b6 10a8 	ldrsh.w	r1, [r6, #168]	; 0xa8
 801b978:	eb02 0009 	add.w	r0, r2, r9
 801b97c:	2d14      	cmp	r5, #20
 801b97e:	f9b6 30ac 	ldrsh.w	r3, [r6, #172]	; 0xac
 801b982:	bfa8      	it	ge
 801b984:	2514      	movge	r5, #20
 801b986:	b200      	sxth	r0, r0
 801b988:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b98c:	b289      	uxth	r1, r1
 801b98e:	fa1f fe85 	uxth.w	lr, r5
 801b992:	eba0 000c 	sub.w	r0, r0, ip
 801b996:	f8ad c01e 	strh.w	ip, [sp, #30]
 801b99a:	4586      	cmp	lr, r0
 801b99c:	f8d8 0000 	ldr.w	r0, [r8]
 801b9a0:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b9a4:	b29b      	uxth	r3, r3
 801b9a6:	bfb8      	it	lt
 801b9a8:	46f1      	movlt	r9, lr
 801b9aa:	6805      	ldr	r5, [r0, #0]
 801b9ac:	f8cd 9000 	str.w	r9, [sp]
 801b9b0:	f8d5 5088 	ldr.w	r5, [r5, #136]	; 0x88
 801b9b4:	47a8      	blx	r5
 801b9b6:	6823      	ldr	r3, [r4, #0]
 801b9b8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801b9bc:	a907      	add	r1, sp, #28
 801b9be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b9c0:	4620      	mov	r0, r4
 801b9c2:	4798      	blx	r3
 801b9c4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801b9c8:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
 801b9cc:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
 801b9d0:	1a5b      	subs	r3, r3, r1
 801b9d2:	440a      	add	r2, r1
 801b9d4:	b21b      	sxth	r3, r3
 801b9d6:	f8a6 20aa 	strh.w	r2, [r6, #170]	; 0xaa
 801b9da:	f8a6 30ae 	strh.w	r3, [r6, #174]	; 0xae
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	f47f aecf 	bne.w	801b782 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801b9e4:	fa1f f18a 	uxth.w	r1, sl
 801b9e8:	4658      	mov	r0, fp
 801b9ea:	f7ff fa29 	bl	801ae40 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b9ee:	e6c8      	b.n	801b782 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x206>
 801b9f0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b9f4:	42ab      	cmp	r3, r5
 801b9f6:	f67f aea0 	bls.w	801b73a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1be>
 801b9fa:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801b9fe:	ab07      	add	r3, sp, #28
 801ba00:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ba04:	6851      	ldr	r1, [r2, #4]
 801ba06:	c303      	stmia	r3!, {r0, r1}
 801ba08:	a807      	add	r0, sp, #28
 801ba0a:	f7fb fdb0 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 801ba0e:	b920      	cbnz	r0, 801ba1a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x49e>
 801ba10:	6823      	ldr	r3, [r4, #0]
 801ba12:	a907      	add	r1, sp, #28
 801ba14:	4620      	mov	r0, r4
 801ba16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ba18:	4798      	blx	r3
 801ba1a:	3501      	adds	r5, #1
 801ba1c:	b2ad      	uxth	r5, r5
 801ba1e:	e7e7      	b.n	801b9f0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x474>

0801ba20 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801ba20:	4b03      	ldr	r3, [pc, #12]	; (801ba30 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801ba22:	2200      	movs	r2, #0
 801ba24:	801a      	strh	r2, [r3, #0]
 801ba26:	805a      	strh	r2, [r3, #2]
 801ba28:	809a      	strh	r2, [r3, #4]
 801ba2a:	80da      	strh	r2, [r3, #6]
 801ba2c:	4770      	bx	lr
 801ba2e:	bf00      	nop
 801ba30:	2002b8e4 	.word	0x2002b8e4

0801ba34 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801ba34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba38:	b09d      	sub	sp, #116	; 0x74
 801ba3a:	4606      	mov	r6, r0
 801ba3c:	4614      	mov	r4, r2
 801ba3e:	468a      	mov	sl, r1
 801ba40:	a803      	add	r0, sp, #12
 801ba42:	461d      	mov	r5, r3
 801ba44:	f000 fd68 	bl	801c518 <_ZN8touchgfx12TextProviderC1Ev>
 801ba48:	6833      	ldr	r3, [r6, #0]
 801ba4a:	4630      	mov	r0, r6
 801ba4c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801ba50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ba52:	4798      	blx	r3
 801ba54:	6833      	ldr	r3, [r6, #0]
 801ba56:	4607      	mov	r7, r0
 801ba58:	4630      	mov	r0, r6
 801ba5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ba5c:	4798      	blx	r3
 801ba5e:	462a      	mov	r2, r5
 801ba60:	2500      	movs	r5, #0
 801ba62:	4621      	mov	r1, r4
 801ba64:	9000      	str	r0, [sp, #0]
 801ba66:	463b      	mov	r3, r7
 801ba68:	462c      	mov	r4, r5
 801ba6a:	46a9      	mov	r9, r5
 801ba6c:	46a8      	mov	r8, r5
 801ba6e:	a803      	add	r0, sp, #12
 801ba70:	f000 fda5 	bl	801c5be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ba74:	2300      	movs	r3, #0
 801ba76:	9302      	str	r3, [sp, #8]
 801ba78:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801ba7c:	429c      	cmp	r4, r3
 801ba7e:	d002      	beq.n	801ba86 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801ba80:	455c      	cmp	r4, fp
 801ba82:	bf18      	it	ne
 801ba84:	4625      	movne	r5, r4
 801ba86:	ab02      	add	r3, sp, #8
 801ba88:	4632      	mov	r2, r6
 801ba8a:	4651      	mov	r1, sl
 801ba8c:	a803      	add	r0, sp, #12
 801ba8e:	f001 f897 	bl	801cbc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ba92:	4604      	mov	r4, r0
 801ba94:	b108      	cbz	r0, 801ba9a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801ba96:	280a      	cmp	r0, #10
 801ba98:	d10a      	bne.n	801bab0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801ba9a:	45c1      	cmp	r9, r8
 801ba9c:	bf38      	it	cc
 801ba9e:	46c1      	movcc	r9, r8
 801baa0:	f04f 0800 	mov.w	r8, #0
 801baa4:	2c00      	cmp	r4, #0
 801baa6:	d1e5      	bne.n	801ba74 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801baa8:	4648      	mov	r0, r9
 801baaa:	b01d      	add	sp, #116	; 0x74
 801baac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bab0:	9a02      	ldr	r2, [sp, #8]
 801bab2:	2a00      	cmp	r2, #0
 801bab4:	d0de      	beq.n	801ba74 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801bab6:	7b57      	ldrb	r7, [r2, #13]
 801bab8:	4629      	mov	r1, r5
 801baba:	6833      	ldr	r3, [r6, #0]
 801babc:	007f      	lsls	r7, r7, #1
 801babe:	8894      	ldrh	r4, [r2, #4]
 801bac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bac2:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801bac6:	7a97      	ldrb	r7, [r2, #10]
 801bac8:	4307      	orrs	r7, r0
 801baca:	4630      	mov	r0, r6
 801bacc:	4798      	blx	r3
 801bace:	4438      	add	r0, r7
 801bad0:	4480      	add	r8, r0
 801bad2:	fa1f f888 	uxth.w	r8, r8
 801bad6:	e7e5      	b.n	801baa4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801bad8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801bad8:	b508      	push	{r3, lr}
 801bada:	6803      	ldr	r3, [r0, #0]
 801badc:	68db      	ldr	r3, [r3, #12]
 801bade:	4798      	blx	r3
 801bae0:	b128      	cbz	r0, 801baee <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801bae2:	7b43      	ldrb	r3, [r0, #13]
 801bae4:	7a80      	ldrb	r0, [r0, #10]
 801bae6:	005b      	lsls	r3, r3, #1
 801bae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801baec:	4318      	orrs	r0, r3
 801baee:	bd08      	pop	{r3, pc}

0801baf0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801baf0:	b40e      	push	{r1, r2, r3}
 801baf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801baf4:	b09e      	sub	sp, #120	; 0x78
 801baf6:	4605      	mov	r5, r0
 801baf8:	ab23      	add	r3, sp, #140	; 0x8c
 801bafa:	a805      	add	r0, sp, #20
 801bafc:	f853 4b04 	ldr.w	r4, [r3], #4
 801bb00:	9303      	str	r3, [sp, #12]
 801bb02:	f000 fd09 	bl	801c518 <_ZN8touchgfx12TextProviderC1Ev>
 801bb06:	682b      	ldr	r3, [r5, #0]
 801bb08:	4628      	mov	r0, r5
 801bb0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bb0c:	4798      	blx	r3
 801bb0e:	682b      	ldr	r3, [r5, #0]
 801bb10:	4606      	mov	r6, r0
 801bb12:	4628      	mov	r0, r5
 801bb14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bb16:	4798      	blx	r3
 801bb18:	4633      	mov	r3, r6
 801bb1a:	4621      	mov	r1, r4
 801bb1c:	ae1e      	add	r6, sp, #120	; 0x78
 801bb1e:	2400      	movs	r4, #0
 801bb20:	9000      	str	r0, [sp, #0]
 801bb22:	9a03      	ldr	r2, [sp, #12]
 801bb24:	a805      	add	r0, sp, #20
 801bb26:	f000 fd4a 	bl	801c5be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801bb2a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801bb2e:	462a      	mov	r2, r5
 801bb30:	4633      	mov	r3, r6
 801bb32:	4621      	mov	r1, r4
 801bb34:	a805      	add	r0, sp, #20
 801bb36:	f001 f843 	bl	801cbc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801bb3a:	b300      	cbz	r0, 801bb7e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801bb3c:	280a      	cmp	r0, #10
 801bb3e:	d01a      	beq.n	801bb76 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801bb40:	9f04      	ldr	r7, [sp, #16]
 801bb42:	b1c7      	cbz	r7, 801bb76 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801bb44:	7b78      	ldrb	r0, [r7, #13]
 801bb46:	7a3b      	ldrb	r3, [r7, #8]
 801bb48:	00c1      	lsls	r1, r0, #3
 801bb4a:	88aa      	ldrh	r2, [r5, #4]
 801bb4c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801bb50:	4319      	orrs	r1, r3
 801bb52:	0643      	lsls	r3, r0, #25
 801bb54:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801bb58:	bf48      	it	mi
 801bb5a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801bb5e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801bb62:	bf48      	it	mi
 801bb64:	b219      	sxthmi	r1, r3
 801bb66:	79fb      	ldrb	r3, [r7, #7]
 801bb68:	4303      	orrs	r3, r0
 801bb6a:	4413      	add	r3, r2
 801bb6c:	1a5b      	subs	r3, r3, r1
 801bb6e:	b29b      	uxth	r3, r3
 801bb70:	42a3      	cmp	r3, r4
 801bb72:	bfc8      	it	gt
 801bb74:	b21c      	sxthgt	r4, r3
 801bb76:	4633      	mov	r3, r6
 801bb78:	462a      	mov	r2, r5
 801bb7a:	2100      	movs	r1, #0
 801bb7c:	e7da      	b.n	801bb34 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801bb7e:	b2a0      	uxth	r0, r4
 801bb80:	b01e      	add	sp, #120	; 0x78
 801bb82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801bb86:	b003      	add	sp, #12
 801bb88:	4770      	bx	lr

0801bb8a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801bb8a:	b40e      	push	{r1, r2, r3}
 801bb8c:	b570      	push	{r4, r5, r6, lr}
 801bb8e:	b09d      	sub	sp, #116	; 0x74
 801bb90:	4604      	mov	r4, r0
 801bb92:	ab21      	add	r3, sp, #132	; 0x84
 801bb94:	a803      	add	r0, sp, #12
 801bb96:	f853 5b04 	ldr.w	r5, [r3], #4
 801bb9a:	9302      	str	r3, [sp, #8]
 801bb9c:	f000 fcbc 	bl	801c518 <_ZN8touchgfx12TextProviderC1Ev>
 801bba0:	6823      	ldr	r3, [r4, #0]
 801bba2:	4620      	mov	r0, r4
 801bba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bba6:	4798      	blx	r3
 801bba8:	6823      	ldr	r3, [r4, #0]
 801bbaa:	4606      	mov	r6, r0
 801bbac:	4620      	mov	r0, r4
 801bbae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bbb0:	2401      	movs	r4, #1
 801bbb2:	4798      	blx	r3
 801bbb4:	4633      	mov	r3, r6
 801bbb6:	9000      	str	r0, [sp, #0]
 801bbb8:	4629      	mov	r1, r5
 801bbba:	9a02      	ldr	r2, [sp, #8]
 801bbbc:	a803      	add	r0, sp, #12
 801bbbe:	f000 fcfe 	bl	801c5be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801bbc2:	a803      	add	r0, sp, #12
 801bbc4:	f001 f8f6 	bl	801cdb4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801bbc8:	b2a3      	uxth	r3, r4
 801bbca:	b138      	cbz	r0, 801bbdc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801bbcc:	280a      	cmp	r0, #10
 801bbce:	a803      	add	r0, sp, #12
 801bbd0:	bf04      	itt	eq
 801bbd2:	3301      	addeq	r3, #1
 801bbd4:	b21c      	sxtheq	r4, r3
 801bbd6:	f001 f8ed 	bl	801cdb4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801bbda:	e7f5      	b.n	801bbc8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801bbdc:	4618      	mov	r0, r3
 801bbde:	b01d      	add	sp, #116	; 0x74
 801bbe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bbe4:	b003      	add	sp, #12
 801bbe6:	4770      	bx	lr

0801bbe8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801bbe8:	b40e      	push	{r1, r2, r3}
 801bbea:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bbec:	b09e      	sub	sp, #120	; 0x78
 801bbee:	4604      	mov	r4, r0
 801bbf0:	ab23      	add	r3, sp, #140	; 0x8c
 801bbf2:	a805      	add	r0, sp, #20
 801bbf4:	f853 5b04 	ldr.w	r5, [r3], #4
 801bbf8:	9303      	str	r3, [sp, #12]
 801bbfa:	f000 fc8d 	bl	801c518 <_ZN8touchgfx12TextProviderC1Ev>
 801bbfe:	6823      	ldr	r3, [r4, #0]
 801bc00:	4620      	mov	r0, r4
 801bc02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bc04:	4798      	blx	r3
 801bc06:	6823      	ldr	r3, [r4, #0]
 801bc08:	4606      	mov	r6, r0
 801bc0a:	4620      	mov	r0, r4
 801bc0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bc0e:	4798      	blx	r3
 801bc10:	4633      	mov	r3, r6
 801bc12:	4629      	mov	r1, r5
 801bc14:	9000      	str	r0, [sp, #0]
 801bc16:	9a03      	ldr	r2, [sp, #12]
 801bc18:	a805      	add	r0, sp, #20
 801bc1a:	f000 fcd0 	bl	801c5be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801bc1e:	ad1e      	add	r5, sp, #120	; 0x78
 801bc20:	2100      	movs	r1, #0
 801bc22:	26ff      	movs	r6, #255	; 0xff
 801bc24:	4622      	mov	r2, r4
 801bc26:	a805      	add	r0, sp, #20
 801bc28:	f845 1d68 	str.w	r1, [r5, #-104]!
 801bc2c:	462b      	mov	r3, r5
 801bc2e:	f000 ffc7 	bl	801cbc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801bc32:	b1d8      	cbz	r0, 801bc6c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801bc34:	280a      	cmp	r0, #10
 801bc36:	d012      	beq.n	801bc5e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801bc38:	9804      	ldr	r0, [sp, #16]
 801bc3a:	b180      	cbz	r0, 801bc5e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801bc3c:	7b47      	ldrb	r7, [r0, #13]
 801bc3e:	7922      	ldrb	r2, [r4, #4]
 801bc40:	00fb      	lsls	r3, r7, #3
 801bc42:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801bc46:	7a03      	ldrb	r3, [r0, #8]
 801bc48:	430b      	orrs	r3, r1
 801bc4a:	0679      	lsls	r1, r7, #25
 801bc4c:	bf44      	itt	mi
 801bc4e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bc52:	b21b      	sxthmi	r3, r3
 801bc54:	1ad3      	subs	r3, r2, r3
 801bc56:	b2db      	uxtb	r3, r3
 801bc58:	429e      	cmp	r6, r3
 801bc5a:	bf28      	it	cs
 801bc5c:	461e      	movcs	r6, r3
 801bc5e:	462b      	mov	r3, r5
 801bc60:	4622      	mov	r2, r4
 801bc62:	2100      	movs	r1, #0
 801bc64:	a805      	add	r0, sp, #20
 801bc66:	f000 ffab 	bl	801cbc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801bc6a:	e7e2      	b.n	801bc32 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801bc6c:	4630      	mov	r0, r6
 801bc6e:	b01e      	add	sp, #120	; 0x78
 801bc70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801bc74:	b003      	add	sp, #12
 801bc76:	4770      	bx	lr

0801bc78 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801bc78:	b513      	push	{r0, r1, r4, lr}
 801bc7a:	6803      	ldr	r3, [r0, #0]
 801bc7c:	2400      	movs	r4, #0
 801bc7e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801bc82:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bc86:	f8ad 1004 	strh.w	r1, [sp, #4]
 801bc8a:	4669      	mov	r1, sp
 801bc8c:	691b      	ldr	r3, [r3, #16]
 801bc8e:	9400      	str	r4, [sp, #0]
 801bc90:	f8ad 2006 	strh.w	r2, [sp, #6]
 801bc94:	4798      	blx	r3
 801bc96:	b002      	add	sp, #8
 801bc98:	bd10      	pop	{r4, pc}

0801bc9a <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801bc9a:	b538      	push	{r3, r4, r5, lr}
 801bc9c:	680b      	ldr	r3, [r1, #0]
 801bc9e:	460c      	mov	r4, r1
 801bca0:	4605      	mov	r5, r0
 801bca2:	68db      	ldr	r3, [r3, #12]
 801bca4:	4798      	blx	r3
 801bca6:	6823      	ldr	r3, [r4, #0]
 801bca8:	4620      	mov	r0, r4
 801bcaa:	4629      	mov	r1, r5
 801bcac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bcae:	4798      	blx	r3
 801bcb0:	4628      	mov	r0, r5
 801bcb2:	bd38      	pop	{r3, r4, r5, pc}

0801bcb4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801bcb4:	b410      	push	{r4}
 801bcb6:	880a      	ldrh	r2, [r1, #0]
 801bcb8:	8884      	ldrh	r4, [r0, #4]
 801bcba:	4422      	add	r2, r4
 801bcbc:	800a      	strh	r2, [r1, #0]
 801bcbe:	884a      	ldrh	r2, [r1, #2]
 801bcc0:	88c4      	ldrh	r4, [r0, #6]
 801bcc2:	4422      	add	r2, r4
 801bcc4:	804a      	strh	r2, [r1, #2]
 801bcc6:	6940      	ldr	r0, [r0, #20]
 801bcc8:	b120      	cbz	r0, 801bcd4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801bcca:	6803      	ldr	r3, [r0, #0]
 801bccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bcd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bcd2:	4718      	bx	r3
 801bcd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bcd8:	4770      	bx	lr

0801bcda <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801bcda:	b570      	push	{r4, r5, r6, lr}
 801bcdc:	8882      	ldrh	r2, [r0, #4]
 801bcde:	460c      	mov	r4, r1
 801bce0:	880b      	ldrh	r3, [r1, #0]
 801bce2:	4605      	mov	r5, r0
 801bce4:	4413      	add	r3, r2
 801bce6:	800b      	strh	r3, [r1, #0]
 801bce8:	884b      	ldrh	r3, [r1, #2]
 801bcea:	88c2      	ldrh	r2, [r0, #6]
 801bcec:	4413      	add	r3, r2
 801bcee:	804b      	strh	r3, [r1, #2]
 801bcf0:	1d01      	adds	r1, r0, #4
 801bcf2:	4620      	mov	r0, r4
 801bcf4:	f7fb fbf8 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 801bcf8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801bcfc:	2b00      	cmp	r3, #0
 801bcfe:	dd0b      	ble.n	801bd18 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bd00:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bd04:	2b00      	cmp	r3, #0
 801bd06:	dd07      	ble.n	801bd18 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bd08:	6968      	ldr	r0, [r5, #20]
 801bd0a:	b128      	cbz	r0, 801bd18 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bd0c:	6803      	ldr	r3, [r0, #0]
 801bd0e:	4621      	mov	r1, r4
 801bd10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bd16:	4718      	bx	r3
 801bd18:	bd70      	pop	{r4, r5, r6, pc}
	...

0801bd1c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801bd1c:	b570      	push	{r4, r5, r6, lr}
 801bd1e:	8882      	ldrh	r2, [r0, #4]
 801bd20:	460c      	mov	r4, r1
 801bd22:	880b      	ldrh	r3, [r1, #0]
 801bd24:	4605      	mov	r5, r0
 801bd26:	4413      	add	r3, r2
 801bd28:	800b      	strh	r3, [r1, #0]
 801bd2a:	884b      	ldrh	r3, [r1, #2]
 801bd2c:	88c2      	ldrh	r2, [r0, #6]
 801bd2e:	4413      	add	r3, r2
 801bd30:	804b      	strh	r3, [r1, #2]
 801bd32:	1d01      	adds	r1, r0, #4
 801bd34:	4620      	mov	r0, r4
 801bd36:	f7fb fbd7 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 801bd3a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801bd3e:	2b00      	cmp	r3, #0
 801bd40:	dd15      	ble.n	801bd6e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801bd42:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	dd11      	ble.n	801bd6e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801bd4a:	6968      	ldr	r0, [r5, #20]
 801bd4c:	b128      	cbz	r0, 801bd5a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801bd4e:	6803      	ldr	r3, [r0, #0]
 801bd50:	691b      	ldr	r3, [r3, #16]
 801bd52:	4621      	mov	r1, r4
 801bd54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bd58:	4718      	bx	r3
 801bd5a:	4b05      	ldr	r3, [pc, #20]	; (801bd70 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x54>)
 801bd5c:	681b      	ldr	r3, [r3, #0]
 801bd5e:	3304      	adds	r3, #4
 801bd60:	429d      	cmp	r5, r3
 801bd62:	d104      	bne.n	801bd6e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x52>
 801bd64:	f7ff f806 	bl	801ad74 <_ZN8touchgfx11Application11getInstanceEv>
 801bd68:	6803      	ldr	r3, [r0, #0]
 801bd6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bd6c:	e7f1      	b.n	801bd52 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x36>
 801bd6e:	bd70      	pop	{r4, r5, r6, pc}
 801bd70:	2002b8dc 	.word	0x2002b8dc

0801bd74 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801bd74:	b570      	push	{r4, r5, r6, lr}
 801bd76:	4604      	mov	r4, r0
 801bd78:	4616      	mov	r6, r2
 801bd7a:	460d      	mov	r5, r1
 801bd7c:	b901      	cbnz	r1, 801bd80 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801bd7e:	b192      	cbz	r2, 801bda6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801bd80:	6823      	ldr	r3, [r4, #0]
 801bd82:	4620      	mov	r0, r4
 801bd84:	695b      	ldr	r3, [r3, #20]
 801bd86:	4798      	blx	r3
 801bd88:	88e2      	ldrh	r2, [r4, #6]
 801bd8a:	88a1      	ldrh	r1, [r4, #4]
 801bd8c:	4620      	mov	r0, r4
 801bd8e:	4432      	add	r2, r6
 801bd90:	4429      	add	r1, r5
 801bd92:	b212      	sxth	r2, r2
 801bd94:	b209      	sxth	r1, r1
 801bd96:	f7e7 fe04 	bl	80039a2 <_ZN8touchgfx8Drawable5setXYEss>
 801bd9a:	6823      	ldr	r3, [r4, #0]
 801bd9c:	4620      	mov	r0, r4
 801bd9e:	695b      	ldr	r3, [r3, #20]
 801bda0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bda4:	4718      	bx	r3
 801bda6:	bd70      	pop	{r4, r5, r6, pc}

0801bda8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801bda8:	b510      	push	{r4, lr}
 801bdaa:	2300      	movs	r3, #0
 801bdac:	4604      	mov	r4, r0
 801bdae:	4608      	mov	r0, r1
 801bdb0:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801bdb4:	8023      	strh	r3, [r4, #0]
 801bdb6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bdba:	8063      	strh	r3, [r4, #2]
 801bdbc:	6803      	ldr	r3, [r0, #0]
 801bdbe:	80a1      	strh	r1, [r4, #4]
 801bdc0:	4621      	mov	r1, r4
 801bdc2:	80e2      	strh	r2, [r4, #6]
 801bdc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bdc6:	4798      	blx	r3
 801bdc8:	4620      	mov	r0, r4
 801bdca:	bd10      	pop	{r4, pc}

0801bdcc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801bdcc:	b530      	push	{r4, r5, lr}
 801bdce:	8083      	strh	r3, [r0, #4]
 801bdd0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801bdd4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801bdd8:	7183      	strb	r3, [r0, #6]
 801bdda:	79c3      	ldrb	r3, [r0, #7]
 801bddc:	6101      	str	r1, [r0, #16]
 801bdde:	f365 0306 	bfi	r3, r5, #0, #7
 801bde2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801bde6:	8282      	strh	r2, [r0, #20]
 801bde8:	f365 13c7 	bfi	r3, r5, #7, #1
 801bdec:	71c3      	strb	r3, [r0, #7]
 801bdee:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801bdf2:	7203      	strb	r3, [r0, #8]
 801bdf4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801bdf8:	7243      	strb	r3, [r0, #9]
 801bdfa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801bdfe:	8143      	strh	r3, [r0, #10]
 801be00:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801be04:	8183      	strh	r3, [r0, #12]
 801be06:	4b01      	ldr	r3, [pc, #4]	; (801be0c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801be08:	6003      	str	r3, [r0, #0]
 801be0a:	bd30      	pop	{r4, r5, pc}
 801be0c:	08030cf8 	.word	0x08030cf8

0801be10 <_ZNK8touchgfx9ConstFont4findEt>:
 801be10:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be12:	6904      	ldr	r4, [r0, #16]
 801be14:	b3bc      	cbz	r4, 801be86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801be16:	88a3      	ldrh	r3, [r4, #4]
 801be18:	8a82      	ldrh	r2, [r0, #20]
 801be1a:	1acb      	subs	r3, r1, r3
 801be1c:	f102 32ff 	add.w	r2, r2, #4294967295
 801be20:	d431      	bmi.n	801be86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801be22:	4293      	cmp	r3, r2
 801be24:	dd0c      	ble.n	801be40 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801be26:	230e      	movs	r3, #14
 801be28:	fb03 4302 	mla	r3, r3, r2, r4
 801be2c:	889b      	ldrh	r3, [r3, #4]
 801be2e:	1a5b      	subs	r3, r3, r1
 801be30:	1ad3      	subs	r3, r2, r3
 801be32:	429a      	cmp	r2, r3
 801be34:	db27      	blt.n	801be86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801be36:	2b00      	cmp	r3, #0
 801be38:	bfbc      	itt	lt
 801be3a:	2302      	movlt	r3, #2
 801be3c:	fb92 f3f3 	sdivlt	r3, r2, r3
 801be40:	2500      	movs	r5, #0
 801be42:	260e      	movs	r6, #14
 801be44:	4295      	cmp	r5, r2
 801be46:	dc1e      	bgt.n	801be86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801be48:	fb06 4003 	mla	r0, r6, r3, r4
 801be4c:	8887      	ldrh	r7, [r0, #4]
 801be4e:	42b9      	cmp	r1, r7
 801be50:	d01a      	beq.n	801be88 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801be52:	d20d      	bcs.n	801be70 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801be54:	1e5a      	subs	r2, r3, #1
 801be56:	4295      	cmp	r5, r2
 801be58:	dc15      	bgt.n	801be86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801be5a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801be5e:	1a5b      	subs	r3, r3, r1
 801be60:	1ad3      	subs	r3, r2, r3
 801be62:	429a      	cmp	r2, r3
 801be64:	db0f      	blt.n	801be86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801be66:	429d      	cmp	r5, r3
 801be68:	ddec      	ble.n	801be44 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801be6a:	1953      	adds	r3, r2, r5
 801be6c:	105b      	asrs	r3, r3, #1
 801be6e:	e7e9      	b.n	801be44 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801be70:	1c5d      	adds	r5, r3, #1
 801be72:	42aa      	cmp	r2, r5
 801be74:	db07      	blt.n	801be86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801be76:	8a43      	ldrh	r3, [r0, #18]
 801be78:	1acb      	subs	r3, r1, r3
 801be7a:	442b      	add	r3, r5
 801be7c:	429d      	cmp	r5, r3
 801be7e:	dc02      	bgt.n	801be86 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801be80:	429a      	cmp	r2, r3
 801be82:	dadf      	bge.n	801be44 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801be84:	e7f1      	b.n	801be6a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801be86:	2000      	movs	r0, #0
 801be88:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801be8a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801be8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be8c:	4604      	mov	r4, r0
 801be8e:	4617      	mov	r7, r2
 801be90:	461e      	mov	r6, r3
 801be92:	b911      	cbnz	r1, 801be9a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801be94:	2500      	movs	r5, #0
 801be96:	4628      	mov	r0, r5
 801be98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be9a:	290a      	cmp	r1, #10
 801be9c:	d0fa      	beq.n	801be94 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801be9e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801bea2:	4291      	cmp	r1, r2
 801bea4:	d0f6      	beq.n	801be94 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bea6:	f242 020b 	movw	r2, #8203	; 0x200b
 801beaa:	4291      	cmp	r1, r2
 801beac:	d0f2      	beq.n	801be94 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801beae:	f7ff ffaf 	bl	801be10 <_ZNK8touchgfx9ConstFont4findEt>
 801beb2:	4605      	mov	r5, r0
 801beb4:	b950      	cbnz	r0, 801becc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801beb6:	6823      	ldr	r3, [r4, #0]
 801beb8:	4620      	mov	r0, r4
 801beba:	691b      	ldr	r3, [r3, #16]
 801bebc:	4798      	blx	r3
 801bebe:	4601      	mov	r1, r0
 801bec0:	4620      	mov	r0, r4
 801bec2:	f7ff ffa5 	bl	801be10 <_ZNK8touchgfx9ConstFont4findEt>
 801bec6:	4605      	mov	r5, r0
 801bec8:	2800      	cmp	r0, #0
 801beca:	d0e3      	beq.n	801be94 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801becc:	6823      	ldr	r3, [r4, #0]
 801bece:	4629      	mov	r1, r5
 801bed0:	4620      	mov	r0, r4
 801bed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bed4:	4798      	blx	r3
 801bed6:	6038      	str	r0, [r7, #0]
 801bed8:	6823      	ldr	r3, [r4, #0]
 801beda:	4620      	mov	r0, r4
 801bedc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bede:	4798      	blx	r3
 801bee0:	7030      	strb	r0, [r6, #0]
 801bee2:	e7d8      	b.n	801be96 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801bee4 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
 801bee4:	2000      	movs	r0, #0
 801bee6:	4770      	bx	lr

0801bee8 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
 801bee8:	2001      	movs	r0, #1
 801beea:	4770      	bx	lr

0801beec <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801beec:	2002      	movs	r0, #2
 801beee:	4770      	bx	lr

0801bef0 <_ZN8touchgfx6ScreenD1Ev>:
 801bef0:	4770      	bx	lr

0801bef2 <_ZN8touchgfx12GestureEventD1Ev>:
 801bef2:	4770      	bx	lr

0801bef4 <_ZN8touchgfx9DragEventD1Ev>:
 801bef4:	4770      	bx	lr

0801bef6 <_ZN8touchgfx10ClickEventD1Ev>:
 801bef6:	4770      	bx	lr

0801bef8 <_ZN8touchgfx10ClickEventD0Ev>:
 801bef8:	b510      	push	{r4, lr}
 801befa:	4604      	mov	r4, r0
 801befc:	210c      	movs	r1, #12
 801befe:	f00d ff79 	bl	8029df4 <_ZdlPvj>
 801bf02:	4620      	mov	r0, r4
 801bf04:	bd10      	pop	{r4, pc}

0801bf06 <_ZN8touchgfx9DragEventD0Ev>:
 801bf06:	b510      	push	{r4, lr}
 801bf08:	4604      	mov	r4, r0
 801bf0a:	2110      	movs	r1, #16
 801bf0c:	f00d ff72 	bl	8029df4 <_ZdlPvj>
 801bf10:	4620      	mov	r0, r4
 801bf12:	bd10      	pop	{r4, pc}

0801bf14 <_ZN8touchgfx12GestureEventD0Ev>:
 801bf14:	b510      	push	{r4, lr}
 801bf16:	4604      	mov	r4, r0
 801bf18:	210c      	movs	r1, #12
 801bf1a:	f00d ff6b 	bl	8029df4 <_ZdlPvj>
 801bf1e:	4620      	mov	r0, r4
 801bf20:	bd10      	pop	{r4, pc}

0801bf22 <_ZN8touchgfx6ScreenD0Ev>:
 801bf22:	b510      	push	{r4, lr}
 801bf24:	4604      	mov	r4, r0
 801bf26:	213c      	movs	r1, #60	; 0x3c
 801bf28:	f00d ff64 	bl	8029df4 <_ZdlPvj>
 801bf2c:	4620      	mov	r0, r4
 801bf2e:	bd10      	pop	{r4, pc}

0801bf30 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801bf30:	b530      	push	{r4, r5, lr}
 801bf32:	460d      	mov	r5, r1
 801bf34:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801bf36:	b087      	sub	sp, #28
 801bf38:	4604      	mov	r4, r0
 801bf3a:	b301      	cbz	r1, 801bf7e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801bf3c:	a801      	add	r0, sp, #4
 801bf3e:	f7ff ff33 	bl	801bda8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bf42:	892a      	ldrh	r2, [r5, #8]
 801bf44:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801bf48:	7928      	ldrb	r0, [r5, #4]
 801bf4a:	1ad2      	subs	r2, r2, r3
 801bf4c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801bf4e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801bf52:	441a      	add	r2, r3
 801bf54:	896b      	ldrh	r3, [r5, #10]
 801bf56:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801bf5a:	f88d 0010 	strb.w	r0, [sp, #16]
 801bf5e:	1b5b      	subs	r3, r3, r5
 801bf60:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801bf62:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801bf64:	442b      	add	r3, r5
 801bf66:	4d07      	ldr	r5, [pc, #28]	; (801bf84 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801bf68:	f8ad 1012 	strh.w	r1, [sp, #18]
 801bf6c:	a903      	add	r1, sp, #12
 801bf6e:	9503      	str	r5, [sp, #12]
 801bf70:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bf74:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bf78:	6803      	ldr	r3, [r0, #0]
 801bf7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bf7c:	4798      	blx	r3
 801bf7e:	b007      	add	sp, #28
 801bf80:	bd30      	pop	{r4, r5, pc}
 801bf82:	bf00      	nop
 801bf84:	08030d78 	.word	0x08030d78

0801bf88 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801bf88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf8c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801bf8e:	b08a      	sub	sp, #40	; 0x28
 801bf90:	4604      	mov	r4, r0
 801bf92:	460d      	mov	r5, r1
 801bf94:	b113      	cbz	r3, 801bf9c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801bf96:	790b      	ldrb	r3, [r1, #4]
 801bf98:	2b00      	cmp	r3, #0
 801bf9a:	d044      	beq.n	801c026 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801bf9c:	f104 0804 	add.w	r8, r4, #4
 801bfa0:	a803      	add	r0, sp, #12
 801bfa2:	4641      	mov	r1, r8
 801bfa4:	f7ff ff00 	bl	801bda8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bfa8:	792b      	ldrb	r3, [r5, #4]
 801bfaa:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801bfae:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801bfb2:	b983      	cbnz	r3, 801bfd6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801bfb4:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801bfb8:	892a      	ldrh	r2, [r5, #8]
 801bfba:	88e9      	ldrh	r1, [r5, #6]
 801bfbc:	4640      	mov	r0, r8
 801bfbe:	1b92      	subs	r2, r2, r6
 801bfc0:	9301      	str	r3, [sp, #4]
 801bfc2:	1bc9      	subs	r1, r1, r7
 801bfc4:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801bfc8:	b212      	sxth	r2, r2
 801bfca:	9300      	str	r3, [sp, #0]
 801bfcc:	b209      	sxth	r1, r1
 801bfce:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801bfd2:	f7fb f9a7 	bl	8017324 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801bfd6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801bfd8:	b329      	cbz	r1, 801c026 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801bfda:	a805      	add	r0, sp, #20
 801bfdc:	f7ff fee4 	bl	801bda8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bfe0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801bfe4:	792b      	ldrb	r3, [r5, #4]
 801bfe6:	a907      	add	r1, sp, #28
 801bfe8:	1abf      	subs	r7, r7, r2
 801bfea:	88ea      	ldrh	r2, [r5, #6]
 801bfec:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801bfee:	4417      	add	r7, r2
 801bff0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801bff2:	f88d 3020 	strb.w	r3, [sp, #32]
 801bff6:	4417      	add	r7, r2
 801bff8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801bffc:	1ab6      	subs	r6, r6, r2
 801bffe:	892a      	ldrh	r2, [r5, #8]
 801c000:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801c004:	4416      	add	r6, r2
 801c006:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c008:	4416      	add	r6, r2
 801c00a:	4a08      	ldr	r2, [pc, #32]	; (801c02c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801c00c:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801c010:	2600      	movs	r6, #0
 801c012:	9207      	str	r2, [sp, #28]
 801c014:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801c018:	6803      	ldr	r3, [r0, #0]
 801c01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c01c:	4798      	blx	r3
 801c01e:	792b      	ldrb	r3, [r5, #4]
 801c020:	b10b      	cbz	r3, 801c026 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c022:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801c026:	b00a      	add	sp, #40	; 0x28
 801c028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c02c:	08030d50 	.word	0x08030d50

0801c030 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801c030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c034:	460c      	mov	r4, r1
 801c036:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801c038:	b088      	sub	sp, #32
 801c03a:	4605      	mov	r5, r0
 801c03c:	2900      	cmp	r1, #0
 801c03e:	d06d      	beq.n	801c11c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801c040:	4668      	mov	r0, sp
 801c042:	f7ff feb1 	bl	801bda8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c046:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801c048:	88e3      	ldrh	r3, [r4, #6]
 801c04a:	f9bd 8000 	ldrsh.w	r8, [sp]
 801c04e:	440b      	add	r3, r1
 801c050:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801c054:	b21b      	sxth	r3, r3
 801c056:	4543      	cmp	r3, r8
 801c058:	db31      	blt.n	801c0be <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c05a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801c05e:	44c4      	add	ip, r8
 801c060:	fa0f fc8c 	sxth.w	ip, ip
 801c064:	4563      	cmp	r3, ip
 801c066:	da2a      	bge.n	801c0be <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c068:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801c06a:	8926      	ldrh	r6, [r4, #8]
 801c06c:	4416      	add	r6, r2
 801c06e:	b236      	sxth	r6, r6
 801c070:	42be      	cmp	r6, r7
 801c072:	db24      	blt.n	801c0be <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c074:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801c078:	4438      	add	r0, r7
 801c07a:	b200      	sxth	r0, r0
 801c07c:	4286      	cmp	r6, r0
 801c07e:	da1e      	bge.n	801c0be <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c080:	8963      	ldrh	r3, [r4, #10]
 801c082:	4419      	add	r1, r3
 801c084:	b209      	sxth	r1, r1
 801c086:	4541      	cmp	r1, r8
 801c088:	db08      	blt.n	801c09c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c08a:	4561      	cmp	r1, ip
 801c08c:	da06      	bge.n	801c09c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c08e:	89a3      	ldrh	r3, [r4, #12]
 801c090:	441a      	add	r2, r3
 801c092:	b212      	sxth	r2, r2
 801c094:	42ba      	cmp	r2, r7
 801c096:	db01      	blt.n	801c09c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c098:	4282      	cmp	r2, r0
 801c09a:	db10      	blt.n	801c0be <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c09c:	4b21      	ldr	r3, [pc, #132]	; (801c124 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801c09e:	a904      	add	r1, sp, #16
 801c0a0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c0a2:	9304      	str	r3, [sp, #16]
 801c0a4:	2302      	movs	r3, #2
 801c0a6:	f88d 3014 	strb.w	r3, [sp, #20]
 801c0aa:	2300      	movs	r3, #0
 801c0ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c0b0:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c0b4:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c0b8:	6803      	ldr	r3, [r0, #0]
 801c0ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c0bc:	4798      	blx	r3
 801c0be:	1d29      	adds	r1, r5, #4
 801c0c0:	a802      	add	r0, sp, #8
 801c0c2:	f7ff fe71 	bl	801bda8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c0c6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c0ca:	88e0      	ldrh	r0, [r4, #6]
 801c0cc:	eba3 0808 	sub.w	r8, r3, r8
 801c0d0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c0d4:	7921      	ldrb	r1, [r4, #4]
 801c0d6:	fa1f f888 	uxth.w	r8, r8
 801c0da:	1bdf      	subs	r7, r3, r7
 801c0dc:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801c0e0:	b2bb      	uxth	r3, r7
 801c0e2:	4440      	add	r0, r8
 801c0e4:	8922      	ldrh	r2, [r4, #8]
 801c0e6:	8967      	ldrh	r7, [r4, #10]
 801c0e8:	4460      	add	r0, ip
 801c0ea:	89a4      	ldrh	r4, [r4, #12]
 801c0ec:	441a      	add	r2, r3
 801c0ee:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801c0f0:	44b8      	add	r8, r7
 801c0f2:	4423      	add	r3, r4
 801c0f4:	f8ad 0016 	strh.w	r0, [sp, #22]
 801c0f8:	4432      	add	r2, r6
 801c0fa:	44e0      	add	r8, ip
 801c0fc:	4433      	add	r3, r6
 801c0fe:	4c0a      	ldr	r4, [pc, #40]	; (801c128 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801c100:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c102:	f88d 1014 	strb.w	r1, [sp, #20]
 801c106:	a904      	add	r1, sp, #16
 801c108:	9404      	str	r4, [sp, #16]
 801c10a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c10e:	f8ad 801a 	strh.w	r8, [sp, #26]
 801c112:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c116:	6803      	ldr	r3, [r0, #0]
 801c118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c11a:	4798      	blx	r3
 801c11c:	b008      	add	sp, #32
 801c11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c122:	bf00      	nop
 801c124:	08030d50 	.word	0x08030d50
 801c128:	08030d64 	.word	0x08030d64

0801c12c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801c12c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c12e:	4604      	mov	r4, r0
 801c130:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801c134:	3201      	adds	r2, #1
 801c136:	d112      	bne.n	801c15e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801c138:	2500      	movs	r5, #0
 801c13a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c13e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c142:	6803      	ldr	r3, [r0, #0]
 801c144:	9500      	str	r5, [sp, #0]
 801c146:	466d      	mov	r5, sp
 801c148:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c14c:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c150:	4629      	mov	r1, r5
 801c152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c154:	4798      	blx	r3
 801c156:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c15a:	e884 0003 	stmia.w	r4, {r0, r1}
 801c15e:	4620      	mov	r0, r4
 801c160:	b003      	add	sp, #12
 801c162:	bd30      	pop	{r4, r5, pc}

0801c164 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801c164:	b513      	push	{r0, r1, r4, lr}
 801c166:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801c16a:	4604      	mov	r4, r0
 801c16c:	3301      	adds	r3, #1
 801c16e:	d109      	bne.n	801c184 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801c170:	4601      	mov	r1, r0
 801c172:	4668      	mov	r0, sp
 801c174:	f7ff fe18 	bl	801bda8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c178:	f8bd 3000 	ldrh.w	r3, [sp]
 801c17c:	8423      	strh	r3, [r4, #32]
 801c17e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c182:	8463      	strh	r3, [r4, #34]	; 0x22
 801c184:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801c188:	b002      	add	sp, #8
 801c18a:	bd10      	pop	{r4, pc}

0801c18c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801c18c:	b513      	push	{r0, r1, r4, lr}
 801c18e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801c192:	4604      	mov	r4, r0
 801c194:	3301      	adds	r3, #1
 801c196:	d109      	bne.n	801c1ac <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801c198:	4601      	mov	r1, r0
 801c19a:	4668      	mov	r0, sp
 801c19c:	f7ff fe04 	bl	801bda8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c1a0:	f8bd 3000 	ldrh.w	r3, [sp]
 801c1a4:	8423      	strh	r3, [r4, #32]
 801c1a6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c1aa:	8463      	strh	r3, [r4, #34]	; 0x22
 801c1ac:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801c1b0:	b002      	add	sp, #8
 801c1b2:	bd10      	pop	{r4, pc}

0801c1b4 <_ZN8touchgfx6ScreenC1Ev>:
 801c1b4:	b570      	push	{r4, r5, r6, lr}
 801c1b6:	4b17      	ldr	r3, [pc, #92]	; (801c214 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801c1b8:	4605      	mov	r5, r0
 801c1ba:	4a17      	ldr	r2, [pc, #92]	; (801c218 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801c1bc:	2101      	movs	r1, #1
 801c1be:	f845 3b04 	str.w	r3, [r5], #4
 801c1c2:	2300      	movs	r3, #0
 801c1c4:	6042      	str	r2, [r0, #4]
 801c1c6:	4604      	mov	r4, r0
 801c1c8:	8103      	strh	r3, [r0, #8]
 801c1ca:	8143      	strh	r3, [r0, #10]
 801c1cc:	8183      	strh	r3, [r0, #12]
 801c1ce:	81c3      	strh	r3, [r0, #14]
 801c1d0:	8203      	strh	r3, [r0, #16]
 801c1d2:	8243      	strh	r3, [r0, #18]
 801c1d4:	8283      	strh	r3, [r0, #20]
 801c1d6:	82c3      	strh	r3, [r0, #22]
 801c1d8:	6203      	str	r3, [r0, #32]
 801c1da:	8483      	strh	r3, [r0, #36]	; 0x24
 801c1dc:	84c3      	strh	r3, [r0, #38]	; 0x26
 801c1de:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801c1e2:	6343      	str	r3, [r0, #52]	; 0x34
 801c1e4:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801c1e8:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801c1ec:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801c1f0:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801c1f4:	4b09      	ldr	r3, [pc, #36]	; (801c21c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801c1f6:	4628      	mov	r0, r5
 801c1f8:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c1fc:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801c1fe:	4a08      	ldr	r2, [pc, #32]	; (801c220 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801c200:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c204:	4798      	blx	r3
 801c206:	6863      	ldr	r3, [r4, #4]
 801c208:	4628      	mov	r0, r5
 801c20a:	4631      	mov	r1, r6
 801c20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c20e:	4798      	blx	r3
 801c210:	4620      	mov	r0, r4
 801c212:	bd70      	pop	{r4, r5, r6, pc}
 801c214:	08030d8c 	.word	0x08030d8c
 801c218:	0802fd04 	.word	0x0802fd04
 801c21c:	2002b896 	.word	0x2002b896
 801c220:	2002b894 	.word	0x2002b894

0801c224 <_ZN8touchgfx6Screen4drawEv>:
 801c224:	4b09      	ldr	r3, [pc, #36]	; (801c24c <_ZN8touchgfx6Screen4drawEv+0x28>)
 801c226:	b507      	push	{r0, r1, r2, lr}
 801c228:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c22c:	2100      	movs	r1, #0
 801c22e:	4b08      	ldr	r3, [pc, #32]	; (801c250 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801c230:	9100      	str	r1, [sp, #0]
 801c232:	4669      	mov	r1, sp
 801c234:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c238:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c23c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c240:	6803      	ldr	r3, [r0, #0]
 801c242:	689b      	ldr	r3, [r3, #8]
 801c244:	4798      	blx	r3
 801c246:	b003      	add	sp, #12
 801c248:	f85d fb04 	ldr.w	pc, [sp], #4
 801c24c:	2002b894 	.word	0x2002b894
 801c250:	2002b896 	.word	0x2002b896

0801c254 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801c254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c258:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c25c:	b089      	sub	sp, #36	; 0x24
 801c25e:	4680      	mov	r8, r0
 801c260:	460c      	mov	r4, r1
 801c262:	2b00      	cmp	r3, #0
 801c264:	4615      	mov	r5, r2
 801c266:	dd0e      	ble.n	801c286 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c268:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c26c:	2b00      	cmp	r3, #0
 801c26e:	dd0a      	ble.n	801c286 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c270:	4628      	mov	r0, r5
 801c272:	f7ff ff5b 	bl	801c12c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c276:	4621      	mov	r1, r4
 801c278:	f7fe fcf2 	bl	801ac60 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c27c:	69eb      	ldr	r3, [r5, #28]
 801c27e:	b928      	cbnz	r0, 801c28c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801c280:	461d      	mov	r5, r3
 801c282:	2b00      	cmp	r3, #0
 801c284:	d1f4      	bne.n	801c270 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801c286:	b009      	add	sp, #36	; 0x24
 801c288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c28c:	ae04      	add	r6, sp, #16
 801c28e:	2b00      	cmp	r3, #0
 801c290:	f000 80b5 	beq.w	801c3fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c294:	682b      	ldr	r3, [r5, #0]
 801c296:	4629      	mov	r1, r5
 801c298:	a802      	add	r0, sp, #8
 801c29a:	68db      	ldr	r3, [r3, #12]
 801c29c:	4798      	blx	r3
 801c29e:	4628      	mov	r0, r5
 801c2a0:	f7ff ff60 	bl	801c164 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c2a4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801c2a8:	4407      	add	r7, r0
 801c2aa:	4628      	mov	r0, r5
 801c2ac:	f7ff ff6e 	bl	801c18c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c2b0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c2b4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801c2b8:	b23f      	sxth	r7, r7
 801c2ba:	4418      	add	r0, r3
 801c2bc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801c2c0:	4621      	mov	r1, r4
 801c2c2:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c2c6:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c2ca:	4630      	mov	r0, r6
 801c2cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c2d0:	f8ad 7010 	strh.w	r7, [sp, #16]
 801c2d4:	f7fb f908 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 801c2d8:	4628      	mov	r0, r5
 801c2da:	f7ff ff27 	bl	801c12c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c2de:	ab06      	add	r3, sp, #24
 801c2e0:	4602      	mov	r2, r0
 801c2e2:	e896 0003 	ldmia.w	r6, {r0, r1}
 801c2e6:	e883 0003 	stmia.w	r3, {r0, r1}
 801c2ea:	4611      	mov	r1, r2
 801c2ec:	4618      	mov	r0, r3
 801c2ee:	f7fb f8fb 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 801c2f2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801c2f6:	f9b4 1000 	ldrsh.w	r1, [r4]
 801c2fa:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801c2fe:	4299      	cmp	r1, r3
 801c300:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801c304:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801c308:	d10b      	bne.n	801c322 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c30a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c30e:	4552      	cmp	r2, sl
 801c310:	d107      	bne.n	801c322 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c312:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801c316:	455a      	cmp	r2, fp
 801c318:	d103      	bne.n	801c322 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c31a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801c31e:	454a      	cmp	r2, r9
 801c320:	d06d      	beq.n	801c3fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c322:	f1bb 0f00 	cmp.w	fp, #0
 801c326:	dd65      	ble.n	801c3f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c328:	f1b9 0f00 	cmp.w	r9, #0
 801c32c:	dd62      	ble.n	801c3f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c32e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c332:	fa1f f08a 	uxth.w	r0, sl
 801c336:	4552      	cmp	r2, sl
 801c338:	9000      	str	r0, [sp, #0]
 801c33a:	da12      	bge.n	801c362 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801c33c:	9301      	str	r3, [sp, #4]
 801c33e:	9b00      	ldr	r3, [sp, #0]
 801c340:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c344:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c348:	1a9a      	subs	r2, r3, r2
 801c34a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801c34e:	4631      	mov	r1, r6
 801c350:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c354:	4640      	mov	r0, r8
 801c356:	f8ad 2016 	strh.w	r2, [sp, #22]
 801c35a:	69ea      	ldr	r2, [r5, #28]
 801c35c:	f7ff ff7a 	bl	801c254 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c360:	9b01      	ldr	r3, [sp, #4]
 801c362:	f9b4 2000 	ldrsh.w	r2, [r4]
 801c366:	b29f      	uxth	r7, r3
 801c368:	429a      	cmp	r2, r3
 801c36a:	da0d      	bge.n	801c388 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801c36c:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c370:	1aba      	subs	r2, r7, r2
 801c372:	f8ad a012 	strh.w	sl, [sp, #18]
 801c376:	4631      	mov	r1, r6
 801c378:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c37c:	4640      	mov	r0, r8
 801c37e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c382:	69ea      	ldr	r2, [r5, #28]
 801c384:	f7ff ff66 	bl	801c254 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c388:	8822      	ldrh	r2, [r4, #0]
 801c38a:	445f      	add	r7, fp
 801c38c:	88a3      	ldrh	r3, [r4, #4]
 801c38e:	b2bf      	uxth	r7, r7
 801c390:	4413      	add	r3, r2
 801c392:	b23a      	sxth	r2, r7
 801c394:	b29b      	uxth	r3, r3
 801c396:	b219      	sxth	r1, r3
 801c398:	4291      	cmp	r1, r2
 801c39a:	dd0d      	ble.n	801c3b8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801c39c:	1bdb      	subs	r3, r3, r7
 801c39e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c3a2:	f8ad a012 	strh.w	sl, [sp, #18]
 801c3a6:	4631      	mov	r1, r6
 801c3a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c3ac:	4640      	mov	r0, r8
 801c3ae:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c3b2:	69ea      	ldr	r2, [r5, #28]
 801c3b4:	f7ff ff4e 	bl	801c254 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c3b8:	88e2      	ldrh	r2, [r4, #6]
 801c3ba:	8863      	ldrh	r3, [r4, #2]
 801c3bc:	4413      	add	r3, r2
 801c3be:	9a00      	ldr	r2, [sp, #0]
 801c3c0:	444a      	add	r2, r9
 801c3c2:	b29b      	uxth	r3, r3
 801c3c4:	fa1f f982 	uxth.w	r9, r2
 801c3c8:	b219      	sxth	r1, r3
 801c3ca:	fa0f f289 	sxth.w	r2, r9
 801c3ce:	428a      	cmp	r2, r1
 801c3d0:	da15      	bge.n	801c3fe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c3d2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c3d6:	eba3 0309 	sub.w	r3, r3, r9
 801c3da:	f9b4 0000 	ldrsh.w	r0, [r4]
 801c3de:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c3e2:	4631      	mov	r1, r6
 801c3e4:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c3e8:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c3ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c3f0:	69ea      	ldr	r2, [r5, #28]
 801c3f2:	e001      	b.n	801c3f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801c3f4:	69ea      	ldr	r2, [r5, #28]
 801c3f6:	4621      	mov	r1, r4
 801c3f8:	4640      	mov	r0, r8
 801c3fa:	f7ff ff2b 	bl	801c254 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c3fe:	4628      	mov	r0, r5
 801c400:	f7ff fe94 	bl	801c12c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c404:	6861      	ldr	r1, [r4, #4]
 801c406:	4602      	mov	r2, r0
 801c408:	4633      	mov	r3, r6
 801c40a:	6820      	ldr	r0, [r4, #0]
 801c40c:	c303      	stmia	r3!, {r0, r1}
 801c40e:	4611      	mov	r1, r2
 801c410:	4630      	mov	r0, r6
 801c412:	f7fb f869 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 801c416:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	f77f af33 	ble.w	801c286 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c420:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801c424:	2b00      	cmp	r3, #0
 801c426:	f77f af2e 	ble.w	801c286 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c42a:	4628      	mov	r0, r5
 801c42c:	f7ff fe9a 	bl	801c164 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c430:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801c434:	1a18      	subs	r0, r3, r0
 801c436:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c43a:	4628      	mov	r0, r5
 801c43c:	f7ff fea6 	bl	801c18c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c440:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c444:	4631      	mov	r1, r6
 801c446:	1a18      	subs	r0, r3, r0
 801c448:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c44c:	4628      	mov	r0, r5
 801c44e:	682b      	ldr	r3, [r5, #0]
 801c450:	689b      	ldr	r3, [r3, #8]
 801c452:	4798      	blx	r3
 801c454:	e717      	b.n	801c286 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801c456 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801c456:	b570      	push	{r4, r5, r6, lr}
 801c458:	1d06      	adds	r6, r0, #4
 801c45a:	b086      	sub	sp, #24
 801c45c:	460c      	mov	r4, r1
 801c45e:	2300      	movs	r3, #0
 801c460:	4631      	mov	r1, r6
 801c462:	4605      	mov	r5, r0
 801c464:	a802      	add	r0, sp, #8
 801c466:	9301      	str	r3, [sp, #4]
 801c468:	f7ff fc9e 	bl	801bda8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c46c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c470:	8822      	ldrh	r2, [r4, #0]
 801c472:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801c476:	1ad2      	subs	r2, r2, r3
 801c478:	8863      	ldrh	r3, [r4, #2]
 801c47a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c47e:	1a5b      	subs	r3, r3, r1
 801c480:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801c484:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c488:	aa01      	add	r2, sp, #4
 801c48a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c48e:	4630      	mov	r0, r6
 801c490:	f8ad 1016 	strh.w	r1, [sp, #22]
 801c494:	a904      	add	r1, sp, #16
 801c496:	f8ad 3012 	strh.w	r3, [sp, #18]
 801c49a:	f7fb f8fd 	bl	8017698 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801c49e:	9a01      	ldr	r2, [sp, #4]
 801c4a0:	b11a      	cbz	r2, 801c4aa <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801c4a2:	4621      	mov	r1, r4
 801c4a4:	4628      	mov	r0, r5
 801c4a6:	f7ff fed5 	bl	801c254 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c4aa:	b006      	add	sp, #24
 801c4ac:	bd70      	pop	{r4, r5, r6, pc}

0801c4ae <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801c4ae:	4602      	mov	r2, r0
 801c4b0:	b530      	push	{r4, r5, lr}
 801c4b2:	4604      	mov	r4, r0
 801c4b4:	b085      	sub	sp, #20
 801c4b6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801c4ba:	460d      	mov	r5, r1
 801c4bc:	466b      	mov	r3, sp
 801c4be:	6851      	ldr	r1, [r2, #4]
 801c4c0:	c303      	stmia	r3!, {r0, r1}
 801c4c2:	4629      	mov	r1, r5
 801c4c4:	4668      	mov	r0, sp
 801c4c6:	f7fb f80f 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 801c4ca:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801c4ce:	b12b      	cbz	r3, 801c4dc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801c4d0:	4669      	mov	r1, sp
 801c4d2:	4620      	mov	r0, r4
 801c4d4:	f7ff ffbf 	bl	801c456 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801c4d8:	b005      	add	sp, #20
 801c4da:	bd30      	pop	{r4, r5, pc}
 801c4dc:	3404      	adds	r4, #4
 801c4de:	a802      	add	r0, sp, #8
 801c4e0:	4621      	mov	r1, r4
 801c4e2:	f7ff fc61 	bl	801bda8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c4e6:	f8bd 3000 	ldrh.w	r3, [sp]
 801c4ea:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801c4ee:	4669      	mov	r1, sp
 801c4f0:	4620      	mov	r0, r4
 801c4f2:	1a9b      	subs	r3, r3, r2
 801c4f4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c4f8:	f8ad 3000 	strh.w	r3, [sp]
 801c4fc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c500:	1a9b      	subs	r3, r3, r2
 801c502:	f8ad 3002 	strh.w	r3, [sp, #2]
 801c506:	f7fb f88e 	bl	8017626 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801c50a:	e7e5      	b.n	801c4d8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801c50c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801c50c:	460b      	mov	r3, r1
 801c50e:	680a      	ldr	r2, [r1, #0]
 801c510:	1d01      	adds	r1, r0, #4
 801c512:	6992      	ldr	r2, [r2, #24]
 801c514:	4618      	mov	r0, r3
 801c516:	4710      	bx	r2

0801c518 <_ZN8touchgfx12TextProviderC1Ev>:
 801c518:	b538      	push	{r3, r4, r5, lr}
 801c51a:	2500      	movs	r5, #0
 801c51c:	2302      	movs	r3, #2
 801c51e:	4604      	mov	r4, r0
 801c520:	220e      	movs	r2, #14
 801c522:	7403      	strb	r3, [r0, #16]
 801c524:	4629      	mov	r1, r5
 801c526:	6145      	str	r5, [r0, #20]
 801c528:	7605      	strb	r5, [r0, #24]
 801c52a:	83c5      	strh	r5, [r0, #30]
 801c52c:	8405      	strh	r5, [r0, #32]
 801c52e:	86c5      	strh	r5, [r0, #54]	; 0x36
 801c530:	8705      	strh	r5, [r0, #56]	; 0x38
 801c532:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801c534:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801c538:	e9c0 5500 	strd	r5, r5, [r0]
 801c53c:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801c540:	304c      	adds	r0, #76	; 0x4c
 801c542:	f00d fd15 	bl	8029f70 <memset>
 801c546:	2301      	movs	r3, #1
 801c548:	4620      	mov	r0, r4
 801c54a:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801c54e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801c552:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801c556:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801c55a:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801c55e:	f7e7 f943 	bl	80037e8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801c562:	4620      	mov	r0, r4
 801c564:	bd38      	pop	{r3, r4, r5, pc}

0801c566 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801c566:	b530      	push	{r4, r5, lr}
 801c568:	2500      	movs	r5, #0
 801c56a:	2401      	movs	r4, #1
 801c56c:	6843      	ldr	r3, [r0, #4]
 801c56e:	b913      	cbnz	r3, 801c576 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801c570:	6803      	ldr	r3, [r0, #0]
 801c572:	b313      	cbz	r3, 801c5ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801c574:	6043      	str	r3, [r0, #4]
 801c576:	7e03      	ldrb	r3, [r0, #24]
 801c578:	b143      	cbz	r3, 801c58c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801c57a:	6943      	ldr	r3, [r0, #20]
 801c57c:	b12b      	cbz	r3, 801c58a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c57e:	881a      	ldrh	r2, [r3, #0]
 801c580:	b11a      	cbz	r2, 801c58a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c582:	1c9a      	adds	r2, r3, #2
 801c584:	6142      	str	r2, [r0, #20]
 801c586:	8818      	ldrh	r0, [r3, #0]
 801c588:	bd30      	pop	{r4, r5, pc}
 801c58a:	7605      	strb	r5, [r0, #24]
 801c58c:	6843      	ldr	r3, [r0, #4]
 801c58e:	8819      	ldrh	r1, [r3, #0]
 801c590:	b199      	cbz	r1, 801c5ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801c592:	1c9a      	adds	r2, r3, #2
 801c594:	2902      	cmp	r1, #2
 801c596:	6042      	str	r2, [r0, #4]
 801c598:	d1f5      	bne.n	801c586 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801c59a:	7c03      	ldrb	r3, [r0, #16]
 801c59c:	2b01      	cmp	r3, #1
 801c59e:	d8e5      	bhi.n	801c56c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c5a0:	1c5a      	adds	r2, r3, #1
 801c5a2:	3302      	adds	r3, #2
 801c5a4:	7402      	strb	r2, [r0, #16]
 801c5a6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801c5aa:	6143      	str	r3, [r0, #20]
 801c5ac:	2b00      	cmp	r3, #0
 801c5ae:	d0dd      	beq.n	801c56c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c5b0:	881b      	ldrh	r3, [r3, #0]
 801c5b2:	2b00      	cmp	r3, #0
 801c5b4:	d0da      	beq.n	801c56c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c5b6:	7604      	strb	r4, [r0, #24]
 801c5b8:	e7d8      	b.n	801c56c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c5ba:	2000      	movs	r0, #0
 801c5bc:	e7e4      	b.n	801c588 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801c5be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801c5be:	b430      	push	{r4, r5}
 801c5c0:	6815      	ldr	r5, [r2, #0]
 801c5c2:	6085      	str	r5, [r0, #8]
 801c5c4:	6852      	ldr	r2, [r2, #4]
 801c5c6:	6443      	str	r3, [r0, #68]	; 0x44
 801c5c8:	60c2      	str	r2, [r0, #12]
 801c5ca:	2200      	movs	r2, #0
 801c5cc:	9b02      	ldr	r3, [sp, #8]
 801c5ce:	7402      	strb	r2, [r0, #16]
 801c5d0:	6001      	str	r1, [r0, #0]
 801c5d2:	6483      	str	r3, [r0, #72]	; 0x48
 801c5d4:	6042      	str	r2, [r0, #4]
 801c5d6:	6142      	str	r2, [r0, #20]
 801c5d8:	7602      	strb	r2, [r0, #24]
 801c5da:	8702      	strh	r2, [r0, #56]	; 0x38
 801c5dc:	8402      	strh	r2, [r0, #32]
 801c5de:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801c5e2:	bc30      	pop	{r4, r5}
 801c5e4:	f7e7 b900 	b.w	80037e8 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801c5e8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801c5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c5ea:	4605      	mov	r5, r0
 801c5ec:	4608      	mov	r0, r1
 801c5ee:	b1f1      	cbz	r1, 801c62e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801c5f0:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801c5f4:	460b      	mov	r3, r1
 801c5f6:	f101 0708 	add.w	r7, r1, #8
 801c5fa:	4622      	mov	r2, r4
 801c5fc:	6818      	ldr	r0, [r3, #0]
 801c5fe:	3308      	adds	r3, #8
 801c600:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801c604:	4626      	mov	r6, r4
 801c606:	42bb      	cmp	r3, r7
 801c608:	c603      	stmia	r6!, {r0, r1}
 801c60a:	4634      	mov	r4, r6
 801c60c:	d1f6      	bne.n	801c5fc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801c60e:	6818      	ldr	r0, [r3, #0]
 801c610:	6030      	str	r0, [r6, #0]
 801c612:	4610      	mov	r0, r2
 801c614:	889b      	ldrh	r3, [r3, #4]
 801c616:	80b3      	strh	r3, [r6, #4]
 801c618:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801c61c:	015b      	lsls	r3, r3, #5
 801c61e:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c622:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801c626:	430b      	orrs	r3, r1
 801c628:	425b      	negs	r3, r3
 801c62a:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801c62e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c630 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801c630:	b538      	push	{r3, r4, r5, lr}
 801c632:	460c      	mov	r4, r1
 801c634:	6811      	ldr	r1, [r2, #0]
 801c636:	4610      	mov	r0, r2
 801c638:	68cd      	ldr	r5, [r1, #12]
 801c63a:	4619      	mov	r1, r3
 801c63c:	47a8      	blx	r5
 801c63e:	2800      	cmp	r0, #0
 801c640:	bf08      	it	eq
 801c642:	4620      	moveq	r0, r4
 801c644:	bd38      	pop	{r3, r4, r5, pc}
	...

0801c648 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801c648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c64a:	4604      	mov	r4, r0
 801c64c:	4615      	mov	r5, r2
 801c64e:	4608      	mov	r0, r1
 801c650:	b93a      	cbnz	r2, 801c662 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801c652:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801c656:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801c65a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801c65e:	4628      	mov	r0, r5
 801c660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c662:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801c666:	8893      	ldrh	r3, [r2, #4]
 801c668:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801c66c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801c670:	79ee      	ldrb	r6, [r5, #7]
 801c672:	4316      	orrs	r6, r2
 801c674:	f46f 6263 	mvn.w	r2, #3632	; 0xe30
 801c678:	189a      	adds	r2, r3, r2
 801c67a:	b2b7      	uxth	r7, r6
 801c67c:	b291      	uxth	r1, r2
 801c67e:	291d      	cmp	r1, #29
 801c680:	f200 8084 	bhi.w	801c78c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801c684:	2201      	movs	r2, #1
 801c686:	10f6      	asrs	r6, r6, #3
 801c688:	408a      	lsls	r2, r1
 801c68a:	4978      	ldr	r1, [pc, #480]	; (801c86c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x224>)
 801c68c:	420a      	tst	r2, r1
 801c68e:	d12e      	bne.n	801c6ee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801c690:	f412 7f60 	tst.w	r2, #896	; 0x380
 801c694:	d07a      	beq.n	801c78c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801c696:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801c69a:	462b      	mov	r3, r5
 801c69c:	f105 0e08 	add.w	lr, r5, #8
 801c6a0:	4615      	mov	r5, r2
 801c6a2:	6818      	ldr	r0, [r3, #0]
 801c6a4:	3308      	adds	r3, #8
 801c6a6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801c6aa:	4694      	mov	ip, r2
 801c6ac:	4573      	cmp	r3, lr
 801c6ae:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801c6b2:	4662      	mov	r2, ip
 801c6b4:	d1f5      	bne.n	801c6a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801c6b6:	6818      	ldr	r0, [r3, #0]
 801c6b8:	f8cc 0000 	str.w	r0, [ip]
 801c6bc:	889b      	ldrh	r3, [r3, #4]
 801c6be:	f8ac 3004 	strh.w	r3, [ip, #4]
 801c6c2:	b2b3      	uxth	r3, r6
 801c6c4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801c6c8:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801c6cc:	1aca      	subs	r2, r1, r3
 801c6ce:	1bcf      	subs	r7, r1, r7
 801c6d0:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801c6d4:	b292      	uxth	r2, r2
 801c6d6:	1afb      	subs	r3, r7, r3
 801c6d8:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801c6dc:	10d2      	asrs	r2, r2, #3
 801c6de:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801c6e2:	4302      	orrs	r2, r0
 801c6e4:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801c6e8:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801c6ec:	e7b7      	b.n	801c65e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801c6ee:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801c6f0:	b92b      	cbnz	r3, 801c6fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb6>
 801c6f2:	4b5f      	ldr	r3, [pc, #380]	; (801c870 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x228>)
 801c6f4:	21c0      	movs	r1, #192	; 0xc0
 801c6f6:	4a5f      	ldr	r2, [pc, #380]	; (801c874 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x22c>)
 801c6f8:	485f      	ldr	r0, [pc, #380]	; (801c878 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x230>)
 801c6fa:	f00d fba9 	bl	8029e50 <__assert_func>
 801c6fe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801c700:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c704:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801c706:	f640 6333 	movw	r3, #3635	; 0xe33
 801c70a:	4299      	cmp	r1, r3
 801c70c:	d110      	bne.n	801c730 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xe8>
 801c70e:	6803      	ldr	r3, [r0, #0]
 801c710:	68db      	ldr	r3, [r3, #12]
 801c712:	4798      	blx	r3
 801c714:	7b41      	ldrb	r1, [r0, #13]
 801c716:	00cb      	lsls	r3, r1, #3
 801c718:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c71c:	7a03      	ldrb	r3, [r0, #8]
 801c71e:	0648      	lsls	r0, r1, #25
 801c720:	ea43 0302 	orr.w	r3, r3, r2
 801c724:	bf44      	itt	mi
 801c726:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c72a:	b21b      	sxthmi	r3, r3
 801c72c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c730:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801c734:	462a      	mov	r2, r5
 801c736:	f105 0c08 	add.w	ip, r5, #8
 801c73a:	443b      	add	r3, r7
 801c73c:	4433      	add	r3, r6
 801c73e:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801c742:	b29b      	uxth	r3, r3
 801c744:	4635      	mov	r5, r6
 801c746:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c74a:	6810      	ldr	r0, [r2, #0]
 801c74c:	3208      	adds	r2, #8
 801c74e:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801c752:	4637      	mov	r7, r6
 801c754:	4562      	cmp	r2, ip
 801c756:	c703      	stmia	r7!, {r0, r1}
 801c758:	463e      	mov	r6, r7
 801c75a:	d1f6      	bne.n	801c74a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 801c75c:	6810      	ldr	r0, [r2, #0]
 801c75e:	6038      	str	r0, [r7, #0]
 801c760:	8892      	ldrh	r2, [r2, #4]
 801c762:	80ba      	strh	r2, [r7, #4]
 801c764:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801c768:	10db      	asrs	r3, r3, #3
 801c76a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801c76e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c772:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c776:	4313      	orrs	r3, r2
 801c778:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801c77c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801c780:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801c784:	1a9b      	subs	r3, r3, r2
 801c786:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801c78a:	e768      	b.n	801c65e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801c78c:	f023 0204 	bic.w	r2, r3, #4
 801c790:	f640 611b 	movw	r1, #3611	; 0xe1b
 801c794:	428a      	cmp	r2, r1
 801c796:	d003      	beq.n	801c7a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x158>
 801c798:	f640 621d 	movw	r2, #3613	; 0xe1d
 801c79c:	4293      	cmp	r3, r2
 801c79e:	d120      	bne.n	801c7e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x19a>
 801c7a0:	3b01      	subs	r3, #1
 801c7a2:	4602      	mov	r2, r0
 801c7a4:	4629      	mov	r1, r5
 801c7a6:	4620      	mov	r0, r4
 801c7a8:	b29b      	uxth	r3, r3
 801c7aa:	f7ff ff41 	bl	801c630 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c7ae:	7b41      	ldrb	r1, [r0, #13]
 801c7b0:	00cb      	lsls	r3, r1, #3
 801c7b2:	0649      	lsls	r1, r1, #25
 801c7b4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c7b8:	7a03      	ldrb	r3, [r0, #8]
 801c7ba:	ea43 0302 	orr.w	r3, r3, r2
 801c7be:	bf44      	itt	mi
 801c7c0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c7c4:	b21b      	sxthmi	r3, r3
 801c7c6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c7ca:	7b6b      	ldrb	r3, [r5, #13]
 801c7cc:	7aaa      	ldrb	r2, [r5, #10]
 801c7ce:	005b      	lsls	r3, r3, #1
 801c7d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c7d4:	4313      	orrs	r3, r2
 801c7d6:	115a      	asrs	r2, r3, #5
 801c7d8:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801c7dc:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801c7e0:	e035      	b.n	801c84e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x206>
 801c7e2:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801c7e6:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801c7ea:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801c7ee:	7a2a      	ldrb	r2, [r5, #8]
 801c7f0:	ea42 0201 	orr.w	r2, r2, r1
 801c7f4:	f640 6109 	movw	r1, #3593	; 0xe09
 801c7f8:	bf1c      	itt	ne
 801c7fa:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801c7fe:	b212      	sxthne	r2, r2
 801c800:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801c804:	f023 0210 	bic.w	r2, r3, #16
 801c808:	428a      	cmp	r2, r1
 801c80a:	d003      	beq.n	801c814 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>
 801c80c:	f640 6213 	movw	r2, #3603	; 0xe13
 801c810:	4293      	cmp	r3, r2
 801c812:	d129      	bne.n	801c868 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x220>
 801c814:	7b6e      	ldrb	r6, [r5, #13]
 801c816:	4629      	mov	r1, r5
 801c818:	0076      	lsls	r6, r6, #1
 801c81a:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801c81e:	7aae      	ldrb	r6, [r5, #10]
 801c820:	4316      	orrs	r6, r2
 801c822:	f640 6213 	movw	r2, #3603	; 0xe13
 801c826:	4293      	cmp	r3, r2
 801c828:	4602      	mov	r2, r0
 801c82a:	4620      	mov	r0, r4
 801c82c:	bf16      	itet	ne
 801c82e:	f103 33ff 	addne.w	r3, r3, #4294967295
 801c832:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801c836:	b29b      	uxthne	r3, r3
 801c838:	f7ff fefa 	bl	801c630 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c83c:	7b43      	ldrb	r3, [r0, #13]
 801c83e:	7a82      	ldrb	r2, [r0, #10]
 801c840:	005b      	lsls	r3, r3, #1
 801c842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c846:	4313      	orrs	r3, r2
 801c848:	1af6      	subs	r6, r6, r3
 801c84a:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801c84e:	7b69      	ldrb	r1, [r5, #13]
 801c850:	00cb      	lsls	r3, r1, #3
 801c852:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c856:	7a2b      	ldrb	r3, [r5, #8]
 801c858:	4313      	orrs	r3, r2
 801c85a:	064a      	lsls	r2, r1, #25
 801c85c:	bf44      	itt	mi
 801c85e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c862:	b21b      	sxthmi	r3, r3
 801c864:	1bdb      	subs	r3, r3, r7
 801c866:	e73f      	b.n	801c6e8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa0>
 801c868:	2300      	movs	r3, #0
 801c86a:	e7b7      	b.n	801c7dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x194>
 801c86c:	3fc00079 	.word	0x3fc00079
 801c870:	0802d360 	.word	0x0802d360
 801c874:	08030fe7 	.word	0x08030fe7
 801c878:	0802d432 	.word	0x0802d432

0801c87c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801c87c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c880:	4604      	mov	r4, r0
 801c882:	b942      	cbnz	r2, 801c896 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801c884:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c888:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801c88c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801c890:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801c894:	e046      	b.n	801c924 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801c896:	7b51      	ldrb	r1, [r2, #13]
 801c898:	8893      	ldrh	r3, [r2, #4]
 801c89a:	010f      	lsls	r7, r1, #4
 801c89c:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801c8a0:	79d7      	ldrb	r7, [r2, #7]
 801c8a2:	4307      	orrs	r7, r0
 801c8a4:	2f04      	cmp	r7, #4
 801c8a6:	b2bd      	uxth	r5, r7
 801c8a8:	bfcc      	ite	gt
 801c8aa:	08bf      	lsrgt	r7, r7, #2
 801c8ac:	2701      	movle	r7, #1
 801c8ae:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801c8b2:	f200 80ab 	bhi.w	801ca0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x190>
 801c8b6:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801c8ba:	4283      	cmp	r3, r0
 801c8bc:	d216      	bcs.n	801c8ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c8be:	f240 605b 	movw	r0, #1627	; 0x65b
 801c8c2:	4283      	cmp	r3, r0
 801c8c4:	d859      	bhi.n	801c97a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xfe>
 801c8c6:	f240 6057 	movw	r0, #1623	; 0x657
 801c8ca:	4283      	cmp	r3, r0
 801c8cc:	d20e      	bcs.n	801c8ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c8ce:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801c8d2:	d24a      	bcs.n	801c96a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xee>
 801c8d4:	f240 604e 	movw	r0, #1614	; 0x64e
 801c8d8:	4283      	cmp	r3, r0
 801c8da:	d207      	bcs.n	801c8ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c8dc:	f240 601a 	movw	r0, #1562	; 0x61a
 801c8e0:	4283      	cmp	r3, r0
 801c8e2:	d02a      	beq.n	801c93a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c8e4:	d821      	bhi.n	801c92a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xae>
 801c8e6:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801c8ea:	d35b      	bcc.n	801c9a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c8ec:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801c8f0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c8f4:	f040 80d0 	bne.w	801ca98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801c8f8:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801c8fc:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c900:	f040 80ca 	bne.w	801ca98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21c>
 801c904:	00cb      	lsls	r3, r1, #3
 801c906:	0649      	lsls	r1, r1, #25
 801c908:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c90c:	7a13      	ldrb	r3, [r2, #8]
 801c90e:	ea43 0300 	orr.w	r3, r3, r0
 801c912:	bf44      	itt	mi
 801c914:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c918:	b21b      	sxthmi	r3, r3
 801c91a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c91e:	1b5d      	subs	r5, r3, r5
 801c920:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801c924:	4610      	mov	r0, r2
 801c926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c92a:	f240 604b 	movw	r0, #1611	; 0x64b
 801c92e:	4283      	cmp	r3, r0
 801c930:	d338      	bcc.n	801c9a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c932:	f240 604c 	movw	r0, #1612	; 0x64c
 801c936:	4283      	cmp	r3, r0
 801c938:	d9d8      	bls.n	801c8ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c93a:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801c93e:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801c942:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c946:	f040 80f2 	bne.w	801cb2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801c94a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c94e:	f040 80ee 	bne.w	801cb2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>
 801c952:	00cb      	lsls	r3, r1, #3
 801c954:	064e      	lsls	r6, r1, #25
 801c956:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c95a:	7a13      	ldrb	r3, [r2, #8]
 801c95c:	ea43 0300 	orr.w	r3, r3, r0
 801c960:	bf44      	itt	mi
 801c962:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c966:	b21b      	sxthmi	r3, r3
 801c968:	e7d9      	b.n	801c91e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa2>
 801c96a:	f240 6054 	movw	r0, #1620	; 0x654
 801c96e:	4283      	cmp	r3, r0
 801c970:	d8e3      	bhi.n	801c93a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c972:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801c976:	d9e0      	bls.n	801c93a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c978:	e7b8      	b.n	801c8ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c97a:	f240 6074 	movw	r0, #1652	; 0x674
 801c97e:	4283      	cmp	r3, r0
 801c980:	d0b4      	beq.n	801c8ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c982:	d82d      	bhi.n	801c9e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x164>
 801c984:	f240 605e 	movw	r0, #1630	; 0x65e
 801c988:	4283      	cmp	r3, r0
 801c98a:	d804      	bhi.n	801c996 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11a>
 801c98c:	f240 605d 	movw	r0, #1629	; 0x65d
 801c990:	4283      	cmp	r3, r0
 801c992:	d3d2      	bcc.n	801c93a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c994:	e7aa      	b.n	801c8ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c996:	f240 605f 	movw	r0, #1631	; 0x65f
 801c99a:	4283      	cmp	r3, r0
 801c99c:	d0cd      	beq.n	801c93a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801c99e:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801c9a2:	d0a3      	beq.n	801c8ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c9a4:	00cb      	lsls	r3, r1, #3
 801c9a6:	0649      	lsls	r1, r1, #25
 801c9a8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801c9ac:	7a13      	ldrb	r3, [r2, #8]
 801c9ae:	ea43 0300 	orr.w	r3, r3, r0
 801c9b2:	bf44      	itt	mi
 801c9b4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c9b8:	b21b      	sxthmi	r3, r3
 801c9ba:	1b5d      	subs	r5, r3, r5
 801c9bc:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801c9c0:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801c9c4:	7b53      	ldrb	r3, [r2, #13]
 801c9c6:	015b      	lsls	r3, r3, #5
 801c9c8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c9cc:	7993      	ldrb	r3, [r2, #6]
 801c9ce:	430b      	orrs	r3, r1
 801c9d0:	2105      	movs	r1, #5
 801c9d2:	005b      	lsls	r3, r3, #1
 801c9d4:	fb93 f3f1 	sdiv	r3, r3, r1
 801c9d8:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801c9dc:	440b      	add	r3, r1
 801c9de:	e757      	b.n	801c890 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801c9e0:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801c9e4:	4283      	cmp	r3, r0
 801c9e6:	d809      	bhi.n	801c9fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x180>
 801c9e8:	f240 60df 	movw	r0, #1759	; 0x6df
 801c9ec:	4283      	cmp	r3, r0
 801c9ee:	f4bf af7d 	bcs.w	801c8ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c9f2:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801c9f6:	2b05      	cmp	r3, #5
 801c9f8:	d8d4      	bhi.n	801c9a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c9fa:	e777      	b.n	801c8ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801c9fc:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801ca00:	4283      	cmp	r3, r0
 801ca02:	d09a      	beq.n	801c93a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ca04:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801ca08:	4283      	cmp	r3, r0
 801ca0a:	e7ca      	b.n	801c9a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x126>
 801ca0c:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801ca10:	d22b      	bcs.n	801ca6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ee>
 801ca12:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801ca16:	4283      	cmp	r3, r0
 801ca18:	d28f      	bcs.n	801c93a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ca1a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801ca1e:	4283      	cmp	r3, r0
 801ca20:	d816      	bhi.n	801ca50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d4>
 801ca22:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801ca26:	4283      	cmp	r3, r0
 801ca28:	f4bf af60 	bcs.w	801c8ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ca2c:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801ca30:	4283      	cmp	r3, r0
 801ca32:	d80a      	bhi.n	801ca4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1ce>
 801ca34:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801ca38:	4283      	cmp	r3, r0
 801ca3a:	f4bf af57 	bcs.w	801c8ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ca3e:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801ca42:	4283      	cmp	r3, r0
 801ca44:	f43f af79 	beq.w	801c93a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ca48:	e7ac      	b.n	801c9a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801ca4a:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801ca4e:	e7f8      	b.n	801ca42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c6>
 801ca50:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801ca54:	4283      	cmp	r3, r0
 801ca56:	d802      	bhi.n	801ca5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e2>
 801ca58:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801ca5c:	e798      	b.n	801c990 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x114>
 801ca5e:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801ca62:	4283      	cmp	r3, r0
 801ca64:	f47f af42 	bne.w	801c8ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ca68:	e767      	b.n	801c93a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ca6a:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801ca6e:	4283      	cmp	r3, r0
 801ca70:	f43f af63 	beq.w	801c93a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ca74:	d802      	bhi.n	801ca7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x200>
 801ca76:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801ca7a:	e7f2      	b.n	801ca62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e6>
 801ca7c:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801ca80:	4283      	cmp	r3, r0
 801ca82:	d805      	bhi.n	801ca90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x214>
 801ca84:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801ca88:	4283      	cmp	r3, r0
 801ca8a:	f4ff af2f 	bcc.w	801c8ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x70>
 801ca8e:	e754      	b.n	801c93a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xbe>
 801ca90:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801ca94:	4283      	cmp	r3, r0
 801ca96:	e7af      	b.n	801c9f8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17c>
 801ca98:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801ca9c:	4617      	mov	r7, r2
 801ca9e:	f102 0808 	add.w	r8, r2, #8
 801caa2:	4666      	mov	r6, ip
 801caa4:	6838      	ldr	r0, [r7, #0]
 801caa6:	3708      	adds	r7, #8
 801caa8:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801caac:	46e6      	mov	lr, ip
 801caae:	4547      	cmp	r7, r8
 801cab0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801cab4:	46f4      	mov	ip, lr
 801cab6:	d1f5      	bne.n	801caa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x228>
 801cab8:	6838      	ldr	r0, [r7, #0]
 801caba:	f8ce 0000 	str.w	r0, [lr]
 801cabe:	88b9      	ldrh	r1, [r7, #4]
 801cac0:	f8ae 1004 	strh.w	r1, [lr, #4]
 801cac4:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801cac8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801cacc:	d009      	beq.n	801cae2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801cace:	7b51      	ldrb	r1, [r2, #13]
 801cad0:	7992      	ldrb	r2, [r2, #6]
 801cad2:	0149      	lsls	r1, r1, #5
 801cad4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801cad8:	4311      	orrs	r1, r2
 801cada:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801cade:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801cae2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801cae6:	d00d      	beq.n	801cb04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x288>
 801cae8:	442b      	add	r3, r5
 801caea:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801caee:	b29b      	uxth	r3, r3
 801caf0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801caf4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801caf8:	10db      	asrs	r3, r3, #3
 801cafa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cafe:	4313      	orrs	r3, r2
 801cb00:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801cb04:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801cb08:	00cb      	lsls	r3, r1, #3
 801cb0a:	064f      	lsls	r7, r1, #25
 801cb0c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cb10:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801cb14:	ea43 0302 	orr.w	r3, r3, r2
 801cb18:	bf44      	itt	mi
 801cb1a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cb1e:	b21b      	sxthmi	r3, r3
 801cb20:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801cb24:	1b5d      	subs	r5, r3, r5
 801cb26:	4632      	mov	r2, r6
 801cb28:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801cb2c:	e6fa      	b.n	801c924 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa8>
 801cb2e:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801cb32:	4694      	mov	ip, r2
 801cb34:	f102 0908 	add.w	r9, r2, #8
 801cb38:	4676      	mov	r6, lr
 801cb3a:	f8dc 0000 	ldr.w	r0, [ip]
 801cb3e:	f10c 0c08 	add.w	ip, ip, #8
 801cb42:	f85c 1c04 	ldr.w	r1, [ip, #-4]
 801cb46:	46f0      	mov	r8, lr
 801cb48:	45cc      	cmp	ip, r9
 801cb4a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801cb4e:	46c6      	mov	lr, r8
 801cb50:	d1f3      	bne.n	801cb3a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2be>
 801cb52:	f8dc 0000 	ldr.w	r0, [ip]
 801cb56:	f8c8 0000 	str.w	r0, [r8]
 801cb5a:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 801cb5e:	f8a8 1004 	strh.w	r1, [r8, #4]
 801cb62:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801cb66:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801cb6a:	d009      	beq.n	801cb80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x304>
 801cb6c:	7b51      	ldrb	r1, [r2, #13]
 801cb6e:	7992      	ldrb	r2, [r2, #6]
 801cb70:	0149      	lsls	r1, r1, #5
 801cb72:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801cb76:	4311      	orrs	r1, r2
 801cb78:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801cb7c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801cb80:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801cb84:	d00d      	beq.n	801cba2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x326>
 801cb86:	1bdb      	subs	r3, r3, r7
 801cb88:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801cb8c:	b29b      	uxth	r3, r3
 801cb8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801cb92:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801cb96:	10db      	asrs	r3, r3, #3
 801cb98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cb9c:	4313      	orrs	r3, r2
 801cb9e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801cba2:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801cba6:	00cb      	lsls	r3, r1, #3
 801cba8:	0648      	lsls	r0, r1, #25
 801cbaa:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cbae:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801cbb2:	ea43 0302 	orr.w	r3, r3, r2
 801cbb6:	bf44      	itt	mi
 801cbb8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cbbc:	b21b      	sxthmi	r3, r3
 801cbbe:	e7b1      	b.n	801cb24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2a8>

0801cbc0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801cbc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cbc4:	461e      	mov	r6, r3
 801cbc6:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801cbc8:	4604      	mov	r4, r0
 801cbca:	4617      	mov	r7, r2
 801cbcc:	b92b      	cbnz	r3, 801cbda <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1a>
 801cbce:	4b25      	ldr	r3, [pc, #148]	; (801cc64 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa4>)
 801cbd0:	21c0      	movs	r1, #192	; 0xc0
 801cbd2:	4a25      	ldr	r2, [pc, #148]	; (801cc68 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xa8>)
 801cbd4:	4825      	ldr	r0, [pc, #148]	; (801cc6c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0xac>)
 801cbd6:	f00d f93b 	bl	8029e50 <__assert_func>
 801cbda:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801cbdc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cbe0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801cbe4:	f7e6 fdbe 	bl	8003764 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801cbe8:	4605      	mov	r5, r0
 801cbea:	b918      	cbnz	r0, 801cbf4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x34>
 801cbec:	6030      	str	r0, [r6, #0]
 801cbee:	4628      	mov	r0, r5
 801cbf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cbf4:	683b      	ldr	r3, [r7, #0]
 801cbf6:	4601      	mov	r1, r0
 801cbf8:	4638      	mov	r0, r7
 801cbfa:	68db      	ldr	r3, [r3, #12]
 801cbfc:	4798      	blx	r3
 801cbfe:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801cc02:	4602      	mov	r2, r0
 801cc04:	6030      	str	r0, [r6, #0]
 801cc06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cc0a:	d213      	bcs.n	801cc34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x74>
 801cc0c:	4643      	mov	r3, r8
 801cc0e:	4639      	mov	r1, r7
 801cc10:	4620      	mov	r0, r4
 801cc12:	f7ff fe33 	bl	801c87c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801cc16:	6030      	str	r0, [r6, #0]
 801cc18:	6833      	ldr	r3, [r6, #0]
 801cc1a:	b143      	cbz	r3, 801cc2e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x6e>
 801cc1c:	7b5a      	ldrb	r2, [r3, #13]
 801cc1e:	7a9b      	ldrb	r3, [r3, #10]
 801cc20:	0052      	lsls	r2, r2, #1
 801cc22:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801cc26:	4313      	orrs	r3, r2
 801cc28:	bf0c      	ite	eq
 801cc2a:	2301      	moveq	r3, #1
 801cc2c:	2300      	movne	r3, #0
 801cc2e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801cc32:	e7dc      	b.n	801cbee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>
 801cc34:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801cc38:	b29b      	uxth	r3, r3
 801cc3a:	2b7f      	cmp	r3, #127	; 0x7f
 801cc3c:	d804      	bhi.n	801cc48 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x88>
 801cc3e:	4639      	mov	r1, r7
 801cc40:	4620      	mov	r0, r4
 801cc42:	f7ff fd01 	bl	801c648 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801cc46:	e7e6      	b.n	801cc16 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801cc48:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801cc4c:	2b00      	cmp	r3, #0
 801cc4e:	d0e3      	beq.n	801cc18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801cc50:	f640 1302 	movw	r3, #2306	; 0x902
 801cc54:	429d      	cmp	r5, r3
 801cc56:	d1df      	bne.n	801cc18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x58>
 801cc58:	4601      	mov	r1, r0
 801cc5a:	4620      	mov	r0, r4
 801cc5c:	f7ff fcc4 	bl	801c5e8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801cc60:	e7d9      	b.n	801cc16 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x56>
 801cc62:	bf00      	nop
 801cc64:	0802d360 	.word	0x0802d360
 801cc68:	08030fe7 	.word	0x08030fe7
 801cc6c:	0802d432 	.word	0x0802d432

0801cc70 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801cc70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cc74:	461e      	mov	r6, r3
 801cc76:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 801cc78:	4604      	mov	r4, r0
 801cc7a:	4617      	mov	r7, r2
 801cc7c:	b92b      	cbnz	r3, 801cc8a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1a>
 801cc7e:	4b26      	ldr	r3, [pc, #152]	; (801cd18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xa8>)
 801cc80:	21c0      	movs	r1, #192	; 0xc0
 801cc82:	4a26      	ldr	r2, [pc, #152]	; (801cd1c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xac>)
 801cc84:	4826      	ldr	r0, [pc, #152]	; (801cd20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0xb0>)
 801cc86:	f00d f8e3 	bl	8029e50 <__assert_func>
 801cc8a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801cc8c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cc90:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801cc94:	f7e6 fd66 	bl	8003764 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801cc98:	4605      	mov	r5, r0
 801cc9a:	b918      	cbnz	r0, 801cca4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x34>
 801cc9c:	6030      	str	r0, [r6, #0]
 801cc9e:	4628      	mov	r0, r5
 801cca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cca4:	683b      	ldr	r3, [r7, #0]
 801cca6:	4601      	mov	r1, r0
 801cca8:	4638      	mov	r0, r7
 801ccaa:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801ccae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801ccb2:	47c8      	blx	r9
 801ccb4:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801ccb8:	4602      	mov	r2, r0
 801ccba:	6030      	str	r0, [r6, #0]
 801ccbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ccc0:	d213      	bcs.n	801ccea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7a>
 801ccc2:	4643      	mov	r3, r8
 801ccc4:	4639      	mov	r1, r7
 801ccc6:	4620      	mov	r0, r4
 801ccc8:	f7ff fdd8 	bl	801c87c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801cccc:	6030      	str	r0, [r6, #0]
 801ccce:	6833      	ldr	r3, [r6, #0]
 801ccd0:	b143      	cbz	r3, 801cce4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x74>
 801ccd2:	7b5a      	ldrb	r2, [r3, #13]
 801ccd4:	7a9b      	ldrb	r3, [r3, #10]
 801ccd6:	0052      	lsls	r2, r2, #1
 801ccd8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801ccdc:	4313      	orrs	r3, r2
 801ccde:	bf0c      	ite	eq
 801cce0:	2301      	moveq	r3, #1
 801cce2:	2300      	movne	r3, #0
 801cce4:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801cce8:	e7d9      	b.n	801cc9e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x2e>
 801ccea:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801ccee:	b29b      	uxth	r3, r3
 801ccf0:	2b7f      	cmp	r3, #127	; 0x7f
 801ccf2:	d804      	bhi.n	801ccfe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x8e>
 801ccf4:	4639      	mov	r1, r7
 801ccf6:	4620      	mov	r0, r4
 801ccf8:	f7ff fca6 	bl	801c648 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801ccfc:	e7e6      	b.n	801cccc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801ccfe:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801cd02:	2b00      	cmp	r3, #0
 801cd04:	d0e3      	beq.n	801ccce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801cd06:	f640 1302 	movw	r3, #2306	; 0x902
 801cd0a:	429d      	cmp	r5, r3
 801cd0c:	d1df      	bne.n	801ccce <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801cd0e:	4601      	mov	r1, r0
 801cd10:	4620      	mov	r0, r4
 801cd12:	f7ff fc69 	bl	801c5e8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801cd16:	e7d9      	b.n	801cccc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5c>
 801cd18:	0802d360 	.word	0x0802d360
 801cd1c:	08030fe7 	.word	0x08030fe7
 801cd20:	0802d432 	.word	0x0802d432

0801cd24 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801cd24:	b510      	push	{r4, lr}
 801cd26:	4604      	mov	r4, r0
 801cd28:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801cd2c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801cd2e:	b9d9      	cbnz	r1, 801cd68 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x44>
 801cd30:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801cd32:	2b0a      	cmp	r3, #10
 801cd34:	d037      	beq.n	801cda6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801cd36:	4620      	mov	r0, r4
 801cd38:	f7ff fc15 	bl	801c566 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801cd3c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801cd3e:	2b09      	cmp	r3, #9
 801cd40:	d906      	bls.n	801cd50 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801cd42:	4b19      	ldr	r3, [pc, #100]	; (801cda8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x84>)
 801cd44:	f44f 7182 	mov.w	r1, #260	; 0x104
 801cd48:	4a18      	ldr	r2, [pc, #96]	; (801cdac <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x88>)
 801cd4a:	4819      	ldr	r0, [pc, #100]	; (801cdb0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8c>)
 801cd4c:	f00d f880 	bl	8029e50 <__assert_func>
 801cd50:	1c5a      	adds	r2, r3, #1
 801cd52:	8722      	strh	r2, [r4, #56]	; 0x38
 801cd54:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801cd56:	4413      	add	r3, r2
 801cd58:	b29b      	uxth	r3, r3
 801cd5a:	2b09      	cmp	r3, #9
 801cd5c:	bf88      	it	hi
 801cd5e:	3b0a      	subhi	r3, #10
 801cd60:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cd64:	8458      	strh	r0, [r3, #34]	; 0x22
 801cd66:	e7e3      	b.n	801cd30 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0xc>
 801cd68:	2b0a      	cmp	r3, #10
 801cd6a:	d01c      	beq.n	801cda6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x82>
 801cd6c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801cd6e:	3901      	subs	r1, #1
 801cd70:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801cd74:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801cd76:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801cd7a:	1c51      	adds	r1, r2, #1
 801cd7c:	b289      	uxth	r1, r1
 801cd7e:	2901      	cmp	r1, #1
 801cd80:	bf8a      	itet	hi
 801cd82:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801cd86:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801cd88:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801cd8a:	2b09      	cmp	r3, #9
 801cd8c:	d8d9      	bhi.n	801cd42 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x1e>
 801cd8e:	1c5a      	adds	r2, r3, #1
 801cd90:	8722      	strh	r2, [r4, #56]	; 0x38
 801cd92:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801cd94:	4413      	add	r3, r2
 801cd96:	b29b      	uxth	r3, r3
 801cd98:	2b09      	cmp	r3, #9
 801cd9a:	bf88      	it	hi
 801cd9c:	3b0a      	subhi	r3, #10
 801cd9e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cda2:	8458      	strh	r0, [r3, #34]	; 0x22
 801cda4:	e7c0      	b.n	801cd28 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801cda6:	bd10      	pop	{r4, pc}
 801cda8:	08030db8 	.word	0x08030db8
 801cdac:	0803113d 	.word	0x0803113d
 801cdb0:	0802d432 	.word	0x0802d432

0801cdb4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801cdb4:	b538      	push	{r3, r4, r5, lr}
 801cdb6:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801cdb8:	4604      	mov	r4, r0
 801cdba:	b92a      	cbnz	r2, 801cdc8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801cdbc:	4b13      	ldr	r3, [pc, #76]	; (801ce0c <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801cdbe:	21d5      	movs	r1, #213	; 0xd5
 801cdc0:	4a13      	ldr	r2, [pc, #76]	; (801ce10 <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801cdc2:	4814      	ldr	r0, [pc, #80]	; (801ce14 <_ZN8touchgfx12TextProvider11getNextCharEv+0x60>)
 801cdc4:	f00d f844 	bl	8029e50 <__assert_func>
 801cdc8:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801cdca:	3a01      	subs	r2, #1
 801cdcc:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801cdd0:	8c4d      	ldrh	r5, [r1, #34]	; 0x22
 801cdd2:	8702      	strh	r2, [r0, #56]	; 0x38
 801cdd4:	1c5a      	adds	r2, r3, #1
 801cdd6:	b292      	uxth	r2, r2
 801cdd8:	2a09      	cmp	r2, #9
 801cdda:	bf8a      	itet	hi
 801cddc:	3b09      	subhi	r3, #9
 801cdde:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801cde0:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801cde2:	f7ff ff9f 	bl	801cd24 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801cde6:	8c23      	ldrh	r3, [r4, #32]
 801cde8:	2b01      	cmp	r3, #1
 801cdea:	bf9c      	itt	ls
 801cdec:	3301      	addls	r3, #1
 801cdee:	8423      	strhls	r3, [r4, #32]
 801cdf0:	8be3      	ldrh	r3, [r4, #30]
 801cdf2:	b90b      	cbnz	r3, 801cdf8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x44>
 801cdf4:	2302      	movs	r3, #2
 801cdf6:	83e3      	strh	r3, [r4, #30]
 801cdf8:	8be3      	ldrh	r3, [r4, #30]
 801cdfa:	4628      	mov	r0, r5
 801cdfc:	3b01      	subs	r3, #1
 801cdfe:	b29b      	uxth	r3, r3
 801ce00:	83e3      	strh	r3, [r4, #30]
 801ce02:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ce06:	8365      	strh	r5, [r4, #26]
 801ce08:	bd38      	pop	{r3, r4, r5, pc}
 801ce0a:	bf00      	nop
 801ce0c:	0802d360 	.word	0x0802d360
 801ce10:	08031092 	.word	0x08031092
 801ce14:	0802d432 	.word	0x0802d432

0801ce18 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801ce18:	428a      	cmp	r2, r1
 801ce1a:	b538      	push	{r3, r4, r5, lr}
 801ce1c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801ce1e:	d90c      	bls.n	801ce3a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801ce20:	b92c      	cbnz	r4, 801ce2e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x16>
 801ce22:	4b1c      	ldr	r3, [pc, #112]	; (801ce94 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x7c>)
 801ce24:	21e1      	movs	r1, #225	; 0xe1
 801ce26:	4a1c      	ldr	r2, [pc, #112]	; (801ce98 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x80>)
 801ce28:	481c      	ldr	r0, [pc, #112]	; (801ce9c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>)
 801ce2a:	f00d f811 	bl	8029e50 <__assert_func>
 801ce2e:	3c01      	subs	r4, #1
 801ce30:	4b1b      	ldr	r3, [pc, #108]	; (801cea0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x88>)
 801ce32:	4a1c      	ldr	r2, [pc, #112]	; (801cea4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8c>)
 801ce34:	21c5      	movs	r1, #197	; 0xc5
 801ce36:	8704      	strh	r4, [r0, #56]	; 0x38
 801ce38:	e7f6      	b.n	801ce28 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801ce3a:	428c      	cmp	r4, r1
 801ce3c:	d203      	bcs.n	801ce46 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x2e>
 801ce3e:	4b1a      	ldr	r3, [pc, #104]	; (801cea8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x90>)
 801ce40:	21cb      	movs	r1, #203	; 0xcb
 801ce42:	4a1a      	ldr	r2, [pc, #104]	; (801ceac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x94>)
 801ce44:	e7f0      	b.n	801ce28 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801ce46:	1a64      	subs	r4, r4, r1
 801ce48:	250a      	movs	r5, #10
 801ce4a:	8704      	strh	r4, [r0, #56]	; 0x38
 801ce4c:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 801ce4e:	4421      	add	r1, r4
 801ce50:	b289      	uxth	r1, r1
 801ce52:	2909      	cmp	r1, #9
 801ce54:	bf88      	it	hi
 801ce56:	390a      	subhi	r1, #10
 801ce58:	86c1      	strh	r1, [r0, #54]	; 0x36
 801ce5a:	b1ba      	cbz	r2, 801ce8c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x74>
 801ce5c:	3a01      	subs	r2, #1
 801ce5e:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801ce60:	b292      	uxth	r2, r2
 801ce62:	2909      	cmp	r1, #9
 801ce64:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801ce68:	d903      	bls.n	801ce72 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x5a>
 801ce6a:	4b11      	ldr	r3, [pc, #68]	; (801ceb0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>)
 801ce6c:	21e6      	movs	r1, #230	; 0xe6
 801ce6e:	4a11      	ldr	r2, [pc, #68]	; (801ceb4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9c>)
 801ce70:	e7da      	b.n	801ce28 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x10>
 801ce72:	3101      	adds	r1, #1
 801ce74:	8701      	strh	r1, [r0, #56]	; 0x38
 801ce76:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801ce78:	b901      	cbnz	r1, 801ce7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x64>
 801ce7a:	86c5      	strh	r5, [r0, #54]	; 0x36
 801ce7c:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801ce7e:	3901      	subs	r1, #1
 801ce80:	b289      	uxth	r1, r1
 801ce82:	86c1      	strh	r1, [r0, #54]	; 0x36
 801ce84:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801ce88:	844c      	strh	r4, [r1, #34]	; 0x22
 801ce8a:	e7e6      	b.n	801ce5a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x42>
 801ce8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ce90:	f7ff bf48 	b.w	801cd24 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801ce94:	0802d360 	.word	0x0802d360
 801ce98:	08030e6b 	.word	0x08030e6b
 801ce9c:	0802d432 	.word	0x0802d432
 801cea0:	0802d45e 	.word	0x0802d45e
 801cea4:	08030f15 	.word	0x08030f15
 801cea8:	08030dc4 	.word	0x08030dc4
 801ceac:	080311ec 	.word	0x080311ec
 801ceb0:	08030dd0 	.word	0x08030dd0
 801ceb4:	08030de3 	.word	0x08030de3

0801ceb8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801ceb8:	3a01      	subs	r2, #1
 801ceba:	b570      	push	{r4, r5, r6, lr}
 801cebc:	b292      	uxth	r2, r2
 801cebe:	f64f 76ff 	movw	r6, #65535	; 0xffff
 801cec2:	42b2      	cmp	r2, r6
 801cec4:	d019      	beq.n	801cefa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801cec6:	8c04      	ldrh	r4, [r0, #32]
 801cec8:	f831 5b02 	ldrh.w	r5, [r1], #2
 801cecc:	4294      	cmp	r4, r2
 801cece:	d805      	bhi.n	801cedc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x24>
 801ced0:	4b19      	ldr	r3, [pc, #100]	; (801cf38 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801ced2:	4a1a      	ldr	r2, [pc, #104]	; (801cf3c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x84>)
 801ced4:	21c5      	movs	r1, #197	; 0xc5
 801ced6:	481a      	ldr	r0, [pc, #104]	; (801cf40 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x88>)
 801ced8:	f00c ffba 	bl	8029e50 <__assert_func>
 801cedc:	8bc4      	ldrh	r4, [r0, #30]
 801cede:	4414      	add	r4, r2
 801cee0:	3a01      	subs	r2, #1
 801cee2:	b2a4      	uxth	r4, r4
 801cee4:	b292      	uxth	r2, r2
 801cee6:	2c01      	cmp	r4, #1
 801cee8:	bf88      	it	hi
 801ceea:	3c02      	subhi	r4, #2
 801ceec:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801cef0:	8b64      	ldrh	r4, [r4, #26]
 801cef2:	42ac      	cmp	r4, r5
 801cef4:	d0e5      	beq.n	801cec2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xa>
 801cef6:	2000      	movs	r0, #0
 801cef8:	bd70      	pop	{r4, r5, r6, pc}
 801cefa:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801cefe:	2400      	movs	r4, #0
 801cf00:	4413      	add	r3, r2
 801cf02:	b2a2      	uxth	r2, r4
 801cf04:	429a      	cmp	r2, r3
 801cf06:	da14      	bge.n	801cf32 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7a>
 801cf08:	8f06      	ldrh	r6, [r0, #56]	; 0x38
 801cf0a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801cf0e:	4296      	cmp	r6, r2
 801cf10:	d802      	bhi.n	801cf18 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x60>
 801cf12:	4b09      	ldr	r3, [pc, #36]	; (801cf38 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x80>)
 801cf14:	4a0b      	ldr	r2, [pc, #44]	; (801cf44 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x8c>)
 801cf16:	e7dd      	b.n	801ced4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x1c>
 801cf18:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801cf1a:	3401      	adds	r4, #1
 801cf1c:	4432      	add	r2, r6
 801cf1e:	b292      	uxth	r2, r2
 801cf20:	2a09      	cmp	r2, #9
 801cf22:	bf88      	it	hi
 801cf24:	3a0a      	subhi	r2, #10
 801cf26:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801cf2a:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801cf2c:	42aa      	cmp	r2, r5
 801cf2e:	d0e8      	beq.n	801cf02 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4a>
 801cf30:	e7e1      	b.n	801cef6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x3e>
 801cf32:	2001      	movs	r0, #1
 801cf34:	e7e0      	b.n	801cef8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x40>
 801cf36:	bf00      	nop
 801cf38:	0802d45e 	.word	0x0802d45e
 801cf3c:	08031270 	.word	0x08031270
 801cf40:	0802d432 	.word	0x0802d432
 801cf44:	08030f15 	.word	0x08030f15

0801cf48 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801cf48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf4c:	4605      	mov	r5, r0
 801cf4e:	4616      	mov	r6, r2
 801cf50:	1c8c      	adds	r4, r1, #2
 801cf52:	8809      	ldrh	r1, [r1, #0]
 801cf54:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801cf58:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801cf5c:	42b3      	cmp	r3, r6
 801cf5e:	d124      	bne.n	801cfaa <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801cf60:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801cf64:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801cf68:	f001 070f 	and.w	r7, r1, #15
 801cf6c:	4652      	mov	r2, sl
 801cf6e:	f8cd 8000 	str.w	r8, [sp]
 801cf72:	464b      	mov	r3, r9
 801cf74:	4621      	mov	r1, r4
 801cf76:	4628      	mov	r0, r5
 801cf78:	f7ff ff9e 	bl	801ceb8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801cf7c:	4683      	mov	fp, r0
 801cf7e:	b168      	cbz	r0, 801cf9c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801cf80:	eb0a 0109 	add.w	r1, sl, r9
 801cf84:	463a      	mov	r2, r7
 801cf86:	4628      	mov	r0, r5
 801cf88:	4441      	add	r1, r8
 801cf8a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801cf8e:	4649      	mov	r1, r9
 801cf90:	f7ff ff42 	bl	801ce18 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801cf94:	4658      	mov	r0, fp
 801cf96:	b003      	add	sp, #12
 801cf98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf9c:	eb07 010a 	add.w	r1, r7, sl
 801cfa0:	4449      	add	r1, r9
 801cfa2:	4441      	add	r1, r8
 801cfa4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801cfa8:	e7d2      	b.n	801cf50 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801cfaa:	f04f 0b00 	mov.w	fp, #0
 801cfae:	e7f1      	b.n	801cf94 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801cfb0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801cfb0:	b570      	push	{r4, r5, r6, lr}
 801cfb2:	8810      	ldrh	r0, [r2, #0]
 801cfb4:	4298      	cmp	r0, r3
 801cfb6:	d817      	bhi.n	801cfe8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cfb8:	1e48      	subs	r0, r1, #1
 801cfba:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801cfbe:	4298      	cmp	r0, r3
 801cfc0:	d312      	bcc.n	801cfe8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cfc2:	2400      	movs	r4, #0
 801cfc4:	428c      	cmp	r4, r1
 801cfc6:	d20f      	bcs.n	801cfe8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801cfc8:	1860      	adds	r0, r4, r1
 801cfca:	1040      	asrs	r0, r0, #1
 801cfcc:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801cfd0:	0085      	lsls	r5, r0, #2
 801cfd2:	42b3      	cmp	r3, r6
 801cfd4:	d902      	bls.n	801cfdc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801cfd6:	3001      	adds	r0, #1
 801cfd8:	b284      	uxth	r4, r0
 801cfda:	e7f3      	b.n	801cfc4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801cfdc:	d201      	bcs.n	801cfe2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801cfde:	b281      	uxth	r1, r0
 801cfe0:	e7f0      	b.n	801cfc4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801cfe2:	442a      	add	r2, r5
 801cfe4:	8850      	ldrh	r0, [r2, #2]
 801cfe6:	bd70      	pop	{r4, r5, r6, pc}
 801cfe8:	2000      	movs	r0, #0
 801cfea:	e7fc      	b.n	801cfe6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801cfec <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801cfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cff0:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801cff2:	4604      	mov	r4, r0
 801cff4:	260b      	movs	r6, #11
 801cff6:	886f      	ldrh	r7, [r5, #2]
 801cff8:	087f      	lsrs	r7, r7, #1
 801cffa:	3e01      	subs	r6, #1
 801cffc:	d01b      	beq.n	801d036 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801cffe:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d000:	b92b      	cbnz	r3, 801d00e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x22>
 801d002:	4b0e      	ldr	r3, [pc, #56]	; (801d03c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x50>)
 801d004:	21c0      	movs	r1, #192	; 0xc0
 801d006:	4a0e      	ldr	r2, [pc, #56]	; (801d040 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x54>)
 801d008:	480e      	ldr	r0, [pc, #56]	; (801d044 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x58>)
 801d00a:	f00c ff21 	bl	8029e50 <__assert_func>
 801d00e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801d010:	462a      	mov	r2, r5
 801d012:	4639      	mov	r1, r7
 801d014:	4620      	mov	r0, r4
 801d016:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d01a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801d01e:	4643      	mov	r3, r8
 801d020:	f7ff ffc6 	bl	801cfb0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801d024:	b138      	cbz	r0, 801d036 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x4a>
 801d026:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801d02a:	4642      	mov	r2, r8
 801d02c:	4620      	mov	r0, r4
 801d02e:	f7ff ff8b 	bl	801cf48 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801d032:	2800      	cmp	r0, #0
 801d034:	d1e1      	bne.n	801cffa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801d036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d03a:	bf00      	nop
 801d03c:	0802d360 	.word	0x0802d360
 801d040:	08030fe7 	.word	0x08030fe7
 801d044:	0802d432 	.word	0x0802d432

0801d048 <_ZN8touchgfx8ceil28_4El>:
 801d048:	f110 030f 	adds.w	r3, r0, #15
 801d04c:	d401      	bmi.n	801d052 <_ZN8touchgfx8ceil28_4El+0xa>
 801d04e:	1118      	asrs	r0, r3, #4
 801d050:	4770      	bx	lr
 801d052:	2210      	movs	r2, #16
 801d054:	f1c0 0001 	rsb	r0, r0, #1
 801d058:	fb93 f3f2 	sdiv	r3, r3, r2
 801d05c:	f010 000f 	ands.w	r0, r0, #15
 801d060:	bf18      	it	ne
 801d062:	2001      	movne	r0, #1
 801d064:	1a18      	subs	r0, r3, r0
 801d066:	4770      	bx	lr

0801d068 <_ZN8touchgfx11floorDivModEllRlS0_>:
 801d068:	2900      	cmp	r1, #0
 801d06a:	b538      	push	{r3, r4, r5, lr}
 801d06c:	dc05      	bgt.n	801d07a <_ZN8touchgfx11floorDivModEllRlS0_+0x12>
 801d06e:	4b0f      	ldr	r3, [pc, #60]	; (801d0ac <_ZN8touchgfx11floorDivModEllRlS0_+0x44>)
 801d070:	21f7      	movs	r1, #247	; 0xf7
 801d072:	4a0f      	ldr	r2, [pc, #60]	; (801d0b0 <_ZN8touchgfx11floorDivModEllRlS0_+0x48>)
 801d074:	480f      	ldr	r0, [pc, #60]	; (801d0b4 <_ZN8touchgfx11floorDivModEllRlS0_+0x4c>)
 801d076:	f00c feeb 	bl	8029e50 <__assert_func>
 801d07a:	2800      	cmp	r0, #0
 801d07c:	db06      	blt.n	801d08c <_ZN8touchgfx11floorDivModEllRlS0_+0x24>
 801d07e:	fb90 f4f1 	sdiv	r4, r0, r1
 801d082:	fb01 0114 	mls	r1, r1, r4, r0
 801d086:	6014      	str	r4, [r2, #0]
 801d088:	6019      	str	r1, [r3, #0]
 801d08a:	bd38      	pop	{r3, r4, r5, pc}
 801d08c:	4240      	negs	r0, r0
 801d08e:	fb90 f4f1 	sdiv	r4, r0, r1
 801d092:	4265      	negs	r5, r4
 801d094:	fb01 0014 	mls	r0, r1, r4, r0
 801d098:	6015      	str	r5, [r2, #0]
 801d09a:	6018      	str	r0, [r3, #0]
 801d09c:	2800      	cmp	r0, #0
 801d09e:	d0f4      	beq.n	801d08a <_ZN8touchgfx11floorDivModEllRlS0_+0x22>
 801d0a0:	6810      	ldr	r0, [r2, #0]
 801d0a2:	3801      	subs	r0, #1
 801d0a4:	6010      	str	r0, [r2, #0]
 801d0a6:	6818      	ldr	r0, [r3, #0]
 801d0a8:	1a09      	subs	r1, r1, r0
 801d0aa:	e7ed      	b.n	801d088 <_ZN8touchgfx11floorDivModEllRlS0_+0x20>
 801d0ac:	08031341 	.word	0x08031341
 801d0b0:	08031380 	.word	0x08031380
 801d0b4:	08031351 	.word	0x08031351

0801d0b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801d0b8:	b570      	push	{r4, r5, r6, lr}
 801d0ba:	694a      	ldr	r2, [r1, #20]
 801d0bc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801d0be:	684b      	ldr	r3, [r1, #4]
 801d0c0:	1b54      	subs	r4, r2, r5
 801d0c2:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801d0c4:	f000 8106 	beq.w	801d2d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801d0c8:	1b9b      	subs	r3, r3, r6
 801d0ca:	d003      	beq.n	801d0d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d0cc:	4363      	muls	r3, r4
 801d0ce:	2210      	movs	r2, #16
 801d0d0:	fb93 f3f2 	sdiv	r3, r3, r2
 801d0d4:	680c      	ldr	r4, [r1, #0]
 801d0d6:	698a      	ldr	r2, [r1, #24]
 801d0d8:	1b65      	subs	r5, r4, r5
 801d0da:	f000 80fd 	beq.w	801d2d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801d0de:	1b92      	subs	r2, r2, r6
 801d0e0:	d003      	beq.n	801d0ea <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d0e2:	436a      	muls	r2, r5
 801d0e4:	2410      	movs	r4, #16
 801d0e6:	fb92 f2f4 	sdiv	r2, r2, r4
 801d0ea:	1a9b      	subs	r3, r3, r2
 801d0ec:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801d314 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801d0f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d0f4:	460a      	mov	r2, r1
 801d0f6:	ee07 3a90 	vmov	s15, r3
 801d0fa:	f100 040c 	add.w	r4, r0, #12
 801d0fe:	4603      	mov	r3, r0
 801d100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d104:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d108:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801d10c:	eeb1 6a43 	vneg.f32	s12, s6
 801d110:	edd2 7a02 	vldr	s15, [r2, #8]
 801d114:	3214      	adds	r2, #20
 801d116:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801d11a:	ece3 6a01 	vstmia	r3!, {s13}
 801d11e:	429c      	cmp	r4, r3
 801d120:	ed52 7a02 	vldr	s15, [r2, #-8]
 801d124:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d128:	edc3 7a02 	vstr	s15, [r3, #8]
 801d12c:	ed52 7a01 	vldr	s15, [r2, #-4]
 801d130:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d134:	edc3 7a05 	vstr	s15, [r3, #20]
 801d138:	d1ea      	bne.n	801d110 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801d13a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d13c:	698b      	ldr	r3, [r1, #24]
 801d13e:	edd0 4a02 	vldr	s9, [r0, #8]
 801d142:	1a9b      	subs	r3, r3, r2
 801d144:	edd0 3a00 	vldr	s7, [r0]
 801d148:	edd0 6a01 	vldr	s13, [r0, #4]
 801d14c:	ee07 3a90 	vmov	s15, r3
 801d150:	684b      	ldr	r3, [r1, #4]
 801d152:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801d156:	ed90 5a05 	vldr	s10, [r0, #20]
 801d15a:	1a9b      	subs	r3, r3, r2
 801d15c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d160:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801d164:	ed90 2a03 	vldr	s4, [r0, #12]
 801d168:	ee07 3a10 	vmov	s14, r3
 801d16c:	edd0 5a04 	vldr	s11, [r0, #16]
 801d170:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d174:	ed90 1a07 	vldr	s2, [r0, #28]
 801d178:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d17c:	edd0 2a06 	vldr	s5, [r0, #24]
 801d180:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801d184:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801d188:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d18c:	ee32 5a45 	vsub.f32	s10, s4, s10
 801d190:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d194:	ee67 7a83 	vmul.f32	s15, s15, s6
 801d198:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801d19c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d19e:	694a      	ldr	r2, [r1, #20]
 801d1a0:	1b13      	subs	r3, r2, r4
 801d1a2:	ee07 3a10 	vmov	s14, r3
 801d1a6:	680b      	ldr	r3, [r1, #0]
 801d1a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d1ac:	1b1b      	subs	r3, r3, r4
 801d1ae:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d1b2:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801d1b6:	ee07 3a10 	vmov	s14, r3
 801d1ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d1be:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d1c2:	eee6 4a87 	vfma.f32	s9, s13, s14
 801d1c6:	ee64 4a86 	vmul.f32	s9, s9, s12
 801d1ca:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801d1ce:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d1d0:	698b      	ldr	r3, [r1, #24]
 801d1d2:	1a9b      	subs	r3, r3, r2
 801d1d4:	ee06 3a90 	vmov	s13, r3
 801d1d8:	684b      	ldr	r3, [r1, #4]
 801d1da:	1a9b      	subs	r3, r3, r2
 801d1dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d1e0:	ee07 3a10 	vmov	s14, r3
 801d1e4:	ee66 6a84 	vmul.f32	s13, s13, s8
 801d1e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d1ec:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801d1f0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d1f4:	eee5 6a87 	vfma.f32	s13, s11, s14
 801d1f8:	ee66 6a83 	vmul.f32	s13, s13, s6
 801d1fc:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801d200:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d202:	694a      	ldr	r2, [r1, #20]
 801d204:	1b13      	subs	r3, r2, r4
 801d206:	ee07 3a10 	vmov	s14, r3
 801d20a:	680b      	ldr	r3, [r1, #0]
 801d20c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d210:	1b1b      	subs	r3, r3, r4
 801d212:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d216:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801d21a:	ee07 3a10 	vmov	s14, r3
 801d21e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d222:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d226:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d22a:	edd0 5a08 	vldr	s11, [r0, #32]
 801d22e:	ee31 1a65 	vsub.f32	s2, s2, s11
 801d232:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801d236:	ee25 5a06 	vmul.f32	s10, s10, s12
 801d23a:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801d23e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d240:	698b      	ldr	r3, [r1, #24]
 801d242:	1a9b      	subs	r3, r3, r2
 801d244:	ee07 3a10 	vmov	s14, r3
 801d248:	684b      	ldr	r3, [r1, #4]
 801d24a:	1a9b      	subs	r3, r3, r2
 801d24c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d250:	ee01 3a90 	vmov	s3, r3
 801d254:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d258:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d25c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801d260:	ee61 1a84 	vmul.f32	s3, s3, s8
 801d264:	eea1 7a21 	vfma.f32	s14, s2, s3
 801d268:	ee27 7a03 	vmul.f32	s14, s14, s6
 801d26c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801d270:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d272:	694a      	ldr	r2, [r1, #20]
 801d274:	1b13      	subs	r3, r2, r4
 801d276:	ee03 3a10 	vmov	s6, r3
 801d27a:	680b      	ldr	r3, [r1, #0]
 801d27c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d280:	1b1b      	subs	r3, r3, r4
 801d282:	ee23 3a04 	vmul.f32	s6, s6, s8
 801d286:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801d28a:	ee03 3a10 	vmov	s6, r3
 801d28e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d292:	ee23 4a04 	vmul.f32	s8, s6, s8
 801d296:	eee1 5a04 	vfma.f32	s11, s2, s8
 801d29a:	ee25 6a86 	vmul.f32	s12, s11, s12
 801d29e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801d2a2:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801d2a6:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801d2aa:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801d2ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2b2:	dd13      	ble.n	801d2dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801d2b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d2b8:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801d2bc:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d2be:	eee3 7a87 	vfma.f32	s15, s7, s14
 801d2c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d2c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2ca:	dd15      	ble.n	801d2f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801d2cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d2d0:	6403      	str	r3, [r0, #64]	; 0x40
 801d2d2:	bd70      	pop	{r4, r5, r6, pc}
 801d2d4:	4623      	mov	r3, r4
 801d2d6:	e6fd      	b.n	801d0d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d2d8:	462a      	mov	r2, r5
 801d2da:	e706      	b.n	801d0ea <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d2dc:	d502      	bpl.n	801d2e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801d2de:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d2e2:	e7e9      	b.n	801d2b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801d2e4:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801d2e8:	eea3 2a85 	vfma.f32	s4, s7, s10
 801d2ec:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801d2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2f4:	dade      	bge.n	801d2b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801d2f6:	e7f2      	b.n	801d2de <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801d2f8:	d502      	bpl.n	801d300 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801d2fa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d2fe:	e7e7      	b.n	801d2d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801d300:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801d304:	eee3 4a86 	vfma.f32	s9, s7, s12
 801d308:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801d30c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d310:	dadc      	bge.n	801d2cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801d312:	e7f2      	b.n	801d2fa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801d314:	3d800000 	.word	0x3d800000

0801d318 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801d318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d31c:	f04f 0814 	mov.w	r8, #20
 801d320:	4604      	mov	r4, r0
 801d322:	4617      	mov	r7, r2
 801d324:	460d      	mov	r5, r1
 801d326:	fb08 f903 	mul.w	r9, r8, r3
 801d32a:	461e      	mov	r6, r3
 801d32c:	eb02 0a09 	add.w	sl, r2, r9
 801d330:	f8da 0004 	ldr.w	r0, [sl, #4]
 801d334:	f7ff fe88 	bl	801d048 <_ZN8touchgfx8ceil28_4El>
 801d338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d33a:	6160      	str	r0, [r4, #20]
 801d33c:	fb08 f803 	mul.w	r8, r8, r3
 801d340:	9001      	str	r0, [sp, #4]
 801d342:	eb07 0b08 	add.w	fp, r7, r8
 801d346:	f8db 0004 	ldr.w	r0, [fp, #4]
 801d34a:	f7ff fe7d 	bl	801d048 <_ZN8touchgfx8ceil28_4El>
 801d34e:	9a01      	ldr	r2, [sp, #4]
 801d350:	1a80      	subs	r0, r0, r2
 801d352:	61a0      	str	r0, [r4, #24]
 801d354:	2800      	cmp	r0, #0
 801d356:	f000 8088 	beq.w	801d46a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x152>
 801d35a:	f857 3009 	ldr.w	r3, [r7, r9]
 801d35e:	f857 c008 	ldr.w	ip, [r7, r8]
 801d362:	f8db 0004 	ldr.w	r0, [fp, #4]
 801d366:	ebac 0c03 	sub.w	ip, ip, r3
 801d36a:	f8da 1004 	ldr.w	r1, [sl, #4]
 801d36e:	ea4f 1b0c 	mov.w	fp, ip, lsl #4
 801d372:	1a40      	subs	r0, r0, r1
 801d374:	fb0b f202 	mul.w	r2, fp, r2
 801d378:	ea4f 1800 	mov.w	r8, r0, lsl #4
 801d37c:	fb0c 2211 	mls	r2, ip, r1, r2
 801d380:	4641      	mov	r1, r8
 801d382:	fb00 2003 	mla	r0, r0, r3, r2
 801d386:	f104 0310 	add.w	r3, r4, #16
 801d38a:	4622      	mov	r2, r4
 801d38c:	3801      	subs	r0, #1
 801d38e:	4440      	add	r0, r8
 801d390:	f7ff fe6a 	bl	801d068 <_ZN8touchgfx11floorDivModEllRlS0_>
 801d394:	f104 0308 	add.w	r3, r4, #8
 801d398:	1d22      	adds	r2, r4, #4
 801d39a:	4641      	mov	r1, r8
 801d39c:	4658      	mov	r0, fp
 801d39e:	f7ff fe63 	bl	801d068 <_ZN8touchgfx11floorDivModEllRlS0_>
 801d3a2:	f8c4 800c 	str.w	r8, [r4, #12]
 801d3a6:	6962      	ldr	r2, [r4, #20]
 801d3a8:	f8da 3004 	ldr.w	r3, [sl, #4]
 801d3ac:	eddf 6a31 	vldr	s13, [pc, #196]	; 801d474 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801d3b0:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801d3b4:	6822      	ldr	r2, [r4, #0]
 801d3b6:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801d3ba:	ee07 3a10 	vmov	s14, r3
 801d3be:	f857 3009 	ldr.w	r3, [r7, r9]
 801d3c2:	ebc3 1302 	rsb	r3, r3, r2, lsl #4
 801d3c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d3ca:	ee07 3a90 	vmov	s15, r3
 801d3ce:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 801d3d2:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d3d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d3da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d3de:	edd3 6a00 	vldr	s13, [r3]
 801d3e2:	eee6 6a07 	vfma.f32	s13, s12, s14
 801d3e6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801d3ea:	eee6 6a27 	vfma.f32	s13, s12, s15
 801d3ee:	edc4 6a07 	vstr	s13, [r4, #28]
 801d3f2:	edd4 6a01 	vldr	s13, [r4, #4]
 801d3f6:	edd5 5a09 	vldr	s11, [r5, #36]	; 0x24
 801d3fa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d3fe:	ed95 6a0a 	vldr	s12, [r5, #40]	; 0x28
 801d402:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d406:	ed84 6a08 	vstr	s12, [r4, #32]
 801d40a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801d40c:	6262      	str	r2, [r4, #36]	; 0x24
 801d40e:	edd5 5a0c 	vldr	s11, [r5, #48]	; 0x30
 801d412:	ed93 6a03 	vldr	s12, [r3, #12]
 801d416:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d41a:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801d41e:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801d422:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
 801d426:	edd5 5a0b 	vldr	s11, [r5, #44]	; 0x2c
 801d42a:	ed95 6a0c 	vldr	s12, [r5, #48]	; 0x30
 801d42e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d432:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
 801d436:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 801d438:	6322      	str	r2, [r4, #48]	; 0x30
 801d43a:	ed93 6a06 	vldr	s12, [r3, #24]
 801d43e:	edd5 5a0e 	vldr	s11, [r5, #56]	; 0x38
 801d442:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d446:	eeb0 7a46 	vmov.f32	s14, s12
 801d44a:	ed95 6a0d 	vldr	s12, [r5, #52]	; 0x34
 801d44e:	eea6 7a27 	vfma.f32	s14, s12, s15
 801d452:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
 801d456:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 801d45a:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
 801d45e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d462:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
 801d466:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801d468:	63e3      	str	r3, [r4, #60]	; 0x3c
 801d46a:	4620      	mov	r0, r4
 801d46c:	b003      	add	sp, #12
 801d46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d472:	bf00      	nop
 801d474:	3d800000 	.word	0x3d800000

0801d478 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801d478:	4602      	mov	r2, r0
 801d47a:	b148      	cbz	r0, 801d490 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801d47c:	2300      	movs	r3, #0
 801d47e:	b298      	uxth	r0, r3
 801d480:	3301      	adds	r3, #1
 801d482:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801d486:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801d48a:	2900      	cmp	r1, #0
 801d48c:	d1f7      	bne.n	801d47e <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801d48e:	4770      	bx	lr
 801d490:	4770      	bx	lr

0801d492 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801d492:	b530      	push	{r4, r5, lr}
 801d494:	4604      	mov	r4, r0
 801d496:	b159      	cbz	r1, 801d4b0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801d498:	b148      	cbz	r0, 801d4ae <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801d49a:	2300      	movs	r3, #0
 801d49c:	b298      	uxth	r0, r3
 801d49e:	4282      	cmp	r2, r0
 801d4a0:	d905      	bls.n	801d4ae <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801d4a2:	5ccd      	ldrb	r5, [r1, r3]
 801d4a4:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801d4a8:	3301      	adds	r3, #1
 801d4aa:	2d00      	cmp	r5, #0
 801d4ac:	d1f6      	bne.n	801d49c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801d4ae:	bd30      	pop	{r4, r5, pc}
 801d4b0:	4608      	mov	r0, r1
 801d4b2:	e7fc      	b.n	801d4ae <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801d4b4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801d4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d4b6:	468c      	mov	ip, r1
 801d4b8:	b08b      	sub	sp, #44	; 0x2c
 801d4ba:	2100      	movs	r1, #0
 801d4bc:	ae01      	add	r6, sp, #4
 801d4be:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801d4c2:	211f      	movs	r1, #31
 801d4c4:	fbb0 f7f3 	udiv	r7, r0, r3
 801d4c8:	fb03 0517 	mls	r5, r3, r7, r0
 801d4cc:	4638      	mov	r0, r7
 801d4ce:	b2ec      	uxtb	r4, r5
 801d4d0:	2d09      	cmp	r5, #9
 801d4d2:	bfd4      	ite	le
 801d4d4:	3430      	addle	r4, #48	; 0x30
 801d4d6:	3457      	addgt	r4, #87	; 0x57
 801d4d8:	b2e4      	uxtb	r4, r4
 801d4da:	558c      	strb	r4, [r1, r6]
 801d4dc:	1e4c      	subs	r4, r1, #1
 801d4de:	b92f      	cbnz	r7, 801d4ec <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801d4e0:	4431      	add	r1, r6
 801d4e2:	4660      	mov	r0, ip
 801d4e4:	f7ff ffd5 	bl	801d492 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801d4e8:	b00b      	add	sp, #44	; 0x2c
 801d4ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d4ec:	4621      	mov	r1, r4
 801d4ee:	e7e9      	b.n	801d4c4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801d4f0 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801d4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d4f2:	4607      	mov	r7, r0
 801d4f4:	b08b      	sub	sp, #44	; 0x2c
 801d4f6:	4608      	mov	r0, r1
 801d4f8:	b341      	cbz	r1, 801d54c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801d4fa:	1e99      	subs	r1, r3, #2
 801d4fc:	2922      	cmp	r1, #34	; 0x22
 801d4fe:	d825      	bhi.n	801d54c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801d500:	2100      	movs	r1, #0
 801d502:	463c      	mov	r4, r7
 801d504:	261f      	movs	r6, #31
 801d506:	f10d 0c04 	add.w	ip, sp, #4
 801d50a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801d50e:	1e71      	subs	r1, r6, #1
 801d510:	fb94 fef3 	sdiv	lr, r4, r3
 801d514:	fb03 441e 	mls	r4, r3, lr, r4
 801d518:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801d51c:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801d520:	b2ec      	uxtb	r4, r5
 801d522:	2d09      	cmp	r5, #9
 801d524:	bfd4      	ite	le
 801d526:	3430      	addle	r4, #48	; 0x30
 801d528:	3457      	addgt	r4, #87	; 0x57
 801d52a:	b2e4      	uxtb	r4, r4
 801d52c:	f80c 4006 	strb.w	r4, [ip, r6]
 801d530:	4674      	mov	r4, lr
 801d532:	b96c      	cbnz	r4, 801d550 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801d534:	2f00      	cmp	r7, #0
 801d536:	da05      	bge.n	801d544 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801d538:	ab0a      	add	r3, sp, #40	; 0x28
 801d53a:	4419      	add	r1, r3
 801d53c:	232d      	movs	r3, #45	; 0x2d
 801d53e:	f801 3c24 	strb.w	r3, [r1, #-36]
 801d542:	1eb1      	subs	r1, r6, #2
 801d544:	3101      	adds	r1, #1
 801d546:	4461      	add	r1, ip
 801d548:	f7ff ffa3 	bl	801d492 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801d54c:	b00b      	add	sp, #44	; 0x2c
 801d54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d550:	460e      	mov	r6, r1
 801d552:	e7dc      	b.n	801d50e <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801d554 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801d554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d558:	b085      	sub	sp, #20
 801d55a:	4691      	mov	r9, r2
 801d55c:	6802      	ldr	r2, [r0, #0]
 801d55e:	4688      	mov	r8, r1
 801d560:	461c      	mov	r4, r3
 801d562:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801d566:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801d56a:	4683      	mov	fp, r0
 801d56c:	4610      	mov	r0, r2
 801d56e:	9103      	str	r1, [sp, #12]
 801d570:	9302      	str	r3, [sp, #8]
 801d572:	9201      	str	r2, [sp, #4]
 801d574:	f7ff ff80 	bl	801d478 <_ZN8touchgfx7Unicode6strlenEPKt>
 801d578:	f1b8 0f00 	cmp.w	r8, #0
 801d57c:	bf0c      	ite	eq
 801d57e:	4684      	moveq	ip, r0
 801d580:	f100 0c01 	addne.w	ip, r0, #1
 801d584:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801d588:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801d58c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d58e:	fa1f fc8c 	uxth.w	ip, ip
 801d592:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d594:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801d598:	9903      	ldr	r1, [sp, #12]
 801d59a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801d59e:	d041      	beq.n	801d624 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801d5a0:	d834      	bhi.n	801d60c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801d5a2:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801d5a6:	d059      	beq.n	801d65c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801d5a8:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801d5ac:	d03a      	beq.n	801d624 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801d5ae:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801d5b2:	d034      	beq.n	801d61e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801d5b4:	2400      	movs	r4, #0
 801d5b6:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801d5ba:	3a01      	subs	r2, #1
 801d5bc:	b169      	cbz	r1, 801d5da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d5be:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d5c0:	458c      	cmp	ip, r1
 801d5c2:	da09      	bge.n	801d5d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801d5c4:	eba1 010c 	sub.w	r1, r1, ip
 801d5c8:	b289      	uxth	r1, r1
 801d5ca:	b933      	cbnz	r3, 801d5da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d5cc:	2e00      	cmp	r6, #0
 801d5ce:	d051      	beq.n	801d674 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801d5d0:	2800      	cmp	r0, #0
 801d5d2:	d04f      	beq.n	801d674 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801d5d4:	440c      	add	r4, r1
 801d5d6:	b2a4      	uxth	r4, r4
 801d5d8:	2100      	movs	r1, #0
 801d5da:	682b      	ldr	r3, [r5, #0]
 801d5dc:	4293      	cmp	r3, r2
 801d5de:	da07      	bge.n	801d5f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801d5e0:	f1b8 0f00 	cmp.w	r8, #0
 801d5e4:	d004      	beq.n	801d5f0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801d5e6:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801d5ea:	682b      	ldr	r3, [r5, #0]
 801d5ec:	3301      	adds	r3, #1
 801d5ee:	602b      	str	r3, [r5, #0]
 801d5f0:	2730      	movs	r7, #48	; 0x30
 801d5f2:	2c00      	cmp	r4, #0
 801d5f4:	d04e      	beq.n	801d694 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d5f6:	682e      	ldr	r6, [r5, #0]
 801d5f8:	3c01      	subs	r4, #1
 801d5fa:	42b2      	cmp	r2, r6
 801d5fc:	b2a4      	uxth	r4, r4
 801d5fe:	dd49      	ble.n	801d694 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d600:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801d604:	682b      	ldr	r3, [r5, #0]
 801d606:	3301      	adds	r3, #1
 801d608:	602b      	str	r3, [r5, #0]
 801d60a:	e7f2      	b.n	801d5f2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801d60c:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801d610:	d01d      	beq.n	801d64e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801d612:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801d616:	d002      	beq.n	801d61e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801d618:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801d61c:	e7c9      	b.n	801d5b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801d61e:	4684      	mov	ip, r0
 801d620:	f04f 0800 	mov.w	r8, #0
 801d624:	2c00      	cmp	r4, #0
 801d626:	d0c6      	beq.n	801d5b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d628:	b947      	cbnz	r7, 801d63c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801d62a:	2801      	cmp	r0, #1
 801d62c:	d106      	bne.n	801d63c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801d62e:	8814      	ldrh	r4, [r2, #0]
 801d630:	2c30      	cmp	r4, #48	; 0x30
 801d632:	bf02      	ittt	eq
 801d634:	3202      	addeq	r2, #2
 801d636:	4638      	moveq	r0, r7
 801d638:	f8cb 2000 	streq.w	r2, [fp]
 801d63c:	45bc      	cmp	ip, r7
 801d63e:	da14      	bge.n	801d66a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801d640:	b2bf      	uxth	r7, r7
 801d642:	eba7 040c 	sub.w	r4, r7, ip
 801d646:	46bc      	mov	ip, r7
 801d648:	b2a4      	uxth	r4, r4
 801d64a:	2600      	movs	r6, #0
 801d64c:	e7b3      	b.n	801d5b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d64e:	4684      	mov	ip, r0
 801d650:	b16c      	cbz	r4, 801d66e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801d652:	42b8      	cmp	r0, r7
 801d654:	dd00      	ble.n	801d658 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801d656:	b2b8      	uxth	r0, r7
 801d658:	2400      	movs	r4, #0
 801d65a:	e003      	b.n	801d664 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801d65c:	f04f 0c01 	mov.w	ip, #1
 801d660:	2400      	movs	r4, #0
 801d662:	4660      	mov	r0, ip
 801d664:	4626      	mov	r6, r4
 801d666:	46a0      	mov	r8, r4
 801d668:	e7a5      	b.n	801d5b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d66a:	2400      	movs	r4, #0
 801d66c:	e7ed      	b.n	801d64a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801d66e:	4626      	mov	r6, r4
 801d670:	46a0      	mov	r8, r4
 801d672:	e7a0      	b.n	801d5b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d674:	2900      	cmp	r1, #0
 801d676:	d0b0      	beq.n	801d5da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d678:	2720      	movs	r7, #32
 801d67a:	682e      	ldr	r6, [r5, #0]
 801d67c:	2900      	cmp	r1, #0
 801d67e:	d0ac      	beq.n	801d5da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d680:	3901      	subs	r1, #1
 801d682:	4296      	cmp	r6, r2
 801d684:	b289      	uxth	r1, r1
 801d686:	daa7      	bge.n	801d5d8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801d688:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801d68c:	682b      	ldr	r3, [r5, #0]
 801d68e:	3301      	adds	r3, #1
 801d690:	602b      	str	r3, [r5, #0]
 801d692:	e7f2      	b.n	801d67a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801d694:	b188      	cbz	r0, 801d6ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801d696:	682b      	ldr	r3, [r5, #0]
 801d698:	3801      	subs	r0, #1
 801d69a:	429a      	cmp	r2, r3
 801d69c:	b280      	uxth	r0, r0
 801d69e:	dd0c      	ble.n	801d6ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801d6a0:	f8db 3000 	ldr.w	r3, [fp]
 801d6a4:	1c9c      	adds	r4, r3, #2
 801d6a6:	f8cb 4000 	str.w	r4, [fp]
 801d6aa:	881c      	ldrh	r4, [r3, #0]
 801d6ac:	682b      	ldr	r3, [r5, #0]
 801d6ae:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801d6b2:	682b      	ldr	r3, [r5, #0]
 801d6b4:	3301      	adds	r3, #1
 801d6b6:	602b      	str	r3, [r5, #0]
 801d6b8:	e7ec      	b.n	801d694 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d6ba:	2620      	movs	r6, #32
 801d6bc:	b151      	cbz	r1, 801d6d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801d6be:	6828      	ldr	r0, [r5, #0]
 801d6c0:	3901      	subs	r1, #1
 801d6c2:	4282      	cmp	r2, r0
 801d6c4:	b289      	uxth	r1, r1
 801d6c6:	dd05      	ble.n	801d6d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801d6c8:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801d6cc:	682b      	ldr	r3, [r5, #0]
 801d6ce:	3301      	adds	r3, #1
 801d6d0:	602b      	str	r3, [r5, #0]
 801d6d2:	e7f3      	b.n	801d6bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801d6d4:	b005      	add	sp, #20
 801d6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d6da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801d6da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d6de:	2400      	movs	r4, #0
 801d6e0:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801d6e4:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801d6e8:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801d6ec:	8014      	strh	r4, [r2, #0]
 801d6ee:	701c      	strb	r4, [r3, #0]
 801d6f0:	f888 4000 	strb.w	r4, [r8]
 801d6f4:	f88c 4000 	strb.w	r4, [ip]
 801d6f8:	f88e 4000 	strb.w	r4, [lr]
 801d6fc:	703c      	strb	r4, [r7, #0]
 801d6fe:	6804      	ldr	r4, [r0, #0]
 801d700:	b1a4      	cbz	r4, 801d72c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801d702:	8824      	ldrh	r4, [r4, #0]
 801d704:	f04f 0901 	mov.w	r9, #1
 801d708:	b314      	cbz	r4, 801d750 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d70a:	2c2b      	cmp	r4, #43	; 0x2b
 801d70c:	d001      	beq.n	801d712 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801d70e:	2c20      	cmp	r4, #32
 801d710:	d110      	bne.n	801d734 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801d712:	8014      	strh	r4, [r2, #0]
 801d714:	6804      	ldr	r4, [r0, #0]
 801d716:	b10c      	cbz	r4, 801d71c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801d718:	3402      	adds	r4, #2
 801d71a:	6004      	str	r4, [r0, #0]
 801d71c:	680c      	ldr	r4, [r1, #0]
 801d71e:	b10c      	cbz	r4, 801d724 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801d720:	3401      	adds	r4, #1
 801d722:	600c      	str	r4, [r1, #0]
 801d724:	6804      	ldr	r4, [r0, #0]
 801d726:	b17c      	cbz	r4, 801d748 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801d728:	8824      	ldrh	r4, [r4, #0]
 801d72a:	e7ed      	b.n	801d708 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801d72c:	680c      	ldr	r4, [r1, #0]
 801d72e:	b17c      	cbz	r4, 801d750 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d730:	7824      	ldrb	r4, [r4, #0]
 801d732:	e7e7      	b.n	801d704 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801d734:	2c2d      	cmp	r4, #45	; 0x2d
 801d736:	d102      	bne.n	801d73e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801d738:	f883 9000 	strb.w	r9, [r3]
 801d73c:	e7ea      	b.n	801d714 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801d73e:	2c23      	cmp	r4, #35	; 0x23
 801d740:	d107      	bne.n	801d752 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801d742:	f888 9000 	strb.w	r9, [r8]
 801d746:	e7e5      	b.n	801d714 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801d748:	680c      	ldr	r4, [r1, #0]
 801d74a:	b10c      	cbz	r4, 801d750 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d74c:	7824      	ldrb	r4, [r4, #0]
 801d74e:	e7db      	b.n	801d708 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801d750:	2400      	movs	r4, #0
 801d752:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801d756:	2b09      	cmp	r3, #9
 801d758:	d901      	bls.n	801d75e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801d75a:	2c2a      	cmp	r4, #42	; 0x2a
 801d75c:	d122      	bne.n	801d7a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d75e:	2301      	movs	r3, #1
 801d760:	2c30      	cmp	r4, #48	; 0x30
 801d762:	f88e 3000 	strb.w	r3, [lr]
 801d766:	d10d      	bne.n	801d784 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801d768:	f88c 3000 	strb.w	r3, [ip]
 801d76c:	6803      	ldr	r3, [r0, #0]
 801d76e:	b10b      	cbz	r3, 801d774 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801d770:	3302      	adds	r3, #2
 801d772:	6003      	str	r3, [r0, #0]
 801d774:	680b      	ldr	r3, [r1, #0]
 801d776:	b10b      	cbz	r3, 801d77c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801d778:	3301      	adds	r3, #1
 801d77a:	600b      	str	r3, [r1, #0]
 801d77c:	6803      	ldr	r3, [r0, #0]
 801d77e:	2b00      	cmp	r3, #0
 801d780:	d02f      	beq.n	801d7e2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801d782:	881c      	ldrh	r4, [r3, #0]
 801d784:	2c2a      	cmp	r4, #42	; 0x2a
 801d786:	d135      	bne.n	801d7f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801d788:	f04f 33ff 	mov.w	r3, #4294967295
 801d78c:	6033      	str	r3, [r6, #0]
 801d78e:	6803      	ldr	r3, [r0, #0]
 801d790:	b10b      	cbz	r3, 801d796 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801d792:	3302      	adds	r3, #2
 801d794:	6003      	str	r3, [r0, #0]
 801d796:	680b      	ldr	r3, [r1, #0]
 801d798:	b10b      	cbz	r3, 801d79e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801d79a:	3301      	adds	r3, #1
 801d79c:	600b      	str	r3, [r1, #0]
 801d79e:	6803      	ldr	r3, [r0, #0]
 801d7a0:	b31b      	cbz	r3, 801d7ea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801d7a2:	881c      	ldrh	r4, [r3, #0]
 801d7a4:	2c2e      	cmp	r4, #46	; 0x2e
 801d7a6:	d11a      	bne.n	801d7de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d7a8:	2301      	movs	r3, #1
 801d7aa:	703b      	strb	r3, [r7, #0]
 801d7ac:	6803      	ldr	r3, [r0, #0]
 801d7ae:	b10b      	cbz	r3, 801d7b4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801d7b0:	3302      	adds	r3, #2
 801d7b2:	6003      	str	r3, [r0, #0]
 801d7b4:	680b      	ldr	r3, [r1, #0]
 801d7b6:	b10b      	cbz	r3, 801d7bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801d7b8:	3301      	adds	r3, #1
 801d7ba:	600b      	str	r3, [r1, #0]
 801d7bc:	6803      	ldr	r3, [r0, #0]
 801d7be:	2b00      	cmp	r3, #0
 801d7c0:	d036      	beq.n	801d830 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801d7c2:	881b      	ldrh	r3, [r3, #0]
 801d7c4:	2b2a      	cmp	r3, #42	; 0x2a
 801d7c6:	d137      	bne.n	801d838 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801d7c8:	f04f 33ff 	mov.w	r3, #4294967295
 801d7cc:	602b      	str	r3, [r5, #0]
 801d7ce:	6803      	ldr	r3, [r0, #0]
 801d7d0:	b10b      	cbz	r3, 801d7d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801d7d2:	3302      	adds	r3, #2
 801d7d4:	6003      	str	r3, [r0, #0]
 801d7d6:	680b      	ldr	r3, [r1, #0]
 801d7d8:	b10b      	cbz	r3, 801d7de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d7da:	3301      	adds	r3, #1
 801d7dc:	600b      	str	r3, [r1, #0]
 801d7de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d7e2:	680c      	ldr	r4, [r1, #0]
 801d7e4:	b134      	cbz	r4, 801d7f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801d7e6:	7824      	ldrb	r4, [r4, #0]
 801d7e8:	e7cc      	b.n	801d784 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801d7ea:	680b      	ldr	r3, [r1, #0]
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	d0f6      	beq.n	801d7de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d7f0:	781c      	ldrb	r4, [r3, #0]
 801d7f2:	e7d7      	b.n	801d7a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d7f4:	2300      	movs	r3, #0
 801d7f6:	220a      	movs	r2, #10
 801d7f8:	6033      	str	r3, [r6, #0]
 801d7fa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801d7fe:	fa1f f38c 	uxth.w	r3, ip
 801d802:	2b09      	cmp	r3, #9
 801d804:	d8ce      	bhi.n	801d7a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d806:	6833      	ldr	r3, [r6, #0]
 801d808:	fb02 c303 	mla	r3, r2, r3, ip
 801d80c:	6033      	str	r3, [r6, #0]
 801d80e:	6803      	ldr	r3, [r0, #0]
 801d810:	b10b      	cbz	r3, 801d816 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801d812:	3302      	adds	r3, #2
 801d814:	6003      	str	r3, [r0, #0]
 801d816:	680b      	ldr	r3, [r1, #0]
 801d818:	b10b      	cbz	r3, 801d81e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801d81a:	3301      	adds	r3, #1
 801d81c:	600b      	str	r3, [r1, #0]
 801d81e:	6803      	ldr	r3, [r0, #0]
 801d820:	b10b      	cbz	r3, 801d826 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801d822:	881c      	ldrh	r4, [r3, #0]
 801d824:	e7e9      	b.n	801d7fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801d826:	680c      	ldr	r4, [r1, #0]
 801d828:	2c00      	cmp	r4, #0
 801d82a:	d0e6      	beq.n	801d7fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801d82c:	7824      	ldrb	r4, [r4, #0]
 801d82e:	e7e4      	b.n	801d7fa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801d830:	680b      	ldr	r3, [r1, #0]
 801d832:	b10b      	cbz	r3, 801d838 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801d834:	781b      	ldrb	r3, [r3, #0]
 801d836:	e7c5      	b.n	801d7c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801d838:	2200      	movs	r2, #0
 801d83a:	240a      	movs	r4, #10
 801d83c:	602a      	str	r2, [r5, #0]
 801d83e:	3b30      	subs	r3, #48	; 0x30
 801d840:	682a      	ldr	r2, [r5, #0]
 801d842:	b29e      	uxth	r6, r3
 801d844:	2e09      	cmp	r6, #9
 801d846:	d813      	bhi.n	801d870 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801d848:	fb04 3302 	mla	r3, r4, r2, r3
 801d84c:	602b      	str	r3, [r5, #0]
 801d84e:	6803      	ldr	r3, [r0, #0]
 801d850:	b10b      	cbz	r3, 801d856 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801d852:	3302      	adds	r3, #2
 801d854:	6003      	str	r3, [r0, #0]
 801d856:	680b      	ldr	r3, [r1, #0]
 801d858:	b10b      	cbz	r3, 801d85e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801d85a:	3301      	adds	r3, #1
 801d85c:	600b      	str	r3, [r1, #0]
 801d85e:	6803      	ldr	r3, [r0, #0]
 801d860:	b10b      	cbz	r3, 801d866 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801d862:	881b      	ldrh	r3, [r3, #0]
 801d864:	e7eb      	b.n	801d83e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801d866:	680b      	ldr	r3, [r1, #0]
 801d868:	2b00      	cmp	r3, #0
 801d86a:	d0e8      	beq.n	801d83e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801d86c:	781b      	ldrb	r3, [r3, #0]
 801d86e:	e7e6      	b.n	801d83e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801d870:	2a06      	cmp	r2, #6
 801d872:	bfa8      	it	ge
 801d874:	2206      	movge	r2, #6
 801d876:	602a      	str	r2, [r5, #0]
 801d878:	e7b1      	b.n	801d7de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801d87a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801d87a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d87e:	b0a3      	sub	sp, #140	; 0x8c
 801d880:	2600      	movs	r6, #0
 801d882:	4607      	mov	r7, r0
 801d884:	4688      	mov	r8, r1
 801d886:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801d88a:	4631      	mov	r1, r6
 801d88c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801d88e:	4648      	mov	r0, r9
 801d890:	960d      	str	r6, [sp, #52]	; 0x34
 801d892:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801d896:	2242      	movs	r2, #66	; 0x42
 801d898:	f00c fb6a 	bl	8029f70 <memset>
 801d89c:	b15f      	cbz	r7, 801d8b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801d89e:	f108 3aff 	add.w	sl, r8, #4294967295
 801d8a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d8a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d8a6:	b152      	cbz	r2, 801d8be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801d8a8:	8812      	ldrh	r2, [r2, #0]
 801d8aa:	b10a      	cbz	r2, 801d8b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801d8ac:	459a      	cmp	sl, r3
 801d8ae:	dc2e      	bgt.n	801d90e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801d8b0:	2200      	movs	r2, #0
 801d8b2:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801d8b6:	4638      	mov	r0, r7
 801d8b8:	b023      	add	sp, #140	; 0x8c
 801d8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8be:	9a08      	ldr	r2, [sp, #32]
 801d8c0:	2a00      	cmp	r2, #0
 801d8c2:	d0f5      	beq.n	801d8b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801d8c4:	7812      	ldrb	r2, [r2, #0]
 801d8c6:	e7f0      	b.n	801d8aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801d8c8:	2d00      	cmp	r5, #0
 801d8ca:	d0ea      	beq.n	801d8a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d8cc:	782a      	ldrb	r2, [r5, #0]
 801d8ce:	b142      	cbz	r2, 801d8e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801d8d0:	2a25      	cmp	r2, #37	; 0x25
 801d8d2:	d001      	beq.n	801d8d8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801d8d4:	459a      	cmp	sl, r3
 801d8d6:	dc08      	bgt.n	801d8ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801d8d8:	f1bb 0f00 	cmp.w	fp, #0
 801d8dc:	d121      	bne.n	801d922 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801d8de:	2d00      	cmp	r5, #0
 801d8e0:	d0df      	beq.n	801d8a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d8e2:	782a      	ldrb	r2, [r5, #0]
 801d8e4:	f04f 0b00 	mov.w	fp, #0
 801d8e8:	e01d      	b.n	801d926 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801d8ea:	f1bb 0f00 	cmp.w	fp, #0
 801d8ee:	d077      	beq.n	801d9e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801d8f0:	f8bb 2000 	ldrh.w	r2, [fp]
 801d8f4:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801d8f8:	f1bb 0f00 	cmp.w	fp, #0
 801d8fc:	d002      	beq.n	801d904 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801d8fe:	f10b 0202 	add.w	r2, fp, #2
 801d902:	9209      	str	r2, [sp, #36]	; 0x24
 801d904:	b10d      	cbz	r5, 801d90a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801d906:	3501      	adds	r5, #1
 801d908:	9508      	str	r5, [sp, #32]
 801d90a:	3301      	adds	r3, #1
 801d90c:	930d      	str	r3, [sp, #52]	; 0x34
 801d90e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d910:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801d914:	f1bb 0f00 	cmp.w	fp, #0
 801d918:	d0d6      	beq.n	801d8c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801d91a:	f8bb 2000 	ldrh.w	r2, [fp]
 801d91e:	2a00      	cmp	r2, #0
 801d920:	d1d6      	bne.n	801d8d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801d922:	f8bb 2000 	ldrh.w	r2, [fp]
 801d926:	2a00      	cmp	r2, #0
 801d928:	d0bb      	beq.n	801d8a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d92a:	459a      	cmp	sl, r3
 801d92c:	ddb9      	ble.n	801d8a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d92e:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801d932:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801d936:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801d93a:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801d93e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801d942:	960e      	str	r6, [sp, #56]	; 0x38
 801d944:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801d948:	960f      	str	r6, [sp, #60]	; 0x3c
 801d94a:	f1bb 0f00 	cmp.w	fp, #0
 801d94e:	d002      	beq.n	801d956 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801d950:	f10b 0302 	add.w	r3, fp, #2
 801d954:	9309      	str	r3, [sp, #36]	; 0x24
 801d956:	b10d      	cbz	r5, 801d95c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801d958:	1c6b      	adds	r3, r5, #1
 801d95a:	9308      	str	r3, [sp, #32]
 801d95c:	ab0f      	add	r3, sp, #60	; 0x3c
 801d95e:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801d962:	a908      	add	r1, sp, #32
 801d964:	a809      	add	r0, sp, #36	; 0x24
 801d966:	9305      	str	r3, [sp, #20]
 801d968:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801d96c:	9304      	str	r3, [sp, #16]
 801d96e:	ab0e      	add	r3, sp, #56	; 0x38
 801d970:	9303      	str	r3, [sp, #12]
 801d972:	ab0c      	add	r3, sp, #48	; 0x30
 801d974:	9302      	str	r3, [sp, #8]
 801d976:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801d97a:	9301      	str	r3, [sp, #4]
 801d97c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801d980:	9300      	str	r3, [sp, #0]
 801d982:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801d986:	f7ff fea8 	bl	801d6da <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801d98a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d98c:	2b00      	cmp	r3, #0
 801d98e:	bfbf      	itttt	lt
 801d990:	6823      	ldrlt	r3, [r4, #0]
 801d992:	3404      	addlt	r4, #4
 801d994:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801d998:	930e      	strlt	r3, [sp, #56]	; 0x38
 801d99a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d99c:	2b00      	cmp	r3, #0
 801d99e:	bfbe      	ittt	lt
 801d9a0:	6823      	ldrlt	r3, [r4, #0]
 801d9a2:	3404      	addlt	r4, #4
 801d9a4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801d9a8:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801d9ac:	bfb8      	it	lt
 801d9ae:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801d9b0:	b1d9      	cbz	r1, 801d9ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801d9b2:	880b      	ldrh	r3, [r1, #0]
 801d9b4:	2b69      	cmp	r3, #105	; 0x69
 801d9b6:	d01f      	beq.n	801d9f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d9b8:	d82f      	bhi.n	801da1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801d9ba:	2b58      	cmp	r3, #88	; 0x58
 801d9bc:	d01c      	beq.n	801d9f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801d9be:	d818      	bhi.n	801d9f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801d9c0:	2b25      	cmp	r3, #37	; 0x25
 801d9c2:	d034      	beq.n	801da2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801d9c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d9c6:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801d9ca:	f1bb 0f00 	cmp.w	fp, #0
 801d9ce:	f000 80b7 	beq.w	801db40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801d9d2:	f8bb 5000 	ldrh.w	r5, [fp]
 801d9d6:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801d9da:	3301      	adds	r3, #1
 801d9dc:	930d      	str	r3, [sp, #52]	; 0x34
 801d9de:	e029      	b.n	801da34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801d9e0:	b10d      	cbz	r5, 801d9e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801d9e2:	782a      	ldrb	r2, [r5, #0]
 801d9e4:	e786      	b.n	801d8f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801d9e6:	462a      	mov	r2, r5
 801d9e8:	e784      	b.n	801d8f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801d9ea:	2a00      	cmp	r2, #0
 801d9ec:	d0ea      	beq.n	801d9c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801d9ee:	7813      	ldrb	r3, [r2, #0]
 801d9f0:	e7e0      	b.n	801d9b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801d9f2:	3b63      	subs	r3, #99	; 0x63
 801d9f4:	2b01      	cmp	r3, #1
 801d9f6:	d8e5      	bhi.n	801d9c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801d9f8:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801d9fc:	b329      	cbz	r1, 801da4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801d9fe:	880b      	ldrh	r3, [r1, #0]
 801da00:	2b69      	cmp	r3, #105	; 0x69
 801da02:	d063      	beq.n	801dacc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801da04:	d825      	bhi.n	801da52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801da06:	2b63      	cmp	r3, #99	; 0x63
 801da08:	d038      	beq.n	801da7c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801da0a:	2b64      	cmp	r3, #100	; 0x64
 801da0c:	d05e      	beq.n	801dacc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801da0e:	2b58      	cmp	r3, #88	; 0x58
 801da10:	d07a      	beq.n	801db08 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801da12:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801da16:	4625      	mov	r5, r4
 801da18:	e036      	b.n	801da88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801da1a:	2b73      	cmp	r3, #115	; 0x73
 801da1c:	d0ec      	beq.n	801d9f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801da1e:	d802      	bhi.n	801da26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801da20:	2b6f      	cmp	r3, #111	; 0x6f
 801da22:	d1cf      	bne.n	801d9c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801da24:	e7e8      	b.n	801d9f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801da26:	2b75      	cmp	r3, #117	; 0x75
 801da28:	d0e6      	beq.n	801d9f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801da2a:	2b78      	cmp	r3, #120	; 0x78
 801da2c:	e7f9      	b.n	801da22 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801da2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801da30:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801da34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da36:	b10b      	cbz	r3, 801da3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801da38:	3302      	adds	r3, #2
 801da3a:	9309      	str	r3, [sp, #36]	; 0x24
 801da3c:	9b08      	ldr	r3, [sp, #32]
 801da3e:	2b00      	cmp	r3, #0
 801da40:	f43f af2f 	beq.w	801d8a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801da44:	3301      	adds	r3, #1
 801da46:	9308      	str	r3, [sp, #32]
 801da48:	e72b      	b.n	801d8a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801da4a:	2a00      	cmp	r2, #0
 801da4c:	d0e1      	beq.n	801da12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801da4e:	7813      	ldrb	r3, [r2, #0]
 801da50:	e7d6      	b.n	801da00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801da52:	2b73      	cmp	r3, #115	; 0x73
 801da54:	d036      	beq.n	801dac4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801da56:	d807      	bhi.n	801da68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801da58:	2b6f      	cmp	r3, #111	; 0x6f
 801da5a:	d1da      	bne.n	801da12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801da5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801da5e:	1d25      	adds	r5, r4, #4
 801da60:	2308      	movs	r3, #8
 801da62:	eba8 0202 	sub.w	r2, r8, r2
 801da66:	e049      	b.n	801dafc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801da68:	2b75      	cmp	r3, #117	; 0x75
 801da6a:	d042      	beq.n	801daf2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801da6c:	2b78      	cmp	r3, #120	; 0x78
 801da6e:	d1d0      	bne.n	801da12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801da70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801da72:	1d25      	adds	r5, r4, #4
 801da74:	2310      	movs	r3, #16
 801da76:	eba8 0202 	sub.w	r2, r8, r2
 801da7a:	e03f      	b.n	801dafc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801da7c:	7823      	ldrb	r3, [r4, #0]
 801da7e:	1d25      	adds	r5, r4, #4
 801da80:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801da84:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801da88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da8a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801da8e:	2b00      	cmp	r3, #0
 801da90:	d051      	beq.n	801db36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801da92:	881a      	ldrh	r2, [r3, #0]
 801da94:	a80d      	add	r0, sp, #52	; 0x34
 801da96:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801da9a:	462c      	mov	r4, r5
 801da9c:	9005      	str	r0, [sp, #20]
 801da9e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801daa2:	9004      	str	r0, [sp, #16]
 801daa4:	980e      	ldr	r0, [sp, #56]	; 0x38
 801daa6:	9003      	str	r0, [sp, #12]
 801daa8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801daac:	9002      	str	r0, [sp, #8]
 801daae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801dab0:	9001      	str	r0, [sp, #4]
 801dab2:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801dab6:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801daba:	9000      	str	r0, [sp, #0]
 801dabc:	a810      	add	r0, sp, #64	; 0x40
 801dabe:	f7ff fd49 	bl	801d554 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801dac2:	e7b7      	b.n	801da34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801dac4:	1d25      	adds	r5, r4, #4
 801dac6:	6823      	ldr	r3, [r4, #0]
 801dac8:	9310      	str	r3, [sp, #64]	; 0x40
 801daca:	e7dd      	b.n	801da88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801dacc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dace:	230a      	movs	r3, #10
 801dad0:	4649      	mov	r1, r9
 801dad2:	6820      	ldr	r0, [r4, #0]
 801dad4:	eba8 0202 	sub.w	r2, r8, r2
 801dad8:	1d25      	adds	r5, r4, #4
 801dada:	b292      	uxth	r2, r2
 801dadc:	f7ff fd08 	bl	801d4f0 <_ZN8touchgfx7Unicode4itoaElPtti>
 801dae0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801dae4:	2b2d      	cmp	r3, #45	; 0x2d
 801dae6:	d1cf      	bne.n	801da88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801dae8:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801daec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801daee:	3302      	adds	r3, #2
 801daf0:	e7ea      	b.n	801dac8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801daf2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801daf4:	1d25      	adds	r5, r4, #4
 801daf6:	230a      	movs	r3, #10
 801daf8:	eba8 0202 	sub.w	r2, r8, r2
 801dafc:	b292      	uxth	r2, r2
 801dafe:	4649      	mov	r1, r9
 801db00:	6820      	ldr	r0, [r4, #0]
 801db02:	f7ff fcd7 	bl	801d4b4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801db06:	e7bf      	b.n	801da88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801db08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801db0a:	2310      	movs	r3, #16
 801db0c:	4649      	mov	r1, r9
 801db0e:	6820      	ldr	r0, [r4, #0]
 801db10:	eba8 0202 	sub.w	r2, r8, r2
 801db14:	1d25      	adds	r5, r4, #4
 801db16:	b292      	uxth	r2, r2
 801db18:	f7ff fccc 	bl	801d4b4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801db1c:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801db20:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801db24:	2b00      	cmp	r3, #0
 801db26:	d0af      	beq.n	801da88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801db28:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801db2c:	2919      	cmp	r1, #25
 801db2e:	d8f7      	bhi.n	801db20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801db30:	3b20      	subs	r3, #32
 801db32:	8013      	strh	r3, [r2, #0]
 801db34:	e7f4      	b.n	801db20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801db36:	9a08      	ldr	r2, [sp, #32]
 801db38:	2a00      	cmp	r2, #0
 801db3a:	d0ab      	beq.n	801da94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801db3c:	7812      	ldrb	r2, [r2, #0]
 801db3e:	e7a9      	b.n	801da94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801db40:	2d00      	cmp	r5, #0
 801db42:	f43f af48 	beq.w	801d9d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801db46:	782d      	ldrb	r5, [r5, #0]
 801db48:	e745      	b.n	801d9d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801db4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801db4a:	b507      	push	{r0, r1, r2, lr}
 801db4c:	9300      	str	r3, [sp, #0]
 801db4e:	4613      	mov	r3, r2
 801db50:	2200      	movs	r2, #0
 801db52:	f7ff fe92 	bl	801d87a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801db56:	b003      	add	sp, #12
 801db58:	f85d fb04 	ldr.w	pc, [sp], #4

0801db5c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801db5c:	b40c      	push	{r2, r3}
 801db5e:	b507      	push	{r0, r1, r2, lr}
 801db60:	ab04      	add	r3, sp, #16
 801db62:	f853 2b04 	ldr.w	r2, [r3], #4
 801db66:	9301      	str	r3, [sp, #4]
 801db68:	f7ff ffef 	bl	801db4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801db6c:	b003      	add	sp, #12
 801db6e:	f85d eb04 	ldr.w	lr, [sp], #4
 801db72:	b002      	add	sp, #8
 801db74:	4770      	bx	lr
	...

0801db78 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801db78:	4b01      	ldr	r3, [pc, #4]	; (801db80 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801db7a:	6018      	str	r0, [r3, #0]
 801db7c:	4770      	bx	lr
 801db7e:	bf00      	nop
 801db80:	2002b900 	.word	0x2002b900

0801db84 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801db84:	4b06      	ldr	r3, [pc, #24]	; (801dba0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801db86:	881a      	ldrh	r2, [r3, #0]
 801db88:	4282      	cmp	r2, r0
 801db8a:	d807      	bhi.n	801db9c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801db8c:	4b05      	ldr	r3, [pc, #20]	; (801dba4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801db8e:	881b      	ldrh	r3, [r3, #0]
 801db90:	4413      	add	r3, r2
 801db92:	4298      	cmp	r0, r3
 801db94:	bfac      	ite	ge
 801db96:	2000      	movge	r0, #0
 801db98:	2001      	movlt	r0, #1
 801db9a:	4770      	bx	lr
 801db9c:	2000      	movs	r0, #0
 801db9e:	4770      	bx	lr
 801dba0:	2002b920 	.word	0x2002b920
 801dba4:	2002b924 	.word	0x2002b924

0801dba8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801dba8:	b508      	push	{r3, lr}
 801dbaa:	4601      	mov	r1, r0
 801dbac:	f7ff ffea 	bl	801db84 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801dbb0:	b118      	cbz	r0, 801dbba <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801dbb2:	4b02      	ldr	r3, [pc, #8]	; (801dbbc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801dbb4:	681b      	ldr	r3, [r3, #0]
 801dbb6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801dbba:	bd08      	pop	{r3, pc}
 801dbbc:	2002b904 	.word	0x2002b904

0801dbc0 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801dbc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dbc4:	4d28      	ldr	r5, [pc, #160]	; (801dc68 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801dbc6:	682b      	ldr	r3, [r5, #0]
 801dbc8:	2b00      	cmp	r3, #0
 801dbca:	d04a      	beq.n	801dc62 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801dbcc:	4a27      	ldr	r2, [pc, #156]	; (801dc6c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801dbce:	4e28      	ldr	r6, [pc, #160]	; (801dc70 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801dbd0:	8810      	ldrh	r0, [r2, #0]
 801dbd2:	f8b6 8000 	ldrh.w	r8, [r6]
 801dbd6:	4c27      	ldr	r4, [pc, #156]	; (801dc74 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801dbd8:	4440      	add	r0, r8
 801dbda:	4f27      	ldr	r7, [pc, #156]	; (801dc78 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801dbdc:	1c41      	adds	r1, r0, #1
 801dbde:	ea4f 0e80 	mov.w	lr, r0, lsl #2
 801dbe2:	f021 0101 	bic.w	r1, r1, #1
 801dbe6:	eb03 020e 	add.w	r2, r3, lr
 801dbea:	0409      	lsls	r1, r1, #16
 801dbec:	6022      	str	r2, [r4, #0]
 801dbee:	0c09      	lsrs	r1, r1, #16
 801dbf0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 801dbf4:	eb0e 010c 	add.w	r1, lr, ip
 801dbf8:	185a      	adds	r2, r3, r1
 801dbfa:	603a      	str	r2, [r7, #0]
 801dbfc:	220e      	movs	r2, #14
 801dbfe:	fb02 f208 	mul.w	r2, r2, r8
 801dc02:	3203      	adds	r2, #3
 801dc04:	f022 0203 	bic.w	r2, r2, #3
 801dc08:	4411      	add	r1, r2
 801dc0a:	440b      	add	r3, r1
 801dc0c:	491b      	ldr	r1, [pc, #108]	; (801dc7c <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801dc0e:	600b      	str	r3, [r1, #0]
 801dc10:	2300      	movs	r3, #0
 801dc12:	491b      	ldr	r1, [pc, #108]	; (801dc80 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801dc14:	800b      	strh	r3, [r1, #0]
 801dc16:	491b      	ldr	r1, [pc, #108]	; (801dc84 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801dc18:	6809      	ldr	r1, [r1, #0]
 801dc1a:	eba1 010e 	sub.w	r1, r1, lr
 801dc1e:	eba1 010c 	sub.w	r1, r1, ip
 801dc22:	469c      	mov	ip, r3
 801dc24:	1a8a      	subs	r2, r1, r2
 801dc26:	4918      	ldr	r1, [pc, #96]	; (801dc88 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc8>)
 801dc28:	600a      	str	r2, [r1, #0]
 801dc2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801dc2e:	4a17      	ldr	r2, [pc, #92]	; (801dc8c <_ZN8touchgfx6Bitmap10clearCacheEv+0xcc>)
 801dc30:	8013      	strh	r3, [r2, #0]
 801dc32:	4283      	cmp	r3, r0
 801dc34:	d10d      	bne.n	801dc52 <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 801dc36:	8835      	ldrh	r5, [r6, #0]
 801dc38:	2300      	movs	r3, #0
 801dc3a:	6838      	ldr	r0, [r7, #0]
 801dc3c:	240e      	movs	r4, #14
 801dc3e:	429d      	cmp	r5, r3
 801dc40:	d90f      	bls.n	801dc62 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa2>
 801dc42:	fb04 0203 	mla	r2, r4, r3, r0
 801dc46:	3301      	adds	r3, #1
 801dc48:	7b11      	ldrb	r1, [r2, #12]
 801dc4a:	f36f 1145 	bfc	r1, #5, #1
 801dc4e:	7311      	strb	r1, [r2, #12]
 801dc50:	e7f5      	b.n	801dc3e <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801dc52:	682a      	ldr	r2, [r5, #0]
 801dc54:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801dc58:	6822      	ldr	r2, [r4, #0]
 801dc5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801dc5e:	3301      	adds	r3, #1
 801dc60:	e7e7      	b.n	801dc32 <_ZN8touchgfx6Bitmap10clearCacheEv+0x72>
 801dc62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc66:	bf00      	nop
 801dc68:	2002b904 	.word	0x2002b904
 801dc6c:	2002b920 	.word	0x2002b920
 801dc70:	2002b924 	.word	0x2002b924
 801dc74:	2002b918 	.word	0x2002b918
 801dc78:	2002b908 	.word	0x2002b908
 801dc7c:	2002b910 	.word	0x2002b910
 801dc80:	2002b922 	.word	0x2002b922
 801dc84:	2002b90c 	.word	0x2002b90c
 801dc88:	2002b91c 	.word	0x2002b91c
 801dc8c:	2002b914 	.word	0x2002b914

0801dc90 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801dc90:	4b10      	ldr	r3, [pc, #64]	; (801dcd4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801dc92:	b510      	push	{r4, lr}
 801dc94:	681b      	ldr	r3, [r3, #0]
 801dc96:	b9db      	cbnz	r3, 801dcd0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801dc98:	b1d1      	cbz	r1, 801dcd0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801dc9a:	4b0f      	ldr	r3, [pc, #60]	; (801dcd8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801dc9c:	240e      	movs	r4, #14
 801dc9e:	801a      	strh	r2, [r3, #0]
 801dca0:	b292      	uxth	r2, r2
 801dca2:	4b0e      	ldr	r3, [pc, #56]	; (801dcdc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801dca4:	881b      	ldrh	r3, [r3, #0]
 801dca6:	4413      	add	r3, r2
 801dca8:	4362      	muls	r2, r4
 801dcaa:	2406      	movs	r4, #6
 801dcac:	fb04 2203 	mla	r2, r4, r3, r2
 801dcb0:	428a      	cmp	r2, r1
 801dcb2:	d305      	bcc.n	801dcc0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801dcb4:	4b0a      	ldr	r3, [pc, #40]	; (801dce0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801dcb6:	2135      	movs	r1, #53	; 0x35
 801dcb8:	4a0a      	ldr	r2, [pc, #40]	; (801dce4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801dcba:	480b      	ldr	r0, [pc, #44]	; (801dce8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801dcbc:	f00c f8c8 	bl	8029e50 <__assert_func>
 801dcc0:	4b0a      	ldr	r3, [pc, #40]	; (801dcec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801dcc2:	6019      	str	r1, [r3, #0]
 801dcc4:	4b0a      	ldr	r3, [pc, #40]	; (801dcf0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801dcc6:	6018      	str	r0, [r3, #0]
 801dcc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dccc:	f7ff bf78 	b.w	801dbc0 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801dcd0:	bd10      	pop	{r4, pc}
 801dcd2:	bf00      	nop
 801dcd4:	2002b910 	.word	0x2002b910
 801dcd8:	2002b924 	.word	0x2002b924
 801dcdc:	2002b920 	.word	0x2002b920
 801dce0:	0803141e 	.word	0x0803141e
 801dce4:	08031477 	.word	0x08031477
 801dce8:	080313f9 	.word	0x080313f9
 801dcec:	2002b90c 	.word	0x2002b90c
 801dcf0:	2002b904 	.word	0x2002b904

0801dcf4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801dcf4:	b470      	push	{r4, r5, r6}
 801dcf6:	4c07      	ldr	r4, [pc, #28]	; (801dd14 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801dcf8:	4605      	mov	r5, r0
 801dcfa:	4610      	mov	r0, r2
 801dcfc:	9a03      	ldr	r2, [sp, #12]
 801dcfe:	6826      	ldr	r6, [r4, #0]
 801dd00:	b936      	cbnz	r6, 801dd10 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801dd02:	6025      	str	r5, [r4, #0]
 801dd04:	4c04      	ldr	r4, [pc, #16]	; (801dd18 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801dd06:	8021      	strh	r1, [r4, #0]
 801dd08:	4619      	mov	r1, r3
 801dd0a:	bc70      	pop	{r4, r5, r6}
 801dd0c:	f7ff bfc0 	b.w	801dc90 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801dd10:	bc70      	pop	{r4, r5, r6}
 801dd12:	4770      	bx	lr
 801dd14:	2002b928 	.word	0x2002b928
 801dd18:	2002b920 	.word	0x2002b920

0801dd1c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801dd1c:	b508      	push	{r3, lr}
 801dd1e:	4b14      	ldr	r3, [pc, #80]	; (801dd70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801dd20:	6819      	ldr	r1, [r3, #0]
 801dd22:	b931      	cbnz	r1, 801dd32 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801dd24:	4b13      	ldr	r3, [pc, #76]	; (801dd74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801dd26:	f240 4185 	movw	r1, #1157	; 0x485
 801dd2a:	4a13      	ldr	r2, [pc, #76]	; (801dd78 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801dd2c:	4813      	ldr	r0, [pc, #76]	; (801dd7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801dd2e:	f00c f88f 	bl	8029e50 <__assert_func>
 801dd32:	4a13      	ldr	r2, [pc, #76]	; (801dd80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801dd34:	8803      	ldrh	r3, [r0, #0]
 801dd36:	8812      	ldrh	r2, [r2, #0]
 801dd38:	4293      	cmp	r3, r2
 801dd3a:	d204      	bcs.n	801dd46 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801dd3c:	2214      	movs	r2, #20
 801dd3e:	fb02 1303 	mla	r3, r2, r3, r1
 801dd42:	8918      	ldrh	r0, [r3, #8]
 801dd44:	bd08      	pop	{r3, pc}
 801dd46:	490f      	ldr	r1, [pc, #60]	; (801dd84 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801dd48:	8809      	ldrh	r1, [r1, #0]
 801dd4a:	4411      	add	r1, r2
 801dd4c:	428b      	cmp	r3, r1
 801dd4e:	da06      	bge.n	801dd5e <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801dd50:	1a9b      	subs	r3, r3, r2
 801dd52:	4a0d      	ldr	r2, [pc, #52]	; (801dd88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801dd54:	210e      	movs	r1, #14
 801dd56:	6812      	ldr	r2, [r2, #0]
 801dd58:	fb01 2303 	mla	r3, r1, r3, r2
 801dd5c:	e7f1      	b.n	801dd42 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801dd5e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dd62:	4293      	cmp	r3, r2
 801dd64:	bf0a      	itet	eq
 801dd66:	4b09      	ldreq	r3, [pc, #36]	; (801dd8c <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801dd68:	2000      	movne	r0, #0
 801dd6a:	8818      	ldrheq	r0, [r3, #0]
 801dd6c:	e7ea      	b.n	801dd44 <_ZNK8touchgfx6Bitmap8getWidthEv+0x28>
 801dd6e:	bf00      	nop
 801dd70:	2002b928 	.word	0x2002b928
 801dd74:	08030688 	.word	0x08030688
 801dd78:	08031524 	.word	0x08031524
 801dd7c:	080313f9 	.word	0x080313f9
 801dd80:	2002b920 	.word	0x2002b920
 801dd84:	2002b924 	.word	0x2002b924
 801dd88:	2002b908 	.word	0x2002b908
 801dd8c:	2002b894 	.word	0x2002b894

0801dd90 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801dd90:	b508      	push	{r3, lr}
 801dd92:	4b14      	ldr	r3, [pc, #80]	; (801dde4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801dd94:	6819      	ldr	r1, [r3, #0]
 801dd96:	b931      	cbnz	r1, 801dda6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801dd98:	4b13      	ldr	r3, [pc, #76]	; (801dde8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801dd9a:	f240 4199 	movw	r1, #1177	; 0x499
 801dd9e:	4a13      	ldr	r2, [pc, #76]	; (801ddec <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801dda0:	4813      	ldr	r0, [pc, #76]	; (801ddf0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801dda2:	f00c f855 	bl	8029e50 <__assert_func>
 801dda6:	4a13      	ldr	r2, [pc, #76]	; (801ddf4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801dda8:	8803      	ldrh	r3, [r0, #0]
 801ddaa:	8812      	ldrh	r2, [r2, #0]
 801ddac:	4293      	cmp	r3, r2
 801ddae:	d204      	bcs.n	801ddba <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801ddb0:	2214      	movs	r2, #20
 801ddb2:	fb02 1303 	mla	r3, r2, r3, r1
 801ddb6:	8958      	ldrh	r0, [r3, #10]
 801ddb8:	bd08      	pop	{r3, pc}
 801ddba:	490f      	ldr	r1, [pc, #60]	; (801ddf8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801ddbc:	8809      	ldrh	r1, [r1, #0]
 801ddbe:	4411      	add	r1, r2
 801ddc0:	428b      	cmp	r3, r1
 801ddc2:	da06      	bge.n	801ddd2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801ddc4:	1a9b      	subs	r3, r3, r2
 801ddc6:	4a0d      	ldr	r2, [pc, #52]	; (801ddfc <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801ddc8:	210e      	movs	r1, #14
 801ddca:	6812      	ldr	r2, [r2, #0]
 801ddcc:	fb01 2303 	mla	r3, r1, r3, r2
 801ddd0:	e7f1      	b.n	801ddb6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801ddd2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801ddd6:	4293      	cmp	r3, r2
 801ddd8:	bf0a      	itet	eq
 801ddda:	4b09      	ldreq	r3, [pc, #36]	; (801de00 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801dddc:	2000      	movne	r0, #0
 801ddde:	8818      	ldrheq	r0, [r3, #0]
 801dde0:	e7ea      	b.n	801ddb8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x28>
 801dde2:	bf00      	nop
 801dde4:	2002b928 	.word	0x2002b928
 801dde8:	08030688 	.word	0x08030688
 801ddec:	08031550 	.word	0x08031550
 801ddf0:	080313f9 	.word	0x080313f9
 801ddf4:	2002b920 	.word	0x2002b920
 801ddf8:	2002b924 	.word	0x2002b924
 801ddfc:	2002b908 	.word	0x2002b908
 801de00:	2002b896 	.word	0x2002b896

0801de04 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801de04:	4b23      	ldr	r3, [pc, #140]	; (801de94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801de06:	b510      	push	{r4, lr}
 801de08:	681c      	ldr	r4, [r3, #0]
 801de0a:	b934      	cbnz	r4, 801de1a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801de0c:	4b22      	ldr	r3, [pc, #136]	; (801de98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801de0e:	f240 41ad 	movw	r1, #1197	; 0x4ad
 801de12:	4a22      	ldr	r2, [pc, #136]	; (801de9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801de14:	4822      	ldr	r0, [pc, #136]	; (801dea0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801de16:	f00c f81b 	bl	8029e50 <__assert_func>
 801de1a:	4a22      	ldr	r2, [pc, #136]	; (801dea4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801de1c:	880b      	ldrh	r3, [r1, #0]
 801de1e:	8812      	ldrh	r2, [r2, #0]
 801de20:	4293      	cmp	r3, r2
 801de22:	d211      	bcs.n	801de48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801de24:	2214      	movs	r2, #20
 801de26:	fb02 4303 	mla	r3, r2, r3, r4
 801de2a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801de2e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801de32:	8a1a      	ldrh	r2, [r3, #16]
 801de34:	8a5b      	ldrh	r3, [r3, #18]
 801de36:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801de3a:	8004      	strh	r4, [r0, #0]
 801de3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801de40:	8041      	strh	r1, [r0, #2]
 801de42:	8082      	strh	r2, [r0, #4]
 801de44:	80c3      	strh	r3, [r0, #6]
 801de46:	e00e      	b.n	801de66 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801de48:	4917      	ldr	r1, [pc, #92]	; (801dea8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801de4a:	8809      	ldrh	r1, [r1, #0]
 801de4c:	4411      	add	r1, r2
 801de4e:	428b      	cmp	r3, r1
 801de50:	da0a      	bge.n	801de68 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801de52:	1a9b      	subs	r3, r3, r2
 801de54:	4a15      	ldr	r2, [pc, #84]	; (801deac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801de56:	210e      	movs	r1, #14
 801de58:	6812      	ldr	r2, [r2, #0]
 801de5a:	fb01 2303 	mla	r3, r1, r3, r2
 801de5e:	681a      	ldr	r2, [r3, #0]
 801de60:	6002      	str	r2, [r0, #0]
 801de62:	685a      	ldr	r2, [r3, #4]
 801de64:	6042      	str	r2, [r0, #4]
 801de66:	bd10      	pop	{r4, pc}
 801de68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801de6c:	4293      	cmp	r3, r2
 801de6e:	d10b      	bne.n	801de88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801de70:	4b0f      	ldr	r3, [pc, #60]	; (801deb0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801de72:	f9b3 1000 	ldrsh.w	r1, [r3]
 801de76:	4b0f      	ldr	r3, [pc, #60]	; (801deb4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801de78:	8081      	strh	r1, [r0, #4]
 801de7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801de7e:	2300      	movs	r3, #0
 801de80:	80c2      	strh	r2, [r0, #6]
 801de82:	8003      	strh	r3, [r0, #0]
 801de84:	8043      	strh	r3, [r0, #2]
 801de86:	e7ee      	b.n	801de66 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x62>
 801de88:	2300      	movs	r3, #0
 801de8a:	8003      	strh	r3, [r0, #0]
 801de8c:	8043      	strh	r3, [r0, #2]
 801de8e:	8083      	strh	r3, [r0, #4]
 801de90:	e7d8      	b.n	801de44 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801de92:	bf00      	nop
 801de94:	2002b928 	.word	0x2002b928
 801de98:	08030688 	.word	0x08030688
 801de9c:	080314bd 	.word	0x080314bd
 801dea0:	080313f9 	.word	0x080313f9
 801dea4:	2002b920 	.word	0x2002b920
 801dea8:	2002b924 	.word	0x2002b924
 801deac:	2002b908 	.word	0x2002b908
 801deb0:	2002b894 	.word	0x2002b894
 801deb4:	2002b896 	.word	0x2002b896

0801deb8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801deb8:	4b18      	ldr	r3, [pc, #96]	; (801df1c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801deba:	681b      	ldr	r3, [r3, #0]
 801debc:	b34b      	cbz	r3, 801df12 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801debe:	4a18      	ldr	r2, [pc, #96]	; (801df20 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801dec0:	8800      	ldrh	r0, [r0, #0]
 801dec2:	8812      	ldrh	r2, [r2, #0]
 801dec4:	4290      	cmp	r0, r2
 801dec6:	d211      	bcs.n	801deec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801dec8:	2214      	movs	r2, #20
 801deca:	fb02 3300 	mla	r3, r2, r0, r3
 801dece:	8a1a      	ldrh	r2, [r3, #16]
 801ded0:	8919      	ldrh	r1, [r3, #8]
 801ded2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801ded6:	428a      	cmp	r2, r1
 801ded8:	db1d      	blt.n	801df16 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801deda:	8a58      	ldrh	r0, [r3, #18]
 801dedc:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801dee0:	895b      	ldrh	r3, [r3, #10]
 801dee2:	4298      	cmp	r0, r3
 801dee4:	bfac      	ite	ge
 801dee6:	2000      	movge	r0, #0
 801dee8:	2001      	movlt	r0, #1
 801deea:	4770      	bx	lr
 801deec:	4b0d      	ldr	r3, [pc, #52]	; (801df24 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801deee:	881b      	ldrh	r3, [r3, #0]
 801def0:	4413      	add	r3, r2
 801def2:	4298      	cmp	r0, r3
 801def4:	da0d      	bge.n	801df12 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801def6:	4b0c      	ldr	r3, [pc, #48]	; (801df28 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801def8:	1a80      	subs	r0, r0, r2
 801defa:	220e      	movs	r2, #14
 801defc:	681b      	ldr	r3, [r3, #0]
 801defe:	fb02 3300 	mla	r3, r2, r0, r3
 801df02:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801df06:	891a      	ldrh	r2, [r3, #8]
 801df08:	4291      	cmp	r1, r2
 801df0a:	db04      	blt.n	801df16 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801df0c:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801df10:	e7e6      	b.n	801dee0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801df12:	2000      	movs	r0, #0
 801df14:	4770      	bx	lr
 801df16:	2001      	movs	r0, #1
 801df18:	4770      	bx	lr
 801df1a:	bf00      	nop
 801df1c:	2002b928 	.word	0x2002b928
 801df20:	2002b920 	.word	0x2002b920
 801df24:	2002b924 	.word	0x2002b924
 801df28:	2002b908 	.word	0x2002b908

0801df2c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801df2c:	b508      	push	{r3, lr}
 801df2e:	4b12      	ldr	r3, [pc, #72]	; (801df78 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801df30:	6819      	ldr	r1, [r3, #0]
 801df32:	b931      	cbnz	r1, 801df42 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801df34:	4b11      	ldr	r3, [pc, #68]	; (801df7c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801df36:	f240 41d1 	movw	r1, #1233	; 0x4d1
 801df3a:	4a11      	ldr	r2, [pc, #68]	; (801df80 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801df3c:	4811      	ldr	r0, [pc, #68]	; (801df84 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801df3e:	f00b ff87 	bl	8029e50 <__assert_func>
 801df42:	8803      	ldrh	r3, [r0, #0]
 801df44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801df48:	4293      	cmp	r3, r2
 801df4a:	d012      	beq.n	801df72 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801df4c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801df50:	4293      	cmp	r3, r2
 801df52:	d103      	bne.n	801df5c <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801df54:	4b0c      	ldr	r3, [pc, #48]	; (801df88 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801df56:	681b      	ldr	r3, [r3, #0]
 801df58:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801df5a:	bd08      	pop	{r3, pc}
 801df5c:	4a0b      	ldr	r2, [pc, #44]	; (801df8c <_ZNK8touchgfx6Bitmap7getDataEv+0x60>)
 801df5e:	6812      	ldr	r2, [r2, #0]
 801df60:	b11a      	cbz	r2, 801df6a <_ZNK8touchgfx6Bitmap7getDataEv+0x3e>
 801df62:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801df66:	2800      	cmp	r0, #0
 801df68:	d1f7      	bne.n	801df5a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801df6a:	2214      	movs	r2, #20
 801df6c:	4353      	muls	r3, r2
 801df6e:	58c8      	ldr	r0, [r1, r3]
 801df70:	e7f3      	b.n	801df5a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801df72:	2000      	movs	r0, #0
 801df74:	e7f1      	b.n	801df5a <_ZNK8touchgfx6Bitmap7getDataEv+0x2e>
 801df76:	bf00      	nop
 801df78:	2002b928 	.word	0x2002b928
 801df7c:	08030688 	.word	0x08030688
 801df80:	080314f3 	.word	0x080314f3
 801df84:	080313f9 	.word	0x080313f9
 801df88:	2002b8a0 	.word	0x2002b8a0
 801df8c:	2002b904 	.word	0x2002b904

0801df90 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801df90:	8802      	ldrh	r2, [r0, #0]
 801df92:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801df96:	429a      	cmp	r2, r3
 801df98:	d845      	bhi.n	801e026 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801df9a:	4b24      	ldr	r3, [pc, #144]	; (801e02c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801df9c:	8818      	ldrh	r0, [r3, #0]
 801df9e:	4282      	cmp	r2, r0
 801dfa0:	d221      	bcs.n	801dfe6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x56>
 801dfa2:	4b23      	ldr	r3, [pc, #140]	; (801e030 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801dfa4:	6819      	ldr	r1, [r3, #0]
 801dfa6:	2314      	movs	r3, #20
 801dfa8:	fb03 1302 	mla	r3, r3, r2, r1
 801dfac:	6858      	ldr	r0, [r3, #4]
 801dfae:	2800      	cmp	r0, #0
 801dfb0:	d03a      	beq.n	801e028 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801dfb2:	4920      	ldr	r1, [pc, #128]	; (801e034 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801dfb4:	6809      	ldr	r1, [r1, #0]
 801dfb6:	2900      	cmp	r1, #0
 801dfb8:	d036      	beq.n	801e028 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801dfba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801dfbe:	2900      	cmp	r1, #0
 801dfc0:	d032      	beq.n	801e028 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>
 801dfc2:	891a      	ldrh	r2, [r3, #8]
 801dfc4:	8958      	ldrh	r0, [r3, #10]
 801dfc6:	4350      	muls	r0, r2
 801dfc8:	7c5a      	ldrb	r2, [r3, #17]
 801dfca:	7cdb      	ldrb	r3, [r3, #19]
 801dfcc:	0952      	lsrs	r2, r2, #5
 801dfce:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801dfd2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801dfd6:	2b0b      	cmp	r3, #11
 801dfd8:	bf18      	it	ne
 801dfda:	0040      	lslne	r0, r0, #1
 801dfdc:	3003      	adds	r0, #3
 801dfde:	f020 0003 	bic.w	r0, r0, #3
 801dfe2:	4408      	add	r0, r1
 801dfe4:	4770      	bx	lr
 801dfe6:	4b14      	ldr	r3, [pc, #80]	; (801e038 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa8>)
 801dfe8:	881b      	ldrh	r3, [r3, #0]
 801dfea:	4403      	add	r3, r0
 801dfec:	429a      	cmp	r2, r3
 801dfee:	da1a      	bge.n	801e026 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801dff0:	4b12      	ldr	r3, [pc, #72]	; (801e03c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xac>)
 801dff2:	1a10      	subs	r0, r2, r0
 801dff4:	210e      	movs	r1, #14
 801dff6:	681b      	ldr	r3, [r3, #0]
 801dff8:	fb01 3000 	mla	r0, r1, r0, r3
 801dffc:	7b03      	ldrb	r3, [r0, #12]
 801dffe:	f003 031f 	and.w	r3, r3, #31
 801e002:	2b0b      	cmp	r3, #11
 801e004:	d10b      	bne.n	801e01e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801e006:	8903      	ldrh	r3, [r0, #8]
 801e008:	8940      	ldrh	r0, [r0, #10]
 801e00a:	4358      	muls	r0, r3
 801e00c:	4b09      	ldr	r3, [pc, #36]	; (801e034 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801e00e:	3003      	adds	r0, #3
 801e010:	6819      	ldr	r1, [r3, #0]
 801e012:	f020 0303 	bic.w	r3, r0, #3
 801e016:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801e01a:	4418      	add	r0, r3
 801e01c:	4770      	bx	lr
 801e01e:	2b0d      	cmp	r3, #13
 801e020:	d101      	bne.n	801e026 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x96>
 801e022:	300d      	adds	r0, #13
 801e024:	4770      	bx	lr
 801e026:	2000      	movs	r0, #0
 801e028:	4770      	bx	lr
 801e02a:	bf00      	nop
 801e02c:	2002b920 	.word	0x2002b920
 801e030:	2002b928 	.word	0x2002b928
 801e034:	2002b904 	.word	0x2002b904
 801e038:	2002b924 	.word	0x2002b924
 801e03c:	2002b908 	.word	0x2002b908

0801e040 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801e040:	4b17      	ldr	r3, [pc, #92]	; (801e0a0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801e042:	b510      	push	{r4, lr}
 801e044:	6819      	ldr	r1, [r3, #0]
 801e046:	8803      	ldrh	r3, [r0, #0]
 801e048:	b1e9      	cbz	r1, 801e086 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801e04a:	4a16      	ldr	r2, [pc, #88]	; (801e0a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801e04c:	8812      	ldrh	r2, [r2, #0]
 801e04e:	429a      	cmp	r2, r3
 801e050:	d90a      	bls.n	801e068 <_ZNK8touchgfx6Bitmap9getFormatEv+0x28>
 801e052:	2214      	movs	r2, #20
 801e054:	fb02 1303 	mla	r3, r2, r3, r1
 801e058:	7c58      	ldrb	r0, [r3, #17]
 801e05a:	0942      	lsrs	r2, r0, #5
 801e05c:	7cd8      	ldrb	r0, [r3, #19]
 801e05e:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801e062:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801e066:	bd10      	pop	{r4, pc}
 801e068:	490f      	ldr	r1, [pc, #60]	; (801e0a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801e06a:	8809      	ldrh	r1, [r1, #0]
 801e06c:	4411      	add	r1, r2
 801e06e:	428b      	cmp	r3, r1
 801e070:	da09      	bge.n	801e086 <_ZNK8touchgfx6Bitmap9getFormatEv+0x46>
 801e072:	1a9b      	subs	r3, r3, r2
 801e074:	4a0d      	ldr	r2, [pc, #52]	; (801e0ac <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801e076:	210e      	movs	r1, #14
 801e078:	6812      	ldr	r2, [r2, #0]
 801e07a:	fb01 2303 	mla	r3, r1, r3, r2
 801e07e:	7b18      	ldrb	r0, [r3, #12]
 801e080:	f000 001f 	and.w	r0, r0, #31
 801e084:	e7ef      	b.n	801e066 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801e086:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e08a:	4293      	cmp	r3, r2
 801e08c:	d106      	bne.n	801e09c <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 801e08e:	f7f9 fd09 	bl	8017aa4 <_ZN8touchgfx3HAL3lcdEv>
 801e092:	6803      	ldr	r3, [r0, #0]
 801e094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e09a:	4718      	bx	r3
 801e09c:	2000      	movs	r0, #0
 801e09e:	e7e2      	b.n	801e066 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801e0a0:	2002b928 	.word	0x2002b928
 801e0a4:	2002b920 	.word	0x2002b920
 801e0a8:	2002b924 	.word	0x2002b924
 801e0ac:	2002b908 	.word	0x2002b908

0801e0b0 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801e0b0:	2010      	movs	r0, #16
 801e0b2:	4770      	bx	lr

0801e0b4 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801e0b4:	2000      	movs	r0, #0
 801e0b6:	4770      	bx	lr

0801e0b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e0b8:	2bff      	cmp	r3, #255	; 0xff
 801e0ba:	d050      	beq.n	801e15e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801e0bc:	2a0b      	cmp	r2, #11
 801e0be:	d04a      	beq.n	801e156 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e0c0:	d80e      	bhi.n	801e0e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801e0c2:	2a03      	cmp	r2, #3
 801e0c4:	d03f      	beq.n	801e146 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801e0c6:	d804      	bhi.n	801e0d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801e0c8:	2a01      	cmp	r2, #1
 801e0ca:	d03e      	beq.n	801e14a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801e0cc:	d93f      	bls.n	801e14e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801e0ce:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801e0d0:	4770      	bx	lr
 801e0d2:	2a09      	cmp	r2, #9
 801e0d4:	d03f      	beq.n	801e156 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801e0d6:	d83c      	bhi.n	801e152 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e0d8:	2a08      	cmp	r2, #8
 801e0da:	d03a      	beq.n	801e152 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801e0dc:	2000      	movs	r0, #0
 801e0de:	4770      	bx	lr
 801e0e0:	2a2f      	cmp	r2, #47	; 0x2f
 801e0e2:	d024      	beq.n	801e12e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801e0e4:	d80d      	bhi.n	801e102 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801e0e6:	2a2d      	cmp	r2, #45	; 0x2d
 801e0e8:	d014      	beq.n	801e114 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801e0ea:	d826      	bhi.n	801e13a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801e0ec:	2a2c      	cmp	r2, #44	; 0x2c
 801e0ee:	d1f5      	bne.n	801e0dc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e0f0:	684b      	ldr	r3, [r1, #4]
 801e0f2:	781b      	ldrb	r3, [r3, #0]
 801e0f4:	2b01      	cmp	r3, #1
 801e0f6:	d018      	beq.n	801e12a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801e0f8:	d323      	bcc.n	801e142 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801e0fa:	2b02      	cmp	r3, #2
 801e0fc:	d1ee      	bne.n	801e0dc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e0fe:	6880      	ldr	r0, [r0, #8]
 801e100:	4770      	bx	lr
 801e102:	2a31      	cmp	r2, #49	; 0x31
 801e104:	d004      	beq.n	801e110 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801e106:	d328      	bcc.n	801e15a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e108:	2a32      	cmp	r2, #50	; 0x32
 801e10a:	d026      	beq.n	801e15a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801e10c:	2a33      	cmp	r2, #51	; 0x33
 801e10e:	d1e5      	bne.n	801e0dc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e110:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801e112:	4770      	bx	lr
 801e114:	684b      	ldr	r3, [r1, #4]
 801e116:	781b      	ldrb	r3, [r3, #0]
 801e118:	2b01      	cmp	r3, #1
 801e11a:	d004      	beq.n	801e126 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801e11c:	d30b      	bcc.n	801e136 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e11e:	2b02      	cmp	r3, #2
 801e120:	d1dc      	bne.n	801e0dc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e122:	6900      	ldr	r0, [r0, #16]
 801e124:	4770      	bx	lr
 801e126:	6a00      	ldr	r0, [r0, #32]
 801e128:	4770      	bx	lr
 801e12a:	6980      	ldr	r0, [r0, #24]
 801e12c:	4770      	bx	lr
 801e12e:	684b      	ldr	r3, [r1, #4]
 801e130:	781b      	ldrb	r3, [r3, #0]
 801e132:	2b00      	cmp	r3, #0
 801e134:	d1d2      	bne.n	801e0dc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e136:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801e138:	4770      	bx	lr
 801e13a:	684b      	ldr	r3, [r1, #4]
 801e13c:	781b      	ldrb	r3, [r3, #0]
 801e13e:	2b00      	cmp	r3, #0
 801e140:	d1cc      	bne.n	801e0dc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e142:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801e144:	4770      	bx	lr
 801e146:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801e148:	4770      	bx	lr
 801e14a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801e14c:	4770      	bx	lr
 801e14e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801e150:	4770      	bx	lr
 801e152:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801e154:	4770      	bx	lr
 801e156:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801e158:	4770      	bx	lr
 801e15a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801e15c:	4770      	bx	lr
 801e15e:	2a0b      	cmp	r2, #11
 801e160:	d049      	beq.n	801e1f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e162:	d80e      	bhi.n	801e182 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801e164:	2a03      	cmp	r2, #3
 801e166:	d040      	beq.n	801e1ea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801e168:	d804      	bhi.n	801e174 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801e16a:	2a01      	cmp	r2, #1
 801e16c:	d03f      	beq.n	801e1ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801e16e:	d940      	bls.n	801e1f2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801e170:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801e172:	4770      	bx	lr
 801e174:	2a09      	cmp	r2, #9
 801e176:	d03e      	beq.n	801e1f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e178:	d801      	bhi.n	801e17e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801e17a:	2a08      	cmp	r2, #8
 801e17c:	d1ae      	bne.n	801e0dc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e17e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801e180:	4770      	bx	lr
 801e182:	2a2f      	cmp	r2, #47	; 0x2f
 801e184:	d024      	beq.n	801e1d0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801e186:	d80d      	bhi.n	801e1a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801e188:	2a2d      	cmp	r2, #45	; 0x2d
 801e18a:	d014      	beq.n	801e1b6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801e18c:	d826      	bhi.n	801e1dc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801e18e:	2a2c      	cmp	r2, #44	; 0x2c
 801e190:	d1a4      	bne.n	801e0dc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e192:	684b      	ldr	r3, [r1, #4]
 801e194:	781b      	ldrb	r3, [r3, #0]
 801e196:	2b01      	cmp	r3, #1
 801e198:	d018      	beq.n	801e1cc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801e19a:	d324      	bcc.n	801e1e6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801e19c:	2b02      	cmp	r3, #2
 801e19e:	d19d      	bne.n	801e0dc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e1a0:	68c0      	ldr	r0, [r0, #12]
 801e1a2:	4770      	bx	lr
 801e1a4:	2a31      	cmp	r2, #49	; 0x31
 801e1a6:	d004      	beq.n	801e1b2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801e1a8:	d327      	bcc.n	801e1fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801e1aa:	2a32      	cmp	r2, #50	; 0x32
 801e1ac:	d025      	beq.n	801e1fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801e1ae:	2a33      	cmp	r2, #51	; 0x33
 801e1b0:	d194      	bne.n	801e0dc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e1b2:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801e1b4:	4770      	bx	lr
 801e1b6:	684b      	ldr	r3, [r1, #4]
 801e1b8:	781b      	ldrb	r3, [r3, #0]
 801e1ba:	2b01      	cmp	r3, #1
 801e1bc:	d004      	beq.n	801e1c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801e1be:	d30b      	bcc.n	801e1d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801e1c0:	2b02      	cmp	r3, #2
 801e1c2:	d18b      	bne.n	801e0dc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e1c4:	6940      	ldr	r0, [r0, #20]
 801e1c6:	4770      	bx	lr
 801e1c8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801e1ca:	4770      	bx	lr
 801e1cc:	69c0      	ldr	r0, [r0, #28]
 801e1ce:	4770      	bx	lr
 801e1d0:	684b      	ldr	r3, [r1, #4]
 801e1d2:	781b      	ldrb	r3, [r3, #0]
 801e1d4:	2b00      	cmp	r3, #0
 801e1d6:	d181      	bne.n	801e0dc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e1d8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801e1da:	4770      	bx	lr
 801e1dc:	684b      	ldr	r3, [r1, #4]
 801e1de:	781b      	ldrb	r3, [r3, #0]
 801e1e0:	2b00      	cmp	r3, #0
 801e1e2:	f47f af7b 	bne.w	801e0dc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e1e6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801e1e8:	4770      	bx	lr
 801e1ea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801e1ec:	4770      	bx	lr
 801e1ee:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801e1f0:	4770      	bx	lr
 801e1f2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801e1f4:	4770      	bx	lr
 801e1f6:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801e1f8:	4770      	bx	lr
 801e1fa:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801e1fc:	4770      	bx	lr

0801e1fe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e1fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e202:	b087      	sub	sp, #28
 801e204:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e206:	9205      	str	r2, [sp, #20]
 801e208:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e20c:	9101      	str	r1, [sp, #4]
 801e20e:	9202      	str	r2, [sp, #8]
 801e210:	6841      	ldr	r1, [r0, #4]
 801e212:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801e216:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801e21a:	fb01 2404 	mla	r4, r1, r4, r2
 801e21e:	6802      	ldr	r2, [r0, #0]
 801e220:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e224:	f8de 2000 	ldr.w	r2, [lr]
 801e228:	9203      	str	r2, [sp, #12]
 801e22a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801e22e:	3204      	adds	r2, #4
 801e230:	9204      	str	r2, [sp, #16]
 801e232:	9a02      	ldr	r2, [sp, #8]
 801e234:	43d6      	mvns	r6, r2
 801e236:	b2f6      	uxtb	r6, r6
 801e238:	9a01      	ldr	r2, [sp, #4]
 801e23a:	2a00      	cmp	r2, #0
 801e23c:	dc03      	bgt.n	801e246 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e23e:	9a05      	ldr	r2, [sp, #20]
 801e240:	2a00      	cmp	r2, #0
 801e242:	f340 8129 	ble.w	801e498 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e246:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e248:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801e24c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e250:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e252:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801e256:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e25a:	2b00      	cmp	r3, #0
 801e25c:	dd0e      	ble.n	801e27c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e25e:	1408      	asrs	r0, r1, #16
 801e260:	d405      	bmi.n	801e26e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e262:	4560      	cmp	r0, ip
 801e264:	da03      	bge.n	801e26e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e266:	1410      	asrs	r0, r2, #16
 801e268:	d401      	bmi.n	801e26e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e26a:	42b8      	cmp	r0, r7
 801e26c:	db07      	blt.n	801e27e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e26e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e270:	3b01      	subs	r3, #1
 801e272:	3402      	adds	r4, #2
 801e274:	4401      	add	r1, r0
 801e276:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e278:	4402      	add	r2, r0
 801e27a:	e7ee      	b.n	801e25a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e27c:	d071      	beq.n	801e362 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e27e:	1e58      	subs	r0, r3, #1
 801e280:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e282:	fb05 1500 	mla	r5, r5, r0, r1
 801e286:	142d      	asrs	r5, r5, #16
 801e288:	d45f      	bmi.n	801e34a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e28a:	4565      	cmp	r5, ip
 801e28c:	da5d      	bge.n	801e34a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e28e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e290:	fb05 2000 	mla	r0, r5, r0, r2
 801e294:	1400      	asrs	r0, r0, #16
 801e296:	d458      	bmi.n	801e34a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e298:	42b8      	cmp	r0, r7
 801e29a:	da56      	bge.n	801e34a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e29c:	4699      	mov	r9, r3
 801e29e:	46a2      	mov	sl, r4
 801e2a0:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801e2a4:	f1b9 0f00 	cmp.w	r9, #0
 801e2a8:	dd57      	ble.n	801e35a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801e2aa:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e2ae:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e2b2:	9803      	ldr	r0, [sp, #12]
 801e2b4:	140d      	asrs	r5, r1, #16
 801e2b6:	f109 39ff 	add.w	r9, r9, #4294967295
 801e2ba:	fb07 000c 	mla	r0, r7, ip, r0
 801e2be:	5d40      	ldrb	r0, [r0, r5]
 801e2c0:	9d04      	ldr	r5, [sp, #16]
 801e2c2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e2c6:	f8ba 5000 	ldrh.w	r5, [sl]
 801e2ca:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e2ce:	122f      	asrs	r7, r5, #8
 801e2d0:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801e2d4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e2d8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e2dc:	00ed      	lsls	r5, r5, #3
 801e2de:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801e2e2:	fb17 f706 	smulbb	r7, r7, r6
 801e2e6:	b2ed      	uxtb	r5, r5
 801e2e8:	fb18 f806 	smulbb	r8, r8, r6
 801e2ec:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801e2f0:	10c7      	asrs	r7, r0, #3
 801e2f2:	fb15 f506 	smulbb	r5, r5, r6
 801e2f6:	00c0      	lsls	r0, r0, #3
 801e2f8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e2fc:	fa1f fc8c 	uxth.w	ip, ip
 801e300:	b2c0      	uxtb	r0, r0
 801e302:	fb07 870b 	mla	r7, r7, fp, r8
 801e306:	fb00 500b 	mla	r0, r0, fp, r5
 801e30a:	f10c 0501 	add.w	r5, ip, #1
 801e30e:	b2bf      	uxth	r7, r7
 801e310:	b280      	uxth	r0, r0
 801e312:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e316:	f107 0801 	add.w	r8, r7, #1
 801e31a:	1c45      	adds	r5, r0, #1
 801e31c:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801e320:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e324:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e328:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e32a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e32e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e332:	4401      	add	r1, r0
 801e334:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e338:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e33a:	ea45 0c0c 	orr.w	ip, r5, ip
 801e33e:	4402      	add	r2, r0
 801e340:	ea4c 0c08 	orr.w	ip, ip, r8
 801e344:	f82a cb02 	strh.w	ip, [sl], #2
 801e348:	e7ac      	b.n	801e2a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e34a:	f04f 0800 	mov.w	r8, #0
 801e34e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801e352:	eb03 0008 	add.w	r0, r3, r8
 801e356:	2800      	cmp	r0, #0
 801e358:	dc41      	bgt.n	801e3de <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e35a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e35e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e362:	9b01      	ldr	r3, [sp, #4]
 801e364:	2b00      	cmp	r3, #0
 801e366:	f340 8097 	ble.w	801e498 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e36a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e36e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e370:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e374:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e378:	eef0 6a62 	vmov.f32	s13, s5
 801e37c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e380:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e384:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e388:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801e38c:	eef0 6a43 	vmov.f32	s13, s6
 801e390:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e394:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801e398:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e39c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e3a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e3a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e3a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e3ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e3b0:	ee12 2a90 	vmov	r2, s5
 801e3b4:	eef0 2a47 	vmov.f32	s5, s14
 801e3b8:	fb92 f3f3 	sdiv	r3, r2, r3
 801e3bc:	ee13 2a10 	vmov	r2, s6
 801e3c0:	9313      	str	r3, [sp, #76]	; 0x4c
 801e3c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e3c4:	eeb0 3a67 	vmov.f32	s6, s15
 801e3c8:	fb92 f3f3 	sdiv	r3, r2, r3
 801e3cc:	9314      	str	r3, [sp, #80]	; 0x50
 801e3ce:	9b01      	ldr	r3, [sp, #4]
 801e3d0:	9a05      	ldr	r2, [sp, #20]
 801e3d2:	3b01      	subs	r3, #1
 801e3d4:	9301      	str	r3, [sp, #4]
 801e3d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e3d8:	bf08      	it	eq
 801e3da:	4613      	moveq	r3, r2
 801e3dc:	e72c      	b.n	801e238 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e3de:	140f      	asrs	r7, r1, #16
 801e3e0:	d453      	bmi.n	801e48a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e3e2:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e3e6:	42bd      	cmp	r5, r7
 801e3e8:	dd4f      	ble.n	801e48a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e3ea:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e3ee:	d44c      	bmi.n	801e48a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e3f0:	f8de 000c 	ldr.w	r0, [lr, #12]
 801e3f4:	4560      	cmp	r0, ip
 801e3f6:	dd48      	ble.n	801e48a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e3f8:	9803      	ldr	r0, [sp, #12]
 801e3fa:	b22d      	sxth	r5, r5
 801e3fc:	fb0c 0505 	mla	r5, ip, r5, r0
 801e400:	5de8      	ldrb	r0, [r5, r7]
 801e402:	9d04      	ldr	r5, [sp, #16]
 801e404:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e408:	f06f 0501 	mvn.w	r5, #1
 801e40c:	fb05 fb08 	mul.w	fp, r5, r8
 801e410:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e414:	f834 500b 	ldrh.w	r5, [r4, fp]
 801e418:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e41c:	122f      	asrs	r7, r5, #8
 801e41e:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801e422:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e426:	00ed      	lsls	r5, r5, #3
 801e428:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801e42c:	fb17 f706 	smulbb	r7, r7, r6
 801e430:	b2ed      	uxtb	r5, r5
 801e432:	fb19 f906 	smulbb	r9, r9, r6
 801e436:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801e43a:	10c7      	asrs	r7, r0, #3
 801e43c:	fb15 f506 	smulbb	r5, r5, r6
 801e440:	00c0      	lsls	r0, r0, #3
 801e442:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e446:	fa1f fc8c 	uxth.w	ip, ip
 801e44a:	b2c0      	uxtb	r0, r0
 801e44c:	fb07 970a 	mla	r7, r7, sl, r9
 801e450:	fb00 500a 	mla	r0, r0, sl, r5
 801e454:	f10c 0501 	add.w	r5, ip, #1
 801e458:	b2bf      	uxth	r7, r7
 801e45a:	b280      	uxth	r0, r0
 801e45c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e460:	f107 0901 	add.w	r9, r7, #1
 801e464:	1c45      	adds	r5, r0, #1
 801e466:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801e46a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e46e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e472:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e476:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e47a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e47e:	ea45 0c0c 	orr.w	ip, r5, ip
 801e482:	ea4c 0c09 	orr.w	ip, ip, r9
 801e486:	f824 c00b 	strh.w	ip, [r4, fp]
 801e48a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e48c:	f108 38ff 	add.w	r8, r8, #4294967295
 801e490:	4401      	add	r1, r0
 801e492:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e494:	4402      	add	r2, r0
 801e496:	e75c      	b.n	801e352 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801e498:	b007      	add	sp, #28
 801e49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e49e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e49e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4a2:	b085      	sub	sp, #20
 801e4a4:	4693      	mov	fp, r2
 801e4a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e4aa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e4ac:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e4ae:	6870      	ldr	r0, [r6, #4]
 801e4b0:	9100      	str	r1, [sp, #0]
 801e4b2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e4b6:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801e4ba:	fb00 2404 	mla	r4, r0, r4, r2
 801e4be:	6832      	ldr	r2, [r6, #0]
 801e4c0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e4c4:	682a      	ldr	r2, [r5, #0]
 801e4c6:	9201      	str	r2, [sp, #4]
 801e4c8:	686a      	ldr	r2, [r5, #4]
 801e4ca:	3204      	adds	r2, #4
 801e4cc:	9202      	str	r2, [sp, #8]
 801e4ce:	9a00      	ldr	r2, [sp, #0]
 801e4d0:	2a00      	cmp	r2, #0
 801e4d2:	dc03      	bgt.n	801e4dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e4d4:	f1bb 0f00 	cmp.w	fp, #0
 801e4d8:	f340 80a0 	ble.w	801e61c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801e4dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e4de:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e4e2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e4e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e4e8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e4ec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e4f0:	2b00      	cmp	r3, #0
 801e4f2:	dd0c      	ble.n	801e50e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e4f4:	1406      	asrs	r6, r0, #16
 801e4f6:	d405      	bmi.n	801e504 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e4f8:	454e      	cmp	r6, r9
 801e4fa:	da03      	bge.n	801e504 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e4fc:	1416      	asrs	r6, r2, #16
 801e4fe:	d401      	bmi.n	801e504 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e500:	4546      	cmp	r6, r8
 801e502:	db05      	blt.n	801e510 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e504:	4470      	add	r0, lr
 801e506:	4462      	add	r2, ip
 801e508:	3b01      	subs	r3, #1
 801e50a:	3402      	adds	r4, #2
 801e50c:	e7f0      	b.n	801e4f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e50e:	d00f      	beq.n	801e530 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e510:	1e5e      	subs	r6, r3, #1
 801e512:	fb0e 0706 	mla	r7, lr, r6, r0
 801e516:	143f      	asrs	r7, r7, #16
 801e518:	d541      	bpl.n	801e59e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801e51a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801e51e:	4698      	mov	r8, r3
 801e520:	9603      	str	r6, [sp, #12]
 801e522:	f1b8 0f00 	cmp.w	r8, #0
 801e526:	dc59      	bgt.n	801e5dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e528:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e52c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e530:	9b00      	ldr	r3, [sp, #0]
 801e532:	2b00      	cmp	r3, #0
 801e534:	dd72      	ble.n	801e61c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801e536:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e53a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e53c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e540:	eeb0 6a62 	vmov.f32	s12, s5
 801e544:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e548:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e54c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e550:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e554:	eeb0 6a43 	vmov.f32	s12, s6
 801e558:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e55c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e560:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e564:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e568:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e56c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e570:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e574:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e578:	ee12 2a90 	vmov	r2, s5
 801e57c:	eef0 2a47 	vmov.f32	s5, s14
 801e580:	fb92 fef3 	sdiv	lr, r2, r3
 801e584:	ee13 2a10 	vmov	r2, s6
 801e588:	eeb0 3a67 	vmov.f32	s6, s15
 801e58c:	fb92 fcf3 	sdiv	ip, r2, r3
 801e590:	9b00      	ldr	r3, [sp, #0]
 801e592:	3b01      	subs	r3, #1
 801e594:	9300      	str	r3, [sp, #0]
 801e596:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e598:	bf08      	it	eq
 801e59a:	465b      	moveq	r3, fp
 801e59c:	e797      	b.n	801e4ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e59e:	454f      	cmp	r7, r9
 801e5a0:	dabb      	bge.n	801e51a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e5a2:	fb0c 2606 	mla	r6, ip, r6, r2
 801e5a6:	1436      	asrs	r6, r6, #16
 801e5a8:	d4b7      	bmi.n	801e51a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e5aa:	4546      	cmp	r6, r8
 801e5ac:	dab5      	bge.n	801e51a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e5ae:	461e      	mov	r6, r3
 801e5b0:	46a0      	mov	r8, r4
 801e5b2:	2e00      	cmp	r6, #0
 801e5b4:	ddb8      	ble.n	801e528 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e5b6:	1417      	asrs	r7, r2, #16
 801e5b8:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801e5bc:	9901      	ldr	r1, [sp, #4]
 801e5be:	ea4f 4920 	mov.w	r9, r0, asr #16
 801e5c2:	4462      	add	r2, ip
 801e5c4:	4470      	add	r0, lr
 801e5c6:	fb0a 1707 	mla	r7, sl, r7, r1
 801e5ca:	9902      	ldr	r1, [sp, #8]
 801e5cc:	3e01      	subs	r6, #1
 801e5ce:	f817 7009 	ldrb.w	r7, [r7, r9]
 801e5d2:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801e5d6:	f828 7b02 	strh.w	r7, [r8], #2
 801e5da:	e7ea      	b.n	801e5b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e5dc:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e5e0:	d417      	bmi.n	801e612 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e5e2:	68ae      	ldr	r6, [r5, #8]
 801e5e4:	454e      	cmp	r6, r9
 801e5e6:	dd14      	ble.n	801e612 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e5e8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e5ec:	d411      	bmi.n	801e612 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e5ee:	68ef      	ldr	r7, [r5, #12]
 801e5f0:	4557      	cmp	r7, sl
 801e5f2:	dd0e      	ble.n	801e612 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e5f4:	9f01      	ldr	r7, [sp, #4]
 801e5f6:	b236      	sxth	r6, r6
 801e5f8:	f06f 0101 	mvn.w	r1, #1
 801e5fc:	fb0a 7606 	mla	r6, sl, r6, r7
 801e600:	9f02      	ldr	r7, [sp, #8]
 801e602:	f816 6009 	ldrb.w	r6, [r6, r9]
 801e606:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801e60a:	fb01 f608 	mul.w	r6, r1, r8
 801e60e:	9903      	ldr	r1, [sp, #12]
 801e610:	538f      	strh	r7, [r1, r6]
 801e612:	4470      	add	r0, lr
 801e614:	4462      	add	r2, ip
 801e616:	f108 38ff 	add.w	r8, r8, #4294967295
 801e61a:	e782      	b.n	801e522 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e61c:	b005      	add	sp, #20
 801e61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e622 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e622:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e626:	b087      	sub	sp, #28
 801e628:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e62a:	9205      	str	r2, [sp, #20]
 801e62c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e630:	9102      	str	r1, [sp, #8]
 801e632:	9203      	str	r2, [sp, #12]
 801e634:	6861      	ldr	r1, [r4, #4]
 801e636:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801e63a:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801e63e:	fb01 2000 	mla	r0, r1, r0, r2
 801e642:	6822      	ldr	r2, [r4, #0]
 801e644:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801e648:	9200      	str	r2, [sp, #0]
 801e64a:	f8dc 2000 	ldr.w	r2, [ip]
 801e64e:	9204      	str	r2, [sp, #16]
 801e650:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e654:	3204      	adds	r2, #4
 801e656:	9201      	str	r2, [sp, #4]
 801e658:	9a03      	ldr	r2, [sp, #12]
 801e65a:	43d5      	mvns	r5, r2
 801e65c:	b2ed      	uxtb	r5, r5
 801e65e:	9a02      	ldr	r2, [sp, #8]
 801e660:	2a00      	cmp	r2, #0
 801e662:	dc03      	bgt.n	801e66c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e664:	9a05      	ldr	r2, [sp, #20]
 801e666:	2a00      	cmp	r2, #0
 801e668:	f340 812c 	ble.w	801e8c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e66c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e66e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801e672:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e676:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e678:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e67c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e680:	2b00      	cmp	r3, #0
 801e682:	dd10      	ble.n	801e6a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e684:	140c      	asrs	r4, r1, #16
 801e686:	d405      	bmi.n	801e694 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e688:	4574      	cmp	r4, lr
 801e68a:	da03      	bge.n	801e694 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e68c:	1414      	asrs	r4, r2, #16
 801e68e:	d401      	bmi.n	801e694 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e690:	42bc      	cmp	r4, r7
 801e692:	db09      	blt.n	801e6a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e694:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e696:	3b01      	subs	r3, #1
 801e698:	9800      	ldr	r0, [sp, #0]
 801e69a:	4421      	add	r1, r4
 801e69c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e69e:	3002      	adds	r0, #2
 801e6a0:	4422      	add	r2, r4
 801e6a2:	9000      	str	r0, [sp, #0]
 801e6a4:	e7ec      	b.n	801e680 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801e6a6:	d071      	beq.n	801e78c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801e6a8:	1e5c      	subs	r4, r3, #1
 801e6aa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e6ac:	fb06 1604 	mla	r6, r6, r4, r1
 801e6b0:	1436      	asrs	r6, r6, #16
 801e6b2:	d45d      	bmi.n	801e770 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e6b4:	4576      	cmp	r6, lr
 801e6b6:	da5b      	bge.n	801e770 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e6b8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801e6ba:	fb06 2404 	mla	r4, r6, r4, r2
 801e6be:	1424      	asrs	r4, r4, #16
 801e6c0:	d456      	bmi.n	801e770 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e6c2:	42bc      	cmp	r4, r7
 801e6c4:	da54      	bge.n	801e770 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e6c6:	4698      	mov	r8, r3
 801e6c8:	f8dd 9000 	ldr.w	r9, [sp]
 801e6cc:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801e6d0:	f1b8 0f00 	cmp.w	r8, #0
 801e6d4:	dd54      	ble.n	801e780 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801e6d6:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801e6da:	1414      	asrs	r4, r2, #16
 801e6dc:	9804      	ldr	r0, [sp, #16]
 801e6de:	140e      	asrs	r6, r1, #16
 801e6e0:	f108 38ff 	add.w	r8, r8, #4294967295
 801e6e4:	fb07 0404 	mla	r4, r7, r4, r0
 801e6e8:	9801      	ldr	r0, [sp, #4]
 801e6ea:	f814 e006 	ldrb.w	lr, [r4, r6]
 801e6ee:	f8b9 4000 	ldrh.w	r4, [r9]
 801e6f2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e6f6:	1227      	asrs	r7, r4, #8
 801e6f8:	eb00 0b0e 	add.w	fp, r0, lr
 801e6fc:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801e700:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e704:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e706:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801e70a:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e70e:	4401      	add	r1, r0
 801e710:	fb16 f60a 	smulbb	r6, r6, sl
 801e714:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e716:	fb1b fb0a 	smulbb	fp, fp, sl
 801e71a:	fb07 6705 	mla	r7, r7, r5, r6
 801e71e:	10e6      	asrs	r6, r4, #3
 801e720:	00e4      	lsls	r4, r4, #3
 801e722:	4402      	add	r2, r0
 801e724:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e728:	b2bf      	uxth	r7, r7
 801e72a:	b2e4      	uxtb	r4, r4
 801e72c:	fb06 b605 	mla	r6, r6, r5, fp
 801e730:	fb14 f405 	smulbb	r4, r4, r5
 801e734:	b2b6      	uxth	r6, r6
 801e736:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801e73a:	1c7c      	adds	r4, r7, #1
 801e73c:	f106 0b01 	add.w	fp, r6, #1
 801e740:	fa1f fe8e 	uxth.w	lr, lr
 801e744:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801e748:	f10e 0401 	add.w	r4, lr, #1
 801e74c:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801e750:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e754:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801e758:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801e75c:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801e760:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e764:	4327      	orrs	r7, r4
 801e766:	ea47 070b 	orr.w	r7, r7, fp
 801e76a:	f829 7b02 	strh.w	r7, [r9], #2
 801e76e:	e7af      	b.n	801e6d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801e770:	f04f 0e00 	mov.w	lr, #0
 801e774:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801e778:	eb03 040e 	add.w	r4, r3, lr
 801e77c:	2c00      	cmp	r4, #0
 801e77e:	dc43      	bgt.n	801e808 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e780:	9a00      	ldr	r2, [sp, #0]
 801e782:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e786:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e78a:	9300      	str	r3, [sp, #0]
 801e78c:	9b02      	ldr	r3, [sp, #8]
 801e78e:	2b00      	cmp	r3, #0
 801e790:	f340 8098 	ble.w	801e8c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e794:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e798:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e79a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e79e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e7a2:	eef0 6a62 	vmov.f32	s13, s5
 801e7a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e7aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e7ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e7b2:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801e7b6:	eef0 6a43 	vmov.f32	s13, s6
 801e7ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e7be:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801e7c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e7c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e7ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e7ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e7d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e7d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e7da:	ee12 2a90 	vmov	r2, s5
 801e7de:	eef0 2a47 	vmov.f32	s5, s14
 801e7e2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e7e6:	ee13 2a10 	vmov	r2, s6
 801e7ea:	9313      	str	r3, [sp, #76]	; 0x4c
 801e7ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e7ee:	eeb0 3a67 	vmov.f32	s6, s15
 801e7f2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e7f6:	9314      	str	r3, [sp, #80]	; 0x50
 801e7f8:	9b02      	ldr	r3, [sp, #8]
 801e7fa:	9a05      	ldr	r2, [sp, #20]
 801e7fc:	3b01      	subs	r3, #1
 801e7fe:	9302      	str	r3, [sp, #8]
 801e800:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e802:	bf08      	it	eq
 801e804:	4613      	moveq	r3, r2
 801e806:	e72a      	b.n	801e65e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e808:	140f      	asrs	r7, r1, #16
 801e80a:	d454      	bmi.n	801e8b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e80c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801e810:	42be      	cmp	r6, r7
 801e812:	dd50      	ble.n	801e8b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e814:	ea5f 4822 	movs.w	r8, r2, asr #16
 801e818:	d44d      	bmi.n	801e8b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e81a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801e81e:	4544      	cmp	r4, r8
 801e820:	dd49      	ble.n	801e8b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e822:	9c04      	ldr	r4, [sp, #16]
 801e824:	b236      	sxth	r6, r6
 801e826:	f06f 0001 	mvn.w	r0, #1
 801e82a:	fb08 4606 	mla	r6, r8, r6, r4
 801e82e:	9c01      	ldr	r4, [sp, #4]
 801e830:	fb00 fa0e 	mul.w	sl, r0, lr
 801e834:	9800      	ldr	r0, [sp, #0]
 801e836:	f816 8007 	ldrb.w	r8, [r6, r7]
 801e83a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e83e:	eb04 0b08 	add.w	fp, r4, r8
 801e842:	f830 400a 	ldrh.w	r4, [r0, sl]
 801e846:	9801      	ldr	r0, [sp, #4]
 801e848:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801e84c:	1227      	asrs	r7, r4, #8
 801e84e:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e852:	fb16 f609 	smulbb	r6, r6, r9
 801e856:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e85a:	f810 8008 	ldrb.w	r8, [r0, r8]
 801e85e:	fb1b fb09 	smulbb	fp, fp, r9
 801e862:	fb07 6705 	mla	r7, r7, r5, r6
 801e866:	10e6      	asrs	r6, r4, #3
 801e868:	00e4      	lsls	r4, r4, #3
 801e86a:	9800      	ldr	r0, [sp, #0]
 801e86c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e870:	b2bf      	uxth	r7, r7
 801e872:	b2e4      	uxtb	r4, r4
 801e874:	fb06 b605 	mla	r6, r6, r5, fp
 801e878:	fb14 f405 	smulbb	r4, r4, r5
 801e87c:	b2b6      	uxth	r6, r6
 801e87e:	fb08 4809 	mla	r8, r8, r9, r4
 801e882:	1c7c      	adds	r4, r7, #1
 801e884:	f106 0b01 	add.w	fp, r6, #1
 801e888:	fa1f f888 	uxth.w	r8, r8
 801e88c:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801e890:	f108 0401 	add.w	r4, r8, #1
 801e894:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801e898:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e89c:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801e8a0:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801e8a4:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801e8a8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e8ac:	4327      	orrs	r7, r4
 801e8ae:	ea47 070b 	orr.w	r7, r7, fp
 801e8b2:	f820 700a 	strh.w	r7, [r0, sl]
 801e8b6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e8b8:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e8bc:	4401      	add	r1, r0
 801e8be:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e8c0:	4402      	add	r2, r0
 801e8c2:	e759      	b.n	801e778 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e8c4:	b007      	add	sp, #28
 801e8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e8cc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8d0:	b085      	sub	sp, #20
 801e8d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e8d6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e8d8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e8da:	9203      	str	r2, [sp, #12]
 801e8dc:	6870      	ldr	r0, [r6, #4]
 801e8de:	686f      	ldr	r7, [r5, #4]
 801e8e0:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801e8e4:	3704      	adds	r7, #4
 801e8e6:	9101      	str	r1, [sp, #4]
 801e8e8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e8ec:	fb00 2404 	mla	r4, r0, r4, r2
 801e8f0:	6832      	ldr	r2, [r6, #0]
 801e8f2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e8f6:	682a      	ldr	r2, [r5, #0]
 801e8f8:	9202      	str	r2, [sp, #8]
 801e8fa:	9a01      	ldr	r2, [sp, #4]
 801e8fc:	2a00      	cmp	r2, #0
 801e8fe:	dc03      	bgt.n	801e908 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e900:	9a03      	ldr	r2, [sp, #12]
 801e902:	2a00      	cmp	r2, #0
 801e904:	f340 80cc 	ble.w	801eaa0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e908:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e90a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e90e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e912:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e914:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e918:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e91c:	2b00      	cmp	r3, #0
 801e91e:	dd0d      	ble.n	801e93c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e920:	1406      	asrs	r6, r0, #16
 801e922:	d405      	bmi.n	801e930 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e924:	454e      	cmp	r6, r9
 801e926:	da03      	bge.n	801e930 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e928:	1416      	asrs	r6, r2, #16
 801e92a:	d401      	bmi.n	801e930 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e92c:	4546      	cmp	r6, r8
 801e92e:	db06      	blt.n	801e93e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e930:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e932:	4460      	add	r0, ip
 801e934:	3b01      	subs	r3, #1
 801e936:	3402      	adds	r4, #2
 801e938:	4432      	add	r2, r6
 801e93a:	e7ef      	b.n	801e91c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801e93c:	d00f      	beq.n	801e95e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e93e:	1e5e      	subs	r6, r3, #1
 801e940:	fb0c 0e06 	mla	lr, ip, r6, r0
 801e944:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801e948:	d543      	bpl.n	801e9d2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801e94a:	4698      	mov	r8, r3
 801e94c:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801e950:	f1b8 0f00 	cmp.w	r8, #0
 801e954:	dc71      	bgt.n	801ea3a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801e956:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e95a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e95e:	9b01      	ldr	r3, [sp, #4]
 801e960:	2b00      	cmp	r3, #0
 801e962:	f340 809d 	ble.w	801eaa0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e966:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e96a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e96c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e970:	eeb0 6a62 	vmov.f32	s12, s5
 801e974:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e978:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e97c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e980:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e984:	eeb0 6a43 	vmov.f32	s12, s6
 801e988:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e98c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e990:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e994:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e998:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e99c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e9a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e9a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e9a8:	ee12 2a90 	vmov	r2, s5
 801e9ac:	eef0 2a47 	vmov.f32	s5, s14
 801e9b0:	fb92 fcf3 	sdiv	ip, r2, r3
 801e9b4:	ee13 2a10 	vmov	r2, s6
 801e9b8:	eeb0 3a67 	vmov.f32	s6, s15
 801e9bc:	fb92 f3f3 	sdiv	r3, r2, r3
 801e9c0:	9312      	str	r3, [sp, #72]	; 0x48
 801e9c2:	9b01      	ldr	r3, [sp, #4]
 801e9c4:	9a03      	ldr	r2, [sp, #12]
 801e9c6:	3b01      	subs	r3, #1
 801e9c8:	9301      	str	r3, [sp, #4]
 801e9ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e9cc:	bf08      	it	eq
 801e9ce:	4613      	moveq	r3, r2
 801e9d0:	e793      	b.n	801e8fa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801e9d2:	45ce      	cmp	lr, r9
 801e9d4:	dab9      	bge.n	801e94a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e9d6:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e9d8:	fb01 2606 	mla	r6, r1, r6, r2
 801e9dc:	1436      	asrs	r6, r6, #16
 801e9de:	d4b4      	bmi.n	801e94a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e9e0:	4546      	cmp	r6, r8
 801e9e2:	dab2      	bge.n	801e94a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e9e4:	4698      	mov	r8, r3
 801e9e6:	46a2      	mov	sl, r4
 801e9e8:	f1b8 0f00 	cmp.w	r8, #0
 801e9ec:	ddb3      	ble.n	801e956 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e9ee:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e9f2:	1416      	asrs	r6, r2, #16
 801e9f4:	9902      	ldr	r1, [sp, #8]
 801e9f6:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801e9fa:	f108 38ff 	add.w	r8, r8, #4294967295
 801e9fe:	4460      	add	r0, ip
 801ea00:	fb09 1606 	mla	r6, r9, r6, r1
 801ea04:	4928      	ldr	r1, [pc, #160]	; (801eaa8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801ea06:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801ea0a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ea0e:	eb07 0b0e 	add.w	fp, r7, lr
 801ea12:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801ea16:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801ea1a:	00f6      	lsls	r6, r6, #3
 801ea1c:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801ea20:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ea22:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ea26:	440a      	add	r2, r1
 801ea28:	ea49 0606 	orr.w	r6, r9, r6
 801ea2c:	f817 900e 	ldrb.w	r9, [r7, lr]
 801ea30:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801ea34:	f82a 6b02 	strh.w	r6, [sl], #2
 801ea38:	e7d6      	b.n	801e9e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801ea3a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801ea3e:	d429      	bmi.n	801ea94 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ea40:	68ae      	ldr	r6, [r5, #8]
 801ea42:	454e      	cmp	r6, r9
 801ea44:	dd26      	ble.n	801ea94 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ea46:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801ea4a:	d423      	bmi.n	801ea94 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ea4c:	68e9      	ldr	r1, [r5, #12]
 801ea4e:	4559      	cmp	r1, fp
 801ea50:	dd20      	ble.n	801ea94 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801ea52:	fa0f fe86 	sxth.w	lr, r6
 801ea56:	9902      	ldr	r1, [sp, #8]
 801ea58:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801ea5c:	f06f 0101 	mvn.w	r1, #1
 801ea60:	f81e e009 	ldrb.w	lr, [lr, r9]
 801ea64:	fb01 f908 	mul.w	r9, r1, r8
 801ea68:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801ea6c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801ea70:	eb07 060e 	add.w	r6, r7, lr
 801ea74:	f896 b002 	ldrb.w	fp, [r6, #2]
 801ea78:	7876      	ldrb	r6, [r6, #1]
 801ea7a:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801ea7e:	00f6      	lsls	r6, r6, #3
 801ea80:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ea84:	ea4b 0606 	orr.w	r6, fp, r6
 801ea88:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801ea8c:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801ea90:	f82a 6009 	strh.w	r6, [sl, r9]
 801ea94:	9912      	ldr	r1, [sp, #72]	; 0x48
 801ea96:	4460      	add	r0, ip
 801ea98:	f108 38ff 	add.w	r8, r8, #4294967295
 801ea9c:	440a      	add	r2, r1
 801ea9e:	e757      	b.n	801e950 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801eaa0:	b005      	add	sp, #20
 801eaa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eaa6:	bf00      	nop
 801eaa8:	fffff800 	.word	0xfffff800

0801eaac <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eaac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eab0:	b087      	sub	sp, #28
 801eab2:	468b      	mov	fp, r1
 801eab4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801eab8:	9815      	ldr	r0, [sp, #84]	; 0x54
 801eaba:	9204      	str	r2, [sp, #16]
 801eabc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801eac0:	6841      	ldr	r1, [r0, #4]
 801eac2:	9205      	str	r2, [sp, #20]
 801eac4:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801eac8:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801eacc:	fb01 2404 	mla	r4, r1, r4, r2
 801ead0:	6802      	ldr	r2, [r0, #0]
 801ead2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ead6:	f8dc 2000 	ldr.w	r2, [ip]
 801eada:	9201      	str	r2, [sp, #4]
 801eadc:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801eae0:	3204      	adds	r2, #4
 801eae2:	9202      	str	r2, [sp, #8]
 801eae4:	f1bb 0f00 	cmp.w	fp, #0
 801eae8:	dc03      	bgt.n	801eaf2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801eaea:	9a04      	ldr	r2, [sp, #16]
 801eaec:	2a00      	cmp	r2, #0
 801eaee:	f340 8138 	ble.w	801ed62 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801eaf2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801eaf4:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801eaf8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801eafc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801eafe:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801eb02:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801eb06:	2b00      	cmp	r3, #0
 801eb08:	dd0e      	ble.n	801eb28 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801eb0a:	1402      	asrs	r2, r0, #16
 801eb0c:	d405      	bmi.n	801eb1a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801eb0e:	42ba      	cmp	r2, r7
 801eb10:	da03      	bge.n	801eb1a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801eb12:	140a      	asrs	r2, r1, #16
 801eb14:	d401      	bmi.n	801eb1a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801eb16:	42b2      	cmp	r2, r6
 801eb18:	db07      	blt.n	801eb2a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801eb1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801eb1c:	3b01      	subs	r3, #1
 801eb1e:	3402      	adds	r4, #2
 801eb20:	4410      	add	r0, r2
 801eb22:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801eb24:	4411      	add	r1, r2
 801eb26:	e7ee      	b.n	801eb06 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801eb28:	d019      	beq.n	801eb5e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801eb2a:	1e5a      	subs	r2, r3, #1
 801eb2c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801eb2e:	fb05 0502 	mla	r5, r5, r2, r0
 801eb32:	142d      	asrs	r5, r5, #16
 801eb34:	d409      	bmi.n	801eb4a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801eb36:	42bd      	cmp	r5, r7
 801eb38:	da07      	bge.n	801eb4a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801eb3a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801eb3c:	fb05 1202 	mla	r2, r5, r2, r1
 801eb40:	1412      	asrs	r2, r2, #16
 801eb42:	d402      	bmi.n	801eb4a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801eb44:	42b2      	cmp	r2, r6
 801eb46:	f2c0 80ac 	blt.w	801eca2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801eb4a:	f04f 0e00 	mov.w	lr, #0
 801eb4e:	eb03 020e 	add.w	r2, r3, lr
 801eb52:	2a00      	cmp	r2, #0
 801eb54:	dc3e      	bgt.n	801ebd4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801eb56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eb5a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801eb5e:	f1bb 0f00 	cmp.w	fp, #0
 801eb62:	f340 80fe 	ble.w	801ed62 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801eb66:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eb6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eb6c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eb70:	f1bb 0b01 	subs.w	fp, fp, #1
 801eb74:	eeb0 6a62 	vmov.f32	s12, s5
 801eb78:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eb7c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eb80:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb84:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801eb88:	eeb0 6a43 	vmov.f32	s12, s6
 801eb8c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb90:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801eb94:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eb98:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eb9c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eba0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eba4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eba8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ebac:	ee12 2a90 	vmov	r2, s5
 801ebb0:	eef0 2a47 	vmov.f32	s5, s14
 801ebb4:	fb92 f3f3 	sdiv	r3, r2, r3
 801ebb8:	ee13 2a10 	vmov	r2, s6
 801ebbc:	9313      	str	r3, [sp, #76]	; 0x4c
 801ebbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ebc0:	eeb0 3a67 	vmov.f32	s6, s15
 801ebc4:	fb92 f3f3 	sdiv	r3, r2, r3
 801ebc8:	9a04      	ldr	r2, [sp, #16]
 801ebca:	9314      	str	r3, [sp, #80]	; 0x50
 801ebcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ebce:	bf08      	it	eq
 801ebd0:	4613      	moveq	r3, r2
 801ebd2:	e787      	b.n	801eae4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ebd4:	1406      	asrs	r6, r0, #16
 801ebd6:	d45d      	bmi.n	801ec94 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ebd8:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801ebdc:	42b5      	cmp	r5, r6
 801ebde:	dd59      	ble.n	801ec94 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ebe0:	140f      	asrs	r7, r1, #16
 801ebe2:	d457      	bmi.n	801ec94 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ebe4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ebe8:	42ba      	cmp	r2, r7
 801ebea:	dd53      	ble.n	801ec94 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ebec:	9a01      	ldr	r2, [sp, #4]
 801ebee:	b22d      	sxth	r5, r5
 801ebf0:	fb07 2505 	mla	r5, r7, r5, r2
 801ebf4:	5daa      	ldrb	r2, [r5, r6]
 801ebf6:	9d02      	ldr	r5, [sp, #8]
 801ebf8:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801ebfc:	0e2e      	lsrs	r6, r5, #24
 801ebfe:	d049      	beq.n	801ec94 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ec00:	f06f 0201 	mvn.w	r2, #1
 801ec04:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ec08:	fb02 f20e 	mul.w	r2, r2, lr
 801ec0c:	f834 8002 	ldrh.w	r8, [r4, r2]
 801ec10:	9203      	str	r2, [sp, #12]
 801ec12:	9a05      	ldr	r2, [sp, #20]
 801ec14:	ea4f 2728 	mov.w	r7, r8, asr #8
 801ec18:	4356      	muls	r6, r2
 801ec1a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ec1e:	1c72      	adds	r2, r6, #1
 801ec20:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801ec24:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ec28:	b2ed      	uxtb	r5, r5
 801ec2a:	1212      	asrs	r2, r2, #8
 801ec2c:	fa1f f982 	uxth.w	r9, r2
 801ec30:	43d2      	mvns	r2, r2
 801ec32:	fb16 f609 	smulbb	r6, r6, r9
 801ec36:	b2d2      	uxtb	r2, r2
 801ec38:	fb15 f509 	smulbb	r5, r5, r9
 801ec3c:	fb07 6702 	mla	r7, r7, r2, r6
 801ec40:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801ec44:	fb1a fa09 	smulbb	sl, sl, r9
 801ec48:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ec4c:	b2bf      	uxth	r7, r7
 801ec4e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ec52:	fa5f f888 	uxtb.w	r8, r8
 801ec56:	fb06 a602 	mla	r6, r6, r2, sl
 801ec5a:	fb08 5502 	mla	r5, r8, r2, r5
 801ec5e:	1c7a      	adds	r2, r7, #1
 801ec60:	b2b6      	uxth	r6, r6
 801ec62:	b2ad      	uxth	r5, r5
 801ec64:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ec68:	9a03      	ldr	r2, [sp, #12]
 801ec6a:	f105 0a01 	add.w	sl, r5, #1
 801ec6e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ec72:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ec76:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ec7a:	ea4a 0707 	orr.w	r7, sl, r7
 801ec7e:	f106 0a01 	add.w	sl, r6, #1
 801ec82:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ec86:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ec8a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ec8e:	ea47 070a 	orr.w	r7, r7, sl
 801ec92:	52a7      	strh	r7, [r4, r2]
 801ec94:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ec96:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ec9a:	4410      	add	r0, r2
 801ec9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ec9e:	4411      	add	r1, r2
 801eca0:	e755      	b.n	801eb4e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801eca2:	f04f 0800 	mov.w	r8, #0
 801eca6:	eba3 0208 	sub.w	r2, r3, r8
 801ecaa:	2a00      	cmp	r2, #0
 801ecac:	f77f af53 	ble.w	801eb56 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801ecb0:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801ecb4:	140a      	asrs	r2, r1, #16
 801ecb6:	9f01      	ldr	r7, [sp, #4]
 801ecb8:	1405      	asrs	r5, r0, #16
 801ecba:	fb06 7202 	mla	r2, r6, r2, r7
 801ecbe:	5d52      	ldrb	r2, [r2, r5]
 801ecc0:	9d02      	ldr	r5, [sp, #8]
 801ecc2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801ecc6:	0e2e      	lsrs	r6, r5, #24
 801ecc8:	d044      	beq.n	801ed54 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801ecca:	9a05      	ldr	r2, [sp, #20]
 801eccc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ecd0:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801ecd4:	4356      	muls	r6, r2
 801ecd6:	ea4f 272e 	mov.w	r7, lr, asr #8
 801ecda:	1c72      	adds	r2, r6, #1
 801ecdc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ece0:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801ece4:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ece8:	b2ed      	uxtb	r5, r5
 801ecea:	1212      	asrs	r2, r2, #8
 801ecec:	fa1f f982 	uxth.w	r9, r2
 801ecf0:	43d2      	mvns	r2, r2
 801ecf2:	fb16 f609 	smulbb	r6, r6, r9
 801ecf6:	b2d2      	uxtb	r2, r2
 801ecf8:	fb15 f509 	smulbb	r5, r5, r9
 801ecfc:	fb07 6702 	mla	r7, r7, r2, r6
 801ed00:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801ed04:	fb1a fa09 	smulbb	sl, sl, r9
 801ed08:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ed0c:	b2bf      	uxth	r7, r7
 801ed0e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ed12:	fa5f fe8e 	uxtb.w	lr, lr
 801ed16:	fb06 a602 	mla	r6, r6, r2, sl
 801ed1a:	fb0e 5502 	mla	r5, lr, r2, r5
 801ed1e:	1c7a      	adds	r2, r7, #1
 801ed20:	b2b6      	uxth	r6, r6
 801ed22:	b2ad      	uxth	r5, r5
 801ed24:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ed28:	f105 0a01 	add.w	sl, r5, #1
 801ed2c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ed30:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ed34:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ed38:	ea4a 0707 	orr.w	r7, sl, r7
 801ed3c:	f106 0a01 	add.w	sl, r6, #1
 801ed40:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ed44:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ed48:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ed4c:	ea47 070a 	orr.w	r7, r7, sl
 801ed50:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801ed54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ed56:	f108 0801 	add.w	r8, r8, #1
 801ed5a:	4410      	add	r0, r2
 801ed5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ed5e:	4411      	add	r1, r2
 801ed60:	e7a1      	b.n	801eca6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ed62:	b007      	add	sp, #28
 801ed64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ed68 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ed68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed6c:	b085      	sub	sp, #20
 801ed6e:	468b      	mov	fp, r1
 801ed70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ed74:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ed76:	9203      	str	r2, [sp, #12]
 801ed78:	6841      	ldr	r1, [r0, #4]
 801ed7a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801ed7e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ed82:	fb01 2404 	mla	r4, r1, r4, r2
 801ed86:	6802      	ldr	r2, [r0, #0]
 801ed88:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ed8c:	f8de 2000 	ldr.w	r2, [lr]
 801ed90:	9200      	str	r2, [sp, #0]
 801ed92:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ed96:	3204      	adds	r2, #4
 801ed98:	9201      	str	r2, [sp, #4]
 801ed9a:	f1bb 0f00 	cmp.w	fp, #0
 801ed9e:	dc03      	bgt.n	801eda8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801eda0:	9a03      	ldr	r2, [sp, #12]
 801eda2:	2a00      	cmp	r2, #0
 801eda4:	f340 8153 	ble.w	801f04e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801eda8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801edaa:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801edae:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801edb2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801edb4:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801edb8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801edbc:	2b00      	cmp	r3, #0
 801edbe:	dd0e      	ble.n	801edde <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801edc0:	1408      	asrs	r0, r1, #16
 801edc2:	d405      	bmi.n	801edd0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801edc4:	42b8      	cmp	r0, r7
 801edc6:	da03      	bge.n	801edd0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801edc8:	1410      	asrs	r0, r2, #16
 801edca:	d401      	bmi.n	801edd0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801edcc:	42b0      	cmp	r0, r6
 801edce:	db07      	blt.n	801ede0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801edd0:	9811      	ldr	r0, [sp, #68]	; 0x44
 801edd2:	3b01      	subs	r3, #1
 801edd4:	3402      	adds	r4, #2
 801edd6:	4401      	add	r1, r0
 801edd8:	9812      	ldr	r0, [sp, #72]	; 0x48
 801edda:	4402      	add	r2, r0
 801eddc:	e7ee      	b.n	801edbc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801edde:	d017      	beq.n	801ee10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ede0:	1e58      	subs	r0, r3, #1
 801ede2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ede4:	fb05 1500 	mla	r5, r5, r0, r1
 801ede8:	142d      	asrs	r5, r5, #16
 801edea:	d409      	bmi.n	801ee00 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801edec:	42bd      	cmp	r5, r7
 801edee:	da07      	bge.n	801ee00 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801edf0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801edf2:	fb05 2000 	mla	r0, r5, r0, r2
 801edf6:	1400      	asrs	r0, r0, #16
 801edf8:	d402      	bmi.n	801ee00 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801edfa:	42b0      	cmp	r0, r6
 801edfc:	f2c0 80bc 	blt.w	801ef78 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801ee00:	2600      	movs	r6, #0
 801ee02:	1998      	adds	r0, r3, r6
 801ee04:	2800      	cmp	r0, #0
 801ee06:	dc3e      	bgt.n	801ee86 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ee08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ee0c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ee10:	f1bb 0f00 	cmp.w	fp, #0
 801ee14:	f340 811b 	ble.w	801f04e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801ee18:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ee1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ee1e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ee22:	f1bb 0b01 	subs.w	fp, fp, #1
 801ee26:	eeb0 6a62 	vmov.f32	s12, s5
 801ee2a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ee2e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ee32:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ee36:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ee3a:	eeb0 6a43 	vmov.f32	s12, s6
 801ee3e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ee42:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ee46:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ee4a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ee4e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ee52:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ee56:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ee5a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ee5e:	ee12 2a90 	vmov	r2, s5
 801ee62:	eef0 2a47 	vmov.f32	s5, s14
 801ee66:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee6a:	ee13 2a10 	vmov	r2, s6
 801ee6e:	9311      	str	r3, [sp, #68]	; 0x44
 801ee70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ee72:	eeb0 3a67 	vmov.f32	s6, s15
 801ee76:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee7a:	9a03      	ldr	r2, [sp, #12]
 801ee7c:	9312      	str	r3, [sp, #72]	; 0x48
 801ee7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ee80:	bf08      	it	eq
 801ee82:	4613      	moveq	r3, r2
 801ee84:	e789      	b.n	801ed9a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801ee86:	140f      	asrs	r7, r1, #16
 801ee88:	d426      	bmi.n	801eed8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ee8a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ee8e:	42bd      	cmp	r5, r7
 801ee90:	dd22      	ble.n	801eed8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ee92:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ee96:	d41f      	bmi.n	801eed8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ee98:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ee9c:	4560      	cmp	r0, ip
 801ee9e:	dd1b      	ble.n	801eed8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801eea0:	9800      	ldr	r0, [sp, #0]
 801eea2:	b22d      	sxth	r5, r5
 801eea4:	fb0c 0505 	mla	r5, ip, r5, r0
 801eea8:	5de8      	ldrb	r0, [r5, r7]
 801eeaa:	9d01      	ldr	r5, [sp, #4]
 801eeac:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801eeb0:	0e07      	lsrs	r7, r0, #24
 801eeb2:	2fff      	cmp	r7, #255	; 0xff
 801eeb4:	d116      	bne.n	801eee4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801eeb6:	f06f 0501 	mvn.w	r5, #1
 801eeba:	fb05 f706 	mul.w	r7, r5, r6
 801eebe:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801eec2:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801eec6:	0945      	lsrs	r5, r0, #5
 801eec8:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801eecc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801eed0:	ea4c 0505 	orr.w	r5, ip, r5
 801eed4:	4305      	orrs	r5, r0
 801eed6:	53e5      	strh	r5, [r4, r7]
 801eed8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801eeda:	3e01      	subs	r6, #1
 801eedc:	4401      	add	r1, r0
 801eede:	9812      	ldr	r0, [sp, #72]	; 0x48
 801eee0:	4402      	add	r2, r0
 801eee2:	e78e      	b.n	801ee02 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801eee4:	b2fd      	uxtb	r5, r7
 801eee6:	2f00      	cmp	r7, #0
 801eee8:	d0f6      	beq.n	801eed8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801eeea:	f06f 0701 	mvn.w	r7, #1
 801eeee:	fa1f f985 	uxth.w	r9, r5
 801eef2:	43ed      	mvns	r5, r5
 801eef4:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801eef8:	4377      	muls	r7, r6
 801eefa:	fb1a fa09 	smulbb	sl, sl, r9
 801eefe:	b2ed      	uxtb	r5, r5
 801ef00:	f834 8007 	ldrh.w	r8, [r4, r7]
 801ef04:	9702      	str	r7, [sp, #8]
 801ef06:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801ef0a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801ef0e:	fb17 f709 	smulbb	r7, r7, r9
 801ef12:	b2c0      	uxtb	r0, r0
 801ef14:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ef18:	fb10 f009 	smulbb	r0, r0, r9
 801ef1c:	fb0c 7c05 	mla	ip, ip, r5, r7
 801ef20:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801ef24:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ef28:	fa1f fc8c 	uxth.w	ip, ip
 801ef2c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ef30:	fa5f f888 	uxtb.w	r8, r8
 801ef34:	fb07 a705 	mla	r7, r7, r5, sl
 801ef38:	fb08 0005 	mla	r0, r8, r5, r0
 801ef3c:	f10c 0501 	add.w	r5, ip, #1
 801ef40:	b2bf      	uxth	r7, r7
 801ef42:	b280      	uxth	r0, r0
 801ef44:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ef48:	f100 0a01 	add.w	sl, r0, #1
 801ef4c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ef50:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801ef54:	9802      	ldr	r0, [sp, #8]
 801ef56:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ef5a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801ef5e:	f107 0a01 	add.w	sl, r7, #1
 801ef62:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801ef66:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ef6a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ef6e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ef72:	f824 c000 	strh.w	ip, [r4, r0]
 801ef76:	e7af      	b.n	801eed8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ef78:	f04f 0800 	mov.w	r8, #0
 801ef7c:	eba3 0008 	sub.w	r0, r3, r8
 801ef80:	2800      	cmp	r0, #0
 801ef82:	f77f af41 	ble.w	801ee08 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ef86:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801ef8a:	1410      	asrs	r0, r2, #16
 801ef8c:	9f00      	ldr	r7, [sp, #0]
 801ef8e:	140d      	asrs	r5, r1, #16
 801ef90:	fb06 7000 	mla	r0, r6, r0, r7
 801ef94:	5d40      	ldrb	r0, [r0, r5]
 801ef96:	9d01      	ldr	r5, [sp, #4]
 801ef98:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801ef9c:	0e2e      	lsrs	r6, r5, #24
 801ef9e:	2eff      	cmp	r6, #255	; 0xff
 801efa0:	d112      	bne.n	801efc8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801efa2:	482c      	ldr	r0, [pc, #176]	; (801f054 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801efa4:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801efa8:	0968      	lsrs	r0, r5, #5
 801efaa:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801efae:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801efb2:	4330      	orrs	r0, r6
 801efb4:	4328      	orrs	r0, r5
 801efb6:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801efba:	9811      	ldr	r0, [sp, #68]	; 0x44
 801efbc:	f108 0801 	add.w	r8, r8, #1
 801efc0:	4401      	add	r1, r0
 801efc2:	9812      	ldr	r0, [sp, #72]	; 0x48
 801efc4:	4402      	add	r2, r0
 801efc6:	e7d9      	b.n	801ef7c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801efc8:	b2f0      	uxtb	r0, r6
 801efca:	2e00      	cmp	r6, #0
 801efcc:	d0f5      	beq.n	801efba <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801efce:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801efd2:	fa1f f980 	uxth.w	r9, r0
 801efd6:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801efda:	43c0      	mvns	r0, r0
 801efdc:	ea4f 272c 	mov.w	r7, ip, asr #8
 801efe0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801efe4:	fb16 f609 	smulbb	r6, r6, r9
 801efe8:	b2c0      	uxtb	r0, r0
 801efea:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801efee:	b2ed      	uxtb	r5, r5
 801eff0:	fb1a fa09 	smulbb	sl, sl, r9
 801eff4:	fb07 6700 	mla	r7, r7, r0, r6
 801eff8:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801effc:	fb15 f509 	smulbb	r5, r5, r9
 801f000:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801f004:	b2bf      	uxth	r7, r7
 801f006:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f00a:	fa5f fc8c 	uxtb.w	ip, ip
 801f00e:	fb06 a600 	mla	r6, r6, r0, sl
 801f012:	fb0c 5500 	mla	r5, ip, r0, r5
 801f016:	1c78      	adds	r0, r7, #1
 801f018:	b2b6      	uxth	r6, r6
 801f01a:	b2ad      	uxth	r5, r5
 801f01c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801f020:	f105 0a01 	add.w	sl, r5, #1
 801f024:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801f028:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f02c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f030:	ea4a 0707 	orr.w	r7, sl, r7
 801f034:	f106 0a01 	add.w	sl, r6, #1
 801f038:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f03c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f040:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f044:	ea47 070a 	orr.w	r7, r7, sl
 801f048:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801f04c:	e7b5      	b.n	801efba <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801f04e:	b005      	add	sp, #20
 801f050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f054:	fffff800 	.word	0xfffff800

0801f058 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f05c:	b087      	sub	sp, #28
 801f05e:	468b      	mov	fp, r1
 801f060:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f064:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f066:	9204      	str	r2, [sp, #16]
 801f068:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f06c:	6861      	ldr	r1, [r4, #4]
 801f06e:	9205      	str	r2, [sp, #20]
 801f070:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801f074:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801f078:	fb01 2000 	mla	r0, r1, r0, r2
 801f07c:	6822      	ldr	r2, [r4, #0]
 801f07e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801f082:	f8de 2000 	ldr.w	r2, [lr]
 801f086:	9201      	str	r2, [sp, #4]
 801f088:	f8de 2004 	ldr.w	r2, [lr, #4]
 801f08c:	9202      	str	r2, [sp, #8]
 801f08e:	f1bb 0f00 	cmp.w	fp, #0
 801f092:	dc03      	bgt.n	801f09c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801f094:	9a04      	ldr	r2, [sp, #16]
 801f096:	2a00      	cmp	r2, #0
 801f098:	f340 8142 	ble.w	801f320 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801f09c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f09e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f0a2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f0a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f0a8:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801f0ac:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f0b0:	2b00      	cmp	r3, #0
 801f0b2:	dd0e      	ble.n	801f0d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f0b4:	140c      	asrs	r4, r1, #16
 801f0b6:	d405      	bmi.n	801f0c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f0b8:	42bc      	cmp	r4, r7
 801f0ba:	da03      	bge.n	801f0c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f0bc:	1414      	asrs	r4, r2, #16
 801f0be:	d401      	bmi.n	801f0c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f0c0:	42b4      	cmp	r4, r6
 801f0c2:	db07      	blt.n	801f0d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f0c4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f0c6:	3b01      	subs	r3, #1
 801f0c8:	3002      	adds	r0, #2
 801f0ca:	4421      	add	r1, r4
 801f0cc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f0ce:	4422      	add	r2, r4
 801f0d0:	e7ee      	b.n	801f0b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f0d2:	d019      	beq.n	801f108 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801f0d4:	1e5c      	subs	r4, r3, #1
 801f0d6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f0d8:	fb05 1504 	mla	r5, r5, r4, r1
 801f0dc:	142d      	asrs	r5, r5, #16
 801f0de:	d409      	bmi.n	801f0f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f0e0:	42bd      	cmp	r5, r7
 801f0e2:	da07      	bge.n	801f0f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f0e4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f0e6:	fb05 2404 	mla	r4, r5, r4, r2
 801f0ea:	1424      	asrs	r4, r4, #16
 801f0ec:	d402      	bmi.n	801f0f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801f0ee:	42b4      	cmp	r4, r6
 801f0f0:	f2c0 80b1 	blt.w	801f256 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801f0f4:	f04f 0800 	mov.w	r8, #0
 801f0f8:	eb03 0408 	add.w	r4, r3, r8
 801f0fc:	2c00      	cmp	r4, #0
 801f0fe:	dc3e      	bgt.n	801f17e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801f100:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f104:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f108:	f1bb 0f00 	cmp.w	fp, #0
 801f10c:	f340 8108 	ble.w	801f320 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801f110:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f114:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f116:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f11a:	f1bb 0b01 	subs.w	fp, fp, #1
 801f11e:	eeb0 6a62 	vmov.f32	s12, s5
 801f122:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f126:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f12a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f12e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f132:	eeb0 6a43 	vmov.f32	s12, s6
 801f136:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f13a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f13e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f142:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f146:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f14a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f14e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f152:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f156:	ee12 2a90 	vmov	r2, s5
 801f15a:	eef0 2a47 	vmov.f32	s5, s14
 801f15e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f162:	ee13 2a10 	vmov	r2, s6
 801f166:	9313      	str	r3, [sp, #76]	; 0x4c
 801f168:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f16a:	eeb0 3a67 	vmov.f32	s6, s15
 801f16e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f172:	9a04      	ldr	r2, [sp, #16]
 801f174:	9314      	str	r3, [sp, #80]	; 0x50
 801f176:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f178:	bf08      	it	eq
 801f17a:	4613      	moveq	r3, r2
 801f17c:	e787      	b.n	801f08e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801f17e:	140e      	asrs	r6, r1, #16
 801f180:	d462      	bmi.n	801f248 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f182:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f186:	42b5      	cmp	r5, r6
 801f188:	dd5e      	ble.n	801f248 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f18a:	1417      	asrs	r7, r2, #16
 801f18c:	d45c      	bmi.n	801f248 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f18e:	f8de 400c 	ldr.w	r4, [lr, #12]
 801f192:	42bc      	cmp	r4, r7
 801f194:	dd58      	ble.n	801f248 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f196:	b22d      	sxth	r5, r5
 801f198:	9c02      	ldr	r4, [sp, #8]
 801f19a:	fb07 6505 	mla	r5, r7, r5, r6
 801f19e:	5d66      	ldrb	r6, [r4, r5]
 801f1a0:	2e00      	cmp	r6, #0
 801f1a2:	d051      	beq.n	801f248 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f1a4:	9c01      	ldr	r4, [sp, #4]
 801f1a6:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801f1aa:	f06f 0401 	mvn.w	r4, #1
 801f1ae:	fb04 f408 	mul.w	r4, r4, r8
 801f1b2:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801f1b6:	5b05      	ldrh	r5, [r0, r4]
 801f1b8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f1bc:	9403      	str	r4, [sp, #12]
 801f1be:	9c05      	ldr	r4, [sp, #20]
 801f1c0:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f1c4:	4366      	muls	r6, r4
 801f1c6:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f1ca:	1c74      	adds	r4, r6, #1
 801f1cc:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f1d0:	122e      	asrs	r6, r5, #8
 801f1d2:	1224      	asrs	r4, r4, #8
 801f1d4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f1d8:	00ed      	lsls	r5, r5, #3
 801f1da:	b2a7      	uxth	r7, r4
 801f1dc:	43e4      	mvns	r4, r4
 801f1de:	b2ed      	uxtb	r5, r5
 801f1e0:	b2e4      	uxtb	r4, r4
 801f1e2:	fb16 f604 	smulbb	r6, r6, r4
 801f1e6:	fb15 f504 	smulbb	r5, r5, r4
 801f1ea:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f1ee:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801f1f2:	fb1a fa04 	smulbb	sl, sl, r4
 801f1f6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801f1fa:	fa1f fc8c 	uxth.w	ip, ip
 801f1fe:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f202:	fa5f f989 	uxtb.w	r9, r9
 801f206:	fb06 a607 	mla	r6, r6, r7, sl
 801f20a:	f10c 0401 	add.w	r4, ip, #1
 801f20e:	fb09 5507 	mla	r5, r9, r7, r5
 801f212:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f216:	9c03      	ldr	r4, [sp, #12]
 801f218:	b2ad      	uxth	r5, r5
 801f21a:	b2b6      	uxth	r6, r6
 801f21c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f220:	f105 0a01 	add.w	sl, r5, #1
 801f224:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f228:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f22c:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f230:	f106 0a01 	add.w	sl, r6, #1
 801f234:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f238:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f23c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f240:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f244:	f820 c004 	strh.w	ip, [r0, r4]
 801f248:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f24a:	f108 38ff 	add.w	r8, r8, #4294967295
 801f24e:	4421      	add	r1, r4
 801f250:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f252:	4422      	add	r2, r4
 801f254:	e750      	b.n	801f0f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f256:	f04f 0900 	mov.w	r9, #0
 801f25a:	eba3 0409 	sub.w	r4, r3, r9
 801f25e:	2c00      	cmp	r4, #0
 801f260:	f77f af4e 	ble.w	801f100 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f264:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801f268:	140d      	asrs	r5, r1, #16
 801f26a:	1414      	asrs	r4, r2, #16
 801f26c:	fb06 5404 	mla	r4, r6, r4, r5
 801f270:	9d02      	ldr	r5, [sp, #8]
 801f272:	5d2e      	ldrb	r6, [r5, r4]
 801f274:	2e00      	cmp	r6, #0
 801f276:	d04c      	beq.n	801f312 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801f278:	9d01      	ldr	r5, [sp, #4]
 801f27a:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801f27e:	9c05      	ldr	r4, [sp, #20]
 801f280:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f284:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801f288:	4366      	muls	r6, r4
 801f28a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f28e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f292:	1c74      	adds	r4, r6, #1
 801f294:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f298:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f29c:	122e      	asrs	r6, r5, #8
 801f29e:	1224      	asrs	r4, r4, #8
 801f2a0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f2a4:	00ed      	lsls	r5, r5, #3
 801f2a6:	b2a7      	uxth	r7, r4
 801f2a8:	43e4      	mvns	r4, r4
 801f2aa:	b2ed      	uxtb	r5, r5
 801f2ac:	b2e4      	uxtb	r4, r4
 801f2ae:	fb16 f604 	smulbb	r6, r6, r4
 801f2b2:	fb15 f504 	smulbb	r5, r5, r4
 801f2b6:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f2ba:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801f2be:	fb1a fa04 	smulbb	sl, sl, r4
 801f2c2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f2c6:	fa1f fc8c 	uxth.w	ip, ip
 801f2ca:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f2ce:	fa5f f888 	uxtb.w	r8, r8
 801f2d2:	fb06 a607 	mla	r6, r6, r7, sl
 801f2d6:	f10c 0401 	add.w	r4, ip, #1
 801f2da:	fb08 5507 	mla	r5, r8, r7, r5
 801f2de:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f2e2:	b2ad      	uxth	r5, r5
 801f2e4:	b2b6      	uxth	r6, r6
 801f2e6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f2ea:	f105 0a01 	add.w	sl, r5, #1
 801f2ee:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f2f2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f2f6:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f2fa:	f106 0a01 	add.w	sl, r6, #1
 801f2fe:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f302:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f306:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f30a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f30e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f312:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f314:	f109 0901 	add.w	r9, r9, #1
 801f318:	4421      	add	r1, r4
 801f31a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f31c:	4422      	add	r2, r4
 801f31e:	e79c      	b.n	801f25a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f320:	b007      	add	sp, #28
 801f322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f326 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f326:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f32a:	b085      	sub	sp, #20
 801f32c:	468b      	mov	fp, r1
 801f32e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f332:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f334:	9203      	str	r2, [sp, #12]
 801f336:	6861      	ldr	r1, [r4, #4]
 801f338:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801f33c:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801f340:	fb01 2000 	mla	r0, r1, r0, r2
 801f344:	6822      	ldr	r2, [r4, #0]
 801f346:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801f34a:	f8d8 2000 	ldr.w	r2, [r8]
 801f34e:	9200      	str	r2, [sp, #0]
 801f350:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801f354:	9201      	str	r2, [sp, #4]
 801f356:	f1bb 0f00 	cmp.w	fp, #0
 801f35a:	dc03      	bgt.n	801f364 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f35c:	9a03      	ldr	r2, [sp, #12]
 801f35e:	2a00      	cmp	r2, #0
 801f360:	f340 8146 	ble.w	801f5f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f364:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f366:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801f36a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f36e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f370:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801f374:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f378:	2b00      	cmp	r3, #0
 801f37a:	dd0e      	ble.n	801f39a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f37c:	140c      	asrs	r4, r1, #16
 801f37e:	d405      	bmi.n	801f38c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f380:	42bc      	cmp	r4, r7
 801f382:	da03      	bge.n	801f38c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f384:	1414      	asrs	r4, r2, #16
 801f386:	d401      	bmi.n	801f38c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f388:	42b4      	cmp	r4, r6
 801f38a:	db07      	blt.n	801f39c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f38c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f38e:	3b01      	subs	r3, #1
 801f390:	3002      	adds	r0, #2
 801f392:	4421      	add	r1, r4
 801f394:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f396:	4422      	add	r2, r4
 801f398:	e7ee      	b.n	801f378 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f39a:	d017      	beq.n	801f3cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f39c:	1e5c      	subs	r4, r3, #1
 801f39e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f3a0:	fb05 1504 	mla	r5, r5, r4, r1
 801f3a4:	142d      	asrs	r5, r5, #16
 801f3a6:	d409      	bmi.n	801f3bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f3a8:	42bd      	cmp	r5, r7
 801f3aa:	da07      	bge.n	801f3bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f3ac:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f3ae:	fb05 2404 	mla	r4, r5, r4, r2
 801f3b2:	1424      	asrs	r4, r4, #16
 801f3b4:	d402      	bmi.n	801f3bc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f3b6:	42b4      	cmp	r4, r6
 801f3b8:	f2c0 80b3 	blt.w	801f522 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801f3bc:	2600      	movs	r6, #0
 801f3be:	199c      	adds	r4, r3, r6
 801f3c0:	2c00      	cmp	r4, #0
 801f3c2:	dc3e      	bgt.n	801f442 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f3c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f3c8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f3cc:	f1bb 0f00 	cmp.w	fp, #0
 801f3d0:	f340 810e 	ble.w	801f5f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f3d4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f3d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f3da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f3de:	f1bb 0b01 	subs.w	fp, fp, #1
 801f3e2:	eeb0 6a62 	vmov.f32	s12, s5
 801f3e6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f3ea:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f3ee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f3f2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f3f6:	eeb0 6a43 	vmov.f32	s12, s6
 801f3fa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f3fe:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f402:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f406:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f40a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f40e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f412:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f416:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f41a:	ee12 2a90 	vmov	r2, s5
 801f41e:	eef0 2a47 	vmov.f32	s5, s14
 801f422:	fb92 f3f3 	sdiv	r3, r2, r3
 801f426:	ee13 2a10 	vmov	r2, s6
 801f42a:	9311      	str	r3, [sp, #68]	; 0x44
 801f42c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f42e:	eeb0 3a67 	vmov.f32	s6, s15
 801f432:	fb92 f3f3 	sdiv	r3, r2, r3
 801f436:	9a03      	ldr	r2, [sp, #12]
 801f438:	9312      	str	r3, [sp, #72]	; 0x48
 801f43a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f43c:	bf08      	it	eq
 801f43e:	4613      	moveq	r3, r2
 801f440:	e789      	b.n	801f356 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f442:	140f      	asrs	r7, r1, #16
 801f444:	d418      	bmi.n	801f478 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f446:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801f44a:	42bd      	cmp	r5, r7
 801f44c:	dd14      	ble.n	801f478 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f44e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f452:	d411      	bmi.n	801f478 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f454:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801f458:	4564      	cmp	r4, ip
 801f45a:	dd0d      	ble.n	801f478 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f45c:	b22d      	sxth	r5, r5
 801f45e:	9c01      	ldr	r4, [sp, #4]
 801f460:	fb0c 7505 	mla	r5, ip, r5, r7
 801f464:	5d64      	ldrb	r4, [r4, r5]
 801f466:	2cff      	cmp	r4, #255	; 0xff
 801f468:	d10c      	bne.n	801f484 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801f46a:	9c00      	ldr	r4, [sp, #0]
 801f46c:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801f470:	f06f 0401 	mvn.w	r4, #1
 801f474:	4374      	muls	r4, r6
 801f476:	5305      	strh	r5, [r0, r4]
 801f478:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f47a:	3e01      	subs	r6, #1
 801f47c:	4421      	add	r1, r4
 801f47e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f480:	4422      	add	r2, r4
 801f482:	e79c      	b.n	801f3be <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f484:	2c00      	cmp	r4, #0
 801f486:	d0f7      	beq.n	801f478 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f488:	9f00      	ldr	r7, [sp, #0]
 801f48a:	fa1f fc84 	uxth.w	ip, r4
 801f48e:	43e4      	mvns	r4, r4
 801f490:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801f494:	f06f 0501 	mvn.w	r5, #1
 801f498:	b2e4      	uxtb	r4, r4
 801f49a:	4375      	muls	r5, r6
 801f49c:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801f4a0:	9502      	str	r5, [sp, #8]
 801f4a2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801f4a6:	5b45      	ldrh	r5, [r0, r5]
 801f4a8:	122f      	asrs	r7, r5, #8
 801f4aa:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f4ae:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f4b2:	00ed      	lsls	r5, r5, #3
 801f4b4:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f4b8:	fb17 f704 	smulbb	r7, r7, r4
 801f4bc:	b2ed      	uxtb	r5, r5
 801f4be:	fb1a fa04 	smulbb	sl, sl, r4
 801f4c2:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801f4c6:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801f4ca:	fb15 f504 	smulbb	r5, r5, r4
 801f4ce:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801f4d2:	fa1f fe8e 	uxth.w	lr, lr
 801f4d6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f4da:	fa5f f989 	uxtb.w	r9, r9
 801f4de:	fb07 a70c 	mla	r7, r7, ip, sl
 801f4e2:	f10e 0401 	add.w	r4, lr, #1
 801f4e6:	fb09 550c 	mla	r5, r9, ip, r5
 801f4ea:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801f4ee:	9c02      	ldr	r4, [sp, #8]
 801f4f0:	b2ad      	uxth	r5, r5
 801f4f2:	b2bf      	uxth	r7, r7
 801f4f4:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801f4f8:	f105 0a01 	add.w	sl, r5, #1
 801f4fc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f500:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f504:	ea4a 0e0e 	orr.w	lr, sl, lr
 801f508:	f107 0a01 	add.w	sl, r7, #1
 801f50c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801f510:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f514:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f518:	ea4e 0e0a 	orr.w	lr, lr, sl
 801f51c:	f820 e004 	strh.w	lr, [r0, r4]
 801f520:	e7aa      	b.n	801f478 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f522:	f04f 0900 	mov.w	r9, #0
 801f526:	eba3 0409 	sub.w	r4, r3, r9
 801f52a:	2c00      	cmp	r4, #0
 801f52c:	f77f af4a 	ble.w	801f3c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f530:	1414      	asrs	r4, r2, #16
 801f532:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801f536:	140d      	asrs	r5, r1, #16
 801f538:	fb06 5504 	mla	r5, r6, r4, r5
 801f53c:	9c01      	ldr	r4, [sp, #4]
 801f53e:	5d64      	ldrb	r4, [r4, r5]
 801f540:	2cff      	cmp	r4, #255	; 0xff
 801f542:	d10b      	bne.n	801f55c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801f544:	9c00      	ldr	r4, [sp, #0]
 801f546:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801f54a:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801f54e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f550:	f109 0901 	add.w	r9, r9, #1
 801f554:	4421      	add	r1, r4
 801f556:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f558:	4422      	add	r2, r4
 801f55a:	e7e4      	b.n	801f526 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f55c:	2c00      	cmp	r4, #0
 801f55e:	d0f6      	beq.n	801f54e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f560:	9e00      	ldr	r6, [sp, #0]
 801f562:	b2a7      	uxth	r7, r4
 801f564:	43e4      	mvns	r4, r4
 801f566:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801f56a:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f56e:	b2e4      	uxtb	r4, r4
 801f570:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f574:	122e      	asrs	r6, r5, #8
 801f576:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f57a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f57e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f582:	00ed      	lsls	r5, r5, #3
 801f584:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f588:	fb16 f604 	smulbb	r6, r6, r4
 801f58c:	b2ed      	uxtb	r5, r5
 801f58e:	fb1a fa04 	smulbb	sl, sl, r4
 801f592:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f596:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f59a:	fb15 f504 	smulbb	r5, r5, r4
 801f59e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f5a2:	fa1f fc8c 	uxth.w	ip, ip
 801f5a6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f5aa:	fa5f fe8e 	uxtb.w	lr, lr
 801f5ae:	fb06 a607 	mla	r6, r6, r7, sl
 801f5b2:	f10c 0401 	add.w	r4, ip, #1
 801f5b6:	fb0e 5507 	mla	r5, lr, r7, r5
 801f5ba:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f5be:	b2ad      	uxth	r5, r5
 801f5c0:	b2b6      	uxth	r6, r6
 801f5c2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f5c6:	f105 0a01 	add.w	sl, r5, #1
 801f5ca:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f5ce:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f5d2:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f5d6:	f106 0a01 	add.w	sl, r6, #1
 801f5da:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f5de:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f5e2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f5e6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f5ea:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f5ee:	e7ae      	b.n	801f54e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f5f0:	b005      	add	sp, #20
 801f5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f5f6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f5f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5fa:	b085      	sub	sp, #20
 801f5fc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f5fe:	9203      	str	r2, [sp, #12]
 801f600:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801f604:	9100      	str	r1, [sp, #0]
 801f606:	9201      	str	r2, [sp, #4]
 801f608:	6841      	ldr	r1, [r0, #4]
 801f60a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801f60e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f612:	fb01 2404 	mla	r4, r1, r4, r2
 801f616:	6802      	ldr	r2, [r0, #0]
 801f618:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f61c:	f8de 2000 	ldr.w	r2, [lr]
 801f620:	9202      	str	r2, [sp, #8]
 801f622:	9a01      	ldr	r2, [sp, #4]
 801f624:	43d6      	mvns	r6, r2
 801f626:	b2f6      	uxtb	r6, r6
 801f628:	9a00      	ldr	r2, [sp, #0]
 801f62a:	2a00      	cmp	r2, #0
 801f62c:	dc03      	bgt.n	801f636 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f62e:	9a03      	ldr	r2, [sp, #12]
 801f630:	2a00      	cmp	r2, #0
 801f632:	f340 8124 	ble.w	801f87e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f636:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f638:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801f63c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f640:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f642:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801f646:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f64a:	2b00      	cmp	r3, #0
 801f64c:	dd0e      	ble.n	801f66c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f64e:	1408      	asrs	r0, r1, #16
 801f650:	d405      	bmi.n	801f65e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f652:	4560      	cmp	r0, ip
 801f654:	da03      	bge.n	801f65e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f656:	1410      	asrs	r0, r2, #16
 801f658:	d401      	bmi.n	801f65e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f65a:	42b8      	cmp	r0, r7
 801f65c:	db07      	blt.n	801f66e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f65e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f660:	3b01      	subs	r3, #1
 801f662:	3402      	adds	r4, #2
 801f664:	4401      	add	r1, r0
 801f666:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f668:	4402      	add	r2, r0
 801f66a:	e7ee      	b.n	801f64a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801f66c:	d06e      	beq.n	801f74c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f66e:	1e58      	subs	r0, r3, #1
 801f670:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f672:	fb05 1500 	mla	r5, r5, r0, r1
 801f676:	142d      	asrs	r5, r5, #16
 801f678:	d45c      	bmi.n	801f734 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f67a:	4565      	cmp	r5, ip
 801f67c:	da5a      	bge.n	801f734 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f67e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f680:	fb05 2000 	mla	r0, r5, r0, r2
 801f684:	1400      	asrs	r0, r0, #16
 801f686:	d455      	bmi.n	801f734 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f688:	42b8      	cmp	r0, r7
 801f68a:	da53      	bge.n	801f734 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f68c:	4699      	mov	r9, r3
 801f68e:	46a2      	mov	sl, r4
 801f690:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801f694:	f1b9 0f00 	cmp.w	r9, #0
 801f698:	dd54      	ble.n	801f744 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f69a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f69e:	140d      	asrs	r5, r1, #16
 801f6a0:	1410      	asrs	r0, r2, #16
 801f6a2:	f109 39ff 	add.w	r9, r9, #4294967295
 801f6a6:	fb07 5000 	mla	r0, r7, r0, r5
 801f6aa:	9d02      	ldr	r5, [sp, #8]
 801f6ac:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f6b0:	f8ba 5000 	ldrh.w	r5, [sl]
 801f6b4:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f6b8:	122f      	asrs	r7, r5, #8
 801f6ba:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801f6be:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f6c2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f6c6:	00ed      	lsls	r5, r5, #3
 801f6c8:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801f6cc:	fb17 f706 	smulbb	r7, r7, r6
 801f6d0:	b2ed      	uxtb	r5, r5
 801f6d2:	fb18 f806 	smulbb	r8, r8, r6
 801f6d6:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801f6da:	10c7      	asrs	r7, r0, #3
 801f6dc:	fb15 f506 	smulbb	r5, r5, r6
 801f6e0:	00c0      	lsls	r0, r0, #3
 801f6e2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f6e6:	fa1f fc8c 	uxth.w	ip, ip
 801f6ea:	b2c0      	uxtb	r0, r0
 801f6ec:	fb07 870b 	mla	r7, r7, fp, r8
 801f6f0:	fb00 500b 	mla	r0, r0, fp, r5
 801f6f4:	f10c 0501 	add.w	r5, ip, #1
 801f6f8:	b2bf      	uxth	r7, r7
 801f6fa:	b280      	uxth	r0, r0
 801f6fc:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f700:	f107 0801 	add.w	r8, r7, #1
 801f704:	1c45      	adds	r5, r0, #1
 801f706:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801f70a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f70e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f712:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f714:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801f718:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f71c:	4401      	add	r1, r0
 801f71e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f722:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f724:	ea45 0c0c 	orr.w	ip, r5, ip
 801f728:	4402      	add	r2, r0
 801f72a:	ea4c 0c08 	orr.w	ip, ip, r8
 801f72e:	f82a cb02 	strh.w	ip, [sl], #2
 801f732:	e7af      	b.n	801f694 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f734:	f04f 0800 	mov.w	r8, #0
 801f738:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801f73c:	eb03 0008 	add.w	r0, r3, r8
 801f740:	2800      	cmp	r0, #0
 801f742:	dc41      	bgt.n	801f7c8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f744:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f748:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f74c:	9b00      	ldr	r3, [sp, #0]
 801f74e:	2b00      	cmp	r3, #0
 801f750:	f340 8095 	ble.w	801f87e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f754:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f75a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f75e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f762:	eef0 6a62 	vmov.f32	s13, s5
 801f766:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f76a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f76e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f772:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801f776:	eef0 6a43 	vmov.f32	s13, s6
 801f77a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f77e:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801f782:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f786:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f78a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f78e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f792:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f796:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f79a:	ee12 2a90 	vmov	r2, s5
 801f79e:	eef0 2a47 	vmov.f32	s5, s14
 801f7a2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f7a6:	ee13 2a10 	vmov	r2, s6
 801f7aa:	9311      	str	r3, [sp, #68]	; 0x44
 801f7ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f7ae:	eeb0 3a67 	vmov.f32	s6, s15
 801f7b2:	fb92 f3f3 	sdiv	r3, r2, r3
 801f7b6:	9312      	str	r3, [sp, #72]	; 0x48
 801f7b8:	9b00      	ldr	r3, [sp, #0]
 801f7ba:	9a03      	ldr	r2, [sp, #12]
 801f7bc:	3b01      	subs	r3, #1
 801f7be:	9300      	str	r3, [sp, #0]
 801f7c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f7c2:	bf08      	it	eq
 801f7c4:	4613      	moveq	r3, r2
 801f7c6:	e72f      	b.n	801f628 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f7c8:	140f      	asrs	r7, r1, #16
 801f7ca:	d451      	bmi.n	801f870 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f7cc:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f7d0:	42bd      	cmp	r5, r7
 801f7d2:	dd4d      	ble.n	801f870 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f7d4:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f7d8:	d44a      	bmi.n	801f870 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f7da:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f7de:	4560      	cmp	r0, ip
 801f7e0:	dd46      	ble.n	801f870 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f7e2:	b22d      	sxth	r5, r5
 801f7e4:	9802      	ldr	r0, [sp, #8]
 801f7e6:	fb0c 7505 	mla	r5, ip, r5, r7
 801f7ea:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801f7ee:	f06f 0501 	mvn.w	r5, #1
 801f7f2:	fb05 fb08 	mul.w	fp, r5, r8
 801f7f6:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f7fa:	f834 500b 	ldrh.w	r5, [r4, fp]
 801f7fe:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f802:	122f      	asrs	r7, r5, #8
 801f804:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801f808:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f80c:	00ed      	lsls	r5, r5, #3
 801f80e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f812:	fb17 f706 	smulbb	r7, r7, r6
 801f816:	b2ed      	uxtb	r5, r5
 801f818:	fb19 f906 	smulbb	r9, r9, r6
 801f81c:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801f820:	10c7      	asrs	r7, r0, #3
 801f822:	fb15 f506 	smulbb	r5, r5, r6
 801f826:	00c0      	lsls	r0, r0, #3
 801f828:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f82c:	fa1f fc8c 	uxth.w	ip, ip
 801f830:	b2c0      	uxtb	r0, r0
 801f832:	fb07 970a 	mla	r7, r7, sl, r9
 801f836:	fb00 500a 	mla	r0, r0, sl, r5
 801f83a:	f10c 0501 	add.w	r5, ip, #1
 801f83e:	b2bf      	uxth	r7, r7
 801f840:	b280      	uxth	r0, r0
 801f842:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f846:	f107 0901 	add.w	r9, r7, #1
 801f84a:	1c45      	adds	r5, r0, #1
 801f84c:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801f850:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f854:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f858:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f85c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f860:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f864:	ea45 0c0c 	orr.w	ip, r5, ip
 801f868:	ea4c 0c09 	orr.w	ip, ip, r9
 801f86c:	f824 c00b 	strh.w	ip, [r4, fp]
 801f870:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f872:	f108 38ff 	add.w	r8, r8, #4294967295
 801f876:	4401      	add	r1, r0
 801f878:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f87a:	4402      	add	r2, r0
 801f87c:	e75e      	b.n	801f73c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801f87e:	b005      	add	sp, #20
 801f880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f884 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f888:	b085      	sub	sp, #20
 801f88a:	4693      	mov	fp, r2
 801f88c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f890:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f892:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f894:	6870      	ldr	r0, [r6, #4]
 801f896:	9101      	str	r1, [sp, #4]
 801f898:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f89c:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801f8a0:	fb00 2404 	mla	r4, r0, r4, r2
 801f8a4:	6832      	ldr	r2, [r6, #0]
 801f8a6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f8aa:	682a      	ldr	r2, [r5, #0]
 801f8ac:	9202      	str	r2, [sp, #8]
 801f8ae:	9a01      	ldr	r2, [sp, #4]
 801f8b0:	2a00      	cmp	r2, #0
 801f8b2:	dc03      	bgt.n	801f8bc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f8b4:	f1bb 0f00 	cmp.w	fp, #0
 801f8b8:	f340 809a 	ble.w	801f9f0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801f8bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f8be:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f8c2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f8c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f8c8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801f8cc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f8d0:	2b00      	cmp	r3, #0
 801f8d2:	dd0c      	ble.n	801f8ee <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f8d4:	1406      	asrs	r6, r0, #16
 801f8d6:	d405      	bmi.n	801f8e4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f8d8:	454e      	cmp	r6, r9
 801f8da:	da03      	bge.n	801f8e4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f8dc:	1416      	asrs	r6, r2, #16
 801f8de:	d401      	bmi.n	801f8e4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f8e0:	4546      	cmp	r6, r8
 801f8e2:	db05      	blt.n	801f8f0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f8e4:	4470      	add	r0, lr
 801f8e6:	4462      	add	r2, ip
 801f8e8:	3b01      	subs	r3, #1
 801f8ea:	3402      	adds	r4, #2
 801f8ec:	e7f0      	b.n	801f8d0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f8ee:	d00f      	beq.n	801f910 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f8f0:	1e5e      	subs	r6, r3, #1
 801f8f2:	fb0e 0706 	mla	r7, lr, r6, r0
 801f8f6:	143f      	asrs	r7, r7, #16
 801f8f8:	d541      	bpl.n	801f97e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801f8fa:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801f8fe:	4698      	mov	r8, r3
 801f900:	9603      	str	r6, [sp, #12]
 801f902:	f1b8 0f00 	cmp.w	r8, #0
 801f906:	dc56      	bgt.n	801f9b6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801f908:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f90c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f910:	9b01      	ldr	r3, [sp, #4]
 801f912:	2b00      	cmp	r3, #0
 801f914:	dd6c      	ble.n	801f9f0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801f916:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f91a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f91c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f920:	eeb0 6a62 	vmov.f32	s12, s5
 801f924:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f928:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f92c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f930:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f934:	eeb0 6a43 	vmov.f32	s12, s6
 801f938:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f93c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f940:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f944:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f948:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f94c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f950:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f954:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f958:	ee12 2a90 	vmov	r2, s5
 801f95c:	eef0 2a47 	vmov.f32	s5, s14
 801f960:	fb92 fef3 	sdiv	lr, r2, r3
 801f964:	ee13 2a10 	vmov	r2, s6
 801f968:	eeb0 3a67 	vmov.f32	s6, s15
 801f96c:	fb92 fcf3 	sdiv	ip, r2, r3
 801f970:	9b01      	ldr	r3, [sp, #4]
 801f972:	3b01      	subs	r3, #1
 801f974:	9301      	str	r3, [sp, #4]
 801f976:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f978:	bf08      	it	eq
 801f97a:	465b      	moveq	r3, fp
 801f97c:	e797      	b.n	801f8ae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801f97e:	454f      	cmp	r7, r9
 801f980:	dabb      	bge.n	801f8fa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f982:	fb0c 2606 	mla	r6, ip, r6, r2
 801f986:	1436      	asrs	r6, r6, #16
 801f988:	d4b7      	bmi.n	801f8fa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f98a:	4546      	cmp	r6, r8
 801f98c:	dab5      	bge.n	801f8fa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f98e:	461e      	mov	r6, r3
 801f990:	46a0      	mov	r8, r4
 801f992:	2e00      	cmp	r6, #0
 801f994:	ddb8      	ble.n	801f908 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f996:	1417      	asrs	r7, r2, #16
 801f998:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801f99c:	ea4f 4920 	mov.w	r9, r0, asr #16
 801f9a0:	9902      	ldr	r1, [sp, #8]
 801f9a2:	4470      	add	r0, lr
 801f9a4:	4462      	add	r2, ip
 801f9a6:	fb0a 9707 	mla	r7, sl, r7, r9
 801f9aa:	3e01      	subs	r6, #1
 801f9ac:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801f9b0:	f828 7b02 	strh.w	r7, [r8], #2
 801f9b4:	e7ed      	b.n	801f992 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801f9b6:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f9ba:	d414      	bmi.n	801f9e6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f9bc:	68ae      	ldr	r6, [r5, #8]
 801f9be:	454e      	cmp	r6, r9
 801f9c0:	dd11      	ble.n	801f9e6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f9c2:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f9c6:	d40e      	bmi.n	801f9e6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f9c8:	68ef      	ldr	r7, [r5, #12]
 801f9ca:	4557      	cmp	r7, sl
 801f9cc:	dd0b      	ble.n	801f9e6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f9ce:	b236      	sxth	r6, r6
 801f9d0:	f06f 0101 	mvn.w	r1, #1
 801f9d4:	9f02      	ldr	r7, [sp, #8]
 801f9d6:	fb0a 9606 	mla	r6, sl, r6, r9
 801f9da:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801f9de:	fb01 f608 	mul.w	r6, r1, r8
 801f9e2:	9903      	ldr	r1, [sp, #12]
 801f9e4:	538f      	strh	r7, [r1, r6]
 801f9e6:	4470      	add	r0, lr
 801f9e8:	4462      	add	r2, ip
 801f9ea:	f108 38ff 	add.w	r8, r8, #4294967295
 801f9ee:	e788      	b.n	801f902 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f9f0:	b005      	add	sp, #20
 801f9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f9f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f9f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9fa:	b087      	sub	sp, #28
 801f9fc:	468b      	mov	fp, r1
 801f9fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fa02:	9815      	ldr	r0, [sp, #84]	; 0x54
 801fa04:	9203      	str	r2, [sp, #12]
 801fa06:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801fa0a:	6841      	ldr	r1, [r0, #4]
 801fa0c:	9204      	str	r2, [sp, #16]
 801fa0e:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801fa12:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801fa16:	fb01 2505 	mla	r5, r1, r5, r2
 801fa1a:	6802      	ldr	r2, [r0, #0]
 801fa1c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801fa20:	f8d9 2000 	ldr.w	r2, [r9]
 801fa24:	9201      	str	r2, [sp, #4]
 801fa26:	f1bb 0f00 	cmp.w	fp, #0
 801fa2a:	dc03      	bgt.n	801fa34 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801fa2c:	9a03      	ldr	r2, [sp, #12]
 801fa2e:	2a00      	cmp	r2, #0
 801fa30:	f340 8158 	ble.w	801fce4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801fa34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fa36:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801fa3a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fa3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fa40:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801fa44:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fa48:	2b00      	cmp	r3, #0
 801fa4a:	dd0e      	ble.n	801fa6a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fa4c:	1402      	asrs	r2, r0, #16
 801fa4e:	d405      	bmi.n	801fa5c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fa50:	42ba      	cmp	r2, r7
 801fa52:	da03      	bge.n	801fa5c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fa54:	140a      	asrs	r2, r1, #16
 801fa56:	d401      	bmi.n	801fa5c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fa58:	42b2      	cmp	r2, r6
 801fa5a:	db07      	blt.n	801fa6c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fa5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fa5e:	3b01      	subs	r3, #1
 801fa60:	3502      	adds	r5, #2
 801fa62:	4410      	add	r0, r2
 801fa64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fa66:	4411      	add	r1, r2
 801fa68:	e7ee      	b.n	801fa48 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801fa6a:	d017      	beq.n	801fa9c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801fa6c:	1e5a      	subs	r2, r3, #1
 801fa6e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801fa70:	fb04 0402 	mla	r4, r4, r2, r0
 801fa74:	1424      	asrs	r4, r4, #16
 801fa76:	d409      	bmi.n	801fa8c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fa78:	42bc      	cmp	r4, r7
 801fa7a:	da07      	bge.n	801fa8c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fa7c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801fa7e:	fb04 1202 	mla	r2, r4, r2, r1
 801fa82:	1412      	asrs	r2, r2, #16
 801fa84:	d402      	bmi.n	801fa8c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fa86:	42b2      	cmp	r2, r6
 801fa88:	f2c0 80bf 	blt.w	801fc0a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801fa8c:	2700      	movs	r7, #0
 801fa8e:	19da      	adds	r2, r3, r7
 801fa90:	2a00      	cmp	r2, #0
 801fa92:	dc3e      	bgt.n	801fb12 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fa94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fa98:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801fa9c:	f1bb 0f00 	cmp.w	fp, #0
 801faa0:	f340 8120 	ble.w	801fce4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801faa4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801faa8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801faaa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801faae:	f1bb 0b01 	subs.w	fp, fp, #1
 801fab2:	eeb0 6a62 	vmov.f32	s12, s5
 801fab6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801faba:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fabe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fac2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801fac6:	eeb0 6a43 	vmov.f32	s12, s6
 801faca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801face:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801fad2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fad6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fada:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fade:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fae2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fae6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801faea:	ee12 2a90 	vmov	r2, s5
 801faee:	eef0 2a47 	vmov.f32	s5, s14
 801faf2:	fb92 f3f3 	sdiv	r3, r2, r3
 801faf6:	ee13 2a10 	vmov	r2, s6
 801fafa:	9313      	str	r3, [sp, #76]	; 0x4c
 801fafc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fafe:	eeb0 3a67 	vmov.f32	s6, s15
 801fb02:	fb92 f3f3 	sdiv	r3, r2, r3
 801fb06:	9a03      	ldr	r2, [sp, #12]
 801fb08:	9314      	str	r3, [sp, #80]	; 0x50
 801fb0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fb0c:	bf08      	it	eq
 801fb0e:	4613      	moveq	r3, r2
 801fb10:	e789      	b.n	801fa26 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801fb12:	1406      	asrs	r6, r0, #16
 801fb14:	d42d      	bmi.n	801fb72 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fb16:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801fb1a:	42b4      	cmp	r4, r6
 801fb1c:	dd29      	ble.n	801fb72 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fb1e:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801fb22:	d426      	bmi.n	801fb72 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fb24:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801fb28:	4562      	cmp	r2, ip
 801fb2a:	dd22      	ble.n	801fb72 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fb2c:	b224      	sxth	r4, r4
 801fb2e:	9a01      	ldr	r2, [sp, #4]
 801fb30:	fb0c 6404 	mla	r4, ip, r4, r6
 801fb34:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801fb38:	0e22      	lsrs	r2, r4, #24
 801fb3a:	d01a      	beq.n	801fb72 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fb3c:	9e04      	ldr	r6, [sp, #16]
 801fb3e:	4372      	muls	r2, r6
 801fb40:	1c56      	adds	r6, r2, #1
 801fb42:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801fb46:	0a26      	lsrs	r6, r4, #8
 801fb48:	1212      	asrs	r2, r2, #8
 801fb4a:	9605      	str	r6, [sp, #20]
 801fb4c:	2aff      	cmp	r2, #255	; 0xff
 801fb4e:	d116      	bne.n	801fb7e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801fb50:	f06f 0201 	mvn.w	r2, #1
 801fb54:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801fb58:	fb02 fc07 	mul.w	ip, r2, r7
 801fb5c:	0962      	lsrs	r2, r4, #5
 801fb5e:	f026 0607 	bic.w	r6, r6, #7
 801fb62:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801fb66:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fb6a:	4316      	orrs	r6, r2
 801fb6c:	4326      	orrs	r6, r4
 801fb6e:	f825 600c 	strh.w	r6, [r5, ip]
 801fb72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fb74:	3f01      	subs	r7, #1
 801fb76:	4410      	add	r0, r2
 801fb78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fb7a:	4411      	add	r1, r2
 801fb7c:	e787      	b.n	801fa8e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fb7e:	f06f 0601 	mvn.w	r6, #1
 801fb82:	fa1f fa82 	uxth.w	sl, r2
 801fb86:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801fb8a:	43d2      	mvns	r2, r2
 801fb8c:	437e      	muls	r6, r7
 801fb8e:	b2e4      	uxtb	r4, r4
 801fb90:	fb1c fc0a 	smulbb	ip, ip, sl
 801fb94:	b2d2      	uxtb	r2, r2
 801fb96:	f835 8006 	ldrh.w	r8, [r5, r6]
 801fb9a:	fb14 f40a 	smulbb	r4, r4, sl
 801fb9e:	9602      	str	r6, [sp, #8]
 801fba0:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801fba4:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801fba8:	fb16 f60a 	smulbb	r6, r6, sl
 801fbac:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801fbb0:	fb0e ce02 	mla	lr, lr, r2, ip
 801fbb4:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801fbb8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801fbbc:	fa1f fe8e 	uxth.w	lr, lr
 801fbc0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801fbc4:	fa5f f888 	uxtb.w	r8, r8
 801fbc8:	fb0c 6c02 	mla	ip, ip, r2, r6
 801fbcc:	fb08 4402 	mla	r4, r8, r2, r4
 801fbd0:	f10e 0201 	add.w	r2, lr, #1
 801fbd4:	fa1f fc8c 	uxth.w	ip, ip
 801fbd8:	b2a4      	uxth	r4, r4
 801fbda:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801fbde:	9a02      	ldr	r2, [sp, #8]
 801fbe0:	1c66      	adds	r6, r4, #1
 801fbe2:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801fbe6:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801fbea:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fbee:	ea46 0e0e 	orr.w	lr, r6, lr
 801fbf2:	f10c 0601 	add.w	r6, ip, #1
 801fbf6:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801fbfa:	0976      	lsrs	r6, r6, #5
 801fbfc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801fc00:	ea4e 0e06 	orr.w	lr, lr, r6
 801fc04:	f825 e002 	strh.w	lr, [r5, r2]
 801fc08:	e7b3      	b.n	801fb72 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fc0a:	f04f 0800 	mov.w	r8, #0
 801fc0e:	eba3 0208 	sub.w	r2, r3, r8
 801fc12:	2a00      	cmp	r2, #0
 801fc14:	f77f af3e 	ble.w	801fa94 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fc18:	1404      	asrs	r4, r0, #16
 801fc1a:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801fc1e:	140a      	asrs	r2, r1, #16
 801fc20:	fb06 4202 	mla	r2, r6, r2, r4
 801fc24:	9c01      	ldr	r4, [sp, #4]
 801fc26:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801fc2a:	0e22      	lsrs	r2, r4, #24
 801fc2c:	d015      	beq.n	801fc5a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801fc2e:	9e04      	ldr	r6, [sp, #16]
 801fc30:	4372      	muls	r2, r6
 801fc32:	1c56      	adds	r6, r2, #1
 801fc34:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801fc38:	0a26      	lsrs	r6, r4, #8
 801fc3a:	1212      	asrs	r2, r2, #8
 801fc3c:	2aff      	cmp	r2, #255	; 0xff
 801fc3e:	d113      	bne.n	801fc68 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801fc40:	0962      	lsrs	r2, r4, #5
 801fc42:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801fc46:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801fc4a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fc4e:	f026 0607 	bic.w	r6, r6, #7
 801fc52:	4316      	orrs	r6, r2
 801fc54:	4326      	orrs	r6, r4
 801fc56:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801fc5a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fc5c:	f108 0801 	add.w	r8, r8, #1
 801fc60:	4410      	add	r0, r2
 801fc62:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fc64:	4411      	add	r1, r2
 801fc66:	e7d2      	b.n	801fc0e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801fc68:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801fc6c:	fa1f fa82 	uxth.w	sl, r2
 801fc70:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801fc74:	43d2      	mvns	r2, r2
 801fc76:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801fc7a:	fb17 f70a 	smulbb	r7, r7, sl
 801fc7e:	b2d2      	uxtb	r2, r2
 801fc80:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fc84:	b2e4      	uxtb	r4, r4
 801fc86:	b2f6      	uxtb	r6, r6
 801fc88:	fb0c 7c02 	mla	ip, ip, r2, r7
 801fc8c:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801fc90:	fb14 f40a 	smulbb	r4, r4, sl
 801fc94:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fc98:	fa1f fc8c 	uxth.w	ip, ip
 801fc9c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fca0:	fb16 f60a 	smulbb	r6, r6, sl
 801fca4:	fa5f fe8e 	uxtb.w	lr, lr
 801fca8:	fb0e 4402 	mla	r4, lr, r2, r4
 801fcac:	fb07 6702 	mla	r7, r7, r2, r6
 801fcb0:	f10c 0201 	add.w	r2, ip, #1
 801fcb4:	b2a4      	uxth	r4, r4
 801fcb6:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801fcba:	1c66      	adds	r6, r4, #1
 801fcbc:	b2bf      	uxth	r7, r7
 801fcbe:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fcc2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801fcc6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fcca:	ea46 0c0c 	orr.w	ip, r6, ip
 801fcce:	1c7e      	adds	r6, r7, #1
 801fcd0:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801fcd4:	0976      	lsrs	r6, r6, #5
 801fcd6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801fcda:	ea4c 0c06 	orr.w	ip, ip, r6
 801fcde:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801fce2:	e7ba      	b.n	801fc5a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801fce4:	b007      	add	sp, #28
 801fce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801fcec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fcec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcf0:	b085      	sub	sp, #20
 801fcf2:	468b      	mov	fp, r1
 801fcf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fcf8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fcfa:	9203      	str	r2, [sp, #12]
 801fcfc:	6841      	ldr	r1, [r0, #4]
 801fcfe:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801fd02:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801fd06:	fb01 2404 	mla	r4, r1, r4, r2
 801fd0a:	6802      	ldr	r2, [r0, #0]
 801fd0c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fd10:	f8d8 2000 	ldr.w	r2, [r8]
 801fd14:	9201      	str	r2, [sp, #4]
 801fd16:	f1bb 0f00 	cmp.w	fp, #0
 801fd1a:	dc03      	bgt.n	801fd24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fd1c:	9a03      	ldr	r2, [sp, #12]
 801fd1e:	2a00      	cmp	r2, #0
 801fd20:	f340 814f 	ble.w	801ffc2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801fd24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fd26:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801fd2a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fd2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fd30:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801fd34:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fd38:	2b00      	cmp	r3, #0
 801fd3a:	dd0e      	ble.n	801fd5a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fd3c:	1408      	asrs	r0, r1, #16
 801fd3e:	d405      	bmi.n	801fd4c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fd40:	42b8      	cmp	r0, r7
 801fd42:	da03      	bge.n	801fd4c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fd44:	1410      	asrs	r0, r2, #16
 801fd46:	d401      	bmi.n	801fd4c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fd48:	42b0      	cmp	r0, r6
 801fd4a:	db07      	blt.n	801fd5c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fd4c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fd4e:	3b01      	subs	r3, #1
 801fd50:	3402      	adds	r4, #2
 801fd52:	4401      	add	r1, r0
 801fd54:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fd56:	4402      	add	r2, r0
 801fd58:	e7ee      	b.n	801fd38 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801fd5a:	d017      	beq.n	801fd8c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801fd5c:	1e58      	subs	r0, r3, #1
 801fd5e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fd60:	fb05 1500 	mla	r5, r5, r0, r1
 801fd64:	142d      	asrs	r5, r5, #16
 801fd66:	d409      	bmi.n	801fd7c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fd68:	42bd      	cmp	r5, r7
 801fd6a:	da07      	bge.n	801fd7c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fd6c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fd6e:	fb05 2000 	mla	r0, r5, r0, r2
 801fd72:	1400      	asrs	r0, r0, #16
 801fd74:	d402      	bmi.n	801fd7c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fd76:	42b0      	cmp	r0, r6
 801fd78:	f2c0 80ba 	blt.w	801fef0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801fd7c:	2600      	movs	r6, #0
 801fd7e:	1998      	adds	r0, r3, r6
 801fd80:	2800      	cmp	r0, #0
 801fd82:	dc3e      	bgt.n	801fe02 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801fd84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fd88:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fd8c:	f1bb 0f00 	cmp.w	fp, #0
 801fd90:	f340 8117 	ble.w	801ffc2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801fd94:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fd98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fd9a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fd9e:	f1bb 0b01 	subs.w	fp, fp, #1
 801fda2:	eeb0 6a62 	vmov.f32	s12, s5
 801fda6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fdaa:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fdae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fdb2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fdb6:	eeb0 6a43 	vmov.f32	s12, s6
 801fdba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fdbe:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fdc2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fdc6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fdca:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fdce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fdd2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fdd6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fdda:	ee12 2a90 	vmov	r2, s5
 801fdde:	eef0 2a47 	vmov.f32	s5, s14
 801fde2:	fb92 f3f3 	sdiv	r3, r2, r3
 801fde6:	ee13 2a10 	vmov	r2, s6
 801fdea:	9311      	str	r3, [sp, #68]	; 0x44
 801fdec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fdee:	eeb0 3a67 	vmov.f32	s6, s15
 801fdf2:	fb92 f3f3 	sdiv	r3, r2, r3
 801fdf6:	9a03      	ldr	r2, [sp, #12]
 801fdf8:	9312      	str	r3, [sp, #72]	; 0x48
 801fdfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fdfc:	bf08      	it	eq
 801fdfe:	4613      	moveq	r3, r2
 801fe00:	e789      	b.n	801fd16 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801fe02:	140f      	asrs	r7, r1, #16
 801fe04:	d424      	bmi.n	801fe50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fe06:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801fe0a:	42bd      	cmp	r5, r7
 801fe0c:	dd20      	ble.n	801fe50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fe0e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801fe12:	d41d      	bmi.n	801fe50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fe14:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801fe18:	4560      	cmp	r0, ip
 801fe1a:	dd19      	ble.n	801fe50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fe1c:	b22d      	sxth	r5, r5
 801fe1e:	9801      	ldr	r0, [sp, #4]
 801fe20:	fb0c 7505 	mla	r5, ip, r5, r7
 801fe24:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801fe28:	0e07      	lsrs	r7, r0, #24
 801fe2a:	2fff      	cmp	r7, #255	; 0xff
 801fe2c:	d116      	bne.n	801fe5c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fe2e:	f06f 0501 	mvn.w	r5, #1
 801fe32:	fb05 f706 	mul.w	r7, r5, r6
 801fe36:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801fe3a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801fe3e:	0945      	lsrs	r5, r0, #5
 801fe40:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801fe44:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fe48:	ea4c 0505 	orr.w	r5, ip, r5
 801fe4c:	4305      	orrs	r5, r0
 801fe4e:	53e5      	strh	r5, [r4, r7]
 801fe50:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fe52:	3e01      	subs	r6, #1
 801fe54:	4401      	add	r1, r0
 801fe56:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fe58:	4402      	add	r2, r0
 801fe5a:	e790      	b.n	801fd7e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fe5c:	b2fd      	uxtb	r5, r7
 801fe5e:	2f00      	cmp	r7, #0
 801fe60:	d0f6      	beq.n	801fe50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fe62:	f06f 0701 	mvn.w	r7, #1
 801fe66:	fa1f f985 	uxth.w	r9, r5
 801fe6a:	43ed      	mvns	r5, r5
 801fe6c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801fe70:	4377      	muls	r7, r6
 801fe72:	fb1a fa09 	smulbb	sl, sl, r9
 801fe76:	b2ed      	uxtb	r5, r5
 801fe78:	f834 e007 	ldrh.w	lr, [r4, r7]
 801fe7c:	9702      	str	r7, [sp, #8]
 801fe7e:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801fe82:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801fe86:	fb17 f709 	smulbb	r7, r7, r9
 801fe8a:	b2c0      	uxtb	r0, r0
 801fe8c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fe90:	fb10 f009 	smulbb	r0, r0, r9
 801fe94:	fb0c 7c05 	mla	ip, ip, r5, r7
 801fe98:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801fe9c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fea0:	fa1f fc8c 	uxth.w	ip, ip
 801fea4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fea8:	fa5f fe8e 	uxtb.w	lr, lr
 801feac:	fb07 a705 	mla	r7, r7, r5, sl
 801feb0:	fb0e 0005 	mla	r0, lr, r5, r0
 801feb4:	f10c 0501 	add.w	r5, ip, #1
 801feb8:	b2bf      	uxth	r7, r7
 801feba:	b280      	uxth	r0, r0
 801febc:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801fec0:	f100 0a01 	add.w	sl, r0, #1
 801fec4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fec8:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801fecc:	9802      	ldr	r0, [sp, #8]
 801fece:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fed2:	ea4a 0c0c 	orr.w	ip, sl, ip
 801fed6:	f107 0a01 	add.w	sl, r7, #1
 801feda:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801fede:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fee2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fee6:	ea4c 0c0a 	orr.w	ip, ip, sl
 801feea:	f824 c000 	strh.w	ip, [r4, r0]
 801feee:	e7af      	b.n	801fe50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fef0:	f04f 0e00 	mov.w	lr, #0
 801fef4:	eba3 000e 	sub.w	r0, r3, lr
 801fef8:	2800      	cmp	r0, #0
 801fefa:	f77f af43 	ble.w	801fd84 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fefe:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801ff02:	140d      	asrs	r5, r1, #16
 801ff04:	1410      	asrs	r0, r2, #16
 801ff06:	fb06 5000 	mla	r0, r6, r0, r5
 801ff0a:	9d01      	ldr	r5, [sp, #4]
 801ff0c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801ff10:	0e2e      	lsrs	r6, r5, #24
 801ff12:	2eff      	cmp	r6, #255	; 0xff
 801ff14:	d112      	bne.n	801ff3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801ff16:	482c      	ldr	r0, [pc, #176]	; (801ffc8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801ff18:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801ff1c:	0968      	lsrs	r0, r5, #5
 801ff1e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ff22:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ff26:	4330      	orrs	r0, r6
 801ff28:	4328      	orrs	r0, r5
 801ff2a:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801ff2e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ff30:	f10e 0e01 	add.w	lr, lr, #1
 801ff34:	4401      	add	r1, r0
 801ff36:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ff38:	4402      	add	r2, r0
 801ff3a:	e7db      	b.n	801fef4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ff3c:	b2f0      	uxtb	r0, r6
 801ff3e:	2e00      	cmp	r6, #0
 801ff40:	d0f5      	beq.n	801ff2e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ff42:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801ff46:	fa1f f980 	uxth.w	r9, r0
 801ff4a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ff4e:	43c0      	mvns	r0, r0
 801ff50:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ff54:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ff58:	fb16 f609 	smulbb	r6, r6, r9
 801ff5c:	b2c0      	uxtb	r0, r0
 801ff5e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ff62:	b2ed      	uxtb	r5, r5
 801ff64:	fb1a fa09 	smulbb	sl, sl, r9
 801ff68:	fb07 6700 	mla	r7, r7, r0, r6
 801ff6c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801ff70:	fb15 f509 	smulbb	r5, r5, r9
 801ff74:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ff78:	b2bf      	uxth	r7, r7
 801ff7a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ff7e:	fa5f fc8c 	uxtb.w	ip, ip
 801ff82:	fb06 a600 	mla	r6, r6, r0, sl
 801ff86:	fb0c 5500 	mla	r5, ip, r0, r5
 801ff8a:	1c78      	adds	r0, r7, #1
 801ff8c:	b2b6      	uxth	r6, r6
 801ff8e:	b2ad      	uxth	r5, r5
 801ff90:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801ff94:	f105 0a01 	add.w	sl, r5, #1
 801ff98:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ff9c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ffa0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ffa4:	ea4a 0707 	orr.w	r7, sl, r7
 801ffa8:	f106 0a01 	add.w	sl, r6, #1
 801ffac:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ffb0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ffb4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ffb8:	ea47 070a 	orr.w	r7, r7, sl
 801ffbc:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801ffc0:	e7b5      	b.n	801ff2e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801ffc2:	b005      	add	sp, #20
 801ffc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffc8:	fffff800 	.word	0xfffff800

0801ffcc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ffcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffd0:	b087      	sub	sp, #28
 801ffd2:	468b      	mov	fp, r1
 801ffd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ffd8:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ffda:	9203      	str	r2, [sp, #12]
 801ffdc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ffe0:	6841      	ldr	r1, [r0, #4]
 801ffe2:	9204      	str	r2, [sp, #16]
 801ffe4:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801ffe8:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801ffec:	fb01 2404 	mla	r4, r1, r4, r2
 801fff0:	6802      	ldr	r2, [r0, #0]
 801fff2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fff6:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801fffa:	3201      	adds	r2, #1
 801fffc:	f022 0201 	bic.w	r2, r2, #1
 8020000:	9200      	str	r2, [sp, #0]
 8020002:	f8d9 2000 	ldr.w	r2, [r9]
 8020006:	9201      	str	r2, [sp, #4]
 8020008:	f1bb 0f00 	cmp.w	fp, #0
 802000c:	dc03      	bgt.n	8020016 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802000e:	9a03      	ldr	r2, [sp, #12]
 8020010:	2a00      	cmp	r2, #0
 8020012:	f340 816a 	ble.w	80202ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8020016:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020018:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 802001c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020020:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020022:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8020026:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802002a:	2b00      	cmp	r3, #0
 802002c:	dd0e      	ble.n	802004c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802002e:	1402      	asrs	r2, r0, #16
 8020030:	d405      	bmi.n	802003e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020032:	42ba      	cmp	r2, r7
 8020034:	da03      	bge.n	802003e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020036:	140a      	asrs	r2, r1, #16
 8020038:	d401      	bmi.n	802003e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802003a:	42b2      	cmp	r2, r6
 802003c:	db07      	blt.n	802004e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802003e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020040:	3b01      	subs	r3, #1
 8020042:	3402      	adds	r4, #2
 8020044:	4410      	add	r0, r2
 8020046:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020048:	4411      	add	r1, r2
 802004a:	e7ee      	b.n	802002a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 802004c:	d017      	beq.n	802007e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802004e:	1e5a      	subs	r2, r3, #1
 8020050:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020052:	fb05 0502 	mla	r5, r5, r2, r0
 8020056:	142d      	asrs	r5, r5, #16
 8020058:	d409      	bmi.n	802006e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802005a:	42bd      	cmp	r5, r7
 802005c:	da07      	bge.n	802006e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802005e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020060:	fb05 1202 	mla	r2, r5, r2, r1
 8020064:	1412      	asrs	r2, r2, #16
 8020066:	d402      	bmi.n	802006e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020068:	42b2      	cmp	r2, r6
 802006a:	f2c0 80c8 	blt.w	80201fe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802006e:	2700      	movs	r7, #0
 8020070:	19da      	adds	r2, r3, r7
 8020072:	2a00      	cmp	r2, #0
 8020074:	dc3e      	bgt.n	80200f4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8020076:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802007a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802007e:	f1bb 0f00 	cmp.w	fp, #0
 8020082:	f340 8132 	ble.w	80202ea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8020086:	ee30 0a04 	vadd.f32	s0, s0, s8
 802008a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802008c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020090:	f1bb 0b01 	subs.w	fp, fp, #1
 8020094:	eeb0 6a62 	vmov.f32	s12, s5
 8020098:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802009c:	ee31 1a05 	vadd.f32	s2, s2, s10
 80200a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80200a4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80200a8:	eeb0 6a43 	vmov.f32	s12, s6
 80200ac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80200b0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80200b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80200b8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80200bc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80200c0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80200c4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80200c8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80200cc:	ee12 2a90 	vmov	r2, s5
 80200d0:	eef0 2a47 	vmov.f32	s5, s14
 80200d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80200d8:	ee13 2a10 	vmov	r2, s6
 80200dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80200de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80200e0:	eeb0 3a67 	vmov.f32	s6, s15
 80200e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80200e8:	9a03      	ldr	r2, [sp, #12]
 80200ea:	9314      	str	r3, [sp, #80]	; 0x50
 80200ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80200ee:	bf08      	it	eq
 80200f0:	4613      	moveq	r3, r2
 80200f2:	e789      	b.n	8020008 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80200f4:	1405      	asrs	r5, r0, #16
 80200f6:	d436      	bmi.n	8020166 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80200f8:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80200fc:	42aa      	cmp	r2, r5
 80200fe:	dd32      	ble.n	8020166 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020100:	140e      	asrs	r6, r1, #16
 8020102:	d430      	bmi.n	8020166 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8020104:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8020108:	42b2      	cmp	r2, r6
 802010a:	dd2c      	ble.n	8020166 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802010c:	9a00      	ldr	r2, [sp, #0]
 802010e:	fb06 5502 	mla	r5, r6, r2, r5
 8020112:	9e01      	ldr	r6, [sp, #4]
 8020114:	086a      	lsrs	r2, r5, #1
 8020116:	5cb2      	ldrb	r2, [r6, r2]
 8020118:	07ee      	lsls	r6, r5, #31
 802011a:	bf54      	ite	pl
 802011c:	f002 020f 	andpl.w	r2, r2, #15
 8020120:	1112      	asrmi	r2, r2, #4
 8020122:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020126:	b2d2      	uxtb	r2, r2
 8020128:	b1ea      	cbz	r2, 8020166 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802012a:	9d04      	ldr	r5, [sp, #16]
 802012c:	436a      	muls	r2, r5
 802012e:	1c55      	adds	r5, r2, #1
 8020130:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8020134:	4d6e      	ldr	r5, [pc, #440]	; (80202f0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8020136:	1212      	asrs	r2, r2, #8
 8020138:	682d      	ldr	r5, [r5, #0]
 802013a:	2aff      	cmp	r2, #255	; 0xff
 802013c:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8020140:	9605      	str	r6, [sp, #20]
 8020142:	d116      	bne.n	8020172 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8020144:	f06f 0201 	mvn.w	r2, #1
 8020148:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 802014c:	fb02 fc07 	mul.w	ip, r2, r7
 8020150:	096a      	lsrs	r2, r5, #5
 8020152:	f026 0607 	bic.w	r6, r6, #7
 8020156:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802015a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802015e:	4316      	orrs	r6, r2
 8020160:	432e      	orrs	r6, r5
 8020162:	f824 600c 	strh.w	r6, [r4, ip]
 8020166:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020168:	3f01      	subs	r7, #1
 802016a:	4410      	add	r0, r2
 802016c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802016e:	4411      	add	r1, r2
 8020170:	e77e      	b.n	8020070 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8020172:	f06f 0601 	mvn.w	r6, #1
 8020176:	fa1f fa82 	uxth.w	sl, r2
 802017a:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 802017e:	43d2      	mvns	r2, r2
 8020180:	437e      	muls	r6, r7
 8020182:	b2ed      	uxtb	r5, r5
 8020184:	fb1c fc0a 	smulbb	ip, ip, sl
 8020188:	b2d2      	uxtb	r2, r2
 802018a:	f834 8006 	ldrh.w	r8, [r4, r6]
 802018e:	fb15 f50a 	smulbb	r5, r5, sl
 8020192:	9602      	str	r6, [sp, #8]
 8020194:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8020198:	f89d 6014 	ldrb.w	r6, [sp, #20]
 802019c:	fb16 f60a 	smulbb	r6, r6, sl
 80201a0:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80201a4:	fb0e ce02 	mla	lr, lr, r2, ip
 80201a8:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 80201ac:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80201b0:	fa1f fe8e 	uxth.w	lr, lr
 80201b4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80201b8:	fa5f f888 	uxtb.w	r8, r8
 80201bc:	fb0c 6c02 	mla	ip, ip, r2, r6
 80201c0:	fb08 5502 	mla	r5, r8, r2, r5
 80201c4:	f10e 0201 	add.w	r2, lr, #1
 80201c8:	fa1f fc8c 	uxth.w	ip, ip
 80201cc:	b2ad      	uxth	r5, r5
 80201ce:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 80201d2:	9a02      	ldr	r2, [sp, #8]
 80201d4:	1c6e      	adds	r6, r5, #1
 80201d6:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80201da:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 80201de:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80201e2:	ea46 0e0e 	orr.w	lr, r6, lr
 80201e6:	f10c 0601 	add.w	r6, ip, #1
 80201ea:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 80201ee:	0976      	lsrs	r6, r6, #5
 80201f0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80201f4:	ea4e 0e06 	orr.w	lr, lr, r6
 80201f8:	f824 e002 	strh.w	lr, [r4, r2]
 80201fc:	e7b3      	b.n	8020166 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80201fe:	f04f 0800 	mov.w	r8, #0
 8020202:	eba3 0208 	sub.w	r2, r3, r8
 8020206:	2a00      	cmp	r2, #0
 8020208:	f77f af35 	ble.w	8020076 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802020c:	1402      	asrs	r2, r0, #16
 802020e:	9e00      	ldr	r6, [sp, #0]
 8020210:	140d      	asrs	r5, r1, #16
 8020212:	fb06 2505 	mla	r5, r6, r5, r2
 8020216:	9e01      	ldr	r6, [sp, #4]
 8020218:	086a      	lsrs	r2, r5, #1
 802021a:	07ed      	lsls	r5, r5, #31
 802021c:	5cb2      	ldrb	r2, [r6, r2]
 802021e:	bf54      	ite	pl
 8020220:	f002 020f 	andpl.w	r2, r2, #15
 8020224:	1112      	asrmi	r2, r2, #4
 8020226:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802022a:	b2d2      	uxtb	r2, r2
 802022c:	b1c2      	cbz	r2, 8020260 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 802022e:	9d04      	ldr	r5, [sp, #16]
 8020230:	436a      	muls	r2, r5
 8020232:	1c55      	adds	r5, r2, #1
 8020234:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8020238:	4d2d      	ldr	r5, [pc, #180]	; (80202f0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 802023a:	1212      	asrs	r2, r2, #8
 802023c:	682e      	ldr	r6, [r5, #0]
 802023e:	2aff      	cmp	r2, #255	; 0xff
 8020240:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8020244:	d113      	bne.n	802026e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8020246:	0972      	lsrs	r2, r6, #5
 8020248:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 802024c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8020250:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020254:	f025 0507 	bic.w	r5, r5, #7
 8020258:	4315      	orrs	r5, r2
 802025a:	4335      	orrs	r5, r6
 802025c:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8020260:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020262:	f108 0801 	add.w	r8, r8, #1
 8020266:	4410      	add	r0, r2
 8020268:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802026a:	4411      	add	r1, r2
 802026c:	e7c9      	b.n	8020202 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802026e:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8020272:	fa1f fa82 	uxth.w	sl, r2
 8020276:	f3c6 4707 	ubfx	r7, r6, #16, #8
 802027a:	43d2      	mvns	r2, r2
 802027c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8020280:	fb17 f70a 	smulbb	r7, r7, sl
 8020284:	b2d2      	uxtb	r2, r2
 8020286:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802028a:	b2f6      	uxtb	r6, r6
 802028c:	b2ed      	uxtb	r5, r5
 802028e:	fb0c 7c02 	mla	ip, ip, r2, r7
 8020292:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8020296:	fb16 f60a 	smulbb	r6, r6, sl
 802029a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802029e:	fa1f fc8c 	uxth.w	ip, ip
 80202a2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80202a6:	fb15 f50a 	smulbb	r5, r5, sl
 80202aa:	fa5f fe8e 	uxtb.w	lr, lr
 80202ae:	fb0e 6602 	mla	r6, lr, r2, r6
 80202b2:	fb07 5702 	mla	r7, r7, r2, r5
 80202b6:	f10c 0201 	add.w	r2, ip, #1
 80202ba:	b2b6      	uxth	r6, r6
 80202bc:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80202c0:	1c75      	adds	r5, r6, #1
 80202c2:	b2bf      	uxth	r7, r7
 80202c4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80202c8:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 80202cc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80202d0:	ea45 0c0c 	orr.w	ip, r5, ip
 80202d4:	1c7d      	adds	r5, r7, #1
 80202d6:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 80202da:	096d      	lsrs	r5, r5, #5
 80202dc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80202e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80202e4:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 80202e8:	e7ba      	b.n	8020260 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80202ea:	b007      	add	sp, #28
 80202ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80202f0:	2002b8a8 	.word	0x2002b8a8

080202f4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80202f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202f8:	b087      	sub	sp, #28
 80202fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80202fe:	f8df 8308 	ldr.w	r8, [pc, #776]	; 8020608 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8020302:	9815      	ldr	r0, [sp, #84]	; 0x54
 8020304:	9101      	str	r1, [sp, #4]
 8020306:	9205      	str	r2, [sp, #20]
 8020308:	6841      	ldr	r1, [r0, #4]
 802030a:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 802030e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8020312:	fb01 2404 	mla	r4, r1, r4, r2
 8020316:	6802      	ldr	r2, [r0, #0]
 8020318:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802031c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8020320:	3201      	adds	r2, #1
 8020322:	f022 0201 	bic.w	r2, r2, #1
 8020326:	9202      	str	r2, [sp, #8]
 8020328:	f8db 2000 	ldr.w	r2, [fp]
 802032c:	9203      	str	r2, [sp, #12]
 802032e:	9a01      	ldr	r2, [sp, #4]
 8020330:	2a00      	cmp	r2, #0
 8020332:	dc03      	bgt.n	802033c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020334:	9a05      	ldr	r2, [sp, #20]
 8020336:	2a00      	cmp	r2, #0
 8020338:	f340 8162 	ble.w	8020600 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802033c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802033e:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8020342:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020346:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020348:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 802034c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020350:	2b00      	cmp	r3, #0
 8020352:	dd0e      	ble.n	8020372 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020354:	1402      	asrs	r2, r0, #16
 8020356:	d405      	bmi.n	8020364 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020358:	42ba      	cmp	r2, r7
 802035a:	da03      	bge.n	8020364 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802035c:	140a      	asrs	r2, r1, #16
 802035e:	d401      	bmi.n	8020364 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020360:	42b2      	cmp	r2, r6
 8020362:	db07      	blt.n	8020374 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8020364:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020366:	3b01      	subs	r3, #1
 8020368:	3402      	adds	r4, #2
 802036a:	4410      	add	r0, r2
 802036c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802036e:	4411      	add	r1, r2
 8020370:	e7ee      	b.n	8020350 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020372:	d017      	beq.n	80203a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020374:	1e5a      	subs	r2, r3, #1
 8020376:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020378:	fb05 0502 	mla	r5, r5, r2, r0
 802037c:	142d      	asrs	r5, r5, #16
 802037e:	d409      	bmi.n	8020394 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020380:	42bd      	cmp	r5, r7
 8020382:	da07      	bge.n	8020394 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020384:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020386:	fb05 1202 	mla	r2, r5, r2, r1
 802038a:	1412      	asrs	r2, r2, #16
 802038c:	d402      	bmi.n	8020394 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802038e:	42b2      	cmp	r2, r6
 8020390:	f2c0 80c3 	blt.w	802051a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8020394:	2500      	movs	r5, #0
 8020396:	195a      	adds	r2, r3, r5
 8020398:	2a00      	cmp	r2, #0
 802039a:	dc3f      	bgt.n	802041c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 802039c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80203a0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80203a4:	9b01      	ldr	r3, [sp, #4]
 80203a6:	2b00      	cmp	r3, #0
 80203a8:	f340 812a 	ble.w	8020600 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80203ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 80203b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80203b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80203b6:	eeb0 6a62 	vmov.f32	s12, s5
 80203ba:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80203be:	ee31 1a05 	vadd.f32	s2, s2, s10
 80203c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80203c6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80203ca:	eeb0 6a43 	vmov.f32	s12, s6
 80203ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80203d2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80203d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80203da:	ee61 7a27 	vmul.f32	s15, s2, s15
 80203de:	ee77 2a62 	vsub.f32	s5, s14, s5
 80203e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80203e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80203ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80203ee:	ee12 2a90 	vmov	r2, s5
 80203f2:	eef0 2a47 	vmov.f32	s5, s14
 80203f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80203fa:	ee13 2a10 	vmov	r2, s6
 80203fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8020400:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020402:	eeb0 3a67 	vmov.f32	s6, s15
 8020406:	fb92 f3f3 	sdiv	r3, r2, r3
 802040a:	9314      	str	r3, [sp, #80]	; 0x50
 802040c:	9b01      	ldr	r3, [sp, #4]
 802040e:	9a05      	ldr	r2, [sp, #20]
 8020410:	3b01      	subs	r3, #1
 8020412:	9301      	str	r3, [sp, #4]
 8020414:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020416:	bf08      	it	eq
 8020418:	4613      	moveq	r3, r2
 802041a:	e788      	b.n	802032e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802041c:	1406      	asrs	r6, r0, #16
 802041e:	d42c      	bmi.n	802047a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020420:	f8db 2008 	ldr.w	r2, [fp, #8]
 8020424:	42b2      	cmp	r2, r6
 8020426:	dd28      	ble.n	802047a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020428:	140f      	asrs	r7, r1, #16
 802042a:	d426      	bmi.n	802047a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802042c:	f8db 200c 	ldr.w	r2, [fp, #12]
 8020430:	42ba      	cmp	r2, r7
 8020432:	dd22      	ble.n	802047a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020434:	9a02      	ldr	r2, [sp, #8]
 8020436:	fb07 6602 	mla	r6, r7, r2, r6
 802043a:	9f03      	ldr	r7, [sp, #12]
 802043c:	0872      	lsrs	r2, r6, #1
 802043e:	07f6      	lsls	r6, r6, #31
 8020440:	5cba      	ldrb	r2, [r7, r2]
 8020442:	bf54      	ite	pl
 8020444:	f002 020f 	andpl.w	r2, r2, #15
 8020448:	1112      	asrmi	r2, r2, #4
 802044a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802044e:	b2d2      	uxtb	r2, r2
 8020450:	2aff      	cmp	r2, #255	; 0xff
 8020452:	d118      	bne.n	8020486 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8020454:	f06f 0601 	mvn.w	r6, #1
 8020458:	f8d8 2000 	ldr.w	r2, [r8]
 802045c:	fb06 f705 	mul.w	r7, r6, r5
 8020460:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 8020464:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8020468:	0956      	lsrs	r6, r2, #5
 802046a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802046e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020472:	ea4c 0606 	orr.w	r6, ip, r6
 8020476:	4316      	orrs	r6, r2
 8020478:	53e6      	strh	r6, [r4, r7]
 802047a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802047c:	3d01      	subs	r5, #1
 802047e:	4410      	add	r0, r2
 8020480:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020482:	4411      	add	r1, r2
 8020484:	e787      	b.n	8020396 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8020486:	2a00      	cmp	r2, #0
 8020488:	d0f7      	beq.n	802047a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802048a:	f06f 0601 	mvn.w	r6, #1
 802048e:	f8d8 c000 	ldr.w	ip, [r8]
 8020492:	fa1f f982 	uxth.w	r9, r2
 8020496:	43d2      	mvns	r2, r2
 8020498:	436e      	muls	r6, r5
 802049a:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 802049e:	b2d2      	uxtb	r2, r2
 80204a0:	f834 e006 	ldrh.w	lr, [r4, r6]
 80204a4:	fb1a fa09 	smulbb	sl, sl, r9
 80204a8:	9604      	str	r6, [sp, #16]
 80204aa:	f3cc 4607 	ubfx	r6, ip, #16, #8
 80204ae:	ea4f 272e 	mov.w	r7, lr, asr #8
 80204b2:	fb16 f609 	smulbb	r6, r6, r9
 80204b6:	fa5f fc8c 	uxtb.w	ip, ip
 80204ba:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80204be:	fb1c fc09 	smulbb	ip, ip, r9
 80204c2:	fb07 6702 	mla	r7, r7, r2, r6
 80204c6:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80204ca:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80204ce:	b2bf      	uxth	r7, r7
 80204d0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80204d4:	fa5f fe8e 	uxtb.w	lr, lr
 80204d8:	fb06 a602 	mla	r6, r6, r2, sl
 80204dc:	fb0e cc02 	mla	ip, lr, r2, ip
 80204e0:	1c7a      	adds	r2, r7, #1
 80204e2:	b2b6      	uxth	r6, r6
 80204e4:	fa1f fc8c 	uxth.w	ip, ip
 80204e8:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80204ec:	9a04      	ldr	r2, [sp, #16]
 80204ee:	f10c 0a01 	add.w	sl, ip, #1
 80204f2:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80204f6:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80204fa:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80204fe:	ea4a 0707 	orr.w	r7, sl, r7
 8020502:	f106 0a01 	add.w	sl, r6, #1
 8020506:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 802050a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802050e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8020512:	ea47 070a 	orr.w	r7, r7, sl
 8020516:	52a7      	strh	r7, [r4, r2]
 8020518:	e7af      	b.n	802047a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802051a:	f04f 0e00 	mov.w	lr, #0
 802051e:	eba3 020e 	sub.w	r2, r3, lr
 8020522:	2a00      	cmp	r2, #0
 8020524:	f77f af3a 	ble.w	802039c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8020528:	1402      	asrs	r2, r0, #16
 802052a:	9e02      	ldr	r6, [sp, #8]
 802052c:	140d      	asrs	r5, r1, #16
 802052e:	fb06 2505 	mla	r5, r6, r5, r2
 8020532:	9e03      	ldr	r6, [sp, #12]
 8020534:	086a      	lsrs	r2, r5, #1
 8020536:	07ed      	lsls	r5, r5, #31
 8020538:	5cb2      	ldrb	r2, [r6, r2]
 802053a:	bf54      	ite	pl
 802053c:	f002 020f 	andpl.w	r2, r2, #15
 8020540:	1112      	asrmi	r2, r2, #4
 8020542:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020546:	b2d2      	uxtb	r2, r2
 8020548:	2aff      	cmp	r2, #255	; 0xff
 802054a:	d115      	bne.n	8020578 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 802054c:	f8d8 5000 	ldr.w	r5, [r8]
 8020550:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 8020554:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8020558:	096a      	lsrs	r2, r5, #5
 802055a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 802055e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020562:	4332      	orrs	r2, r6
 8020564:	432a      	orrs	r2, r5
 8020566:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 802056a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802056c:	f10e 0e01 	add.w	lr, lr, #1
 8020570:	4410      	add	r0, r2
 8020572:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020574:	4411      	add	r1, r2
 8020576:	e7d2      	b.n	802051e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8020578:	2a00      	cmp	r2, #0
 802057a:	d0f6      	beq.n	802056a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 802057c:	f8d8 7000 	ldr.w	r7, [r8]
 8020580:	fa1f f982 	uxth.w	r9, r2
 8020584:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8020588:	43d2      	mvns	r2, r2
 802058a:	f3c7 4507 	ubfx	r5, r7, #16, #8
 802058e:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8020592:	ea4f 262c 	mov.w	r6, ip, asr #8
 8020596:	fb15 f509 	smulbb	r5, r5, r9
 802059a:	b2d2      	uxtb	r2, r2
 802059c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80205a0:	b2ff      	uxtb	r7, r7
 80205a2:	fb1a fa09 	smulbb	sl, sl, r9
 80205a6:	fb06 5602 	mla	r6, r6, r2, r5
 80205aa:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80205ae:	fb17 f709 	smulbb	r7, r7, r9
 80205b2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80205b6:	b2b6      	uxth	r6, r6
 80205b8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80205bc:	fa5f fc8c 	uxtb.w	ip, ip
 80205c0:	fb05 a502 	mla	r5, r5, r2, sl
 80205c4:	fb0c 7702 	mla	r7, ip, r2, r7
 80205c8:	1c72      	adds	r2, r6, #1
 80205ca:	b2ad      	uxth	r5, r5
 80205cc:	b2bf      	uxth	r7, r7
 80205ce:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80205d2:	f107 0a01 	add.w	sl, r7, #1
 80205d6:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80205da:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80205de:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80205e2:	ea4a 0606 	orr.w	r6, sl, r6
 80205e6:	f105 0a01 	add.w	sl, r5, #1
 80205ea:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80205ee:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80205f2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80205f6:	ea46 060a 	orr.w	r6, r6, sl
 80205fa:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 80205fe:	e7b4      	b.n	802056a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8020600:	b007      	add	sp, #28
 8020602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020606:	bf00      	nop
 8020608:	2002b8a8 	.word	0x2002b8a8

0802060c <_ZN8touchgfx8LCD16bppD1Ev>:
 802060c:	4770      	bx	lr

0802060e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 802060e:	4770      	bx	lr

08020610 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8020610:	4770      	bx	lr

08020612 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8020612:	4770      	bx	lr

08020614 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8020614:	4770      	bx	lr

08020616 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020616:	4770      	bx	lr

08020618 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020618:	4770      	bx	lr

0802061a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802061a:	4770      	bx	lr

0802061c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 802061c:	4770      	bx	lr

0802061e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 802061e:	4770      	bx	lr

08020620 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8020620:	4770      	bx	lr

08020622 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020622:	4770      	bx	lr

08020624 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020624:	4770      	bx	lr

08020626 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020626:	4770      	bx	lr

08020628 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8020628:	4770      	bx	lr

0802062a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 802062a:	4770      	bx	lr

0802062c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 802062c:	4770      	bx	lr

0802062e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 802062e:	4770      	bx	lr

08020630 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020630:	4770      	bx	lr

08020632 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020632:	4770      	bx	lr

08020634 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020634:	4770      	bx	lr

08020636 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020636:	4770      	bx	lr

08020638 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8020638:	4770      	bx	lr

0802063a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802063a:	4770      	bx	lr

0802063c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802063c:	4770      	bx	lr

0802063e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 802063e:	4770      	bx	lr

08020640 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8020640:	4770      	bx	lr

08020642 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020642:	4770      	bx	lr

08020644 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8020644:	4770      	bx	lr
	...

08020648 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8020648:	b508      	push	{r3, lr}
 802064a:	4b06      	ldr	r3, [pc, #24]	; (8020664 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 802064c:	8818      	ldrh	r0, [r3, #0]
 802064e:	b928      	cbnz	r0, 802065c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 8020650:	4b05      	ldr	r3, [pc, #20]	; (8020668 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 8020652:	2150      	movs	r1, #80	; 0x50
 8020654:	4a05      	ldr	r2, [pc, #20]	; (802066c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 8020656:	4806      	ldr	r0, [pc, #24]	; (8020670 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 8020658:	f009 fbfa 	bl	8029e50 <__assert_func>
 802065c:	0040      	lsls	r0, r0, #1
 802065e:	b280      	uxth	r0, r0
 8020660:	bd08      	pop	{r3, pc}
 8020662:	bf00      	nop
 8020664:	2002b89a 	.word	0x2002b89a
 8020668:	080318d4 	.word	0x080318d4
 802066c:	08031ed0 	.word	0x08031ed0
 8020670:	08031916 	.word	0x08031916

08020674 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8020674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020678:	b08b      	sub	sp, #44	; 0x2c
 802067a:	460f      	mov	r7, r1
 802067c:	4616      	mov	r6, r2
 802067e:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8020682:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8020686:	f1bb 0f00 	cmp.w	fp, #0
 802068a:	d049      	beq.n	8020720 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 802068c:	6810      	ldr	r0, [r2, #0]
 802068e:	ad06      	add	r5, sp, #24
 8020690:	6851      	ldr	r1, [r2, #4]
 8020692:	c503      	stmia	r5!, {r0, r1}
 8020694:	6818      	ldr	r0, [r3, #0]
 8020696:	ad08      	add	r5, sp, #32
 8020698:	6859      	ldr	r1, [r3, #4]
 802069a:	c503      	stmia	r5!, {r0, r1}
 802069c:	a806      	add	r0, sp, #24
 802069e:	f7fa f99f 	bl	801a9e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80206a2:	4631      	mov	r1, r6
 80206a4:	a808      	add	r0, sp, #32
 80206a6:	f7fa f9c3 	bl	801aa30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80206aa:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80206ae:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80206b2:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80206b6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80206ba:	fb16 2103 	smlabb	r1, r6, r3, r2
 80206be:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80206c2:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 80206c6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80206ca:	4f5f      	ldr	r7, [pc, #380]	; (8020848 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80206cc:	440a      	add	r2, r1
 80206ce:	6838      	ldr	r0, [r7, #0]
 80206d0:	46b9      	mov	r9, r7
 80206d2:	f8ad 2020 	strh.w	r2, [sp, #32]
 80206d6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80206da:	4413      	add	r3, r2
 80206dc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80206e0:	6803      	ldr	r3, [r0, #0]
 80206e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80206e4:	4798      	blx	r3
 80206e6:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80206ea:	d01c      	beq.n	8020726 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 80206ec:	f010 0f04 	tst.w	r0, #4
 80206f0:	d01d      	beq.n	802072e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80206f2:	f8d9 0000 	ldr.w	r0, [r9]
 80206f6:	2700      	movs	r7, #0
 80206f8:	b2ad      	uxth	r5, r5
 80206fa:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80206fe:	6801      	ldr	r1, [r0, #0]
 8020700:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020704:	f8cd b00c 	str.w	fp, [sp, #12]
 8020708:	9501      	str	r5, [sp, #4]
 802070a:	e9cd 4704 	strd	r4, r7, [sp, #16]
 802070e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8020712:	9402      	str	r4, [sp, #8]
 8020714:	fa1f f488 	uxth.w	r4, r8
 8020718:	9400      	str	r4, [sp, #0]
 802071a:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 802071c:	4631      	mov	r1, r6
 802071e:	47a0      	blx	r4
 8020720:	b00b      	add	sp, #44	; 0x2c
 8020722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020726:	b914      	cbnz	r4, 802072e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8020728:	f010 0f01 	tst.w	r0, #1
 802072c:	e7e0      	b.n	80206f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 802072e:	f8d9 0000 	ldr.w	r0, [r9]
 8020732:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8020736:	6803      	ldr	r3, [r0, #0]
 8020738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802073a:	4798      	blx	r3
 802073c:	4b43      	ldr	r3, [pc, #268]	; (802084c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 802073e:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8020742:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020746:	881a      	ldrh	r2, [r3, #0]
 8020748:	469a      	mov	sl, r3
 802074a:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 802074e:	fb05 f502 	mul.w	r5, r5, r2
 8020752:	fb02 1404 	mla	r4, r2, r4, r1
 8020756:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802075a:	d059      	beq.n	8020810 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 802075c:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8020760:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020764:	fa1f f28b 	uxth.w	r2, fp
 8020768:	469e      	mov	lr, r3
 802076a:	fa1f f989 	uxth.w	r9, r9
 802076e:	42ac      	cmp	r4, r5
 8020770:	d264      	bcs.n	802083c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8020772:	eb04 0a07 	add.w	sl, r4, r7
 8020776:	4554      	cmp	r4, sl
 8020778:	d23d      	bcs.n	80207f6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 802077a:	8821      	ldrh	r1, [r4, #0]
 802077c:	f836 3b02 	ldrh.w	r3, [r6], #2
 8020780:	1208      	asrs	r0, r1, #8
 8020782:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8020786:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802078a:	ea4f 0be1 	mov.w	fp, r1, asr #3
 802078e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020792:	00c9      	lsls	r1, r1, #3
 8020794:	fb10 f009 	smulbb	r0, r0, r9
 8020798:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 802079c:	b2c9      	uxtb	r1, r1
 802079e:	fb0c 0c02 	mla	ip, ip, r2, r0
 80207a2:	10d8      	asrs	r0, r3, #3
 80207a4:	fb1b fb09 	smulbb	fp, fp, r9
 80207a8:	00db      	lsls	r3, r3, #3
 80207aa:	fa1f fc8c 	uxth.w	ip, ip
 80207ae:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80207b2:	fb11 f109 	smulbb	r1, r1, r9
 80207b6:	b2db      	uxtb	r3, r3
 80207b8:	fb00 b002 	mla	r0, r0, r2, fp
 80207bc:	f10c 0b01 	add.w	fp, ip, #1
 80207c0:	fb03 1302 	mla	r3, r3, r2, r1
 80207c4:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80207c8:	b29b      	uxth	r3, r3
 80207ca:	b280      	uxth	r0, r0
 80207cc:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 80207d0:	f103 0c01 	add.w	ip, r3, #1
 80207d4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80207d8:	1c43      	adds	r3, r0, #1
 80207da:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80207de:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80207e2:	0940      	lsrs	r0, r0, #5
 80207e4:	ea4c 0c0b 	orr.w	ip, ip, fp
 80207e8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80207ec:	ea4c 0c00 	orr.w	ip, ip, r0
 80207f0:	f824 cb02 	strh.w	ip, [r4], #2
 80207f4:	e7bf      	b.n	8020776 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 80207f6:	f8be 3000 	ldrh.w	r3, [lr]
 80207fa:	eba3 0308 	sub.w	r3, r3, r8
 80207fe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020802:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020806:	eba3 0308 	sub.w	r3, r3, r8
 802080a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802080e:	e7ae      	b.n	802076e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8020810:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020814:	f8d9 0000 	ldr.w	r0, [r9]
 8020818:	42ac      	cmp	r4, r5
 802081a:	6803      	ldr	r3, [r0, #0]
 802081c:	d20e      	bcs.n	802083c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 802081e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8020822:	4632      	mov	r2, r6
 8020824:	463b      	mov	r3, r7
 8020826:	4621      	mov	r1, r4
 8020828:	47c0      	blx	r8
 802082a:	f8ba 3000 	ldrh.w	r3, [sl]
 802082e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020832:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020836:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802083a:	e7eb      	b.n	8020814 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 802083c:	4b02      	ldr	r3, [pc, #8]	; (8020848 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 802083e:	6818      	ldr	r0, [r3, #0]
 8020840:	6803      	ldr	r3, [r0, #0]
 8020842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020844:	4798      	blx	r3
 8020846:	e76b      	b.n	8020720 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8020848:	2002b8a0 	.word	0x2002b8a0
 802084c:	2002b89a 	.word	0x2002b89a

08020850 <_ZN8touchgfx8LCD16bppD0Ev>:
 8020850:	b510      	push	{r4, lr}
 8020852:	4604      	mov	r4, r0
 8020854:	2178      	movs	r1, #120	; 0x78
 8020856:	f009 facd 	bl	8029df4 <_ZdlPvj>
 802085a:	4620      	mov	r0, r4
 802085c:	bd10      	pop	{r4, pc}

0802085e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802085e:	b510      	push	{r4, lr}
 8020860:	4604      	mov	r4, r0
 8020862:	2104      	movs	r1, #4
 8020864:	f009 fac6 	bl	8029df4 <_ZdlPvj>
 8020868:	4620      	mov	r0, r4
 802086a:	bd10      	pop	{r4, pc}

0802086c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 802086c:	b510      	push	{r4, lr}
 802086e:	4604      	mov	r4, r0
 8020870:	2104      	movs	r1, #4
 8020872:	f009 fabf 	bl	8029df4 <_ZdlPvj>
 8020876:	4620      	mov	r0, r4
 8020878:	bd10      	pop	{r4, pc}

0802087a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 802087a:	b510      	push	{r4, lr}
 802087c:	4604      	mov	r4, r0
 802087e:	2104      	movs	r1, #4
 8020880:	f009 fab8 	bl	8029df4 <_ZdlPvj>
 8020884:	4620      	mov	r0, r4
 8020886:	bd10      	pop	{r4, pc}

08020888 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020888:	b510      	push	{r4, lr}
 802088a:	4604      	mov	r4, r0
 802088c:	2104      	movs	r1, #4
 802088e:	f009 fab1 	bl	8029df4 <_ZdlPvj>
 8020892:	4620      	mov	r0, r4
 8020894:	bd10      	pop	{r4, pc}

08020896 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020896:	b510      	push	{r4, lr}
 8020898:	4604      	mov	r4, r0
 802089a:	2104      	movs	r1, #4
 802089c:	f009 faaa 	bl	8029df4 <_ZdlPvj>
 80208a0:	4620      	mov	r0, r4
 80208a2:	bd10      	pop	{r4, pc}

080208a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80208a4:	b510      	push	{r4, lr}
 80208a6:	4604      	mov	r4, r0
 80208a8:	2104      	movs	r1, #4
 80208aa:	f009 faa3 	bl	8029df4 <_ZdlPvj>
 80208ae:	4620      	mov	r0, r4
 80208b0:	bd10      	pop	{r4, pc}

080208b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80208b2:	b510      	push	{r4, lr}
 80208b4:	4604      	mov	r4, r0
 80208b6:	2104      	movs	r1, #4
 80208b8:	f009 fa9c 	bl	8029df4 <_ZdlPvj>
 80208bc:	4620      	mov	r0, r4
 80208be:	bd10      	pop	{r4, pc}

080208c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80208c0:	b510      	push	{r4, lr}
 80208c2:	4604      	mov	r4, r0
 80208c4:	2104      	movs	r1, #4
 80208c6:	f009 fa95 	bl	8029df4 <_ZdlPvj>
 80208ca:	4620      	mov	r0, r4
 80208cc:	bd10      	pop	{r4, pc}

080208ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80208ce:	b510      	push	{r4, lr}
 80208d0:	4604      	mov	r4, r0
 80208d2:	2104      	movs	r1, #4
 80208d4:	f009 fa8e 	bl	8029df4 <_ZdlPvj>
 80208d8:	4620      	mov	r0, r4
 80208da:	bd10      	pop	{r4, pc}

080208dc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80208dc:	b510      	push	{r4, lr}
 80208de:	4604      	mov	r4, r0
 80208e0:	2104      	movs	r1, #4
 80208e2:	f009 fa87 	bl	8029df4 <_ZdlPvj>
 80208e6:	4620      	mov	r0, r4
 80208e8:	bd10      	pop	{r4, pc}

080208ea <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80208ea:	b510      	push	{r4, lr}
 80208ec:	4604      	mov	r4, r0
 80208ee:	2104      	movs	r1, #4
 80208f0:	f009 fa80 	bl	8029df4 <_ZdlPvj>
 80208f4:	4620      	mov	r0, r4
 80208f6:	bd10      	pop	{r4, pc}

080208f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80208f8:	b510      	push	{r4, lr}
 80208fa:	4604      	mov	r4, r0
 80208fc:	2104      	movs	r1, #4
 80208fe:	f009 fa79 	bl	8029df4 <_ZdlPvj>
 8020902:	4620      	mov	r0, r4
 8020904:	bd10      	pop	{r4, pc}

08020906 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020906:	b510      	push	{r4, lr}
 8020908:	4604      	mov	r4, r0
 802090a:	2104      	movs	r1, #4
 802090c:	f009 fa72 	bl	8029df4 <_ZdlPvj>
 8020910:	4620      	mov	r0, r4
 8020912:	bd10      	pop	{r4, pc}

08020914 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8020914:	b510      	push	{r4, lr}
 8020916:	4604      	mov	r4, r0
 8020918:	2104      	movs	r1, #4
 802091a:	f009 fa6b 	bl	8029df4 <_ZdlPvj>
 802091e:	4620      	mov	r0, r4
 8020920:	bd10      	pop	{r4, pc}

08020922 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020922:	b510      	push	{r4, lr}
 8020924:	4604      	mov	r4, r0
 8020926:	2104      	movs	r1, #4
 8020928:	f009 fa64 	bl	8029df4 <_ZdlPvj>
 802092c:	4620      	mov	r0, r4
 802092e:	bd10      	pop	{r4, pc}

08020930 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020930:	b510      	push	{r4, lr}
 8020932:	4604      	mov	r4, r0
 8020934:	2104      	movs	r1, #4
 8020936:	f009 fa5d 	bl	8029df4 <_ZdlPvj>
 802093a:	4620      	mov	r0, r4
 802093c:	bd10      	pop	{r4, pc}

0802093e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 802093e:	b510      	push	{r4, lr}
 8020940:	4604      	mov	r4, r0
 8020942:	2104      	movs	r1, #4
 8020944:	f009 fa56 	bl	8029df4 <_ZdlPvj>
 8020948:	4620      	mov	r0, r4
 802094a:	bd10      	pop	{r4, pc}

0802094c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 802094c:	b510      	push	{r4, lr}
 802094e:	4604      	mov	r4, r0
 8020950:	2104      	movs	r1, #4
 8020952:	f009 fa4f 	bl	8029df4 <_ZdlPvj>
 8020956:	4620      	mov	r0, r4
 8020958:	bd10      	pop	{r4, pc}

0802095a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802095a:	b510      	push	{r4, lr}
 802095c:	4604      	mov	r4, r0
 802095e:	2104      	movs	r1, #4
 8020960:	f009 fa48 	bl	8029df4 <_ZdlPvj>
 8020964:	4620      	mov	r0, r4
 8020966:	bd10      	pop	{r4, pc}

08020968 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020968:	b510      	push	{r4, lr}
 802096a:	4604      	mov	r4, r0
 802096c:	2104      	movs	r1, #4
 802096e:	f009 fa41 	bl	8029df4 <_ZdlPvj>
 8020972:	4620      	mov	r0, r4
 8020974:	bd10      	pop	{r4, pc}

08020976 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020976:	b510      	push	{r4, lr}
 8020978:	4604      	mov	r4, r0
 802097a:	2104      	movs	r1, #4
 802097c:	f009 fa3a 	bl	8029df4 <_ZdlPvj>
 8020980:	4620      	mov	r0, r4
 8020982:	bd10      	pop	{r4, pc}

08020984 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020984:	b510      	push	{r4, lr}
 8020986:	4604      	mov	r4, r0
 8020988:	2104      	movs	r1, #4
 802098a:	f009 fa33 	bl	8029df4 <_ZdlPvj>
 802098e:	4620      	mov	r0, r4
 8020990:	bd10      	pop	{r4, pc}

08020992 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020992:	b510      	push	{r4, lr}
 8020994:	4604      	mov	r4, r0
 8020996:	2104      	movs	r1, #4
 8020998:	f009 fa2c 	bl	8029df4 <_ZdlPvj>
 802099c:	4620      	mov	r0, r4
 802099e:	bd10      	pop	{r4, pc}

080209a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80209a0:	b510      	push	{r4, lr}
 80209a2:	4604      	mov	r4, r0
 80209a4:	2104      	movs	r1, #4
 80209a6:	f009 fa25 	bl	8029df4 <_ZdlPvj>
 80209aa:	4620      	mov	r0, r4
 80209ac:	bd10      	pop	{r4, pc}

080209ae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80209ae:	b510      	push	{r4, lr}
 80209b0:	4604      	mov	r4, r0
 80209b2:	2104      	movs	r1, #4
 80209b4:	f009 fa1e 	bl	8029df4 <_ZdlPvj>
 80209b8:	4620      	mov	r0, r4
 80209ba:	bd10      	pop	{r4, pc}

080209bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80209bc:	b510      	push	{r4, lr}
 80209be:	4604      	mov	r4, r0
 80209c0:	2104      	movs	r1, #4
 80209c2:	f009 fa17 	bl	8029df4 <_ZdlPvj>
 80209c6:	4620      	mov	r0, r4
 80209c8:	bd10      	pop	{r4, pc}

080209ca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80209ca:	b510      	push	{r4, lr}
 80209cc:	4604      	mov	r4, r0
 80209ce:	2104      	movs	r1, #4
 80209d0:	f009 fa10 	bl	8029df4 <_ZdlPvj>
 80209d4:	4620      	mov	r0, r4
 80209d6:	bd10      	pop	{r4, pc}

080209d8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80209d8:	b510      	push	{r4, lr}
 80209da:	4604      	mov	r4, r0
 80209dc:	2104      	movs	r1, #4
 80209de:	f009 fa09 	bl	8029df4 <_ZdlPvj>
 80209e2:	4620      	mov	r0, r4
 80209e4:	bd10      	pop	{r4, pc}
	...

080209e8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80209e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80209ea:	4606      	mov	r6, r0
 80209ec:	b087      	sub	sp, #28
 80209ee:	460c      	mov	r4, r1
 80209f0:	4617      	mov	r7, r2
 80209f2:	461d      	mov	r5, r3
 80209f4:	b333      	cbz	r3, 8020a44 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80209f6:	4608      	mov	r0, r1
 80209f8:	f7f6 fdb9 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 80209fc:	bb10      	cbnz	r0, 8020a44 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80209fe:	6820      	ldr	r0, [r4, #0]
 8020a00:	ab04      	add	r3, sp, #16
 8020a02:	6861      	ldr	r1, [r4, #4]
 8020a04:	4c1b      	ldr	r4, [pc, #108]	; (8020a74 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8020a06:	c303      	stmia	r3!, {r0, r1}
 8020a08:	a804      	add	r0, sp, #16
 8020a0a:	f7f9 ffe9 	bl	801a9e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020a0e:	6820      	ldr	r0, [r4, #0]
 8020a10:	6803      	ldr	r3, [r0, #0]
 8020a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020a14:	4798      	blx	r3
 8020a16:	2dff      	cmp	r5, #255	; 0xff
 8020a18:	d016      	beq.n	8020a48 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8020a1a:	f010 0f08 	tst.w	r0, #8
 8020a1e:	6820      	ldr	r0, [r4, #0]
 8020a20:	d015      	beq.n	8020a4e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8020a22:	2400      	movs	r4, #0
 8020a24:	6801      	ldr	r1, [r0, #0]
 8020a26:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8020a2a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020a2e:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8020a32:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8020a36:	9401      	str	r4, [sp, #4]
 8020a38:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8020a3c:	9400      	str	r4, [sp, #0]
 8020a3e:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
 8020a40:	4639      	mov	r1, r7
 8020a42:	47a0      	blx	r4
 8020a44:	b007      	add	sp, #28
 8020a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020a48:	f010 0f02 	tst.w	r0, #2
 8020a4c:	e7e7      	b.n	8020a1e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8020a4e:	6803      	ldr	r3, [r0, #0]
 8020a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020a52:	4798      	blx	r3
 8020a54:	4b08      	ldr	r3, [pc, #32]	; (8020a78 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8020a56:	4601      	mov	r1, r0
 8020a58:	4630      	mov	r0, r6
 8020a5a:	881a      	ldrh	r2, [r3, #0]
 8020a5c:	6833      	ldr	r3, [r6, #0]
 8020a5e:	e9cd 7500 	strd	r7, r5, [sp]
 8020a62:	69dd      	ldr	r5, [r3, #28]
 8020a64:	ab04      	add	r3, sp, #16
 8020a66:	47a8      	blx	r5
 8020a68:	6820      	ldr	r0, [r4, #0]
 8020a6a:	6803      	ldr	r3, [r0, #0]
 8020a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020a6e:	4798      	blx	r3
 8020a70:	e7e8      	b.n	8020a44 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020a72:	bf00      	nop
 8020a74:	2002b8a0 	.word	0x2002b8a0
 8020a78:	2002b89a 	.word	0x2002b89a

08020a7c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8020a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a80:	4f97      	ldr	r7, [pc, #604]	; (8020ce0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x264>)
 8020a82:	4616      	mov	r6, r2
 8020a84:	b08f      	sub	sp, #60	; 0x3c
 8020a86:	4604      	mov	r4, r0
 8020a88:	683a      	ldr	r2, [r7, #0]
 8020a8a:	4689      	mov	r9, r1
 8020a8c:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8020a90:	2a02      	cmp	r2, #2
 8020a92:	d106      	bne.n	8020aa2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 8020a94:	4b93      	ldr	r3, [pc, #588]	; (8020ce4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x268>)
 8020a96:	f44f 7159 	mov.w	r1, #868	; 0x364
 8020a9a:	4a93      	ldr	r2, [pc, #588]	; (8020ce8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8020a9c:	4893      	ldr	r0, [pc, #588]	; (8020cec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x270>)
 8020a9e:	f009 f9d7 	bl	8029e50 <__assert_func>
 8020aa2:	ad0e      	add	r5, sp, #56	; 0x38
 8020aa4:	f825 3d24 	strh.w	r3, [r5, #-36]!
 8020aa8:	4628      	mov	r0, r5
 8020aaa:	f7fd fac9 	bl	801e040 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020aae:	6823      	ldr	r3, [r4, #0]
 8020ab0:	4680      	mov	r8, r0
 8020ab2:	4620      	mov	r0, r4
 8020ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020ab6:	4798      	blx	r3
 8020ab8:	4580      	cmp	r8, r0
 8020aba:	d004      	beq.n	8020ac6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 8020abc:	4b8c      	ldr	r3, [pc, #560]	; (8020cf0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x274>)
 8020abe:	f240 3166 	movw	r1, #870	; 0x366
 8020ac2:	4a89      	ldr	r2, [pc, #548]	; (8020ce8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8020ac4:	e7ea      	b.n	8020a9c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020ac6:	4628      	mov	r0, r5
 8020ac8:	f7fd fa30 	bl	801df2c <_ZNK8touchgfx6Bitmap7getDataEv>
 8020acc:	4680      	mov	r8, r0
 8020ace:	b920      	cbnz	r0, 8020ada <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 8020ad0:	4b88      	ldr	r3, [pc, #544]	; (8020cf4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x278>)
 8020ad2:	f44f 715a 	mov.w	r1, #872	; 0x368
 8020ad6:	4a84      	ldr	r2, [pc, #528]	; (8020ce8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8020ad8:	e7e0      	b.n	8020a9c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020ada:	6830      	ldr	r0, [r6, #0]
 8020adc:	ab06      	add	r3, sp, #24
 8020ade:	6871      	ldr	r1, [r6, #4]
 8020ae0:	f10d 0b20 	add.w	fp, sp, #32
 8020ae4:	f9b6 a000 	ldrsh.w	sl, [r6]
 8020ae8:	c303      	stmia	r3!, {r0, r1}
 8020aea:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8020aee:	ab08      	add	r3, sp, #32
 8020af0:	f8d9 0000 	ldr.w	r0, [r9]
 8020af4:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8020af8:	c303      	stmia	r3!, {r0, r1}
 8020afa:	4628      	mov	r0, r5
 8020afc:	f7fd f90e 	bl	801dd1c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020b00:	4606      	mov	r6, r0
 8020b02:	4628      	mov	r0, r5
 8020b04:	4d7c      	ldr	r5, [pc, #496]	; (8020cf8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x27c>)
 8020b06:	f7fd f943 	bl	801dd90 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020b0a:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 8020b0e:	a806      	add	r0, sp, #24
 8020b10:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8020b14:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 8020b18:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 8020b1c:	f7f9 ff60 	bl	801a9e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b20:	4658      	mov	r0, fp
 8020b22:	f7f9 ff5d 	bl	801a9e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b26:	a80a      	add	r0, sp, #40	; 0x28
 8020b28:	f7f9 ff5a 	bl	801a9e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b2c:	4b73      	ldr	r3, [pc, #460]	; (8020cfc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8020b2e:	2100      	movs	r1, #0
 8020b30:	f9b5 2000 	ldrsh.w	r2, [r5]
 8020b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020b38:	4658      	mov	r0, fp
 8020b3a:	910c      	str	r1, [sp, #48]	; 0x30
 8020b3c:	a90c      	add	r1, sp, #48	; 0x30
 8020b3e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8020b42:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8020b46:	f7f6 fccf 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 8020b4a:	4658      	mov	r0, fp
 8020b4c:	f7f6 fd0f 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 8020b50:	2800      	cmp	r0, #0
 8020b52:	f040 809a 	bne.w	8020c8a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8020b56:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 8020b5a:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8020b5e:	4288      	cmp	r0, r1
 8020b60:	db38      	blt.n	8020bd4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8020b62:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 8020b66:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8020b6a:	429a      	cmp	r2, r3
 8020b6c:	db32      	blt.n	8020bd4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8020b6e:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 8020b72:	4430      	add	r0, r6
 8020b74:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8020b78:	4431      	add	r1, r6
 8020b7a:	b200      	sxth	r0, r0
 8020b7c:	b209      	sxth	r1, r1
 8020b7e:	4288      	cmp	r0, r1
 8020b80:	dc28      	bgt.n	8020bd4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8020b82:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
 8020b86:	440a      	add	r2, r1
 8020b88:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8020b8c:	440b      	add	r3, r1
 8020b8e:	b212      	sxth	r2, r2
 8020b90:	b21b      	sxth	r3, r3
 8020b92:	429a      	cmp	r2, r3
 8020b94:	dc1e      	bgt.n	8020bd4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x158>
 8020b96:	6823      	ldr	r3, [r4, #0]
 8020b98:	4620      	mov	r0, r4
 8020b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020b9c:	4798      	blx	r3
 8020b9e:	4682      	mov	sl, r0
 8020ba0:	6838      	ldr	r0, [r7, #0]
 8020ba2:	6803      	ldr	r3, [r0, #0]
 8020ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020ba6:	4798      	blx	r3
 8020ba8:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8020bac:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8020bb0:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8020bb4:	1a5b      	subs	r3, r3, r1
 8020bb6:	b29b      	uxth	r3, r3
 8020bb8:	b21c      	sxth	r4, r3
 8020bba:	2c00      	cmp	r4, #0
 8020bbc:	dc0f      	bgt.n	8020bde <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x162>
 8020bbe:	bf18      	it	ne
 8020bc0:	f8ad 1020 	strhne.w	r1, [sp, #32]
 8020bc4:	4644      	mov	r4, r8
 8020bc6:	bf1e      	ittt	ne
 8020bc8:	f8bd 1024 	ldrhne.w	r1, [sp, #36]	; 0x24
 8020bcc:	185b      	addne	r3, r3, r1
 8020bce:	f8ad 3024 	strhne.w	r3, [sp, #36]	; 0x24
 8020bd2:	e009      	b.n	8020be8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x16c>
 8020bd4:	4b4a      	ldr	r3, [pc, #296]	; (8020d00 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x284>)
 8020bd6:	f240 3176 	movw	r1, #886	; 0x376
 8020bda:	4a43      	ldr	r2, [pc, #268]	; (8020ce8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26c>)
 8020bdc:	e75e      	b.n	8020a9c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 8020bde:	1ad3      	subs	r3, r2, r3
 8020be0:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8020be4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8020be8:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
 8020bec:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020bf0:	1b9b      	subs	r3, r3, r6
 8020bf2:	b29b      	uxth	r3, r3
 8020bf4:	b219      	sxth	r1, r3
 8020bf6:	2900      	cmp	r1, #0
 8020bf8:	dd4b      	ble.n	8020c92 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x216>
 8020bfa:	4351      	muls	r1, r2
 8020bfc:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8020c00:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8020c04:	1acb      	subs	r3, r1, r3
 8020c06:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8020c0a:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8020c0e:	2e00      	cmp	r6, #0
 8020c10:	dd3b      	ble.n	8020c8a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8020c12:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8020c16:	2b00      	cmp	r3, #0
 8020c18:	dd37      	ble.n	8020c8a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8020c1a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8020c1e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8020c22:	fb0a f90c 	mul.w	r9, sl, ip
 8020c26:	eb09 0941 	add.w	r9, r9, r1, lsl #1
 8020c2a:	4481      	add	r9, r0
 8020c2c:	8828      	ldrh	r0, [r5, #0]
 8020c2e:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 8020c32:	1a41      	subs	r1, r0, r1
 8020c34:	42ae      	cmp	r6, r5
 8020c36:	bfa8      	it	ge
 8020c38:	462e      	movge	r6, r5
 8020c3a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8020c3e:	428e      	cmp	r6, r1
 8020c40:	bfa8      	it	ge
 8020c42:	460e      	movge	r6, r1
 8020c44:	429d      	cmp	r5, r3
 8020c46:	bfa8      	it	ge
 8020c48:	461d      	movge	r5, r3
 8020c4a:	4b2c      	ldr	r3, [pc, #176]	; (8020cfc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>)
 8020c4c:	881b      	ldrh	r3, [r3, #0]
 8020c4e:	eba3 030c 	sub.w	r3, r3, ip
 8020c52:	429d      	cmp	r5, r3
 8020c54:	bfa8      	it	ge
 8020c56:	461d      	movge	r5, r3
 8020c58:	42b0      	cmp	r0, r6
 8020c5a:	d12c      	bne.n	8020cb6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8020c5c:	4290      	cmp	r0, r2
 8020c5e:	d12a      	bne.n	8020cb6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x23a>
 8020c60:	6838      	ldr	r0, [r7, #0]
 8020c62:	9203      	str	r2, [sp, #12]
 8020c64:	6803      	ldr	r3, [r0, #0]
 8020c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020c68:	4798      	blx	r3
 8020c6a:	07c3      	lsls	r3, r0, #31
 8020c6c:	d51a      	bpl.n	8020ca4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x228>
 8020c6e:	9a03      	ldr	r2, [sp, #12]
 8020c70:	6838      	ldr	r0, [r7, #0]
 8020c72:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
 8020c76:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8020c7a:	6803      	ldr	r3, [r0, #0]
 8020c7c:	9200      	str	r2, [sp, #0]
 8020c7e:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8020c80:	4623      	mov	r3, r4
 8020c82:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8020c86:	47a8      	blx	r5
 8020c88:	4680      	mov	r8, r0
 8020c8a:	4640      	mov	r0, r8
 8020c8c:	b00f      	add	sp, #60	; 0x3c
 8020c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c92:	bf1f      	itttt	ne
 8020c94:	f8bd 1026 	ldrhne.w	r1, [sp, #38]	; 0x26
 8020c98:	f8ad 6022 	strhne.w	r6, [sp, #34]	; 0x22
 8020c9c:	185b      	addne	r3, r3, r1
 8020c9e:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 8020ca2:	e7b2      	b.n	8020c0a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x18e>
 8020ca4:	6838      	ldr	r0, [r7, #0]
 8020ca6:	464a      	mov	r2, r9
 8020ca8:	4621      	mov	r1, r4
 8020caa:	6803      	ldr	r3, [r0, #0]
 8020cac:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8020cae:	fb05 f30a 	mul.w	r3, r5, sl
 8020cb2:	47b0      	blx	r6
 8020cb4:	e7e9      	b.n	8020c8a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8020cb6:	4355      	muls	r5, r2
 8020cb8:	0076      	lsls	r6, r6, #1
 8020cba:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 8020cbe:	eb04 0345 	add.w	r3, r4, r5, lsl #1
 8020cc2:	9303      	str	r3, [sp, #12]
 8020cc4:	9b03      	ldr	r3, [sp, #12]
 8020cc6:	429c      	cmp	r4, r3
 8020cc8:	d2df      	bcs.n	8020c8a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20e>
 8020cca:	6838      	ldr	r0, [r7, #0]
 8020ccc:	464a      	mov	r2, r9
 8020cce:	4621      	mov	r1, r4
 8020cd0:	44d1      	add	r9, sl
 8020cd2:	6803      	ldr	r3, [r0, #0]
 8020cd4:	445c      	add	r4, fp
 8020cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020cd8:	461d      	mov	r5, r3
 8020cda:	4633      	mov	r3, r6
 8020cdc:	47a8      	blx	r5
 8020cde:	e7f1      	b.n	8020cc4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x248>
 8020ce0:	2002b8a0 	.word	0x2002b8a0
 8020ce4:	080316cc 	.word	0x080316cc
 8020ce8:	08031f80 	.word	0x08031f80
 8020cec:	0803177e 	.word	0x0803177e
 8020cf0:	080317b0 	.word	0x080317b0
 8020cf4:	08031805 	.word	0x08031805
 8020cf8:	2002b89a 	.word	0x2002b89a
 8020cfc:	2002b89c 	.word	0x2002b89c
 8020d00:	08031843 	.word	0x08031843

08020d04 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8020d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020d08:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8020d0c:	4688      	mov	r8, r1
 8020d0e:	4614      	mov	r4, r2
 8020d10:	461d      	mov	r5, r3
 8020d12:	9e08      	ldr	r6, [sp, #32]
 8020d14:	2f00      	cmp	r7, #0
 8020d16:	f000 80b4 	beq.w	8020e82 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8020d1a:	4618      	mov	r0, r3
 8020d1c:	f7f6 fc27 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 8020d20:	2800      	cmp	r0, #0
 8020d22:	f040 80ae 	bne.w	8020e82 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8020d26:	f9b5 1000 	ldrsh.w	r1, [r5]
 8020d2a:	2fff      	cmp	r7, #255	; 0xff
 8020d2c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8020d30:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8020d34:	fb04 1303 	mla	r3, r4, r3, r1
 8020d38:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8020d3c:	eba4 0200 	sub.w	r2, r4, r0
 8020d40:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8020d44:	fb04 f505 	mul.w	r5, r4, r5
 8020d48:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8020d4c:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8020d50:	d04b      	beq.n	8020dea <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe6>
 8020d52:	b2bc      	uxth	r4, r7
 8020d54:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8020d58:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8020d5c:	fa5f f788 	uxtb.w	r7, r8
 8020d60:	b2f3      	uxtb	r3, r6
 8020d62:	0040      	lsls	r0, r0, #1
 8020d64:	fb0e fe04 	mul.w	lr, lr, r4
 8020d68:	4367      	muls	r7, r4
 8020d6a:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8020d6e:	4363      	muls	r3, r4
 8020d70:	fa1f fc8c 	uxth.w	ip, ip
 8020d74:	42a9      	cmp	r1, r5
 8020d76:	f080 8084 	bcs.w	8020e82 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8020d7a:	eb01 0900 	add.w	r9, r1, r0
 8020d7e:	4549      	cmp	r1, r9
 8020d80:	d231      	bcs.n	8020de6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8020d82:	880a      	ldrh	r2, [r1, #0]
 8020d84:	1214      	asrs	r4, r2, #8
 8020d86:	10d6      	asrs	r6, r2, #3
 8020d88:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8020d8c:	00d2      	lsls	r2, r2, #3
 8020d8e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020d92:	b2d2      	uxtb	r2, r2
 8020d94:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8020d98:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020d9c:	fb14 f40c 	smulbb	r4, r4, ip
 8020da0:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8020da4:	fb12 f20c 	smulbb	r2, r2, ip
 8020da8:	fb16 f60c 	smulbb	r6, r6, ip
 8020dac:	4474      	add	r4, lr
 8020dae:	441a      	add	r2, r3
 8020db0:	b2a4      	uxth	r4, r4
 8020db2:	443e      	add	r6, r7
 8020db4:	b292      	uxth	r2, r2
 8020db6:	f104 0a01 	add.w	sl, r4, #1
 8020dba:	b2b6      	uxth	r6, r6
 8020dbc:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8020dc0:	f102 0a01 	add.w	sl, r2, #1
 8020dc4:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8020dc8:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8020dcc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020dd0:	4322      	orrs	r2, r4
 8020dd2:	1c74      	adds	r4, r6, #1
 8020dd4:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8020dd8:	0976      	lsrs	r6, r6, #5
 8020dda:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020dde:	4332      	orrs	r2, r6
 8020de0:	f821 2b02 	strh.w	r2, [r1], #2
 8020de4:	e7cb      	b.n	8020d7e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x7a>
 8020de6:	4441      	add	r1, r8
 8020de8:	e7c4      	b.n	8020d74 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 8020dea:	0973      	lsrs	r3, r6, #5
 8020dec:	4f26      	ldr	r7, [pc, #152]	; (8020e88 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x184>)
 8020dee:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8020df2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020df6:	ea08 0707 	and.w	r7, r8, r7
 8020dfa:	433b      	orrs	r3, r7
 8020dfc:	4333      	orrs	r3, r6
 8020dfe:	07e6      	lsls	r6, r4, #31
 8020e00:	b29b      	uxth	r3, r3
 8020e02:	d50b      	bpl.n	8020e1c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 8020e04:	0040      	lsls	r0, r0, #1
 8020e06:	0052      	lsls	r2, r2, #1
 8020e08:	42a9      	cmp	r1, r5
 8020e0a:	d23a      	bcs.n	8020e82 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8020e0c:	180c      	adds	r4, r1, r0
 8020e0e:	42a1      	cmp	r1, r4
 8020e10:	d202      	bcs.n	8020e18 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8020e12:	f821 3b02 	strh.w	r3, [r1], #2
 8020e16:	e7fa      	b.n	8020e0e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 8020e18:	4411      	add	r1, r2
 8020e1a:	e7f5      	b.n	8020e08 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 8020e1c:	078f      	lsls	r7, r1, #30
 8020e1e:	d008      	beq.n	8020e32 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 8020e20:	0066      	lsls	r6, r4, #1
 8020e22:	460a      	mov	r2, r1
 8020e24:	42aa      	cmp	r2, r5
 8020e26:	d202      	bcs.n	8020e2e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8020e28:	8013      	strh	r3, [r2, #0]
 8020e2a:	4432      	add	r2, r6
 8020e2c:	e7fa      	b.n	8020e24 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 8020e2e:	3102      	adds	r1, #2
 8020e30:	3801      	subs	r0, #1
 8020e32:	07c6      	lsls	r6, r0, #31
 8020e34:	d50b      	bpl.n	8020e4e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 8020e36:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8020e3a:	0066      	lsls	r6, r4, #1
 8020e3c:	3a01      	subs	r2, #1
 8020e3e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8020e42:	42aa      	cmp	r2, r5
 8020e44:	d202      	bcs.n	8020e4c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 8020e46:	8013      	strh	r3, [r2, #0]
 8020e48:	4432      	add	r2, r6
 8020e4a:	e7fa      	b.n	8020e42 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 8020e4c:	3801      	subs	r0, #1
 8020e4e:	b1c0      	cbz	r0, 8020e82 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8020e50:	1040      	asrs	r0, r0, #1
 8020e52:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8020e56:	0080      	lsls	r0, r0, #2
 8020e58:	0064      	lsls	r4, r4, #1
 8020e5a:	42a9      	cmp	r1, r5
 8020e5c:	d211      	bcs.n	8020e82 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17e>
 8020e5e:	078a      	lsls	r2, r1, #30
 8020e60:	d006      	beq.n	8020e70 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 8020e62:	4b0a      	ldr	r3, [pc, #40]	; (8020e8c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x188>)
 8020e64:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8020e68:	4a09      	ldr	r2, [pc, #36]	; (8020e90 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x18c>)
 8020e6a:	480a      	ldr	r0, [pc, #40]	; (8020e94 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x190>)
 8020e6c:	f008 fff0 	bl	8029e50 <__assert_func>
 8020e70:	180e      	adds	r6, r1, r0
 8020e72:	460a      	mov	r2, r1
 8020e74:	42b2      	cmp	r2, r6
 8020e76:	d202      	bcs.n	8020e7e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x17a>
 8020e78:	f842 3b04 	str.w	r3, [r2], #4
 8020e7c:	e7fa      	b.n	8020e74 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>
 8020e7e:	4421      	add	r1, r4
 8020e80:	e7eb      	b.n	8020e5a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 8020e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e86:	bf00      	nop
 8020e88:	00fff800 	.word	0x00fff800
 8020e8c:	0803157d 	.word	0x0803157d
 8020e90:	08031bcc 	.word	0x08031bcc
 8020e94:	0803177e 	.word	0x0803177e

08020e98 <_ZN8touchgfx8LCD16bppC1Ev>:
 8020e98:	2200      	movs	r2, #0
 8020e9a:	4910      	ldr	r1, [pc, #64]	; (8020edc <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8020e9c:	6042      	str	r2, [r0, #4]
 8020e9e:	6001      	str	r1, [r0, #0]
 8020ea0:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8020ea4:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8020ea8:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8020eac:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8020eb0:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8020eb4:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8020eb8:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8020ebc:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8020ec0:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8020ec4:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8020ec8:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8020ecc:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8020ed0:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8020ed4:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8020ed8:	4770      	bx	lr
 8020eda:	bf00      	nop
 8020edc:	08031b84 	.word	0x08031b84

08020ee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8020ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ee4:	b08d      	sub	sp, #52	; 0x34
 8020ee6:	460d      	mov	r5, r1
 8020ee8:	4604      	mov	r4, r0
 8020eea:	4699      	mov	r9, r3
 8020eec:	6808      	ldr	r0, [r1, #0]
 8020eee:	ab08      	add	r3, sp, #32
 8020ef0:	6849      	ldr	r1, [r1, #4]
 8020ef2:	c303      	stmia	r3!, {r0, r1}
 8020ef4:	6810      	ldr	r0, [r2, #0]
 8020ef6:	ab0a      	add	r3, sp, #40	; 0x28
 8020ef8:	6851      	ldr	r1, [r2, #4]
 8020efa:	c303      	stmia	r3!, {r0, r1}
 8020efc:	a808      	add	r0, sp, #32
 8020efe:	f7f9 fd6f 	bl	801a9e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020f02:	4629      	mov	r1, r5
 8020f04:	a80a      	add	r0, sp, #40	; 0x28
 8020f06:	4d67      	ldr	r5, [pc, #412]	; (80210a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8020f08:	f7f9 fd92 	bl	801aa30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020f0c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020f10:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8020f14:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8020f18:	6828      	ldr	r0, [r5, #0]
 8020f1a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020f1e:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8020f22:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8020f26:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8020f2a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8020f2e:	440a      	add	r2, r1
 8020f30:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8020f34:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8020f38:	4413      	add	r3, r2
 8020f3a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8020f3e:	6803      	ldr	r3, [r0, #0]
 8020f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020f42:	4798      	blx	r3
 8020f44:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020f48:	d119      	bne.n	8020f7e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8020f4a:	f010 0f20 	tst.w	r0, #32
 8020f4e:	6828      	ldr	r0, [r5, #0]
 8020f50:	d018      	beq.n	8020f84 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8020f52:	2500      	movs	r5, #0
 8020f54:	6801      	ldr	r1, [r0, #0]
 8020f56:	b2b6      	uxth	r6, r6
 8020f58:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8020f5c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8020f60:	9601      	str	r6, [sp, #4]
 8020f62:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8020f66:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8020f6a:	9502      	str	r5, [sp, #8]
 8020f6c:	fa1f f588 	uxth.w	r5, r8
 8020f70:	9500      	str	r5, [sp, #0]
 8020f72:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8020f74:	4621      	mov	r1, r4
 8020f76:	47a8      	blx	r5
 8020f78:	b00d      	add	sp, #52	; 0x34
 8020f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020f82:	e7e4      	b.n	8020f4e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8020f84:	6803      	ldr	r3, [r0, #0]
 8020f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020f88:	4798      	blx	r3
 8020f8a:	4947      	ldr	r1, [pc, #284]	; (80210a8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8020f8c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8020f90:	880b      	ldrh	r3, [r1, #0]
 8020f92:	468a      	mov	sl, r1
 8020f94:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8020f98:	fb03 5202 	mla	r2, r3, r2, r5
 8020f9c:	4373      	muls	r3, r6
 8020f9e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020fa2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020fa6:	9307      	str	r3, [sp, #28]
 8020fa8:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8020fac:	9306      	str	r3, [sp, #24]
 8020fae:	9b07      	ldr	r3, [sp, #28]
 8020fb0:	4298      	cmp	r0, r3
 8020fb2:	d270      	bcs.n	8021096 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8020fb4:	9b06      	ldr	r3, [sp, #24]
 8020fb6:	4621      	mov	r1, r4
 8020fb8:	eb00 0b03 	add.w	fp, r0, r3
 8020fbc:	4558      	cmp	r0, fp
 8020fbe:	d25d      	bcs.n	802107c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8020fc0:	f851 4b04 	ldr.w	r4, [r1], #4
 8020fc4:	0e23      	lsrs	r3, r4, #24
 8020fc6:	d014      	beq.n	8020ff2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8020fc8:	2bff      	cmp	r3, #255	; 0xff
 8020fca:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8020fce:	d112      	bne.n	8020ff6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8020fd0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020fd4:	d10f      	bne.n	8020ff6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8020fd6:	0963      	lsrs	r3, r4, #5
 8020fd8:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8020fdc:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8020fe0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020fe4:	f02c 0c07 	bic.w	ip, ip, #7
 8020fe8:	ea43 0c0c 	orr.w	ip, r3, ip
 8020fec:	ea4c 0404 	orr.w	r4, ip, r4
 8020ff0:	8004      	strh	r4, [r0, #0]
 8020ff2:	3002      	adds	r0, #2
 8020ff4:	e7e2      	b.n	8020fbc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8020ff6:	fb09 f303 	mul.w	r3, r9, r3
 8020ffa:	8807      	ldrh	r7, [r0, #0]
 8020ffc:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8021000:	fa5f fc8c 	uxtb.w	ip, ip
 8021004:	1c5a      	adds	r2, r3, #1
 8021006:	123e      	asrs	r6, r7, #8
 8021008:	10fd      	asrs	r5, r7, #3
 802100a:	eb02 2223 	add.w	r2, r2, r3, asr #8
 802100e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021012:	00ff      	lsls	r7, r7, #3
 8021014:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021018:	1212      	asrs	r2, r2, #8
 802101a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802101e:	b293      	uxth	r3, r2
 8021020:	43d2      	mvns	r2, r2
 8021022:	b2ff      	uxtb	r7, r7
 8021024:	fb1e fe03 	smulbb	lr, lr, r3
 8021028:	b2d2      	uxtb	r2, r2
 802102a:	fb1c fc03 	smulbb	ip, ip, r3
 802102e:	b2e4      	uxtb	r4, r4
 8021030:	fb06 e602 	mla	r6, r6, r2, lr
 8021034:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8021038:	fb14 f403 	smulbb	r4, r4, r3
 802103c:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8021040:	b2b6      	uxth	r6, r6
 8021042:	fb05 c502 	mla	r5, r5, r2, ip
 8021046:	fb07 4702 	mla	r7, r7, r2, r4
 802104a:	f106 0e01 	add.w	lr, r6, #1
 802104e:	b2ad      	uxth	r5, r5
 8021050:	b2bf      	uxth	r7, r7
 8021052:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8021056:	f105 0c01 	add.w	ip, r5, #1
 802105a:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 802105e:	1c7e      	adds	r6, r7, #1
 8021060:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8021064:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8021068:	096d      	lsrs	r5, r5, #5
 802106a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802106e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021072:	ea46 060e 	orr.w	r6, r6, lr
 8021076:	432e      	orrs	r6, r5
 8021078:	8006      	strh	r6, [r0, #0]
 802107a:	e7ba      	b.n	8020ff2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 802107c:	f8ba 3000 	ldrh.w	r3, [sl]
 8021080:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8021084:	eba3 0308 	sub.w	r3, r3, r8
 8021088:	eba4 0408 	sub.w	r4, r4, r8
 802108c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021090:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8021094:	e78b      	b.n	8020fae <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8021096:	4b03      	ldr	r3, [pc, #12]	; (80210a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8021098:	6818      	ldr	r0, [r3, #0]
 802109a:	6803      	ldr	r3, [r0, #0]
 802109c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802109e:	4798      	blx	r3
 80210a0:	e76a      	b.n	8020f78 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 80210a2:	bf00      	nop
 80210a4:	2002b8a0 	.word	0x2002b8a0
 80210a8:	2002b89a 	.word	0x2002b89a

080210ac <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 80210ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80210b0:	b085      	sub	sp, #20
 80210b2:	6810      	ldr	r0, [r2, #0]
 80210b4:	460c      	mov	r4, r1
 80210b6:	6851      	ldr	r1, [r2, #4]
 80210b8:	466d      	mov	r5, sp
 80210ba:	4616      	mov	r6, r2
 80210bc:	c503      	stmia	r5!, {r0, r1}
 80210be:	6818      	ldr	r0, [r3, #0]
 80210c0:	6859      	ldr	r1, [r3, #4]
 80210c2:	c503      	stmia	r5!, {r0, r1}
 80210c4:	4668      	mov	r0, sp
 80210c6:	4d2e      	ldr	r5, [pc, #184]	; (8021180 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 80210c8:	f7f9 fc8a 	bl	801a9e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80210cc:	4631      	mov	r1, r6
 80210ce:	a802      	add	r0, sp, #8
 80210d0:	4e2c      	ldr	r6, [pc, #176]	; (8021184 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 80210d2:	f7f9 fcad 	bl	801aa30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80210d6:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80210da:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80210de:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80210e2:	6828      	ldr	r0, [r5, #0]
 80210e4:	fb11 2103 	smlabb	r1, r1, r3, r2
 80210e8:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80210ec:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 80210f0:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80210f4:	f8bd 1000 	ldrh.w	r1, [sp]
 80210f8:	440a      	add	r2, r1
 80210fa:	f8ad 2008 	strh.w	r2, [sp, #8]
 80210fe:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8021102:	4413      	add	r3, r2
 8021104:	f8ad 300a 	strh.w	r3, [sp, #10]
 8021108:	6803      	ldr	r3, [r0, #0]
 802110a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802110c:	4798      	blx	r3
 802110e:	8833      	ldrh	r3, [r6, #0]
 8021110:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8021114:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8021118:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 802111c:	f8df e068 	ldr.w	lr, [pc, #104]	; 8021188 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8021120:	fb03 1202 	mla	r2, r3, r2, r1
 8021124:	fb08 f303 	mul.w	r3, r8, r3
 8021128:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802112c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021130:	4298      	cmp	r0, r3
 8021132:	d21d      	bcs.n	8021170 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8021134:	eb00 080c 	add.w	r8, r0, ip
 8021138:	4540      	cmp	r0, r8
 802113a:	d20f      	bcs.n	802115c <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 802113c:	f854 1b04 	ldr.w	r1, [r4], #4
 8021140:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8021144:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8021148:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802114c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021150:	ea42 0209 	orr.w	r2, r2, r9
 8021154:	430a      	orrs	r2, r1
 8021156:	f820 2b02 	strh.w	r2, [r0], #2
 802115a:	e7ed      	b.n	8021138 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 802115c:	8832      	ldrh	r2, [r6, #0]
 802115e:	1bd2      	subs	r2, r2, r7
 8021160:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021164:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8021168:	1bd2      	subs	r2, r2, r7
 802116a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 802116e:	e7df      	b.n	8021130 <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8021170:	6828      	ldr	r0, [r5, #0]
 8021172:	6803      	ldr	r3, [r0, #0]
 8021174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021176:	4798      	blx	r3
 8021178:	b005      	add	sp, #20
 802117a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802117e:	bf00      	nop
 8021180:	2002b8a0 	.word	0x2002b8a0
 8021184:	2002b89a 	.word	0x2002b89a
 8021188:	fffff800 	.word	0xfffff800

0802118c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 802118c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021190:	b08e      	sub	sp, #56	; 0x38
 8021192:	460e      	mov	r6, r1
 8021194:	4604      	mov	r4, r0
 8021196:	461d      	mov	r5, r3
 8021198:	6808      	ldr	r0, [r1, #0]
 802119a:	ab0a      	add	r3, sp, #40	; 0x28
 802119c:	6849      	ldr	r1, [r1, #4]
 802119e:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8021374 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 80211a2:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8021378 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 80211a6:	c303      	stmia	r3!, {r0, r1}
 80211a8:	6810      	ldr	r0, [r2, #0]
 80211aa:	ab0c      	add	r3, sp, #48	; 0x30
 80211ac:	6851      	ldr	r1, [r2, #4]
 80211ae:	c303      	stmia	r3!, {r0, r1}
 80211b0:	a80a      	add	r0, sp, #40	; 0x28
 80211b2:	f7f9 fc15 	bl	801a9e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80211b6:	4631      	mov	r1, r6
 80211b8:	a80c      	add	r0, sp, #48	; 0x30
 80211ba:	f7f9 fc39 	bl	801aa30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80211be:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80211c2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80211c6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80211ca:	f8d8 0000 	ldr.w	r0, [r8]
 80211ce:	fb11 2103 	smlabb	r1, r1, r3, r2
 80211d2:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 80211d6:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 80211da:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80211de:	440c      	add	r4, r1
 80211e0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80211e4:	440a      	add	r2, r1
 80211e6:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80211ea:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80211ee:	4413      	add	r3, r2
 80211f0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80211f4:	6803      	ldr	r3, [r0, #0]
 80211f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80211f8:	4798      	blx	r3
 80211fa:	2dff      	cmp	r5, #255	; 0xff
 80211fc:	d124      	bne.n	8021248 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 80211fe:	f010 0f01 	tst.w	r0, #1
 8021202:	f8d8 0000 	ldr.w	r0, [r8]
 8021206:	d022      	beq.n	802124e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8021208:	2100      	movs	r1, #0
 802120a:	f04f 0e01 	mov.w	lr, #1
 802120e:	f8d0 c000 	ldr.w	ip, [r0]
 8021212:	b2b6      	uxth	r6, r6
 8021214:	f8cd e018 	str.w	lr, [sp, #24]
 8021218:	b2bf      	uxth	r7, r7
 802121a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 802121e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8021222:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8021226:	f8b9 e000 	ldrh.w	lr, [r9]
 802122a:	9503      	str	r5, [sp, #12]
 802122c:	9601      	str	r6, [sp, #4]
 802122e:	9700      	str	r7, [sp, #0]
 8021230:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8021234:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8021238:	9102      	str	r1, [sp, #8]
 802123a:	4621      	mov	r1, r4
 802123c:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 8021240:	47a8      	blx	r5
 8021242:	b00e      	add	sp, #56	; 0x38
 8021244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021248:	f010 0f04 	tst.w	r0, #4
 802124c:	e7d9      	b.n	8021202 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 802124e:	6803      	ldr	r3, [r0, #0]
 8021250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021252:	4798      	blx	r3
 8021254:	f8b9 3000 	ldrh.w	r3, [r9]
 8021258:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 802125c:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8021260:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8021264:	435e      	muls	r6, r3
 8021266:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 802126a:	2dff      	cmp	r5, #255	; 0xff
 802126c:	fb03 1202 	mla	r2, r3, r2, r1
 8021270:	ebac 0c07 	sub.w	ip, ip, r7
 8021274:	eba3 0707 	sub.w	r7, r3, r7
 8021278:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802127c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8021280:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8021284:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8021288:	d049      	beq.n	802131e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 802128a:	43eb      	mvns	r3, r5
 802128c:	fa1f f985 	uxth.w	r9, r5
 8021290:	b2db      	uxtb	r3, r3
 8021292:	42b0      	cmp	r0, r6
 8021294:	d266      	bcs.n	8021364 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8021296:	eb00 0a0e 	add.w	sl, r0, lr
 802129a:	4550      	cmp	r0, sl
 802129c:	4621      	mov	r1, r4
 802129e:	f104 0403 	add.w	r4, r4, #3
 80212a2:	d25b      	bcs.n	802135c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 80212a4:	8802      	ldrh	r2, [r0, #0]
 80212a6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80212aa:	ea4f 2822 	mov.w	r8, r2, asr #8
 80212ae:	fb11 f109 	smulbb	r1, r1, r9
 80212b2:	10d5      	asrs	r5, r2, #3
 80212b4:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 80212b8:	00d2      	lsls	r2, r2, #3
 80212ba:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80212be:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 80212c2:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80212c6:	fb08 1803 	mla	r8, r8, r3, r1
 80212ca:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80212ce:	b2d2      	uxtb	r2, r2
 80212d0:	fb11 f109 	smulbb	r1, r1, r9
 80212d4:	fa1f f888 	uxth.w	r8, r8
 80212d8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80212dc:	fb05 1503 	mla	r5, r5, r3, r1
 80212e0:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80212e4:	fb11 f109 	smulbb	r1, r1, r9
 80212e8:	b2ad      	uxth	r5, r5
 80212ea:	fb02 1203 	mla	r2, r2, r3, r1
 80212ee:	f108 0101 	add.w	r1, r8, #1
 80212f2:	b292      	uxth	r2, r2
 80212f4:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 80212f8:	1c51      	adds	r1, r2, #1
 80212fa:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 80212fe:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021302:	1c69      	adds	r1, r5, #1
 8021304:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8021308:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802130c:	096d      	lsrs	r5, r5, #5
 802130e:	ea42 0208 	orr.w	r2, r2, r8
 8021312:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021316:	432a      	orrs	r2, r5
 8021318:	f820 2b02 	strh.w	r2, [r0], #2
 802131c:	e7bd      	b.n	802129a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 802131e:	4a14      	ldr	r2, [pc, #80]	; (8021370 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8021320:	42b0      	cmp	r0, r6
 8021322:	d21f      	bcs.n	8021364 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8021324:	eb00 050e 	add.w	r5, r0, lr
 8021328:	42a8      	cmp	r0, r5
 802132a:	4621      	mov	r1, r4
 802132c:	f104 0403 	add.w	r4, r4, #3
 8021330:	d210      	bcs.n	8021354 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8021332:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8021336:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802133a:	00db      	lsls	r3, r3, #3
 802133c:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8021340:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021344:	430b      	orrs	r3, r1
 8021346:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 802134a:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 802134e:	f820 3b02 	strh.w	r3, [r0], #2
 8021352:	e7e9      	b.n	8021328 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8021354:	4438      	add	r0, r7
 8021356:	eb01 040c 	add.w	r4, r1, ip
 802135a:	e7e1      	b.n	8021320 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 802135c:	4438      	add	r0, r7
 802135e:	eb01 040c 	add.w	r4, r1, ip
 8021362:	e796      	b.n	8021292 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8021364:	4b03      	ldr	r3, [pc, #12]	; (8021374 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8021366:	6818      	ldr	r0, [r3, #0]
 8021368:	6803      	ldr	r3, [r0, #0]
 802136a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802136c:	4798      	blx	r3
 802136e:	e768      	b.n	8021242 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8021370:	fffff800 	.word	0xfffff800
 8021374:	2002b8a0 	.word	0x2002b8a0
 8021378:	2002b89a 	.word	0x2002b89a

0802137c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 802137c:	b570      	push	{r4, r5, r6, lr}
 802137e:	9c04      	ldr	r4, [sp, #16]
 8021380:	4605      	mov	r5, r0
 8021382:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8021386:	4608      	mov	r0, r1
 8021388:	4619      	mov	r1, r3
 802138a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 802138e:	2a0d      	cmp	r2, #13
 8021390:	d825      	bhi.n	80213de <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x62>
 8021392:	e8df f002 	tbb	[pc, r2]
 8021396:	1807      	.short	0x1807
 8021398:	1d1d1d13 	.word	0x1d1d1d13
 802139c:	1d1d1d1d 	.word	0x1d1d1d1d
 80213a0:	1d1d1d1d 	.word	0x1d1d1d1d
 80213a4:	682a      	ldr	r2, [r5, #0]
 80213a6:	e9cd 3604 	strd	r3, r6, [sp, #16]
 80213aa:	68d6      	ldr	r6, [r2, #12]
 80213ac:	4623      	mov	r3, r4
 80213ae:	460a      	mov	r2, r1
 80213b0:	4601      	mov	r1, r0
 80213b2:	46b4      	mov	ip, r6
 80213b4:	4628      	mov	r0, r5
 80213b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80213ba:	4760      	bx	ip
 80213bc:	4622      	mov	r2, r4
 80213be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80213c2:	f7ff bd8d 	b.w	8020ee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80213c6:	4622      	mov	r2, r4
 80213c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80213cc:	f7ff bede 	b.w	802118c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 80213d0:	4b03      	ldr	r3, [pc, #12]	; (80213e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x64>)
 80213d2:	f240 315d 	movw	r1, #861	; 0x35d
 80213d6:	4a03      	ldr	r2, [pc, #12]	; (80213e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x68>)
 80213d8:	4803      	ldr	r0, [pc, #12]	; (80213e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x6c>)
 80213da:	f008 fd39 	bl	8029e50 <__assert_func>
 80213de:	bd70      	pop	{r4, r5, r6, pc}
 80213e0:	080318a3 	.word	0x080318a3
 80213e4:	08032006 	.word	0x08032006
 80213e8:	0803177e 	.word	0x0803177e

080213ec <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80213ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213f0:	b093      	sub	sp, #76	; 0x4c
 80213f2:	880e      	ldrh	r6, [r1, #0]
 80213f4:	4681      	mov	r9, r0
 80213f6:	4688      	mov	r8, r1
 80213f8:	4615      	mov	r5, r2
 80213fa:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 80213fe:	b136      	cbz	r6, 802140e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 8021400:	4b70      	ldr	r3, [pc, #448]	; (80215c4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1d8>)
 8021402:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8021406:	4a70      	ldr	r2, [pc, #448]	; (80215c8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1dc>)
 8021408:	4870      	ldr	r0, [pc, #448]	; (80215cc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>)
 802140a:	f008 fd21 	bl	8029e50 <__assert_func>
 802140e:	6810      	ldr	r0, [r2, #0]
 8021410:	ac0e      	add	r4, sp, #56	; 0x38
 8021412:	6851      	ldr	r1, [r2, #4]
 8021414:	4f6e      	ldr	r7, [pc, #440]	; (80215d0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 8021416:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 80215d4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e8>
 802141a:	c403      	stmia	r4!, {r0, r1}
 802141c:	6818      	ldr	r0, [r3, #0]
 802141e:	ac10      	add	r4, sp, #64	; 0x40
 8021420:	6859      	ldr	r1, [r3, #4]
 8021422:	c403      	stmia	r4!, {r0, r1}
 8021424:	a80e      	add	r0, sp, #56	; 0x38
 8021426:	f7f9 fadb 	bl	801a9e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802142a:	4629      	mov	r1, r5
 802142c:	a810      	add	r0, sp, #64	; 0x40
 802142e:	f7f9 faff 	bl	801aa30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021432:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8021436:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 802143a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802143e:	6838      	ldr	r0, [r7, #0]
 8021440:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021444:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8021448:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 802144c:	4489      	add	r9, r1
 802144e:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8021452:	440a      	add	r2, r1
 8021454:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8021458:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 802145c:	4413      	add	r3, r2
 802145e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8021462:	6803      	ldr	r3, [r0, #0]
 8021464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021466:	4798      	blx	r3
 8021468:	f010 0f80 	tst.w	r0, #128	; 0x80
 802146c:	6838      	ldr	r0, [r7, #0]
 802146e:	d01d      	beq.n	80214ac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc0>
 8021470:	210b      	movs	r1, #11
 8021472:	6802      	ldr	r2, [r0, #0]
 8021474:	b2a4      	uxth	r4, r4
 8021476:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 802147a:	9107      	str	r1, [sp, #28]
 802147c:	b2ad      	uxth	r5, r5
 802147e:	e9cd 6608 	strd	r6, r6, [sp, #32]
 8021482:	f8bb 1000 	ldrh.w	r1, [fp]
 8021486:	9502      	str	r5, [sp, #8]
 8021488:	9106      	str	r1, [sp, #24]
 802148a:	2101      	movs	r1, #1
 802148c:	9401      	str	r4, [sp, #4]
 802148e:	e9cd a104 	strd	sl, r1, [sp, #16]
 8021492:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8021496:	9103      	str	r1, [sp, #12]
 8021498:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 802149c:	9100      	str	r1, [sp, #0]
 802149e:	4649      	mov	r1, r9
 80214a0:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80214a2:	4642      	mov	r2, r8
 80214a4:	47a0      	blx	r4
 80214a6:	b013      	add	sp, #76	; 0x4c
 80214a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214ac:	6803      	ldr	r3, [r0, #0]
 80214ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80214b0:	4798      	blx	r3
 80214b2:	f8bb 3000 	ldrh.w	r3, [fp]
 80214b6:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80214ba:	f04f 0e04 	mov.w	lr, #4
 80214be:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80214c2:	435d      	muls	r5, r3
 80214c4:	fb03 1202 	mla	r2, r3, r2, r1
 80214c8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80214cc:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80214d0:	920c      	str	r2, [sp, #48]	; 0x30
 80214d2:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80214d6:	1b12      	subs	r2, r2, r4
 80214d8:	920d      	str	r2, [sp, #52]	; 0x34
 80214da:	0062      	lsls	r2, r4, #1
 80214dc:	1b1c      	subs	r4, r3, r4
 80214de:	920a      	str	r2, [sp, #40]	; 0x28
 80214e0:	0063      	lsls	r3, r4, #1
 80214e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80214e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80214e6:	4298      	cmp	r0, r3
 80214e8:	d266      	bcs.n	80215b8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1cc>
 80214ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80214ec:	eb00 0b03 	add.w	fp, r0, r3
 80214f0:	4558      	cmp	r0, fp
 80214f2:	d25c      	bcs.n	80215ae <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c2>
 80214f4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80214f8:	fb1e e303 	smlabb	r3, lr, r3, lr
 80214fc:	f858 2003 	ldr.w	r2, [r8, r3]
 8021500:	0e11      	lsrs	r1, r2, #24
 8021502:	d012      	beq.n	802152a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 8021504:	29ff      	cmp	r1, #255	; 0xff
 8021506:	ea4f 2712 	mov.w	r7, r2, lsr #8
 802150a:	d110      	bne.n	802152e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 802150c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021510:	d10d      	bne.n	802152e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x142>
 8021512:	0953      	lsrs	r3, r2, #5
 8021514:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8021518:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802151c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021520:	f027 0707 	bic.w	r7, r7, #7
 8021524:	431f      	orrs	r7, r3
 8021526:	433a      	orrs	r2, r7
 8021528:	8002      	strh	r2, [r0, #0]
 802152a:	3002      	adds	r0, #2
 802152c:	e7e0      	b.n	80214f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x104>
 802152e:	fb0a f101 	mul.w	r1, sl, r1
 8021532:	8806      	ldrh	r6, [r0, #0]
 8021534:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8021538:	b2d2      	uxtb	r2, r2
 802153a:	1c4b      	adds	r3, r1, #1
 802153c:	1235      	asrs	r5, r6, #8
 802153e:	10f4      	asrs	r4, r6, #3
 8021540:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8021544:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021548:	00f6      	lsls	r6, r6, #3
 802154a:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 802154e:	121b      	asrs	r3, r3, #8
 8021550:	b2f6      	uxtb	r6, r6
 8021552:	b299      	uxth	r1, r3
 8021554:	43db      	mvns	r3, r3
 8021556:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 802155a:	fb1c fc01 	smulbb	ip, ip, r1
 802155e:	b2db      	uxtb	r3, r3
 8021560:	fb12 f201 	smulbb	r2, r2, r1
 8021564:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8021568:	fb05 c503 	mla	r5, r5, r3, ip
 802156c:	b2ff      	uxtb	r7, r7
 802156e:	fb06 2203 	mla	r2, r6, r3, r2
 8021572:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8021576:	fb17 f701 	smulbb	r7, r7, r1
 802157a:	b2ad      	uxth	r5, r5
 802157c:	b292      	uxth	r2, r2
 802157e:	fb04 7403 	mla	r4, r4, r3, r7
 8021582:	f105 0c01 	add.w	ip, r5, #1
 8021586:	1c57      	adds	r7, r2, #1
 8021588:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802158c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8021590:	b2a4      	uxth	r4, r4
 8021592:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8021596:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802159a:	433d      	orrs	r5, r7
 802159c:	1c67      	adds	r7, r4, #1
 802159e:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80215a2:	0964      	lsrs	r4, r4, #5
 80215a4:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80215a8:	4325      	orrs	r5, r4
 80215aa:	8005      	strh	r5, [r0, #0]
 80215ac:	e7bd      	b.n	802152a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 80215ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80215b0:	4418      	add	r0, r3
 80215b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80215b4:	4499      	add	r9, r3
 80215b6:	e795      	b.n	80214e4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf8>
 80215b8:	4b05      	ldr	r3, [pc, #20]	; (80215d0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e4>)
 80215ba:	6818      	ldr	r0, [r3, #0]
 80215bc:	6803      	ldr	r3, [r0, #0]
 80215be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80215c0:	4798      	blx	r3
 80215c2:	e770      	b.n	80214a6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xba>
 80215c4:	0803167c 	.word	0x0803167c
 80215c8:	08031dd7 	.word	0x08031dd7
 80215cc:	0803177e 	.word	0x0803177e
 80215d0:	2002b8a0 	.word	0x2002b8a0
 80215d4:	2002b89a 	.word	0x2002b89a

080215d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80215d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215dc:	4614      	mov	r4, r2
 80215de:	880a      	ldrh	r2, [r1, #0]
 80215e0:	b087      	sub	sp, #28
 80215e2:	4680      	mov	r8, r0
 80215e4:	2a02      	cmp	r2, #2
 80215e6:	460d      	mov	r5, r1
 80215e8:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 80215ec:	d006      	beq.n	80215fc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 80215ee:	4b63      	ldr	r3, [pc, #396]	; (802177c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a4>)
 80215f0:	f240 11e1 	movw	r1, #481	; 0x1e1
 80215f4:	4a62      	ldr	r2, [pc, #392]	; (8021780 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a8>)
 80215f6:	4863      	ldr	r0, [pc, #396]	; (8021784 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ac>)
 80215f8:	f008 fc2a 	bl	8029e50 <__assert_func>
 80215fc:	2e00      	cmp	r6, #0
 80215fe:	f000 80b9 	beq.w	8021774 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x19c>
 8021602:	6820      	ldr	r0, [r4, #0]
 8021604:	af02      	add	r7, sp, #8
 8021606:	6861      	ldr	r1, [r4, #4]
 8021608:	c703      	stmia	r7!, {r0, r1}
 802160a:	6818      	ldr	r0, [r3, #0]
 802160c:	af04      	add	r7, sp, #16
 802160e:	6859      	ldr	r1, [r3, #4]
 8021610:	c703      	stmia	r7!, {r0, r1}
 8021612:	a802      	add	r0, sp, #8
 8021614:	f7f9 f9e4 	bl	801a9e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021618:	4621      	mov	r1, r4
 802161a:	a804      	add	r0, sp, #16
 802161c:	f7f9 fa08 	bl	801aa30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021620:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021624:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021628:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 802162c:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8021630:	fb14 2103 	smlabb	r1, r4, r3, r2
 8021634:	eb08 0401 	add.w	r4, r8, r1
 8021638:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 802163c:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8021640:	440a      	add	r2, r1
 8021642:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8021646:	f8ad 2010 	strh.w	r2, [sp, #16]
 802164a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802164e:	4413      	add	r3, r2
 8021650:	f8ad 3012 	strh.w	r3, [sp, #18]
 8021654:	4b4c      	ldr	r3, [pc, #304]	; (8021788 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8021656:	6818      	ldr	r0, [r3, #0]
 8021658:	6803      	ldr	r3, [r0, #0]
 802165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802165c:	4798      	blx	r3
 802165e:	4b4b      	ldr	r3, [pc, #300]	; (802178c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b4>)
 8021660:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8021664:	2eff      	cmp	r6, #255	; 0xff
 8021666:	881a      	ldrh	r2, [r3, #0]
 8021668:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 802166c:	fb02 c101 	mla	r1, r2, r1, ip
 8021670:	fb02 f207 	mul.w	r2, r2, r7
 8021674:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8021678:	f105 0104 	add.w	r1, r5, #4
 802167c:	461d      	mov	r5, r3
 802167e:	d05a      	beq.n	8021736 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x15e>
 8021680:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8021684:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8021688:	b2b6      	uxth	r6, r6
 802168a:	9301      	str	r3, [sp, #4]
 802168c:	fa1f fe8e 	uxth.w	lr, lr
 8021690:	4282      	cmp	r2, r0
 8021692:	d96a      	bls.n	802176a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 8021694:	eb00 0b0a 	add.w	fp, r0, sl
 8021698:	4583      	cmp	fp, r0
 802169a:	d940      	bls.n	802171e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x146>
 802169c:	8805      	ldrh	r5, [r0, #0]
 802169e:	f814 3b01 	ldrb.w	r3, [r4], #1
 80216a2:	122f      	asrs	r7, r5, #8
 80216a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80216a8:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80216ac:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80216b0:	00ed      	lsls	r5, r5, #3
 80216b2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80216b6:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80216ba:	fb17 f70e 	smulbb	r7, r7, lr
 80216be:	b2ed      	uxtb	r5, r5
 80216c0:	fb19 f90e 	smulbb	r9, r9, lr
 80216c4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80216c8:	fb15 f50e 	smulbb	r5, r5, lr
 80216cc:	fb0c 7c06 	mla	ip, ip, r6, r7
 80216d0:	10df      	asrs	r7, r3, #3
 80216d2:	00db      	lsls	r3, r3, #3
 80216d4:	fa1f fc8c 	uxth.w	ip, ip
 80216d8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80216dc:	b2db      	uxtb	r3, r3
 80216de:	fb07 9706 	mla	r7, r7, r6, r9
 80216e2:	f10c 0901 	add.w	r9, ip, #1
 80216e6:	fb03 5306 	mla	r3, r3, r6, r5
 80216ea:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80216ee:	b29b      	uxth	r3, r3
 80216f0:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 80216f4:	b2bf      	uxth	r7, r7
 80216f6:	f103 0c01 	add.w	ip, r3, #1
 80216fa:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80216fe:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021702:	ea4c 0c09 	orr.w	ip, ip, r9
 8021706:	f107 0901 	add.w	r9, r7, #1
 802170a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 802170e:	097f      	lsrs	r7, r7, #5
 8021710:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8021714:	ea4c 0c07 	orr.w	ip, ip, r7
 8021718:	f820 cb02 	strh.w	ip, [r0], #2
 802171c:	e7bc      	b.n	8021698 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 802171e:	9b01      	ldr	r3, [sp, #4]
 8021720:	881b      	ldrh	r3, [r3, #0]
 8021722:	eba3 0308 	sub.w	r3, r3, r8
 8021726:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802172a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802172e:	eba3 0308 	sub.w	r3, r3, r8
 8021732:	441c      	add	r4, r3
 8021734:	e7ac      	b.n	8021690 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb8>
 8021736:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 802173a:	4282      	cmp	r2, r0
 802173c:	d915      	bls.n	802176a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x192>
 802173e:	eb00 060a 	add.w	r6, r0, sl
 8021742:	4286      	cmp	r6, r0
 8021744:	d906      	bls.n	8021754 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17c>
 8021746:	f814 3b01 	ldrb.w	r3, [r4], #1
 802174a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 802174e:	f820 3b02 	strh.w	r3, [r0], #2
 8021752:	e7f6      	b.n	8021742 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x16a>
 8021754:	882b      	ldrh	r3, [r5, #0]
 8021756:	eba3 0308 	sub.w	r3, r3, r8
 802175a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802175e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8021762:	eba3 0308 	sub.w	r3, r3, r8
 8021766:	441c      	add	r4, r3
 8021768:	e7e7      	b.n	802173a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x162>
 802176a:	4b07      	ldr	r3, [pc, #28]	; (8021788 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b0>)
 802176c:	6818      	ldr	r0, [r3, #0]
 802176e:	6803      	ldr	r3, [r0, #0]
 8021770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021772:	4798      	blx	r3
 8021774:	b007      	add	sp, #28
 8021776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802177a:	bf00      	nop
 802177c:	080315ac 	.word	0x080315ac
 8021780:	08031c41 	.word	0x08031c41
 8021784:	0803177e 	.word	0x0803177e
 8021788:	2002b8a0 	.word	0x2002b8a0
 802178c:	2002b89a 	.word	0x2002b89a

08021790 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8021790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021794:	f8b1 9000 	ldrh.w	r9, [r1]
 8021798:	b091      	sub	sp, #68	; 0x44
 802179a:	4604      	mov	r4, r0
 802179c:	460f      	mov	r7, r1
 802179e:	f1b9 0f01 	cmp.w	r9, #1
 80217a2:	4690      	mov	r8, r2
 80217a4:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 80217a8:	d006      	beq.n	80217b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x28>
 80217aa:	4b84      	ldr	r3, [pc, #528]	; (80219bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x22c>)
 80217ac:	f240 212f 	movw	r1, #559	; 0x22f
 80217b0:	4a83      	ldr	r2, [pc, #524]	; (80219c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x230>)
 80217b2:	4884      	ldr	r0, [pc, #528]	; (80219c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x234>)
 80217b4:	f008 fb4c 	bl	8029e50 <__assert_func>
 80217b8:	2d00      	cmp	r5, #0
 80217ba:	d04f      	beq.n	802185c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 80217bc:	6810      	ldr	r0, [r2, #0]
 80217be:	ae0c      	add	r6, sp, #48	; 0x30
 80217c0:	6851      	ldr	r1, [r2, #4]
 80217c2:	f8df b208 	ldr.w	fp, [pc, #520]	; 80219cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>
 80217c6:	c603      	stmia	r6!, {r0, r1}
 80217c8:	6818      	ldr	r0, [r3, #0]
 80217ca:	ae0e      	add	r6, sp, #56	; 0x38
 80217cc:	6859      	ldr	r1, [r3, #4]
 80217ce:	c603      	stmia	r6!, {r0, r1}
 80217d0:	a80c      	add	r0, sp, #48	; 0x30
 80217d2:	f7f9 f905 	bl	801a9e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80217d6:	4641      	mov	r1, r8
 80217d8:	a80e      	add	r0, sp, #56	; 0x38
 80217da:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 80219d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x240>
 80217de:	f7f9 f927 	bl	801aa30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80217e2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80217e6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80217ea:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80217ee:	f8db 0000 	ldr.w	r0, [fp]
 80217f2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80217f6:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 80217fa:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 80217fe:	440c      	add	r4, r1
 8021800:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8021804:	440a      	add	r2, r1
 8021806:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 802180a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 802180e:	4413      	add	r3, r2
 8021810:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8021814:	6803      	ldr	r3, [r0, #0]
 8021816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021818:	4798      	blx	r3
 802181a:	f010 0f80 	tst.w	r0, #128	; 0x80
 802181e:	f8db 0000 	ldr.w	r0, [fp]
 8021822:	d01e      	beq.n	8021862 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xd2>
 8021824:	2200      	movs	r2, #0
 8021826:	6801      	ldr	r1, [r0, #0]
 8021828:	b2b6      	uxth	r6, r6
 802182a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 802182e:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8021832:	220b      	movs	r2, #11
 8021834:	9207      	str	r2, [sp, #28]
 8021836:	f8b8 2000 	ldrh.w	r2, [r8]
 802183a:	9504      	str	r5, [sp, #16]
 802183c:	9601      	str	r6, [sp, #4]
 802183e:	e9cd 9205 	strd	r9, r2, [sp, #20]
 8021842:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8021846:	9203      	str	r2, [sp, #12]
 8021848:	fa1f f28a 	uxth.w	r2, sl
 802184c:	9202      	str	r2, [sp, #8]
 802184e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8021852:	9200      	str	r2, [sp, #0]
 8021854:	463a      	mov	r2, r7
 8021856:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8021858:	4621      	mov	r1, r4
 802185a:	47a8      	blx	r5
 802185c:	b011      	add	sp, #68	; 0x44
 802185e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021862:	6803      	ldr	r3, [r0, #0]
 8021864:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8021868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802186a:	4798      	blx	r3
 802186c:	f8b8 2000 	ldrh.w	r2, [r8]
 8021870:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021874:	2dff      	cmp	r5, #255	; 0xff
 8021876:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 802187a:	fb0a fa02 	mul.w	sl, sl, r2
 802187e:	fb02 1303 	mla	r3, r2, r3, r1
 8021882:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021886:	d062      	beq.n	802194e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1be>
 8021888:	ea6f 0c05 	mvn.w	ip, r5
 802188c:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8021890:	b2ad      	uxth	r5, r5
 8021892:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8021896:	fa5f fc8c 	uxtb.w	ip, ip
 802189a:	930a      	str	r3, [sp, #40]	; 0x28
 802189c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802189e:	4298      	cmp	r0, r3
 80218a0:	f080 8085 	bcs.w	80219ae <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 80218a4:	eb00 0b09 	add.w	fp, r0, r9
 80218a8:	4558      	cmp	r0, fp
 80218aa:	d246      	bcs.n	802193a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 80218ac:	f814 eb01 	ldrb.w	lr, [r4], #1
 80218b0:	2303      	movs	r3, #3
 80218b2:	2204      	movs	r2, #4
 80218b4:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 80218b8:	8803      	ldrh	r3, [r0, #0]
 80218ba:	eb07 0a0e 	add.w	sl, r7, lr
 80218be:	1219      	asrs	r1, r3, #8
 80218c0:	10da      	asrs	r2, r3, #3
 80218c2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80218c6:	f89a 8002 	ldrb.w	r8, [sl, #2]
 80218ca:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80218ce:	00db      	lsls	r3, r3, #3
 80218d0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80218d4:	fb18 f805 	smulbb	r8, r8, r5
 80218d8:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80218dc:	fb1e fe05 	smulbb	lr, lr, r5
 80218e0:	b2db      	uxtb	r3, r3
 80218e2:	fb01 810c 	mla	r1, r1, ip, r8
 80218e6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80218ea:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80218ee:	fb18 f805 	smulbb	r8, r8, r5
 80218f2:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80218f6:	b289      	uxth	r1, r1
 80218f8:	fb02 820c 	mla	r2, r2, ip, r8
 80218fc:	fb03 e30c 	mla	r3, r3, ip, lr
 8021900:	f101 0801 	add.w	r8, r1, #1
 8021904:	b292      	uxth	r2, r2
 8021906:	b29b      	uxth	r3, r3
 8021908:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 802190c:	f102 0801 	add.w	r8, r2, #1
 8021910:	f103 0e01 	add.w	lr, r3, #1
 8021914:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8021918:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802191c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8021920:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8021924:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8021928:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802192c:	ea4e 0101 	orr.w	r1, lr, r1
 8021930:	ea41 0108 	orr.w	r1, r1, r8
 8021934:	f820 1b02 	strh.w	r1, [r0], #2
 8021938:	e7b6      	b.n	80218a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x118>
 802193a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802193c:	881b      	ldrh	r3, [r3, #0]
 802193e:	1b9b      	subs	r3, r3, r6
 8021940:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021944:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8021948:	1b9b      	subs	r3, r3, r6
 802194a:	441c      	add	r4, r3
 802194c:	e7a6      	b.n	802189c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 802194e:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8021952:	2203      	movs	r2, #3
 8021954:	2504      	movs	r5, #4
 8021956:	491c      	ldr	r1, [pc, #112]	; (80219c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x238>)
 8021958:	4550      	cmp	r0, sl
 802195a:	d228      	bcs.n	80219ae <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21e>
 802195c:	eb00 0c09 	add.w	ip, r0, r9
 8021960:	4560      	cmp	r0, ip
 8021962:	4623      	mov	r3, r4
 8021964:	d219      	bcs.n	802199a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8021966:	f893 e000 	ldrb.w	lr, [r3]
 802196a:	3401      	adds	r4, #1
 802196c:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8021970:	eb07 0b0e 	add.w	fp, r7, lr
 8021974:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021978:	f89b 3002 	ldrb.w	r3, [fp, #2]
 802197c:	f89b b001 	ldrb.w	fp, [fp, #1]
 8021980:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8021984:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8021988:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802198c:	ea43 030b 	orr.w	r3, r3, fp
 8021990:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8021994:	f820 3b02 	strh.w	r3, [r0], #2
 8021998:	e7e2      	b.n	8021960 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1d0>
 802199a:	f8b8 3000 	ldrh.w	r3, [r8]
 802199e:	1b9b      	subs	r3, r3, r6
 80219a0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80219a4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80219a8:	1b9b      	subs	r3, r3, r6
 80219aa:	441c      	add	r4, r3
 80219ac:	e7d4      	b.n	8021958 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1c8>
 80219ae:	4b07      	ldr	r3, [pc, #28]	; (80219cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x23c>)
 80219b0:	6818      	ldr	r0, [r3, #0]
 80219b2:	6803      	ldr	r3, [r0, #0]
 80219b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80219b6:	4798      	blx	r3
 80219b8:	e750      	b.n	802185c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 80219ba:	bf00      	nop
 80219bc:	080315fa 	.word	0x080315fa
 80219c0:	08031cca 	.word	0x08031cca
 80219c4:	0803177e 	.word	0x0803177e
 80219c8:	fffff800 	.word	0xfffff800
 80219cc:	2002b8a0 	.word	0x2002b8a0
 80219d0:	2002b89a 	.word	0x2002b89a

080219d4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80219d4:	b430      	push	{r4, r5}
 80219d6:	780d      	ldrb	r5, [r1, #0]
 80219d8:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80219dc:	2d01      	cmp	r5, #1
 80219de:	d00a      	beq.n	80219f6 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 80219e0:	d305      	bcc.n	80219ee <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 80219e2:	2d02      	cmp	r5, #2
 80219e4:	d10b      	bne.n	80219fe <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 80219e6:	9402      	str	r4, [sp, #8]
 80219e8:	bc30      	pop	{r4, r5}
 80219ea:	f7ff bdf5 	b.w	80215d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80219ee:	9402      	str	r4, [sp, #8]
 80219f0:	bc30      	pop	{r4, r5}
 80219f2:	f7ff bcfb 	b.w	80213ec <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80219f6:	9402      	str	r4, [sp, #8]
 80219f8:	bc30      	pop	{r4, r5}
 80219fa:	f7ff bec9 	b.w	8021790 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80219fe:	bc30      	pop	{r4, r5}
 8021a00:	4770      	bx	lr
	...

08021a04 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8021a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a08:	b087      	sub	sp, #28
 8021a0a:	4604      	mov	r4, r0
 8021a0c:	460e      	mov	r6, r1
 8021a0e:	6810      	ldr	r0, [r2, #0]
 8021a10:	6851      	ldr	r1, [r2, #4]
 8021a12:	ad02      	add	r5, sp, #8
 8021a14:	4617      	mov	r7, r2
 8021a16:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8021a1a:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8021c4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8021a1e:	c503      	stmia	r5!, {r0, r1}
 8021a20:	6818      	ldr	r0, [r3, #0]
 8021a22:	ad04      	add	r5, sp, #16
 8021a24:	6859      	ldr	r1, [r3, #4]
 8021a26:	c503      	stmia	r5!, {r0, r1}
 8021a28:	a802      	add	r0, sp, #8
 8021a2a:	f7f8 ffd9 	bl	801a9e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021a2e:	4639      	mov	r1, r7
 8021a30:	a804      	add	r0, sp, #16
 8021a32:	f7f8 fffd 	bl	801aa30 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021a36:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021a3a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021a3e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8021a42:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8021a46:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021a4a:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8021a4e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8021a52:	440e      	add	r6, r1
 8021a54:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8021a58:	440a      	add	r2, r1
 8021a5a:	f8ad 2010 	strh.w	r2, [sp, #16]
 8021a5e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8021a62:	4413      	add	r3, r2
 8021a64:	f8ad 3012 	strh.w	r3, [sp, #18]
 8021a68:	4b77      	ldr	r3, [pc, #476]	; (8021c48 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8021a6a:	6818      	ldr	r0, [r3, #0]
 8021a6c:	6803      	ldr	r3, [r0, #0]
 8021a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021a70:	4798      	blx	r3
 8021a72:	f8b9 b000 	ldrh.w	fp, [r9]
 8021a76:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021a7a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021a7e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021a82:	fb05 f50b 	mul.w	r5, r5, fp
 8021a86:	fb0b 2303 	mla	r3, fp, r3, r2
 8021a8a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021a8e:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8021a92:	9300      	str	r3, [sp, #0]
 8021a94:	d069      	beq.n	8021b6a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8021a96:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8021a9a:	4558      	cmp	r0, fp
 8021a9c:	f080 80cc 	bcs.w	8021c38 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8021aa0:	9b00      	ldr	r3, [sp, #0]
 8021aa2:	4631      	mov	r1, r6
 8021aa4:	18c3      	adds	r3, r0, r3
 8021aa6:	9301      	str	r3, [sp, #4]
 8021aa8:	9b01      	ldr	r3, [sp, #4]
 8021aaa:	4298      	cmp	r0, r3
 8021aac:	d24f      	bcs.n	8021b4e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8021aae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021ab2:	2a00      	cmp	r2, #0
 8021ab4:	d048      	beq.n	8021b48 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8021ab6:	fb0a f202 	mul.w	r2, sl, r2
 8021aba:	1c53      	adds	r3, r2, #1
 8021abc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021ac0:	121b      	asrs	r3, r3, #8
 8021ac2:	d041      	beq.n	8021b48 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8021ac4:	8802      	ldrh	r2, [r0, #0]
 8021ac6:	b29e      	uxth	r6, r3
 8021ac8:	f8b4 c000 	ldrh.w	ip, [r4]
 8021acc:	43db      	mvns	r3, r3
 8021ace:	1215      	asrs	r5, r2, #8
 8021ad0:	b2db      	uxtb	r3, r3
 8021ad2:	ea4f 272c 	mov.w	r7, ip, asr #8
 8021ad6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021ada:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8021ade:	fb15 f503 	smulbb	r5, r5, r3
 8021ae2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021ae6:	00d2      	lsls	r2, r2, #3
 8021ae8:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8021aec:	fb07 5706 	mla	r7, r7, r6, r5
 8021af0:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8021af4:	b2d2      	uxtb	r2, r2
 8021af6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021afa:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8021afe:	fb1e fe03 	smulbb	lr, lr, r3
 8021b02:	b2bf      	uxth	r7, r7
 8021b04:	fb12 f203 	smulbb	r2, r2, r3
 8021b08:	fa5f fc8c 	uxtb.w	ip, ip
 8021b0c:	fb05 e506 	mla	r5, r5, r6, lr
 8021b10:	f107 0e01 	add.w	lr, r7, #1
 8021b14:	fb0c 2c06 	mla	ip, ip, r6, r2
 8021b18:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8021b1c:	fa1f fc8c 	uxth.w	ip, ip
 8021b20:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8021b24:	b2ad      	uxth	r5, r5
 8021b26:	f10c 0701 	add.w	r7, ip, #1
 8021b2a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021b2e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021b32:	ea47 070e 	orr.w	r7, r7, lr
 8021b36:	f105 0e01 	add.w	lr, r5, #1
 8021b3a:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8021b3e:	096d      	lsrs	r5, r5, #5
 8021b40:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021b44:	432f      	orrs	r7, r5
 8021b46:	8007      	strh	r7, [r0, #0]
 8021b48:	3002      	adds	r0, #2
 8021b4a:	3402      	adds	r4, #2
 8021b4c:	e7ac      	b.n	8021aa8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8021b4e:	f8b9 3000 	ldrh.w	r3, [r9]
 8021b52:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8021b56:	eba3 0308 	sub.w	r3, r3, r8
 8021b5a:	eba6 0608 	sub.w	r6, r6, r8
 8021b5e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021b62:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8021b66:	440e      	add	r6, r1
 8021b68:	e797      	b.n	8021a9a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8021b6a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8021b6e:	42a8      	cmp	r0, r5
 8021b70:	d262      	bcs.n	8021c38 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8021b72:	9b00      	ldr	r3, [sp, #0]
 8021b74:	4631      	mov	r1, r6
 8021b76:	eb00 0b03 	add.w	fp, r0, r3
 8021b7a:	4558      	cmp	r0, fp
 8021b7c:	d24e      	bcs.n	8021c1c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8021b7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021b82:	b12b      	cbz	r3, 8021b90 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8021b84:	2bff      	cmp	r3, #255	; 0xff
 8021b86:	f8b4 e000 	ldrh.w	lr, [r4]
 8021b8a:	d104      	bne.n	8021b96 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8021b8c:	f8a0 e000 	strh.w	lr, [r0]
 8021b90:	3002      	adds	r0, #2
 8021b92:	3402      	adds	r4, #2
 8021b94:	e7f1      	b.n	8021b7a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8021b96:	8802      	ldrh	r2, [r0, #0]
 8021b98:	b29f      	uxth	r7, r3
 8021b9a:	43db      	mvns	r3, r3
 8021b9c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8021ba0:	1216      	asrs	r6, r2, #8
 8021ba2:	b2db      	uxtb	r3, r3
 8021ba4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021ba8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021bac:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8021bb0:	00d2      	lsls	r2, r2, #3
 8021bb2:	fb16 f603 	smulbb	r6, r6, r3
 8021bb6:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8021bba:	b2d2      	uxtb	r2, r2
 8021bbc:	fb0c 6c07 	mla	ip, ip, r7, r6
 8021bc0:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8021bc4:	fb1a fa03 	smulbb	sl, sl, r3
 8021bc8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021bcc:	fa1f fc8c 	uxth.w	ip, ip
 8021bd0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021bd4:	fb12 f303 	smulbb	r3, r2, r3
 8021bd8:	fa5f fe8e 	uxtb.w	lr, lr
 8021bdc:	fb06 a607 	mla	r6, r6, r7, sl
 8021be0:	f10c 0201 	add.w	r2, ip, #1
 8021be4:	fb0e 3307 	mla	r3, lr, r7, r3
 8021be8:	b2b6      	uxth	r6, r6
 8021bea:	b29b      	uxth	r3, r3
 8021bec:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021bf0:	f106 0a01 	add.w	sl, r6, #1
 8021bf4:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8021bf8:	f103 0c01 	add.w	ip, r3, #1
 8021bfc:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8021c00:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021c04:	0976      	lsrs	r6, r6, #5
 8021c06:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021c0a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021c0e:	ea4c 0c02 	orr.w	ip, ip, r2
 8021c12:	ea4c 0c06 	orr.w	ip, ip, r6
 8021c16:	f8a0 c000 	strh.w	ip, [r0]
 8021c1a:	e7b9      	b.n	8021b90 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8021c1c:	f8b9 3000 	ldrh.w	r3, [r9]
 8021c20:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8021c24:	eba3 0308 	sub.w	r3, r3, r8
 8021c28:	eba6 0608 	sub.w	r6, r6, r8
 8021c2c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021c30:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8021c34:	440e      	add	r6, r1
 8021c36:	e79a      	b.n	8021b6e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8021c38:	4b03      	ldr	r3, [pc, #12]	; (8021c48 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8021c3a:	6818      	ldr	r0, [r3, #0]
 8021c3c:	6803      	ldr	r3, [r0, #0]
 8021c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021c40:	4798      	blx	r3
 8021c42:	b007      	add	sp, #28
 8021c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c48:	2002b8a0 	.word	0x2002b8a0
 8021c4c:	2002b89a 	.word	0x2002b89a

08021c50 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8021c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c54:	b089      	sub	sp, #36	; 0x24
 8021c56:	4682      	mov	sl, r0
 8021c58:	460f      	mov	r7, r1
 8021c5a:	4691      	mov	r9, r2
 8021c5c:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8021c60:	4698      	mov	r8, r3
 8021c62:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021c64:	2e00      	cmp	r6, #0
 8021c66:	d03d      	beq.n	8021ce4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021c68:	4608      	mov	r0, r1
 8021c6a:	f7fc f857 	bl	801dd1c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021c6e:	4605      	mov	r5, r0
 8021c70:	4638      	mov	r0, r7
 8021c72:	f7fc f88d 	bl	801dd90 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021c76:	f8ad 000e 	strh.w	r0, [sp, #14]
 8021c7a:	4638      	mov	r0, r7
 8021c7c:	f8ad 9008 	strh.w	r9, [sp, #8]
 8021c80:	f8ad 500c 	strh.w	r5, [sp, #12]
 8021c84:	f8ad 800a 	strh.w	r8, [sp, #10]
 8021c88:	f7fc f950 	bl	801df2c <_ZNK8touchgfx6Bitmap7getDataEv>
 8021c8c:	4605      	mov	r5, r0
 8021c8e:	4638      	mov	r0, r7
 8021c90:	f7fc f97e 	bl	801df90 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8021c94:	4681      	mov	r9, r0
 8021c96:	4638      	mov	r0, r7
 8021c98:	f7fc f9d2 	bl	801e040 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021c9c:	280b      	cmp	r0, #11
 8021c9e:	f200 816f 	bhi.w	8021f80 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x330>
 8021ca2:	e8df f010 	tbh	[pc, r0, lsl #1]
 8021ca6:	00c3      	.short	0x00c3
 8021ca8:	000c00b4 	.word	0x000c00b4
 8021cac:	016d016d 	.word	0x016d016d
 8021cb0:	016d016d 	.word	0x016d016d
 8021cb4:	016d016d 	.word	0x016d016d
 8021cb8:	016d016d 	.word	0x016d016d
 8021cbc:	00bb      	.short	0x00bb
 8021cbe:	4bb3      	ldr	r3, [pc, #716]	; (8021f8c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x33c>)
 8021cc0:	6818      	ldr	r0, [r3, #0]
 8021cc2:	6803      	ldr	r3, [r0, #0]
 8021cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021cc6:	4798      	blx	r3
 8021cc8:	2eff      	cmp	r6, #255	; 0xff
 8021cca:	d121      	bne.n	8021d10 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8021ccc:	0683      	lsls	r3, r0, #26
 8021cce:	d41f      	bmi.n	8021d10 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8021cd0:	4638      	mov	r0, r7
 8021cd2:	f7fc f8f1 	bl	801deb8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8021cd6:	b940      	cbnz	r0, 8021cea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x9a>
 8021cd8:	4623      	mov	r3, r4
 8021cda:	aa02      	add	r2, sp, #8
 8021cdc:	4629      	mov	r1, r5
 8021cde:	4650      	mov	r0, sl
 8021ce0:	f7ff f9e4 	bl	80210ac <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8021ce4:	b009      	add	sp, #36	; 0x24
 8021ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021cea:	f10d 0818 	add.w	r8, sp, #24
 8021cee:	4639      	mov	r1, r7
 8021cf0:	af04      	add	r7, sp, #16
 8021cf2:	4640      	mov	r0, r8
 8021cf4:	f7fc f886 	bl	801de04 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8021cf8:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021cfc:	e887 0003 	stmia.w	r7, {r0, r1}
 8021d00:	4638      	mov	r0, r7
 8021d02:	4621      	mov	r1, r4
 8021d04:	f7f5 fbf0 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 8021d08:	4638      	mov	r0, r7
 8021d0a:	f7f5 fc30 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 8021d0e:	b130      	cbz	r0, 8021d1e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xce>
 8021d10:	4633      	mov	r3, r6
 8021d12:	4622      	mov	r2, r4
 8021d14:	a902      	add	r1, sp, #8
 8021d16:	4628      	mov	r0, r5
 8021d18:	f7ff f8e2 	bl	8020ee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021d1c:	e7e2      	b.n	8021ce4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021d1e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021d22:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8021d26:	4293      	cmp	r3, r2
 8021d28:	dd12      	ble.n	8021d50 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x100>
 8021d2a:	1a9b      	subs	r3, r3, r2
 8021d2c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8021d30:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021d34:	f8ad 0018 	strh.w	r0, [sp, #24]
 8021d38:	4628      	mov	r0, r5
 8021d3a:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021d3e:	4642      	mov	r2, r8
 8021d40:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021d44:	a902      	add	r1, sp, #8
 8021d46:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021d4a:	4633      	mov	r3, r6
 8021d4c:	f7ff f8c8 	bl	8020ee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021d50:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8021d54:	f9b4 2000 	ldrsh.w	r2, [r4]
 8021d58:	4293      	cmp	r3, r2
 8021d5a:	dd12      	ble.n	8021d82 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x132>
 8021d5c:	1a9b      	subs	r3, r3, r2
 8021d5e:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8021d62:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8021d66:	f8ad 2018 	strh.w	r2, [sp, #24]
 8021d6a:	4642      	mov	r2, r8
 8021d6c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8021d70:	4628      	mov	r0, r5
 8021d72:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021d76:	23ff      	movs	r3, #255	; 0xff
 8021d78:	f8ad 101e 	strh.w	r1, [sp, #30]
 8021d7c:	a902      	add	r1, sp, #8
 8021d7e:	f7ff f8af 	bl	8020ee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021d82:	463b      	mov	r3, r7
 8021d84:	aa02      	add	r2, sp, #8
 8021d86:	4629      	mov	r1, r5
 8021d88:	4650      	mov	r0, sl
 8021d8a:	f7ff f98f 	bl	80210ac <_ZN8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8021d8e:	88a2      	ldrh	r2, [r4, #4]
 8021d90:	8823      	ldrh	r3, [r4, #0]
 8021d92:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8021d96:	4413      	add	r3, r2
 8021d98:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021d9c:	440a      	add	r2, r1
 8021d9e:	b29b      	uxth	r3, r3
 8021da0:	b292      	uxth	r2, r2
 8021da2:	b218      	sxth	r0, r3
 8021da4:	b211      	sxth	r1, r2
 8021da6:	4288      	cmp	r0, r1
 8021da8:	dd12      	ble.n	8021dd0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x180>
 8021daa:	1a9b      	subs	r3, r3, r2
 8021dac:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8021db0:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8021db4:	4642      	mov	r2, r8
 8021db6:	f8ad 1018 	strh.w	r1, [sp, #24]
 8021dba:	a902      	add	r1, sp, #8
 8021dbc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021dc0:	23ff      	movs	r3, #255	; 0xff
 8021dc2:	f8ad 001e 	strh.w	r0, [sp, #30]
 8021dc6:	4628      	mov	r0, r5
 8021dc8:	f8ad 601a 	strh.w	r6, [sp, #26]
 8021dcc:	f7ff f888 	bl	8020ee0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021dd0:	88e2      	ldrh	r2, [r4, #6]
 8021dd2:	8863      	ldrh	r3, [r4, #2]
 8021dd4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8021dd8:	4413      	add	r3, r2
 8021dda:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8021dde:	440a      	add	r2, r1
 8021de0:	b29b      	uxth	r3, r3
 8021de2:	b292      	uxth	r2, r2
 8021de4:	b218      	sxth	r0, r3
 8021de6:	b211      	sxth	r1, r2
 8021de8:	4288      	cmp	r0, r1
 8021dea:	f77f af7b 	ble.w	8021ce4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021dee:	1a9b      	subs	r3, r3, r2
 8021df0:	f9b4 6000 	ldrsh.w	r6, [r4]
 8021df4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021df8:	4642      	mov	r2, r8
 8021dfa:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021dfe:	23ff      	movs	r3, #255	; 0xff
 8021e00:	f8ad 6018 	strh.w	r6, [sp, #24]
 8021e04:	f8ad 101a 	strh.w	r1, [sp, #26]
 8021e08:	f8ad 001c 	strh.w	r0, [sp, #28]
 8021e0c:	e782      	b.n	8021d14 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8021e0e:	4633      	mov	r3, r6
 8021e10:	4622      	mov	r2, r4
 8021e12:	a902      	add	r1, sp, #8
 8021e14:	4628      	mov	r0, r5
 8021e16:	f7ff f9b9 	bl	802118c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8021e1a:	e763      	b.n	8021ce4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021e1c:	9600      	str	r6, [sp, #0]
 8021e1e:	4623      	mov	r3, r4
 8021e20:	aa02      	add	r2, sp, #8
 8021e22:	4649      	mov	r1, r9
 8021e24:	4628      	mov	r0, r5
 8021e26:	f7ff fdd5 	bl	80219d4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8021e2a:	e75b      	b.n	8021ce4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021e2c:	4638      	mov	r0, r7
 8021e2e:	f7fc f843 	bl	801deb8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8021e32:	b950      	cbnz	r0, 8021e4a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fa>
 8021e34:	f8da 3000 	ldr.w	r3, [sl]
 8021e38:	aa02      	add	r2, sp, #8
 8021e3a:	4629      	mov	r1, r5
 8021e3c:	e9cd 6000 	strd	r6, r0, [sp]
 8021e40:	4650      	mov	r0, sl
 8021e42:	68de      	ldr	r6, [r3, #12]
 8021e44:	4623      	mov	r3, r4
 8021e46:	47b0      	blx	r6
 8021e48:	e74c      	b.n	8021ce4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021e4a:	f10d 0818 	add.w	r8, sp, #24
 8021e4e:	4639      	mov	r1, r7
 8021e50:	af04      	add	r7, sp, #16
 8021e52:	4640      	mov	r0, r8
 8021e54:	f7fb ffd6 	bl	801de04 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8021e58:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021e5c:	e887 0003 	stmia.w	r7, {r0, r1}
 8021e60:	4638      	mov	r0, r7
 8021e62:	4621      	mov	r1, r4
 8021e64:	f7f5 fb40 	bl	80174e8 <_ZN8touchgfx4RectaNERKS0_>
 8021e68:	4638      	mov	r0, r7
 8021e6a:	f7f5 fb80 	bl	801756e <_ZNK8touchgfx4Rect7isEmptyEv>
 8021e6e:	b138      	cbz	r0, 8021e80 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8021e70:	4623      	mov	r3, r4
 8021e72:	9600      	str	r6, [sp, #0]
 8021e74:	aa02      	add	r2, sp, #8
 8021e76:	4649      	mov	r1, r9
 8021e78:	4628      	mov	r0, r5
 8021e7a:	f7ff fdc3 	bl	8021a04 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021e7e:	e731      	b.n	8021ce4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021e80:	f8da 3000 	ldr.w	r3, [sl]
 8021e84:	aa02      	add	r2, sp, #8
 8021e86:	4629      	mov	r1, r5
 8021e88:	e9cd 6000 	strd	r6, r0, [sp]
 8021e8c:	4650      	mov	r0, sl
 8021e8e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8021e92:	463b      	mov	r3, r7
 8021e94:	47d8      	blx	fp
 8021e96:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021e9a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8021e9e:	4293      	cmp	r3, r2
 8021ea0:	dd13      	ble.n	8021eca <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x27a>
 8021ea2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8021ea6:	1a9b      	subs	r3, r3, r2
 8021ea8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021eac:	f8ad 0018 	strh.w	r0, [sp, #24]
 8021eb0:	4628      	mov	r0, r5
 8021eb2:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021eb6:	aa02      	add	r2, sp, #8
 8021eb8:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021ebc:	4649      	mov	r1, r9
 8021ebe:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021ec2:	4643      	mov	r3, r8
 8021ec4:	9600      	str	r6, [sp, #0]
 8021ec6:	f7ff fd9d 	bl	8021a04 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021eca:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8021ece:	f9b4 2000 	ldrsh.w	r2, [r4]
 8021ed2:	4293      	cmp	r3, r2
 8021ed4:	dd13      	ble.n	8021efe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2ae>
 8021ed6:	1a9b      	subs	r3, r3, r2
 8021ed8:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8021edc:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8021ee0:	f8ad 2018 	strh.w	r2, [sp, #24]
 8021ee4:	aa02      	add	r2, sp, #8
 8021ee6:	f8ad 001a 	strh.w	r0, [sp, #26]
 8021eea:	4628      	mov	r0, r5
 8021eec:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021ef0:	4643      	mov	r3, r8
 8021ef2:	f8ad 101e 	strh.w	r1, [sp, #30]
 8021ef6:	4649      	mov	r1, r9
 8021ef8:	9600      	str	r6, [sp, #0]
 8021efa:	f7ff fd83 	bl	8021a04 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021efe:	88a2      	ldrh	r2, [r4, #4]
 8021f00:	8823      	ldrh	r3, [r4, #0]
 8021f02:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8021f06:	4413      	add	r3, r2
 8021f08:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021f0c:	440a      	add	r2, r1
 8021f0e:	b29b      	uxth	r3, r3
 8021f10:	b292      	uxth	r2, r2
 8021f12:	b218      	sxth	r0, r3
 8021f14:	b211      	sxth	r1, r2
 8021f16:	4288      	cmp	r0, r1
 8021f18:	dd13      	ble.n	8021f42 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2f2>
 8021f1a:	1a9b      	subs	r3, r3, r2
 8021f1c:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8021f20:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8021f24:	aa02      	add	r2, sp, #8
 8021f26:	f8ad 1018 	strh.w	r1, [sp, #24]
 8021f2a:	4649      	mov	r1, r9
 8021f2c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021f30:	4643      	mov	r3, r8
 8021f32:	f8ad 001e 	strh.w	r0, [sp, #30]
 8021f36:	4628      	mov	r0, r5
 8021f38:	9600      	str	r6, [sp, #0]
 8021f3a:	f8ad 701a 	strh.w	r7, [sp, #26]
 8021f3e:	f7ff fd61 	bl	8021a04 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021f42:	88e2      	ldrh	r2, [r4, #6]
 8021f44:	8863      	ldrh	r3, [r4, #2]
 8021f46:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8021f4a:	4413      	add	r3, r2
 8021f4c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8021f50:	440a      	add	r2, r1
 8021f52:	b29b      	uxth	r3, r3
 8021f54:	b292      	uxth	r2, r2
 8021f56:	b218      	sxth	r0, r3
 8021f58:	b211      	sxth	r1, r2
 8021f5a:	4288      	cmp	r0, r1
 8021f5c:	f77f aec2 	ble.w	8021ce4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021f60:	f9b4 7000 	ldrsh.w	r7, [r4]
 8021f64:	1a9b      	subs	r3, r3, r2
 8021f66:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021f6a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021f6e:	4643      	mov	r3, r8
 8021f70:	f8ad 7018 	strh.w	r7, [sp, #24]
 8021f74:	f8ad 101a 	strh.w	r1, [sp, #26]
 8021f78:	f8ad 001c 	strh.w	r0, [sp, #28]
 8021f7c:	9600      	str	r6, [sp, #0]
 8021f7e:	e779      	b.n	8021e74 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x224>
 8021f80:	4b03      	ldr	r3, [pc, #12]	; (8021f90 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x340>)
 8021f82:	21b4      	movs	r1, #180	; 0xb4
 8021f84:	4a03      	ldr	r2, [pc, #12]	; (8021f94 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x344>)
 8021f86:	4804      	ldr	r0, [pc, #16]	; (8021f98 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x348>)
 8021f88:	f007 ff62 	bl	8029e50 <__assert_func>
 8021f8c:	2002b8a0 	.word	0x2002b8a0
 8021f90:	08031648 	.word	0x08031648
 8021f94:	08031d53 	.word	0x08031d53
 8021f98:	0803177e 	.word	0x0803177e

08021f9c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8021f9c:	b508      	push	{r3, lr}
 8021f9e:	b180      	cbz	r0, 8021fc2 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 8021fa0:	2902      	cmp	r1, #2
 8021fa2:	d014      	beq.n	8021fce <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8021fa4:	2903      	cmp	r1, #3
 8021fa6:	d01d      	beq.n	8021fe4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8021fa8:	2901      	cmp	r1, #1
 8021faa:	d101      	bne.n	8021fb0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8021fac:	2001      	movs	r0, #1
 8021fae:	bd08      	pop	{r3, pc}
 8021fb0:	4b0e      	ldr	r3, [pc, #56]	; (8021fec <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8021fb2:	8818      	ldrh	r0, [r3, #0]
 8021fb4:	b990      	cbnz	r0, 8021fdc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8021fb6:	4b0e      	ldr	r3, [pc, #56]	; (8021ff0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8021fb8:	2150      	movs	r1, #80	; 0x50
 8021fba:	4a0e      	ldr	r2, [pc, #56]	; (8021ff4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8021fbc:	480e      	ldr	r0, [pc, #56]	; (8021ff8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8021fbe:	f007 ff47 	bl	8029e50 <__assert_func>
 8021fc2:	2902      	cmp	r1, #2
 8021fc4:	d00e      	beq.n	8021fe4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x48>
 8021fc6:	2903      	cmp	r1, #3
 8021fc8:	d0f2      	beq.n	8021fb0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8021fca:	2901      	cmp	r1, #1
 8021fcc:	d1ee      	bne.n	8021fac <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 8021fce:	4b07      	ldr	r3, [pc, #28]	; (8021fec <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8021fd0:	8818      	ldrh	r0, [r3, #0]
 8021fd2:	2800      	cmp	r0, #0
 8021fd4:	d0ef      	beq.n	8021fb6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8021fd6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021fda:	e7e8      	b.n	8021fae <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8021fdc:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021fe0:	4240      	negs	r0, r0
 8021fe2:	e7e4      	b.n	8021fae <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8021fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8021fe8:	e7e1      	b.n	8021fae <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8021fea:	bf00      	nop
 8021fec:	2002b89a 	.word	0x2002b89a
 8021ff0:	080318d4 	.word	0x080318d4
 8021ff4:	08031ed0 	.word	0x08031ed0
 8021ff8:	08031916 	.word	0x08031916

08021ffc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8021ffc:	b508      	push	{r3, lr}
 8021ffe:	b180      	cbz	r0, 8022022 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8022000:	2902      	cmp	r1, #2
 8022002:	d014      	beq.n	802202e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x32>
 8022004:	2903      	cmp	r1, #3
 8022006:	d018      	beq.n	802203a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8022008:	2901      	cmp	r1, #1
 802200a:	d001      	beq.n	8022010 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 802200c:	2001      	movs	r0, #1
 802200e:	e013      	b.n	8022038 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8022010:	4b0e      	ldr	r3, [pc, #56]	; (802204c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8022012:	8818      	ldrh	r0, [r3, #0]
 8022014:	b970      	cbnz	r0, 8022034 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x38>
 8022016:	4b0e      	ldr	r3, [pc, #56]	; (8022050 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 8022018:	2150      	movs	r1, #80	; 0x50
 802201a:	4a0e      	ldr	r2, [pc, #56]	; (8022054 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 802201c:	480e      	ldr	r0, [pc, #56]	; (8022058 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 802201e:	f007 ff17 	bl	8029e50 <__assert_func>
 8022022:	2902      	cmp	r1, #2
 8022024:	d009      	beq.n	802203a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3e>
 8022026:	2903      	cmp	r1, #3
 8022028:	d0f0      	beq.n	802200c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 802202a:	2901      	cmp	r1, #1
 802202c:	d1f0      	bne.n	8022010 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 802202e:	f04f 30ff 	mov.w	r0, #4294967295
 8022032:	e001      	b.n	8022038 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 8022034:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022038:	bd08      	pop	{r3, pc}
 802203a:	4b04      	ldr	r3, [pc, #16]	; (802204c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 802203c:	8818      	ldrh	r0, [r3, #0]
 802203e:	2800      	cmp	r0, #0
 8022040:	d0e9      	beq.n	8022016 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x1a>
 8022042:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8022046:	4240      	negs	r0, r0
 8022048:	e7f6      	b.n	8022038 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3c>
 802204a:	bf00      	nop
 802204c:	2002b89a 	.word	0x2002b89a
 8022050:	080318d4 	.word	0x080318d4
 8022054:	08031ed0 	.word	0x08031ed0
 8022058:	08031916 	.word	0x08031916

0802205c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 802205c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022060:	b099      	sub	sp, #100	; 0x64
 8022062:	910b      	str	r1, [sp, #44]	; 0x2c
 8022064:	a914      	add	r1, sp, #80	; 0x50
 8022066:	f9bd 5088 	ldrsh.w	r5, [sp, #136]	; 0x88
 802206a:	f8bd 6090 	ldrh.w	r6, [sp, #144]	; 0x90
 802206e:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 8022072:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8022076:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 802207a:	e881 000c 	stmia.w	r1, {r2, r3}
 802207e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8022082:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8022086:	930a      	str	r3, [sp, #40]	; 0x28
 8022088:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 802208c:	f891 900d 	ldrb.w	r9, [r1, #13]
 8022090:	9311      	str	r3, [sp, #68]	; 0x44
 8022092:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8022096:	7988      	ldrb	r0, [r1, #6]
 8022098:	930c      	str	r3, [sp, #48]	; 0x30
 802209a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 802209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80220a2:	4303      	orrs	r3, r0
 80220a4:	9309      	str	r3, [sp, #36]	; 0x24
 80220a6:	f000 81a1 	beq.w	80223ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 80220aa:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80220ae:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80220b2:	f891 9007 	ldrb.w	r9, [r1, #7]
 80220b6:	ea59 0903 	orrs.w	r9, r9, r3
 80220ba:	f000 8197 	beq.w	80223ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 80220be:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80220c2:	b29b      	uxth	r3, r3
 80220c4:	2e00      	cmp	r6, #0
 80220c6:	f000 813a 	beq.w	802233e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 80220ca:	1af6      	subs	r6, r6, r3
 80220cc:	b2b6      	uxth	r6, r6
 80220ce:	0433      	lsls	r3, r6, #16
 80220d0:	d502      	bpl.n	80220d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 80220d2:	1bad      	subs	r5, r5, r6
 80220d4:	2600      	movs	r6, #0
 80220d6:	b22d      	sxth	r5, r5
 80220d8:	f9b2 1000 	ldrsh.w	r1, [r2]
 80220dc:	a814      	add	r0, sp, #80	; 0x50
 80220de:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 80220e2:	428d      	cmp	r5, r1
 80220e4:	b28b      	uxth	r3, r1
 80220e6:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80220ea:	bfbf      	itttt	lt
 80220ec:	18f6      	addlt	r6, r6, r3
 80220ee:	1b75      	sublt	r5, r6, r5
 80220f0:	b2ae      	uxthlt	r6, r5
 80220f2:	460d      	movlt	r5, r1
 80220f4:	8891      	ldrh	r1, [r2, #4]
 80220f6:	440b      	add	r3, r1
 80220f8:	4629      	mov	r1, r5
 80220fa:	b21b      	sxth	r3, r3
 80220fc:	9310      	str	r3, [sp, #64]	; 0x40
 80220fe:	88d3      	ldrh	r3, [r2, #6]
 8022100:	8852      	ldrh	r2, [r2, #2]
 8022102:	4413      	add	r3, r2
 8022104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022106:	b21b      	sxth	r3, r3
 8022108:	930f      	str	r3, [sp, #60]	; 0x3c
 802210a:	4bbd      	ldr	r3, [pc, #756]	; (8022400 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 802210c:	f893 b000 	ldrb.w	fp, [r3]
 8022110:	f10b 3cff 	add.w	ip, fp, #4294967295
 8022114:	f1dc 0300 	rsbs	r3, ip, #0
 8022118:	eb43 030c 	adc.w	r3, r3, ip
 802211c:	930e      	str	r3, [sp, #56]	; 0x38
 802211e:	4653      	mov	r3, sl
 8022120:	f7f8 fae2 	bl	801a6e8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8022124:	4629      	mov	r1, r5
 8022126:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 802212a:	4653      	mov	r3, sl
 802212c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802212e:	a814      	add	r0, sp, #80	; 0x50
 8022130:	f7f8 faf2 	bl	801a718 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8022134:	a918      	add	r1, sp, #96	; 0x60
 8022136:	f821 0d02 	strh.w	r0, [r1, #-2]!
 802213a:	a817      	add	r0, sp, #92	; 0x5c
 802213c:	f7f8 fc0e 	bl	801a95c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8022140:	f1ba 0f00 	cmp.w	sl, #0
 8022144:	f040 80fe 	bne.w	8022344 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e8>
 8022148:	f1bb 0f01 	cmp.w	fp, #1
 802214c:	f040 8102 	bne.w	8022354 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f8>
 8022150:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022152:	b153      	cbz	r3, 802216a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8022154:	2408      	movs	r4, #8
 8022156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022158:	fb94 f3f8 	sdiv	r3, r4, r8
 802215c:	1e5c      	subs	r4, r3, #1
 802215e:	4414      	add	r4, r2
 8022160:	fb94 f4f3 	sdiv	r4, r4, r3
 8022164:	fb14 f403 	smulbb	r4, r4, r3
 8022168:	b2a4      	uxth	r4, r4
 802216a:	b906      	cbnz	r6, 802216e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 802216c:	b16f      	cbz	r7, 802218a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12e>
 802216e:	fb07 6304 	mla	r3, r7, r4, r6
 8022172:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8022174:	463a      	mov	r2, r7
 8022176:	fb08 f303 	mul.w	r3, r8, r3
 802217a:	f003 0707 	and.w	r7, r3, #7
 802217e:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 8022182:	9328      	str	r3, [sp, #160]	; 0xa0
 8022184:	eba9 0302 	sub.w	r3, r9, r2
 8022188:	930d      	str	r3, [sp, #52]	; 0x34
 802218a:	4651      	mov	r1, sl
 802218c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802218e:	f7ff ff05 	bl	8021f9c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8022192:	4651      	mov	r1, sl
 8022194:	4681      	mov	r9, r0
 8022196:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022198:	f7ff ff30 	bl	8021ffc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 802219c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802219e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80221a0:	4683      	mov	fp, r0
 80221a2:	eba3 0a02 	sub.w	sl, r3, r2
 80221a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80221a8:	459a      	cmp	sl, r3
 80221aa:	bfa8      	it	ge
 80221ac:	469a      	movge	sl, r3
 80221ae:	f1ba 0f00 	cmp.w	sl, #0
 80221b2:	f340 811b 	ble.w	80223ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 80221b6:	1bad      	subs	r5, r5, r6
 80221b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80221ba:	1b5d      	subs	r5, r3, r5
 80221bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221be:	429d      	cmp	r5, r3
 80221c0:	bfd4      	ite	le
 80221c2:	ebc6 0605 	rsble	r6, r6, r5
 80221c6:	ebc6 0603 	rsbgt	r6, r6, r3
 80221ca:	2e00      	cmp	r6, #0
 80221cc:	f340 810e 	ble.w	80223ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 80221d0:	1ba4      	subs	r4, r4, r6
 80221d2:	fb08 f304 	mul.w	r3, r8, r4
 80221d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80221d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80221da:	2b00      	cmp	r3, #0
 80221dc:	f040 810b 	bne.w	80223f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 80221e0:	4b88      	ldr	r3, [pc, #544]	; (8022404 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 80221e2:	6818      	ldr	r0, [r3, #0]
 80221e4:	6803      	ldr	r3, [r0, #0]
 80221e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80221e8:	4798      	blx	r3
 80221ea:	2301      	movs	r3, #1
 80221ec:	4a86      	ldr	r2, [pc, #536]	; (8022408 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80221ee:	fa03 f308 	lsl.w	r3, r3, r8
 80221f2:	8811      	ldrh	r1, [r2, #0]
 80221f4:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 80221f8:	3b01      	subs	r3, #1
 80221fa:	b2db      	uxtb	r3, r3
 80221fc:	930e      	str	r3, [sp, #56]	; 0x38
 80221fe:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8022202:	fb01 2303 	mla	r3, r1, r3, r2
 8022206:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 802220a:	930a      	str	r3, [sp, #40]	; 0x28
 802220c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802220e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8022212:	9313      	str	r3, [sp, #76]	; 0x4c
 8022214:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022216:	0a19      	lsrs	r1, r3, #8
 8022218:	b2cb      	uxtb	r3, r1
 802221a:	9312      	str	r3, [sp, #72]	; 0x48
 802221c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802221e:	b2db      	uxtb	r3, r3
 8022220:	9311      	str	r3, [sp, #68]	; 0x44
 8022222:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022224:	095a      	lsrs	r2, r3, #5
 8022226:	4b79      	ldr	r3, [pc, #484]	; (802240c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>)
 8022228:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802222c:	400b      	ands	r3, r1
 802222e:	4313      	orrs	r3, r2
 8022230:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022232:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022236:	4313      	orrs	r3, r2
 8022238:	b29b      	uxth	r3, r3
 802223a:	9310      	str	r3, [sp, #64]	; 0x40
 802223c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802223e:	781a      	ldrb	r2, [r3, #0]
 8022240:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8022244:	fb06 b919 	mls	r9, r6, r9, fp
 8022248:	413a      	asrs	r2, r7
 802224a:	fb03 fb06 	mul.w	fp, r3, r6
 802224e:	930d      	str	r3, [sp, #52]	; 0x34
 8022250:	b2d2      	uxtb	r2, r2
 8022252:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8022256:	f11a 3aff 	adds.w	sl, sl, #4294967295
 802225a:	f0c0 80ea 	bcc.w	8022432 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d6>
 802225e:	46b6      	mov	lr, r6
 8022260:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8022264:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8022268:	f0c0 80d2 	bcc.w	8022410 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b4>
 802226c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802226e:	4013      	ands	r3, r2
 8022270:	d055      	beq.n	802231e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c2>
 8022272:	20ff      	movs	r0, #255	; 0xff
 8022274:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022276:	fb90 f1f1 	sdiv	r1, r0, r1
 802227a:	434b      	muls	r3, r1
 802227c:	2bfe      	cmp	r3, #254	; 0xfe
 802227e:	dd03      	ble.n	8022288 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22c>
 8022280:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022282:	4281      	cmp	r1, r0
 8022284:	f000 80b9 	beq.w	80223fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8022288:	990c      	ldr	r1, [sp, #48]	; 0x30
 802228a:	f8bc 4000 	ldrh.w	r4, [ip]
 802228e:	fb11 f303 	smulbb	r3, r1, r3
 8022292:	1220      	asrs	r0, r4, #8
 8022294:	b29b      	uxth	r3, r3
 8022296:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802229a:	1c59      	adds	r1, r3, #1
 802229c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80222a0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80222a4:	10e1      	asrs	r1, r4, #3
 80222a6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80222aa:	00e4      	lsls	r4, r4, #3
 80222ac:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80222b0:	b29d      	uxth	r5, r3
 80222b2:	43db      	mvns	r3, r3
 80222b4:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80222b8:	b2db      	uxtb	r3, r3
 80222ba:	b2e4      	uxtb	r4, r4
 80222bc:	9309      	str	r3, [sp, #36]	; 0x24
 80222be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80222c0:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80222c4:	fb13 f905 	smulbb	r9, r3, r5
 80222c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80222ca:	fb00 9003 	mla	r0, r0, r3, r9
 80222ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80222d0:	fb13 f905 	smulbb	r9, r3, r5
 80222d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80222d6:	b280      	uxth	r0, r0
 80222d8:	fb01 9103 	mla	r1, r1, r3, r9
 80222dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80222de:	fb13 f505 	smulbb	r5, r3, r5
 80222e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80222e4:	b289      	uxth	r1, r1
 80222e6:	fb04 5403 	mla	r4, r4, r3, r5
 80222ea:	1c43      	adds	r3, r0, #1
 80222ec:	b2a4      	uxth	r4, r4
 80222ee:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80222f2:	f104 0901 	add.w	r9, r4, #1
 80222f6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80222fa:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 80222fe:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8022302:	ea49 0000 	orr.w	r0, r9, r0
 8022306:	f101 0901 	add.w	r9, r1, #1
 802230a:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 802230e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8022312:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8022316:	ea40 0009 	orr.w	r0, r0, r9
 802231a:	f8ac 0000 	strh.w	r0, [ip]
 802231e:	4447      	add	r7, r8
 8022320:	b2bf      	uxth	r7, r7
 8022322:	2f07      	cmp	r7, #7
 8022324:	bf89      	itett	hi
 8022326:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8022328:	fa42 f208 	asrls.w	r2, r2, r8
 802232c:	2700      	movhi	r7, #0
 802232e:	785a      	ldrbhi	r2, [r3, #1]
 8022330:	bf8a      	itet	hi
 8022332:	3301      	addhi	r3, #1
 8022334:	b2d2      	uxtbls	r2, r2
 8022336:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8022338:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802233a:	449c      	add	ip, r3
 802233c:	e792      	b.n	8022264 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x208>
 802233e:	441d      	add	r5, r3
 8022340:	b22d      	sxth	r5, r5
 8022342:	e6c9      	b.n	80220d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7c>
 8022344:	f1ba 0f01 	cmp.w	sl, #1
 8022348:	f47f af02 	bne.w	8022150 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 802234c:	f1bb 0f01 	cmp.w	fp, #1
 8022350:	f47f aefe 	bne.w	8022150 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022354:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8022404 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>
 8022358:	f8db 0000 	ldr.w	r0, [fp]
 802235c:	6803      	ldr	r3, [r0, #0]
 802235e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022360:	4798      	blx	r3
 8022362:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8022366:	465a      	mov	r2, fp
 8022368:	d006      	beq.n	8022378 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 802236a:	f1b8 0f04 	cmp.w	r8, #4
 802236e:	d140      	bne.n	80223f2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8022370:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022372:	3300      	adds	r3, #0
 8022374:	bf18      	it	ne
 8022376:	2301      	movne	r3, #1
 8022378:	0580      	lsls	r0, r0, #22
 802237a:	d563      	bpl.n	8022444 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 802237c:	f1b8 0f08 	cmp.w	r8, #8
 8022380:	d160      	bne.n	8022444 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e8>
 8022382:	2b00      	cmp	r3, #0
 8022384:	bf0c      	ite	eq
 8022386:	f44f 7100 	moveq.w	r1, #512	; 0x200
 802238a:	f44f 7180 	movne.w	r1, #256	; 0x100
 802238e:	2e00      	cmp	r6, #0
 8022390:	f47f aede 	bne.w	8022150 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 8022394:	2f00      	cmp	r7, #0
 8022396:	f47f aedb 	bne.w	8022150 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 802239a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802239c:	9810      	ldr	r0, [sp, #64]	; 0x40
 802239e:	18eb      	adds	r3, r5, r3
 80223a0:	4283      	cmp	r3, r0
 80223a2:	f73f aed5 	bgt.w	8022150 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 80223a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80223a8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80223aa:	444b      	add	r3, r9
 80223ac:	4283      	cmp	r3, r0
 80223ae:	f73f aecf 	bgt.w	8022150 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 80223b2:	f1b8 0f08 	cmp.w	r8, #8
 80223b6:	6810      	ldr	r0, [r2, #0]
 80223b8:	f04f 0600 	mov.w	r6, #0
 80223bc:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 80223c0:	bf18      	it	ne
 80223c2:	3401      	addne	r4, #1
 80223c4:	6805      	ldr	r5, [r0, #0]
 80223c6:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 80223ca:	bf18      	it	ne
 80223cc:	f024 0401 	bicne.w	r4, r4, #1
 80223d0:	e9cd 1605 	strd	r1, r6, [sp, #20]
 80223d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80223d6:	bf18      	it	ne
 80223d8:	b2a4      	uxthne	r4, r4
 80223da:	9104      	str	r1, [sp, #16]
 80223dc:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80223de:	e9cd 4900 	strd	r4, r9, [sp]
 80223e2:	e9cd 4102 	strd	r4, r1, [sp, #8]
 80223e6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80223e8:	6d6c      	ldr	r4, [r5, #84]	; 0x54
 80223ea:	47a0      	blx	r4
 80223ec:	b019      	add	sp, #100	; 0x64
 80223ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223f2:	2300      	movs	r3, #0
 80223f4:	e7c0      	b.n	8022378 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31c>
 80223f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80223f8:	e6f7      	b.n	80221ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 80223fa:	9810      	ldr	r0, [sp, #64]	; 0x40
 80223fc:	e78d      	b.n	802231a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2be>
 80223fe:	bf00      	nop
 8022400:	2002b898 	.word	0x2002b898
 8022404:	2002b8a0 	.word	0x2002b8a0
 8022408:	2002b89a 	.word	0x2002b89a
 802240c:	00fff800 	.word	0x00fff800
 8022410:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022412:	b153      	cbz	r3, 802242a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 8022414:	441f      	add	r7, r3
 8022416:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022418:	b2bf      	uxth	r7, r7
 802241a:	eb03 03d7 	add.w	r3, r3, r7, lsr #3
 802241e:	f007 0707 	and.w	r7, r7, #7
 8022422:	781a      	ldrb	r2, [r3, #0]
 8022424:	9328      	str	r3, [sp, #160]	; 0xa0
 8022426:	413a      	asrs	r2, r7
 8022428:	b2d2      	uxtb	r2, r2
 802242a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802242c:	445b      	add	r3, fp
 802242e:	930a      	str	r3, [sp, #40]	; 0x28
 8022430:	e711      	b.n	8022256 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1fa>
 8022432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022434:	2b00      	cmp	r3, #0
 8022436:	d1d9      	bne.n	80223ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022438:	4b05      	ldr	r3, [pc, #20]	; (8022450 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f4>)
 802243a:	6818      	ldr	r0, [r3, #0]
 802243c:	6803      	ldr	r3, [r0, #0]
 802243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022440:	4798      	blx	r3
 8022442:	e7d3      	b.n	80223ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x390>
 8022444:	2b00      	cmp	r3, #0
 8022446:	f43f ae83 	beq.w	8022150 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf4>
 802244a:	f44f 7180 	mov.w	r1, #256	; 0x100
 802244e:	e79e      	b.n	802238e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x332>
 8022450:	2002b8a0 	.word	0x2002b8a0

08022454 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8022454:	b538      	push	{r3, r4, r5, lr}
 8022456:	4c15      	ldr	r4, [pc, #84]	; (80224ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8022458:	4605      	mov	r5, r0
 802245a:	7823      	ldrb	r3, [r4, #0]
 802245c:	f3bf 8f5b 	dmb	ish
 8022460:	07da      	lsls	r2, r3, #31
 8022462:	d40b      	bmi.n	802247c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8022464:	4620      	mov	r0, r4
 8022466:	f007 fcc7 	bl	8029df8 <__cxa_guard_acquire>
 802246a:	b138      	cbz	r0, 802247c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 802246c:	4620      	mov	r0, r4
 802246e:	f007 fccf 	bl	8029e10 <__cxa_guard_release>
 8022472:	4a0f      	ldr	r2, [pc, #60]	; (80224b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8022474:	490f      	ldr	r1, [pc, #60]	; (80224b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8022476:	4810      	ldr	r0, [pc, #64]	; (80224b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8022478:	f007 fcb7 	bl	8029dea <__aeabi_atexit>
 802247c:	4c0f      	ldr	r4, [pc, #60]	; (80224bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 802247e:	7823      	ldrb	r3, [r4, #0]
 8022480:	f3bf 8f5b 	dmb	ish
 8022484:	07db      	lsls	r3, r3, #31
 8022486:	d40b      	bmi.n	80224a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8022488:	4620      	mov	r0, r4
 802248a:	f007 fcb5 	bl	8029df8 <__cxa_guard_acquire>
 802248e:	b138      	cbz	r0, 80224a0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8022490:	4620      	mov	r0, r4
 8022492:	f007 fcbd 	bl	8029e10 <__cxa_guard_release>
 8022496:	4a06      	ldr	r2, [pc, #24]	; (80224b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8022498:	4909      	ldr	r1, [pc, #36]	; (80224c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 802249a:	480a      	ldr	r0, [pc, #40]	; (80224c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 802249c:	f007 fca5 	bl	8029dea <__aeabi_atexit>
 80224a0:	4b05      	ldr	r3, [pc, #20]	; (80224b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80224a2:	612b      	str	r3, [r5, #16]
 80224a4:	4b07      	ldr	r3, [pc, #28]	; (80224c4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80224a6:	616b      	str	r3, [r5, #20]
 80224a8:	bd38      	pop	{r3, r4, r5, pc}
 80224aa:	bf00      	nop
 80224ac:	2002b96c 	.word	0x2002b96c
 80224b0:	20000000 	.word	0x20000000
 80224b4:	08020641 	.word	0x08020641
 80224b8:	20000088 	.word	0x20000088
 80224bc:	2002b970 	.word	0x2002b970
 80224c0:	0802063f 	.word	0x0802063f
 80224c4:	2000008c 	.word	0x2000008c

080224c8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 80224c8:	b538      	push	{r3, r4, r5, lr}
 80224ca:	4c15      	ldr	r4, [pc, #84]	; (8022520 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 80224cc:	4605      	mov	r5, r0
 80224ce:	7823      	ldrb	r3, [r4, #0]
 80224d0:	f3bf 8f5b 	dmb	ish
 80224d4:	07da      	lsls	r2, r3, #31
 80224d6:	d40b      	bmi.n	80224f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80224d8:	4620      	mov	r0, r4
 80224da:	f007 fc8d 	bl	8029df8 <__cxa_guard_acquire>
 80224de:	b138      	cbz	r0, 80224f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80224e0:	4620      	mov	r0, r4
 80224e2:	f007 fc95 	bl	8029e10 <__cxa_guard_release>
 80224e6:	4a0f      	ldr	r2, [pc, #60]	; (8022524 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80224e8:	490f      	ldr	r1, [pc, #60]	; (8022528 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 80224ea:	4810      	ldr	r0, [pc, #64]	; (802252c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80224ec:	f007 fc7d 	bl	8029dea <__aeabi_atexit>
 80224f0:	4c0f      	ldr	r4, [pc, #60]	; (8022530 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 80224f2:	7823      	ldrb	r3, [r4, #0]
 80224f4:	f3bf 8f5b 	dmb	ish
 80224f8:	07db      	lsls	r3, r3, #31
 80224fa:	d40b      	bmi.n	8022514 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80224fc:	4620      	mov	r0, r4
 80224fe:	f007 fc7b 	bl	8029df8 <__cxa_guard_acquire>
 8022502:	b138      	cbz	r0, 8022514 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8022504:	4620      	mov	r0, r4
 8022506:	f007 fc83 	bl	8029e10 <__cxa_guard_release>
 802250a:	4a06      	ldr	r2, [pc, #24]	; (8022524 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 802250c:	4909      	ldr	r1, [pc, #36]	; (8022534 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 802250e:	480a      	ldr	r0, [pc, #40]	; (8022538 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8022510:	f007 fc6b 	bl	8029dea <__aeabi_atexit>
 8022514:	4b05      	ldr	r3, [pc, #20]	; (802252c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8022516:	60ab      	str	r3, [r5, #8]
 8022518:	4b07      	ldr	r3, [pc, #28]	; (8022538 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 802251a:	60eb      	str	r3, [r5, #12]
 802251c:	bd38      	pop	{r3, r4, r5, pc}
 802251e:	bf00      	nop
 8022520:	2002b944 	.word	0x2002b944
 8022524:	20000000 	.word	0x20000000
 8022528:	08020645 	.word	0x08020645
 802252c:	20000060 	.word	0x20000060
 8022530:	2002b948 	.word	0x2002b948
 8022534:	08020643 	.word	0x08020643
 8022538:	20000064 	.word	0x20000064

0802253c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 802253c:	b510      	push	{r4, lr}
 802253e:	4604      	mov	r4, r0
 8022540:	f7ff ff88 	bl	8022454 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8022544:	4620      	mov	r0, r4
 8022546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802254a:	f7ff bfbd 	b.w	80224c8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08022550 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8022550:	b538      	push	{r3, r4, r5, lr}
 8022552:	4c15      	ldr	r4, [pc, #84]	; (80225a8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8022554:	4605      	mov	r5, r0
 8022556:	7823      	ldrb	r3, [r4, #0]
 8022558:	f3bf 8f5b 	dmb	ish
 802255c:	07da      	lsls	r2, r3, #31
 802255e:	d40b      	bmi.n	8022578 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8022560:	4620      	mov	r0, r4
 8022562:	f007 fc49 	bl	8029df8 <__cxa_guard_acquire>
 8022566:	b138      	cbz	r0, 8022578 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8022568:	4620      	mov	r0, r4
 802256a:	f007 fc51 	bl	8029e10 <__cxa_guard_release>
 802256e:	4a0f      	ldr	r2, [pc, #60]	; (80225ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8022570:	490f      	ldr	r1, [pc, #60]	; (80225b0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8022572:	4810      	ldr	r0, [pc, #64]	; (80225b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8022574:	f007 fc39 	bl	8029dea <__aeabi_atexit>
 8022578:	4c0f      	ldr	r4, [pc, #60]	; (80225b8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 802257a:	7823      	ldrb	r3, [r4, #0]
 802257c:	f3bf 8f5b 	dmb	ish
 8022580:	07db      	lsls	r3, r3, #31
 8022582:	d40b      	bmi.n	802259c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8022584:	4620      	mov	r0, r4
 8022586:	f007 fc37 	bl	8029df8 <__cxa_guard_acquire>
 802258a:	b138      	cbz	r0, 802259c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 802258c:	4620      	mov	r0, r4
 802258e:	f007 fc3f 	bl	8029e10 <__cxa_guard_release>
 8022592:	4a06      	ldr	r2, [pc, #24]	; (80225ac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8022594:	4909      	ldr	r1, [pc, #36]	; (80225bc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8022596:	480a      	ldr	r0, [pc, #40]	; (80225c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8022598:	f007 fc27 	bl	8029dea <__aeabi_atexit>
 802259c:	4b05      	ldr	r3, [pc, #20]	; (80225b4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802259e:	622b      	str	r3, [r5, #32]
 80225a0:	4b07      	ldr	r3, [pc, #28]	; (80225c0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80225a2:	626b      	str	r3, [r5, #36]	; 0x24
 80225a4:	bd38      	pop	{r3, r4, r5, pc}
 80225a6:	bf00      	nop
 80225a8:	2002b974 	.word	0x2002b974
 80225ac:	20000000 	.word	0x20000000
 80225b0:	08020639 	.word	0x08020639
 80225b4:	20000090 	.word	0x20000090
 80225b8:	2002b978 	.word	0x2002b978
 80225bc:	08020637 	.word	0x08020637
 80225c0:	20000094 	.word	0x20000094

080225c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80225c4:	b538      	push	{r3, r4, r5, lr}
 80225c6:	4c15      	ldr	r4, [pc, #84]	; (802261c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80225c8:	4605      	mov	r5, r0
 80225ca:	7823      	ldrb	r3, [r4, #0]
 80225cc:	f3bf 8f5b 	dmb	ish
 80225d0:	07da      	lsls	r2, r3, #31
 80225d2:	d40b      	bmi.n	80225ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80225d4:	4620      	mov	r0, r4
 80225d6:	f007 fc0f 	bl	8029df8 <__cxa_guard_acquire>
 80225da:	b138      	cbz	r0, 80225ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80225dc:	4620      	mov	r0, r4
 80225de:	f007 fc17 	bl	8029e10 <__cxa_guard_release>
 80225e2:	4a0f      	ldr	r2, [pc, #60]	; (8022620 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80225e4:	490f      	ldr	r1, [pc, #60]	; (8022624 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80225e6:	4810      	ldr	r0, [pc, #64]	; (8022628 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80225e8:	f007 fbff 	bl	8029dea <__aeabi_atexit>
 80225ec:	4c0f      	ldr	r4, [pc, #60]	; (802262c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80225ee:	7823      	ldrb	r3, [r4, #0]
 80225f0:	f3bf 8f5b 	dmb	ish
 80225f4:	07db      	lsls	r3, r3, #31
 80225f6:	d40b      	bmi.n	8022610 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80225f8:	4620      	mov	r0, r4
 80225fa:	f007 fbfd 	bl	8029df8 <__cxa_guard_acquire>
 80225fe:	b138      	cbz	r0, 8022610 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8022600:	4620      	mov	r0, r4
 8022602:	f007 fc05 	bl	8029e10 <__cxa_guard_release>
 8022606:	4a06      	ldr	r2, [pc, #24]	; (8022620 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8022608:	4909      	ldr	r1, [pc, #36]	; (8022630 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 802260a:	480a      	ldr	r0, [pc, #40]	; (8022634 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 802260c:	f007 fbed 	bl	8029dea <__aeabi_atexit>
 8022610:	4b05      	ldr	r3, [pc, #20]	; (8022628 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8022612:	61ab      	str	r3, [r5, #24]
 8022614:	4b07      	ldr	r3, [pc, #28]	; (8022634 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8022616:	61eb      	str	r3, [r5, #28]
 8022618:	bd38      	pop	{r3, r4, r5, pc}
 802261a:	bf00      	nop
 802261c:	2002b94c 	.word	0x2002b94c
 8022620:	20000000 	.word	0x20000000
 8022624:	0802063d 	.word	0x0802063d
 8022628:	20000068 	.word	0x20000068
 802262c:	2002b950 	.word	0x2002b950
 8022630:	0802063b 	.word	0x0802063b
 8022634:	2000006c 	.word	0x2000006c

08022638 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8022638:	b510      	push	{r4, lr}
 802263a:	4604      	mov	r4, r0
 802263c:	f7ff ff88 	bl	8022550 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8022640:	4620      	mov	r0, r4
 8022642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022646:	f7ff bfbd 	b.w	80225c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0802264c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 802264c:	b538      	push	{r3, r4, r5, lr}
 802264e:	4c15      	ldr	r4, [pc, #84]	; (80226a4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8022650:	4605      	mov	r5, r0
 8022652:	7823      	ldrb	r3, [r4, #0]
 8022654:	f3bf 8f5b 	dmb	ish
 8022658:	07da      	lsls	r2, r3, #31
 802265a:	d40b      	bmi.n	8022674 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 802265c:	4620      	mov	r0, r4
 802265e:	f007 fbcb 	bl	8029df8 <__cxa_guard_acquire>
 8022662:	b138      	cbz	r0, 8022674 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8022664:	4620      	mov	r0, r4
 8022666:	f007 fbd3 	bl	8029e10 <__cxa_guard_release>
 802266a:	4a0f      	ldr	r2, [pc, #60]	; (80226a8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 802266c:	490f      	ldr	r1, [pc, #60]	; (80226ac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802266e:	4810      	ldr	r0, [pc, #64]	; (80226b0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8022670:	f007 fbbb 	bl	8029dea <__aeabi_atexit>
 8022674:	4c0f      	ldr	r4, [pc, #60]	; (80226b4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8022676:	7823      	ldrb	r3, [r4, #0]
 8022678:	f3bf 8f5b 	dmb	ish
 802267c:	07db      	lsls	r3, r3, #31
 802267e:	d40b      	bmi.n	8022698 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022680:	4620      	mov	r0, r4
 8022682:	f007 fbb9 	bl	8029df8 <__cxa_guard_acquire>
 8022686:	b138      	cbz	r0, 8022698 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022688:	4620      	mov	r0, r4
 802268a:	f007 fbc1 	bl	8029e10 <__cxa_guard_release>
 802268e:	4a06      	ldr	r2, [pc, #24]	; (80226a8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8022690:	4909      	ldr	r1, [pc, #36]	; (80226b8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8022692:	480a      	ldr	r0, [pc, #40]	; (80226bc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8022694:	f007 fba9 	bl	8029dea <__aeabi_atexit>
 8022698:	4b05      	ldr	r3, [pc, #20]	; (80226b0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802269a:	632b      	str	r3, [r5, #48]	; 0x30
 802269c:	4b07      	ldr	r3, [pc, #28]	; (80226bc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802269e:	636b      	str	r3, [r5, #52]	; 0x34
 80226a0:	bd38      	pop	{r3, r4, r5, pc}
 80226a2:	bf00      	nop
 80226a4:	2002b984 	.word	0x2002b984
 80226a8:	20000000 	.word	0x20000000
 80226ac:	08020631 	.word	0x08020631
 80226b0:	200000a0 	.word	0x200000a0
 80226b4:	2002b988 	.word	0x2002b988
 80226b8:	0802062f 	.word	0x0802062f
 80226bc:	200000a4 	.word	0x200000a4

080226c0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80226c0:	b538      	push	{r3, r4, r5, lr}
 80226c2:	4c15      	ldr	r4, [pc, #84]	; (8022718 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80226c4:	4605      	mov	r5, r0
 80226c6:	7823      	ldrb	r3, [r4, #0]
 80226c8:	f3bf 8f5b 	dmb	ish
 80226cc:	07da      	lsls	r2, r3, #31
 80226ce:	d40b      	bmi.n	80226e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80226d0:	4620      	mov	r0, r4
 80226d2:	f007 fb91 	bl	8029df8 <__cxa_guard_acquire>
 80226d6:	b138      	cbz	r0, 80226e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80226d8:	4620      	mov	r0, r4
 80226da:	f007 fb99 	bl	8029e10 <__cxa_guard_release>
 80226de:	4a0f      	ldr	r2, [pc, #60]	; (802271c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80226e0:	490f      	ldr	r1, [pc, #60]	; (8022720 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 80226e2:	4810      	ldr	r0, [pc, #64]	; (8022724 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80226e4:	f007 fb81 	bl	8029dea <__aeabi_atexit>
 80226e8:	4c0f      	ldr	r4, [pc, #60]	; (8022728 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 80226ea:	7823      	ldrb	r3, [r4, #0]
 80226ec:	f3bf 8f5b 	dmb	ish
 80226f0:	07db      	lsls	r3, r3, #31
 80226f2:	d40b      	bmi.n	802270c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80226f4:	4620      	mov	r0, r4
 80226f6:	f007 fb7f 	bl	8029df8 <__cxa_guard_acquire>
 80226fa:	b138      	cbz	r0, 802270c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 80226fc:	4620      	mov	r0, r4
 80226fe:	f007 fb87 	bl	8029e10 <__cxa_guard_release>
 8022702:	4a06      	ldr	r2, [pc, #24]	; (802271c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8022704:	4909      	ldr	r1, [pc, #36]	; (802272c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8022706:	480a      	ldr	r0, [pc, #40]	; (8022730 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8022708:	f007 fb6f 	bl	8029dea <__aeabi_atexit>
 802270c:	4b05      	ldr	r3, [pc, #20]	; (8022724 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 802270e:	62ab      	str	r3, [r5, #40]	; 0x28
 8022710:	4b07      	ldr	r3, [pc, #28]	; (8022730 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8022712:	62eb      	str	r3, [r5, #44]	; 0x2c
 8022714:	bd38      	pop	{r3, r4, r5, pc}
 8022716:	bf00      	nop
 8022718:	2002b954 	.word	0x2002b954
 802271c:	20000000 	.word	0x20000000
 8022720:	08020635 	.word	0x08020635
 8022724:	20000070 	.word	0x20000070
 8022728:	2002b958 	.word	0x2002b958
 802272c:	08020633 	.word	0x08020633
 8022730:	20000074 	.word	0x20000074

08022734 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8022734:	b510      	push	{r4, lr}
 8022736:	4604      	mov	r4, r0
 8022738:	f7ff ff88 	bl	802264c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 802273c:	4620      	mov	r0, r4
 802273e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022742:	f7ff bfbd 	b.w	80226c0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08022748 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 8022748:	b538      	push	{r3, r4, r5, lr}
 802274a:	4c15      	ldr	r4, [pc, #84]	; (80227a0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 802274c:	4605      	mov	r5, r0
 802274e:	7823      	ldrb	r3, [r4, #0]
 8022750:	f3bf 8f5b 	dmb	ish
 8022754:	07da      	lsls	r2, r3, #31
 8022756:	d40b      	bmi.n	8022770 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8022758:	4620      	mov	r0, r4
 802275a:	f007 fb4d 	bl	8029df8 <__cxa_guard_acquire>
 802275e:	b138      	cbz	r0, 8022770 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8022760:	4620      	mov	r0, r4
 8022762:	f007 fb55 	bl	8029e10 <__cxa_guard_release>
 8022766:	4a0f      	ldr	r2, [pc, #60]	; (80227a4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8022768:	490f      	ldr	r1, [pc, #60]	; (80227a8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 802276a:	4810      	ldr	r0, [pc, #64]	; (80227ac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 802276c:	f007 fb3d 	bl	8029dea <__aeabi_atexit>
 8022770:	4c0f      	ldr	r4, [pc, #60]	; (80227b0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8022772:	7823      	ldrb	r3, [r4, #0]
 8022774:	f3bf 8f5b 	dmb	ish
 8022778:	07db      	lsls	r3, r3, #31
 802277a:	d40b      	bmi.n	8022794 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 802277c:	4620      	mov	r0, r4
 802277e:	f007 fb3b 	bl	8029df8 <__cxa_guard_acquire>
 8022782:	b138      	cbz	r0, 8022794 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8022784:	4620      	mov	r0, r4
 8022786:	f007 fb43 	bl	8029e10 <__cxa_guard_release>
 802278a:	4a06      	ldr	r2, [pc, #24]	; (80227a4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 802278c:	4909      	ldr	r1, [pc, #36]	; (80227b4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 802278e:	480a      	ldr	r0, [pc, #40]	; (80227b8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8022790:	f007 fb2b 	bl	8029dea <__aeabi_atexit>
 8022794:	4b05      	ldr	r3, [pc, #20]	; (80227ac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8022796:	652b      	str	r3, [r5, #80]	; 0x50
 8022798:	4b07      	ldr	r3, [pc, #28]	; (80227b8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 802279a:	656b      	str	r3, [r5, #84]	; 0x54
 802279c:	bd38      	pop	{r3, r4, r5, pc}
 802279e:	bf00      	nop
 80227a0:	2002b98c 	.word	0x2002b98c
 80227a4:	20000000 	.word	0x20000000
 80227a8:	08020621 	.word	0x08020621
 80227ac:	200000a8 	.word	0x200000a8
 80227b0:	2002b990 	.word	0x2002b990
 80227b4:	0802061f 	.word	0x0802061f
 80227b8:	200000ac 	.word	0x200000ac

080227bc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 80227bc:	b538      	push	{r3, r4, r5, lr}
 80227be:	4c15      	ldr	r4, [pc, #84]	; (8022814 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 80227c0:	4605      	mov	r5, r0
 80227c2:	7823      	ldrb	r3, [r4, #0]
 80227c4:	f3bf 8f5b 	dmb	ish
 80227c8:	07da      	lsls	r2, r3, #31
 80227ca:	d40b      	bmi.n	80227e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80227cc:	4620      	mov	r0, r4
 80227ce:	f007 fb13 	bl	8029df8 <__cxa_guard_acquire>
 80227d2:	b138      	cbz	r0, 80227e4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80227d4:	4620      	mov	r0, r4
 80227d6:	f007 fb1b 	bl	8029e10 <__cxa_guard_release>
 80227da:	4a0f      	ldr	r2, [pc, #60]	; (8022818 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 80227dc:	490f      	ldr	r1, [pc, #60]	; (802281c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 80227de:	4810      	ldr	r0, [pc, #64]	; (8022820 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80227e0:	f007 fb03 	bl	8029dea <__aeabi_atexit>
 80227e4:	4c0f      	ldr	r4, [pc, #60]	; (8022824 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 80227e6:	7823      	ldrb	r3, [r4, #0]
 80227e8:	f3bf 8f5b 	dmb	ish
 80227ec:	07db      	lsls	r3, r3, #31
 80227ee:	d40b      	bmi.n	8022808 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80227f0:	4620      	mov	r0, r4
 80227f2:	f007 fb01 	bl	8029df8 <__cxa_guard_acquire>
 80227f6:	b138      	cbz	r0, 8022808 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 80227f8:	4620      	mov	r0, r4
 80227fa:	f007 fb09 	bl	8029e10 <__cxa_guard_release>
 80227fe:	4a06      	ldr	r2, [pc, #24]	; (8022818 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8022800:	4909      	ldr	r1, [pc, #36]	; (8022828 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8022802:	480a      	ldr	r0, [pc, #40]	; (802282c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8022804:	f007 faf1 	bl	8029dea <__aeabi_atexit>
 8022808:	4b05      	ldr	r3, [pc, #20]	; (8022820 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 802280a:	64ab      	str	r3, [r5, #72]	; 0x48
 802280c:	4b07      	ldr	r3, [pc, #28]	; (802282c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 802280e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8022810:	bd38      	pop	{r3, r4, r5, pc}
 8022812:	bf00      	nop
 8022814:	2002b994 	.word	0x2002b994
 8022818:	20000000 	.word	0x20000000
 802281c:	08020625 	.word	0x08020625
 8022820:	200000b0 	.word	0x200000b0
 8022824:	2002b998 	.word	0x2002b998
 8022828:	08020623 	.word	0x08020623
 802282c:	200000b4 	.word	0x200000b4

08022830 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8022830:	b538      	push	{r3, r4, r5, lr}
 8022832:	4c15      	ldr	r4, [pc, #84]	; (8022888 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8022834:	4605      	mov	r5, r0
 8022836:	7823      	ldrb	r3, [r4, #0]
 8022838:	f3bf 8f5b 	dmb	ish
 802283c:	07da      	lsls	r2, r3, #31
 802283e:	d40b      	bmi.n	8022858 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8022840:	4620      	mov	r0, r4
 8022842:	f007 fad9 	bl	8029df8 <__cxa_guard_acquire>
 8022846:	b138      	cbz	r0, 8022858 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8022848:	4620      	mov	r0, r4
 802284a:	f007 fae1 	bl	8029e10 <__cxa_guard_release>
 802284e:	4a0f      	ldr	r2, [pc, #60]	; (802288c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8022850:	490f      	ldr	r1, [pc, #60]	; (8022890 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8022852:	4810      	ldr	r0, [pc, #64]	; (8022894 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8022854:	f007 fac9 	bl	8029dea <__aeabi_atexit>
 8022858:	4c0f      	ldr	r4, [pc, #60]	; (8022898 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 802285a:	7823      	ldrb	r3, [r4, #0]
 802285c:	f3bf 8f5b 	dmb	ish
 8022860:	07db      	lsls	r3, r3, #31
 8022862:	d40b      	bmi.n	802287c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8022864:	4620      	mov	r0, r4
 8022866:	f007 fac7 	bl	8029df8 <__cxa_guard_acquire>
 802286a:	b138      	cbz	r0, 802287c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 802286c:	4620      	mov	r0, r4
 802286e:	f007 facf 	bl	8029e10 <__cxa_guard_release>
 8022872:	4a06      	ldr	r2, [pc, #24]	; (802288c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8022874:	4909      	ldr	r1, [pc, #36]	; (802289c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8022876:	480a      	ldr	r0, [pc, #40]	; (80228a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8022878:	f007 fab7 	bl	8029dea <__aeabi_atexit>
 802287c:	4b05      	ldr	r3, [pc, #20]	; (8022894 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 802287e:	642b      	str	r3, [r5, #64]	; 0x40
 8022880:	4b07      	ldr	r3, [pc, #28]	; (80228a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8022882:	646b      	str	r3, [r5, #68]	; 0x44
 8022884:	bd38      	pop	{r3, r4, r5, pc}
 8022886:	bf00      	nop
 8022888:	2002b95c 	.word	0x2002b95c
 802288c:	20000000 	.word	0x20000000
 8022890:	08020629 	.word	0x08020629
 8022894:	20000078 	.word	0x20000078
 8022898:	2002b960 	.word	0x2002b960
 802289c:	08020627 	.word	0x08020627
 80228a0:	2000007c 	.word	0x2000007c

080228a4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 80228a4:	b538      	push	{r3, r4, r5, lr}
 80228a6:	4c15      	ldr	r4, [pc, #84]	; (80228fc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80228a8:	4605      	mov	r5, r0
 80228aa:	7823      	ldrb	r3, [r4, #0]
 80228ac:	f3bf 8f5b 	dmb	ish
 80228b0:	07da      	lsls	r2, r3, #31
 80228b2:	d40b      	bmi.n	80228cc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80228b4:	4620      	mov	r0, r4
 80228b6:	f007 fa9f 	bl	8029df8 <__cxa_guard_acquire>
 80228ba:	b138      	cbz	r0, 80228cc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80228bc:	4620      	mov	r0, r4
 80228be:	f007 faa7 	bl	8029e10 <__cxa_guard_release>
 80228c2:	4a0f      	ldr	r2, [pc, #60]	; (8022900 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80228c4:	490f      	ldr	r1, [pc, #60]	; (8022904 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 80228c6:	4810      	ldr	r0, [pc, #64]	; (8022908 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80228c8:	f007 fa8f 	bl	8029dea <__aeabi_atexit>
 80228cc:	4c0f      	ldr	r4, [pc, #60]	; (802290c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 80228ce:	7823      	ldrb	r3, [r4, #0]
 80228d0:	f3bf 8f5b 	dmb	ish
 80228d4:	07db      	lsls	r3, r3, #31
 80228d6:	d40b      	bmi.n	80228f0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80228d8:	4620      	mov	r0, r4
 80228da:	f007 fa8d 	bl	8029df8 <__cxa_guard_acquire>
 80228de:	b138      	cbz	r0, 80228f0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80228e0:	4620      	mov	r0, r4
 80228e2:	f007 fa95 	bl	8029e10 <__cxa_guard_release>
 80228e6:	4a06      	ldr	r2, [pc, #24]	; (8022900 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80228e8:	4909      	ldr	r1, [pc, #36]	; (8022910 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 80228ea:	480a      	ldr	r0, [pc, #40]	; (8022914 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80228ec:	f007 fa7d 	bl	8029dea <__aeabi_atexit>
 80228f0:	4b05      	ldr	r3, [pc, #20]	; (8022908 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80228f2:	63ab      	str	r3, [r5, #56]	; 0x38
 80228f4:	4b07      	ldr	r3, [pc, #28]	; (8022914 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 80228f6:	63eb      	str	r3, [r5, #60]	; 0x3c
 80228f8:	bd38      	pop	{r3, r4, r5, pc}
 80228fa:	bf00      	nop
 80228fc:	2002b97c 	.word	0x2002b97c
 8022900:	20000000 	.word	0x20000000
 8022904:	0802062d 	.word	0x0802062d
 8022908:	20000098 	.word	0x20000098
 802290c:	2002b980 	.word	0x2002b980
 8022910:	0802062b 	.word	0x0802062b
 8022914:	2000009c 	.word	0x2000009c

08022918 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8022918:	b510      	push	{r4, lr}
 802291a:	4604      	mov	r4, r0
 802291c:	f7ff ff14 	bl	8022748 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8022920:	4620      	mov	r0, r4
 8022922:	f7ff ff85 	bl	8022830 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 8022926:	4620      	mov	r0, r4
 8022928:	f7ff ff48 	bl	80227bc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 802292c:	4620      	mov	r0, r4
 802292e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022932:	f7ff bfb7 	b.w	80228a4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08022938 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8022938:	b538      	push	{r3, r4, r5, lr}
 802293a:	4c15      	ldr	r4, [pc, #84]	; (8022990 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 802293c:	4605      	mov	r5, r0
 802293e:	7823      	ldrb	r3, [r4, #0]
 8022940:	f3bf 8f5b 	dmb	ish
 8022944:	07da      	lsls	r2, r3, #31
 8022946:	d40b      	bmi.n	8022960 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8022948:	4620      	mov	r0, r4
 802294a:	f007 fa55 	bl	8029df8 <__cxa_guard_acquire>
 802294e:	b138      	cbz	r0, 8022960 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8022950:	4620      	mov	r0, r4
 8022952:	f007 fa5d 	bl	8029e10 <__cxa_guard_release>
 8022956:	4a0f      	ldr	r2, [pc, #60]	; (8022994 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8022958:	490f      	ldr	r1, [pc, #60]	; (8022998 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 802295a:	4810      	ldr	r0, [pc, #64]	; (802299c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 802295c:	f007 fa45 	bl	8029dea <__aeabi_atexit>
 8022960:	4c0f      	ldr	r4, [pc, #60]	; (80229a0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8022962:	7823      	ldrb	r3, [r4, #0]
 8022964:	f3bf 8f5b 	dmb	ish
 8022968:	07db      	lsls	r3, r3, #31
 802296a:	d40b      	bmi.n	8022984 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 802296c:	4620      	mov	r0, r4
 802296e:	f007 fa43 	bl	8029df8 <__cxa_guard_acquire>
 8022972:	b138      	cbz	r0, 8022984 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8022974:	4620      	mov	r0, r4
 8022976:	f007 fa4b 	bl	8029e10 <__cxa_guard_release>
 802297a:	4a06      	ldr	r2, [pc, #24]	; (8022994 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 802297c:	4909      	ldr	r1, [pc, #36]	; (80229a4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802297e:	480a      	ldr	r0, [pc, #40]	; (80229a8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8022980:	f007 fa33 	bl	8029dea <__aeabi_atexit>
 8022984:	4b05      	ldr	r3, [pc, #20]	; (802299c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8022986:	662b      	str	r3, [r5, #96]	; 0x60
 8022988:	4b07      	ldr	r3, [pc, #28]	; (80229a8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802298a:	666b      	str	r3, [r5, #100]	; 0x64
 802298c:	bd38      	pop	{r3, r4, r5, pc}
 802298e:	bf00      	nop
 8022990:	2002b964 	.word	0x2002b964
 8022994:	20000000 	.word	0x20000000
 8022998:	08020619 	.word	0x08020619
 802299c:	20000080 	.word	0x20000080
 80229a0:	2002b968 	.word	0x2002b968
 80229a4:	08020617 	.word	0x08020617
 80229a8:	20000084 	.word	0x20000084

080229ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 80229ac:	b538      	push	{r3, r4, r5, lr}
 80229ae:	4c15      	ldr	r4, [pc, #84]	; (8022a04 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 80229b0:	4605      	mov	r5, r0
 80229b2:	7823      	ldrb	r3, [r4, #0]
 80229b4:	f3bf 8f5b 	dmb	ish
 80229b8:	07da      	lsls	r2, r3, #31
 80229ba:	d40b      	bmi.n	80229d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80229bc:	4620      	mov	r0, r4
 80229be:	f007 fa1b 	bl	8029df8 <__cxa_guard_acquire>
 80229c2:	b138      	cbz	r0, 80229d4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80229c4:	4620      	mov	r0, r4
 80229c6:	f007 fa23 	bl	8029e10 <__cxa_guard_release>
 80229ca:	4a0f      	ldr	r2, [pc, #60]	; (8022a08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80229cc:	490f      	ldr	r1, [pc, #60]	; (8022a0c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80229ce:	4810      	ldr	r0, [pc, #64]	; (8022a10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80229d0:	f007 fa0b 	bl	8029dea <__aeabi_atexit>
 80229d4:	4c0f      	ldr	r4, [pc, #60]	; (8022a14 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80229d6:	7823      	ldrb	r3, [r4, #0]
 80229d8:	f3bf 8f5b 	dmb	ish
 80229dc:	07db      	lsls	r3, r3, #31
 80229de:	d40b      	bmi.n	80229f8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80229e0:	4620      	mov	r0, r4
 80229e2:	f007 fa09 	bl	8029df8 <__cxa_guard_acquire>
 80229e6:	b138      	cbz	r0, 80229f8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 80229e8:	4620      	mov	r0, r4
 80229ea:	f007 fa11 	bl	8029e10 <__cxa_guard_release>
 80229ee:	4a06      	ldr	r2, [pc, #24]	; (8022a08 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80229f0:	4909      	ldr	r1, [pc, #36]	; (8022a18 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 80229f2:	480a      	ldr	r0, [pc, #40]	; (8022a1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80229f4:	f007 f9f9 	bl	8029dea <__aeabi_atexit>
 80229f8:	4b05      	ldr	r3, [pc, #20]	; (8022a10 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80229fa:	65ab      	str	r3, [r5, #88]	; 0x58
 80229fc:	4b07      	ldr	r3, [pc, #28]	; (8022a1c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80229fe:	65eb      	str	r3, [r5, #92]	; 0x5c
 8022a00:	bd38      	pop	{r3, r4, r5, pc}
 8022a02:	bf00      	nop
 8022a04:	2002b93c 	.word	0x2002b93c
 8022a08:	20000000 	.word	0x20000000
 8022a0c:	0802061d 	.word	0x0802061d
 8022a10:	20000058 	.word	0x20000058
 8022a14:	2002b940 	.word	0x2002b940
 8022a18:	0802061b 	.word	0x0802061b
 8022a1c:	2000005c 	.word	0x2000005c

08022a20 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8022a20:	b510      	push	{r4, lr}
 8022a22:	4604      	mov	r4, r0
 8022a24:	f7ff ff88 	bl	8022938 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8022a28:	4620      	mov	r0, r4
 8022a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022a2e:	f7ff bfbd 	b.w	80229ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08022a34 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8022a34:	b538      	push	{r3, r4, r5, lr}
 8022a36:	4c15      	ldr	r4, [pc, #84]	; (8022a8c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8022a38:	4605      	mov	r5, r0
 8022a3a:	7823      	ldrb	r3, [r4, #0]
 8022a3c:	f3bf 8f5b 	dmb	ish
 8022a40:	07da      	lsls	r2, r3, #31
 8022a42:	d40b      	bmi.n	8022a5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8022a44:	4620      	mov	r0, r4
 8022a46:	f007 f9d7 	bl	8029df8 <__cxa_guard_acquire>
 8022a4a:	b138      	cbz	r0, 8022a5c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8022a4c:	4620      	mov	r0, r4
 8022a4e:	f007 f9df 	bl	8029e10 <__cxa_guard_release>
 8022a52:	4a0f      	ldr	r2, [pc, #60]	; (8022a90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8022a54:	490f      	ldr	r1, [pc, #60]	; (8022a94 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8022a56:	4810      	ldr	r0, [pc, #64]	; (8022a98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8022a58:	f007 f9c7 	bl	8029dea <__aeabi_atexit>
 8022a5c:	4c0f      	ldr	r4, [pc, #60]	; (8022a9c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8022a5e:	7823      	ldrb	r3, [r4, #0]
 8022a60:	f3bf 8f5b 	dmb	ish
 8022a64:	07db      	lsls	r3, r3, #31
 8022a66:	d40b      	bmi.n	8022a80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8022a68:	4620      	mov	r0, r4
 8022a6a:	f007 f9c5 	bl	8029df8 <__cxa_guard_acquire>
 8022a6e:	b138      	cbz	r0, 8022a80 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8022a70:	4620      	mov	r0, r4
 8022a72:	f007 f9cd 	bl	8029e10 <__cxa_guard_release>
 8022a76:	4a06      	ldr	r2, [pc, #24]	; (8022a90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8022a78:	4909      	ldr	r1, [pc, #36]	; (8022aa0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8022a7a:	480a      	ldr	r0, [pc, #40]	; (8022aa4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022a7c:	f007 f9b5 	bl	8029dea <__aeabi_atexit>
 8022a80:	4b05      	ldr	r3, [pc, #20]	; (8022a98 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8022a82:	672b      	str	r3, [r5, #112]	; 0x70
 8022a84:	4b07      	ldr	r3, [pc, #28]	; (8022aa4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022a86:	676b      	str	r3, [r5, #116]	; 0x74
 8022a88:	bd38      	pop	{r3, r4, r5, pc}
 8022a8a:	bf00      	nop
 8022a8c:	2002b934 	.word	0x2002b934
 8022a90:	20000000 	.word	0x20000000
 8022a94:	08020611 	.word	0x08020611
 8022a98:	20000050 	.word	0x20000050
 8022a9c:	2002b938 	.word	0x2002b938
 8022aa0:	0802060f 	.word	0x0802060f
 8022aa4:	20000054 	.word	0x20000054

08022aa8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8022aa8:	b538      	push	{r3, r4, r5, lr}
 8022aaa:	4c15      	ldr	r4, [pc, #84]	; (8022b00 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8022aac:	4605      	mov	r5, r0
 8022aae:	7823      	ldrb	r3, [r4, #0]
 8022ab0:	f3bf 8f5b 	dmb	ish
 8022ab4:	07da      	lsls	r2, r3, #31
 8022ab6:	d40b      	bmi.n	8022ad0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022ab8:	4620      	mov	r0, r4
 8022aba:	f007 f99d 	bl	8029df8 <__cxa_guard_acquire>
 8022abe:	b138      	cbz	r0, 8022ad0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022ac0:	4620      	mov	r0, r4
 8022ac2:	f007 f9a5 	bl	8029e10 <__cxa_guard_release>
 8022ac6:	4a0f      	ldr	r2, [pc, #60]	; (8022b04 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022ac8:	490f      	ldr	r1, [pc, #60]	; (8022b08 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8022aca:	4810      	ldr	r0, [pc, #64]	; (8022b0c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022acc:	f007 f98d 	bl	8029dea <__aeabi_atexit>
 8022ad0:	4c0f      	ldr	r4, [pc, #60]	; (8022b10 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8022ad2:	7823      	ldrb	r3, [r4, #0]
 8022ad4:	f3bf 8f5b 	dmb	ish
 8022ad8:	07db      	lsls	r3, r3, #31
 8022ada:	d40b      	bmi.n	8022af4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022adc:	4620      	mov	r0, r4
 8022ade:	f007 f98b 	bl	8029df8 <__cxa_guard_acquire>
 8022ae2:	b138      	cbz	r0, 8022af4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022ae4:	4620      	mov	r0, r4
 8022ae6:	f007 f993 	bl	8029e10 <__cxa_guard_release>
 8022aea:	4a06      	ldr	r2, [pc, #24]	; (8022b04 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022aec:	4909      	ldr	r1, [pc, #36]	; (8022b14 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8022aee:	480a      	ldr	r0, [pc, #40]	; (8022b18 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022af0:	f007 f97b 	bl	8029dea <__aeabi_atexit>
 8022af4:	4b05      	ldr	r3, [pc, #20]	; (8022b0c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022af6:	66ab      	str	r3, [r5, #104]	; 0x68
 8022af8:	4b07      	ldr	r3, [pc, #28]	; (8022b18 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022afa:	66eb      	str	r3, [r5, #108]	; 0x6c
 8022afc:	bd38      	pop	{r3, r4, r5, pc}
 8022afe:	bf00      	nop
 8022b00:	2002b92c 	.word	0x2002b92c
 8022b04:	20000000 	.word	0x20000000
 8022b08:	08020615 	.word	0x08020615
 8022b0c:	20000048 	.word	0x20000048
 8022b10:	2002b930 	.word	0x2002b930
 8022b14:	08020613 	.word	0x08020613
 8022b18:	2000004c 	.word	0x2000004c

08022b1c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8022b1c:	b510      	push	{r4, lr}
 8022b1e:	4604      	mov	r4, r0
 8022b20:	f7ff ff88 	bl	8022a34 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8022b24:	4620      	mov	r0, r4
 8022b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022b2a:	f7ff bfbd 	b.w	8022aa8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08022b2e <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8022b2e:	b510      	push	{r4, lr}
 8022b30:	4604      	mov	r4, r0
 8022b32:	f7ff fff3 	bl	8022b1c <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 8022b36:	4620      	mov	r0, r4
 8022b38:	f7ff ff72 	bl	8022a20 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8022b3c:	4620      	mov	r0, r4
 8022b3e:	f7ff fdf9 	bl	8022734 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8022b42:	4620      	mov	r0, r4
 8022b44:	f7ff fcfa 	bl	802253c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8022b48:	4620      	mov	r0, r4
 8022b4a:	f7ff fd75 	bl	8022638 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8022b4e:	4620      	mov	r0, r4
 8022b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022b54:	f7ff bee0 	b.w	8022918 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

08022b58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8022b58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b5c:	e9dd 4e0c 	ldrd	r4, lr, [sp, #48]	; 0x30
 8022b60:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8022b64:	f1be 0f00 	cmp.w	lr, #0
 8022b68:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 8022b6c:	fb0e 4708 	mla	r7, lr, r8, r4
 8022b70:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8022b74:	f89d c03c 	ldrb.w	ip, [sp, #60]	; 0x3c
 8022b78:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8022b7c:	eb02 0a07 	add.w	sl, r2, r7
 8022b80:	8808      	ldrh	r0, [r1, #0]
 8022b82:	db37      	blt.n	8022bf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8022b84:	45f3      	cmp	fp, lr
 8022b86:	dd35      	ble.n	8022bf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x9c>
 8022b88:	2c00      	cmp	r4, #0
 8022b8a:	db31      	blt.n	8022bf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8022b8c:	45a0      	cmp	r8, r4
 8022b8e:	dd2f      	ble.n	8022bf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x98>
 8022b90:	5dd2      	ldrb	r2, [r2, r7]
 8022b92:	f833 9012 	ldrh.w	r9, [r3, r2, lsl #1]
 8022b96:	1c62      	adds	r2, r4, #1
 8022b98:	d42f      	bmi.n	8022bfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8022b9a:	4590      	cmp	r8, r2
 8022b9c:	dd2d      	ble.n	8022bfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8022b9e:	b366      	cbz	r6, 8022bfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa2>
 8022ba0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022ba4:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8022ba8:	f11e 0e01 	adds.w	lr, lr, #1
 8022bac:	d429      	bmi.n	8022c02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8022bae:	45f3      	cmp	fp, lr
 8022bb0:	dd27      	ble.n	8022c02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xaa>
 8022bb2:	f1bc 0f00 	cmp.w	ip, #0
 8022bb6:	f000 80a1 	beq.w	8022cfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a4>
 8022bba:	2c00      	cmp	r4, #0
 8022bbc:	db1f      	blt.n	8022bfe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8022bbe:	45a0      	cmp	r8, r4
 8022bc0:	dd1d      	ble.n	8022bfe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8022bc2:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8022bc6:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 8022bca:	3401      	adds	r4, #1
 8022bcc:	d41c      	bmi.n	8022c08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8022bce:	45a0      	cmp	r8, r4
 8022bd0:	dd1a      	ble.n	8022c08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb0>
 8022bd2:	b1de      	cbz	r6, 8022c0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb4>
 8022bd4:	44d0      	add	r8, sl
 8022bd6:	f898 2001 	ldrb.w	r2, [r8, #1]
 8022bda:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8022bde:	2e0f      	cmp	r6, #15
 8022be0:	d915      	bls.n	8022c0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xb6>
 8022be2:	4b49      	ldr	r3, [pc, #292]	; (8022d08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b0>)
 8022be4:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8022be8:	4a48      	ldr	r2, [pc, #288]	; (8022d0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b4>)
 8022bea:	4849      	ldr	r0, [pc, #292]	; (8022d10 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1b8>)
 8022bec:	f007 f930 	bl	8029e50 <__assert_func>
 8022bf0:	4681      	mov	r9, r0
 8022bf2:	e7d0      	b.n	8022b96 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x3e>
 8022bf4:	4607      	mov	r7, r0
 8022bf6:	4681      	mov	r9, r0
 8022bf8:	e7d6      	b.n	8022ba8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8022bfa:	4607      	mov	r7, r0
 8022bfc:	e7d4      	b.n	8022ba8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x50>
 8022bfe:	4686      	mov	lr, r0
 8022c00:	e7e3      	b.n	8022bca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x72>
 8022c02:	4603      	mov	r3, r0
 8022c04:	4686      	mov	lr, r0
 8022c06:	e7ea      	b.n	8022bde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8022c08:	4603      	mov	r3, r0
 8022c0a:	e7e8      	b.n	8022bde <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x86>
 8022c0c:	4603      	mov	r3, r0
 8022c0e:	f1bc 0f0f 	cmp.w	ip, #15
 8022c12:	d8e6      	bhi.n	8022be2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8022c14:	fb16 f80c 	smulbb	r8, r6, ip
 8022c18:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8022c1c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8022c20:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8022c24:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022c28:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8022c2c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8022c30:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022c34:	ea44 0909 	orr.w	r9, r4, r9
 8022c38:	f1cc 0410 	rsb	r4, ip, #16
 8022c3c:	041a      	lsls	r2, r3, #16
 8022c3e:	ea4a 0707 	orr.w	r7, sl, r7
 8022c42:	1ba4      	subs	r4, r4, r6
 8022c44:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8022c48:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022c4c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022c50:	4377      	muls	r7, r6
 8022c52:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8022c56:	4313      	orrs	r3, r2
 8022c58:	ea4f 420e 	mov.w	r2, lr, lsl #16
 8022c5c:	fb04 7409 	mla	r4, r4, r9, r7
 8022c60:	ebc8 0c4c 	rsb	ip, r8, ip, lsl #1
 8022c64:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022c68:	b2af      	uxth	r7, r5
 8022c6a:	fb08 4303 	mla	r3, r8, r3, r4
 8022c6e:	f42e 64fc 	bic.w	r4, lr, #2016	; 0x7e0
 8022c72:	43ed      	mvns	r5, r5
 8022c74:	10c6      	asrs	r6, r0, #3
 8022c76:	4322      	orrs	r2, r4
 8022c78:	b2ed      	uxtb	r5, r5
 8022c7a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022c7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8022c82:	fb16 f605 	smulbb	r6, r6, r5
 8022c86:	0d53      	lsrs	r3, r2, #21
 8022c88:	0952      	lsrs	r2, r2, #5
 8022c8a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022c8e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022c92:	431a      	orrs	r2, r3
 8022c94:	b293      	uxth	r3, r2
 8022c96:	1202      	asrs	r2, r0, #8
 8022c98:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8022c9c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022ca0:	00dc      	lsls	r4, r3, #3
 8022ca2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022ca6:	fb12 f205 	smulbb	r2, r2, r5
 8022caa:	b2e4      	uxtb	r4, r4
 8022cac:	fb0c 2c07 	mla	ip, ip, r7, r2
 8022cb0:	10da      	asrs	r2, r3, #3
 8022cb2:	00c3      	lsls	r3, r0, #3
 8022cb4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022cb8:	fa1f fc8c 	uxth.w	ip, ip
 8022cbc:	b2db      	uxtb	r3, r3
 8022cbe:	fb02 6207 	mla	r2, r2, r7, r6
 8022cc2:	fb13 f305 	smulbb	r3, r3, r5
 8022cc6:	b296      	uxth	r6, r2
 8022cc8:	fb04 3307 	mla	r3, r4, r7, r3
 8022ccc:	b29a      	uxth	r2, r3
 8022cce:	f10c 0301 	add.w	r3, ip, #1
 8022cd2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022cd6:	1c53      	adds	r3, r2, #1
 8022cd8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022cdc:	1c72      	adds	r2, r6, #1
 8022cde:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022ce2:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8022ce6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022cea:	0952      	lsrs	r2, r2, #5
 8022cec:	ea43 030c 	orr.w	r3, r3, ip
 8022cf0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022cf4:	4313      	orrs	r3, r2
 8022cf6:	800b      	strh	r3, [r1, #0]
 8022cf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022cfc:	2e0f      	cmp	r6, #15
 8022cfe:	f63f af70 	bhi.w	8022be2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x8a>
 8022d02:	4603      	mov	r3, r0
 8022d04:	4686      	mov	lr, r0
 8022d06:	e785      	b.n	8022c14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xbc>
 8022d08:	08031892 	.word	0x08031892
 8022d0c:	08031f0b 	.word	0x08031f0b
 8022d10:	08031916 	.word	0x08031916

08022d14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d18:	ed2d 8b08 	vpush	{d8-d11}
 8022d1c:	b099      	sub	sp, #100	; 0x64
 8022d1e:	eeb0 aa40 	vmov.f32	s20, s0
 8022d22:	eef0 9a60 	vmov.f32	s19, s1
 8022d26:	9215      	str	r2, [sp, #84]	; 0x54
 8022d28:	eeb0 9a41 	vmov.f32	s18, s2
 8022d2c:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8022d2e:	eeb0 8a62 	vmov.f32	s16, s5
 8022d32:	9309      	str	r3, [sp, #36]	; 0x24
 8022d34:	eef0 8a43 	vmov.f32	s17, s6
 8022d38:	f89d 30cc 	ldrb.w	r3, [sp, #204]	; 0xcc
 8022d3c:	eef0 ba44 	vmov.f32	s23, s8
 8022d40:	9016      	str	r0, [sp, #88]	; 0x58
 8022d42:	eeb0 ba64 	vmov.f32	s22, s9
 8022d46:	930d      	str	r3, [sp, #52]	; 0x34
 8022d48:	eef0 aa45 	vmov.f32	s21, s10
 8022d4c:	6850      	ldr	r0, [r2, #4]
 8022d4e:	910c      	str	r1, [sp, #48]	; 0x30
 8022d50:	6812      	ldr	r2, [r2, #0]
 8022d52:	e9dd 1330 	ldrd	r1, r3, [sp, #192]	; 0xc0
 8022d56:	e9dd a52b 	ldrd	sl, r5, [sp, #172]	; 0xac
 8022d5a:	fb00 1303 	mla	r3, r0, r3, r1
 8022d5e:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8022d62:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022d64:	681b      	ldr	r3, [r3, #0]
 8022d66:	930b      	str	r3, [sp, #44]	; 0x2c
 8022d68:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022d6a:	685e      	ldr	r6, [r3, #4]
 8022d6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022d6e:	3604      	adds	r6, #4
 8022d70:	43db      	mvns	r3, r3
 8022d72:	b2db      	uxtb	r3, r3
 8022d74:	930a      	str	r3, [sp, #40]	; 0x28
 8022d76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022d78:	2b00      	cmp	r3, #0
 8022d7a:	dc03      	bgt.n	8022d84 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022d7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022d7e:	2b00      	cmp	r3, #0
 8022d80:	f340 8225 	ble.w	80231ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8022d84:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022d86:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022d8a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022d8e:	1e48      	subs	r0, r1, #1
 8022d90:	1e57      	subs	r7, r2, #1
 8022d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d94:	2b00      	cmp	r3, #0
 8022d96:	f340 80e3 	ble.w	8022f60 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24c>
 8022d9a:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8022d9e:	ea4f 4325 	mov.w	r3, r5, asr #16
 8022da2:	d406      	bmi.n	8022db2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8022da4:	4584      	cmp	ip, r0
 8022da6:	da04      	bge.n	8022db2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8022da8:	2b00      	cmp	r3, #0
 8022daa:	db02      	blt.n	8022db2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8022dac:	42bb      	cmp	r3, r7
 8022dae:	f2c0 80d8 	blt.w	8022f62 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8022db2:	f11c 0c01 	adds.w	ip, ip, #1
 8022db6:	f100 80c9 	bmi.w	8022f4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8022dba:	4561      	cmp	r1, ip
 8022dbc:	f2c0 80c6 	blt.w	8022f4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8022dc0:	3301      	adds	r3, #1
 8022dc2:	f100 80c3 	bmi.w	8022f4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8022dc6:	429a      	cmp	r2, r3
 8022dc8:	f2c0 80c0 	blt.w	8022f4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8022dcc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8022dd0:	4647      	mov	r7, r8
 8022dd2:	f1bb 0f00 	cmp.w	fp, #0
 8022dd6:	f340 80e3 	ble.w	8022fa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8022dda:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8022ddc:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8022de0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8022de2:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8022de6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022dea:	ea5f 422a 	movs.w	r2, sl, asr #16
 8022dee:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022df2:	689b      	ldr	r3, [r3, #8]
 8022df4:	f100 8121 	bmi.w	802303a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8022df8:	f103 39ff 	add.w	r9, r3, #4294967295
 8022dfc:	454a      	cmp	r2, r9
 8022dfe:	f280 811c 	bge.w	802303a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8022e02:	f1bc 0f00 	cmp.w	ip, #0
 8022e06:	f2c0 8118 	blt.w	802303a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8022e0a:	f10e 39ff 	add.w	r9, lr, #4294967295
 8022e0e:	45cc      	cmp	ip, r9
 8022e10:	f280 8113 	bge.w	802303a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8022e14:	b21b      	sxth	r3, r3
 8022e16:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022e18:	fb0c 2203 	mla	r2, ip, r3, r2
 8022e1c:	eb04 0902 	add.w	r9, r4, r2
 8022e20:	5ca2      	ldrb	r2, [r4, r2]
 8022e22:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8022e26:	2800      	cmp	r0, #0
 8022e28:	f000 80fe 	beq.w	8023028 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8022e2c:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022e30:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8022e34:	9211      	str	r2, [sp, #68]	; 0x44
 8022e36:	b151      	cbz	r1, 8022e4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8022e38:	eb09 0203 	add.w	r2, r9, r3
 8022e3c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022e40:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022e44:	930f      	str	r3, [sp, #60]	; 0x3c
 8022e46:	7853      	ldrb	r3, [r2, #1]
 8022e48:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022e4c:	9312      	str	r3, [sp, #72]	; 0x48
 8022e4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022e50:	fb10 f201 	smulbb	r2, r0, r1
 8022e54:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022e56:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022e5a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022e5e:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8022e62:	10d2      	asrs	r2, r2, #3
 8022e64:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022e68:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8022e6c:	ea4c 0c03 	orr.w	ip, ip, r3
 8022e70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022e72:	041b      	lsls	r3, r3, #16
 8022e74:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022e78:	4323      	orrs	r3, r4
 8022e7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022e7c:	4353      	muls	r3, r2
 8022e7e:	fb09 330c 	mla	r3, r9, ip, r3
 8022e82:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8022e86:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022e8a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022e8e:	ea4c 0e0e 	orr.w	lr, ip, lr
 8022e92:	f1c1 0c10 	rsb	ip, r1, #16
 8022e96:	ebac 0c00 	sub.w	ip, ip, r0
 8022e9a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8022e9e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8022ea2:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8022ea6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022ea8:	0418      	lsls	r0, r3, #16
 8022eaa:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022eae:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022eb2:	4318      	orrs	r0, r3
 8022eb4:	fb02 c200 	mla	r2, r2, r0, ip
 8022eb8:	8838      	ldrh	r0, [r7, #0]
 8022eba:	0d53      	lsrs	r3, r2, #21
 8022ebc:	0952      	lsrs	r2, r2, #5
 8022ebe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022ec2:	1201      	asrs	r1, r0, #8
 8022ec4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022ec8:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8022ecc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022ed0:	00c0      	lsls	r0, r0, #3
 8022ed2:	431a      	orrs	r2, r3
 8022ed4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8022ed8:	fb11 f104 	smulbb	r1, r1, r4
 8022edc:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8022ee0:	b292      	uxth	r2, r2
 8022ee2:	fb1e fe04 	smulbb	lr, lr, r4
 8022ee6:	b2c0      	uxtb	r0, r0
 8022ee8:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8022eec:	fb10 f004 	smulbb	r0, r0, r4
 8022ef0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022ef4:	fb0c 1c03 	mla	ip, ip, r3, r1
 8022ef8:	10d1      	asrs	r1, r2, #3
 8022efa:	00d2      	lsls	r2, r2, #3
 8022efc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022f00:	fa1f fc8c 	uxth.w	ip, ip
 8022f04:	b2d2      	uxtb	r2, r2
 8022f06:	fb01 e103 	mla	r1, r1, r3, lr
 8022f0a:	fb02 0303 	mla	r3, r2, r3, r0
 8022f0e:	b289      	uxth	r1, r1
 8022f10:	b29a      	uxth	r2, r3
 8022f12:	f10c 0301 	add.w	r3, ip, #1
 8022f16:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022f1a:	1c53      	adds	r3, r2, #1
 8022f1c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022f20:	1c4a      	adds	r2, r1, #1
 8022f22:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022f26:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022f2a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022f2e:	0949      	lsrs	r1, r1, #5
 8022f30:	ea43 030c 	orr.w	r3, r3, ip
 8022f34:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022f38:	430b      	orrs	r3, r1
 8022f3a:	803b      	strh	r3, [r7, #0]
 8022f3c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022f3e:	3702      	adds	r7, #2
 8022f40:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022f44:	449a      	add	sl, r3
 8022f46:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022f48:	441d      	add	r5, r3
 8022f4a:	e742      	b.n	8022dd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8022f4c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8022f4e:	f108 0802 	add.w	r8, r8, #2
 8022f52:	449a      	add	sl, r3
 8022f54:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8022f56:	441d      	add	r5, r3
 8022f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f5a:	3b01      	subs	r3, #1
 8022f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8022f5e:	e718      	b.n	8022d92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8022f60:	d023      	beq.n	8022faa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8022f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022f64:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8022f66:	3b01      	subs	r3, #1
 8022f68:	fb00 a003 	mla	r0, r0, r3, sl
 8022f6c:	1400      	asrs	r0, r0, #16
 8022f6e:	f53f af2d 	bmi.w	8022dcc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8022f72:	3901      	subs	r1, #1
 8022f74:	4288      	cmp	r0, r1
 8022f76:	f6bf af29 	bge.w	8022dcc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8022f7a:	992e      	ldr	r1, [sp, #184]	; 0xb8
 8022f7c:	fb01 5303 	mla	r3, r1, r3, r5
 8022f80:	141b      	asrs	r3, r3, #16
 8022f82:	f53f af23 	bmi.w	8022dcc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8022f86:	3a01      	subs	r2, #1
 8022f88:	4293      	cmp	r3, r2
 8022f8a:	f6bf af1f 	bge.w	8022dcc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8022f8e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8022f92:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8022f96:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8022f9a:	f1be 0f00 	cmp.w	lr, #0
 8022f9e:	dc6c      	bgt.n	802307a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8022fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022fa2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022fa6:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8022faa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022fac:	2b00      	cmp	r3, #0
 8022fae:	f340 810e 	ble.w	80231ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ba>
 8022fb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022fb6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022fb8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8022fbc:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8022fc0:	eef0 6a48 	vmov.f32	s13, s16
 8022fc4:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8022fc8:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8022fcc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022fd0:	ee16 aa90 	vmov	sl, s13
 8022fd4:	eef0 6a68 	vmov.f32	s13, s17
 8022fd8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022fdc:	ee16 5a90 	vmov	r5, s13
 8022fe0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8022fe4:	ee69 7a27 	vmul.f32	s15, s18, s15
 8022fe8:	ee37 8a48 	vsub.f32	s16, s14, s16
 8022fec:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8022ff0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8022ff4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8022ff8:	ee18 2a10 	vmov	r2, s16
 8022ffc:	eeb0 8a47 	vmov.f32	s16, s14
 8023000:	fb92 f3f3 	sdiv	r3, r2, r3
 8023004:	ee18 2a90 	vmov	r2, s17
 8023008:	932d      	str	r3, [sp, #180]	; 0xb4
 802300a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802300c:	eef0 8a67 	vmov.f32	s17, s15
 8023010:	fb92 f3f3 	sdiv	r3, r2, r3
 8023014:	932e      	str	r3, [sp, #184]	; 0xb8
 8023016:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023018:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802301a:	3b01      	subs	r3, #1
 802301c:	930c      	str	r3, [sp, #48]	; 0x30
 802301e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023020:	bf08      	it	eq
 8023022:	4613      	moveq	r3, r2
 8023024:	9309      	str	r3, [sp, #36]	; 0x24
 8023026:	e6a6      	b.n	8022d76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8023028:	2900      	cmp	r1, #0
 802302a:	f43f af10 	beq.w	8022e4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802302e:	f819 3003 	ldrb.w	r3, [r9, r3]
 8023032:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8023036:	930f      	str	r3, [sp, #60]	; 0x3c
 8023038:	e709      	b.n	8022e4e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 802303a:	f112 0901 	adds.w	r9, r2, #1
 802303e:	f53f af7d 	bmi.w	8022f3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023042:	454b      	cmp	r3, r9
 8023044:	f6ff af7a 	blt.w	8022f3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023048:	f11c 0901 	adds.w	r9, ip, #1
 802304c:	f53f af76 	bmi.w	8022f3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023050:	45ce      	cmp	lr, r9
 8023052:	f6ff af73 	blt.w	8022f3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8023056:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023058:	b21b      	sxth	r3, r3
 802305a:	9202      	str	r2, [sp, #8]
 802305c:	fa0f f28e 	sxth.w	r2, lr
 8023060:	9300      	str	r3, [sp, #0]
 8023062:	4633      	mov	r3, r6
 8023064:	9201      	str	r2, [sp, #4]
 8023066:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023068:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802306c:	e9cd c003 	strd	ip, r0, [sp, #12]
 8023070:	4639      	mov	r1, r7
 8023072:	9816      	ldr	r0, [sp, #88]	; 0x58
 8023074:	f7ff fd70 	bl	8022b58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8023078:	e760      	b.n	8022f3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802307a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 802307c:	ea4f 422a 	mov.w	r2, sl, asr #16
 8023080:	1429      	asrs	r1, r5, #16
 8023082:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8023084:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8023088:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 802308c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023090:	fb03 2101 	mla	r1, r3, r1, r2
 8023094:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023096:	440a      	add	r2, r1
 8023098:	5c61      	ldrb	r1, [r4, r1]
 802309a:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 802309e:	f1bc 0f00 	cmp.w	ip, #0
 80230a2:	f000 808c 	beq.w	80231be <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 80230a6:	7857      	ldrb	r7, [r2, #1]
 80230a8:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 80230ac:	9413      	str	r4, [sp, #76]	; 0x4c
 80230ae:	b140      	cbz	r0, 80230c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80230b0:	18d7      	adds	r7, r2, r3
 80230b2:	5cd3      	ldrb	r3, [r2, r3]
 80230b4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80230b8:	9310      	str	r3, [sp, #64]	; 0x40
 80230ba:	787b      	ldrb	r3, [r7, #1]
 80230bc:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80230c0:	9314      	str	r3, [sp, #80]	; 0x50
 80230c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80230c4:	fb1c f200 	smulbb	r2, ip, r0
 80230c8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80230ca:	f10e 3eff 	add.w	lr, lr, #4294967295
 80230ce:	041f      	lsls	r7, r3, #16
 80230d0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80230d4:	10d2      	asrs	r2, r2, #3
 80230d6:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 80230da:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 80230de:	431f      	orrs	r7, r3
 80230e0:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 80230e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80230e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80230e8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80230ea:	041b      	lsls	r3, r3, #16
 80230ec:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80230f0:	ea43 030b 	orr.w	r3, r3, fp
 80230f4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80230f8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80230fc:	4353      	muls	r3, r2
 80230fe:	fb04 3707 	mla	r7, r4, r7, r3
 8023102:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8023106:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8023108:	ea43 0b01 	orr.w	fp, r3, r1
 802310c:	f1c0 0110 	rsb	r1, r0, #16
 8023110:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023112:	eba1 0c0c 	sub.w	ip, r1, ip
 8023116:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802311a:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 802311e:	fb0c 770b 	mla	r7, ip, fp, r7
 8023122:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023126:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 802312a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802312e:	ea4c 0c0b 	orr.w	ip, ip, fp
 8023132:	fb02 770c 	mla	r7, r2, ip, r7
 8023136:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023138:	0d79      	lsrs	r1, r7, #21
 802313a:	8812      	ldrh	r2, [r2, #0]
 802313c:	097f      	lsrs	r7, r7, #5
 802313e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023142:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023146:	430f      	orrs	r7, r1
 8023148:	1211      	asrs	r1, r2, #8
 802314a:	b2bb      	uxth	r3, r7
 802314c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023150:	10d7      	asrs	r7, r2, #3
 8023152:	fb11 f104 	smulbb	r1, r1, r4
 8023156:	1218      	asrs	r0, r3, #8
 8023158:	00d2      	lsls	r2, r2, #3
 802315a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802315e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023162:	fb17 f704 	smulbb	r7, r7, r4
 8023166:	b2d2      	uxtb	r2, r2
 8023168:	fb00 1009 	mla	r0, r0, r9, r1
 802316c:	10d9      	asrs	r1, r3, #3
 802316e:	fb12 f204 	smulbb	r2, r2, r4
 8023172:	00db      	lsls	r3, r3, #3
 8023174:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8023178:	b280      	uxth	r0, r0
 802317a:	b2db      	uxtb	r3, r3
 802317c:	fb01 7109 	mla	r1, r1, r9, r7
 8023180:	fb03 2309 	mla	r3, r3, r9, r2
 8023184:	1c42      	adds	r2, r0, #1
 8023186:	b289      	uxth	r1, r1
 8023188:	b29b      	uxth	r3, r3
 802318a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802318e:	1c4f      	adds	r7, r1, #1
 8023190:	1c5a      	adds	r2, r3, #1
 8023192:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8023196:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802319a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802319e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80231a0:	0949      	lsrs	r1, r1, #5
 80231a2:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80231a6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80231aa:	4310      	orrs	r0, r2
 80231ac:	4308      	orrs	r0, r1
 80231ae:	f823 0b02 	strh.w	r0, [r3], #2
 80231b2:	930e      	str	r3, [sp, #56]	; 0x38
 80231b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80231b6:	449a      	add	sl, r3
 80231b8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80231ba:	441d      	add	r5, r3
 80231bc:	e6ed      	b.n	8022f9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 80231be:	2800      	cmp	r0, #0
 80231c0:	f43f af7f 	beq.w	80230c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80231c4:	5cd3      	ldrb	r3, [r2, r3]
 80231c6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80231ca:	9310      	str	r3, [sp, #64]	; 0x40
 80231cc:	e779      	b.n	80230c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80231ce:	b019      	add	sp, #100	; 0x64
 80231d0:	ecbd 8b08 	vpop	{d8-d11}
 80231d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080231d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 80231d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80231dc:	e9dd 560a 	ldrd	r5, r6, [sp, #40]	; 0x28
 80231e0:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 80231e4:	2e00      	cmp	r6, #0
 80231e6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80231ea:	fb06 570e 	mla	r7, r6, lr, r5
 80231ee:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 80231f2:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80231f6:	eb02 0807 	add.w	r8, r2, r7
 80231fa:	8808      	ldrh	r0, [r1, #0]
 80231fc:	db38      	blt.n	8023270 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 80231fe:	45b1      	cmp	r9, r6
 8023200:	dd36      	ble.n	8023270 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x98>
 8023202:	2d00      	cmp	r5, #0
 8023204:	db32      	blt.n	802326c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 8023206:	45ae      	cmp	lr, r5
 8023208:	dd30      	ble.n	802326c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x94>
 802320a:	5dd2      	ldrb	r2, [r2, r7]
 802320c:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8023210:	1c6a      	adds	r2, r5, #1
 8023212:	d430      	bmi.n	8023276 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8023214:	4596      	cmp	lr, r2
 8023216:	dd2e      	ble.n	8023276 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 8023218:	b36c      	cbz	r4, 8023276 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x9e>
 802321a:	f898 2001 	ldrb.w	r2, [r8, #1]
 802321e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8023222:	3601      	adds	r6, #1
 8023224:	d42b      	bmi.n	802327e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 8023226:	45b1      	cmp	r9, r6
 8023228:	dd29      	ble.n	802327e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa6>
 802322a:	f1bc 0f00 	cmp.w	ip, #0
 802322e:	d028      	beq.n	8023282 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xaa>
 8023230:	2d00      	cmp	r5, #0
 8023232:	db22      	blt.n	802327a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8023234:	45ae      	cmp	lr, r5
 8023236:	dd20      	ble.n	802327a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xa2>
 8023238:	f818 600e 	ldrb.w	r6, [r8, lr]
 802323c:	f833 6016 	ldrh.w	r6, [r3, r6, lsl #1]
 8023240:	3501      	adds	r5, #1
 8023242:	d407      	bmi.n	8023254 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8023244:	45ae      	cmp	lr, r5
 8023246:	dd05      	ble.n	8023254 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8023248:	b134      	cbz	r4, 8023258 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802324a:	44c6      	add	lr, r8
 802324c:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8023250:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8023254:	2c0f      	cmp	r4, #15
 8023256:	d802      	bhi.n	802325e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8023258:	f1bc 0f0f 	cmp.w	ip, #15
 802325c:	d914      	bls.n	8023288 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xb0>
 802325e:	4b26      	ldr	r3, [pc, #152]	; (80232f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x120>)
 8023260:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8023264:	4a25      	ldr	r2, [pc, #148]	; (80232fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x124>)
 8023266:	4826      	ldr	r0, [pc, #152]	; (8023300 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x128>)
 8023268:	f006 fdf2 	bl	8029e50 <__assert_func>
 802326c:	4607      	mov	r7, r0
 802326e:	e7cf      	b.n	8023210 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x38>
 8023270:	4602      	mov	r2, r0
 8023272:	4607      	mov	r7, r0
 8023274:	e7d5      	b.n	8023222 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 8023276:	4602      	mov	r2, r0
 8023278:	e7d3      	b.n	8023222 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4a>
 802327a:	4606      	mov	r6, r0
 802327c:	e7e0      	b.n	8023240 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x68>
 802327e:	4606      	mov	r6, r0
 8023280:	e7e8      	b.n	8023254 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7c>
 8023282:	2c0f      	cmp	r4, #15
 8023284:	d8eb      	bhi.n	802325e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 8023286:	4606      	mov	r6, r0
 8023288:	fb14 f30c 	smulbb	r3, r4, ip
 802328c:	043d      	lsls	r5, r7, #16
 802328e:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8023292:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8023296:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 802329a:	10db      	asrs	r3, r3, #3
 802329c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80232a0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80232a4:	432f      	orrs	r7, r5
 80232a6:	f1cc 0510 	rsb	r5, ip, #16
 80232aa:	ea4e 0202 	orr.w	r2, lr, r2
 80232ae:	1b2d      	subs	r5, r5, r4
 80232b0:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 80232b4:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80232b8:	4354      	muls	r4, r2
 80232ba:	fb05 4507 	mla	r5, r5, r7, r4
 80232be:	0404      	lsls	r4, r0, #16
 80232c0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80232c4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 80232c8:	4320      	orrs	r0, r4
 80232ca:	fb03 5400 	mla	r4, r3, r0, r5
 80232ce:	0430      	lsls	r0, r6, #16
 80232d0:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 80232d4:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80232d8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80232dc:	4330      	orrs	r0, r6
 80232de:	fb03 4000 	mla	r0, r3, r0, r4
 80232e2:	0d43      	lsrs	r3, r0, #21
 80232e4:	0940      	lsrs	r0, r0, #5
 80232e6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80232ea:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80232ee:	4318      	orrs	r0, r3
 80232f0:	8008      	strh	r0, [r1, #0]
 80232f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80232f6:	bf00      	nop
 80232f8:	08031892 	.word	0x08031892
 80232fc:	08031f0b 	.word	0x08031f0b
 8023300:	08031916 	.word	0x08031916

08023304 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023308:	ed2d 8b0a 	vpush	{d8-d12}
 802330c:	b093      	sub	sp, #76	; 0x4c
 802330e:	eeb0 aa40 	vmov.f32	s20, s0
 8023312:	eef0 9a60 	vmov.f32	s19, s1
 8023316:	920f      	str	r2, [sp, #60]	; 0x3c
 8023318:	eeb0 9a41 	vmov.f32	s18, s2
 802331c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802331e:	eeb0 8a62 	vmov.f32	s16, s5
 8023322:	9010      	str	r0, [sp, #64]	; 0x40
 8023324:	eef0 8a43 	vmov.f32	s17, s6
 8023328:	6850      	ldr	r0, [r2, #4]
 802332a:	eeb0 ca44 	vmov.f32	s24, s8
 802332e:	9108      	str	r1, [sp, #32]
 8023330:	eef0 ba64 	vmov.f32	s23, s9
 8023334:	9306      	str	r3, [sp, #24]
 8023336:	eeb0 ba45 	vmov.f32	s22, s10
 802333a:	6812      	ldr	r2, [r2, #0]
 802333c:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 8023340:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8023344:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 8023348:	fb00 1303 	mla	r3, r0, r3, r1
 802334c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8023350:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023352:	681b      	ldr	r3, [r3, #0]
 8023354:	9307      	str	r3, [sp, #28]
 8023356:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023358:	685f      	ldr	r7, [r3, #4]
 802335a:	3704      	adds	r7, #4
 802335c:	9b08      	ldr	r3, [sp, #32]
 802335e:	2b00      	cmp	r3, #0
 8023360:	dc03      	bgt.n	802336a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8023362:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023364:	2b00      	cmp	r3, #0
 8023366:	f340 81b2 	ble.w	80236ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 802336a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802336c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023370:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023374:	1e48      	subs	r0, r1, #1
 8023376:	f102 3cff 	add.w	ip, r2, #4294967295
 802337a:	9b06      	ldr	r3, [sp, #24]
 802337c:	2b00      	cmp	r3, #0
 802337e:	f340 80a9 	ble.w	80234d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8023382:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023386:	ea4f 4326 	mov.w	r3, r6, asr #16
 802338a:	d406      	bmi.n	802339a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802338c:	4586      	cmp	lr, r0
 802338e:	da04      	bge.n	802339a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023390:	2b00      	cmp	r3, #0
 8023392:	db02      	blt.n	802339a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023394:	4563      	cmp	r3, ip
 8023396:	f2c0 809e 	blt.w	80234d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802339a:	f11e 0e01 	adds.w	lr, lr, #1
 802339e:	f100 808f 	bmi.w	80234c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80233a2:	4571      	cmp	r1, lr
 80233a4:	f2c0 808c 	blt.w	80234c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80233a8:	3301      	adds	r3, #1
 80233aa:	f100 8089 	bmi.w	80234c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80233ae:	429a      	cmp	r2, r3
 80233b0:	f2c0 8086 	blt.w	80234c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1bc>
 80233b4:	f8dd b018 	ldr.w	fp, [sp, #24]
 80233b8:	46c8      	mov	r8, r9
 80233ba:	f1bb 0f00 	cmp.w	fp, #0
 80233be:	f340 80a6 	ble.w	802350e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 80233c2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80233c4:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80233c8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80233ca:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80233ce:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80233d2:	1422      	asrs	r2, r4, #16
 80233d4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80233d8:	689b      	ldr	r3, [r3, #8]
 80233da:	f100 80e3 	bmi.w	80235a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80233de:	f103 3aff 	add.w	sl, r3, #4294967295
 80233e2:	4552      	cmp	r2, sl
 80233e4:	f280 80de 	bge.w	80235a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80233e8:	f1bc 0f00 	cmp.w	ip, #0
 80233ec:	f2c0 80da 	blt.w	80235a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80233f0:	f10e 3aff 	add.w	sl, lr, #4294967295
 80233f4:	45d4      	cmp	ip, sl
 80233f6:	f280 80d5 	bge.w	80235a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80233fa:	b21b      	sxth	r3, r3
 80233fc:	9d07      	ldr	r5, [sp, #28]
 80233fe:	fb0c 2203 	mla	r2, ip, r3, r2
 8023402:	eb05 0a02 	add.w	sl, r5, r2
 8023406:	5caa      	ldrb	r2, [r5, r2]
 8023408:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 802340c:	2800      	cmp	r0, #0
 802340e:	f000 80c0 	beq.w	8023592 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28e>
 8023412:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8023416:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 802341a:	920b      	str	r2, [sp, #44]	; 0x2c
 802341c:	b151      	cbz	r1, 8023434 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 802341e:	eb0a 0203 	add.w	r2, sl, r3
 8023422:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8023426:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802342a:	9309      	str	r3, [sp, #36]	; 0x24
 802342c:	7853      	ldrb	r3, [r2, #1]
 802342e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023432:	930c      	str	r3, [sp, #48]	; 0x30
 8023434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023436:	fb10 f201 	smulbb	r2, r0, r1
 802343a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802343c:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023440:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023444:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8023448:	10d2      	asrs	r2, r2, #3
 802344a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802344e:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8023452:	ea4c 0c03 	orr.w	ip, ip, r3
 8023456:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023458:	041b      	lsls	r3, r3, #16
 802345a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802345e:	432b      	orrs	r3, r5
 8023460:	4353      	muls	r3, r2
 8023462:	fb0a 330c 	mla	r3, sl, ip, r3
 8023466:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 802346a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802346e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023472:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023476:	f1c1 0c10 	rsb	ip, r1, #16
 802347a:	ebac 0c00 	sub.w	ip, ip, r0
 802347e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023482:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8023486:	fb0c 3c0e 	mla	ip, ip, lr, r3
 802348a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802348c:	0418      	lsls	r0, r3, #16
 802348e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023492:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023496:	4318      	orrs	r0, r3
 8023498:	fb02 c200 	mla	r2, r2, r0, ip
 802349c:	0d53      	lsrs	r3, r2, #21
 802349e:	0952      	lsrs	r2, r2, #5
 80234a0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80234a4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80234a8:	431a      	orrs	r2, r3
 80234aa:	f8a8 2000 	strh.w	r2, [r8]
 80234ae:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80234b0:	f108 0802 	add.w	r8, r8, #2
 80234b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80234b8:	441c      	add	r4, r3
 80234ba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80234bc:	441e      	add	r6, r3
 80234be:	e77c      	b.n	80233ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80234c0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80234c2:	f109 0902 	add.w	r9, r9, #2
 80234c6:	441c      	add	r4, r3
 80234c8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80234ca:	441e      	add	r6, r3
 80234cc:	9b06      	ldr	r3, [sp, #24]
 80234ce:	3b01      	subs	r3, #1
 80234d0:	9306      	str	r3, [sp, #24]
 80234d2:	e752      	b.n	802337a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80234d4:	d020      	beq.n	8023518 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80234d6:	9b06      	ldr	r3, [sp, #24]
 80234d8:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80234da:	3b01      	subs	r3, #1
 80234dc:	fb00 4003 	mla	r0, r0, r3, r4
 80234e0:	1400      	asrs	r0, r0, #16
 80234e2:	f53f af67 	bmi.w	80233b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80234e6:	3901      	subs	r1, #1
 80234e8:	4288      	cmp	r0, r1
 80234ea:	f6bf af63 	bge.w	80233b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80234ee:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80234f0:	fb01 6303 	mla	r3, r1, r3, r6
 80234f4:	141b      	asrs	r3, r3, #16
 80234f6:	f53f af5d 	bmi.w	80233b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80234fa:	3a01      	subs	r2, #1
 80234fc:	4293      	cmp	r3, r2
 80234fe:	f6bf af59 	bge.w	80233b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8023502:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8023506:	46ca      	mov	sl, r9
 8023508:	f1b8 0f00 	cmp.w	r8, #0
 802350c:	dc67      	bgt.n	80235de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 802350e:	9b06      	ldr	r3, [sp, #24]
 8023510:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8023514:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8023518:	9b08      	ldr	r3, [sp, #32]
 802351a:	2b00      	cmp	r3, #0
 802351c:	f340 80d7 	ble.w	80236ce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8023520:	ee3a aa0c 	vadd.f32	s20, s20, s24
 8023524:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023526:	ee79 9aab 	vadd.f32	s19, s19, s23
 802352a:	eef0 6a48 	vmov.f32	s13, s16
 802352e:	eeca 7a8a 	vdiv.f32	s15, s21, s20
 8023532:	ee39 9a0b 	vadd.f32	s18, s18, s22
 8023536:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802353a:	ee16 4a90 	vmov	r4, s13
 802353e:	eef0 6a68 	vmov.f32	s13, s17
 8023542:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023546:	ee16 6a90 	vmov	r6, s13
 802354a:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802354e:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023552:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023556:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802355a:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802355e:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023562:	ee18 2a10 	vmov	r2, s16
 8023566:	eeb0 8a47 	vmov.f32	s16, s14
 802356a:	fb92 f3f3 	sdiv	r3, r2, r3
 802356e:	ee18 2a90 	vmov	r2, s17
 8023572:	9329      	str	r3, [sp, #164]	; 0xa4
 8023574:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023576:	eef0 8a67 	vmov.f32	s17, s15
 802357a:	fb92 f3f3 	sdiv	r3, r2, r3
 802357e:	932a      	str	r3, [sp, #168]	; 0xa8
 8023580:	9b08      	ldr	r3, [sp, #32]
 8023582:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023584:	3b01      	subs	r3, #1
 8023586:	9308      	str	r3, [sp, #32]
 8023588:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802358a:	bf08      	it	eq
 802358c:	4613      	moveq	r3, r2
 802358e:	9306      	str	r3, [sp, #24]
 8023590:	e6e4      	b.n	802335c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8023592:	2900      	cmp	r1, #0
 8023594:	f43f af4e 	beq.w	8023434 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 8023598:	f81a 3003 	ldrb.w	r3, [sl, r3]
 802359c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80235a0:	9309      	str	r3, [sp, #36]	; 0x24
 80235a2:	e747      	b.n	8023434 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x130>
 80235a4:	f112 0a01 	adds.w	sl, r2, #1
 80235a8:	d481      	bmi.n	80234ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80235aa:	4553      	cmp	r3, sl
 80235ac:	f6ff af7f 	blt.w	80234ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80235b0:	f11c 0a01 	adds.w	sl, ip, #1
 80235b4:	f53f af7b 	bmi.w	80234ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80235b8:	45d6      	cmp	lr, sl
 80235ba:	f6ff af78 	blt.w	80234ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80235be:	b21b      	sxth	r3, r3
 80235c0:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 80235c4:	fa0f f28e 	sxth.w	r2, lr
 80235c8:	9300      	str	r3, [sp, #0]
 80235ca:	463b      	mov	r3, r7
 80235cc:	9201      	str	r2, [sp, #4]
 80235ce:	9a07      	ldr	r2, [sp, #28]
 80235d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80235d4:	4641      	mov	r1, r8
 80235d6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80235d8:	f7ff fdfe 	bl	80231d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80235dc:	e767      	b.n	80234ae <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80235de:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80235e0:	1422      	asrs	r2, r4, #16
 80235e2:	1431      	asrs	r1, r6, #16
 80235e4:	9d07      	ldr	r5, [sp, #28]
 80235e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80235ea:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 80235ee:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80235f2:	fb03 2101 	mla	r1, r3, r1, r2
 80235f6:	9a07      	ldr	r2, [sp, #28]
 80235f8:	440a      	add	r2, r1
 80235fa:	5c69      	ldrb	r1, [r5, r1]
 80235fc:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8023600:	f1be 0f00 	cmp.w	lr, #0
 8023604:	d05c      	beq.n	80236c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 8023606:	f892 c001 	ldrb.w	ip, [r2, #1]
 802360a:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 802360e:	950d      	str	r5, [sp, #52]	; 0x34
 8023610:	b150      	cbz	r0, 8023628 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8023612:	eb02 0c03 	add.w	ip, r2, r3
 8023616:	5cd3      	ldrb	r3, [r2, r3]
 8023618:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802361c:	930a      	str	r3, [sp, #40]	; 0x28
 802361e:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023622:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023626:	930e      	str	r3, [sp, #56]	; 0x38
 8023628:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802362a:	fb1e f200 	smulbb	r2, lr, r0
 802362e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023630:	f108 38ff 	add.w	r8, r8, #4294967295
 8023634:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023638:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802363c:	10d2      	asrs	r2, r2, #3
 802363e:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8023642:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023646:	ea4c 0c03 	orr.w	ip, ip, r3
 802364a:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 802364e:	9311      	str	r3, [sp, #68]	; 0x44
 8023650:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023652:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023654:	041b      	lsls	r3, r3, #16
 8023656:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802365a:	ea43 030b 	orr.w	r3, r3, fp
 802365e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023662:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023666:	4353      	muls	r3, r2
 8023668:	fb05 3c0c 	mla	ip, r5, ip, r3
 802366c:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8023670:	ea43 0b01 	orr.w	fp, r3, r1
 8023674:	f1c0 0110 	rsb	r1, r0, #16
 8023678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802367a:	eba1 0e0e 	sub.w	lr, r1, lr
 802367e:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8023682:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8023686:	fb0e cc0b 	mla	ip, lr, fp, ip
 802368a:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 802368e:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8023692:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023696:	ea4b 0e0e 	orr.w	lr, fp, lr
 802369a:	fb02 cc0e 	mla	ip, r2, lr, ip
 802369e:	ea4f 535c 	mov.w	r3, ip, lsr #21
 80236a2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80236a6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80236aa:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80236ae:	ea43 0c0c 	orr.w	ip, r3, ip
 80236b2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80236b4:	441c      	add	r4, r3
 80236b6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80236b8:	f82a cb02 	strh.w	ip, [sl], #2
 80236bc:	441e      	add	r6, r3
 80236be:	e723      	b.n	8023508 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80236c0:	2800      	cmp	r0, #0
 80236c2:	d0b1      	beq.n	8023628 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80236c4:	5cd3      	ldrb	r3, [r2, r3]
 80236c6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80236ca:	930a      	str	r3, [sp, #40]	; 0x28
 80236cc:	e7ac      	b.n	8023628 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80236ce:	b013      	add	sp, #76	; 0x4c
 80236d0:	ecbd 8b0a 	vpop	{d8-d12}
 80236d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080236d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 80236d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236dc:	468b      	mov	fp, r1
 80236de:	8809      	ldrh	r1, [r1, #0]
 80236e0:	b089      	sub	sp, #36	; 0x24
 80236e2:	10cd      	asrs	r5, r1, #3
 80236e4:	ea4f 2921 	mov.w	r9, r1, asr #8
 80236e8:	f9bd e048 	ldrsh.w	lr, [sp, #72]	; 0x48
 80236ec:	00c9      	lsls	r1, r1, #3
 80236ee:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80236f2:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 80236f6:	9202      	str	r2, [sp, #8]
 80236f8:	b2c9      	uxtb	r1, r1
 80236fa:	9500      	str	r5, [sp, #0]
 80236fc:	f9bd a04c 	ldrsh.w	sl, [sp, #76]	; 0x4c
 8023700:	9101      	str	r1, [sp, #4]
 8023702:	9900      	ldr	r1, [sp, #0]
 8023704:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8023708:	0209      	lsls	r1, r1, #8
 802370a:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 802370e:	f89d c060 	ldrb.w	ip, [sp, #96]	; 0x60
 8023712:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
 8023716:	e9dd 6414 	ldrd	r6, r4, [sp, #80]	; 0x50
 802371a:	fb04 650e 	mla	r5, r4, lr, r6
 802371e:	2c00      	cmp	r4, #0
 8023720:	eb02 0805 	add.w	r8, r2, r5
 8023724:	9a01      	ldr	r2, [sp, #4]
 8023726:	ea41 0102 	orr.w	r1, r1, r2
 802372a:	9107      	str	r1, [sp, #28]
 802372c:	db43      	blt.n	80237b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 802372e:	45a2      	cmp	sl, r4
 8023730:	dd41      	ble.n	80237b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xde>
 8023732:	2e00      	cmp	r6, #0
 8023734:	db3d      	blt.n	80237b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 8023736:	45b6      	cmp	lr, r6
 8023738:	dd3b      	ble.n	80237b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xda>
 802373a:	9a02      	ldr	r2, [sp, #8]
 802373c:	5d55      	ldrb	r5, [r2, r5]
 802373e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023742:	441d      	add	r5, r3
 8023744:	1c72      	adds	r2, r6, #1
 8023746:	d439      	bmi.n	80237bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8023748:	4596      	cmp	lr, r2
 802374a:	dd37      	ble.n	80237bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 802374c:	2f00      	cmp	r7, #0
 802374e:	d035      	beq.n	80237bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe4>
 8023750:	f898 1001 	ldrb.w	r1, [r8, #1]
 8023754:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8023758:	4419      	add	r1, r3
 802375a:	3401      	adds	r4, #1
 802375c:	d432      	bmi.n	80237c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 802375e:	45a2      	cmp	sl, r4
 8023760:	dd30      	ble.n	80237c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8023762:	b378      	cbz	r0, 80237c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xec>
 8023764:	2e00      	cmp	r6, #0
 8023766:	db2b      	blt.n	80237c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 8023768:	45b6      	cmp	lr, r6
 802376a:	dd29      	ble.n	80237c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xe8>
 802376c:	f818 400e 	ldrb.w	r4, [r8, lr]
 8023770:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023774:	441c      	add	r4, r3
 8023776:	3601      	adds	r6, #1
 8023778:	d427      	bmi.n	80237ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 802377a:	45b6      	cmp	lr, r6
 802377c:	dd25      	ble.n	80237ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 802377e:	b327      	cbz	r7, 80237ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf2>
 8023780:	44c6      	add	lr, r8
 8023782:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023786:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802378a:	4413      	add	r3, r2
 802378c:	782a      	ldrb	r2, [r5, #0]
 802378e:	2f0f      	cmp	r7, #15
 8023790:	9202      	str	r2, [sp, #8]
 8023792:	780a      	ldrb	r2, [r1, #0]
 8023794:	9203      	str	r2, [sp, #12]
 8023796:	7822      	ldrb	r2, [r4, #0]
 8023798:	9204      	str	r2, [sp, #16]
 802379a:	781a      	ldrb	r2, [r3, #0]
 802379c:	9205      	str	r2, [sp, #20]
 802379e:	d801      	bhi.n	80237a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xcc>
 80237a0:	280f      	cmp	r0, #15
 80237a2:	d914      	bls.n	80237ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xf6>
 80237a4:	4b3f      	ldr	r3, [pc, #252]	; (80238a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1cc>)
 80237a6:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80237aa:	4a3f      	ldr	r2, [pc, #252]	; (80238a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d0>)
 80237ac:	483f      	ldr	r0, [pc, #252]	; (80238ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>)
 80237ae:	f006 fb4f 	bl	8029e50 <__assert_func>
 80237b2:	ad07      	add	r5, sp, #28
 80237b4:	e7c6      	b.n	8023744 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6c>
 80237b6:	a907      	add	r1, sp, #28
 80237b8:	460d      	mov	r5, r1
 80237ba:	e7ce      	b.n	802375a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 80237bc:	a907      	add	r1, sp, #28
 80237be:	e7cc      	b.n	802375a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x82>
 80237c0:	ac07      	add	r4, sp, #28
 80237c2:	e7d8      	b.n	8023776 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x9e>
 80237c4:	ab07      	add	r3, sp, #28
 80237c6:	461c      	mov	r4, r3
 80237c8:	e7e0      	b.n	802378c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 80237ca:	ab07      	add	r3, sp, #28
 80237cc:	e7de      	b.n	802378c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 80237ce:	b2ba      	uxth	r2, r7
 80237d0:	f891 8002 	ldrb.w	r8, [r1, #2]
 80237d4:	b280      	uxth	r0, r0
 80237d6:	7849      	ldrb	r1, [r1, #1]
 80237d8:	78ae      	ldrb	r6, [r5, #2]
 80237da:	fa1f f78c 	uxth.w	r7, ip
 80237de:	fb02 fa00 	mul.w	sl, r2, r0
 80237e2:	0112      	lsls	r2, r2, #4
 80237e4:	786d      	ldrb	r5, [r5, #1]
 80237e6:	ea6f 0c0c 	mvn.w	ip, ip
 80237ea:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 80237ee:	f5c2 7e80 	rsb	lr, r2, #256	; 0x100
 80237f2:	eba2 020a 	sub.w	r2, r2, sl
 80237f6:	fa5f fc8c 	uxtb.w	ip, ip
 80237fa:	b280      	uxth	r0, r0
 80237fc:	fb19 f90c 	smulbb	r9, r9, ip
 8023800:	b292      	uxth	r2, r2
 8023802:	ebae 0e00 	sub.w	lr, lr, r0
 8023806:	4351      	muls	r1, r2
 8023808:	fa1f fe8e 	uxth.w	lr, lr
 802380c:	fb02 f808 	mul.w	r8, r2, r8
 8023810:	fb0e 1505 	mla	r5, lr, r5, r1
 8023814:	7861      	ldrb	r1, [r4, #1]
 8023816:	fb0e 8806 	mla	r8, lr, r6, r8
 802381a:	78a6      	ldrb	r6, [r4, #2]
 802381c:	fb00 5501 	mla	r5, r0, r1, r5
 8023820:	7859      	ldrb	r1, [r3, #1]
 8023822:	fb00 8806 	mla	r8, r0, r6, r8
 8023826:	789e      	ldrb	r6, [r3, #2]
 8023828:	9b00      	ldr	r3, [sp, #0]
 802382a:	fb0a 5101 	mla	r1, sl, r1, r5
 802382e:	fb0a 8606 	mla	r6, sl, r6, r8
 8023832:	fb13 f50c 	smulbb	r5, r3, ip
 8023836:	9b03      	ldr	r3, [sp, #12]
 8023838:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802383c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8023840:	435a      	muls	r2, r3
 8023842:	9b02      	ldr	r3, [sp, #8]
 8023844:	fb06 9607 	mla	r6, r6, r7, r9
 8023848:	fb0e 2203 	mla	r2, lr, r3, r2
 802384c:	9b04      	ldr	r3, [sp, #16]
 802384e:	b2b6      	uxth	r6, r6
 8023850:	fb01 5107 	mla	r1, r1, r7, r5
 8023854:	fb00 2003 	mla	r0, r0, r3, r2
 8023858:	9b05      	ldr	r3, [sp, #20]
 802385a:	f106 0901 	add.w	r9, r6, #1
 802385e:	b289      	uxth	r1, r1
 8023860:	fb0a 0a03 	mla	sl, sl, r3, r0
 8023864:	9b01      	ldr	r3, [sp, #4]
 8023866:	eb09 2616 	add.w	r6, r9, r6, lsr #8
 802386a:	1c4d      	adds	r5, r1, #1
 802386c:	fb13 fc0c 	smulbb	ip, r3, ip
 8023870:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8023874:	f406 4978 	and.w	r9, r6, #63488	; 0xf800
 8023878:	eb05 2111 	add.w	r1, r5, r1, lsr #8
 802387c:	fb0a c707 	mla	r7, sl, r7, ip
 8023880:	0949      	lsrs	r1, r1, #5
 8023882:	b2bf      	uxth	r7, r7
 8023884:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023888:	1c7e      	adds	r6, r7, #1
 802388a:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 802388e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8023892:	ea46 0609 	orr.w	r6, r6, r9
 8023896:	430e      	orrs	r6, r1
 8023898:	f8ab 6000 	strh.w	r6, [fp]
 802389c:	b009      	add	sp, #36	; 0x24
 802389e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238a2:	bf00      	nop
 80238a4:	08031892 	.word	0x08031892
 80238a8:	08031e62 	.word	0x08031e62
 80238ac:	08031916 	.word	0x08031916

080238b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80238b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238b4:	ed2d 8b08 	vpush	{d8-d11}
 80238b8:	b095      	sub	sp, #84	; 0x54
 80238ba:	eeb0 aa40 	vmov.f32	s20, s0
 80238be:	eef0 9a60 	vmov.f32	s19, s1
 80238c2:	9212      	str	r2, [sp, #72]	; 0x48
 80238c4:	eeb0 9a41 	vmov.f32	s18, s2
 80238c8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80238ca:	eeb0 8a62 	vmov.f32	s16, s5
 80238ce:	9309      	str	r3, [sp, #36]	; 0x24
 80238d0:	eef0 8a43 	vmov.f32	s17, s6
 80238d4:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 80238d8:	eef0 ba44 	vmov.f32	s23, s8
 80238dc:	9013      	str	r0, [sp, #76]	; 0x4c
 80238de:	eeb0 ba64 	vmov.f32	s22, s9
 80238e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80238e4:	eef0 aa45 	vmov.f32	s21, s10
 80238e8:	6850      	ldr	r0, [r2, #4]
 80238ea:	910e      	str	r1, [sp, #56]	; 0x38
 80238ec:	6812      	ldr	r2, [r2, #0]
 80238ee:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80238f2:	fb00 1303 	mla	r3, r0, r3, r1
 80238f6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80238fa:	930a      	str	r3, [sp, #40]	; 0x28
 80238fc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80238fe:	681b      	ldr	r3, [r3, #0]
 8023900:	930d      	str	r3, [sp, #52]	; 0x34
 8023902:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023904:	685c      	ldr	r4, [r3, #4]
 8023906:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023908:	3404      	adds	r4, #4
 802390a:	43db      	mvns	r3, r3
 802390c:	b2db      	uxtb	r3, r3
 802390e:	930b      	str	r3, [sp, #44]	; 0x2c
 8023910:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023912:	2b00      	cmp	r3, #0
 8023914:	dc03      	bgt.n	802391e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023916:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023918:	2b00      	cmp	r3, #0
 802391a:	f340 8255 	ble.w	8023dc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 802391e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023920:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023924:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023928:	1e48      	subs	r0, r1, #1
 802392a:	1e55      	subs	r5, r2, #1
 802392c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802392e:	2b00      	cmp	r3, #0
 8023930:	f340 80f9 	ble.w	8023b26 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8023934:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8023936:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023938:	1436      	asrs	r6, r6, #16
 802393a:	ea4f 4323 	mov.w	r3, r3, asr #16
 802393e:	d406      	bmi.n	802394e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023940:	4286      	cmp	r6, r0
 8023942:	da04      	bge.n	802394e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023944:	2b00      	cmp	r3, #0
 8023946:	db02      	blt.n	802394e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023948:	42ab      	cmp	r3, r5
 802394a:	f2c0 80ed 	blt.w	8023b28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 802394e:	3601      	adds	r6, #1
 8023950:	f100 80da 	bmi.w	8023b08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8023954:	42b1      	cmp	r1, r6
 8023956:	f2c0 80d7 	blt.w	8023b08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 802395a:	3301      	adds	r3, #1
 802395c:	f100 80d4 	bmi.w	8023b08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8023960:	429a      	cmp	r2, r3
 8023962:	f2c0 80d1 	blt.w	8023b08 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x258>
 8023966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023968:	9311      	str	r3, [sp, #68]	; 0x44
 802396a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802396c:	930c      	str	r3, [sp, #48]	; 0x30
 802396e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023970:	2b00      	cmp	r3, #0
 8023972:	f340 80fa 	ble.w	8023b6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8023976:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8023978:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802397a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802397c:	68c6      	ldr	r6, [r0, #12]
 802397e:	141d      	asrs	r5, r3, #16
 8023980:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8023982:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023986:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023988:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802398a:	1400      	asrs	r0, r0, #16
 802398c:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023990:	6892      	ldr	r2, [r2, #8]
 8023992:	f100 813e 	bmi.w	8023c12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8023996:	1e57      	subs	r7, r2, #1
 8023998:	42b8      	cmp	r0, r7
 802399a:	f280 813a 	bge.w	8023c12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802399e:	2d00      	cmp	r5, #0
 80239a0:	f2c0 8137 	blt.w	8023c12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80239a4:	1e77      	subs	r7, r6, #1
 80239a6:	42bd      	cmp	r5, r7
 80239a8:	f280 8133 	bge.w	8023c12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80239ac:	b212      	sxth	r2, r2
 80239ae:	fb05 0002 	mla	r0, r5, r2, r0
 80239b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80239b4:	f815 a000 	ldrb.w	sl, [r5, r0]
 80239b8:	182e      	adds	r6, r5, r0
 80239ba:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 80239be:	eb04 050a 	add.w	r5, r4, sl
 80239c2:	2b00      	cmp	r3, #0
 80239c4:	f000 8117 	beq.w	8023bf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x346>
 80239c8:	f896 c001 	ldrb.w	ip, [r6, #1]
 80239cc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80239d0:	44a4      	add	ip, r4
 80239d2:	2900      	cmp	r1, #0
 80239d4:	f000 8117 	beq.w	8023c06 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80239d8:	18b0      	adds	r0, r6, r2
 80239da:	5cb2      	ldrb	r2, [r6, r2]
 80239dc:	7840      	ldrb	r0, [r0, #1]
 80239de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80239e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80239e6:	4422      	add	r2, r4
 80239e8:	4420      	add	r0, r4
 80239ea:	b29b      	uxth	r3, r3
 80239ec:	f89c 7002 	ldrb.w	r7, [ip, #2]
 80239f0:	b289      	uxth	r1, r1
 80239f2:	f895 b002 	ldrb.w	fp, [r5, #2]
 80239f6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80239f8:	fb03 f901 	mul.w	r9, r3, r1
 80239fc:	011b      	lsls	r3, r3, #4
 80239fe:	f8b6 e000 	ldrh.w	lr, [r6]
 8023a02:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023a06:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8023a0a:	eba3 0309 	sub.w	r3, r3, r9
 8023a0e:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8023a12:	b289      	uxth	r1, r1
 8023a14:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8023a18:	b29b      	uxth	r3, r3
 8023a1a:	eba8 0801 	sub.w	r8, r8, r1
 8023a1e:	435f      	muls	r7, r3
 8023a20:	fa1f f888 	uxth.w	r8, r8
 8023a24:	9310      	str	r3, [sp, #64]	; 0x40
 8023a26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023a28:	fb08 770b 	mla	r7, r8, fp, r7
 8023a2c:	f892 b002 	ldrb.w	fp, [r2, #2]
 8023a30:	fb01 770b 	mla	r7, r1, fp, r7
 8023a34:	f890 b002 	ldrb.w	fp, [r0, #2]
 8023a38:	fb09 770b 	mla	r7, r9, fp, r7
 8023a3c:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 8023a40:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8023a44:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8023a48:	fb1b fb03 	smulbb	fp, fp, r3
 8023a4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023a4e:	fb07 b706 	mla	r7, r7, r6, fp
 8023a52:	f895 b001 	ldrb.w	fp, [r5, #1]
 8023a56:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8023a5a:	f89c c000 	ldrb.w	ip, [ip]
 8023a5e:	b2bf      	uxth	r7, r7
 8023a60:	435d      	muls	r5, r3
 8023a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023a64:	fb08 550b 	mla	r5, r8, fp, r5
 8023a68:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023a6c:	fb01 550b 	mla	r5, r1, fp, r5
 8023a70:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023a74:	fb09 550b 	mla	r5, r9, fp, r5
 8023a78:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8023a7c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023a80:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8023a84:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8023a88:	fa5f fe8e 	uxtb.w	lr, lr
 8023a8c:	fb1b fb03 	smulbb	fp, fp, r3
 8023a90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023a92:	fb03 f30c 	mul.w	r3, r3, ip
 8023a96:	f892 c000 	ldrb.w	ip, [r2]
 8023a9a:	fb05 b506 	mla	r5, r5, r6, fp
 8023a9e:	fb08 330a 	mla	r3, r8, sl, r3
 8023aa2:	b2ad      	uxth	r5, r5
 8023aa4:	fb01 330c 	mla	r3, r1, ip, r3
 8023aa8:	f890 c000 	ldrb.w	ip, [r0]
 8023aac:	f105 0b01 	add.w	fp, r5, #1
 8023ab0:	fb09 3c0c 	mla	ip, r9, ip, r3
 8023ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023ab6:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8023aba:	fb1e fe03 	smulbb	lr, lr, r3
 8023abe:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8023ac2:	1c7b      	adds	r3, r7, #1
 8023ac4:	096d      	lsrs	r5, r5, #5
 8023ac6:	fb0c e606 	mla	r6, ip, r6, lr
 8023aca:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8023ace:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023ad2:	b2b6      	uxth	r6, r6
 8023ad4:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 8023ad8:	1c77      	adds	r7, r6, #1
 8023ada:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8023ade:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023ae2:	431f      	orrs	r7, r3
 8023ae4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023ae6:	433d      	orrs	r5, r7
 8023ae8:	801d      	strh	r5, [r3, #0]
 8023aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023aec:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023aee:	3302      	adds	r3, #2
 8023af0:	930c      	str	r3, [sp, #48]	; 0x30
 8023af2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023af4:	4413      	add	r3, r2
 8023af6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023af8:	9327      	str	r3, [sp, #156]	; 0x9c
 8023afa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023afc:	4413      	add	r3, r2
 8023afe:	9328      	str	r3, [sp, #160]	; 0xa0
 8023b00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023b02:	3b01      	subs	r3, #1
 8023b04:	9311      	str	r3, [sp, #68]	; 0x44
 8023b06:	e732      	b.n	802396e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8023b08:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023b0a:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8023b0c:	4433      	add	r3, r6
 8023b0e:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8023b10:	9327      	str	r3, [sp, #156]	; 0x9c
 8023b12:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023b14:	4433      	add	r3, r6
 8023b16:	9328      	str	r3, [sp, #160]	; 0xa0
 8023b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023b1a:	3b01      	subs	r3, #1
 8023b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8023b1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023b20:	3302      	adds	r3, #2
 8023b22:	930a      	str	r3, [sp, #40]	; 0x28
 8023b24:	e702      	b.n	802392c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023b26:	d027      	beq.n	8023b78 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8023b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023b2a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8023b2c:	3b01      	subs	r3, #1
 8023b2e:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8023b30:	fb00 5003 	mla	r0, r0, r3, r5
 8023b34:	1400      	asrs	r0, r0, #16
 8023b36:	f53f af16 	bmi.w	8023966 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023b3a:	3901      	subs	r1, #1
 8023b3c:	4288      	cmp	r0, r1
 8023b3e:	f6bf af12 	bge.w	8023966 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023b42:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8023b44:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8023b46:	fb01 0303 	mla	r3, r1, r3, r0
 8023b4a:	141b      	asrs	r3, r3, #16
 8023b4c:	f53f af0b 	bmi.w	8023966 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023b50:	3a01      	subs	r2, #1
 8023b52:	4293      	cmp	r3, r2
 8023b54:	f6bf af07 	bge.w	8023966 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8023b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023b5a:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8023b5e:	9311      	str	r3, [sp, #68]	; 0x44
 8023b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023b62:	930c      	str	r3, [sp, #48]	; 0x30
 8023b64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023b66:	2b00      	cmp	r3, #0
 8023b68:	dc70      	bgt.n	8023c4c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8023b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023b6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023b6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023b72:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023b76:	930a      	str	r3, [sp, #40]	; 0x28
 8023b78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023b7a:	2b00      	cmp	r3, #0
 8023b7c:	f340 8124 	ble.w	8023dc8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>
 8023b80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023b84:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023b86:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8023b8a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8023b8e:	eef0 6a48 	vmov.f32	s13, s16
 8023b92:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8023b96:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8023b9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023b9e:	edcd 6a27 	vstr	s13, [sp, #156]	; 0x9c
 8023ba2:	eef0 6a68 	vmov.f32	s13, s17
 8023ba6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023baa:	edcd 6a28 	vstr	s13, [sp, #160]	; 0xa0
 8023bae:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8023bb2:	ee69 7a27 	vmul.f32	s15, s18, s15
 8023bb6:	ee37 8a48 	vsub.f32	s16, s14, s16
 8023bba:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8023bbe:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8023bc2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8023bc6:	ee18 2a10 	vmov	r2, s16
 8023bca:	eeb0 8a47 	vmov.f32	s16, s14
 8023bce:	fb92 f3f3 	sdiv	r3, r2, r3
 8023bd2:	ee18 2a90 	vmov	r2, s17
 8023bd6:	9329      	str	r3, [sp, #164]	; 0xa4
 8023bd8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023bda:	eef0 8a67 	vmov.f32	s17, s15
 8023bde:	fb92 f3f3 	sdiv	r3, r2, r3
 8023be2:	932a      	str	r3, [sp, #168]	; 0xa8
 8023be4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023be6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023be8:	3b01      	subs	r3, #1
 8023bea:	930e      	str	r3, [sp, #56]	; 0x38
 8023bec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023bee:	bf08      	it	eq
 8023bf0:	4613      	moveq	r3, r2
 8023bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8023bf4:	e68c      	b.n	8023910 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8023bf6:	b149      	cbz	r1, 8023c0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 8023bf8:	5cb2      	ldrb	r2, [r6, r2]
 8023bfa:	4628      	mov	r0, r5
 8023bfc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023c00:	4422      	add	r2, r4
 8023c02:	46ac      	mov	ip, r5
 8023c04:	e6f1      	b.n	80239ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023c06:	4628      	mov	r0, r5
 8023c08:	462a      	mov	r2, r5
 8023c0a:	e6ee      	b.n	80239ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8023c0c:	4628      	mov	r0, r5
 8023c0e:	462a      	mov	r2, r5
 8023c10:	e7f7      	b.n	8023c02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8023c12:	1c47      	adds	r7, r0, #1
 8023c14:	f53f af69 	bmi.w	8023aea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8023c18:	42ba      	cmp	r2, r7
 8023c1a:	f6ff af66 	blt.w	8023aea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8023c1e:	1c6f      	adds	r7, r5, #1
 8023c20:	f53f af63 	bmi.w	8023aea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8023c24:	42be      	cmp	r6, r7
 8023c26:	f6ff af60 	blt.w	8023aea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8023c2a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8023c2c:	b236      	sxth	r6, r6
 8023c2e:	b212      	sxth	r2, r2
 8023c30:	9002      	str	r0, [sp, #8]
 8023c32:	9601      	str	r6, [sp, #4]
 8023c34:	9200      	str	r2, [sp, #0]
 8023c36:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023c38:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8023c3c:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8023c40:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8023c44:	4623      	mov	r3, r4
 8023c46:	f7ff fd47 	bl	80236d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8023c4a:	e74e      	b.n	8023aea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8023c4c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8023c4e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8023c50:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023c54:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 8023c56:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8023c58:	1400      	asrs	r0, r0, #16
 8023c5a:	142d      	asrs	r5, r5, #16
 8023c5c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023c5e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023c62:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023c66:	fb02 5000 	mla	r0, r2, r0, r5
 8023c6a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023c6c:	f815 9000 	ldrb.w	r9, [r5, r0]
 8023c70:	182e      	adds	r6, r5, r0
 8023c72:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8023c76:	eb04 0509 	add.w	r5, r4, r9
 8023c7a:	2b00      	cmp	r3, #0
 8023c7c:	f000 8096 	beq.w	8023dac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fc>
 8023c80:	7877      	ldrb	r7, [r6, #1]
 8023c82:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023c86:	4427      	add	r7, r4
 8023c88:	2900      	cmp	r1, #0
 8023c8a:	f000 8097 	beq.w	8023dbc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 8023c8e:	18b0      	adds	r0, r6, r2
 8023c90:	5cb2      	ldrb	r2, [r6, r2]
 8023c92:	7840      	ldrb	r0, [r0, #1]
 8023c94:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023c98:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023c9c:	4422      	add	r2, r4
 8023c9e:	4420      	add	r0, r4
 8023ca0:	b29b      	uxth	r3, r3
 8023ca2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8023ca4:	b289      	uxth	r1, r1
 8023ca6:	f895 b002 	ldrb.w	fp, [r5, #2]
 8023caa:	f8b6 c000 	ldrh.w	ip, [r6]
 8023cae:	fb03 f801 	mul.w	r8, r3, r1
 8023cb2:	011b      	lsls	r3, r3, #4
 8023cb4:	78be      	ldrb	r6, [r7, #2]
 8023cb6:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8023cba:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023cbe:	eba3 0308 	sub.w	r3, r3, r8
 8023cc2:	f814 9009 	ldrb.w	r9, [r4, r9]
 8023cc6:	b289      	uxth	r1, r1
 8023cc8:	b29b      	uxth	r3, r3
 8023cca:	ebae 0e01 	sub.w	lr, lr, r1
 8023cce:	435e      	muls	r6, r3
 8023cd0:	fa1f fe8e 	uxth.w	lr, lr
 8023cd4:	9310      	str	r3, [sp, #64]	; 0x40
 8023cd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023cd8:	fb0e 660b 	mla	r6, lr, fp, r6
 8023cdc:	f892 b002 	ldrb.w	fp, [r2, #2]
 8023ce0:	fb01 660b 	mla	r6, r1, fp, r6
 8023ce4:	f890 b002 	ldrb.w	fp, [r0, #2]
 8023ce8:	fb08 660b 	mla	r6, r8, fp, r6
 8023cec:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8023cf0:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8023cf4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023cf8:	fb1b fb03 	smulbb	fp, fp, r3
 8023cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023cfe:	fb06 b60a 	mla	r6, r6, sl, fp
 8023d02:	f895 b001 	ldrb.w	fp, [r5, #1]
 8023d06:	787d      	ldrb	r5, [r7, #1]
 8023d08:	783f      	ldrb	r7, [r7, #0]
 8023d0a:	b2b6      	uxth	r6, r6
 8023d0c:	435d      	muls	r5, r3
 8023d0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023d10:	fb0e 550b 	mla	r5, lr, fp, r5
 8023d14:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023d18:	fb01 550b 	mla	r5, r1, fp, r5
 8023d1c:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023d20:	fb08 550b 	mla	r5, r8, fp, r5
 8023d24:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8023d28:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023d2c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8023d30:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8023d34:	fa5f fc8c 	uxtb.w	ip, ip
 8023d38:	fb1b fb03 	smulbb	fp, fp, r3
 8023d3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023d3e:	437b      	muls	r3, r7
 8023d40:	7817      	ldrb	r7, [r2, #0]
 8023d42:	fb05 b50a 	mla	r5, r5, sl, fp
 8023d46:	fb0e 3309 	mla	r3, lr, r9, r3
 8023d4a:	b2ad      	uxth	r5, r5
 8023d4c:	fb01 3307 	mla	r3, r1, r7, r3
 8023d50:	7807      	ldrb	r7, [r0, #0]
 8023d52:	f105 0b01 	add.w	fp, r5, #1
 8023d56:	fb08 3707 	mla	r7, r8, r7, r3
 8023d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023d5c:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8023d60:	fb1c fc03 	smulbb	ip, ip, r3
 8023d64:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8023d68:	1c73      	adds	r3, r6, #1
 8023d6a:	096d      	lsrs	r5, r5, #5
 8023d6c:	fb07 c70a 	mla	r7, r7, sl, ip
 8023d70:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8023d74:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023d78:	b2bf      	uxth	r7, r7
 8023d7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023d7c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8023d80:	1c7a      	adds	r2, r7, #1
 8023d82:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8023d86:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023d8a:	4316      	orrs	r6, r2
 8023d8c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8023d8e:	432e      	orrs	r6, r5
 8023d90:	f823 6b02 	strh.w	r6, [r3], #2
 8023d94:	930c      	str	r3, [sp, #48]	; 0x30
 8023d96:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8023d98:	4413      	add	r3, r2
 8023d9a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8023d9c:	9327      	str	r3, [sp, #156]	; 0x9c
 8023d9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023da0:	4413      	add	r3, r2
 8023da2:	9328      	str	r3, [sp, #160]	; 0xa0
 8023da4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023da6:	3b01      	subs	r3, #1
 8023da8:	9311      	str	r3, [sp, #68]	; 0x44
 8023daa:	e6db      	b.n	8023b64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 8023dac:	b149      	cbz	r1, 8023dc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x512>
 8023dae:	5cb2      	ldrb	r2, [r6, r2]
 8023db0:	4628      	mov	r0, r5
 8023db2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023db6:	4422      	add	r2, r4
 8023db8:	462f      	mov	r7, r5
 8023dba:	e771      	b.n	8023ca0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8023dbc:	4628      	mov	r0, r5
 8023dbe:	462a      	mov	r2, r5
 8023dc0:	e76e      	b.n	8023ca0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8023dc2:	4628      	mov	r0, r5
 8023dc4:	462a      	mov	r2, r5
 8023dc6:	e7f7      	b.n	8023db8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8023dc8:	b015      	add	sp, #84	; 0x54
 8023dca:	ecbd 8b08 	vpop	{d8-d11}
 8023dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08023dd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8023dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023dd8:	880e      	ldrh	r6, [r1, #0]
 8023dda:	b085      	sub	sp, #20
 8023ddc:	4691      	mov	r9, r2
 8023dde:	0230      	lsls	r0, r6, #8
 8023de0:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8023de4:	9101      	str	r1, [sp, #4]
 8023de6:	f400 0b78 	and.w	fp, r0, #16252928	; 0xf80000
 8023dea:	0170      	lsls	r0, r6, #5
 8023dec:	00f6      	lsls	r6, r6, #3
 8023dee:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8023df2:	f400 407c 	and.w	r0, r0, #64512	; 0xfc00
 8023df6:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8023dfa:	b2f6      	uxtb	r6, r6
 8023dfc:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8023e00:	ea4b 0000 	orr.w	r0, fp, r0
 8023e04:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8023e08:	4306      	orrs	r6, r0
 8023e0a:	fb05 7a0c 	mla	sl, r5, ip, r7
 8023e0e:	2d00      	cmp	r5, #0
 8023e10:	9603      	str	r6, [sp, #12]
 8023e12:	eb09 0e0a 	add.w	lr, r9, sl
 8023e16:	db42      	blt.n	8023e9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8023e18:	45a8      	cmp	r8, r5
 8023e1a:	dd40      	ble.n	8023e9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xca>
 8023e1c:	2f00      	cmp	r7, #0
 8023e1e:	db3c      	blt.n	8023e9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 8023e20:	45bc      	cmp	ip, r7
 8023e22:	dd3a      	ble.n	8023e9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xc6>
 8023e24:	f819 600a 	ldrb.w	r6, [r9, sl]
 8023e28:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023e2c:	441e      	add	r6, r3
 8023e2e:	1c78      	adds	r0, r7, #1
 8023e30:	d438      	bmi.n	8023ea4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8023e32:	4584      	cmp	ip, r0
 8023e34:	dd36      	ble.n	8023ea4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8023e36:	b3aa      	cbz	r2, 8023ea4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd0>
 8023e38:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8023e3c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023e40:	4418      	add	r0, r3
 8023e42:	3501      	adds	r5, #1
 8023e44:	d432      	bmi.n	8023eac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8023e46:	45a8      	cmp	r8, r5
 8023e48:	dd30      	ble.n	8023eac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8023e4a:	b37c      	cbz	r4, 8023eac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd8>
 8023e4c:	2f00      	cmp	r7, #0
 8023e4e:	db2b      	blt.n	8023ea8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8023e50:	45bc      	cmp	ip, r7
 8023e52:	dd29      	ble.n	8023ea8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xd4>
 8023e54:	f81e 500c 	ldrb.w	r5, [lr, ip]
 8023e58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023e5c:	441d      	add	r5, r3
 8023e5e:	3701      	adds	r7, #1
 8023e60:	d427      	bmi.n	8023eb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8023e62:	45bc      	cmp	ip, r7
 8023e64:	dd25      	ble.n	8023eb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8023e66:	b322      	cbz	r2, 8023eb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xde>
 8023e68:	44f4      	add	ip, lr
 8023e6a:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8023e6e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023e72:	443b      	add	r3, r7
 8023e74:	781f      	ldrb	r7, [r3, #0]
 8023e76:	2a0f      	cmp	r2, #15
 8023e78:	f896 9000 	ldrb.w	r9, [r6]
 8023e7c:	f890 a000 	ldrb.w	sl, [r0]
 8023e80:	4639      	mov	r1, r7
 8023e82:	f895 8000 	ldrb.w	r8, [r5]
 8023e86:	d801      	bhi.n	8023e8c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xb8>
 8023e88:	2c0f      	cmp	r4, #15
 8023e8a:	d914      	bls.n	8023eb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xe2>
 8023e8c:	4b2c      	ldr	r3, [pc, #176]	; (8023f40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x16c>)
 8023e8e:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8023e92:	4a2c      	ldr	r2, [pc, #176]	; (8023f44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x170>)
 8023e94:	482c      	ldr	r0, [pc, #176]	; (8023f48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x174>)
 8023e96:	f005 ffdb 	bl	8029e50 <__assert_func>
 8023e9a:	ae03      	add	r6, sp, #12
 8023e9c:	e7c7      	b.n	8023e2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x5a>
 8023e9e:	a803      	add	r0, sp, #12
 8023ea0:	4606      	mov	r6, r0
 8023ea2:	e7ce      	b.n	8023e42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8023ea4:	a803      	add	r0, sp, #12
 8023ea6:	e7cc      	b.n	8023e42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8023ea8:	ad03      	add	r5, sp, #12
 8023eaa:	e7d8      	b.n	8023e5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8a>
 8023eac:	ab03      	add	r3, sp, #12
 8023eae:	461d      	mov	r5, r3
 8023eb0:	e7e0      	b.n	8023e74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 8023eb2:	ab03      	add	r3, sp, #12
 8023eb4:	e7de      	b.n	8023e74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa0>
 8023eb6:	b292      	uxth	r2, r2
 8023eb8:	f890 c002 	ldrb.w	ip, [r0, #2]
 8023ebc:	b2a4      	uxth	r4, r4
 8023ebe:	f896 b002 	ldrb.w	fp, [r6, #2]
 8023ec2:	7840      	ldrb	r0, [r0, #1]
 8023ec4:	fb02 fe04 	mul.w	lr, r2, r4
 8023ec8:	0112      	lsls	r2, r2, #4
 8023eca:	7876      	ldrb	r6, [r6, #1]
 8023ecc:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8023ed0:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8023ed4:	eba2 020e 	sub.w	r2, r2, lr
 8023ed8:	b2a4      	uxth	r4, r4
 8023eda:	b292      	uxth	r2, r2
 8023edc:	1b3f      	subs	r7, r7, r4
 8023ede:	fb02 fc0c 	mul.w	ip, r2, ip
 8023ee2:	b2bf      	uxth	r7, r7
 8023ee4:	fb07 cc0b 	mla	ip, r7, fp, ip
 8023ee8:	f895 b002 	ldrb.w	fp, [r5, #2]
 8023eec:	fb04 cc0b 	mla	ip, r4, fp, ip
 8023ef0:	f893 b002 	ldrb.w	fp, [r3, #2]
 8023ef4:	785b      	ldrb	r3, [r3, #1]
 8023ef6:	fb0e cc0b 	mla	ip, lr, fp, ip
 8023efa:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8023efe:	fb02 fc0a 	mul.w	ip, r2, sl
 8023f02:	4342      	muls	r2, r0
 8023f04:	7868      	ldrb	r0, [r5, #1]
 8023f06:	fb07 cc09 	mla	ip, r7, r9, ip
 8023f0a:	fb07 2206 	mla	r2, r7, r6, r2
 8023f0e:	fb04 cc08 	mla	ip, r4, r8, ip
 8023f12:	fb04 2400 	mla	r4, r4, r0, r2
 8023f16:	fb0e cc01 	mla	ip, lr, r1, ip
 8023f1a:	fb0e 4e03 	mla	lr, lr, r3, r4
 8023f1e:	9b01      	ldr	r3, [sp, #4]
 8023f20:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023f24:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8023f28:	ea4c 0c0b 	orr.w	ip, ip, fp
 8023f2c:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8023f30:	ea4c 0c0e 	orr.w	ip, ip, lr
 8023f34:	f8a3 c000 	strh.w	ip, [r3]
 8023f38:	b005      	add	sp, #20
 8023f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f3e:	bf00      	nop
 8023f40:	08031892 	.word	0x08031892
 8023f44:	08031e62 	.word	0x08031e62
 8023f48:	08031916 	.word	0x08031916

08023f4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f50:	ed2d 8b08 	vpush	{d8-d11}
 8023f54:	b08f      	sub	sp, #60	; 0x3c
 8023f56:	eeb0 aa40 	vmov.f32	s20, s0
 8023f5a:	eef0 9a60 	vmov.f32	s19, s1
 8023f5e:	920c      	str	r2, [sp, #48]	; 0x30
 8023f60:	eeb0 9a41 	vmov.f32	s18, s2
 8023f64:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8023f66:	eeb0 8a62 	vmov.f32	s16, s5
 8023f6a:	900d      	str	r0, [sp, #52]	; 0x34
 8023f6c:	eef0 8a43 	vmov.f32	s17, s6
 8023f70:	6850      	ldr	r0, [r2, #4]
 8023f72:	eef0 ba44 	vmov.f32	s23, s8
 8023f76:	910a      	str	r1, [sp, #40]	; 0x28
 8023f78:	eeb0 ba64 	vmov.f32	s22, s9
 8023f7c:	9306      	str	r3, [sp, #24]
 8023f7e:	eef0 aa45 	vmov.f32	s21, s10
 8023f82:	6812      	ldr	r2, [r2, #0]
 8023f84:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8023f88:	e9dd b521 	ldrd	fp, r5, [sp, #132]	; 0x84
 8023f8c:	fb00 1303 	mla	r3, r0, r3, r1
 8023f90:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023f94:	9307      	str	r3, [sp, #28]
 8023f96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023f98:	681b      	ldr	r3, [r3, #0]
 8023f9a:	9308      	str	r3, [sp, #32]
 8023f9c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023f9e:	685c      	ldr	r4, [r3, #4]
 8023fa0:	3404      	adds	r4, #4
 8023fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023fa4:	2b00      	cmp	r3, #0
 8023fa6:	dc03      	bgt.n	8023fb0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8023fa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023faa:	2b00      	cmp	r3, #0
 8023fac:	f340 81d5 	ble.w	802435a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8023fb0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8023fb2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023fb6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023fba:	1e48      	subs	r0, r1, #1
 8023fbc:	1e56      	subs	r6, r2, #1
 8023fbe:	9b06      	ldr	r3, [sp, #24]
 8023fc0:	2b00      	cmp	r3, #0
 8023fc2:	f340 80b6 	ble.w	8024132 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8023fc6:	ea5f 472b 	movs.w	r7, fp, asr #16
 8023fca:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023fce:	d406      	bmi.n	8023fde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023fd0:	4287      	cmp	r7, r0
 8023fd2:	da04      	bge.n	8023fde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023fd4:	2b00      	cmp	r3, #0
 8023fd6:	db02      	blt.n	8023fde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023fd8:	42b3      	cmp	r3, r6
 8023fda:	f2c0 80ab 	blt.w	8024134 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8023fde:	3701      	adds	r7, #1
 8023fe0:	f100 809c 	bmi.w	802411c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8023fe4:	42b9      	cmp	r1, r7
 8023fe6:	f2c0 8099 	blt.w	802411c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8023fea:	3301      	adds	r3, #1
 8023fec:	f100 8096 	bmi.w	802411c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8023ff0:	429a      	cmp	r2, r3
 8023ff2:	f2c0 8093 	blt.w	802411c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8023ff6:	9b06      	ldr	r3, [sp, #24]
 8023ff8:	930b      	str	r3, [sp, #44]	; 0x2c
 8023ffa:	9b07      	ldr	r3, [sp, #28]
 8023ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8023ffe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024000:	2b00      	cmp	r3, #0
 8024002:	f340 80b4 	ble.w	802416e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8024006:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8024008:	142e      	asrs	r6, r5, #16
 802400a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802400c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8024010:	68c7      	ldr	r7, [r0, #12]
 8024012:	ea5f 402b 	movs.w	r0, fp, asr #16
 8024016:	f3c5 3103 	ubfx	r1, r5, #12, #4
 802401a:	6892      	ldr	r2, [r2, #8]
 802401c:	f100 80fb 	bmi.w	8024216 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8024020:	f102 3cff 	add.w	ip, r2, #4294967295
 8024024:	4560      	cmp	r0, ip
 8024026:	f280 80f6 	bge.w	8024216 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 802402a:	2e00      	cmp	r6, #0
 802402c:	f2c0 80f3 	blt.w	8024216 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8024030:	f107 3cff 	add.w	ip, r7, #4294967295
 8024034:	4566      	cmp	r6, ip
 8024036:	f280 80ee 	bge.w	8024216 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 802403a:	b212      	sxth	r2, r2
 802403c:	fb06 0002 	mla	r0, r6, r2, r0
 8024040:	9e08      	ldr	r6, [sp, #32]
 8024042:	1837      	adds	r7, r6, r0
 8024044:	5c30      	ldrb	r0, [r6, r0]
 8024046:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 802404a:	eb04 0c08 	add.w	ip, r4, r8
 802404e:	2b00      	cmp	r3, #0
 8024050:	f000 80d3 	beq.w	80241fa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8024054:	787e      	ldrb	r6, [r7, #1]
 8024056:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802405a:	4426      	add	r6, r4
 802405c:	2900      	cmp	r1, #0
 802405e:	f000 80d4 	beq.w	802420a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2be>
 8024062:	18b8      	adds	r0, r7, r2
 8024064:	5cba      	ldrb	r2, [r7, r2]
 8024066:	7840      	ldrb	r0, [r0, #1]
 8024068:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802406c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024070:	4422      	add	r2, r4
 8024072:	4420      	add	r0, r4
 8024074:	b29b      	uxth	r3, r3
 8024076:	78b7      	ldrb	r7, [r6, #2]
 8024078:	b289      	uxth	r1, r1
 802407a:	f89c a002 	ldrb.w	sl, [ip, #2]
 802407e:	f89c c001 	ldrb.w	ip, [ip, #1]
 8024082:	fb03 f901 	mul.w	r9, r3, r1
 8024086:	011b      	lsls	r3, r3, #4
 8024088:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802408c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8024090:	eba3 0309 	sub.w	r3, r3, r9
 8024094:	b289      	uxth	r1, r1
 8024096:	b29b      	uxth	r3, r3
 8024098:	ebae 0e01 	sub.w	lr, lr, r1
 802409c:	435f      	muls	r7, r3
 802409e:	fa1f fe8e 	uxth.w	lr, lr
 80240a2:	fb0e 770a 	mla	r7, lr, sl, r7
 80240a6:	f892 a002 	ldrb.w	sl, [r2, #2]
 80240aa:	fb01 770a 	mla	r7, r1, sl, r7
 80240ae:	f890 a002 	ldrb.w	sl, [r0, #2]
 80240b2:	fb09 7a0a 	mla	sl, r9, sl, r7
 80240b6:	f814 7008 	ldrb.w	r7, [r4, r8]
 80240ba:	f896 8000 	ldrb.w	r8, [r6]
 80240be:	7876      	ldrb	r6, [r6, #1]
 80240c0:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 80240c4:	fb03 f808 	mul.w	r8, r3, r8
 80240c8:	4373      	muls	r3, r6
 80240ca:	fb0e 8807 	mla	r8, lr, r7, r8
 80240ce:	7817      	ldrb	r7, [r2, #0]
 80240d0:	fb0e 330c 	mla	r3, lr, ip, r3
 80240d4:	fb01 8807 	mla	r8, r1, r7, r8
 80240d8:	7807      	ldrb	r7, [r0, #0]
 80240da:	fb09 8707 	mla	r7, r9, r7, r8
 80240de:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80240e2:	ea47 070a 	orr.w	r7, r7, sl
 80240e6:	f892 a001 	ldrb.w	sl, [r2, #1]
 80240ea:	fb01 310a 	mla	r1, r1, sl, r3
 80240ee:	f890 a001 	ldrb.w	sl, [r0, #1]
 80240f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80240f4:	fb09 1a0a 	mla	sl, r9, sl, r1
 80240f8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80240fc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8024100:	ea47 070a 	orr.w	r7, r7, sl
 8024104:	801f      	strh	r7, [r3, #0]
 8024106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024108:	3302      	adds	r3, #2
 802410a:	9309      	str	r3, [sp, #36]	; 0x24
 802410c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802410e:	449b      	add	fp, r3
 8024110:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024112:	441d      	add	r5, r3
 8024114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024116:	3b01      	subs	r3, #1
 8024118:	930b      	str	r3, [sp, #44]	; 0x2c
 802411a:	e770      	b.n	8023ffe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802411c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802411e:	449b      	add	fp, r3
 8024120:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024122:	441d      	add	r5, r3
 8024124:	9b06      	ldr	r3, [sp, #24]
 8024126:	3b01      	subs	r3, #1
 8024128:	9306      	str	r3, [sp, #24]
 802412a:	9b07      	ldr	r3, [sp, #28]
 802412c:	3302      	adds	r3, #2
 802412e:	9307      	str	r3, [sp, #28]
 8024130:	e745      	b.n	8023fbe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024132:	d023      	beq.n	802417c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8024134:	9b06      	ldr	r3, [sp, #24]
 8024136:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8024138:	3b01      	subs	r3, #1
 802413a:	fb00 b003 	mla	r0, r0, r3, fp
 802413e:	1400      	asrs	r0, r0, #16
 8024140:	f53f af59 	bmi.w	8023ff6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024144:	3901      	subs	r1, #1
 8024146:	4288      	cmp	r0, r1
 8024148:	f6bf af55 	bge.w	8023ff6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802414c:	9924      	ldr	r1, [sp, #144]	; 0x90
 802414e:	fb01 5303 	mla	r3, r1, r3, r5
 8024152:	141b      	asrs	r3, r3, #16
 8024154:	f53f af4f 	bmi.w	8023ff6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024158:	3a01      	subs	r2, #1
 802415a:	4293      	cmp	r3, r2
 802415c:	f6bf af4b 	bge.w	8023ff6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8024160:	9b06      	ldr	r3, [sp, #24]
 8024162:	9309      	str	r3, [sp, #36]	; 0x24
 8024164:	9b07      	ldr	r3, [sp, #28]
 8024166:	930b      	str	r3, [sp, #44]	; 0x2c
 8024168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802416a:	2b00      	cmp	r3, #0
 802416c:	dc70      	bgt.n	8024250 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x304>
 802416e:	9b06      	ldr	r3, [sp, #24]
 8024170:	9a07      	ldr	r2, [sp, #28]
 8024172:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024176:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802417a:	9307      	str	r3, [sp, #28]
 802417c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802417e:	2b00      	cmp	r3, #0
 8024180:	f340 80eb 	ble.w	802435a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8024184:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024188:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802418a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802418e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024192:	eef0 6a48 	vmov.f32	s13, s16
 8024196:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802419a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802419e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80241a2:	ee16 ba90 	vmov	fp, s13
 80241a6:	eef0 6a68 	vmov.f32	s13, s17
 80241aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80241ae:	ee16 5a90 	vmov	r5, s13
 80241b2:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80241b6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80241ba:	ee37 8a48 	vsub.f32	s16, s14, s16
 80241be:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80241c2:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80241c6:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80241ca:	ee18 2a10 	vmov	r2, s16
 80241ce:	eeb0 8a47 	vmov.f32	s16, s14
 80241d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80241d6:	ee18 2a90 	vmov	r2, s17
 80241da:	9323      	str	r3, [sp, #140]	; 0x8c
 80241dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80241de:	eef0 8a67 	vmov.f32	s17, s15
 80241e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80241e6:	9324      	str	r3, [sp, #144]	; 0x90
 80241e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80241ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80241ec:	3b01      	subs	r3, #1
 80241ee:	930a      	str	r3, [sp, #40]	; 0x28
 80241f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80241f2:	bf08      	it	eq
 80241f4:	4613      	moveq	r3, r2
 80241f6:	9306      	str	r3, [sp, #24]
 80241f8:	e6d3      	b.n	8023fa2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80241fa:	b149      	cbz	r1, 8024210 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 80241fc:	5cba      	ldrb	r2, [r7, r2]
 80241fe:	4660      	mov	r0, ip
 8024200:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024204:	4422      	add	r2, r4
 8024206:	4666      	mov	r6, ip
 8024208:	e734      	b.n	8024074 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 802420a:	4660      	mov	r0, ip
 802420c:	4662      	mov	r2, ip
 802420e:	e731      	b.n	8024074 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8024210:	4660      	mov	r0, ip
 8024212:	4662      	mov	r2, ip
 8024214:	e7f7      	b.n	8024206 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8024216:	f110 0c01 	adds.w	ip, r0, #1
 802421a:	f53f af74 	bmi.w	8024106 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802421e:	4562      	cmp	r2, ip
 8024220:	f6ff af71 	blt.w	8024106 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024224:	f116 0c01 	adds.w	ip, r6, #1
 8024228:	f53f af6d 	bmi.w	8024106 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802422c:	4567      	cmp	r7, ip
 802422e:	f6ff af6a 	blt.w	8024106 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024232:	b23f      	sxth	r7, r7
 8024234:	b212      	sxth	r2, r2
 8024236:	9701      	str	r7, [sp, #4]
 8024238:	9200      	str	r2, [sp, #0]
 802423a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 802423e:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8024242:	4623      	mov	r3, r4
 8024244:	980d      	ldr	r0, [sp, #52]	; 0x34
 8024246:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 802424a:	f7ff fdc3 	bl	8023dd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 802424e:	e75a      	b.n	8024106 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8024250:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8024252:	ea4f 462b 	mov.w	r6, fp, asr #16
 8024256:	1428      	asrs	r0, r5, #16
 8024258:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802425c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8024260:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024264:	fb02 6000 	mla	r0, r2, r0, r6
 8024268:	9e08      	ldr	r6, [sp, #32]
 802426a:	f816 8000 	ldrb.w	r8, [r6, r0]
 802426e:	1837      	adds	r7, r6, r0
 8024270:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024274:	eb04 0c08 	add.w	ip, r4, r8
 8024278:	2b00      	cmp	r3, #0
 802427a:	d060      	beq.n	802433e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 802427c:	787e      	ldrb	r6, [r7, #1]
 802427e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024282:	4426      	add	r6, r4
 8024284:	2900      	cmp	r1, #0
 8024286:	d062      	beq.n	802434e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 8024288:	18b8      	adds	r0, r7, r2
 802428a:	5cba      	ldrb	r2, [r7, r2]
 802428c:	7840      	ldrb	r0, [r0, #1]
 802428e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024292:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024296:	4422      	add	r2, r4
 8024298:	4420      	add	r0, r4
 802429a:	b29b      	uxth	r3, r3
 802429c:	78b7      	ldrb	r7, [r6, #2]
 802429e:	b289      	uxth	r1, r1
 80242a0:	f89c a002 	ldrb.w	sl, [ip, #2]
 80242a4:	f89c c001 	ldrb.w	ip, [ip, #1]
 80242a8:	fb03 f901 	mul.w	r9, r3, r1
 80242ac:	011b      	lsls	r3, r3, #4
 80242ae:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80242b2:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80242b6:	eba3 0309 	sub.w	r3, r3, r9
 80242ba:	b289      	uxth	r1, r1
 80242bc:	b29b      	uxth	r3, r3
 80242be:	ebae 0e01 	sub.w	lr, lr, r1
 80242c2:	435f      	muls	r7, r3
 80242c4:	fa1f fe8e 	uxth.w	lr, lr
 80242c8:	fb0e 770a 	mla	r7, lr, sl, r7
 80242cc:	f892 a002 	ldrb.w	sl, [r2, #2]
 80242d0:	fb01 770a 	mla	r7, r1, sl, r7
 80242d4:	f890 a002 	ldrb.w	sl, [r0, #2]
 80242d8:	fb09 7a0a 	mla	sl, r9, sl, r7
 80242dc:	f814 7008 	ldrb.w	r7, [r4, r8]
 80242e0:	f896 8000 	ldrb.w	r8, [r6]
 80242e4:	7876      	ldrb	r6, [r6, #1]
 80242e6:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 80242ea:	fb03 f808 	mul.w	r8, r3, r8
 80242ee:	4373      	muls	r3, r6
 80242f0:	7856      	ldrb	r6, [r2, #1]
 80242f2:	fb0e 8807 	mla	r8, lr, r7, r8
 80242f6:	7817      	ldrb	r7, [r2, #0]
 80242f8:	fb0e 330c 	mla	r3, lr, ip, r3
 80242fc:	fb01 8807 	mla	r8, r1, r7, r8
 8024300:	7807      	ldrb	r7, [r0, #0]
 8024302:	fb01 3306 	mla	r3, r1, r6, r3
 8024306:	fb09 8707 	mla	r7, r9, r7, r8
 802430a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802430e:	ea47 070a 	orr.w	r7, r7, sl
 8024312:	f890 a001 	ldrb.w	sl, [r0, #1]
 8024316:	fb09 3a0a 	mla	sl, r9, sl, r3
 802431a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802431c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8024320:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8024324:	ea47 070a 	orr.w	r7, r7, sl
 8024328:	f823 7b02 	strh.w	r7, [r3], #2
 802432c:	930b      	str	r3, [sp, #44]	; 0x2c
 802432e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8024330:	449b      	add	fp, r3
 8024332:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024334:	441d      	add	r5, r3
 8024336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024338:	3b01      	subs	r3, #1
 802433a:	9309      	str	r3, [sp, #36]	; 0x24
 802433c:	e714      	b.n	8024168 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21c>
 802433e:	b149      	cbz	r1, 8024354 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x408>
 8024340:	5cba      	ldrb	r2, [r7, r2]
 8024342:	4660      	mov	r0, ip
 8024344:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024348:	4422      	add	r2, r4
 802434a:	4666      	mov	r6, ip
 802434c:	e7a5      	b.n	802429a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 802434e:	4660      	mov	r0, ip
 8024350:	4662      	mov	r2, ip
 8024352:	e7a2      	b.n	802429a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8024354:	4660      	mov	r0, ip
 8024356:	4662      	mov	r2, ip
 8024358:	e7f7      	b.n	802434a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 802435a:	b00f      	add	sp, #60	; 0x3c
 802435c:	ecbd 8b08 	vpop	{d8-d11}
 8024360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024364 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8024364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024368:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
 802436c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8024370:	2c00      	cmp	r4, #0
 8024372:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8024376:	fb04 560c 	mla	r6, r4, ip, r5
 802437a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 802437e:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8024382:	eb02 0e06 	add.w	lr, r2, r6
 8024386:	db3d      	blt.n	8024404 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 8024388:	45a0      	cmp	r8, r4
 802438a:	dd3b      	ble.n	8024404 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa0>
 802438c:	2d00      	cmp	r5, #0
 802438e:	db37      	blt.n	8024400 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8024390:	45ac      	cmp	ip, r5
 8024392:	dd35      	ble.n	8024400 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9c>
 8024394:	5d92      	ldrb	r2, [r2, r6]
 8024396:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802439a:	1c6e      	adds	r6, r5, #1
 802439c:	d435      	bmi.n	802440a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 802439e:	45b4      	cmp	ip, r6
 80243a0:	dd33      	ble.n	802440a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xa6>
 80243a2:	b3a0      	cbz	r0, 802440e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xaa>
 80243a4:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80243a8:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80243ac:	3401      	adds	r4, #1
 80243ae:	d432      	bmi.n	8024416 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 80243b0:	45a0      	cmp	r8, r4
 80243b2:	dd30      	ble.n	8024416 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb2>
 80243b4:	b397      	cbz	r7, 802441c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xb8>
 80243b6:	2d00      	cmp	r5, #0
 80243b8:	db2b      	blt.n	8024412 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 80243ba:	45ac      	cmp	ip, r5
 80243bc:	dd29      	ble.n	8024412 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xae>
 80243be:	f81e 400c 	ldrb.w	r4, [lr, ip]
 80243c2:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80243c6:	3501      	adds	r5, #1
 80243c8:	d42b      	bmi.n	8024422 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 80243ca:	45ac      	cmp	ip, r5
 80243cc:	dd29      	ble.n	8024422 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xbe>
 80243ce:	b350      	cbz	r0, 8024426 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc2>
 80243d0:	44f4      	add	ip, lr
 80243d2:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80243d6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80243da:	280f      	cmp	r0, #15
 80243dc:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80243e0:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 80243e4:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80243e8:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80243ec:	d801      	bhi.n	80243f2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x8e>
 80243ee:	2f0f      	cmp	r7, #15
 80243f0:	d91b      	bls.n	802442a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0xc6>
 80243f2:	4b8d      	ldr	r3, [pc, #564]	; (8024628 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c4>)
 80243f4:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80243f8:	4a8c      	ldr	r2, [pc, #560]	; (802462c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2c8>)
 80243fa:	488d      	ldr	r0, [pc, #564]	; (8024630 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2cc>)
 80243fc:	f005 fd28 	bl	8029e50 <__assert_func>
 8024400:	2200      	movs	r2, #0
 8024402:	e7ca      	b.n	802439a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x36>
 8024404:	2600      	movs	r6, #0
 8024406:	4632      	mov	r2, r6
 8024408:	e7d0      	b.n	80243ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 802440a:	2600      	movs	r6, #0
 802440c:	e7ce      	b.n	80243ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 802440e:	4606      	mov	r6, r0
 8024410:	e7cc      	b.n	80243ac <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x48>
 8024412:	2400      	movs	r4, #0
 8024414:	e7d7      	b.n	80243c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x62>
 8024416:	2300      	movs	r3, #0
 8024418:	461c      	mov	r4, r3
 802441a:	e7de      	b.n	80243da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 802441c:	463b      	mov	r3, r7
 802441e:	463c      	mov	r4, r7
 8024420:	e7db      	b.n	80243da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8024422:	2300      	movs	r3, #0
 8024424:	e7d9      	b.n	80243da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 8024426:	4603      	mov	r3, r0
 8024428:	e7d7      	b.n	80243da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x76>
 802442a:	b280      	uxth	r0, r0
 802442c:	b2bf      	uxth	r7, r7
 802442e:	fb07 fe00 	mul.w	lr, r7, r0
 8024432:	0100      	lsls	r0, r0, #4
 8024434:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8024438:	eba0 0c0e 	sub.w	ip, r0, lr
 802443c:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8024440:	b2bf      	uxth	r7, r7
 8024442:	fa1f fc8c 	uxth.w	ip, ip
 8024446:	1bed      	subs	r5, r5, r7
 8024448:	fb0a f00c 	mul.w	r0, sl, ip
 802444c:	b2ad      	uxth	r5, r5
 802444e:	fb0b 0005 	mla	r0, fp, r5, r0
 8024452:	fb07 0009 	mla	r0, r7, r9, r0
 8024456:	fb0e 0008 	mla	r0, lr, r8, r0
 802445a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802445e:	9001      	str	r0, [sp, #4]
 8024460:	2800      	cmp	r0, #0
 8024462:	f000 80de 	beq.w	8024622 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x2be>
 8024466:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 802446a:	d018      	beq.n	802449e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x13a>
 802446c:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8024470:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024474:	fb0b f000 	mul.w	r0, fp, r0
 8024478:	fb0b fb02 	mul.w	fp, fp, r2
 802447c:	0a02      	lsrs	r2, r0, #8
 802447e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8024482:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024486:	4402      	add	r2, r0
 8024488:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 802448c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8024490:	0a12      	lsrs	r2, r2, #8
 8024492:	0a00      	lsrs	r0, r0, #8
 8024494:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024498:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802449c:	4302      	orrs	r2, r0
 802449e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80244a2:	d01a      	beq.n	80244da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x176>
 80244a4:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 80244a8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80244ac:	fb0a f000 	mul.w	r0, sl, r0
 80244b0:	fb0a fa06 	mul.w	sl, sl, r6
 80244b4:	0a06      	lsrs	r6, r0, #8
 80244b6:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80244ba:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80244be:	4406      	add	r6, r0
 80244c0:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80244c4:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80244c8:	0a36      	lsrs	r6, r6, #8
 80244ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80244ce:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 80244d2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80244d6:	ea46 060a 	orr.w	r6, r6, sl
 80244da:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80244de:	d01b      	beq.n	8024518 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1b4>
 80244e0:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 80244e4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80244e8:	fb09 fa0a 	mul.w	sl, r9, sl
 80244ec:	fb09 f004 	mul.w	r0, r9, r4
 80244f0:	ea4f 241a 	mov.w	r4, sl, lsr #8
 80244f4:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80244f8:	f500 7980 	add.w	r9, r0, #256	; 0x100
 80244fc:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024500:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8024504:	4454      	add	r4, sl
 8024506:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802450a:	0a24      	lsrs	r4, r4, #8
 802450c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024510:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024514:	ea44 0409 	orr.w	r4, r4, r9
 8024518:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802451c:	d01b      	beq.n	8024556 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x1f2>
 802451e:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8024522:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024526:	fb08 f909 	mul.w	r9, r8, r9
 802452a:	fb08 f003 	mul.w	r0, r8, r3
 802452e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8024532:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8024536:	f500 7880 	add.w	r8, r0, #256	; 0x100
 802453a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802453e:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8024542:	444b      	add	r3, r9
 8024544:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024548:	0a1b      	lsrs	r3, r3, #8
 802454a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802454e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024552:	ea43 0308 	orr.w	r3, r3, r8
 8024556:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 802455a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 802455e:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8024562:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024566:	fb0c f808 	mul.w	r8, ip, r8
 802456a:	8808      	ldrh	r0, [r1, #0]
 802456c:	fb0c f606 	mul.w	r6, ip, r6
 8024570:	fb05 8909 	mla	r9, r5, r9, r8
 8024574:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8024578:	fb05 6502 	mla	r5, r5, r2, r6
 802457c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024580:	fb07 9908 	mla	r9, r7, r8, r9
 8024584:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8024588:	fb07 5704 	mla	r7, r7, r4, r5
 802458c:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8024590:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024594:	b2b6      	uxth	r6, r6
 8024596:	fb0e 9808 	mla	r8, lr, r8, r9
 802459a:	9a01      	ldr	r2, [sp, #4]
 802459c:	fb0e 7e03 	mla	lr, lr, r3, r7
 80245a0:	1205      	asrs	r5, r0, #8
 80245a2:	4372      	muls	r2, r6
 80245a4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80245a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80245ac:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80245b0:	1c53      	adds	r3, r2, #1
 80245b2:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 80245b6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80245ba:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80245be:	ea48 0e0e 	orr.w	lr, r8, lr
 80245c2:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80245c6:	ea4f 421e 	mov.w	r2, lr, lsr #16
 80245ca:	f3ce 2407 	ubfx	r4, lr, #8, #8
 80245ce:	b2db      	uxtb	r3, r3
 80245d0:	fb12 f206 	smulbb	r2, r2, r6
 80245d4:	fa5f fe8e 	uxtb.w	lr, lr
 80245d8:	fb14 f406 	smulbb	r4, r4, r6
 80245dc:	fb05 2503 	mla	r5, r5, r3, r2
 80245e0:	10c2      	asrs	r2, r0, #3
 80245e2:	fb1e fe06 	smulbb	lr, lr, r6
 80245e6:	00c0      	lsls	r0, r0, #3
 80245e8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80245ec:	b2ad      	uxth	r5, r5
 80245ee:	b2c0      	uxtb	r0, r0
 80245f0:	fb02 4203 	mla	r2, r2, r3, r4
 80245f4:	fb00 e303 	mla	r3, r0, r3, lr
 80245f8:	b294      	uxth	r4, r2
 80245fa:	b298      	uxth	r0, r3
 80245fc:	1c6b      	adds	r3, r5, #1
 80245fe:	1c62      	adds	r2, r4, #1
 8024600:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024604:	1c43      	adds	r3, r0, #1
 8024606:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802460a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802460e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8024612:	0952      	lsrs	r2, r2, #5
 8024614:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024618:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802461c:	432b      	orrs	r3, r5
 802461e:	4313      	orrs	r3, r2
 8024620:	800b      	strh	r3, [r1, #0]
 8024622:	b003      	add	sp, #12
 8024624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024628:	08031892 	.word	0x08031892
 802462c:	08031e62 	.word	0x08031e62
 8024630:	08031916 	.word	0x08031916

08024634 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024638:	ed2d 8b08 	vpush	{d8-d11}
 802463c:	b09f      	sub	sp, #124	; 0x7c
 802463e:	eeb0 aa40 	vmov.f32	s20, s0
 8024642:	eef0 9a60 	vmov.f32	s19, s1
 8024646:	921b      	str	r2, [sp, #108]	; 0x6c
 8024648:	eeb0 9a41 	vmov.f32	s18, s2
 802464c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 802464e:	eeb0 8a62 	vmov.f32	s16, s5
 8024652:	9309      	str	r3, [sp, #36]	; 0x24
 8024654:	eef0 8a43 	vmov.f32	s17, s6
 8024658:	f89d 30e4 	ldrb.w	r3, [sp, #228]	; 0xe4
 802465c:	eef0 ba44 	vmov.f32	s23, s8
 8024660:	901d      	str	r0, [sp, #116]	; 0x74
 8024662:	eeb0 ba64 	vmov.f32	s22, s9
 8024666:	931c      	str	r3, [sp, #112]	; 0x70
 8024668:	eef0 aa45 	vmov.f32	s21, s10
 802466c:	6850      	ldr	r0, [r2, #4]
 802466e:	9119      	str	r1, [sp, #100]	; 0x64
 8024670:	6812      	ldr	r2, [r2, #0]
 8024672:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8024674:	e9dd 1336 	ldrd	r1, r3, [sp, #216]	; 0xd8
 8024678:	fb00 1303 	mla	r3, r0, r3, r1
 802467c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024680:	930c      	str	r3, [sp, #48]	; 0x30
 8024682:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024684:	681b      	ldr	r3, [r3, #0]
 8024686:	9312      	str	r3, [sp, #72]	; 0x48
 8024688:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 802468a:	685e      	ldr	r6, [r3, #4]
 802468c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8024690:	3604      	adds	r6, #4
 8024692:	930d      	str	r3, [sp, #52]	; 0x34
 8024694:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024696:	2b00      	cmp	r3, #0
 8024698:	dc03      	bgt.n	80246a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802469a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802469c:	2b00      	cmp	r3, #0
 802469e:	f340 8387 	ble.w	8024db0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 80246a2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80246a4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80246a8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80246ac:	1e48      	subs	r0, r1, #1
 80246ae:	1e57      	subs	r7, r2, #1
 80246b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80246b2:	2b00      	cmp	r3, #0
 80246b4:	f340 8194 	ble.w	80249e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 80246b8:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80246ba:	142b      	asrs	r3, r5, #16
 80246bc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80246c0:	d406      	bmi.n	80246d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80246c2:	4584      	cmp	ip, r0
 80246c4:	da04      	bge.n	80246d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80246c6:	2b00      	cmp	r3, #0
 80246c8:	db02      	blt.n	80246d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80246ca:	42bb      	cmp	r3, r7
 80246cc:	f2c0 8189 	blt.w	80249e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80246d0:	f11c 0c01 	adds.w	ip, ip, #1
 80246d4:	f100 8177 	bmi.w	80249c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80246d8:	4561      	cmp	r1, ip
 80246da:	f2c0 8174 	blt.w	80249c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80246de:	3301      	adds	r3, #1
 80246e0:	f100 8171 	bmi.w	80249c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80246e4:	429a      	cmp	r2, r3
 80246e6:	f2c0 816e 	blt.w	80249c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80246ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80246ec:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80246ee:	931a      	str	r3, [sp, #104]	; 0x68
 80246f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80246f2:	2b00      	cmp	r3, #0
 80246f4:	f340 8193 	ble.w	8024a1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80246f8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80246fa:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80246fe:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024702:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024706:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024708:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 802470c:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 802470e:	141b      	asrs	r3, r3, #16
 8024710:	f100 81d6 	bmi.w	8024ac0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8024714:	f100 38ff 	add.w	r8, r0, #4294967295
 8024718:	4543      	cmp	r3, r8
 802471a:	f280 81d1 	bge.w	8024ac0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 802471e:	f1bc 0f00 	cmp.w	ip, #0
 8024722:	f2c0 81cd 	blt.w	8024ac0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8024726:	f10e 38ff 	add.w	r8, lr, #4294967295
 802472a:	45c4      	cmp	ip, r8
 802472c:	f280 81c8 	bge.w	8024ac0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8024730:	b200      	sxth	r0, r0
 8024732:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024734:	fb0c 3300 	mla	r3, ip, r0, r3
 8024738:	eb04 0803 	add.w	r8, r4, r3
 802473c:	5ce3      	ldrb	r3, [r4, r3]
 802473e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024742:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024746:	2a00      	cmp	r2, #0
 8024748:	f000 81af 	beq.w	8024aaa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802474c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024750:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024754:	940e      	str	r4, [sp, #56]	; 0x38
 8024756:	0e24      	lsrs	r4, r4, #24
 8024758:	9415      	str	r4, [sp, #84]	; 0x54
 802475a:	b179      	cbz	r1, 802477c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802475c:	eb08 0c00 	add.w	ip, r8, r0
 8024760:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024764:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024768:	900a      	str	r0, [sp, #40]	; 0x28
 802476a:	0e00      	lsrs	r0, r0, #24
 802476c:	9013      	str	r0, [sp, #76]	; 0x4c
 802476e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8024772:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024776:	900f      	str	r0, [sp, #60]	; 0x3c
 8024778:	0e00      	lsrs	r0, r0, #24
 802477a:	9016      	str	r0, [sp, #88]	; 0x58
 802477c:	b292      	uxth	r2, r2
 802477e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8024780:	b289      	uxth	r1, r1
 8024782:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024784:	fb02 f901 	mul.w	r9, r2, r1
 8024788:	0112      	lsls	r2, r2, #4
 802478a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802478e:	eba2 0809 	sub.w	r8, r2, r9
 8024792:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024796:	b289      	uxth	r1, r1
 8024798:	fa1f f888 	uxth.w	r8, r8
 802479c:	1a52      	subs	r2, r2, r1
 802479e:	fb08 f000 	mul.w	r0, r8, r0
 80247a2:	b292      	uxth	r2, r2
 80247a4:	fb02 000e 	mla	r0, r2, lr, r0
 80247a8:	fb01 0004 	mla	r0, r1, r4, r0
 80247ac:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80247ae:	fb09 0004 	mla	r0, r9, r4, r0
 80247b2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80247b6:	2800      	cmp	r0, #0
 80247b8:	f000 80fa 	beq.w	80249b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80247bc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80247c0:	d01b      	beq.n	80247fa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80247c2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80247c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80247ca:	fb0e fa0a 	mul.w	sl, lr, sl
 80247ce:	fb0e fe03 	mul.w	lr, lr, r3
 80247d2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80247d6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80247da:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80247de:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80247e2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80247e6:	4453      	add	r3, sl
 80247e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80247ec:	0a1b      	lsrs	r3, r3, #8
 80247ee:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80247f2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80247f6:	ea43 030c 	orr.w	r3, r3, ip
 80247fa:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80247fc:	2cff      	cmp	r4, #255	; 0xff
 80247fe:	d021      	beq.n	8024844 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8024800:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024802:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024806:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024808:	fb04 fb0b 	mul.w	fp, r4, fp
 802480c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802480e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024812:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024814:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024818:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802481c:	fb04 fa0a 	mul.w	sl, r4, sl
 8024820:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024824:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024828:	44de      	add	lr, fp
 802482a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802482e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024832:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024836:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802483a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802483e:	ea4e 040a 	orr.w	r4, lr, sl
 8024842:	940e      	str	r4, [sp, #56]	; 0x38
 8024844:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024846:	2cff      	cmp	r4, #255	; 0xff
 8024848:	d021      	beq.n	802488e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802484a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802484c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024850:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024852:	fb04 fb0b 	mul.w	fp, r4, fp
 8024856:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024858:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802485c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802485e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024862:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024866:	fb04 fa0a 	mul.w	sl, r4, sl
 802486a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802486e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024872:	44de      	add	lr, fp
 8024874:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024878:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802487c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024880:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024884:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024888:	ea4e 040a 	orr.w	r4, lr, sl
 802488c:	940a      	str	r4, [sp, #40]	; 0x28
 802488e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8024890:	2cff      	cmp	r4, #255	; 0xff
 8024892:	d021      	beq.n	80248d8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8024894:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024896:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802489a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802489c:	fb04 fb0b 	mul.w	fp, r4, fp
 80248a0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80248a2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80248a6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80248a8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80248ac:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80248b0:	fb04 fa0a 	mul.w	sl, r4, sl
 80248b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80248b8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80248bc:	44de      	add	lr, fp
 80248be:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80248c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80248c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80248ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80248ce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80248d2:	ea4e 040a 	orr.w	r4, lr, sl
 80248d6:	940f      	str	r4, [sp, #60]	; 0x3c
 80248d8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80248da:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80248de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80248e2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80248e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80248e8:	fb08 fc0c 	mul.w	ip, r8, ip
 80248ec:	fb02 cc0e 	mla	ip, r2, lr, ip
 80248f0:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80248f4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80248f6:	fb01 cc0e 	mla	ip, r1, lr, ip
 80248fa:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80248fe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024900:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024904:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8024908:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802490a:	fb08 f80e 	mul.w	r8, r8, lr
 802490e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024912:	fb02 8303 	mla	r3, r2, r3, r8
 8024916:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024918:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802491c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024920:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8024922:	fb01 330a 	mla	r3, r1, sl, r3
 8024926:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802492a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802492c:	fb09 3901 	mla	r9, r9, r1, r3
 8024930:	883b      	ldrh	r3, [r7, #0]
 8024932:	4342      	muls	r2, r0
 8024934:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024938:	1c50      	adds	r0, r2, #1
 802493a:	1219      	asrs	r1, r3, #8
 802493c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8024940:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8024944:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8024948:	ea4c 0c09 	orr.w	ip, ip, r9
 802494c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8024950:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8024954:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8024958:	b2c0      	uxtb	r0, r0
 802495a:	fb12 f204 	smulbb	r2, r2, r4
 802495e:	fa5f fc8c 	uxtb.w	ip, ip
 8024962:	fb1e fe04 	smulbb	lr, lr, r4
 8024966:	fb01 2100 	mla	r1, r1, r0, r2
 802496a:	10da      	asrs	r2, r3, #3
 802496c:	fb1c fc04 	smulbb	ip, ip, r4
 8024970:	00db      	lsls	r3, r3, #3
 8024972:	b289      	uxth	r1, r1
 8024974:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8024978:	b2db      	uxtb	r3, r3
 802497a:	fb02 e200 	mla	r2, r2, r0, lr
 802497e:	fb03 c300 	mla	r3, r3, r0, ip
 8024982:	b292      	uxth	r2, r2
 8024984:	fa1f fc83 	uxth.w	ip, r3
 8024988:	1c4b      	adds	r3, r1, #1
 802498a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802498e:	f10c 0301 	add.w	r3, ip, #1
 8024992:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8024996:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802499a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802499e:	430b      	orrs	r3, r1
 80249a0:	1c51      	adds	r1, r2, #1
 80249a2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80249a6:	0952      	lsrs	r2, r2, #5
 80249a8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80249ac:	4313      	orrs	r3, r2
 80249ae:	803b      	strh	r3, [r7, #0]
 80249b0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80249b2:	3702      	adds	r7, #2
 80249b4:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80249b6:	441a      	add	r2, r3
 80249b8:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80249ba:	441d      	add	r5, r3
 80249bc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80249be:	9231      	str	r2, [sp, #196]	; 0xc4
 80249c0:	3b01      	subs	r3, #1
 80249c2:	931a      	str	r3, [sp, #104]	; 0x68
 80249c4:	e694      	b.n	80246f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbc>
 80249c6:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80249c8:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80249ca:	441c      	add	r4, r3
 80249cc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80249ce:	441d      	add	r5, r3
 80249d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80249d2:	9431      	str	r4, [sp, #196]	; 0xc4
 80249d4:	3b01      	subs	r3, #1
 80249d6:	9309      	str	r3, [sp, #36]	; 0x24
 80249d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80249da:	3302      	adds	r3, #2
 80249dc:	930c      	str	r3, [sp, #48]	; 0x30
 80249de:	e667      	b.n	80246b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80249e0:	d024      	beq.n	8024a2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80249e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80249e4:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80249e6:	3b01      	subs	r3, #1
 80249e8:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 80249ea:	fb00 4003 	mla	r0, r0, r3, r4
 80249ee:	1400      	asrs	r0, r0, #16
 80249f0:	f53f ae7b 	bmi.w	80246ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80249f4:	3901      	subs	r1, #1
 80249f6:	4288      	cmp	r0, r1
 80249f8:	f6bf ae77 	bge.w	80246ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 80249fc:	9934      	ldr	r1, [sp, #208]	; 0xd0
 80249fe:	fb01 5303 	mla	r3, r1, r3, r5
 8024a02:	141b      	asrs	r3, r3, #16
 8024a04:	f53f ae71 	bmi.w	80246ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024a08:	3a01      	subs	r2, #1
 8024a0a:	4293      	cmp	r3, r2
 8024a0c:	f6bf ae6d 	bge.w	80246ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8024a10:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8024a14:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8024a18:	f1bb 0f00 	cmp.w	fp, #0
 8024a1c:	dc70      	bgt.n	8024b00 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 8024a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024a20:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024a24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024a26:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8024a2a:	930c      	str	r3, [sp, #48]	; 0x30
 8024a2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024a2e:	2b00      	cmp	r3, #0
 8024a30:	f340 81be 	ble.w	8024db0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x77c>
 8024a34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024a38:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024a3a:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8024a3e:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8024a42:	eef0 6a48 	vmov.f32	s13, s16
 8024a46:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8024a4a:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8024a4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024a52:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8024a56:	eef0 6a68 	vmov.f32	s13, s17
 8024a5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024a5e:	ee16 5a90 	vmov	r5, s13
 8024a62:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8024a66:	ee69 7a27 	vmul.f32	s15, s18, s15
 8024a6a:	ee37 8a48 	vsub.f32	s16, s14, s16
 8024a6e:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8024a72:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8024a76:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8024a7a:	ee18 2a10 	vmov	r2, s16
 8024a7e:	eeb0 8a47 	vmov.f32	s16, s14
 8024a82:	fb92 f3f3 	sdiv	r3, r2, r3
 8024a86:	ee18 2a90 	vmov	r2, s17
 8024a8a:	9333      	str	r3, [sp, #204]	; 0xcc
 8024a8c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024a8e:	eef0 8a67 	vmov.f32	s17, s15
 8024a92:	fb92 f3f3 	sdiv	r3, r2, r3
 8024a96:	9334      	str	r3, [sp, #208]	; 0xd0
 8024a98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024a9a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8024a9c:	3b01      	subs	r3, #1
 8024a9e:	9319      	str	r3, [sp, #100]	; 0x64
 8024aa0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024aa2:	bf08      	it	eq
 8024aa4:	4613      	moveq	r3, r2
 8024aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8024aa8:	e5f4      	b.n	8024694 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8024aaa:	2900      	cmp	r1, #0
 8024aac:	f43f ae66 	beq.w	802477c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8024ab0:	f818 0000 	ldrb.w	r0, [r8, r0]
 8024ab4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8024ab8:	900a      	str	r0, [sp, #40]	; 0x28
 8024aba:	0e00      	lsrs	r0, r0, #24
 8024abc:	9013      	str	r0, [sp, #76]	; 0x4c
 8024abe:	e65d      	b.n	802477c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8024ac0:	f113 0801 	adds.w	r8, r3, #1
 8024ac4:	f53f af74 	bmi.w	80249b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024ac8:	4540      	cmp	r0, r8
 8024aca:	f6ff af71 	blt.w	80249b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024ace:	f11c 0801 	adds.w	r8, ip, #1
 8024ad2:	f53f af6d 	bmi.w	80249b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024ad6:	45c6      	cmp	lr, r8
 8024ad8:	f6ff af6a 	blt.w	80249b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024adc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8024ade:	b200      	sxth	r0, r0
 8024ae0:	9302      	str	r3, [sp, #8]
 8024ae2:	fa0f f38e 	sxth.w	r3, lr
 8024ae6:	9000      	str	r0, [sp, #0]
 8024ae8:	9301      	str	r3, [sp, #4]
 8024aea:	4633      	mov	r3, r6
 8024aec:	981d      	ldr	r0, [sp, #116]	; 0x74
 8024aee:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024af2:	e9cd c203 	strd	ip, r2, [sp, #12]
 8024af6:	4639      	mov	r1, r7
 8024af8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024afa:	f7ff fc33 	bl	8024364 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 8024afe:	e757      	b.n	80249b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8024b00:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8024b02:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024b06:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8024b08:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024b0c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8024b0e:	1427      	asrs	r7, r4, #16
 8024b10:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024b12:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024b16:	142b      	asrs	r3, r5, #16
 8024b18:	fb01 7303 	mla	r3, r1, r3, r7
 8024b1c:	18e7      	adds	r7, r4, r3
 8024b1e:	5ce3      	ldrb	r3, [r4, r3]
 8024b20:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024b24:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024b28:	2a00      	cmp	r2, #0
 8024b2a:	f000 8137 	beq.w	8024d9c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x768>
 8024b2e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8024b32:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8024b36:	9410      	str	r4, [sp, #64]	; 0x40
 8024b38:	0e24      	lsrs	r4, r4, #24
 8024b3a:	9417      	str	r4, [sp, #92]	; 0x5c
 8024b3c:	b170      	cbz	r0, 8024b5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8024b3e:	eb07 0e01 	add.w	lr, r7, r1
 8024b42:	5c79      	ldrb	r1, [r7, r1]
 8024b44:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024b48:	910b      	str	r1, [sp, #44]	; 0x2c
 8024b4a:	0e09      	lsrs	r1, r1, #24
 8024b4c:	9114      	str	r1, [sp, #80]	; 0x50
 8024b4e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8024b52:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024b56:	9111      	str	r1, [sp, #68]	; 0x44
 8024b58:	0e09      	lsrs	r1, r1, #24
 8024b5a:	9118      	str	r1, [sp, #96]	; 0x60
 8024b5c:	b292      	uxth	r2, r2
 8024b5e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8024b60:	b280      	uxth	r0, r0
 8024b62:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024b64:	fb02 f800 	mul.w	r8, r2, r0
 8024b68:	0112      	lsls	r2, r2, #4
 8024b6a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8024b6e:	eba2 0e08 	sub.w	lr, r2, r8
 8024b72:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024b76:	b280      	uxth	r0, r0
 8024b78:	fa1f fe8e 	uxth.w	lr, lr
 8024b7c:	1a12      	subs	r2, r2, r0
 8024b7e:	fb0e f101 	mul.w	r1, lr, r1
 8024b82:	b292      	uxth	r2, r2
 8024b84:	fb02 110c 	mla	r1, r2, ip, r1
 8024b88:	fb00 1104 	mla	r1, r0, r4, r1
 8024b8c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024b8e:	fb08 1104 	mla	r1, r8, r4, r1
 8024b92:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024b96:	2900      	cmp	r1, #0
 8024b98:	f000 80f5 	beq.w	8024d86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x752>
 8024b9c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8024ba0:	d019      	beq.n	8024bd6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a2>
 8024ba2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024ba6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024baa:	fb0c fa0a 	mul.w	sl, ip, sl
 8024bae:	fb0c fc03 	mul.w	ip, ip, r3
 8024bb2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024bb6:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024bba:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024bbe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024bc2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024bc6:	4453      	add	r3, sl
 8024bc8:	0a3f      	lsrs	r7, r7, #8
 8024bca:	0a1b      	lsrs	r3, r3, #8
 8024bcc:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024bd0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024bd4:	433b      	orrs	r3, r7
 8024bd6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024bd8:	2cff      	cmp	r4, #255	; 0xff
 8024bda:	d020      	beq.n	8024c1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 8024bdc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024bde:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024be2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024be4:	4367      	muls	r7, r4
 8024be6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024be8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024bec:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024bf0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024bf2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024bf6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024bfa:	fb04 fa0a 	mul.w	sl, r4, sl
 8024bfe:	44bc      	add	ip, r7
 8024c00:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024c04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024c08:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024c0c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c10:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024c14:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024c18:	ea4c 040a 	orr.w	r4, ip, sl
 8024c1c:	9410      	str	r4, [sp, #64]	; 0x40
 8024c1e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024c20:	2cff      	cmp	r4, #255	; 0xff
 8024c22:	d020      	beq.n	8024c66 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x632>
 8024c24:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024c26:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024c2a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024c2c:	4367      	muls	r7, r4
 8024c2e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024c30:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024c34:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024c38:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024c3a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024c3e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c42:	fb04 fa0a 	mul.w	sl, r4, sl
 8024c46:	44bc      	add	ip, r7
 8024c48:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024c4c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024c50:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024c54:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c58:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024c5c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024c60:	ea4c 040a 	orr.w	r4, ip, sl
 8024c64:	940b      	str	r4, [sp, #44]	; 0x2c
 8024c66:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024c68:	2cff      	cmp	r4, #255	; 0xff
 8024c6a:	d020      	beq.n	8024cae <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x67a>
 8024c6c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024c6e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024c72:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024c74:	4367      	muls	r7, r4
 8024c76:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024c78:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024c7c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024c80:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8024c82:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024c86:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c8a:	fb04 fa0a 	mul.w	sl, r4, sl
 8024c8e:	44bc      	add	ip, r7
 8024c90:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024c94:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024c98:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024c9c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024ca0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024ca4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024ca8:	ea4c 040a 	orr.w	r4, ip, sl
 8024cac:	9411      	str	r4, [sp, #68]	; 0x44
 8024cae:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024cb0:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8024cb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024cb8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024cbc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024cbe:	fb0e f707 	mul.w	r7, lr, r7
 8024cc2:	fb02 770c 	mla	r7, r2, ip, r7
 8024cc6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024cca:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024ccc:	fb00 770c 	mla	r7, r0, ip, r7
 8024cd0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024cd4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024cd6:	fb08 770c 	mla	r7, r8, ip, r7
 8024cda:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8024cde:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024ce0:	fb0e fe0c 	mul.w	lr, lr, ip
 8024ce4:	0a3f      	lsrs	r7, r7, #8
 8024ce6:	fb02 e303 	mla	r3, r2, r3, lr
 8024cea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024cec:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024cf0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024cf4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024cf6:	fb00 330a 	mla	r3, r0, sl, r3
 8024cfa:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8024cfe:	f8b9 0000 	ldrh.w	r0, [r9]
 8024d02:	fb08 3c0c 	mla	ip, r8, ip, r3
 8024d06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024d08:	1202      	asrs	r2, r0, #8
 8024d0a:	434b      	muls	r3, r1
 8024d0c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024d10:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024d14:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024d18:	1c59      	adds	r1, r3, #1
 8024d1a:	ea47 070c 	orr.w	r7, r7, ip
 8024d1e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024d22:	0c3b      	lsrs	r3, r7, #16
 8024d24:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8024d28:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8024d2c:	b2ff      	uxtb	r7, r7
 8024d2e:	fb13 f304 	smulbb	r3, r3, r4
 8024d32:	b2c9      	uxtb	r1, r1
 8024d34:	fb1c fc04 	smulbb	ip, ip, r4
 8024d38:	fb02 3201 	mla	r2, r2, r1, r3
 8024d3c:	10c3      	asrs	r3, r0, #3
 8024d3e:	fb17 f704 	smulbb	r7, r7, r4
 8024d42:	00c0      	lsls	r0, r0, #3
 8024d44:	b292      	uxth	r2, r2
 8024d46:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8024d4a:	b2c0      	uxtb	r0, r0
 8024d4c:	fb03 c301 	mla	r3, r3, r1, ip
 8024d50:	f102 0c01 	add.w	ip, r2, #1
 8024d54:	fb00 7001 	mla	r0, r0, r1, r7
 8024d58:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024d5c:	b280      	uxth	r0, r0
 8024d5e:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8024d62:	b29b      	uxth	r3, r3
 8024d64:	1c42      	adds	r2, r0, #1
 8024d66:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024d6a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024d6e:	ea42 020c 	orr.w	r2, r2, ip
 8024d72:	f103 0c01 	add.w	ip, r3, #1
 8024d76:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024d7a:	095b      	lsrs	r3, r3, #5
 8024d7c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024d80:	431a      	orrs	r2, r3
 8024d82:	f8a9 2000 	strh.w	r2, [r9]
 8024d86:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8024d88:	f109 0902 	add.w	r9, r9, #2
 8024d8c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8024d8e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024d92:	441a      	add	r2, r3
 8024d94:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8024d96:	9231      	str	r2, [sp, #196]	; 0xc4
 8024d98:	441d      	add	r5, r3
 8024d9a:	e63d      	b.n	8024a18 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 8024d9c:	2800      	cmp	r0, #0
 8024d9e:	f43f aedd 	beq.w	8024b5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8024da2:	5c79      	ldrb	r1, [r7, r1]
 8024da4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024da8:	910b      	str	r1, [sp, #44]	; 0x2c
 8024daa:	0e09      	lsrs	r1, r1, #24
 8024dac:	9114      	str	r1, [sp, #80]	; 0x50
 8024dae:	e6d5      	b.n	8024b5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x528>
 8024db0:	b01f      	add	sp, #124	; 0x7c
 8024db2:	ecbd 8b08 	vpop	{d8-d11}
 8024db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024dbc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8024dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024dc0:	880e      	ldrh	r6, [r1, #0]
 8024dc2:	b085      	sub	sp, #20
 8024dc4:	4691      	mov	r9, r2
 8024dc6:	ea4f 2826 	mov.w	r8, r6, asr #8
 8024dca:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8024dce:	f9bd e03c 	ldrsh.w	lr, [sp, #60]	; 0x3c
 8024dd2:	f008 02f8 	and.w	r2, r8, #248	; 0xf8
 8024dd6:	ea4f 08e6 	mov.w	r8, r6, asr #3
 8024dda:	00f6      	lsls	r6, r6, #3
 8024ddc:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8024de0:	9200      	str	r2, [sp, #0]
 8024de2:	f008 02fc 	and.w	r2, r8, #252	; 0xfc
 8024de6:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8024dea:	9201      	str	r2, [sp, #4]
 8024dec:	b2f2      	uxtb	r2, r6
 8024dee:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
 8024df2:	9202      	str	r2, [sp, #8]
 8024df4:	fb04 560c 	mla	r6, r4, ip, r5
 8024df8:	2c00      	cmp	r4, #0
 8024dfa:	eb09 0806 	add.w	r8, r9, r6
 8024dfe:	db3f      	blt.n	8024e80 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8024e00:	45a6      	cmp	lr, r4
 8024e02:	dd3d      	ble.n	8024e80 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc4>
 8024e04:	2d00      	cmp	r5, #0
 8024e06:	db39      	blt.n	8024e7c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8024e08:	45ac      	cmp	ip, r5
 8024e0a:	dd37      	ble.n	8024e7c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xc0>
 8024e0c:	f819 2006 	ldrb.w	r2, [r9, r6]
 8024e10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8024e14:	1c6e      	adds	r6, r5, #1
 8024e16:	d436      	bmi.n	8024e86 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8024e18:	45b4      	cmp	ip, r6
 8024e1a:	dd34      	ble.n	8024e86 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xca>
 8024e1c:	b3a8      	cbz	r0, 8024e8a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xce>
 8024e1e:	f898 6001 	ldrb.w	r6, [r8, #1]
 8024e22:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8024e26:	3401      	adds	r4, #1
 8024e28:	d433      	bmi.n	8024e92 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8024e2a:	45a6      	cmp	lr, r4
 8024e2c:	dd31      	ble.n	8024e92 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd6>
 8024e2e:	b39f      	cbz	r7, 8024e98 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xdc>
 8024e30:	2d00      	cmp	r5, #0
 8024e32:	eb08 0e0c 	add.w	lr, r8, ip
 8024e36:	db2a      	blt.n	8024e8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8024e38:	45ac      	cmp	ip, r5
 8024e3a:	dd28      	ble.n	8024e8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xd2>
 8024e3c:	f818 400c 	ldrb.w	r4, [r8, ip]
 8024e40:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8024e44:	3501      	adds	r5, #1
 8024e46:	d42a      	bmi.n	8024e9e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8024e48:	45ac      	cmp	ip, r5
 8024e4a:	dd28      	ble.n	8024e9e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe2>
 8024e4c:	b348      	cbz	r0, 8024ea2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xe6>
 8024e4e:	f89e 5001 	ldrb.w	r5, [lr, #1]
 8024e52:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8024e56:	280f      	cmp	r0, #15
 8024e58:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8024e5c:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8024e60:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8024e64:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8024e68:	d801      	bhi.n	8024e6e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb2>
 8024e6a:	2f0f      	cmp	r7, #15
 8024e6c:	d91b      	bls.n	8024ea6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xea>
 8024e6e:	4b7e      	ldr	r3, [pc, #504]	; (8025068 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2ac>)
 8024e70:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8024e74:	4a7d      	ldr	r2, [pc, #500]	; (802506c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b0>)
 8024e76:	487e      	ldr	r0, [pc, #504]	; (8025070 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x2b4>)
 8024e78:	f004 ffea 	bl	8029e50 <__assert_func>
 8024e7c:	2200      	movs	r2, #0
 8024e7e:	e7c9      	b.n	8024e14 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x58>
 8024e80:	2600      	movs	r6, #0
 8024e82:	4632      	mov	r2, r6
 8024e84:	e7cf      	b.n	8024e26 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8024e86:	2600      	movs	r6, #0
 8024e88:	e7cd      	b.n	8024e26 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8024e8a:	4606      	mov	r6, r0
 8024e8c:	e7cb      	b.n	8024e26 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x6a>
 8024e8e:	2400      	movs	r4, #0
 8024e90:	e7d8      	b.n	8024e44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x88>
 8024e92:	2300      	movs	r3, #0
 8024e94:	461c      	mov	r4, r3
 8024e96:	e7de      	b.n	8024e56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8024e98:	463b      	mov	r3, r7
 8024e9a:	463c      	mov	r4, r7
 8024e9c:	e7db      	b.n	8024e56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8024e9e:	2300      	movs	r3, #0
 8024ea0:	e7d9      	b.n	8024e56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8024ea2:	4603      	mov	r3, r0
 8024ea4:	e7d7      	b.n	8024e56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x9a>
 8024ea6:	b280      	uxth	r0, r0
 8024ea8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8024eac:	b2bf      	uxth	r7, r7
 8024eae:	fb00 fe07 	mul.w	lr, r0, r7
 8024eb2:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8024eb6:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 8024eba:	eba0 0c0e 	sub.w	ip, r0, lr
 8024ebe:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 8024ec2:	b2bf      	uxth	r7, r7
 8024ec4:	fa1f fc8c 	uxth.w	ip, ip
 8024ec8:	eba5 0507 	sub.w	r5, r5, r7
 8024ecc:	fb0c f00a 	mul.w	r0, ip, sl
 8024ed0:	b2ad      	uxth	r5, r5
 8024ed2:	fb05 000b 	mla	r0, r5, fp, r0
 8024ed6:	fb07 0009 	mla	r0, r7, r9, r0
 8024eda:	fb0e 0008 	mla	r0, lr, r8, r0
 8024ede:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024ee2:	9003      	str	r0, [sp, #12]
 8024ee4:	d018      	beq.n	8024f18 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x15c>
 8024ee6:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8024eea:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024eee:	fb0b f000 	mul.w	r0, fp, r0
 8024ef2:	fb0b fb02 	mul.w	fp, fp, r2
 8024ef6:	0a02      	lsrs	r2, r0, #8
 8024ef8:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8024efc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024f00:	4402      	add	r2, r0
 8024f02:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8024f06:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8024f0a:	0a12      	lsrs	r2, r2, #8
 8024f0c:	0a00      	lsrs	r0, r0, #8
 8024f0e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024f12:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024f16:	4302      	orrs	r2, r0
 8024f18:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024f1c:	d019      	beq.n	8024f52 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x196>
 8024f1e:	f006 1bff 	and.w	fp, r6, #16711935	; 0xff00ff
 8024f22:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024f26:	fb0a fb0b 	mul.w	fp, sl, fp
 8024f2a:	fb0a fa06 	mul.w	sl, sl, r6
 8024f2e:	ea4f 261b 	mov.w	r6, fp, lsr #8
 8024f32:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024f36:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8024f3a:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024f3e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8024f42:	445e      	add	r6, fp
 8024f44:	0a00      	lsrs	r0, r0, #8
 8024f46:	0a36      	lsrs	r6, r6, #8
 8024f48:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024f4c:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8024f50:	4306      	orrs	r6, r0
 8024f52:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024f56:	d019      	beq.n	8024f8c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x1d0>
 8024f58:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8024f5c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024f60:	fb09 fa0a 	mul.w	sl, r9, sl
 8024f64:	fb09 f904 	mul.w	r9, r9, r4
 8024f68:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8024f6c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024f70:	f509 7080 	add.w	r0, r9, #256	; 0x100
 8024f74:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024f78:	eb00 2019 	add.w	r0, r0, r9, lsr #8
 8024f7c:	4454      	add	r4, sl
 8024f7e:	0a00      	lsrs	r0, r0, #8
 8024f80:	0a24      	lsrs	r4, r4, #8
 8024f82:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024f86:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8024f8a:	4304      	orrs	r4, r0
 8024f8c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024f90:	d019      	beq.n	8024fc6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x20a>
 8024f92:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8024f96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024f9a:	fb08 f909 	mul.w	r9, r8, r9
 8024f9e:	fb08 f803 	mul.w	r8, r8, r3
 8024fa2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8024fa6:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8024faa:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8024fae:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024fb2:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8024fb6:	444b      	add	r3, r9
 8024fb8:	0a00      	lsrs	r0, r0, #8
 8024fba:	0a1b      	lsrs	r3, r3, #8
 8024fbc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024fc0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024fc4:	4303      	orrs	r3, r0
 8024fc6:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8024fca:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 8024fce:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024fd2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024fd6:	fb0c f808 	mul.w	r8, ip, r8
 8024fda:	fb0c f606 	mul.w	r6, ip, r6
 8024fde:	fb05 8800 	mla	r8, r5, r0, r8
 8024fe2:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
 8024fe6:	fb05 6202 	mla	r2, r5, r2, r6
 8024fea:	9d00      	ldr	r5, [sp, #0]
 8024fec:	fb07 8800 	mla	r8, r7, r0, r8
 8024ff0:	f003 10ff 	and.w	r0, r3, #16711935	; 0xff00ff
 8024ff4:	fb0e 8000 	mla	r0, lr, r0, r8
 8024ff8:	0a00      	lsrs	r0, r0, #8
 8024ffa:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8024ffe:	f404 407f 	and.w	r0, r4, #65280	; 0xff00
 8025002:	fb07 2700 	mla	r7, r7, r0, r2
 8025006:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 802500a:	9b03      	ldr	r3, [sp, #12]
 802500c:	fb0e 7000 	mla	r0, lr, r0, r7
 8025010:	9a02      	ldr	r2, [sp, #8]
 8025012:	43dc      	mvns	r4, r3
 8025014:	9b01      	ldr	r3, [sp, #4]
 8025016:	0a00      	lsrs	r0, r0, #8
 8025018:	b2e4      	uxtb	r4, r4
 802501a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802501e:	4363      	muls	r3, r4
 8025020:	4365      	muls	r5, r4
 8025022:	ea48 0000 	orr.w	r0, r8, r0
 8025026:	4362      	muls	r2, r4
 8025028:	1c5e      	adds	r6, r3, #1
 802502a:	4614      	mov	r4, r2
 802502c:	1c6a      	adds	r2, r5, #1
 802502e:	eb06 2613 	add.w	r6, r6, r3, lsr #8
 8025032:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8025036:	0a03      	lsrs	r3, r0, #8
 8025038:	0c02      	lsrs	r2, r0, #16
 802503a:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 802503e:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8025042:	00db      	lsls	r3, r3, #3
 8025044:	0212      	lsls	r2, r2, #8
 8025046:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802504a:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802504e:	4313      	orrs	r3, r2
 8025050:	1c62      	adds	r2, r4, #1
 8025052:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8025056:	eb00 2014 	add.w	r0, r0, r4, lsr #8
 802505a:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 802505e:	4318      	orrs	r0, r3
 8025060:	8008      	strh	r0, [r1, #0]
 8025062:	b005      	add	sp, #20
 8025064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025068:	08031892 	.word	0x08031892
 802506c:	08031e62 	.word	0x08031e62
 8025070:	08031916 	.word	0x08031916

08025074 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025078:	ed2d 8b08 	vpush	{d8-d11}
 802507c:	b09b      	sub	sp, #108	; 0x6c
 802507e:	eeb0 aa40 	vmov.f32	s20, s0
 8025082:	eef0 9a60 	vmov.f32	s19, s1
 8025086:	9218      	str	r2, [sp, #96]	; 0x60
 8025088:	eeb0 9a41 	vmov.f32	s18, s2
 802508c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 802508e:	eeb0 8a62 	vmov.f32	s16, s5
 8025092:	9019      	str	r0, [sp, #100]	; 0x64
 8025094:	eef0 8a43 	vmov.f32	s17, s6
 8025098:	6850      	ldr	r0, [r2, #4]
 802509a:	eef0 ba44 	vmov.f32	s23, s8
 802509e:	9116      	str	r1, [sp, #88]	; 0x58
 80250a0:	eeb0 ba64 	vmov.f32	s22, s9
 80250a4:	9307      	str	r3, [sp, #28]
 80250a6:	eef0 aa45 	vmov.f32	s21, s10
 80250aa:	6812      	ldr	r2, [r2, #0]
 80250ac:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 80250ae:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 80250b2:	fb00 1303 	mla	r3, r0, r3, r1
 80250b6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80250ba:	930a      	str	r3, [sp, #40]	; 0x28
 80250bc:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80250be:	681b      	ldr	r3, [r3, #0]
 80250c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80250c2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80250c4:	685e      	ldr	r6, [r3, #4]
 80250c6:	3604      	adds	r6, #4
 80250c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80250ca:	2b00      	cmp	r3, #0
 80250cc:	dc03      	bgt.n	80250d6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80250ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80250d0:	2b00      	cmp	r3, #0
 80250d2:	f340 8373 	ble.w	80257bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 80250d6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80250d8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80250dc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80250e0:	1e48      	subs	r0, r1, #1
 80250e2:	1e57      	subs	r7, r2, #1
 80250e4:	9b07      	ldr	r3, [sp, #28]
 80250e6:	2b00      	cmp	r3, #0
 80250e8:	f340 818f 	ble.w	802540a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 80250ec:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80250ee:	142b      	asrs	r3, r5, #16
 80250f0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80250f4:	d406      	bmi.n	8025104 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80250f6:	4584      	cmp	ip, r0
 80250f8:	da04      	bge.n	8025104 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80250fa:	2b00      	cmp	r3, #0
 80250fc:	db02      	blt.n	8025104 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80250fe:	42bb      	cmp	r3, r7
 8025100:	f2c0 8184 	blt.w	802540c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8025104:	f11c 0c01 	adds.w	ip, ip, #1
 8025108:	f100 8172 	bmi.w	80253f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802510c:	4561      	cmp	r1, ip
 802510e:	f2c0 816f 	blt.w	80253f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025112:	3301      	adds	r3, #1
 8025114:	f100 816c 	bmi.w	80253f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8025118:	429a      	cmp	r2, r3
 802511a:	f2c0 8169 	blt.w	80253f0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 802511e:	9b07      	ldr	r3, [sp, #28]
 8025120:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8025122:	9317      	str	r3, [sp, #92]	; 0x5c
 8025124:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8025126:	2b00      	cmp	r3, #0
 8025128:	f340 818e 	ble.w	8025448 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 802512c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802512e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8025132:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025136:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802513a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802513c:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8025140:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8025142:	141b      	asrs	r3, r3, #16
 8025144:	f100 81d1 	bmi.w	80254ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025148:	f101 38ff 	add.w	r8, r1, #4294967295
 802514c:	4543      	cmp	r3, r8
 802514e:	f280 81cc 	bge.w	80254ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025152:	f1bc 0f00 	cmp.w	ip, #0
 8025156:	f2c0 81c8 	blt.w	80254ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802515a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802515e:	45c4      	cmp	ip, r8
 8025160:	f280 81c3 	bge.w	80254ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8025164:	b209      	sxth	r1, r1
 8025166:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025168:	fb0c 3301 	mla	r3, ip, r1, r3
 802516c:	eb04 0803 	add.w	r8, r4, r3
 8025170:	5ce3      	ldrb	r3, [r4, r3]
 8025172:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025176:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802517a:	2a00      	cmp	r2, #0
 802517c:	f000 81aa 	beq.w	80254d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8025180:	f898 c001 	ldrb.w	ip, [r8, #1]
 8025184:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8025188:	940b      	str	r4, [sp, #44]	; 0x2c
 802518a:	0e24      	lsrs	r4, r4, #24
 802518c:	9412      	str	r4, [sp, #72]	; 0x48
 802518e:	b178      	cbz	r0, 80251b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 8025190:	eb08 0c01 	add.w	ip, r8, r1
 8025194:	f818 1001 	ldrb.w	r1, [r8, r1]
 8025198:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802519c:	9108      	str	r1, [sp, #32]
 802519e:	0e09      	lsrs	r1, r1, #24
 80251a0:	9110      	str	r1, [sp, #64]	; 0x40
 80251a2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80251a6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80251aa:	910c      	str	r1, [sp, #48]	; 0x30
 80251ac:	0e09      	lsrs	r1, r1, #24
 80251ae:	9113      	str	r1, [sp, #76]	; 0x4c
 80251b0:	b292      	uxth	r2, r2
 80251b2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80251b4:	b280      	uxth	r0, r0
 80251b6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80251b8:	fb02 f900 	mul.w	r9, r2, r0
 80251bc:	0112      	lsls	r2, r2, #4
 80251be:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80251c2:	eba2 0809 	sub.w	r8, r2, r9
 80251c6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80251ca:	b280      	uxth	r0, r0
 80251cc:	fa1f f888 	uxth.w	r8, r8
 80251d0:	1a12      	subs	r2, r2, r0
 80251d2:	fb08 f101 	mul.w	r1, r8, r1
 80251d6:	b292      	uxth	r2, r2
 80251d8:	fb02 110e 	mla	r1, r2, lr, r1
 80251dc:	fb00 1104 	mla	r1, r0, r4, r1
 80251e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80251e2:	fb09 1104 	mla	r1, r9, r4, r1
 80251e6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80251ea:	2900      	cmp	r1, #0
 80251ec:	f000 80f5 	beq.w	80253da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80251f0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80251f4:	d01b      	beq.n	802522e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80251f6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80251fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80251fe:	fb0e fa0a 	mul.w	sl, lr, sl
 8025202:	fb0e fe03 	mul.w	lr, lr, r3
 8025206:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802520a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802520e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8025212:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025216:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802521a:	4453      	add	r3, sl
 802521c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025220:	0a1b      	lsrs	r3, r3, #8
 8025222:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025226:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802522a:	ea43 030c 	orr.w	r3, r3, ip
 802522e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025230:	2cff      	cmp	r4, #255	; 0xff
 8025232:	d021      	beq.n	8025278 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8025234:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025236:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 802523a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802523c:	fb04 fb0b 	mul.w	fp, r4, fp
 8025240:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025242:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025246:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025248:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802524c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8025250:	fb04 fa0a 	mul.w	sl, r4, sl
 8025254:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025258:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802525c:	44de      	add	lr, fp
 802525e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8025262:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025266:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802526a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802526e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025272:	ea4e 040a 	orr.w	r4, lr, sl
 8025276:	940b      	str	r4, [sp, #44]	; 0x2c
 8025278:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802527a:	2cff      	cmp	r4, #255	; 0xff
 802527c:	d021      	beq.n	80252c2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 802527e:	9c08      	ldr	r4, [sp, #32]
 8025280:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8025284:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025286:	fb04 fb0b 	mul.w	fp, r4, fp
 802528a:	9c08      	ldr	r4, [sp, #32]
 802528c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025290:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025292:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8025296:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802529a:	fb04 fa0a 	mul.w	sl, r4, sl
 802529e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80252a2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80252a6:	44de      	add	lr, fp
 80252a8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80252ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80252b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80252b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80252b8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80252bc:	ea4e 040a 	orr.w	r4, lr, sl
 80252c0:	9408      	str	r4, [sp, #32]
 80252c2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80252c4:	2cff      	cmp	r4, #255	; 0xff
 80252c6:	d021      	beq.n	802530c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 80252c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80252ca:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80252ce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80252d0:	fb04 fb0b 	mul.w	fp, r4, fp
 80252d4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80252d6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80252da:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80252dc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80252e0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80252e4:	fb04 fa0a 	mul.w	sl, r4, sl
 80252e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80252ec:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80252f0:	44de      	add	lr, fp
 80252f2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80252f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80252fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80252fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8025302:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025306:	ea4e 040a 	orr.w	r4, lr, sl
 802530a:	940c      	str	r4, [sp, #48]	; 0x30
 802530c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802530e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8025312:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8025316:	43c9      	mvns	r1, r1
 8025318:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802531c:	9c08      	ldr	r4, [sp, #32]
 802531e:	fb08 fc0c 	mul.w	ip, r8, ip
 8025322:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025326:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802532a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802532c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8025330:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025334:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025336:	fb09 cc0e 	mla	ip, r9, lr, ip
 802533a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 802533e:	fb08 f80e 	mul.w	r8, r8, lr
 8025342:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025346:	fa5f fe81 	uxtb.w	lr, r1
 802534a:	fb02 8303 	mla	r3, r2, r3, r8
 802534e:	9a08      	ldr	r2, [sp, #32]
 8025350:	f8b7 8000 	ldrh.w	r8, [r7]
 8025354:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025358:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802535c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802535e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8025362:	fb00 330a 	mla	r3, r0, sl, r3
 8025366:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 802536a:	ea4f 2228 	mov.w	r2, r8, asr #8
 802536e:	fb09 3900 	mla	r9, r9, r0, r3
 8025372:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8025376:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802537a:	b2c9      	uxtb	r1, r1
 802537c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025380:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025384:	fb02 f20e 	mul.w	r2, r2, lr
 8025388:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802538c:	fb00 f00e 	mul.w	r0, r0, lr
 8025390:	1c53      	adds	r3, r2, #1
 8025392:	fb01 f10e 	mul.w	r1, r1, lr
 8025396:	ea4c 0c09 	orr.w	ip, ip, r9
 802539a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 802539e:	ea4f 431c 	mov.w	r3, ip, lsr #16
 80253a2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80253a6:	4a60      	ldr	r2, [pc, #384]	; (8025528 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>)
 80253a8:	b2db      	uxtb	r3, r3
 80253aa:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 80253ae:	1c43      	adds	r3, r0, #1
 80253b0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80253b4:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80253b8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80253bc:	00db      	lsls	r3, r3, #3
 80253be:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80253c2:	4313      	orrs	r3, r2
 80253c4:	1c4a      	adds	r2, r1, #1
 80253c6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80253ca:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80253ce:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80253d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80253d6:	f8a7 c000 	strh.w	ip, [r7]
 80253da:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80253dc:	3702      	adds	r7, #2
 80253de:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80253e0:	441a      	add	r2, r3
 80253e2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80253e4:	441d      	add	r5, r3
 80253e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80253e8:	922d      	str	r2, [sp, #180]	; 0xb4
 80253ea:	3b01      	subs	r3, #1
 80253ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80253ee:	e699      	b.n	8025124 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80253f0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80253f2:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 80253f4:	441c      	add	r4, r3
 80253f6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80253f8:	441d      	add	r5, r3
 80253fa:	9b07      	ldr	r3, [sp, #28]
 80253fc:	942d      	str	r4, [sp, #180]	; 0xb4
 80253fe:	3b01      	subs	r3, #1
 8025400:	9307      	str	r3, [sp, #28]
 8025402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025404:	3302      	adds	r3, #2
 8025406:	930a      	str	r3, [sp, #40]	; 0x28
 8025408:	e66c      	b.n	80250e4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802540a:	d024      	beq.n	8025456 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 802540c:	9b07      	ldr	r3, [sp, #28]
 802540e:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8025410:	3b01      	subs	r3, #1
 8025412:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8025414:	fb00 4003 	mla	r0, r0, r3, r4
 8025418:	1400      	asrs	r0, r0, #16
 802541a:	f53f ae80 	bmi.w	802511e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802541e:	3901      	subs	r1, #1
 8025420:	4288      	cmp	r0, r1
 8025422:	f6bf ae7c 	bge.w	802511e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025426:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8025428:	fb01 5303 	mla	r3, r1, r3, r5
 802542c:	141b      	asrs	r3, r3, #16
 802542e:	f53f ae76 	bmi.w	802511e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8025432:	3a01      	subs	r2, #1
 8025434:	4293      	cmp	r3, r2
 8025436:	f6bf ae72 	bge.w	802511e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802543a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802543e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8025442:	f1bb 0f00 	cmp.w	fp, #0
 8025446:	dc71      	bgt.n	802552c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8025448:	9b07      	ldr	r3, [sp, #28]
 802544a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802544e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025450:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025454:	930a      	str	r3, [sp, #40]	; 0x28
 8025456:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025458:	2b00      	cmp	r3, #0
 802545a:	f340 81af 	ble.w	80257bc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802545e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025462:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025464:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025468:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802546c:	eef0 6a48 	vmov.f32	s13, s16
 8025470:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025474:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025478:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802547c:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8025480:	eef0 6a68 	vmov.f32	s13, s17
 8025484:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025488:	ee16 5a90 	vmov	r5, s13
 802548c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025490:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025494:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025498:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802549c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80254a0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80254a4:	ee18 2a10 	vmov	r2, s16
 80254a8:	eeb0 8a47 	vmov.f32	s16, s14
 80254ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80254b0:	ee18 2a90 	vmov	r2, s17
 80254b4:	932f      	str	r3, [sp, #188]	; 0xbc
 80254b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80254b8:	eef0 8a67 	vmov.f32	s17, s15
 80254bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80254c0:	9330      	str	r3, [sp, #192]	; 0xc0
 80254c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80254c4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80254c6:	3b01      	subs	r3, #1
 80254c8:	9316      	str	r3, [sp, #88]	; 0x58
 80254ca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80254cc:	bf08      	it	eq
 80254ce:	4613      	moveq	r3, r2
 80254d0:	9307      	str	r3, [sp, #28]
 80254d2:	e5f9      	b.n	80250c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80254d4:	2800      	cmp	r0, #0
 80254d6:	f43f ae6b 	beq.w	80251b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80254da:	f818 1001 	ldrb.w	r1, [r8, r1]
 80254de:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80254e2:	9108      	str	r1, [sp, #32]
 80254e4:	0e09      	lsrs	r1, r1, #24
 80254e6:	9110      	str	r1, [sp, #64]	; 0x40
 80254e8:	e662      	b.n	80251b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13c>
 80254ea:	f113 0801 	adds.w	r8, r3, #1
 80254ee:	f53f af74 	bmi.w	80253da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80254f2:	4541      	cmp	r1, r8
 80254f4:	f6ff af71 	blt.w	80253da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 80254f8:	f11c 0801 	adds.w	r8, ip, #1
 80254fc:	f53f af6d 	bmi.w	80253da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8025500:	45c6      	cmp	lr, r8
 8025502:	f6ff af6a 	blt.w	80253da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8025506:	b209      	sxth	r1, r1
 8025508:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 802550c:	fa0f f38e 	sxth.w	r3, lr
 8025510:	9100      	str	r1, [sp, #0]
 8025512:	4639      	mov	r1, r7
 8025514:	9301      	str	r3, [sp, #4]
 8025516:	4633      	mov	r3, r6
 8025518:	e9cd 2004 	strd	r2, r0, [sp, #16]
 802551c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802551e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8025520:	f7ff fc4c 	bl	8024dbc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8025524:	e759      	b.n	80253da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x366>
 8025526:	bf00      	nop
 8025528:	fffff800 	.word	0xfffff800
 802552c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802552e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8025532:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8025534:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025538:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 802553a:	1427      	asrs	r7, r4, #16
 802553c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802553e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025542:	142b      	asrs	r3, r5, #16
 8025544:	fb01 7303 	mla	r3, r1, r3, r7
 8025548:	18e7      	adds	r7, r4, r3
 802554a:	5ce3      	ldrb	r3, [r4, r3]
 802554c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025550:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025554:	2a00      	cmp	r2, #0
 8025556:	f000 8127 	beq.w	80257a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x734>
 802555a:	f897 e001 	ldrb.w	lr, [r7, #1]
 802555e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8025562:	940d      	str	r4, [sp, #52]	; 0x34
 8025564:	0e24      	lsrs	r4, r4, #24
 8025566:	9414      	str	r4, [sp, #80]	; 0x50
 8025568:	b170      	cbz	r0, 8025588 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 802556a:	eb07 0e01 	add.w	lr, r7, r1
 802556e:	5c79      	ldrb	r1, [r7, r1]
 8025570:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025574:	9109      	str	r1, [sp, #36]	; 0x24
 8025576:	0e09      	lsrs	r1, r1, #24
 8025578:	9111      	str	r1, [sp, #68]	; 0x44
 802557a:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802557e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025582:	910e      	str	r1, [sp, #56]	; 0x38
 8025584:	0e09      	lsrs	r1, r1, #24
 8025586:	9115      	str	r1, [sp, #84]	; 0x54
 8025588:	b292      	uxth	r2, r2
 802558a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802558c:	b280      	uxth	r0, r0
 802558e:	fb02 f800 	mul.w	r8, r2, r0
 8025592:	0112      	lsls	r2, r2, #4
 8025594:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8025598:	eba2 0e08 	sub.w	lr, r2, r8
 802559c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80255a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80255a2:	b280      	uxth	r0, r0
 80255a4:	fa1f fe8e 	uxth.w	lr, lr
 80255a8:	1a09      	subs	r1, r1, r0
 80255aa:	fb0e f202 	mul.w	r2, lr, r2
 80255ae:	b289      	uxth	r1, r1
 80255b0:	fb01 220c 	mla	r2, r1, ip, r2
 80255b4:	fb00 2204 	mla	r2, r0, r4, r2
 80255b8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80255ba:	fb08 2204 	mla	r2, r8, r4, r2
 80255be:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80255c2:	2a00      	cmp	r2, #0
 80255c4:	f000 80e5 	beq.w	8025792 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 80255c8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80255cc:	d019      	beq.n	8025602 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58e>
 80255ce:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80255d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80255d6:	fb0c fa0a 	mul.w	sl, ip, sl
 80255da:	fb0c fc03 	mul.w	ip, ip, r3
 80255de:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80255e2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80255e6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80255ea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80255ee:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80255f2:	4453      	add	r3, sl
 80255f4:	0a3f      	lsrs	r7, r7, #8
 80255f6:	0a1b      	lsrs	r3, r3, #8
 80255f8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80255fc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025600:	433b      	orrs	r3, r7
 8025602:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025604:	2cff      	cmp	r4, #255	; 0xff
 8025606:	d020      	beq.n	802564a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d6>
 8025608:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802560a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802560e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8025610:	4367      	muls	r7, r4
 8025612:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025614:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025618:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802561c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802561e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025622:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025626:	fb04 fa0a 	mul.w	sl, r4, sl
 802562a:	44bc      	add	ip, r7
 802562c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025630:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025634:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025638:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802563c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025640:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025644:	ea4c 040a 	orr.w	r4, ip, sl
 8025648:	940d      	str	r4, [sp, #52]	; 0x34
 802564a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802564c:	2cff      	cmp	r4, #255	; 0xff
 802564e:	d020      	beq.n	8025692 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61e>
 8025650:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025652:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025656:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025658:	4367      	muls	r7, r4
 802565a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802565c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025660:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025664:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025666:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802566a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802566e:	fb04 fa0a 	mul.w	sl, r4, sl
 8025672:	44bc      	add	ip, r7
 8025674:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025678:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802567c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025680:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025684:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025688:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802568c:	ea4c 040a 	orr.w	r4, ip, sl
 8025690:	9409      	str	r4, [sp, #36]	; 0x24
 8025692:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025694:	2cff      	cmp	r4, #255	; 0xff
 8025696:	d020      	beq.n	80256da <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x666>
 8025698:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802569a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802569e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80256a0:	4367      	muls	r7, r4
 80256a2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80256a4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80256a8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80256ac:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80256ae:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80256b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80256b6:	fb04 fa0a 	mul.w	sl, r4, sl
 80256ba:	44bc      	add	ip, r7
 80256bc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80256c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80256c4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80256c8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80256cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80256d0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80256d4:	ea4c 040a 	orr.w	r4, ip, sl
 80256d8:	940e      	str	r4, [sp, #56]	; 0x38
 80256da:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80256dc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80256e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80256e4:	43d2      	mvns	r2, r2
 80256e6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80256ea:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80256ec:	b2d2      	uxtb	r2, r2
 80256ee:	fb0e f707 	mul.w	r7, lr, r7
 80256f2:	fb01 770c 	mla	r7, r1, ip, r7
 80256f6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80256fa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80256fc:	fb00 770c 	mla	r7, r0, ip, r7
 8025700:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8025704:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025706:	fb08 770c 	mla	r7, r8, ip, r7
 802570a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 802570e:	fb0e fe0c 	mul.w	lr, lr, ip
 8025712:	0a3f      	lsrs	r7, r7, #8
 8025714:	fb01 e303 	mla	r3, r1, r3, lr
 8025718:	9909      	ldr	r1, [sp, #36]	; 0x24
 802571a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802571e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8025722:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025724:	fb00 330a 	mla	r3, r0, sl, r3
 8025728:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802572c:	fb08 3c0c 	mla	ip, r8, ip, r3
 8025730:	f8b9 3000 	ldrh.w	r3, [r9]
 8025734:	1218      	asrs	r0, r3, #8
 8025736:	10d9      	asrs	r1, r3, #3
 8025738:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802573c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025740:	00db      	lsls	r3, r3, #3
 8025742:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025746:	4350      	muls	r0, r2
 8025748:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802574c:	b2db      	uxtb	r3, r3
 802574e:	4351      	muls	r1, r2
 8025750:	ea47 070c 	orr.w	r7, r7, ip
 8025754:	4353      	muls	r3, r2
 8025756:	1c42      	adds	r2, r0, #1
 8025758:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802575c:	0c3a      	lsrs	r2, r7, #16
 802575e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025762:	4a19      	ldr	r2, [pc, #100]	; (80257c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>)
 8025764:	b2c0      	uxtb	r0, r0
 8025766:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 802576a:	1c4a      	adds	r2, r1, #1
 802576c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025770:	0a3a      	lsrs	r2, r7, #8
 8025772:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025776:	00c9      	lsls	r1, r1, #3
 8025778:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802577c:	4301      	orrs	r1, r0
 802577e:	1c58      	adds	r0, r3, #1
 8025780:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025784:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8025788:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 802578c:	4308      	orrs	r0, r1
 802578e:	f8a9 0000 	strh.w	r0, [r9]
 8025792:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8025794:	f109 0902 	add.w	r9, r9, #2
 8025798:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 802579a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802579e:	441a      	add	r2, r3
 80257a0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80257a2:	922d      	str	r2, [sp, #180]	; 0xb4
 80257a4:	441d      	add	r5, r3
 80257a6:	e64c      	b.n	8025442 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 80257a8:	2800      	cmp	r0, #0
 80257aa:	f43f aeed 	beq.w	8025588 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 80257ae:	5c79      	ldrb	r1, [r7, r1]
 80257b0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80257b4:	9109      	str	r1, [sp, #36]	; 0x24
 80257b6:	0e09      	lsrs	r1, r1, #24
 80257b8:	9111      	str	r1, [sp, #68]	; 0x44
 80257ba:	e6e5      	b.n	8025588 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>
 80257bc:	b01b      	add	sp, #108	; 0x6c
 80257be:	ecbd 8b08 	vpop	{d8-d11}
 80257c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80257c6:	bf00      	nop
 80257c8:	fffff800 	.word	0xfffff800

080257cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80257cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80257d0:	b085      	sub	sp, #20
 80257d2:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 80257d6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80257da:	9103      	str	r1, [sp, #12]
 80257dc:	2d00      	cmp	r5, #0
 80257de:	fb05 7106 	mla	r1, r5, r6, r7
 80257e2:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80257e6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80257ea:	eb02 0441 	add.w	r4, r2, r1, lsl #1
 80257ee:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80257f2:	eb03 0901 	add.w	r9, r3, r1
 80257f6:	9401      	str	r4, [sp, #4]
 80257f8:	f2c0 80c0 	blt.w	802597c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 80257fc:	45a8      	cmp	r8, r5
 80257fe:	f340 80bd 	ble.w	802597c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1b0>
 8025802:	2f00      	cmp	r7, #0
 8025804:	f2c0 80b6 	blt.w	8025974 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 8025808:	42be      	cmp	r6, r7
 802580a:	f340 80b3 	ble.w	8025974 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1a8>
 802580e:	f813 c001 	ldrb.w	ip, [r3, r1]
 8025812:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8025816:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802581a:	d019      	beq.n	8025850 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x84>
 802581c:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 8025820:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8025824:	435a      	muls	r2, r3
 8025826:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 802582a:	f64f 011f 	movw	r1, #63519	; 0xf81f
 802582e:	fb0c f403 	mul.w	r4, ip, r3
 8025832:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8025836:	f602 0201 	addw	r2, r2, #2049	; 0x801
 802583a:	441a      	add	r2, r3
 802583c:	f104 0320 	add.w	r3, r4, #32
 8025840:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 8025844:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 8025848:	0a1b      	lsrs	r3, r3, #8
 802584a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802584e:	4319      	orrs	r1, r3
 8025850:	b289      	uxth	r1, r1
 8025852:	1c7b      	adds	r3, r7, #1
 8025854:	f100 8097 	bmi.w	8025986 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 8025858:	429e      	cmp	r6, r3
 802585a:	f340 8094 	ble.w	8025986 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1ba>
 802585e:	2800      	cmp	r0, #0
 8025860:	f000 8094 	beq.w	802598c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c0>
 8025864:	f899 4001 	ldrb.w	r4, [r9, #1]
 8025868:	9b01      	ldr	r3, [sp, #4]
 802586a:	2cff      	cmp	r4, #255	; 0xff
 802586c:	885b      	ldrh	r3, [r3, #2]
 802586e:	d01b      	beq.n	80258a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xdc>
 8025870:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 8025874:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 8025878:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802587c:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8025880:	fb0a f202 	mul.w	r2, sl, r2
 8025884:	fb04 fa03 	mul.w	sl, r4, r3
 8025888:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 802588c:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8025890:	441a      	add	r2, r3
 8025892:	f10a 0320 	add.w	r3, sl, #32
 8025896:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 802589a:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 802589e:	0a1b      	lsrs	r3, r3, #8
 80258a0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80258a4:	ea4b 0303 	orr.w	r3, fp, r3
 80258a8:	b29b      	uxth	r3, r3
 80258aa:	3501      	adds	r5, #1
 80258ac:	d474      	bmi.n	8025998 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 80258ae:	45a8      	cmp	r8, r5
 80258b0:	dd72      	ble.n	8025998 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1cc>
 80258b2:	f1be 0f00 	cmp.w	lr, #0
 80258b6:	f000 8120 	beq.w	8025afa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x32e>
 80258ba:	2f00      	cmp	r7, #0
 80258bc:	db69      	blt.n	8025992 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 80258be:	42be      	cmp	r6, r7
 80258c0:	dd67      	ble.n	8025992 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1c6>
 80258c2:	f819 5006 	ldrb.w	r5, [r9, r6]
 80258c6:	9a01      	ldr	r2, [sp, #4]
 80258c8:	2dff      	cmp	r5, #255	; 0xff
 80258ca:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 80258ce:	d01c      	beq.n	802590a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x13e>
 80258d0:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 80258d4:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80258d8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80258dc:	fb08 f802 	mul.w	r8, r8, r2
 80258e0:	fb05 fa0b 	mul.w	sl, r5, fp
 80258e4:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80258e8:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 80258ec:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80258f0:	4490      	add	r8, r2
 80258f2:	f10a 0220 	add.w	r2, sl, #32
 80258f6:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 80258fa:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 80258fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025902:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8025906:	ea4b 0b0a 	orr.w	fp, fp, sl
 802590a:	fa1f fb8b 	uxth.w	fp, fp
 802590e:	3701      	adds	r7, #1
 8025910:	d447      	bmi.n	80259a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8025912:	42be      	cmp	r6, r7
 8025914:	dd45      	ble.n	80259a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1d6>
 8025916:	2800      	cmp	r0, #0
 8025918:	d046      	beq.n	80259a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1dc>
 802591a:	3601      	adds	r6, #1
 802591c:	9a01      	ldr	r2, [sp, #4]
 802591e:	f819 7006 	ldrb.w	r7, [r9, r6]
 8025922:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8025926:	2fff      	cmp	r7, #255	; 0xff
 8025928:	d01a      	beq.n	8025960 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x194>
 802592a:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 802592e:	ea4f 08e7 	mov.w	r8, r7, asr #3
 8025932:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025936:	fb08 f806 	mul.w	r8, r8, r6
 802593a:	fb07 f902 	mul.w	r9, r7, r2
 802593e:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8025942:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 8025946:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802594a:	44b0      	add	r8, r6
 802594c:	f109 0620 	add.w	r6, r9, #32
 8025950:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 8025954:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8025958:	0a36      	lsrs	r6, r6, #8
 802595a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802595e:	4332      	orrs	r2, r6
 8025960:	b292      	uxth	r2, r2
 8025962:	280f      	cmp	r0, #15
 8025964:	d922      	bls.n	80259ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e0>
 8025966:	4b69      	ldr	r3, [pc, #420]	; (8025b0c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x340>)
 8025968:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802596c:	4a68      	ldr	r2, [pc, #416]	; (8025b10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x344>)
 802596e:	4869      	ldr	r0, [pc, #420]	; (8025b14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x348>)
 8025970:	f004 fa6e 	bl	8029e50 <__assert_func>
 8025974:	f04f 0c00 	mov.w	ip, #0
 8025978:	4661      	mov	r1, ip
 802597a:	e76a      	b.n	8025852 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x86>
 802597c:	2400      	movs	r4, #0
 802597e:	46a4      	mov	ip, r4
 8025980:	4623      	mov	r3, r4
 8025982:	4621      	mov	r1, r4
 8025984:	e791      	b.n	80258aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8025986:	2400      	movs	r4, #0
 8025988:	4623      	mov	r3, r4
 802598a:	e78e      	b.n	80258aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 802598c:	4604      	mov	r4, r0
 802598e:	4603      	mov	r3, r0
 8025990:	e78b      	b.n	80258aa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xde>
 8025992:	2500      	movs	r5, #0
 8025994:	46ab      	mov	fp, r5
 8025996:	e7ba      	b.n	802590e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x142>
 8025998:	2700      	movs	r7, #0
 802599a:	463d      	mov	r5, r7
 802599c:	463a      	mov	r2, r7
 802599e:	46bb      	mov	fp, r7
 80259a0:	e7df      	b.n	8025962 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 80259a2:	2700      	movs	r7, #0
 80259a4:	463a      	mov	r2, r7
 80259a6:	e7dc      	b.n	8025962 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x196>
 80259a8:	4607      	mov	r7, r0
 80259aa:	4602      	mov	r2, r0
 80259ac:	f1be 0f0f 	cmp.w	lr, #15
 80259b0:	d8d9      	bhi.n	8025966 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 80259b2:	b286      	uxth	r6, r0
 80259b4:	fa1f f98e 	uxth.w	r9, lr
 80259b8:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80259bc:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80259c0:	fb06 f809 	mul.w	r8, r6, r9
 80259c4:	0136      	lsls	r6, r6, #4
 80259c6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80259ca:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80259ce:	9601      	str	r6, [sp, #4]
 80259d0:	ea4a 0101 	orr.w	r1, sl, r1
 80259d4:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 80259d8:	fa1f f689 	uxth.w	r6, r9
 80259dc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80259e0:	fb10 f90e 	smulbb	r9, r0, lr
 80259e4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80259e8:	9602      	str	r6, [sp, #8]
 80259ea:	460e      	mov	r6, r1
 80259ec:	ea4f 09e9 	mov.w	r9, r9, asr #3
 80259f0:	f1ce 0110 	rsb	r1, lr, #16
 80259f4:	ea4a 0303 	orr.w	r3, sl, r3
 80259f8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80259fc:	1a09      	subs	r1, r1, r0
 80259fe:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 8025a02:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025a06:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025a0a:	4343      	muls	r3, r0
 8025a0c:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8025a10:	9801      	ldr	r0, [sp, #4]
 8025a12:	ea4a 0202 	orr.w	r2, sl, r2
 8025a16:	fb01 3106 	mla	r1, r1, r6, r3
 8025a1a:	9e02      	ldr	r6, [sp, #8]
 8025a1c:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8025a20:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 8025a24:	fb09 1302 	mla	r3, r9, r2, r1
 8025a28:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8025a2c:	1b80      	subs	r0, r0, r6
 8025a2e:	9e01      	ldr	r6, [sp, #4]
 8025a30:	9a03      	ldr	r2, [sp, #12]
 8025a32:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025a36:	eba6 0608 	sub.w	r6, r6, r8
 8025a3a:	b280      	uxth	r0, r0
 8025a3c:	8811      	ldrh	r1, [r2, #0]
 8025a3e:	ea4a 0b0b 	orr.w	fp, sl, fp
 8025a42:	b2b6      	uxth	r6, r6
 8025a44:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8025a48:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8025a4c:	4374      	muls	r4, r6
 8025a4e:	b292      	uxth	r2, r2
 8025a50:	fb0e 3e0b 	mla	lr, lr, fp, r3
 8025a54:	fb0c 4400 	mla	r4, ip, r0, r4
 8025a58:	9802      	ldr	r0, [sp, #8]
 8025a5a:	ea4f 535e 	mov.w	r3, lr, lsr #21
 8025a5e:	fb00 4505 	mla	r5, r0, r5, r4
 8025a62:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025a66:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025a6a:	1208      	asrs	r0, r1, #8
 8025a6c:	fb08 5707 	mla	r7, r8, r7, r5
 8025a70:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025a74:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025a78:	10cd      	asrs	r5, r1, #3
 8025a7a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025a7e:	ea43 0e0e 	orr.w	lr, r3, lr
 8025a82:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8025a86:	4357      	muls	r7, r2
 8025a88:	fa1f f38e 	uxth.w	r3, lr
 8025a8c:	f107 0801 	add.w	r8, r7, #1
 8025a90:	121c      	asrs	r4, r3, #8
 8025a92:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8025a96:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8025a9a:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8025a9e:	b2ff      	uxtb	r7, r7
 8025aa0:	fb10 f007 	smulbb	r0, r0, r7
 8025aa4:	fb15 f507 	smulbb	r5, r5, r7
 8025aa8:	fb04 0402 	mla	r4, r4, r2, r0
 8025aac:	10d8      	asrs	r0, r3, #3
 8025aae:	00db      	lsls	r3, r3, #3
 8025ab0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025ab4:	b2a4      	uxth	r4, r4
 8025ab6:	fb00 5002 	mla	r0, r0, r2, r5
 8025aba:	b2dd      	uxtb	r5, r3
 8025abc:	00cb      	lsls	r3, r1, #3
 8025abe:	b280      	uxth	r0, r0
 8025ac0:	b2db      	uxtb	r3, r3
 8025ac2:	fb13 f307 	smulbb	r3, r3, r7
 8025ac6:	fb05 3202 	mla	r2, r5, r2, r3
 8025aca:	1c63      	adds	r3, r4, #1
 8025acc:	b292      	uxth	r2, r2
 8025ace:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8025ad2:	1c53      	adds	r3, r2, #1
 8025ad4:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8025ad8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025adc:	1c42      	adds	r2, r0, #1
 8025ade:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025ae2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025ae6:	9a03      	ldr	r2, [sp, #12]
 8025ae8:	0940      	lsrs	r0, r0, #5
 8025aea:	4323      	orrs	r3, r4
 8025aec:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025af0:	4303      	orrs	r3, r0
 8025af2:	8013      	strh	r3, [r2, #0]
 8025af4:	b005      	add	sp, #20
 8025af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025afa:	280f      	cmp	r0, #15
 8025afc:	f63f af33 	bhi.w	8025966 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x19a>
 8025b00:	4677      	mov	r7, lr
 8025b02:	4675      	mov	r5, lr
 8025b04:	4672      	mov	r2, lr
 8025b06:	46f3      	mov	fp, lr
 8025b08:	e753      	b.n	80259b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x1e6>
 8025b0a:	bf00      	nop
 8025b0c:	08031892 	.word	0x08031892
 8025b10:	08031e62 	.word	0x08031e62
 8025b14:	08031916 	.word	0x08031916

08025b18 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b1c:	ed2d 8b08 	vpush	{d8-d11}
 8025b20:	b097      	sub	sp, #92	; 0x5c
 8025b22:	eeb0 aa40 	vmov.f32	s20, s0
 8025b26:	eef0 9a60 	vmov.f32	s19, s1
 8025b2a:	9214      	str	r2, [sp, #80]	; 0x50
 8025b2c:	eeb0 9a41 	vmov.f32	s18, s2
 8025b30:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8025b32:	eeb0 8a62 	vmov.f32	s16, s5
 8025b36:	9308      	str	r3, [sp, #32]
 8025b38:	eef0 8a43 	vmov.f32	s17, s6
 8025b3c:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8025b40:	eef0 ba44 	vmov.f32	s23, s8
 8025b44:	9015      	str	r0, [sp, #84]	; 0x54
 8025b46:	eeb0 ba64 	vmov.f32	s22, s9
 8025b4a:	9312      	str	r3, [sp, #72]	; 0x48
 8025b4c:	eef0 aa45 	vmov.f32	s21, s10
 8025b50:	6850      	ldr	r0, [r2, #4]
 8025b52:	9111      	str	r1, [sp, #68]	; 0x44
 8025b54:	6812      	ldr	r2, [r2, #0]
 8025b56:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8025b5a:	fb00 1303 	mla	r3, r0, r3, r1
 8025b5e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025b62:	9309      	str	r3, [sp, #36]	; 0x24
 8025b64:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025b66:	681b      	ldr	r3, [r3, #0]
 8025b68:	930b      	str	r3, [sp, #44]	; 0x2c
 8025b6a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025b6c:	685b      	ldr	r3, [r3, #4]
 8025b6e:	930c      	str	r3, [sp, #48]	; 0x30
 8025b70:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8025b74:	930a      	str	r3, [sp, #40]	; 0x28
 8025b76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025b78:	2b00      	cmp	r3, #0
 8025b7a:	dc03      	bgt.n	8025b84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025b7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8025b7e:	2b00      	cmp	r3, #0
 8025b80:	f340 83cd 	ble.w	802631e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8025b84:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025b86:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025b8a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025b8e:	1e48      	subs	r0, r1, #1
 8025b90:	1e55      	subs	r5, r2, #1
 8025b92:	9b08      	ldr	r3, [sp, #32]
 8025b94:	2b00      	cmp	r3, #0
 8025b96:	f340 81a5 	ble.w	8025ee4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8025b9a:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 8025b9c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025b9e:	1436      	asrs	r6, r6, #16
 8025ba0:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025ba4:	d406      	bmi.n	8025bb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025ba6:	4286      	cmp	r6, r0
 8025ba8:	da04      	bge.n	8025bb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025baa:	2b00      	cmp	r3, #0
 8025bac:	db02      	blt.n	8025bb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8025bae:	42ab      	cmp	r3, r5
 8025bb0:	f2c0 8199 	blt.w	8025ee6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 8025bb4:	3601      	adds	r6, #1
 8025bb6:	f100 8186 	bmi.w	8025ec6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025bba:	42b1      	cmp	r1, r6
 8025bbc:	f2c0 8183 	blt.w	8025ec6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025bc0:	3301      	adds	r3, #1
 8025bc2:	f100 8180 	bmi.w	8025ec6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025bc6:	429a      	cmp	r2, r3
 8025bc8:	f2c0 817d 	blt.w	8025ec6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8025bcc:	9b08      	ldr	r3, [sp, #32]
 8025bce:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8025bd2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025bd4:	9313      	str	r3, [sp, #76]	; 0x4c
 8025bd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025bd8:	2b00      	cmp	r3, #0
 8025bda:	f340 81a6 	ble.w	8025f2a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8025bde:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025be0:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8025be2:	1418      	asrs	r0, r3, #16
 8025be4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025be6:	142d      	asrs	r5, r5, #16
 8025be8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8025bec:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025bee:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8025bf2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8025bf4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8025bf8:	f100 81fa 	bmi.w	8025ff0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025bfc:	f102 3eff 	add.w	lr, r2, #4294967295
 8025c00:	4575      	cmp	r5, lr
 8025c02:	f280 81f5 	bge.w	8025ff0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025c06:	2800      	cmp	r0, #0
 8025c08:	f2c0 81f2 	blt.w	8025ff0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025c0c:	f103 3eff 	add.w	lr, r3, #4294967295
 8025c10:	4570      	cmp	r0, lr
 8025c12:	f280 81ed 	bge.w	8025ff0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025c16:	b212      	sxth	r2, r2
 8025c18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025c1a:	fa1f fe81 	uxth.w	lr, r1
 8025c1e:	fb00 5002 	mla	r0, r0, r2, r5
 8025c22:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8025c26:	eb03 0a00 	add.w	sl, r3, r0
 8025c2a:	f813 9000 	ldrb.w	r9, [r3, r0]
 8025c2e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8025c32:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025c36:	b29b      	uxth	r3, r3
 8025c38:	f1bc 0f00 	cmp.w	ip, #0
 8025c3c:	f000 81bb 	beq.w	8025fb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8025c40:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8025c44:	eb0a 0b02 	add.w	fp, sl, r2
 8025c48:	fa1f fa8c 	uxth.w	sl, ip
 8025c4c:	940d      	str	r4, [sp, #52]	; 0x34
 8025c4e:	fb0a fe0e 	mul.w	lr, sl, lr
 8025c52:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025c56:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8025c5a:	eba5 050e 	sub.w	r5, r5, lr
 8025c5e:	940e      	str	r4, [sp, #56]	; 0x38
 8025c60:	fa1f fa8a 	uxth.w	sl, sl
 8025c64:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025c66:	b2ad      	uxth	r5, r5
 8025c68:	eba3 030a 	sub.w	r3, r3, sl
 8025c6c:	fb08 f505 	mul.w	r5, r8, r5
 8025c70:	b29b      	uxth	r3, r3
 8025c72:	fb09 5303 	mla	r3, r9, r3, r5
 8025c76:	fb0a 3304 	mla	r3, sl, r4, r3
 8025c7a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025c7c:	fb0e 3304 	mla	r3, lr, r4, r3
 8025c80:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025c84:	2b00      	cmp	r3, #0
 8025c86:	f000 8111 	beq.w	8025eac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8025c8a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025c8c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025c90:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8025c94:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8025c98:	f000 8192 	beq.w	8025fc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 8025c9c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8025ca0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025ca4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025ca8:	fb0a fe0e 	mul.w	lr, sl, lr
 8025cac:	fb09 f000 	mul.w	r0, r9, r0
 8025cb0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8025cb4:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025cb8:	f100 0b20 	add.w	fp, r0, #32
 8025cbc:	44ce      	add	lr, r9
 8025cbe:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8025cc2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025cc6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025cca:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025cce:	ea4e 0909 	orr.w	r9, lr, r9
 8025cd2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025cd6:	8868      	ldrh	r0, [r5, #2]
 8025cd8:	d019      	beq.n	8025d0e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8025cda:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8025cde:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025ce2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025ce6:	fb0a fe0e 	mul.w	lr, sl, lr
 8025cea:	fb08 f800 	mul.w	r8, r8, r0
 8025cee:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8025cf2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025cf6:	f108 0b20 	add.w	fp, r8, #32
 8025cfa:	4486      	add	lr, r0
 8025cfc:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8025d00:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8025d04:	0a00      	lsrs	r0, r0, #8
 8025d06:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025d0a:	ea4e 0000 	orr.w	r0, lr, r0
 8025d0e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8025d12:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025d16:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025d1a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025d1e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8025d22:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025d26:	ea4e 0909 	orr.w	r9, lr, r9
 8025d2a:	ea4a 0000 	orr.w	r0, sl, r0
 8025d2e:	f1bc 0f00 	cmp.w	ip, #0
 8025d32:	f000 8147 	beq.w	8025fc4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8025d36:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8025d3a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8025d3c:	3a01      	subs	r2, #1
 8025d3e:	2cff      	cmp	r4, #255	; 0xff
 8025d40:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025d44:	f102 0202 	add.w	r2, r2, #2
 8025d48:	eb05 0e02 	add.w	lr, r5, r2
 8025d4c:	5aaa      	ldrh	r2, [r5, r2]
 8025d4e:	d018      	beq.n	8025d82 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8025d50:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8025d54:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025d58:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025d5c:	fb04 fa02 	mul.w	sl, r4, r2
 8025d60:	fb08 f805 	mul.w	r8, r8, r5
 8025d64:	f10a 0520 	add.w	r5, sl, #32
 8025d68:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8025d6c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025d70:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8025d74:	4442      	add	r2, r8
 8025d76:	0a2d      	lsrs	r5, r5, #8
 8025d78:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8025d7c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025d80:	432a      	orrs	r2, r5
 8025d82:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025d84:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8025d88:	2cff      	cmp	r4, #255	; 0xff
 8025d8a:	d01a      	beq.n	8025dc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 8025d8c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8025d90:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025d94:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025d98:	fb04 fa05 	mul.w	sl, r4, r5
 8025d9c:	fb08 f80e 	mul.w	r8, r8, lr
 8025da0:	f10a 0e20 	add.w	lr, sl, #32
 8025da4:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8025da8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025dac:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8025db0:	4445      	add	r5, r8
 8025db2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025db6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8025dba:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8025dbe:	ea45 050e 	orr.w	r5, r5, lr
 8025dc2:	fb1c fe01 	smulbb	lr, ip, r1
 8025dc6:	f1cc 0810 	rsb	r8, ip, #16
 8025dca:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025dce:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025dd2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025dd6:	eba8 0801 	sub.w	r8, r8, r1
 8025dda:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8025dde:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025de2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8025de6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8025dea:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8025dee:	ea4a 0202 	orr.w	r2, sl, r2
 8025df2:	4341      	muls	r1, r0
 8025df4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8025df8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025dfc:	fb09 1108 	mla	r1, r9, r8, r1
 8025e00:	ea4b 0505 	orr.w	r5, fp, r5
 8025e04:	fb0c 1102 	mla	r1, ip, r2, r1
 8025e08:	fb0e 1e05 	mla	lr, lr, r5, r1
 8025e0c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025e10:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025e14:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025e18:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025e1c:	ea42 0e0e 	orr.w	lr, r2, lr
 8025e20:	fa1f f28e 	uxth.w	r2, lr
 8025e24:	2bff      	cmp	r3, #255	; 0xff
 8025e26:	d103      	bne.n	8025e30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8025e28:	9912      	ldr	r1, [sp, #72]	; 0x48
 8025e2a:	29ff      	cmp	r1, #255	; 0xff
 8025e2c:	f000 80de 	beq.w	8025fec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>
 8025e30:	990a      	ldr	r1, [sp, #40]	; 0x28
 8025e32:	1215      	asrs	r5, r2, #8
 8025e34:	8838      	ldrh	r0, [r7, #0]
 8025e36:	434b      	muls	r3, r1
 8025e38:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8025e3c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025e3e:	f103 0c01 	add.w	ip, r3, #1
 8025e42:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8025e46:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8025e4a:	fa5f fc83 	uxtb.w	ip, r3
 8025e4e:	1203      	asrs	r3, r0, #8
 8025e50:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8025e54:	fb13 f30c 	smulbb	r3, r3, ip
 8025e58:	fb05 3501 	mla	r5, r5, r1, r3
 8025e5c:	10c3      	asrs	r3, r0, #3
 8025e5e:	10d1      	asrs	r1, r2, #3
 8025e60:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8025e64:	00d2      	lsls	r2, r2, #3
 8025e66:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025e6a:	b2ad      	uxth	r5, r5
 8025e6c:	fb13 f30c 	smulbb	r3, r3, ip
 8025e70:	b2d2      	uxtb	r2, r2
 8025e72:	fb01 3104 	mla	r1, r1, r4, r3
 8025e76:	00c3      	lsls	r3, r0, #3
 8025e78:	b2db      	uxtb	r3, r3
 8025e7a:	b289      	uxth	r1, r1
 8025e7c:	fb13 f30c 	smulbb	r3, r3, ip
 8025e80:	fb02 3304 	mla	r3, r2, r4, r3
 8025e84:	b29a      	uxth	r2, r3
 8025e86:	1c6b      	adds	r3, r5, #1
 8025e88:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025e8c:	1c53      	adds	r3, r2, #1
 8025e8e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025e92:	1c4a      	adds	r2, r1, #1
 8025e94:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8025e98:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025e9c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025ea0:	0949      	lsrs	r1, r1, #5
 8025ea2:	432b      	orrs	r3, r5
 8025ea4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025ea8:	430b      	orrs	r3, r1
 8025eaa:	803b      	strh	r3, [r7, #0]
 8025eac:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025eae:	3702      	adds	r7, #2
 8025eb0:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8025eb2:	4413      	add	r3, r2
 8025eb4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025eb6:	9329      	str	r3, [sp, #164]	; 0xa4
 8025eb8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025eba:	441a      	add	r2, r3
 8025ebc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025ebe:	3b01      	subs	r3, #1
 8025ec0:	922a      	str	r2, [sp, #168]	; 0xa8
 8025ec2:	9313      	str	r3, [sp, #76]	; 0x4c
 8025ec4:	e687      	b.n	8025bd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xbe>
 8025ec6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8025ec8:	9e2b      	ldr	r6, [sp, #172]	; 0xac
 8025eca:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8025ecc:	4433      	add	r3, r6
 8025ece:	9329      	str	r3, [sp, #164]	; 0xa4
 8025ed0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025ed2:	441c      	add	r4, r3
 8025ed4:	9b08      	ldr	r3, [sp, #32]
 8025ed6:	3b01      	subs	r3, #1
 8025ed8:	942a      	str	r4, [sp, #168]	; 0xa8
 8025eda:	9308      	str	r3, [sp, #32]
 8025edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025ede:	3302      	adds	r3, #2
 8025ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8025ee2:	e656      	b.n	8025b92 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8025ee4:	d028      	beq.n	8025f38 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8025ee6:	9b08      	ldr	r3, [sp, #32]
 8025ee8:	982b      	ldr	r0, [sp, #172]	; 0xac
 8025eea:	3b01      	subs	r3, #1
 8025eec:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8025eee:	fb00 5003 	mla	r0, r0, r3, r5
 8025ef2:	1400      	asrs	r0, r0, #16
 8025ef4:	f53f ae6a 	bmi.w	8025bcc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8025ef8:	3901      	subs	r1, #1
 8025efa:	4288      	cmp	r0, r1
 8025efc:	f6bf ae66 	bge.w	8025bcc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8025f00:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8025f02:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8025f04:	fb01 0303 	mla	r3, r1, r3, r0
 8025f08:	141b      	asrs	r3, r3, #16
 8025f0a:	f53f ae5f 	bmi.w	8025bcc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8025f0e:	3a01      	subs	r2, #1
 8025f10:	4293      	cmp	r3, r2
 8025f12:	f6bf ae5b 	bge.w	8025bcc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8025f16:	9b08      	ldr	r3, [sp, #32]
 8025f18:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8025f1c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8025f20:	9313      	str	r3, [sp, #76]	; 0x4c
 8025f22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025f24:	2b00      	cmp	r3, #0
 8025f26:	f300 8082 	bgt.w	802602e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 8025f2a:	9b08      	ldr	r3, [sp, #32]
 8025f2c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025f32:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025f36:	9309      	str	r3, [sp, #36]	; 0x24
 8025f38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025f3a:	2b00      	cmp	r3, #0
 8025f3c:	f340 81ef 	ble.w	802631e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x806>
 8025f40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025f44:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025f46:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8025f4a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8025f4e:	eef0 6a48 	vmov.f32	s13, s16
 8025f52:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8025f56:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8025f5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025f5e:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8025f62:	eef0 6a68 	vmov.f32	s13, s17
 8025f66:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025f6a:	edcd 6a2a 	vstr	s13, [sp, #168]	; 0xa8
 8025f6e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8025f72:	ee69 7a27 	vmul.f32	s15, s18, s15
 8025f76:	ee37 8a48 	vsub.f32	s16, s14, s16
 8025f7a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8025f7e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8025f82:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8025f86:	ee18 2a10 	vmov	r2, s16
 8025f8a:	eeb0 8a47 	vmov.f32	s16, s14
 8025f8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025f92:	ee18 2a90 	vmov	r2, s17
 8025f96:	932b      	str	r3, [sp, #172]	; 0xac
 8025f98:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025f9a:	eef0 8a67 	vmov.f32	s17, s15
 8025f9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025fa2:	932c      	str	r3, [sp, #176]	; 0xb0
 8025fa4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025fa6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025fa8:	3b01      	subs	r3, #1
 8025faa:	9311      	str	r3, [sp, #68]	; 0x44
 8025fac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025fae:	bf08      	it	eq
 8025fb0:	4613      	moveq	r3, r2
 8025fb2:	9308      	str	r3, [sp, #32]
 8025fb4:	e5df      	b.n	8025b76 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8025fb6:	fb08 f505 	mul.w	r5, r8, r5
 8025fba:	fb09 5303 	mla	r3, r9, r3, r5
 8025fbe:	e65f      	b.n	8025c80 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x168>
 8025fc0:	4681      	mov	r9, r0
 8025fc2:	e686      	b.n	8025cd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025fc4:	f1c1 0210 	rsb	r2, r1, #16
 8025fc8:	4341      	muls	r1, r0
 8025fca:	fb09 1902 	mla	r9, r9, r2, r1
 8025fce:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025fd2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8025fd6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8025fda:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025fde:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025fe2:	ea42 0909 	orr.w	r9, r2, r9
 8025fe6:	fa1f f289 	uxth.w	r2, r9
 8025fea:	e71b      	b.n	8025e24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8025fec:	803a      	strh	r2, [r7, #0]
 8025fee:	e75d      	b.n	8025eac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8025ff0:	f115 0e01 	adds.w	lr, r5, #1
 8025ff4:	f53f af5a 	bmi.w	8025eac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8025ff8:	4572      	cmp	r2, lr
 8025ffa:	f6ff af57 	blt.w	8025eac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8025ffe:	f110 0e01 	adds.w	lr, r0, #1
 8026002:	f53f af53 	bmi.w	8025eac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026006:	4573      	cmp	r3, lr
 8026008:	f6ff af50 	blt.w	8025eac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802600c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802600e:	b21b      	sxth	r3, r3
 8026010:	b212      	sxth	r2, r2
 8026012:	9502      	str	r5, [sp, #8]
 8026014:	9301      	str	r3, [sp, #4]
 8026016:	9200      	str	r2, [sp, #0]
 8026018:	e9cd 0103 	strd	r0, r1, [sp, #12]
 802601c:	e9cd c405 	strd	ip, r4, [sp, #20]
 8026020:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8026024:	4639      	mov	r1, r7
 8026026:	9815      	ldr	r0, [sp, #84]	; 0x54
 8026028:	f7ff fbd0 	bl	80257cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 802602c:	e73e      	b.n	8025eac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 802602e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026030:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026034:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026036:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802603a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802603c:	fa1f fc82 	uxth.w	ip, r2
 8026040:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026044:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026046:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802604a:	141f      	asrs	r7, r3, #16
 802604c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802604e:	141b      	asrs	r3, r3, #16
 8026050:	fb01 3707 	mla	r7, r1, r7, r3
 8026054:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026056:	eb03 0a07 	add.w	sl, r3, r7
 802605a:	f813 9007 	ldrb.w	r9, [r3, r7]
 802605e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8026062:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026066:	b29b      	uxth	r3, r3
 8026068:	2d00      	cmp	r5, #0
 802606a:	f000 813d 	beq.w	80262e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d0>
 802606e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8026072:	eb0a 0b01 	add.w	fp, sl, r1
 8026076:	fa1f fa85 	uxth.w	sl, r5
 802607a:	940f      	str	r4, [sp, #60]	; 0x3c
 802607c:	fb0a fc0c 	mul.w	ip, sl, ip
 8026080:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026084:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8026088:	eba0 000c 	sub.w	r0, r0, ip
 802608c:	9410      	str	r4, [sp, #64]	; 0x40
 802608e:	fa1f fa8a 	uxth.w	sl, sl
 8026092:	b280      	uxth	r0, r0
 8026094:	eba3 030a 	sub.w	r3, r3, sl
 8026098:	fb08 f000 	mul.w	r0, r8, r0
 802609c:	b29b      	uxth	r3, r3
 802609e:	fb09 0303 	mla	r3, r9, r3, r0
 80260a2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80260a4:	fb0a 3300 	mla	r3, sl, r0, r3
 80260a8:	fb0c 3304 	mla	r3, ip, r4, r3
 80260ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80260b0:	2b00      	cmp	r3, #0
 80260b2:	f000 810b 	beq.w	80262cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 80260b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80260b8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80260bc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80260be:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80260c2:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80260c6:	f000 8114 	beq.w	80262f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7da>
 80260ca:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80260ce:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80260d2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80260d6:	fb0a fc0c 	mul.w	ip, sl, ip
 80260da:	fb09 f707 	mul.w	r7, r9, r7
 80260de:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80260e2:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80260e6:	f107 0b20 	add.w	fp, r7, #32
 80260ea:	44cc      	add	ip, r9
 80260ec:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80260f0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80260f4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80260f8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80260fc:	ea4c 0909 	orr.w	r9, ip, r9
 8026100:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026104:	8847      	ldrh	r7, [r0, #2]
 8026106:	d019      	beq.n	802613c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x624>
 8026108:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802610c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026110:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026114:	fb0a fc0c 	mul.w	ip, sl, ip
 8026118:	fb08 f807 	mul.w	r8, r8, r7
 802611c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8026120:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026124:	f108 0b20 	add.w	fp, r8, #32
 8026128:	44bc      	add	ip, r7
 802612a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802612e:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026132:	0a3f      	lsrs	r7, r7, #8
 8026134:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026138:	ea4c 0707 	orr.w	r7, ip, r7
 802613c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8026140:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026144:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8026148:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802614c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026150:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026154:	ea4c 0909 	orr.w	r9, ip, r9
 8026158:	ea4a 0707 	orr.w	r7, sl, r7
 802615c:	2d00      	cmp	r5, #0
 802615e:	f000 80ca 	beq.w	80262f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8026162:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8026166:	3901      	subs	r1, #1
 8026168:	0049      	lsls	r1, r1, #1
 802616a:	3102      	adds	r1, #2
 802616c:	eb00 0c01 	add.w	ip, r0, r1
 8026170:	5a41      	ldrh	r1, [r0, r1]
 8026172:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8026174:	28ff      	cmp	r0, #255	; 0xff
 8026176:	d019      	beq.n	80261ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 8026178:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 802617c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802617e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026182:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026186:	fb04 fa01 	mul.w	sl, r4, r1
 802618a:	fb08 f800 	mul.w	r8, r8, r0
 802618e:	f10a 0020 	add.w	r0, sl, #32
 8026192:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8026196:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802619a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802619e:	4441      	add	r1, r8
 80261a0:	0a00      	lsrs	r0, r0, #8
 80261a2:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80261a6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80261aa:	4301      	orrs	r1, r0
 80261ac:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80261ae:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80261b2:	2cff      	cmp	r4, #255	; 0xff
 80261b4:	d01a      	beq.n	80261ec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 80261b6:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80261ba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80261be:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80261c2:	fb04 fa00 	mul.w	sl, r4, r0
 80261c6:	fb08 f80c 	mul.w	r8, r8, ip
 80261ca:	f10a 0c20 	add.w	ip, sl, #32
 80261ce:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80261d2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80261d6:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80261da:	4440      	add	r0, r8
 80261dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80261e0:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80261e4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80261e8:	ea40 000c 	orr.w	r0, r0, ip
 80261ec:	fb15 fc02 	smulbb	ip, r5, r2
 80261f0:	f1c5 0810 	rsb	r8, r5, #16
 80261f4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80261f8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80261fc:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8026200:	eba8 0802 	sub.w	r8, r8, r2
 8026204:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026208:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802620c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8026210:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026214:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8026218:	ea4a 0101 	orr.w	r1, sl, r1
 802621c:	437a      	muls	r2, r7
 802621e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8026222:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026226:	fb09 2208 	mla	r2, r9, r8, r2
 802622a:	ea4b 0000 	orr.w	r0, fp, r0
 802622e:	fb05 2201 	mla	r2, r5, r1, r2
 8026232:	fb0c 2200 	mla	r2, ip, r0, r2
 8026236:	0d57      	lsrs	r7, r2, #21
 8026238:	0952      	lsrs	r2, r2, #5
 802623a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802623e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026242:	433a      	orrs	r2, r7
 8026244:	2bff      	cmp	r3, #255	; 0xff
 8026246:	b292      	uxth	r2, r2
 8026248:	d102      	bne.n	8026250 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 802624a:	9912      	ldr	r1, [sp, #72]	; 0x48
 802624c:	29ff      	cmp	r1, #255	; 0xff
 802624e:	d063      	beq.n	8026318 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x800>
 8026250:	980a      	ldr	r0, [sp, #40]	; 0x28
 8026252:	1215      	asrs	r5, r2, #8
 8026254:	f8be 1000 	ldrh.w	r1, [lr]
 8026258:	4343      	muls	r3, r0
 802625a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802625c:	10cf      	asrs	r7, r1, #3
 802625e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8026262:	1c58      	adds	r0, r3, #1
 8026264:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8026268:	eb00 2323 	add.w	r3, r0, r3, asr #8
 802626c:	1208      	asrs	r0, r1, #8
 802626e:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8026272:	00c9      	lsls	r1, r1, #3
 8026274:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026278:	b2db      	uxtb	r3, r3
 802627a:	b2c9      	uxtb	r1, r1
 802627c:	fb10 f003 	smulbb	r0, r0, r3
 8026280:	fb11 f103 	smulbb	r1, r1, r3
 8026284:	fb05 0504 	mla	r5, r5, r4, r0
 8026288:	10d0      	asrs	r0, r2, #3
 802628a:	fb17 f703 	smulbb	r7, r7, r3
 802628e:	00d2      	lsls	r2, r2, #3
 8026290:	b2ad      	uxth	r5, r5
 8026292:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026296:	b2d2      	uxtb	r2, r2
 8026298:	fb00 7004 	mla	r0, r0, r4, r7
 802629c:	1c6b      	adds	r3, r5, #1
 802629e:	fb02 1204 	mla	r2, r2, r4, r1
 80262a2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80262a6:	b292      	uxth	r2, r2
 80262a8:	b280      	uxth	r0, r0
 80262aa:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80262ae:	1c57      	adds	r7, r2, #1
 80262b0:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80262b4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80262b8:	433d      	orrs	r5, r7
 80262ba:	1c47      	adds	r7, r0, #1
 80262bc:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80262c0:	097f      	lsrs	r7, r7, #5
 80262c2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80262c6:	433d      	orrs	r5, r7
 80262c8:	f8ae 5000 	strh.w	r5, [lr]
 80262cc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80262ce:	f10e 0e02 	add.w	lr, lr, #2
 80262d2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80262d4:	4413      	add	r3, r2
 80262d6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80262d8:	9329      	str	r3, [sp, #164]	; 0xa4
 80262da:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80262dc:	441a      	add	r2, r3
 80262de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80262e0:	3b01      	subs	r3, #1
 80262e2:	922a      	str	r2, [sp, #168]	; 0xa8
 80262e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80262e6:	e61c      	b.n	8025f22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80262e8:	fb08 f000 	mul.w	r0, r8, r0
 80262ec:	fb09 0303 	mla	r3, r9, r3, r0
 80262f0:	e6dc      	b.n	80260ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 80262f2:	46b9      	mov	r9, r7
 80262f4:	e704      	b.n	8026100 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e8>
 80262f6:	f1c2 0110 	rsb	r1, r2, #16
 80262fa:	437a      	muls	r2, r7
 80262fc:	fb09 2901 	mla	r9, r9, r1, r2
 8026300:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026304:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8026308:	ea4f 1259 	mov.w	r2, r9, lsr #5
 802630c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026310:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026314:	4302      	orrs	r2, r0
 8026316:	e795      	b.n	8026244 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>
 8026318:	f8ae 2000 	strh.w	r2, [lr]
 802631c:	e7d6      	b.n	80262cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b4>
 802631e:	b017      	add	sp, #92	; 0x5c
 8026320:	ecbd 8b08 	vpop	{d8-d11}
 8026324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026328 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8026328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802632c:	b085      	sub	sp, #20
 802632e:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	; 0x40
 8026332:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8026336:	9103      	str	r1, [sp, #12]
 8026338:	2d00      	cmp	r5, #0
 802633a:	fb05 7106 	mla	r1, r5, r6, r7
 802633e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8026342:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8026346:	eb03 0441 	add.w	r4, r3, r1, lsl #1
 802634a:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802634e:	eb02 0901 	add.w	r9, r2, r1
 8026352:	9401      	str	r4, [sp, #4]
 8026354:	f2c0 80c0 	blt.w	80264d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 8026358:	45a8      	cmp	r8, r5
 802635a:	f340 80bd 	ble.w	80264d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1b0>
 802635e:	2f00      	cmp	r7, #0
 8026360:	f2c0 80b6 	blt.w	80264d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 8026364:	42be      	cmp	r6, r7
 8026366:	f340 80b3 	ble.w	80264d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1a8>
 802636a:	f812 c001 	ldrb.w	ip, [r2, r1]
 802636e:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8026372:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026376:	d019      	beq.n	80263ac <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x84>
 8026378:	f421 63fc 	bic.w	r3, r1, #2016	; 0x7e0
 802637c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8026380:	435a      	muls	r2, r3
 8026382:	f401 63fc 	and.w	r3, r1, #2016	; 0x7e0
 8026386:	f64f 011f 	movw	r1, #63519	; 0xf81f
 802638a:	fb0c f403 	mul.w	r4, ip, r3
 802638e:	ea01 1352 	and.w	r3, r1, r2, lsr #5
 8026392:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8026396:	441a      	add	r2, r3
 8026398:	f104 0320 	add.w	r3, r4, #32
 802639c:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 80263a0:	ea01 1152 	and.w	r1, r1, r2, lsr #5
 80263a4:	0a1b      	lsrs	r3, r3, #8
 80263a6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80263aa:	4319      	orrs	r1, r3
 80263ac:	b289      	uxth	r1, r1
 80263ae:	1c7b      	adds	r3, r7, #1
 80263b0:	f100 8097 	bmi.w	80264e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 80263b4:	429e      	cmp	r6, r3
 80263b6:	f340 8094 	ble.w	80264e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1ba>
 80263ba:	2800      	cmp	r0, #0
 80263bc:	f000 8094 	beq.w	80264e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c0>
 80263c0:	f899 4001 	ldrb.w	r4, [r9, #1]
 80263c4:	9b01      	ldr	r3, [sp, #4]
 80263c6:	2cff      	cmp	r4, #255	; 0xff
 80263c8:	885b      	ldrh	r3, [r3, #2]
 80263ca:	d01b      	beq.n	8026404 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xdc>
 80263cc:	f423 62fc 	bic.w	r2, r3, #2016	; 0x7e0
 80263d0:	ea4f 0ae4 	mov.w	sl, r4, asr #3
 80263d4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80263d8:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80263dc:	fb0a f202 	mul.w	r2, sl, r2
 80263e0:	fb04 fa03 	mul.w	sl, r4, r3
 80263e4:	ea0b 1352 	and.w	r3, fp, r2, lsr #5
 80263e8:	f602 0201 	addw	r2, r2, #2049	; 0x801
 80263ec:	441a      	add	r2, r3
 80263ee:	f10a 0320 	add.w	r3, sl, #32
 80263f2:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 80263f6:	ea0b 1b52 	and.w	fp, fp, r2, lsr #5
 80263fa:	0a1b      	lsrs	r3, r3, #8
 80263fc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026400:	ea4b 0303 	orr.w	r3, fp, r3
 8026404:	b29b      	uxth	r3, r3
 8026406:	3501      	adds	r5, #1
 8026408:	d474      	bmi.n	80264f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 802640a:	45a8      	cmp	r8, r5
 802640c:	dd72      	ble.n	80264f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1cc>
 802640e:	f1be 0f00 	cmp.w	lr, #0
 8026412:	f000 8110 	beq.w	8026636 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x30e>
 8026416:	2f00      	cmp	r7, #0
 8026418:	db69      	blt.n	80264ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 802641a:	42be      	cmp	r6, r7
 802641c:	dd67      	ble.n	80264ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1c6>
 802641e:	f819 5006 	ldrb.w	r5, [r9, r6]
 8026422:	9a01      	ldr	r2, [sp, #4]
 8026424:	2dff      	cmp	r5, #255	; 0xff
 8026426:	f832 b016 	ldrh.w	fp, [r2, r6, lsl #1]
 802642a:	d01c      	beq.n	8026466 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x13e>
 802642c:	f42b 62fc 	bic.w	r2, fp, #2016	; 0x7e0
 8026430:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8026434:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8026438:	fb08 f802 	mul.w	r8, r8, r2
 802643c:	fb05 fa0b 	mul.w	sl, r5, fp
 8026440:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8026444:	ea0b 1258 	and.w	r2, fp, r8, lsr #5
 8026448:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802644c:	4490      	add	r8, r2
 802644e:	f10a 0220 	add.w	r2, sl, #32
 8026452:	eb02 2a1a 	add.w	sl, r2, sl, lsr #8
 8026456:	ea0b 1b58 	and.w	fp, fp, r8, lsr #5
 802645a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802645e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8026462:	ea4b 0b0a 	orr.w	fp, fp, sl
 8026466:	fa1f fb8b 	uxth.w	fp, fp
 802646a:	3701      	adds	r7, #1
 802646c:	d447      	bmi.n	80264fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 802646e:	42be      	cmp	r6, r7
 8026470:	dd45      	ble.n	80264fe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1d6>
 8026472:	2800      	cmp	r0, #0
 8026474:	d046      	beq.n	8026504 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1dc>
 8026476:	3601      	adds	r6, #1
 8026478:	9a01      	ldr	r2, [sp, #4]
 802647a:	f819 7006 	ldrb.w	r7, [r9, r6]
 802647e:	f832 2016 	ldrh.w	r2, [r2, r6, lsl #1]
 8026482:	2fff      	cmp	r7, #255	; 0xff
 8026484:	d01a      	beq.n	80264bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x194>
 8026486:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 802648a:	ea4f 08e7 	mov.w	r8, r7, asr #3
 802648e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026492:	fb08 f806 	mul.w	r8, r8, r6
 8026496:	fb07 f902 	mul.w	r9, r7, r2
 802649a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 802649e:	ea02 1658 	and.w	r6, r2, r8, lsr #5
 80264a2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80264a6:	44b0      	add	r8, r6
 80264a8:	f109 0620 	add.w	r6, r9, #32
 80264ac:	eb06 2619 	add.w	r6, r6, r9, lsr #8
 80264b0:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 80264b4:	0a36      	lsrs	r6, r6, #8
 80264b6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80264ba:	4332      	orrs	r2, r6
 80264bc:	b292      	uxth	r2, r2
 80264be:	280f      	cmp	r0, #15
 80264c0:	d922      	bls.n	8026508 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e0>
 80264c2:	4b61      	ldr	r3, [pc, #388]	; (8026648 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x320>)
 80264c4:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 80264c8:	4a60      	ldr	r2, [pc, #384]	; (802664c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x324>)
 80264ca:	4861      	ldr	r0, [pc, #388]	; (8026650 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x328>)
 80264cc:	f003 fcc0 	bl	8029e50 <__assert_func>
 80264d0:	f04f 0c00 	mov.w	ip, #0
 80264d4:	4661      	mov	r1, ip
 80264d6:	e76a      	b.n	80263ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x86>
 80264d8:	2400      	movs	r4, #0
 80264da:	46a4      	mov	ip, r4
 80264dc:	4623      	mov	r3, r4
 80264de:	4621      	mov	r1, r4
 80264e0:	e791      	b.n	8026406 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80264e2:	2400      	movs	r4, #0
 80264e4:	4623      	mov	r3, r4
 80264e6:	e78e      	b.n	8026406 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80264e8:	4604      	mov	r4, r0
 80264ea:	4603      	mov	r3, r0
 80264ec:	e78b      	b.n	8026406 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xde>
 80264ee:	2500      	movs	r5, #0
 80264f0:	46ab      	mov	fp, r5
 80264f2:	e7ba      	b.n	802646a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x142>
 80264f4:	2700      	movs	r7, #0
 80264f6:	463d      	mov	r5, r7
 80264f8:	463a      	mov	r2, r7
 80264fa:	46bb      	mov	fp, r7
 80264fc:	e7df      	b.n	80264be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 80264fe:	2700      	movs	r7, #0
 8026500:	463a      	mov	r2, r7
 8026502:	e7dc      	b.n	80264be <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x196>
 8026504:	4607      	mov	r7, r0
 8026506:	4602      	mov	r2, r0
 8026508:	f1be 0f0f 	cmp.w	lr, #15
 802650c:	d8d9      	bhi.n	80264c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 802650e:	b286      	uxth	r6, r0
 8026510:	fa1f f98e 	uxth.w	r9, lr
 8026514:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026518:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802651c:	fb06 f809 	mul.w	r8, r6, r9
 8026520:	0136      	lsls	r6, r6, #4
 8026522:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026526:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 802652a:	9601      	str	r6, [sp, #4]
 802652c:	ea4a 0101 	orr.w	r1, sl, r1
 8026530:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 8026534:	fa1f f689 	uxth.w	r6, r9
 8026538:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802653c:	fb10 f90e 	smulbb	r9, r0, lr
 8026540:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026544:	9602      	str	r6, [sp, #8]
 8026546:	460e      	mov	r6, r1
 8026548:	ea4f 09e9 	mov.w	r9, r9, asr #3
 802654c:	f1ce 0110 	rsb	r1, lr, #16
 8026550:	ea4a 0303 	orr.w	r3, sl, r3
 8026554:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026558:	1a09      	subs	r1, r1, r0
 802655a:	ebc9 0040 	rsb	r0, r9, r0, lsl #1
 802655e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026562:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026566:	4343      	muls	r3, r0
 8026568:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 802656c:	ea4a 0202 	orr.w	r2, sl, r2
 8026570:	9802      	ldr	r0, [sp, #8]
 8026572:	fb01 3106 	mla	r1, r1, r6, r3
 8026576:	ea4f 4a0b 	mov.w	sl, fp, lsl #16
 802657a:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802657e:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8026582:	fb09 1302 	mla	r3, r9, r2, r1
 8026586:	9a03      	ldr	r2, [sp, #12]
 8026588:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802658c:	8811      	ldrh	r1, [r2, #0]
 802658e:	9a01      	ldr	r2, [sp, #4]
 8026590:	ea4a 0b0b 	orr.w	fp, sl, fp
 8026594:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8026598:	fb0e 3e0b 	mla	lr, lr, fp, r3
 802659c:	1a12      	subs	r2, r2, r0
 802659e:	9801      	ldr	r0, [sp, #4]
 80265a0:	ea4f 535e 	mov.w	r3, lr, lsr #21
 80265a4:	eba0 0608 	sub.w	r6, r0, r8
 80265a8:	b292      	uxth	r2, r2
 80265aa:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80265ae:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80265b2:	b2b6      	uxth	r6, r6
 80265b4:	10c8      	asrs	r0, r1, #3
 80265b6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80265ba:	4374      	muls	r4, r6
 80265bc:	ea43 0e0e 	orr.w	lr, r3, lr
 80265c0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80265c4:	fb0c 4402 	mla	r4, ip, r2, r4
 80265c8:	9a02      	ldr	r2, [sp, #8]
 80265ca:	fa1f f38e 	uxth.w	r3, lr
 80265ce:	fb02 4505 	mla	r5, r2, r5, r4
 80265d2:	120a      	asrs	r2, r1, #8
 80265d4:	00c9      	lsls	r1, r1, #3
 80265d6:	fb08 5707 	mla	r7, r8, r7, r5
 80265da:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80265de:	b2c9      	uxtb	r1, r1
 80265e0:	ea6f 2727 	mvn.w	r7, r7, asr #8
 80265e4:	b2ff      	uxtb	r7, r7
 80265e6:	437a      	muls	r2, r7
 80265e8:	4378      	muls	r0, r7
 80265ea:	434f      	muls	r7, r1
 80265ec:	1c51      	adds	r1, r2, #1
 80265ee:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80265f2:	121a      	asrs	r2, r3, #8
 80265f4:	f022 0207 	bic.w	r2, r2, #7
 80265f8:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80265fc:	1c41      	adds	r1, r0, #1
 80265fe:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8026602:	10d9      	asrs	r1, r3, #3
 8026604:	0212      	lsls	r2, r2, #8
 8026606:	f021 0103 	bic.w	r1, r1, #3
 802660a:	00db      	lsls	r3, r3, #3
 802660c:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8026610:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8026614:	00c9      	lsls	r1, r1, #3
 8026616:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802661a:	430a      	orrs	r2, r1
 802661c:	1c79      	adds	r1, r7, #1
 802661e:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8026622:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8026626:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 802662a:	4313      	orrs	r3, r2
 802662c:	9a03      	ldr	r2, [sp, #12]
 802662e:	8013      	strh	r3, [r2, #0]
 8026630:	b005      	add	sp, #20
 8026632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026636:	280f      	cmp	r0, #15
 8026638:	f63f af43 	bhi.w	80264c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x19a>
 802663c:	4677      	mov	r7, lr
 802663e:	4675      	mov	r5, lr
 8026640:	4672      	mov	r2, lr
 8026642:	46f3      	mov	fp, lr
 8026644:	e763      	b.n	802650e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x1e6>
 8026646:	bf00      	nop
 8026648:	08031892 	.word	0x08031892
 802664c:	08031e62 	.word	0x08031e62
 8026650:	08031916 	.word	0x08031916

08026654 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026658:	ed2d 8b08 	vpush	{d8-d11}
 802665c:	b093      	sub	sp, #76	; 0x4c
 802665e:	eeb0 aa40 	vmov.f32	s20, s0
 8026662:	eef0 9a60 	vmov.f32	s19, s1
 8026666:	9210      	str	r2, [sp, #64]	; 0x40
 8026668:	eeb0 9a41 	vmov.f32	s18, s2
 802666c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802666e:	eeb0 8a62 	vmov.f32	s16, s5
 8026672:	9011      	str	r0, [sp, #68]	; 0x44
 8026674:	eef0 8a43 	vmov.f32	s17, s6
 8026678:	6850      	ldr	r0, [r2, #4]
 802667a:	eef0 ba44 	vmov.f32	s23, s8
 802667e:	910e      	str	r1, [sp, #56]	; 0x38
 8026680:	eeb0 ba64 	vmov.f32	s22, s9
 8026684:	9306      	str	r3, [sp, #24]
 8026686:	eef0 aa45 	vmov.f32	s21, s10
 802668a:	6812      	ldr	r2, [r2, #0]
 802668c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8026690:	fb00 1303 	mla	r3, r0, r3, r1
 8026694:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026698:	9307      	str	r3, [sp, #28]
 802669a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802669c:	681b      	ldr	r3, [r3, #0]
 802669e:	9308      	str	r3, [sp, #32]
 80266a0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80266a2:	685b      	ldr	r3, [r3, #4]
 80266a4:	9309      	str	r3, [sp, #36]	; 0x24
 80266a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80266a8:	2b00      	cmp	r3, #0
 80266aa:	dc03      	bgt.n	80266b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80266ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80266ae:	2b00      	cmp	r3, #0
 80266b0:	f340 83b6 	ble.w	8026e20 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 80266b4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80266b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80266ba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80266be:	1e48      	subs	r0, r1, #1
 80266c0:	1e55      	subs	r5, r2, #1
 80266c2:	9b06      	ldr	r3, [sp, #24]
 80266c4:	2b00      	cmp	r3, #0
 80266c6:	f340 8165 	ble.w	8026994 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 80266ca:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80266cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80266ce:	1436      	asrs	r6, r6, #16
 80266d0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80266d4:	d406      	bmi.n	80266e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80266d6:	4286      	cmp	r6, r0
 80266d8:	da04      	bge.n	80266e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80266da:	2b00      	cmp	r3, #0
 80266dc:	db02      	blt.n	80266e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80266de:	42ab      	cmp	r3, r5
 80266e0:	f2c0 8159 	blt.w	8026996 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80266e4:	3601      	adds	r6, #1
 80266e6:	f100 8146 	bmi.w	8026976 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80266ea:	42b1      	cmp	r1, r6
 80266ec:	f2c0 8143 	blt.w	8026976 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80266f0:	3301      	adds	r3, #1
 80266f2:	f100 8140 	bmi.w	8026976 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80266f6:	429a      	cmp	r2, r3
 80266f8:	f2c0 813d 	blt.w	8026976 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80266fc:	9b06      	ldr	r3, [sp, #24]
 80266fe:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8026702:	9f07      	ldr	r7, [sp, #28]
 8026704:	930f      	str	r3, [sp, #60]	; 0x3c
 8026706:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026708:	2b00      	cmp	r3, #0
 802670a:	f340 8166 	ble.w	80269da <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802670e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026710:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8026712:	1418      	asrs	r0, r3, #16
 8026714:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026716:	142d      	asrs	r5, r5, #16
 8026718:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802671c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802671e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8026722:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026724:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8026728:	f100 81f0 	bmi.w	8026b0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 802672c:	f102 3eff 	add.w	lr, r2, #4294967295
 8026730:	4575      	cmp	r5, lr
 8026732:	f280 81eb 	bge.w	8026b0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8026736:	2800      	cmp	r0, #0
 8026738:	f2c0 81e8 	blt.w	8026b0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 802673c:	f103 3eff 	add.w	lr, r3, #4294967295
 8026740:	4570      	cmp	r0, lr
 8026742:	f280 81e3 	bge.w	8026b0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b8>
 8026746:	b212      	sxth	r2, r2
 8026748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802674a:	fa1f fe81 	uxth.w	lr, r1
 802674e:	fb00 5002 	mla	r0, r0, r2, r5
 8026752:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8026756:	eb03 0a00 	add.w	sl, r3, r0
 802675a:	f813 9000 	ldrb.w	r9, [r3, r0]
 802675e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8026762:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026766:	b29b      	uxth	r3, r3
 8026768:	f1bc 0f00 	cmp.w	ip, #0
 802676c:	f000 817b 	beq.w	8026a66 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8026770:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8026774:	eb0a 0b02 	add.w	fp, sl, r2
 8026778:	fa1f fa8c 	uxth.w	sl, ip
 802677c:	940a      	str	r4, [sp, #40]	; 0x28
 802677e:	fb0a fe0e 	mul.w	lr, sl, lr
 8026782:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026786:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802678a:	eba5 050e 	sub.w	r5, r5, lr
 802678e:	940b      	str	r4, [sp, #44]	; 0x2c
 8026790:	fa1f fa8a 	uxth.w	sl, sl
 8026794:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8026796:	b2ad      	uxth	r5, r5
 8026798:	eba3 030a 	sub.w	r3, r3, sl
 802679c:	fb08 f505 	mul.w	r5, r8, r5
 80267a0:	b29b      	uxth	r3, r3
 80267a2:	fb09 5303 	mla	r3, r9, r3, r5
 80267a6:	fb0a 3304 	mla	r3, sl, r4, r3
 80267aa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80267ac:	fb0e 3304 	mla	r3, lr, r4, r3
 80267b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80267b4:	2b00      	cmp	r3, #0
 80267b6:	f000 80d1 	beq.w	802695c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 80267ba:	9c08      	ldr	r4, [sp, #32]
 80267bc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80267c0:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80267c4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80267c8:	f000 8152 	beq.w	8026a70 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 80267cc:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80267d0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80267d4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80267d8:	fb0a fe0e 	mul.w	lr, sl, lr
 80267dc:	fb09 f000 	mul.w	r0, r9, r0
 80267e0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80267e4:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80267e8:	f100 0b20 	add.w	fp, r0, #32
 80267ec:	44ce      	add	lr, r9
 80267ee:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80267f2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80267f6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80267fa:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80267fe:	ea4e 0909 	orr.w	r9, lr, r9
 8026802:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026806:	8868      	ldrh	r0, [r5, #2]
 8026808:	d019      	beq.n	802683e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802680a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802680e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026812:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026816:	fb0a fe0e 	mul.w	lr, sl, lr
 802681a:	fb08 f800 	mul.w	r8, r8, r0
 802681e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8026822:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8026826:	f108 0b20 	add.w	fp, r8, #32
 802682a:	4486      	add	lr, r0
 802682c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8026830:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026834:	0a00      	lsrs	r0, r0, #8
 8026836:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802683a:	ea4e 0000 	orr.w	r0, lr, r0
 802683e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8026842:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026846:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802684a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802684e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8026852:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026856:	ea4e 0909 	orr.w	r9, lr, r9
 802685a:	ea4a 0000 	orr.w	r0, sl, r0
 802685e:	f1bc 0f00 	cmp.w	ip, #0
 8026862:	f000 8107 	beq.w	8026a74 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8026866:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 802686a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802686c:	3a01      	subs	r2, #1
 802686e:	2cff      	cmp	r4, #255	; 0xff
 8026870:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8026874:	f102 0202 	add.w	r2, r2, #2
 8026878:	eb05 0e02 	add.w	lr, r5, r2
 802687c:	5aaa      	ldrh	r2, [r5, r2]
 802687e:	d018      	beq.n	80268b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8026880:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8026884:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026888:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802688c:	fb04 fa02 	mul.w	sl, r4, r2
 8026890:	fb08 f805 	mul.w	r8, r8, r5
 8026894:	f10a 0520 	add.w	r5, sl, #32
 8026898:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 802689c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80268a0:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80268a4:	4442      	add	r2, r8
 80268a6:	0a2d      	lsrs	r5, r5, #8
 80268a8:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80268ac:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80268b0:	432a      	orrs	r2, r5
 80268b2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80268b4:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80268b8:	2cff      	cmp	r4, #255	; 0xff
 80268ba:	d01a      	beq.n	80268f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80268bc:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80268c0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80268c4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80268c8:	fb04 fa05 	mul.w	sl, r4, r5
 80268cc:	fb08 f80e 	mul.w	r8, r8, lr
 80268d0:	f10a 0e20 	add.w	lr, sl, #32
 80268d4:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80268d8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80268dc:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80268e0:	4445      	add	r5, r8
 80268e2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80268e6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80268ea:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80268ee:	ea45 050e 	orr.w	r5, r5, lr
 80268f2:	fb1c fe01 	smulbb	lr, ip, r1
 80268f6:	f1cc 0810 	rsb	r8, ip, #16
 80268fa:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80268fe:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026902:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8026906:	eba8 0801 	sub.w	r8, r8, r1
 802690a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802690e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026912:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8026916:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802691a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802691e:	ea4a 0202 	orr.w	r2, sl, r2
 8026922:	4341      	muls	r1, r0
 8026924:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8026928:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802692c:	fb09 1108 	mla	r1, r9, r8, r1
 8026930:	ea4b 0505 	orr.w	r5, fp, r5
 8026934:	fb0c 1102 	mla	r1, ip, r2, r1
 8026938:	fb0e 1e05 	mla	lr, lr, r5, r1
 802693c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026940:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8026944:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026948:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802694c:	ea42 0e0e 	orr.w	lr, r2, lr
 8026950:	fa1f f28e 	uxth.w	r2, lr
 8026954:	2bff      	cmp	r3, #255	; 0xff
 8026956:	f040 80a1 	bne.w	8026a9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 802695a:	803a      	strh	r2, [r7, #0]
 802695c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802695e:	3702      	adds	r7, #2
 8026960:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8026962:	4413      	add	r3, r2
 8026964:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8026966:	9325      	str	r3, [sp, #148]	; 0x94
 8026968:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802696a:	441a      	add	r2, r3
 802696c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802696e:	3b01      	subs	r3, #1
 8026970:	9226      	str	r2, [sp, #152]	; 0x98
 8026972:	930f      	str	r3, [sp, #60]	; 0x3c
 8026974:	e6c7      	b.n	8026706 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8026976:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026978:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 802697a:	9c26      	ldr	r4, [sp, #152]	; 0x98
 802697c:	4433      	add	r3, r6
 802697e:	9325      	str	r3, [sp, #148]	; 0x94
 8026980:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026982:	441c      	add	r4, r3
 8026984:	9b06      	ldr	r3, [sp, #24]
 8026986:	3b01      	subs	r3, #1
 8026988:	9426      	str	r4, [sp, #152]	; 0x98
 802698a:	9306      	str	r3, [sp, #24]
 802698c:	9b07      	ldr	r3, [sp, #28]
 802698e:	3302      	adds	r3, #2
 8026990:	9307      	str	r3, [sp, #28]
 8026992:	e696      	b.n	80266c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8026994:	d028      	beq.n	80269e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8026996:	9b06      	ldr	r3, [sp, #24]
 8026998:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802699a:	3b01      	subs	r3, #1
 802699c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 802699e:	fb00 5003 	mla	r0, r0, r3, r5
 80269a2:	1400      	asrs	r0, r0, #16
 80269a4:	f53f aeaa 	bmi.w	80266fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80269a8:	3901      	subs	r1, #1
 80269aa:	4288      	cmp	r0, r1
 80269ac:	f6bf aea6 	bge.w	80266fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80269b0:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80269b2:	9826      	ldr	r0, [sp, #152]	; 0x98
 80269b4:	fb01 0303 	mla	r3, r1, r3, r0
 80269b8:	141b      	asrs	r3, r3, #16
 80269ba:	f53f ae9f 	bmi.w	80266fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80269be:	3a01      	subs	r2, #1
 80269c0:	4293      	cmp	r3, r2
 80269c2:	f6bf ae9b 	bge.w	80266fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80269c6:	9b06      	ldr	r3, [sp, #24]
 80269c8:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80269cc:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80269d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80269d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80269d4:	2b00      	cmp	r3, #0
 80269d6:	f300 80b6 	bgt.w	8026b46 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 80269da:	9b06      	ldr	r3, [sp, #24]
 80269dc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80269e0:	9b07      	ldr	r3, [sp, #28]
 80269e2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80269e6:	9307      	str	r3, [sp, #28]
 80269e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80269ea:	2b00      	cmp	r3, #0
 80269ec:	f340 8218 	ble.w	8026e20 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7cc>
 80269f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80269f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80269f6:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80269fa:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80269fe:	eef0 6a48 	vmov.f32	s13, s16
 8026a02:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8026a06:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8026a0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026a0e:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8026a12:	eef0 6a68 	vmov.f32	s13, s17
 8026a16:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026a1a:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 8026a1e:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8026a22:	ee69 7a27 	vmul.f32	s15, s18, s15
 8026a26:	ee37 8a48 	vsub.f32	s16, s14, s16
 8026a2a:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8026a2e:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8026a32:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8026a36:	ee18 2a10 	vmov	r2, s16
 8026a3a:	eeb0 8a47 	vmov.f32	s16, s14
 8026a3e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026a42:	ee18 2a90 	vmov	r2, s17
 8026a46:	9327      	str	r3, [sp, #156]	; 0x9c
 8026a48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026a4a:	eef0 8a67 	vmov.f32	s17, s15
 8026a4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8026a52:	9328      	str	r3, [sp, #160]	; 0xa0
 8026a54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026a56:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026a58:	3b01      	subs	r3, #1
 8026a5a:	930e      	str	r3, [sp, #56]	; 0x38
 8026a5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026a5e:	bf08      	it	eq
 8026a60:	4613      	moveq	r3, r2
 8026a62:	9306      	str	r3, [sp, #24]
 8026a64:	e61f      	b.n	80266a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8026a66:	fb08 f505 	mul.w	r5, r8, r5
 8026a6a:	fb09 5303 	mla	r3, r9, r3, r5
 8026a6e:	e69f      	b.n	80267b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8026a70:	4681      	mov	r9, r0
 8026a72:	e6c6      	b.n	8026802 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8026a74:	f1c1 0210 	rsb	r2, r1, #16
 8026a78:	4341      	muls	r1, r0
 8026a7a:	fb09 1902 	mla	r9, r9, r2, r1
 8026a7e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026a82:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8026a86:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8026a8a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026a8e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026a92:	ea42 0909 	orr.w	r9, r2, r9
 8026a96:	fa1f f289 	uxth.w	r2, r9
 8026a9a:	e75b      	b.n	8026954 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8026a9c:	f8b7 c000 	ldrh.w	ip, [r7]
 8026aa0:	43db      	mvns	r3, r3
 8026aa2:	ea4f 202c 	mov.w	r0, ip, asr #8
 8026aa6:	fa5f fe83 	uxtb.w	lr, r3
 8026aaa:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026aae:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8026ab2:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8026ab6:	fb00 f00e 	mul.w	r0, r0, lr
 8026aba:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8026abe:	b2db      	uxtb	r3, r3
 8026ac0:	1c41      	adds	r1, r0, #1
 8026ac2:	fb05 f50e 	mul.w	r5, r5, lr
 8026ac6:	fb03 f30e 	mul.w	r3, r3, lr
 8026aca:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8026ace:	1211      	asrs	r1, r2, #8
 8026ad0:	f021 0107 	bic.w	r1, r1, #7
 8026ad4:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8026ad8:	48d4      	ldr	r0, [pc, #848]	; (8026e2c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 8026ada:	b2c9      	uxtb	r1, r1
 8026adc:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 8026ae0:	1c69      	adds	r1, r5, #1
 8026ae2:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8026ae6:	10d1      	asrs	r1, r2, #3
 8026ae8:	00d2      	lsls	r2, r2, #3
 8026aea:	f021 0103 	bic.w	r1, r1, #3
 8026aee:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8026af2:	00c9      	lsls	r1, r1, #3
 8026af4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026af8:	4301      	orrs	r1, r0
 8026afa:	1c58      	adds	r0, r3, #1
 8026afc:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8026b00:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026b04:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8026b08:	430a      	orrs	r2, r1
 8026b0a:	e726      	b.n	802695a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8026b0c:	f115 0e01 	adds.w	lr, r5, #1
 8026b10:	f53f af24 	bmi.w	802695c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8026b14:	4572      	cmp	r2, lr
 8026b16:	f6ff af21 	blt.w	802695c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8026b1a:	f110 0e01 	adds.w	lr, r0, #1
 8026b1e:	f53f af1d 	bmi.w	802695c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8026b22:	4573      	cmp	r3, lr
 8026b24:	f6ff af1a 	blt.w	802695c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8026b28:	b21b      	sxth	r3, r3
 8026b2a:	b212      	sxth	r2, r2
 8026b2c:	9301      	str	r3, [sp, #4]
 8026b2e:	9200      	str	r2, [sp, #0]
 8026b30:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8026b34:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8026b38:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8026b3c:	4639      	mov	r1, r7
 8026b3e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026b40:	f7ff fbf2 	bl	8026328 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8026b44:	e70a      	b.n	802695c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x308>
 8026b46:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026b48:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026b4c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026b4e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8026b52:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026b54:	fa1f fc82 	uxth.w	ip, r2
 8026b58:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026b5c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026b5e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8026b62:	141f      	asrs	r7, r3, #16
 8026b64:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026b66:	141b      	asrs	r3, r3, #16
 8026b68:	fb01 3707 	mla	r7, r1, r7, r3
 8026b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026b6e:	eb03 0a07 	add.w	sl, r3, r7
 8026b72:	f813 9007 	ldrb.w	r9, [r3, r7]
 8026b76:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8026b7a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026b7e:	b29b      	uxth	r3, r3
 8026b80:	2d00      	cmp	r5, #0
 8026b82:	f000 80fe 	beq.w	8026d82 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8026b86:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8026b8a:	eb0a 0b01 	add.w	fp, sl, r1
 8026b8e:	fa1f fa85 	uxth.w	sl, r5
 8026b92:	940c      	str	r4, [sp, #48]	; 0x30
 8026b94:	fb0a fc0c 	mul.w	ip, sl, ip
 8026b98:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8026b9c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8026ba0:	eba0 000c 	sub.w	r0, r0, ip
 8026ba4:	940d      	str	r4, [sp, #52]	; 0x34
 8026ba6:	fa1f fa8a 	uxth.w	sl, sl
 8026baa:	b280      	uxth	r0, r0
 8026bac:	eba3 030a 	sub.w	r3, r3, sl
 8026bb0:	fb08 f000 	mul.w	r0, r8, r0
 8026bb4:	b29b      	uxth	r3, r3
 8026bb6:	fb09 0303 	mla	r3, r9, r3, r0
 8026bba:	980c      	ldr	r0, [sp, #48]	; 0x30
 8026bbc:	fb0a 3300 	mla	r3, sl, r0, r3
 8026bc0:	fb0c 3304 	mla	r3, ip, r4, r3
 8026bc4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026bc8:	2b00      	cmp	r3, #0
 8026bca:	f000 80cc 	beq.w	8026d66 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8026bce:	9808      	ldr	r0, [sp, #32]
 8026bd0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026bd4:	9c08      	ldr	r4, [sp, #32]
 8026bd6:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8026bda:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8026bde:	f000 80d5 	beq.w	8026d8c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x738>
 8026be2:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8026be6:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026bea:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026bee:	fb0a fc0c 	mul.w	ip, sl, ip
 8026bf2:	fb09 f707 	mul.w	r7, r9, r7
 8026bf6:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8026bfa:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026bfe:	f107 0b20 	add.w	fp, r7, #32
 8026c02:	44cc      	add	ip, r9
 8026c04:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8026c08:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026c0c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026c10:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8026c14:	ea4c 0909 	orr.w	r9, ip, r9
 8026c18:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026c1c:	8847      	ldrh	r7, [r0, #2]
 8026c1e:	d019      	beq.n	8026c54 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 8026c20:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8026c24:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026c28:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026c2c:	fb0a fc0c 	mul.w	ip, sl, ip
 8026c30:	fb08 f807 	mul.w	r8, r8, r7
 8026c34:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8026c38:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026c3c:	f108 0b20 	add.w	fp, r8, #32
 8026c40:	44bc      	add	ip, r7
 8026c42:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8026c46:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026c4a:	0a3f      	lsrs	r7, r7, #8
 8026c4c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026c50:	ea4c 0707 	orr.w	r7, ip, r7
 8026c54:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8026c58:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026c5c:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8026c60:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8026c64:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026c68:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026c6c:	ea4c 0909 	orr.w	r9, ip, r9
 8026c70:	ea4a 0707 	orr.w	r7, sl, r7
 8026c74:	2d00      	cmp	r5, #0
 8026c76:	f000 808b 	beq.w	8026d90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8026c7a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8026c7e:	3901      	subs	r1, #1
 8026c80:	0049      	lsls	r1, r1, #1
 8026c82:	3102      	adds	r1, #2
 8026c84:	eb00 0c01 	add.w	ip, r0, r1
 8026c88:	5a41      	ldrh	r1, [r0, r1]
 8026c8a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8026c8c:	28ff      	cmp	r0, #255	; 0xff
 8026c8e:	d019      	beq.n	8026cc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 8026c90:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8026c94:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026c96:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026c9a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026c9e:	fb04 fa01 	mul.w	sl, r4, r1
 8026ca2:	fb08 f800 	mul.w	r8, r8, r0
 8026ca6:	f10a 0020 	add.w	r0, sl, #32
 8026caa:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8026cae:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026cb2:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8026cb6:	4441      	add	r1, r8
 8026cb8:	0a00      	lsrs	r0, r0, #8
 8026cba:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8026cbe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026cc2:	4301      	orrs	r1, r0
 8026cc4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026cc6:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8026cca:	2cff      	cmp	r4, #255	; 0xff
 8026ccc:	d01a      	beq.n	8026d04 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 8026cce:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8026cd2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026cd6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026cda:	fb04 fa00 	mul.w	sl, r4, r0
 8026cde:	fb08 f80c 	mul.w	r8, r8, ip
 8026ce2:	f10a 0c20 	add.w	ip, sl, #32
 8026ce6:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8026cea:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026cee:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8026cf2:	4440      	add	r0, r8
 8026cf4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026cf8:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8026cfc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8026d00:	ea40 000c 	orr.w	r0, r0, ip
 8026d04:	fb15 fc02 	smulbb	ip, r5, r2
 8026d08:	f1c5 0810 	rsb	r8, r5, #16
 8026d0c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026d10:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026d14:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8026d18:	eba8 0802 	sub.w	r8, r8, r2
 8026d1c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026d20:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026d24:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8026d28:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026d2c:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8026d30:	ea4a 0101 	orr.w	r1, sl, r1
 8026d34:	437a      	muls	r2, r7
 8026d36:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8026d3a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026d3e:	fb09 2208 	mla	r2, r9, r8, r2
 8026d42:	ea4b 0000 	orr.w	r0, fp, r0
 8026d46:	fb05 2201 	mla	r2, r5, r1, r2
 8026d4a:	fb0c 2200 	mla	r2, ip, r0, r2
 8026d4e:	0d57      	lsrs	r7, r2, #21
 8026d50:	0952      	lsrs	r2, r2, #5
 8026d52:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026d56:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026d5a:	433a      	orrs	r2, r7
 8026d5c:	2bff      	cmp	r3, #255	; 0xff
 8026d5e:	b292      	uxth	r2, r2
 8026d60:	d127      	bne.n	8026db2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75e>
 8026d62:	f8ae 2000 	strh.w	r2, [lr]
 8026d66:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026d68:	f10e 0e02 	add.w	lr, lr, #2
 8026d6c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8026d6e:	4413      	add	r3, r2
 8026d70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8026d72:	9325      	str	r3, [sp, #148]	; 0x94
 8026d74:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026d76:	441a      	add	r2, r3
 8026d78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026d7a:	3b01      	subs	r3, #1
 8026d7c:	9226      	str	r2, [sp, #152]	; 0x98
 8026d7e:	930f      	str	r3, [sp, #60]	; 0x3c
 8026d80:	e627      	b.n	80269d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8026d82:	fb08 f000 	mul.w	r0, r8, r0
 8026d86:	fb09 0303 	mla	r3, r9, r3, r0
 8026d8a:	e71b      	b.n	8026bc4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 8026d8c:	46b9      	mov	r9, r7
 8026d8e:	e743      	b.n	8026c18 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 8026d90:	f1c2 0110 	rsb	r1, r2, #16
 8026d94:	437a      	muls	r2, r7
 8026d96:	fb09 2901 	mla	r9, r9, r1, r2
 8026d9a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026d9e:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8026da2:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8026da6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026daa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026dae:	4302      	orrs	r2, r0
 8026db0:	e7d4      	b.n	8026d5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 8026db2:	f8be 7000 	ldrh.w	r7, [lr]
 8026db6:	43db      	mvns	r3, r3
 8026db8:	4c1c      	ldr	r4, [pc, #112]	; (8026e2c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>)
 8026dba:	1238      	asrs	r0, r7, #8
 8026dbc:	fa5f fc83 	uxtb.w	ip, r3
 8026dc0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026dc4:	10fd      	asrs	r5, r7, #3
 8026dc6:	00fb      	lsls	r3, r7, #3
 8026dc8:	fb00 f00c 	mul.w	r0, r0, ip
 8026dcc:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8026dd0:	b2db      	uxtb	r3, r3
 8026dd2:	fb05 f10c 	mul.w	r1, r5, ip
 8026dd6:	1c45      	adds	r5, r0, #1
 8026dd8:	fb03 f30c 	mul.w	r3, r3, ip
 8026ddc:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026de0:	1215      	asrs	r5, r2, #8
 8026de2:	f025 0507 	bic.w	r5, r5, #7
 8026de6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8026dea:	1c4d      	adds	r5, r1, #1
 8026dec:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8026df0:	10d1      	asrs	r1, r2, #3
 8026df2:	b2c0      	uxtb	r0, r0
 8026df4:	f021 0103 	bic.w	r1, r1, #3
 8026df8:	00d2      	lsls	r2, r2, #3
 8026dfa:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8026dfe:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8026e02:	00c9      	lsls	r1, r1, #3
 8026e04:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026e08:	4308      	orrs	r0, r1
 8026e0a:	1c59      	adds	r1, r3, #1
 8026e0c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8026e10:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026e14:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8026e18:	4318      	orrs	r0, r3
 8026e1a:	f8ae 0000 	strh.w	r0, [lr]
 8026e1e:	e7a2      	b.n	8026d66 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8026e20:	b013      	add	sp, #76	; 0x4c
 8026e22:	ecbd 8b08 	vpop	{d8-d11}
 8026e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e2a:	bf00      	nop
 8026e2c:	fffff800 	.word	0xfffff800

08026e30 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8026e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026e34:	e9dd 4c09 	ldrd	r4, ip, [sp, #36]	; 0x24
 8026e38:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8026e3c:	fb0c 4e03 	mla	lr, ip, r3, r4
 8026e40:	f1bc 0f00 	cmp.w	ip, #0
 8026e44:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8026e48:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8026e4c:	eb02 084e 	add.w	r8, r2, lr, lsl #1
 8026e50:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8026e54:	8808      	ldrh	r0, [r1, #0]
 8026e56:	db2f      	blt.n	8026eb8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8026e58:	45e2      	cmp	sl, ip
 8026e5a:	dd2d      	ble.n	8026eb8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x88>
 8026e5c:	2c00      	cmp	r4, #0
 8026e5e:	db29      	blt.n	8026eb4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8026e60:	42a3      	cmp	r3, r4
 8026e62:	dd27      	ble.n	8026eb4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x84>
 8026e64:	f832 901e 	ldrh.w	r9, [r2, lr, lsl #1]
 8026e68:	1c62      	adds	r2, r4, #1
 8026e6a:	d428      	bmi.n	8026ebe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8026e6c:	4293      	cmp	r3, r2
 8026e6e:	dd26      	ble.n	8026ebe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8026e70:	b32f      	cbz	r7, 8026ebe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x8e>
 8026e72:	f8b8 e002 	ldrh.w	lr, [r8, #2]
 8026e76:	f11c 0c01 	adds.w	ip, ip, #1
 8026e7a:	d424      	bmi.n	8026ec6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8026e7c:	45e2      	cmp	sl, ip
 8026e7e:	dd22      	ble.n	8026ec6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x96>
 8026e80:	2e00      	cmp	r6, #0
 8026e82:	f000 809d 	beq.w	8026fc0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x190>
 8026e86:	2c00      	cmp	r4, #0
 8026e88:	db1b      	blt.n	8026ec2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8026e8a:	42a3      	cmp	r3, r4
 8026e8c:	dd19      	ble.n	8026ec2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x92>
 8026e8e:	f838 c013 	ldrh.w	ip, [r8, r3, lsl #1]
 8026e92:	3401      	adds	r4, #1
 8026e94:	d41a      	bmi.n	8026ecc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8026e96:	42a3      	cmp	r3, r4
 8026e98:	dd18      	ble.n	8026ecc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x9c>
 8026e9a:	b1cf      	cbz	r7, 8026ed0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa0>
 8026e9c:	3301      	adds	r3, #1
 8026e9e:	f838 3013 	ldrh.w	r3, [r8, r3, lsl #1]
 8026ea2:	2f0f      	cmp	r7, #15
 8026ea4:	d915      	bls.n	8026ed2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa2>
 8026ea6:	4b49      	ldr	r3, [pc, #292]	; (8026fcc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x19c>)
 8026ea8:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8026eac:	4a48      	ldr	r2, [pc, #288]	; (8026fd0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a0>)
 8026eae:	4849      	ldr	r0, [pc, #292]	; (8026fd4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x1a4>)
 8026eb0:	f002 ffce 	bl	8029e50 <__assert_func>
 8026eb4:	4681      	mov	r9, r0
 8026eb6:	e7d7      	b.n	8026e68 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x38>
 8026eb8:	4686      	mov	lr, r0
 8026eba:	4681      	mov	r9, r0
 8026ebc:	e7db      	b.n	8026e76 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8026ebe:	4686      	mov	lr, r0
 8026ec0:	e7d9      	b.n	8026e76 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x46>
 8026ec2:	4684      	mov	ip, r0
 8026ec4:	e7e5      	b.n	8026e92 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x62>
 8026ec6:	4603      	mov	r3, r0
 8026ec8:	4684      	mov	ip, r0
 8026eca:	e7ea      	b.n	8026ea2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8026ecc:	4603      	mov	r3, r0
 8026ece:	e7e8      	b.n	8026ea2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x72>
 8026ed0:	4603      	mov	r3, r0
 8026ed2:	2e0f      	cmp	r6, #15
 8026ed4:	d8e7      	bhi.n	8026ea6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8026ed6:	fb17 f806 	smulbb	r8, r7, r6
 8026eda:	ea4f 4409 	mov.w	r4, r9, lsl #16
 8026ede:	ea4f 4a0e 	mov.w	sl, lr, lsl #16
 8026ee2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026ee6:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8026eea:	ea4f 08e8 	mov.w	r8, r8, asr #3
 8026eee:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026ef2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026ef6:	ea44 0909 	orr.w	r9, r4, r9
 8026efa:	f1c6 0410 	rsb	r4, r6, #16
 8026efe:	041a      	lsls	r2, r3, #16
 8026f00:	ea4a 0e0e 	orr.w	lr, sl, lr
 8026f04:	1be4      	subs	r4, r4, r7
 8026f06:	ebc8 0747 	rsb	r7, r8, r7, lsl #1
 8026f0a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026f0e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026f12:	fb07 fe0e 	mul.w	lr, r7, lr
 8026f16:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8026f1a:	4313      	orrs	r3, r2
 8026f1c:	ea4f 420c 	mov.w	r2, ip, lsl #16
 8026f20:	fb04 e409 	mla	r4, r4, r9, lr
 8026f24:	ebc8 0646 	rsb	r6, r8, r6, lsl #1
 8026f28:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026f2c:	b2af      	uxth	r7, r5
 8026f2e:	fb08 4303 	mla	r3, r8, r3, r4
 8026f32:	f42c 64fc 	bic.w	r4, ip, #2016	; 0x7e0
 8026f36:	43ed      	mvns	r5, r5
 8026f38:	4322      	orrs	r2, r4
 8026f3a:	b2ed      	uxtb	r5, r5
 8026f3c:	fb06 3202 	mla	r2, r6, r2, r3
 8026f40:	10c6      	asrs	r6, r0, #3
 8026f42:	0d53      	lsrs	r3, r2, #21
 8026f44:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8026f48:	0952      	lsrs	r2, r2, #5
 8026f4a:	fb16 f605 	smulbb	r6, r6, r5
 8026f4e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026f52:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026f56:	431a      	orrs	r2, r3
 8026f58:	b293      	uxth	r3, r2
 8026f5a:	1202      	asrs	r2, r0, #8
 8026f5c:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8026f60:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026f64:	00dc      	lsls	r4, r3, #3
 8026f66:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8026f6a:	fb12 f205 	smulbb	r2, r2, r5
 8026f6e:	b2e4      	uxtb	r4, r4
 8026f70:	fb0c 2c07 	mla	ip, ip, r7, r2
 8026f74:	10da      	asrs	r2, r3, #3
 8026f76:	00c3      	lsls	r3, r0, #3
 8026f78:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026f7c:	fa1f fc8c 	uxth.w	ip, ip
 8026f80:	b2db      	uxtb	r3, r3
 8026f82:	fb02 6207 	mla	r2, r2, r7, r6
 8026f86:	fb13 f305 	smulbb	r3, r3, r5
 8026f8a:	b296      	uxth	r6, r2
 8026f8c:	fb04 3307 	mla	r3, r4, r7, r3
 8026f90:	b29a      	uxth	r2, r3
 8026f92:	f10c 0301 	add.w	r3, ip, #1
 8026f96:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8026f9a:	1c53      	adds	r3, r2, #1
 8026f9c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026fa0:	1c72      	adds	r2, r6, #1
 8026fa2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8026fa6:	eb02 2216 	add.w	r2, r2, r6, lsr #8
 8026faa:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026fae:	0952      	lsrs	r2, r2, #5
 8026fb0:	ea43 030c 	orr.w	r3, r3, ip
 8026fb4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026fb8:	4313      	orrs	r3, r2
 8026fba:	800b      	strh	r3, [r1, #0]
 8026fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026fc0:	2f0f      	cmp	r7, #15
 8026fc2:	f63f af70 	bhi.w	8026ea6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x76>
 8026fc6:	4603      	mov	r3, r0
 8026fc8:	4684      	mov	ip, r0
 8026fca:	e784      	b.n	8026ed6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0xa6>
 8026fcc:	08031892 	.word	0x08031892
 8026fd0:	08031f0b 	.word	0x08031f0b
 8026fd4:	08031916 	.word	0x08031916

08026fd8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026fdc:	ed2d 8b08 	vpush	{d8-d11}
 8026fe0:	b093      	sub	sp, #76	; 0x4c
 8026fe2:	461d      	mov	r5, r3
 8026fe4:	eeb0 aa40 	vmov.f32	s20, s0
 8026fe8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8026fea:	eef0 9a60 	vmov.f32	s19, s1
 8026fee:	9210      	str	r2, [sp, #64]	; 0x40
 8026ff0:	eeb0 9a41 	vmov.f32	s18, s2
 8026ff4:	f89d 20b4 	ldrb.w	r2, [sp, #180]	; 0xb4
 8026ff8:	eeb0 8a62 	vmov.f32	s16, s5
 8026ffc:	910a      	str	r1, [sp, #40]	; 0x28
 8026ffe:	eef0 8a43 	vmov.f32	s17, s6
 8027002:	920b      	str	r2, [sp, #44]	; 0x2c
 8027004:	eef0 ba44 	vmov.f32	s23, s8
 8027008:	6859      	ldr	r1, [r3, #4]
 802700a:	eeb0 ba64 	vmov.f32	s22, s9
 802700e:	681b      	ldr	r3, [r3, #0]
 8027010:	eef0 aa45 	vmov.f32	s21, s10
 8027014:	9011      	str	r0, [sp, #68]	; 0x44
 8027016:	e9dd 272a 	ldrd	r2, r7, [sp, #168]	; 0xa8
 802701a:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 802701e:	fb01 2707 	mla	r7, r1, r7, r2
 8027022:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8027026:	9307      	str	r3, [sp, #28]
 8027028:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802702a:	681b      	ldr	r3, [r3, #0]
 802702c:	9309      	str	r3, [sp, #36]	; 0x24
 802702e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027030:	43db      	mvns	r3, r3
 8027032:	b2db      	uxtb	r3, r3
 8027034:	9308      	str	r3, [sp, #32]
 8027036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027038:	2b00      	cmp	r3, #0
 802703a:	dc03      	bgt.n	8027044 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 802703c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802703e:	2b00      	cmp	r3, #0
 8027040:	f340 8205 	ble.w	802744e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027044:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027046:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802704a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802704e:	1e48      	subs	r0, r1, #1
 8027050:	f102 3cff 	add.w	ip, r2, #4294967295
 8027054:	2d00      	cmp	r5, #0
 8027056:	f340 80da 	ble.w	802720e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 802705a:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802705e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027062:	d406      	bmi.n	8027072 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027064:	4586      	cmp	lr, r0
 8027066:	da04      	bge.n	8027072 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027068:	2b00      	cmp	r3, #0
 802706a:	db02      	blt.n	8027072 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802706c:	4563      	cmp	r3, ip
 802706e:	f2c0 80cf 	blt.w	8027210 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8027072:	f11e 0e01 	adds.w	lr, lr, #1
 8027076:	f100 80c1 	bmi.w	80271fc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802707a:	4571      	cmp	r1, lr
 802707c:	f2c0 80be 	blt.w	80271fc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027080:	3301      	adds	r3, #1
 8027082:	f100 80bb 	bmi.w	80271fc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8027086:	429a      	cmp	r2, r3
 8027088:	f2c0 80b8 	blt.w	80271fc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 802708c:	46a9      	mov	r9, r5
 802708e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8027092:	f1b9 0f00 	cmp.w	r9, #0
 8027096:	f340 80d8 	ble.w	802724a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 802709a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802709c:	1421      	asrs	r1, r4, #16
 802709e:	ea4f 4026 	mov.w	r0, r6, asr #16
 80270a2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80270a6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80270aa:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80270ae:	f100 8112 	bmi.w	80272d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80270b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80270b6:	4551      	cmp	r1, sl
 80270b8:	f280 810d 	bge.w	80272d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80270bc:	2800      	cmp	r0, #0
 80270be:	f2c0 810a 	blt.w	80272d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80270c2:	f103 3aff 	add.w	sl, r3, #4294967295
 80270c6:	4550      	cmp	r0, sl
 80270c8:	f280 8105 	bge.w	80272d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 80270cc:	fa0f f38e 	sxth.w	r3, lr
 80270d0:	fb00 1103 	mla	r1, r0, r3, r1
 80270d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80270d6:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 80270da:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 80270de:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 80270e2:	f1bc 0f00 	cmp.w	ip, #0
 80270e6:	d007      	beq.n	80270f8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 80270e8:	005b      	lsls	r3, r3, #1
 80270ea:	eb0a 0003 	add.w	r0, sl, r3
 80270ee:	f83a 3003 	ldrh.w	r3, [sl, r3]
 80270f2:	930c      	str	r3, [sp, #48]	; 0x30
 80270f4:	8843      	ldrh	r3, [r0, #2]
 80270f6:	930d      	str	r3, [sp, #52]	; 0x34
 80270f8:	ea4f 400e 	mov.w	r0, lr, lsl #16
 80270fc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8027100:	fb12 f30c 	smulbb	r3, r2, ip
 8027104:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027108:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802710c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027110:	10db      	asrs	r3, r3, #3
 8027112:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8027116:	ea40 000e 	orr.w	r0, r0, lr
 802711a:	f1cc 0e10 	rsb	lr, ip, #16
 802711e:	ea4a 0101 	orr.w	r1, sl, r1
 8027122:	9f08      	ldr	r7, [sp, #32]
 8027124:	ebae 0e02 	sub.w	lr, lr, r2
 8027128:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802712c:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8027130:	4351      	muls	r1, r2
 8027132:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8027134:	fb0e 1e00 	mla	lr, lr, r0, r1
 8027138:	990c      	ldr	r1, [sp, #48]	; 0x30
 802713a:	0410      	lsls	r0, r2, #16
 802713c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027140:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027144:	4310      	orrs	r0, r2
 8027146:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027148:	0412      	lsls	r2, r2, #16
 802714a:	fb03 e000 	mla	r0, r3, r0, lr
 802714e:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8027152:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8027156:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802715a:	ea42 020e 	orr.w	r2, r2, lr
 802715e:	fb03 0302 	mla	r3, r3, r2, r0
 8027162:	f8b8 0000 	ldrh.w	r0, [r8]
 8027166:	0d5a      	lsrs	r2, r3, #21
 8027168:	095b      	lsrs	r3, r3, #5
 802716a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802716e:	1201      	asrs	r1, r0, #8
 8027170:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8027174:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8027178:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802717c:	00c0      	lsls	r0, r0, #3
 802717e:	4313      	orrs	r3, r2
 8027180:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8027184:	fb11 f107 	smulbb	r1, r1, r7
 8027188:	b2c0      	uxtb	r0, r0
 802718a:	b29b      	uxth	r3, r3
 802718c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8027190:	fb10 f007 	smulbb	r0, r0, r7
 8027194:	fb1e fe07 	smulbb	lr, lr, r7
 8027198:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802719c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80271a0:	fb0c 1c02 	mla	ip, ip, r2, r1
 80271a4:	10d9      	asrs	r1, r3, #3
 80271a6:	00db      	lsls	r3, r3, #3
 80271a8:	fa1f fc8c 	uxth.w	ip, ip
 80271ac:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80271b0:	b2db      	uxtb	r3, r3
 80271b2:	fb01 e102 	mla	r1, r1, r2, lr
 80271b6:	fb03 0302 	mla	r3, r3, r2, r0
 80271ba:	b289      	uxth	r1, r1
 80271bc:	b29a      	uxth	r2, r3
 80271be:	f10c 0301 	add.w	r3, ip, #1
 80271c2:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80271c6:	1c53      	adds	r3, r2, #1
 80271c8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80271cc:	1c4a      	adds	r2, r1, #1
 80271ce:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80271d2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80271d6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80271da:	0949      	lsrs	r1, r1, #5
 80271dc:	ea43 030c 	orr.w	r3, r3, ip
 80271e0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80271e4:	430b      	orrs	r3, r1
 80271e6:	f8a8 3000 	strh.w	r3, [r8]
 80271ea:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80271ec:	f108 0802 	add.w	r8, r8, #2
 80271f0:	f109 39ff 	add.w	r9, r9, #4294967295
 80271f4:	441c      	add	r4, r3
 80271f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80271f8:	441e      	add	r6, r3
 80271fa:	e74a      	b.n	8027092 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xba>
 80271fc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80271fe:	3d01      	subs	r5, #1
 8027200:	441c      	add	r4, r3
 8027202:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027204:	441e      	add	r6, r3
 8027206:	9b07      	ldr	r3, [sp, #28]
 8027208:	3302      	adds	r3, #2
 802720a:	9307      	str	r3, [sp, #28]
 802720c:	e722      	b.n	8027054 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802720e:	d022      	beq.n	8027256 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8027210:	1e6b      	subs	r3, r5, #1
 8027212:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8027214:	fb00 4003 	mla	r0, r0, r3, r4
 8027218:	1400      	asrs	r0, r0, #16
 802721a:	f53f af37 	bmi.w	802708c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802721e:	3901      	subs	r1, #1
 8027220:	4288      	cmp	r0, r1
 8027222:	f6bf af33 	bge.w	802708c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027226:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8027228:	fb01 6303 	mla	r3, r1, r3, r6
 802722c:	141b      	asrs	r3, r3, #16
 802722e:	f53f af2d 	bmi.w	802708c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 8027232:	3a01      	subs	r2, #1
 8027234:	4293      	cmp	r3, r2
 8027236:	f6bf af29 	bge.w	802708c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb4>
 802723a:	46a8      	mov	r8, r5
 802723c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8027240:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8027244:	f1b8 0f00 	cmp.w	r8, #0
 8027248:	dc60      	bgt.n	802730c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 802724a:	9b07      	ldr	r3, [sp, #28]
 802724c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8027250:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8027254:	9307      	str	r3, [sp, #28]
 8027256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027258:	2b00      	cmp	r3, #0
 802725a:	f340 80f8 	ble.w	802744e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802725e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027262:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027264:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027268:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802726c:	eef0 6a48 	vmov.f32	s13, s16
 8027270:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027274:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027278:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802727c:	ee16 4a90 	vmov	r4, s13
 8027280:	eef0 6a68 	vmov.f32	s13, s17
 8027284:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027288:	ee16 6a90 	vmov	r6, s13
 802728c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027290:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027294:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027298:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802729c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80272a0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80272a4:	ee18 2a10 	vmov	r2, s16
 80272a8:	eeb0 8a47 	vmov.f32	s16, s14
 80272ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80272b0:	ee18 2a90 	vmov	r2, s17
 80272b4:	9327      	str	r3, [sp, #156]	; 0x9c
 80272b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80272b8:	eef0 8a67 	vmov.f32	s17, s15
 80272bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80272c0:	9328      	str	r3, [sp, #160]	; 0xa0
 80272c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80272c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80272c6:	3b01      	subs	r3, #1
 80272c8:	930a      	str	r3, [sp, #40]	; 0x28
 80272ca:	bf08      	it	eq
 80272cc:	4615      	moveq	r5, r2
 80272ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80272d0:	bf18      	it	ne
 80272d2:	461d      	movne	r5, r3
 80272d4:	e6af      	b.n	8027036 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80272d6:	f111 0a01 	adds.w	sl, r1, #1
 80272da:	d486      	bmi.n	80271ea <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80272dc:	45d6      	cmp	lr, sl
 80272de:	db84      	blt.n	80271ea <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80272e0:	f110 0a01 	adds.w	sl, r0, #1
 80272e4:	d481      	bmi.n	80271ea <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80272e6:	4553      	cmp	r3, sl
 80272e8:	f6ff af7f 	blt.w	80271ea <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 80272ec:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80272ee:	b21b      	sxth	r3, r3
 80272f0:	9101      	str	r1, [sp, #4]
 80272f2:	4641      	mov	r1, r8
 80272f4:	9300      	str	r3, [sp, #0]
 80272f6:	fa0f f38e 	sxth.w	r3, lr
 80272fa:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80272fe:	e9cd c704 	strd	ip, r7, [sp, #16]
 8027302:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027304:	9811      	ldr	r0, [sp, #68]	; 0x44
 8027306:	f7ff fd93 	bl	8026e30 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 802730a:	e76e      	b.n	80271ea <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802730c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802730e:	1430      	asrs	r0, r6, #16
 8027310:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8027312:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8027316:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802731a:	1423      	asrs	r3, r4, #16
 802731c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027320:	fb01 3000 	mla	r0, r1, r0, r3
 8027324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027326:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 802732a:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 802732e:	8858      	ldrh	r0, [r3, #2]
 8027330:	f1be 0f00 	cmp.w	lr, #0
 8027334:	d00b      	beq.n	802734e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8027336:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802733a:	3901      	subs	r1, #1
 802733c:	0049      	lsls	r1, r1, #1
 802733e:	3102      	adds	r1, #2
 8027340:	eb03 0b01 	add.w	fp, r3, r1
 8027344:	5a5b      	ldrh	r3, [r3, r1]
 8027346:	930e      	str	r3, [sp, #56]	; 0x38
 8027348:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802734c:	930f      	str	r3, [sp, #60]	; 0x3c
 802734e:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8027352:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8027356:	fb12 f30e 	smulbb	r3, r2, lr
 802735a:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802735e:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8027362:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027366:	10db      	asrs	r3, r3, #3
 8027368:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802736c:	ea41 010c 	orr.w	r1, r1, ip
 8027370:	f1ce 0c10 	rsb	ip, lr, #16
 8027374:	ea4b 0000 	orr.w	r0, fp, r0
 8027378:	9f08      	ldr	r7, [sp, #32]
 802737a:	ebac 0c02 	sub.w	ip, ip, r2
 802737e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027382:	f108 38ff 	add.w	r8, r8, #4294967295
 8027386:	4350      	muls	r0, r2
 8027388:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802738c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802738e:	fb0c 0c01 	mla	ip, ip, r1, r0
 8027392:	980e      	ldr	r0, [sp, #56]	; 0x38
 8027394:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8027398:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 802739c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802739e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80273a2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80273a6:	0412      	lsls	r2, r2, #16
 80273a8:	ea4b 0101 	orr.w	r1, fp, r1
 80273ac:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80273b0:	fb03 c101 	mla	r1, r3, r1, ip
 80273b4:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80273b8:	4302      	orrs	r2, r0
 80273ba:	fb03 1202 	mla	r2, r3, r2, r1
 80273be:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 80273c2:	0952      	lsrs	r2, r2, #5
 80273c4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80273c8:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 80273cc:	f8b9 2000 	ldrh.w	r2, [r9]
 80273d0:	ea4b 0303 	orr.w	r3, fp, r3
 80273d4:	1211      	asrs	r1, r2, #8
 80273d6:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80273da:	b29b      	uxth	r3, r3
 80273dc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80273e0:	00d2      	lsls	r2, r2, #3
 80273e2:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80273e6:	fb11 f107 	smulbb	r1, r1, r7
 80273ea:	1218      	asrs	r0, r3, #8
 80273ec:	fb1c fc07 	smulbb	ip, ip, r7
 80273f0:	b2d2      	uxtb	r2, r2
 80273f2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80273f6:	fb12 f207 	smulbb	r2, r2, r7
 80273fa:	fb00 100a 	mla	r0, r0, sl, r1
 80273fe:	10d9      	asrs	r1, r3, #3
 8027400:	00db      	lsls	r3, r3, #3
 8027402:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8027406:	b280      	uxth	r0, r0
 8027408:	b2db      	uxtb	r3, r3
 802740a:	fb01 c10a 	mla	r1, r1, sl, ip
 802740e:	fb03 230a 	mla	r3, r3, sl, r2
 8027412:	1c42      	adds	r2, r0, #1
 8027414:	b289      	uxth	r1, r1
 8027416:	b29b      	uxth	r3, r3
 8027418:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802741c:	f101 0c01 	add.w	ip, r1, #1
 8027420:	1c5a      	adds	r2, r3, #1
 8027422:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8027426:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802742a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802742e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027430:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8027434:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8027438:	441c      	add	r4, r3
 802743a:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802743e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027440:	4310      	orrs	r0, r2
 8027442:	441e      	add	r6, r3
 8027444:	ea40 000c 	orr.w	r0, r0, ip
 8027448:	f829 0b02 	strh.w	r0, [r9], #2
 802744c:	e6fa      	b.n	8027244 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 802744e:	b013      	add	sp, #76	; 0x4c
 8027450:	ecbd 8b08 	vpop	{d8-d11}
 8027454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027458 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8027458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802745c:	e9dd 5607 	ldrd	r5, r6, [sp, #28]
 8027460:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 8027464:	fb06 5c03 	mla	ip, r6, r3, r5
 8027468:	2e00      	cmp	r6, #0
 802746a:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 802746e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8027472:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8027476:	8808      	ldrh	r0, [r1, #0]
 8027478:	db2e      	blt.n	80274d8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 802747a:	45b0      	cmp	r8, r6
 802747c:	dd2c      	ble.n	80274d8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x80>
 802747e:	2d00      	cmp	r5, #0
 8027480:	db28      	blt.n	80274d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8027482:	42ab      	cmp	r3, r5
 8027484:	dd26      	ble.n	80274d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x7c>
 8027486:	f832 c01c 	ldrh.w	ip, [r2, ip, lsl #1]
 802748a:	1c6a      	adds	r2, r5, #1
 802748c:	d427      	bmi.n	80274de <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 802748e:	4293      	cmp	r3, r2
 8027490:	dd25      	ble.n	80274de <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8027492:	b324      	cbz	r4, 80274de <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x86>
 8027494:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8027498:	3601      	adds	r6, #1
 802749a:	d424      	bmi.n	80274e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 802749c:	45b0      	cmp	r8, r6
 802749e:	dd22      	ble.n	80274e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8e>
 80274a0:	b31f      	cbz	r7, 80274ea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x92>
 80274a2:	2d00      	cmp	r5, #0
 80274a4:	db1d      	blt.n	80274e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 80274a6:	42ab      	cmp	r3, r5
 80274a8:	dd1b      	ble.n	80274e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x8a>
 80274aa:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
 80274ae:	3501      	adds	r5, #1
 80274b0:	d405      	bmi.n	80274be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 80274b2:	42ab      	cmp	r3, r5
 80274b4:	dd03      	ble.n	80274be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 80274b6:	b124      	cbz	r4, 80274c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6a>
 80274b8:	3301      	adds	r3, #1
 80274ba:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
 80274be:	2c0f      	cmp	r4, #15
 80274c0:	d801      	bhi.n	80274c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80274c2:	2f0f      	cmp	r7, #15
 80274c4:	d914      	bls.n	80274f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x98>
 80274c6:	4b27      	ldr	r3, [pc, #156]	; (8027564 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x10c>)
 80274c8:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80274cc:	4a26      	ldr	r2, [pc, #152]	; (8027568 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x110>)
 80274ce:	4827      	ldr	r0, [pc, #156]	; (802756c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x114>)
 80274d0:	f002 fcbe 	bl	8029e50 <__assert_func>
 80274d4:	4684      	mov	ip, r0
 80274d6:	e7d8      	b.n	802748a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x32>
 80274d8:	4602      	mov	r2, r0
 80274da:	4684      	mov	ip, r0
 80274dc:	e7dc      	b.n	8027498 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 80274de:	4602      	mov	r2, r0
 80274e0:	e7da      	b.n	8027498 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x40>
 80274e2:	4606      	mov	r6, r0
 80274e4:	e7e3      	b.n	80274ae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x56>
 80274e6:	4606      	mov	r6, r0
 80274e8:	e7e9      	b.n	80274be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x66>
 80274ea:	2c0f      	cmp	r4, #15
 80274ec:	d8eb      	bhi.n	80274c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 80274ee:	4606      	mov	r6, r0
 80274f0:	fb14 f307 	smulbb	r3, r4, r7
 80274f4:	ea4f 450c 	mov.w	r5, ip, lsl #16
 80274f8:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 80274fc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8027500:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8027504:	10db      	asrs	r3, r3, #3
 8027506:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802750a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802750e:	ea45 0c0c 	orr.w	ip, r5, ip
 8027512:	f1c7 0510 	rsb	r5, r7, #16
 8027516:	ea4e 0202 	orr.w	r2, lr, r2
 802751a:	ebc3 0747 	rsb	r7, r3, r7, lsl #1
 802751e:	1b2d      	subs	r5, r5, r4
 8027520:	ebc3 0444 	rsb	r4, r3, r4, lsl #1
 8027524:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8027528:	4354      	muls	r4, r2
 802752a:	fb05 450c 	mla	r5, r5, ip, r4
 802752e:	0404      	lsls	r4, r0, #16
 8027530:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027534:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8027538:	4320      	orrs	r0, r4
 802753a:	fb03 5400 	mla	r4, r3, r0, r5
 802753e:	0430      	lsls	r0, r6, #16
 8027540:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8027544:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027548:	4330      	orrs	r0, r6
 802754a:	fb07 4000 	mla	r0, r7, r0, r4
 802754e:	0d43      	lsrs	r3, r0, #21
 8027550:	0940      	lsrs	r0, r0, #5
 8027552:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027556:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802755a:	4318      	orrs	r0, r3
 802755c:	8008      	strh	r0, [r1, #0]
 802755e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027562:	bf00      	nop
 8027564:	08031892 	.word	0x08031892
 8027568:	08031f0b 	.word	0x08031f0b
 802756c:	08031916 	.word	0x08031916

08027570 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027574:	ed2d 8b08 	vpush	{d8-d11}
 8027578:	b08f      	sub	sp, #60	; 0x3c
 802757a:	461d      	mov	r5, r3
 802757c:	eeb0 aa40 	vmov.f32	s20, s0
 8027580:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8027582:	eef0 9a60 	vmov.f32	s19, s1
 8027586:	9107      	str	r1, [sp, #28]
 8027588:	eeb0 9a41 	vmov.f32	s18, s2
 802758c:	6859      	ldr	r1, [r3, #4]
 802758e:	eeb0 8a62 	vmov.f32	s16, s5
 8027592:	920c      	str	r2, [sp, #48]	; 0x30
 8027594:	eef0 8a43 	vmov.f32	s17, s6
 8027598:	681b      	ldr	r3, [r3, #0]
 802759a:	eef0 ba44 	vmov.f32	s23, s8
 802759e:	eeb0 ba64 	vmov.f32	s22, s9
 80275a2:	900d      	str	r0, [sp, #52]	; 0x34
 80275a4:	eef0 aa45 	vmov.f32	s21, s10
 80275a8:	e9dd 2726 	ldrd	r2, r7, [sp, #152]	; 0x98
 80275ac:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 80275b0:	fb01 2707 	mla	r7, r1, r7, r2
 80275b4:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80275b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80275ba:	f8d3 8000 	ldr.w	r8, [r3]
 80275be:	9b07      	ldr	r3, [sp, #28]
 80275c0:	2b00      	cmp	r3, #0
 80275c2:	dc03      	bgt.n	80275cc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80275c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80275c6:	2b00      	cmp	r3, #0
 80275c8:	f340 8182 	ble.w	80278d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80275cc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80275ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80275d2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80275d6:	1e48      	subs	r0, r1, #1
 80275d8:	f102 3cff 	add.w	ip, r2, #4294967295
 80275dc:	2d00      	cmp	r5, #0
 80275de:	f340 809b 	ble.w	8027718 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a8>
 80275e2:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80275e6:	ea4f 4326 	mov.w	r3, r6, asr #16
 80275ea:	d406      	bmi.n	80275fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80275ec:	4586      	cmp	lr, r0
 80275ee:	da04      	bge.n	80275fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80275f0:	2b00      	cmp	r3, #0
 80275f2:	db02      	blt.n	80275fa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80275f4:	4563      	cmp	r3, ip
 80275f6:	f2c0 8090 	blt.w	802771a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80275fa:	f11e 0e01 	adds.w	lr, lr, #1
 80275fe:	f100 8084 	bmi.w	802770a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8027602:	4571      	cmp	r1, lr
 8027604:	f2c0 8081 	blt.w	802770a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8027608:	3301      	adds	r3, #1
 802760a:	d47e      	bmi.n	802770a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802760c:	429a      	cmp	r2, r3
 802760e:	db7c      	blt.n	802770a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8027610:	46aa      	mov	sl, r5
 8027612:	46b9      	mov	r9, r7
 8027614:	f1ba 0f00 	cmp.w	sl, #0
 8027618:	f340 8099 	ble.w	802774e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 802761c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802761e:	1421      	asrs	r1, r4, #16
 8027620:	ea4f 4026 	mov.w	r0, r6, asr #16
 8027624:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027628:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802762c:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8027630:	f100 80d1 	bmi.w	80277d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8027634:	f10e 3bff 	add.w	fp, lr, #4294967295
 8027638:	4559      	cmp	r1, fp
 802763a:	f280 80cc 	bge.w	80277d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 802763e:	2800      	cmp	r0, #0
 8027640:	f2c0 80c9 	blt.w	80277d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8027644:	f103 3bff 	add.w	fp, r3, #4294967295
 8027648:	4558      	cmp	r0, fp
 802764a:	f280 80c4 	bge.w	80277d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 802764e:	fa0f fe8e 	sxth.w	lr, lr
 8027652:	fb00 110e 	mla	r1, r0, lr, r1
 8027656:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802765a:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 802765e:	8841      	ldrh	r1, [r0, #2]
 8027660:	f1bc 0f00 	cmp.w	ip, #0
 8027664:	d00b      	beq.n	802767e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8027666:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 802766a:	3b01      	subs	r3, #1
 802766c:	005b      	lsls	r3, r3, #1
 802766e:	3302      	adds	r3, #2
 8027670:	eb00 0e03 	add.w	lr, r0, r3
 8027674:	5ac3      	ldrh	r3, [r0, r3]
 8027676:	9308      	str	r3, [sp, #32]
 8027678:	f8be 3002 	ldrh.w	r3, [lr, #2]
 802767c:	9309      	str	r3, [sp, #36]	; 0x24
 802767e:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8027682:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8027686:	fb12 f30c 	smulbb	r3, r2, ip
 802768a:	f1cc 0e10 	rsb	lr, ip, #16
 802768e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027692:	10db      	asrs	r3, r3, #3
 8027694:	ebae 0e02 	sub.w	lr, lr, r2
 8027698:	ea40 000b 	orr.w	r0, r0, fp
 802769c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80276a0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80276a4:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80276a8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80276ac:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80276b0:	ea4b 0101 	orr.w	r1, fp, r1
 80276b4:	4351      	muls	r1, r2
 80276b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80276b8:	fb0e 1e00 	mla	lr, lr, r0, r1
 80276bc:	0410      	lsls	r0, r2, #16
 80276be:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80276c2:	9908      	ldr	r1, [sp, #32]
 80276c4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80276c8:	4310      	orrs	r0, r2
 80276ca:	9a08      	ldr	r2, [sp, #32]
 80276cc:	0412      	lsls	r2, r2, #16
 80276ce:	fb03 e000 	mla	r0, r3, r0, lr
 80276d2:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 80276d6:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 80276da:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80276de:	ea42 020e 	orr.w	r2, r2, lr
 80276e2:	fb03 0302 	mla	r3, r3, r2, r0
 80276e6:	0d5a      	lsrs	r2, r3, #21
 80276e8:	095b      	lsrs	r3, r3, #5
 80276ea:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80276ee:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80276f2:	4313      	orrs	r3, r2
 80276f4:	f8a9 3000 	strh.w	r3, [r9]
 80276f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80276fa:	f109 0902 	add.w	r9, r9, #2
 80276fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8027702:	441c      	add	r4, r3
 8027704:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027706:	441e      	add	r6, r3
 8027708:	e784      	b.n	8027614 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 802770a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802770c:	3d01      	subs	r5, #1
 802770e:	3702      	adds	r7, #2
 8027710:	441c      	add	r4, r3
 8027712:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027714:	441e      	add	r6, r3
 8027716:	e761      	b.n	80275dc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8027718:	d01d      	beq.n	8027756 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802771a:	1e6b      	subs	r3, r5, #1
 802771c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802771e:	fb00 4003 	mla	r0, r0, r3, r4
 8027722:	1400      	asrs	r0, r0, #16
 8027724:	f53f af74 	bmi.w	8027610 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027728:	3901      	subs	r1, #1
 802772a:	4288      	cmp	r0, r1
 802772c:	f6bf af70 	bge.w	8027610 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027730:	9924      	ldr	r1, [sp, #144]	; 0x90
 8027732:	fb01 6303 	mla	r3, r1, r3, r6
 8027736:	141b      	asrs	r3, r3, #16
 8027738:	f53f af6a 	bmi.w	8027610 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 802773c:	3a01      	subs	r2, #1
 802773e:	4293      	cmp	r3, r2
 8027740:	f6bf af66 	bge.w	8027610 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8027744:	46a9      	mov	r9, r5
 8027746:	46ba      	mov	sl, r7
 8027748:	f1b9 0f00 	cmp.w	r9, #0
 802774c:	dc5b      	bgt.n	8027806 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 802774e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8027752:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8027756:	9b07      	ldr	r3, [sp, #28]
 8027758:	2b00      	cmp	r3, #0
 802775a:	f340 80b9 	ble.w	80278d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802775e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027762:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027764:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027768:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802776c:	eef0 6a48 	vmov.f32	s13, s16
 8027770:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027774:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027778:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802777c:	ee16 4a90 	vmov	r4, s13
 8027780:	eef0 6a68 	vmov.f32	s13, s17
 8027784:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027788:	ee16 6a90 	vmov	r6, s13
 802778c:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027790:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027794:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027798:	ee77 8ae8 	vsub.f32	s17, s15, s17
 802779c:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80277a0:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80277a4:	ee18 2a10 	vmov	r2, s16
 80277a8:	eeb0 8a47 	vmov.f32	s16, s14
 80277ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80277b0:	ee18 2a90 	vmov	r2, s17
 80277b4:	9323      	str	r3, [sp, #140]	; 0x8c
 80277b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80277b8:	eef0 8a67 	vmov.f32	s17, s15
 80277bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80277c0:	9324      	str	r3, [sp, #144]	; 0x90
 80277c2:	9b07      	ldr	r3, [sp, #28]
 80277c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80277c6:	3b01      	subs	r3, #1
 80277c8:	9307      	str	r3, [sp, #28]
 80277ca:	bf08      	it	eq
 80277cc:	4615      	moveq	r5, r2
 80277ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80277d0:	bf18      	it	ne
 80277d2:	461d      	movne	r5, r3
 80277d4:	e6f3      	b.n	80275be <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80277d6:	f111 0b01 	adds.w	fp, r1, #1
 80277da:	d48d      	bmi.n	80276f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80277dc:	45de      	cmp	lr, fp
 80277de:	db8b      	blt.n	80276f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80277e0:	f110 0b01 	adds.w	fp, r0, #1
 80277e4:	d488      	bmi.n	80276f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80277e6:	455b      	cmp	r3, fp
 80277e8:	db86      	blt.n	80276f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80277ea:	b21b      	sxth	r3, r3
 80277ec:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80277f0:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80277f4:	9300      	str	r3, [sp, #0]
 80277f6:	4642      	mov	r2, r8
 80277f8:	fa0f f38e 	sxth.w	r3, lr
 80277fc:	4649      	mov	r1, r9
 80277fe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8027800:	f7ff fe2a 	bl	8027458 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8027804:	e778      	b.n	80276f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8027806:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027808:	1420      	asrs	r0, r4, #16
 802780a:	1431      	asrs	r1, r6, #16
 802780c:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8027810:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8027814:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027818:	fb03 0101 	mla	r1, r3, r1, r0
 802781c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8027820:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8027824:	8841      	ldrh	r1, [r0, #2]
 8027826:	f1be 0f00 	cmp.w	lr, #0
 802782a:	d00b      	beq.n	8027844 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 802782c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8027830:	3b01      	subs	r3, #1
 8027832:	005b      	lsls	r3, r3, #1
 8027834:	3302      	adds	r3, #2
 8027836:	eb00 0b03 	add.w	fp, r0, r3
 802783a:	5ac3      	ldrh	r3, [r0, r3]
 802783c:	930a      	str	r3, [sp, #40]	; 0x28
 802783e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8027842:	930b      	str	r3, [sp, #44]	; 0x2c
 8027844:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8027848:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802784c:	fb12 f30e 	smulbb	r3, r2, lr
 8027850:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8027854:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027858:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802785c:	10db      	asrs	r3, r3, #3
 802785e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027862:	ea40 000c 	orr.w	r0, r0, ip
 8027866:	f1ce 0c10 	rsb	ip, lr, #16
 802786a:	ea4b 0101 	orr.w	r1, fp, r1
 802786e:	f109 39ff 	add.w	r9, r9, #4294967295
 8027872:	ebac 0c02 	sub.w	ip, ip, r2
 8027876:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802787a:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802787e:	4351      	muls	r1, r2
 8027880:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027882:	fb0c 1c00 	mla	ip, ip, r0, r1
 8027886:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027888:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802788c:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8027890:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027892:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027896:	0412      	lsls	r2, r2, #16
 8027898:	ea4b 0000 	orr.w	r0, fp, r0
 802789c:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 80278a0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80278a4:	fb03 c000 	mla	r0, r3, r0, ip
 80278a8:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80278ac:	ea42 0b0b 	orr.w	fp, r2, fp
 80278b0:	fb03 000b 	mla	r0, r3, fp, r0
 80278b4:	0d43      	lsrs	r3, r0, #21
 80278b6:	0940      	lsrs	r0, r0, #5
 80278b8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80278bc:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80278c0:	4318      	orrs	r0, r3
 80278c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80278c4:	441c      	add	r4, r3
 80278c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80278c8:	f82a 0b02 	strh.w	r0, [sl], #2
 80278cc:	441e      	add	r6, r3
 80278ce:	e73b      	b.n	8027748 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80278d0:	b00f      	add	sp, #60	; 0x3c
 80278d2:	ecbd 8b08 	vpop	{d8-d11}
 80278d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080278dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 80278dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80278e0:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 80278e4:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80278e8:	fb04 5603 	mla	r6, r4, r3, r5
 80278ec:	2c00      	cmp	r4, #0
 80278ee:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80278f2:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 80278f6:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 80278fa:	db36      	blt.n	802796a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 80278fc:	45a6      	cmp	lr, r4
 80278fe:	dd34      	ble.n	802796a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8e>
 8027900:	2d00      	cmp	r5, #0
 8027902:	db30      	blt.n	8027966 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 8027904:	42ab      	cmp	r3, r5
 8027906:	dd2e      	ble.n	8027966 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8a>
 8027908:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 802790c:	1c6e      	adds	r6, r5, #1
 802790e:	d42f      	bmi.n	8027970 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8027910:	42b3      	cmp	r3, r6
 8027912:	dd2d      	ble.n	8027970 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x94>
 8027914:	b370      	cbz	r0, 8027974 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x98>
 8027916:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802791a:	3401      	adds	r4, #1
 802791c:	d42e      	bmi.n	802797c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 802791e:	45a6      	cmp	lr, r4
 8027920:	dd2c      	ble.n	802797c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa0>
 8027922:	b377      	cbz	r7, 8027982 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xa6>
 8027924:	2d00      	cmp	r5, #0
 8027926:	db27      	blt.n	8027978 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 8027928:	42ab      	cmp	r3, r5
 802792a:	dd25      	ble.n	8027978 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x9c>
 802792c:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8027930:	3501      	adds	r5, #1
 8027932:	d429      	bmi.n	8027988 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8027934:	42ab      	cmp	r3, r5
 8027936:	dd27      	ble.n	8027988 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xac>
 8027938:	b340      	cbz	r0, 802798c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb0>
 802793a:	3301      	adds	r3, #1
 802793c:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8027940:	280f      	cmp	r0, #15
 8027942:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8027946:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802794a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802794e:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8027952:	d801      	bhi.n	8027958 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x7c>
 8027954:	2f0f      	cmp	r7, #15
 8027956:	d91b      	bls.n	8027990 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0xb4>
 8027958:	4b8d      	ldr	r3, [pc, #564]	; (8027b90 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b4>)
 802795a:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802795e:	4a8d      	ldr	r2, [pc, #564]	; (8027b94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2b8>)
 8027960:	488d      	ldr	r0, [pc, #564]	; (8027b98 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2bc>)
 8027962:	f002 fa75 	bl	8029e50 <__assert_func>
 8027966:	2200      	movs	r2, #0
 8027968:	e7d0      	b.n	802790c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x30>
 802796a:	2600      	movs	r6, #0
 802796c:	4632      	mov	r2, r6
 802796e:	e7d4      	b.n	802791a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8027970:	2600      	movs	r6, #0
 8027972:	e7d2      	b.n	802791a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8027974:	4606      	mov	r6, r0
 8027976:	e7d0      	b.n	802791a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3e>
 8027978:	2400      	movs	r4, #0
 802797a:	e7d9      	b.n	8027930 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x54>
 802797c:	2300      	movs	r3, #0
 802797e:	461c      	mov	r4, r3
 8027980:	e7de      	b.n	8027940 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8027982:	463b      	mov	r3, r7
 8027984:	463c      	mov	r4, r7
 8027986:	e7db      	b.n	8027940 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8027988:	2300      	movs	r3, #0
 802798a:	e7d9      	b.n	8027940 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 802798c:	4603      	mov	r3, r0
 802798e:	e7d7      	b.n	8027940 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x64>
 8027990:	b280      	uxth	r0, r0
 8027992:	b2bf      	uxth	r7, r7
 8027994:	fb07 fe00 	mul.w	lr, r7, r0
 8027998:	0100      	lsls	r0, r0, #4
 802799a:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 802799e:	eba0 0c0e 	sub.w	ip, r0, lr
 80279a2:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80279a6:	b2bf      	uxth	r7, r7
 80279a8:	fa1f fc8c 	uxth.w	ip, ip
 80279ac:	1bed      	subs	r5, r5, r7
 80279ae:	fb0a f00c 	mul.w	r0, sl, ip
 80279b2:	b2ad      	uxth	r5, r5
 80279b4:	fb0b 0005 	mla	r0, fp, r5, r0
 80279b8:	fb07 0009 	mla	r0, r7, r9, r0
 80279bc:	fb0e 0008 	mla	r0, lr, r8, r0
 80279c0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80279c4:	9001      	str	r0, [sp, #4]
 80279c6:	2800      	cmp	r0, #0
 80279c8:	f000 80de 	beq.w	8027b88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x2ac>
 80279cc:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80279d0:	d018      	beq.n	8027a04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x128>
 80279d2:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80279d6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80279da:	fb0b f000 	mul.w	r0, fp, r0
 80279de:	fb0b fb02 	mul.w	fp, fp, r2
 80279e2:	0a02      	lsrs	r2, r0, #8
 80279e4:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 80279e8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80279ec:	4402      	add	r2, r0
 80279ee:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 80279f2:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 80279f6:	0a12      	lsrs	r2, r2, #8
 80279f8:	0a00      	lsrs	r0, r0, #8
 80279fa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80279fe:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027a02:	4302      	orrs	r2, r0
 8027a04:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8027a08:	d01a      	beq.n	8027a40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x164>
 8027a0a:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8027a0e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027a12:	fb0a f000 	mul.w	r0, sl, r0
 8027a16:	fb0a fa06 	mul.w	sl, sl, r6
 8027a1a:	0a06      	lsrs	r6, r0, #8
 8027a1c:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8027a20:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027a24:	4406      	add	r6, r0
 8027a26:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8027a2a:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8027a2e:	0a36      	lsrs	r6, r6, #8
 8027a30:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027a34:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8027a38:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027a3c:	ea46 060a 	orr.w	r6, r6, sl
 8027a40:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8027a44:	d01b      	beq.n	8027a7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1a2>
 8027a46:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 8027a4a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027a4e:	fb09 fa0a 	mul.w	sl, r9, sl
 8027a52:	fb09 f004 	mul.w	r0, r9, r4
 8027a56:	ea4f 241a 	mov.w	r4, sl, lsr #8
 8027a5a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027a5e:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8027a62:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027a66:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 8027a6a:	4454      	add	r4, sl
 8027a6c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027a70:	0a24      	lsrs	r4, r4, #8
 8027a72:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027a76:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027a7a:	ea44 0409 	orr.w	r4, r4, r9
 8027a7e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8027a82:	d01b      	beq.n	8027abc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x1e0>
 8027a84:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 8027a88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027a8c:	fb08 f909 	mul.w	r9, r8, r9
 8027a90:	fb08 f003 	mul.w	r0, r8, r3
 8027a94:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8027a98:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 8027a9c:	f500 7880 	add.w	r8, r0, #256	; 0x100
 8027aa0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027aa4:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 8027aa8:	444b      	add	r3, r9
 8027aaa:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027aae:	0a1b      	lsrs	r3, r3, #8
 8027ab0:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8027ab4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027ab8:	ea43 0308 	orr.w	r3, r3, r8
 8027abc:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 8027ac0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027ac4:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8027ac8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027acc:	fb0c f808 	mul.w	r8, ip, r8
 8027ad0:	8808      	ldrh	r0, [r1, #0]
 8027ad2:	fb0c f606 	mul.w	r6, ip, r6
 8027ad6:	fb05 8909 	mla	r9, r5, r9, r8
 8027ada:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8027ade:	fb05 6502 	mla	r5, r5, r2, r6
 8027ae2:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027ae6:	fb07 9908 	mla	r9, r7, r8, r9
 8027aea:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8027aee:	fb07 5704 	mla	r7, r7, r4, r5
 8027af2:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8027af6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027afa:	b2b6      	uxth	r6, r6
 8027afc:	fb0e 9808 	mla	r8, lr, r8, r9
 8027b00:	9a01      	ldr	r2, [sp, #4]
 8027b02:	fb0e 7e03 	mla	lr, lr, r3, r7
 8027b06:	1205      	asrs	r5, r0, #8
 8027b08:	4372      	muls	r2, r6
 8027b0a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027b0e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027b12:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027b16:	1c53      	adds	r3, r2, #1
 8027b18:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8027b1c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8027b20:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027b24:	ea48 0e0e 	orr.w	lr, r8, lr
 8027b28:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8027b2c:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8027b30:	f3ce 2407 	ubfx	r4, lr, #8, #8
 8027b34:	b2db      	uxtb	r3, r3
 8027b36:	fb12 f206 	smulbb	r2, r2, r6
 8027b3a:	fa5f fe8e 	uxtb.w	lr, lr
 8027b3e:	fb14 f406 	smulbb	r4, r4, r6
 8027b42:	fb05 2503 	mla	r5, r5, r3, r2
 8027b46:	10c2      	asrs	r2, r0, #3
 8027b48:	fb1e fe06 	smulbb	lr, lr, r6
 8027b4c:	00c0      	lsls	r0, r0, #3
 8027b4e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8027b52:	b2ad      	uxth	r5, r5
 8027b54:	b2c0      	uxtb	r0, r0
 8027b56:	fb02 4203 	mla	r2, r2, r3, r4
 8027b5a:	fb00 e303 	mla	r3, r0, r3, lr
 8027b5e:	b294      	uxth	r4, r2
 8027b60:	b298      	uxth	r0, r3
 8027b62:	1c6b      	adds	r3, r5, #1
 8027b64:	1c62      	adds	r2, r4, #1
 8027b66:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027b6a:	1c43      	adds	r3, r0, #1
 8027b6c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8027b70:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027b74:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8027b78:	0952      	lsrs	r2, r2, #5
 8027b7a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027b7e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027b82:	432b      	orrs	r3, r5
 8027b84:	4313      	orrs	r3, r2
 8027b86:	800b      	strh	r3, [r1, #0]
 8027b88:	b003      	add	sp, #12
 8027b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027b8e:	bf00      	nop
 8027b90:	08031892 	.word	0x08031892
 8027b94:	08031e62 	.word	0x08031e62
 8027b98:	08031916 	.word	0x08031916

08027b9c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ba0:	ed2d 8b08 	vpush	{d8-d11}
 8027ba4:	b09d      	sub	sp, #116	; 0x74
 8027ba6:	eeb0 aa40 	vmov.f32	s20, s0
 8027baa:	eef0 9a60 	vmov.f32	s19, s1
 8027bae:	9219      	str	r2, [sp, #100]	; 0x64
 8027bb0:	eeb0 9a41 	vmov.f32	s18, s2
 8027bb4:	9a33      	ldr	r2, [sp, #204]	; 0xcc
 8027bb6:	eeb0 8a62 	vmov.f32	s16, s5
 8027bba:	9307      	str	r3, [sp, #28]
 8027bbc:	eef0 8a43 	vmov.f32	s17, s6
 8027bc0:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 8027bc4:	eef0 ba44 	vmov.f32	s23, s8
 8027bc8:	901b      	str	r0, [sp, #108]	; 0x6c
 8027bca:	eeb0 ba64 	vmov.f32	s22, s9
 8027bce:	931a      	str	r3, [sp, #104]	; 0x68
 8027bd0:	eef0 aa45 	vmov.f32	s21, s10
 8027bd4:	6850      	ldr	r0, [r2, #4]
 8027bd6:	9117      	str	r1, [sp, #92]	; 0x5c
 8027bd8:	6812      	ldr	r2, [r2, #0]
 8027bda:	e9dd 1334 	ldrd	r1, r3, [sp, #208]	; 0xd0
 8027bde:	e9dd 462f 	ldrd	r4, r6, [sp, #188]	; 0xbc
 8027be2:	fb00 1303 	mla	r3, r0, r3, r1
 8027be6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027bea:	930a      	str	r3, [sp, #40]	; 0x28
 8027bec:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027bee:	681b      	ldr	r3, [r3, #0]
 8027bf0:	9310      	str	r3, [sp, #64]	; 0x40
 8027bf2:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8027bf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8027bf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027bfa:	2b00      	cmp	r3, #0
 8027bfc:	dc03      	bgt.n	8027c06 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8027bfe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8027c00:	2b00      	cmp	r3, #0
 8027c02:	f340 8375 	ble.w	80282f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8027c06:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027c08:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027c0c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027c10:	1e48      	subs	r0, r1, #1
 8027c12:	1e57      	subs	r7, r2, #1
 8027c14:	9b07      	ldr	r3, [sp, #28]
 8027c16:	2b00      	cmp	r3, #0
 8027c18:	f340 818e 	ble.w	8027f38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8027c1c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8027c20:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027c24:	d406      	bmi.n	8027c34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8027c26:	4584      	cmp	ip, r0
 8027c28:	da04      	bge.n	8027c34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8027c2a:	2b00      	cmp	r3, #0
 8027c2c:	db02      	blt.n	8027c34 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8027c2e:	42bb      	cmp	r3, r7
 8027c30:	f2c0 8183 	blt.w	8027f3a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39e>
 8027c34:	f11c 0c01 	adds.w	ip, ip, #1
 8027c38:	f100 8173 	bmi.w	8027f22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027c3c:	4561      	cmp	r1, ip
 8027c3e:	f2c0 8170 	blt.w	8027f22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027c42:	3301      	adds	r3, #1
 8027c44:	f100 816d 	bmi.w	8027f22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027c48:	429a      	cmp	r2, r3
 8027c4a:	f2c0 816a 	blt.w	8027f22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027c4e:	9b07      	ldr	r3, [sp, #28]
 8027c50:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8027c52:	9318      	str	r3, [sp, #96]	; 0x60
 8027c54:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027c56:	2b00      	cmp	r3, #0
 8027c58:	f340 818c 	ble.w	8027f74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d8>
 8027c5c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 8027c5e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8027c62:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8027c64:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8027c68:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8027c6c:	1422      	asrs	r2, r4, #16
 8027c6e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027c72:	689b      	ldr	r3, [r3, #8]
 8027c74:	f100 81cd 	bmi.w	8028012 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027c78:	f103 38ff 	add.w	r8, r3, #4294967295
 8027c7c:	4542      	cmp	r2, r8
 8027c7e:	f280 81c8 	bge.w	8028012 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027c82:	f1bc 0f00 	cmp.w	ip, #0
 8027c86:	f2c0 81c4 	blt.w	8028012 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027c8a:	f10e 38ff 	add.w	r8, lr, #4294967295
 8027c8e:	45c4      	cmp	ip, r8
 8027c90:	f280 81bf 	bge.w	8028012 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027c94:	b21b      	sxth	r3, r3
 8027c96:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027c98:	fb0c 2203 	mla	r2, ip, r3, r2
 8027c9c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8027ca0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8027ca4:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8027ca8:	2800      	cmp	r0, #0
 8027caa:	f000 81a9 	beq.w	8028000 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x464>
 8027cae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8027cb2:	950c      	str	r5, [sp, #48]	; 0x30
 8027cb4:	0e2d      	lsrs	r5, r5, #24
 8027cb6:	9513      	str	r5, [sp, #76]	; 0x4c
 8027cb8:	b181      	cbz	r1, 8027cdc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8027cba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8027cbe:	3b01      	subs	r3, #1
 8027cc0:	009b      	lsls	r3, r3, #2
 8027cc2:	3304      	adds	r3, #4
 8027cc4:	eb08 0c03 	add.w	ip, r8, r3
 8027cc8:	f858 3003 	ldr.w	r3, [r8, r3]
 8027ccc:	9308      	str	r3, [sp, #32]
 8027cce:	0e1b      	lsrs	r3, r3, #24
 8027cd0:	9311      	str	r3, [sp, #68]	; 0x44
 8027cd2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8027cd6:	930d      	str	r3, [sp, #52]	; 0x34
 8027cd8:	0e1b      	lsrs	r3, r3, #24
 8027cda:	9314      	str	r3, [sp, #80]	; 0x50
 8027cdc:	b280      	uxth	r0, r0
 8027cde:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027ce0:	b289      	uxth	r1, r1
 8027ce2:	fb00 f901 	mul.w	r9, r0, r1
 8027ce6:	0100      	lsls	r0, r0, #4
 8027ce8:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8027cec:	eba0 0809 	sub.w	r8, r0, r9
 8027cf0:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8027cf4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8027cf6:	b289      	uxth	r1, r1
 8027cf8:	fa1f f888 	uxth.w	r8, r8
 8027cfc:	1a5b      	subs	r3, r3, r1
 8027cfe:	fb08 f000 	mul.w	r0, r8, r0
 8027d02:	b29b      	uxth	r3, r3
 8027d04:	fb03 000e 	mla	r0, r3, lr, r0
 8027d08:	fb01 0005 	mla	r0, r1, r5, r0
 8027d0c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027d0e:	fb09 0005 	mla	r0, r9, r5, r0
 8027d12:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027d16:	2800      	cmp	r0, #0
 8027d18:	f000 80fa 	beq.w	8027f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8027d1c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027d20:	d01b      	beq.n	8027d5a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8027d22:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8027d26:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027d2a:	fb0e fa0a 	mul.w	sl, lr, sl
 8027d2e:	fb0e fe02 	mul.w	lr, lr, r2
 8027d32:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8027d36:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027d3a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8027d3e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027d42:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027d46:	4452      	add	r2, sl
 8027d48:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027d4c:	0a12      	lsrs	r2, r2, #8
 8027d4e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027d52:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027d56:	ea42 020c 	orr.w	r2, r2, ip
 8027d5a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027d5c:	2dff      	cmp	r5, #255	; 0xff
 8027d5e:	d021      	beq.n	8027da4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8027d60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027d62:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027d66:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027d68:	fb05 fb0b 	mul.w	fp, r5, fp
 8027d6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027d6e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027d72:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027d74:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027d78:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027d7c:	fb05 fa0a 	mul.w	sl, r5, sl
 8027d80:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027d84:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027d88:	44de      	add	lr, fp
 8027d8a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027d8e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027d92:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027d96:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027d9a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027d9e:	ea4e 050a 	orr.w	r5, lr, sl
 8027da2:	950c      	str	r5, [sp, #48]	; 0x30
 8027da4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027da6:	2dff      	cmp	r5, #255	; 0xff
 8027da8:	d021      	beq.n	8027dee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8027daa:	9d08      	ldr	r5, [sp, #32]
 8027dac:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027db0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027db2:	fb05 fb0b 	mul.w	fp, r5, fp
 8027db6:	9d08      	ldr	r5, [sp, #32]
 8027db8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027dbc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027dbe:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027dc2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027dc6:	fb05 fa0a 	mul.w	sl, r5, sl
 8027dca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027dce:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027dd2:	44de      	add	lr, fp
 8027dd4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027dd8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027ddc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027de0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027de4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027de8:	ea4e 050a 	orr.w	r5, lr, sl
 8027dec:	9508      	str	r5, [sp, #32]
 8027dee:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027df0:	2dff      	cmp	r5, #255	; 0xff
 8027df2:	d021      	beq.n	8027e38 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8027df4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027df6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027dfa:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027dfc:	fb05 fb0b 	mul.w	fp, r5, fp
 8027e00:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027e02:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027e06:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027e08:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027e0c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027e10:	fb05 fa0a 	mul.w	sl, r5, sl
 8027e14:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027e18:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027e1c:	44de      	add	lr, fp
 8027e1e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027e22:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027e26:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027e2a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027e2e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027e32:	ea4e 050a 	orr.w	r5, lr, sl
 8027e36:	950d      	str	r5, [sp, #52]	; 0x34
 8027e38:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027e3a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8027e3e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027e42:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027e46:	9d08      	ldr	r5, [sp, #32]
 8027e48:	fb08 fc0c 	mul.w	ip, r8, ip
 8027e4c:	fb03 cc0e 	mla	ip, r3, lr, ip
 8027e50:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027e54:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027e56:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027e5a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027e5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027e60:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027e64:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8027e68:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027e6a:	fb08 f80e 	mul.w	r8, r8, lr
 8027e6e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027e72:	fb03 8202 	mla	r2, r3, r2, r8
 8027e76:	9b08      	ldr	r3, [sp, #32]
 8027e78:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027e7c:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8027e80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027e82:	fb01 220a 	mla	r2, r1, sl, r2
 8027e86:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8027e8a:	883b      	ldrh	r3, [r7, #0]
 8027e8c:	fb09 2901 	mla	r9, r9, r1, r2
 8027e90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027e92:	1219      	asrs	r1, r3, #8
 8027e94:	4342      	muls	r2, r0
 8027e96:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027e9a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8027e9e:	1c50      	adds	r0, r2, #1
 8027ea0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027ea4:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8027ea8:	ea4c 0c09 	orr.w	ip, ip, r9
 8027eac:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8027eb0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8027eb4:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8027eb8:	fa5f fc8c 	uxtb.w	ip, ip
 8027ebc:	fb12 f205 	smulbb	r2, r2, r5
 8027ec0:	b2c0      	uxtb	r0, r0
 8027ec2:	fb1c fc05 	smulbb	ip, ip, r5
 8027ec6:	fb01 2100 	mla	r1, r1, r0, r2
 8027eca:	10da      	asrs	r2, r3, #3
 8027ecc:	fb1e fe05 	smulbb	lr, lr, r5
 8027ed0:	00db      	lsls	r3, r3, #3
 8027ed2:	b289      	uxth	r1, r1
 8027ed4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8027ed8:	b2db      	uxtb	r3, r3
 8027eda:	fb02 e200 	mla	r2, r2, r0, lr
 8027ede:	fb03 c300 	mla	r3, r3, r0, ip
 8027ee2:	b292      	uxth	r2, r2
 8027ee4:	fa1f fc83 	uxth.w	ip, r3
 8027ee8:	1c4b      	adds	r3, r1, #1
 8027eea:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027eee:	f10c 0301 	add.w	r3, ip, #1
 8027ef2:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8027ef6:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8027efa:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027efe:	430b      	orrs	r3, r1
 8027f00:	1c51      	adds	r1, r2, #1
 8027f02:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027f06:	0952      	lsrs	r2, r2, #5
 8027f08:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027f0c:	4313      	orrs	r3, r2
 8027f0e:	803b      	strh	r3, [r7, #0]
 8027f10:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8027f12:	3702      	adds	r7, #2
 8027f14:	441c      	add	r4, r3
 8027f16:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8027f18:	441e      	add	r6, r3
 8027f1a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027f1c:	3b01      	subs	r3, #1
 8027f1e:	9318      	str	r3, [sp, #96]	; 0x60
 8027f20:	e698      	b.n	8027c54 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb8>
 8027f22:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8027f24:	441c      	add	r4, r3
 8027f26:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8027f28:	441e      	add	r6, r3
 8027f2a:	9b07      	ldr	r3, [sp, #28]
 8027f2c:	3b01      	subs	r3, #1
 8027f2e:	9307      	str	r3, [sp, #28]
 8027f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027f32:	3302      	adds	r3, #2
 8027f34:	930a      	str	r3, [sp, #40]	; 0x28
 8027f36:	e66d      	b.n	8027c14 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027f38:	d023      	beq.n	8027f82 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8027f3a:	9b07      	ldr	r3, [sp, #28]
 8027f3c:	9831      	ldr	r0, [sp, #196]	; 0xc4
 8027f3e:	3b01      	subs	r3, #1
 8027f40:	fb00 4003 	mla	r0, r0, r3, r4
 8027f44:	1400      	asrs	r0, r0, #16
 8027f46:	f53f ae82 	bmi.w	8027c4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8027f4a:	3901      	subs	r1, #1
 8027f4c:	4288      	cmp	r0, r1
 8027f4e:	f6bf ae7e 	bge.w	8027c4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8027f52:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8027f54:	fb01 6303 	mla	r3, r1, r3, r6
 8027f58:	141b      	asrs	r3, r3, #16
 8027f5a:	f53f ae78 	bmi.w	8027c4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8027f5e:	3a01      	subs	r2, #1
 8027f60:	4293      	cmp	r3, r2
 8027f62:	f6bf ae74 	bge.w	8027c4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8027f66:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027f6a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8027f6e:	f1bb 0f00 	cmp.w	fp, #0
 8027f72:	dc6c      	bgt.n	802804e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8027f74:	9b07      	ldr	r3, [sp, #28]
 8027f76:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027f7c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8027f80:	930a      	str	r3, [sp, #40]	; 0x28
 8027f82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027f84:	2b00      	cmp	r3, #0
 8027f86:	f340 81b3 	ble.w	80282f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x754>
 8027f8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027f8e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027f90:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8027f94:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8027f98:	eef0 6a48 	vmov.f32	s13, s16
 8027f9c:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8027fa0:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8027fa4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027fa8:	ee16 4a90 	vmov	r4, s13
 8027fac:	eef0 6a68 	vmov.f32	s13, s17
 8027fb0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027fb4:	ee16 6a90 	vmov	r6, s13
 8027fb8:	ee29 7aa7 	vmul.f32	s14, s19, s15
 8027fbc:	ee69 7a27 	vmul.f32	s15, s18, s15
 8027fc0:	ee37 8a48 	vsub.f32	s16, s14, s16
 8027fc4:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8027fc8:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 8027fcc:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 8027fd0:	ee18 2a10 	vmov	r2, s16
 8027fd4:	eeb0 8a47 	vmov.f32	s16, s14
 8027fd8:	fb92 f3f3 	sdiv	r3, r2, r3
 8027fdc:	ee18 2a90 	vmov	r2, s17
 8027fe0:	9331      	str	r3, [sp, #196]	; 0xc4
 8027fe2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027fe4:	eef0 8a67 	vmov.f32	s17, s15
 8027fe8:	fb92 f3f3 	sdiv	r3, r2, r3
 8027fec:	9332      	str	r3, [sp, #200]	; 0xc8
 8027fee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027ff0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8027ff2:	3b01      	subs	r3, #1
 8027ff4:	9317      	str	r3, [sp, #92]	; 0x5c
 8027ff6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027ff8:	bf08      	it	eq
 8027ffa:	4613      	moveq	r3, r2
 8027ffc:	9307      	str	r3, [sp, #28]
 8027ffe:	e5fb      	b.n	8027bf8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8028000:	2900      	cmp	r1, #0
 8028002:	f43f ae6b 	beq.w	8027cdc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8028006:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802800a:	9308      	str	r3, [sp, #32]
 802800c:	0e1b      	lsrs	r3, r3, #24
 802800e:	9311      	str	r3, [sp, #68]	; 0x44
 8028010:	e664      	b.n	8027cdc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8028012:	f112 0801 	adds.w	r8, r2, #1
 8028016:	f53f af7b 	bmi.w	8027f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802801a:	4543      	cmp	r3, r8
 802801c:	f6ff af78 	blt.w	8027f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028020:	f11c 0801 	adds.w	r8, ip, #1
 8028024:	f53f af74 	bmi.w	8027f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028028:	45c6      	cmp	lr, r8
 802802a:	f6ff af71 	blt.w	8027f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802802e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8028030:	b21b      	sxth	r3, r3
 8028032:	9201      	str	r2, [sp, #4]
 8028034:	fa0f f28e 	sxth.w	r2, lr
 8028038:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802803c:	e9cd c002 	strd	ip, r0, [sp, #8]
 8028040:	9200      	str	r2, [sp, #0]
 8028042:	4639      	mov	r1, r7
 8028044:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8028046:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8028048:	f7ff fc48 	bl	80278dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 802804c:	e760      	b.n	8027f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 802804e:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8028050:	1427      	asrs	r7, r4, #16
 8028052:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028054:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028058:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802805c:	1433      	asrs	r3, r6, #16
 802805e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028062:	fb01 7303 	mla	r3, r1, r3, r7
 8028066:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 802806a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802806e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028072:	2a00      	cmp	r2, #0
 8028074:	f000 8133 	beq.w	80282de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x742>
 8028078:	687d      	ldr	r5, [r7, #4]
 802807a:	950e      	str	r5, [sp, #56]	; 0x38
 802807c:	0e2d      	lsrs	r5, r5, #24
 802807e:	9515      	str	r5, [sp, #84]	; 0x54
 8028080:	b178      	cbz	r0, 80280a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8028082:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8028086:	3901      	subs	r1, #1
 8028088:	0089      	lsls	r1, r1, #2
 802808a:	3104      	adds	r1, #4
 802808c:	eb07 0e01 	add.w	lr, r7, r1
 8028090:	5879      	ldr	r1, [r7, r1]
 8028092:	9109      	str	r1, [sp, #36]	; 0x24
 8028094:	0e09      	lsrs	r1, r1, #24
 8028096:	9112      	str	r1, [sp, #72]	; 0x48
 8028098:	f8de 1004 	ldr.w	r1, [lr, #4]
 802809c:	910f      	str	r1, [sp, #60]	; 0x3c
 802809e:	0e09      	lsrs	r1, r1, #24
 80280a0:	9116      	str	r1, [sp, #88]	; 0x58
 80280a2:	b292      	uxth	r2, r2
 80280a4:	9915      	ldr	r1, [sp, #84]	; 0x54
 80280a6:	b280      	uxth	r0, r0
 80280a8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80280aa:	fb02 f800 	mul.w	r8, r2, r0
 80280ae:	0112      	lsls	r2, r2, #4
 80280b0:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80280b4:	eba2 0e08 	sub.w	lr, r2, r8
 80280b8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80280bc:	b280      	uxth	r0, r0
 80280be:	fa1f fe8e 	uxth.w	lr, lr
 80280c2:	1a12      	subs	r2, r2, r0
 80280c4:	fb0e f101 	mul.w	r1, lr, r1
 80280c8:	b292      	uxth	r2, r2
 80280ca:	fb02 110c 	mla	r1, r2, ip, r1
 80280ce:	fb00 1105 	mla	r1, r0, r5, r1
 80280d2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80280d4:	fb08 1105 	mla	r1, r8, r5, r1
 80280d8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80280dc:	2900      	cmp	r1, #0
 80280de:	f000 80f5 	beq.w	80282cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80280e2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80280e6:	d019      	beq.n	802811c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 80280e8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80280ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80280f0:	fb0c fa0a 	mul.w	sl, ip, sl
 80280f4:	fb0c fc03 	mul.w	ip, ip, r3
 80280f8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80280fc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028100:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8028104:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028108:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802810c:	4453      	add	r3, sl
 802810e:	0a3f      	lsrs	r7, r7, #8
 8028110:	0a1b      	lsrs	r3, r3, #8
 8028112:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8028116:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802811a:	433b      	orrs	r3, r7
 802811c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802811e:	2dff      	cmp	r5, #255	; 0xff
 8028120:	d020      	beq.n	8028164 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 8028122:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028124:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028128:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802812a:	436f      	muls	r7, r5
 802812c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802812e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028132:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028136:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028138:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802813c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028140:	fb05 fa0a 	mul.w	sl, r5, sl
 8028144:	44bc      	add	ip, r7
 8028146:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802814a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802814e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028152:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028156:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802815a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802815e:	ea4c 050a 	orr.w	r5, ip, sl
 8028162:	950e      	str	r5, [sp, #56]	; 0x38
 8028164:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028166:	2dff      	cmp	r5, #255	; 0xff
 8028168:	d020      	beq.n	80281ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 802816a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802816c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028170:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028172:	436f      	muls	r7, r5
 8028174:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028176:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802817a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802817e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028180:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028184:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028188:	fb05 fa0a 	mul.w	sl, r5, sl
 802818c:	44bc      	add	ip, r7
 802818e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028192:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028196:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802819a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802819e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80281a2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80281a6:	ea4c 050a 	orr.w	r5, ip, sl
 80281aa:	9509      	str	r5, [sp, #36]	; 0x24
 80281ac:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80281ae:	2dff      	cmp	r5, #255	; 0xff
 80281b0:	d020      	beq.n	80281f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 80281b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80281b4:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80281b8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80281ba:	436f      	muls	r7, r5
 80281bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80281be:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80281c2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80281c6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80281c8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80281cc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80281d0:	fb05 fa0a 	mul.w	sl, r5, sl
 80281d4:	44bc      	add	ip, r7
 80281d6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80281da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80281de:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80281e2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80281e6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80281ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80281ee:	ea4c 050a 	orr.w	r5, ip, sl
 80281f2:	950f      	str	r5, [sp, #60]	; 0x3c
 80281f4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80281f6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80281fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80281fe:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028202:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028204:	fb0e f707 	mul.w	r7, lr, r7
 8028208:	fb02 770c 	mla	r7, r2, ip, r7
 802820c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028210:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028212:	fb00 770c 	mla	r7, r0, ip, r7
 8028216:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802821a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802821c:	fb08 770c 	mla	r7, r8, ip, r7
 8028220:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8028224:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028226:	fb0e fe0c 	mul.w	lr, lr, ip
 802822a:	0a3f      	lsrs	r7, r7, #8
 802822c:	fb02 e303 	mla	r3, r2, r3, lr
 8028230:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028232:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028236:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802823a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802823c:	fb00 330a 	mla	r3, r0, sl, r3
 8028240:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8028244:	f8b9 0000 	ldrh.w	r0, [r9]
 8028248:	fb08 3c0c 	mla	ip, r8, ip, r3
 802824c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802824e:	1202      	asrs	r2, r0, #8
 8028250:	4359      	muls	r1, r3
 8028252:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028256:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802825a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802825e:	1c4b      	adds	r3, r1, #1
 8028260:	ea47 070c 	orr.w	r7, r7, ip
 8028264:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028268:	0c3b      	lsrs	r3, r7, #16
 802826a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802826e:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8028272:	b2ff      	uxtb	r7, r7
 8028274:	fb13 f305 	smulbb	r3, r3, r5
 8028278:	b2c9      	uxtb	r1, r1
 802827a:	fb17 f705 	smulbb	r7, r7, r5
 802827e:	fb02 3201 	mla	r2, r2, r1, r3
 8028282:	10c3      	asrs	r3, r0, #3
 8028284:	fb1c fc05 	smulbb	ip, ip, r5
 8028288:	00c0      	lsls	r0, r0, #3
 802828a:	b292      	uxth	r2, r2
 802828c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8028290:	b2c0      	uxtb	r0, r0
 8028292:	fb03 c301 	mla	r3, r3, r1, ip
 8028296:	fb00 7001 	mla	r0, r0, r1, r7
 802829a:	1c51      	adds	r1, r2, #1
 802829c:	b29b      	uxth	r3, r3
 802829e:	b280      	uxth	r0, r0
 80282a0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80282a4:	f100 0c01 	add.w	ip, r0, #1
 80282a8:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80282ac:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 80282b0:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80282b4:	ea4c 0202 	orr.w	r2, ip, r2
 80282b8:	f103 0c01 	add.w	ip, r3, #1
 80282bc:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80282c0:	095b      	lsrs	r3, r3, #5
 80282c2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80282c6:	431a      	orrs	r2, r3
 80282c8:	f8a9 2000 	strh.w	r2, [r9]
 80282cc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80282ce:	f109 0902 	add.w	r9, r9, #2
 80282d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80282d6:	441c      	add	r4, r3
 80282d8:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80282da:	441e      	add	r6, r3
 80282dc:	e647      	b.n	8027f6e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d2>
 80282de:	2800      	cmp	r0, #0
 80282e0:	f43f aedf 	beq.w	80280a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 80282e4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80282e8:	9109      	str	r1, [sp, #36]	; 0x24
 80282ea:	0e09      	lsrs	r1, r1, #24
 80282ec:	9112      	str	r1, [sp, #72]	; 0x48
 80282ee:	e6d8      	b.n	80280a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 80282f0:	b01d      	add	sp, #116	; 0x74
 80282f2:	ecbd 8b08 	vpop	{d8-d11}
 80282f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080282fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 80282fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028300:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	; 0x34
 8028304:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8028308:	fb04 5603 	mla	r6, r4, r3, r5
 802830c:	2c00      	cmp	r4, #0
 802830e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8028312:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8028316:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 802831a:	db37      	blt.n	802838c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 802831c:	45a6      	cmp	lr, r4
 802831e:	dd35      	ble.n	802838c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x90>
 8028320:	2d00      	cmp	r5, #0
 8028322:	db31      	blt.n	8028388 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8028324:	42ab      	cmp	r3, r5
 8028326:	dd2f      	ble.n	8028388 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8028328:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 802832c:	1c6e      	adds	r6, r5, #1
 802832e:	d430      	bmi.n	8028392 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8028330:	42b3      	cmp	r3, r6
 8028332:	dd2e      	ble.n	8028392 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x96>
 8028334:	b378      	cbz	r0, 8028396 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9a>
 8028336:	f8dc 6004 	ldr.w	r6, [ip, #4]
 802833a:	3401      	adds	r4, #1
 802833c:	d42f      	bmi.n	802839e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 802833e:	45a6      	cmp	lr, r4
 8028340:	dd2d      	ble.n	802839e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa2>
 8028342:	b37f      	cbz	r7, 80283a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xa8>
 8028344:	2d00      	cmp	r5, #0
 8028346:	eb0c 0e83 	add.w	lr, ip, r3, lsl #2
 802834a:	db26      	blt.n	802839a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 802834c:	42ab      	cmp	r3, r5
 802834e:	dd24      	ble.n	802839a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x9e>
 8028350:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8028354:	3501      	adds	r5, #1
 8028356:	d428      	bmi.n	80283aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 8028358:	42ab      	cmp	r3, r5
 802835a:	dd26      	ble.n	80283aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xae>
 802835c:	b338      	cbz	r0, 80283ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb2>
 802835e:	f8de 3004 	ldr.w	r3, [lr, #4]
 8028362:	280f      	cmp	r0, #15
 8028364:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8028368:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 802836c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8028370:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8028374:	d801      	bhi.n	802837a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x7e>
 8028376:	2f0f      	cmp	r7, #15
 8028378:	d91b      	bls.n	80283b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0xb6>
 802837a:	4b87      	ldr	r3, [pc, #540]	; (8028598 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x29c>)
 802837c:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8028380:	4a86      	ldr	r2, [pc, #536]	; (802859c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a0>)
 8028382:	4887      	ldr	r0, [pc, #540]	; (80285a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x2a4>)
 8028384:	f001 fd64 	bl	8029e50 <__assert_func>
 8028388:	2200      	movs	r2, #0
 802838a:	e7cf      	b.n	802832c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x30>
 802838c:	2600      	movs	r6, #0
 802838e:	4632      	mov	r2, r6
 8028390:	e7d3      	b.n	802833a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8028392:	2600      	movs	r6, #0
 8028394:	e7d1      	b.n	802833a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 8028396:	4606      	mov	r6, r0
 8028398:	e7cf      	b.n	802833a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3e>
 802839a:	2400      	movs	r4, #0
 802839c:	e7da      	b.n	8028354 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x58>
 802839e:	2300      	movs	r3, #0
 80283a0:	461c      	mov	r4, r3
 80283a2:	e7de      	b.n	8028362 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 80283a4:	463b      	mov	r3, r7
 80283a6:	463c      	mov	r4, r7
 80283a8:	e7db      	b.n	8028362 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 80283aa:	2300      	movs	r3, #0
 80283ac:	e7d9      	b.n	8028362 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 80283ae:	4603      	mov	r3, r0
 80283b0:	e7d7      	b.n	8028362 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x66>
 80283b2:	b280      	uxth	r0, r0
 80283b4:	b2bf      	uxth	r7, r7
 80283b6:	fb07 fe00 	mul.w	lr, r7, r0
 80283ba:	0100      	lsls	r0, r0, #4
 80283bc:	ebce 1707 	rsb	r7, lr, r7, lsl #4
 80283c0:	eba0 0c0e 	sub.w	ip, r0, lr
 80283c4:	f5c0 7580 	rsb	r5, r0, #256	; 0x100
 80283c8:	b2bf      	uxth	r7, r7
 80283ca:	fa1f fc8c 	uxth.w	ip, ip
 80283ce:	1bed      	subs	r5, r5, r7
 80283d0:	fb0c f00a 	mul.w	r0, ip, sl
 80283d4:	b2ad      	uxth	r5, r5
 80283d6:	fb0b 0005 	mla	r0, fp, r5, r0
 80283da:	fb07 0009 	mla	r0, r7, r9, r0
 80283de:	fb0e 0008 	mla	r0, lr, r8, r0
 80283e2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80283e6:	9001      	str	r0, [sp, #4]
 80283e8:	2800      	cmp	r0, #0
 80283ea:	f000 80d1 	beq.w	8028590 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x294>
 80283ee:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80283f2:	d018      	beq.n	8028426 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x12a>
 80283f4:	f002 10ff 	and.w	r0, r2, #16711935	; 0xff00ff
 80283f8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80283fc:	fb0b f000 	mul.w	r0, fp, r0
 8028400:	fb0b fb02 	mul.w	fp, fp, r2
 8028404:	0a02      	lsrs	r2, r0, #8
 8028406:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 802840a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802840e:	4402      	add	r2, r0
 8028410:	f50b 7080 	add.w	r0, fp, #256	; 0x100
 8028414:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8028418:	0a12      	lsrs	r2, r2, #8
 802841a:	0a00      	lsrs	r0, r0, #8
 802841c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028420:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8028424:	4302      	orrs	r2, r0
 8028426:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 802842a:	d01a      	beq.n	8028462 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x166>
 802842c:	f006 10ff 	and.w	r0, r6, #16711935	; 0xff00ff
 8028430:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8028434:	fb0a f000 	mul.w	r0, sl, r0
 8028438:	fb0a fa06 	mul.w	sl, sl, r6
 802843c:	0a06      	lsrs	r6, r0, #8
 802843e:	f100 1001 	add.w	r0, r0, #65537	; 0x10001
 8028442:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8028446:	4406      	add	r6, r0
 8028448:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 802844c:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8028450:	0a36      	lsrs	r6, r6, #8
 8028452:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028456:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 802845a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802845e:	ea46 060a 	orr.w	r6, r6, sl
 8028462:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8028466:	d01b      	beq.n	80284a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1a4>
 8028468:	f004 1aff 	and.w	sl, r4, #16711935	; 0xff00ff
 802846c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8028470:	fb09 fa0a 	mul.w	sl, r9, sl
 8028474:	fb09 f004 	mul.w	r0, r9, r4
 8028478:	ea4f 241a 	mov.w	r4, sl, lsr #8
 802847c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028480:	f500 7980 	add.w	r9, r0, #256	; 0x100
 8028484:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8028488:	eb09 2910 	add.w	r9, r9, r0, lsr #8
 802848c:	4454      	add	r4, sl
 802848e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028492:	0a24      	lsrs	r4, r4, #8
 8028494:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028498:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802849c:	ea44 0409 	orr.w	r4, r4, r9
 80284a0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80284a4:	d01b      	beq.n	80284de <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x1e2>
 80284a6:	f003 19ff 	and.w	r9, r3, #16711935	; 0xff00ff
 80284aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80284ae:	fb08 f909 	mul.w	r9, r8, r9
 80284b2:	fb08 f003 	mul.w	r0, r8, r3
 80284b6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80284ba:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 80284be:	f500 7880 	add.w	r8, r0, #256	; 0x100
 80284c2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80284c6:	eb08 2810 	add.w	r8, r8, r0, lsr #8
 80284ca:	444b      	add	r3, r9
 80284cc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80284d0:	0a1b      	lsrs	r3, r3, #8
 80284d2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80284d6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80284da:	ea43 0308 	orr.w	r3, r3, r8
 80284de:	f006 18ff 	and.w	r8, r6, #16711935	; 0xff00ff
 80284e2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80284e6:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 80284ea:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80284ee:	fb0c f808 	mul.w	r8, ip, r8
 80284f2:	8808      	ldrh	r0, [r1, #0]
 80284f4:	fb0c f606 	mul.w	r6, ip, r6
 80284f8:	fb05 8909 	mla	r9, r5, r9, r8
 80284fc:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8028500:	fb05 6502 	mla	r5, r5, r2, r6
 8028504:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8028508:	fb07 9908 	mla	r9, r7, r8, r9
 802850c:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8028510:	fb07 5704 	mla	r7, r7, r4, r5
 8028514:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028518:	fb0e 9808 	mla	r8, lr, r8, r9
 802851c:	10c4      	asrs	r4, r0, #3
 802851e:	fb0e 7e03 	mla	lr, lr, r3, r7
 8028522:	9b01      	ldr	r3, [sp, #4]
 8028524:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8028528:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 802852c:	43da      	mvns	r2, r3
 802852e:	1203      	asrs	r3, r0, #8
 8028530:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028534:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8028538:	b2d2      	uxtb	r2, r2
 802853a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802853e:	00c0      	lsls	r0, r0, #3
 8028540:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8028544:	4353      	muls	r3, r2
 8028546:	b2c0      	uxtb	r0, r0
 8028548:	ea48 0e0e 	orr.w	lr, r8, lr
 802854c:	4354      	muls	r4, r2
 802854e:	4350      	muls	r0, r2
 8028550:	1c5a      	adds	r2, r3, #1
 8028552:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028556:	ea4f 431e 	mov.w	r3, lr, lsr #16
 802855a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802855e:	1c62      	adds	r2, r4, #1
 8028560:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8028564:	ea4f 221e 	mov.w	r2, lr, lsr #8
 8028568:	021b      	lsls	r3, r3, #8
 802856a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802856e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8028572:	00d2      	lsls	r2, r2, #3
 8028574:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028578:	4313      	orrs	r3, r2
 802857a:	1c42      	adds	r2, r0, #1
 802857c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028580:	eb0e 2e10 	add.w	lr, lr, r0, lsr #8
 8028584:	f3ce 0ec4 	ubfx	lr, lr, #3, #5
 8028588:	ea4e 0e03 	orr.w	lr, lr, r3
 802858c:	f8a1 e000 	strh.w	lr, [r1]
 8028590:	b003      	add	sp, #12
 8028592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028596:	bf00      	nop
 8028598:	08031892 	.word	0x08031892
 802859c:	08031e62 	.word	0x08031e62
 80285a0:	08031916 	.word	0x08031916

080285a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80285a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80285a8:	ed2d 8b08 	vpush	{d8-d11}
 80285ac:	b09b      	sub	sp, #108	; 0x6c
 80285ae:	eeb0 aa40 	vmov.f32	s20, s0
 80285b2:	eef0 9a60 	vmov.f32	s19, s1
 80285b6:	9218      	str	r2, [sp, #96]	; 0x60
 80285b8:	eeb0 9a41 	vmov.f32	s18, s2
 80285bc:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80285be:	eeb0 8a62 	vmov.f32	s16, s5
 80285c2:	9019      	str	r0, [sp, #100]	; 0x64
 80285c4:	eef0 8a43 	vmov.f32	s17, s6
 80285c8:	6850      	ldr	r0, [r2, #4]
 80285ca:	eef0 ba44 	vmov.f32	s23, s8
 80285ce:	9116      	str	r1, [sp, #88]	; 0x58
 80285d0:	eeb0 ba64 	vmov.f32	s22, s9
 80285d4:	9307      	str	r3, [sp, #28]
 80285d6:	eef0 aa45 	vmov.f32	s21, s10
 80285da:	6812      	ldr	r2, [r2, #0]
 80285dc:	e9dd 1332 	ldrd	r1, r3, [sp, #200]	; 0xc8
 80285e0:	e9dd 462d 	ldrd	r4, r6, [sp, #180]	; 0xb4
 80285e4:	fb00 1303 	mla	r3, r0, r3, r1
 80285e8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80285ec:	930a      	str	r3, [sp, #40]	; 0x28
 80285ee:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80285f0:	681b      	ldr	r3, [r3, #0]
 80285f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80285f4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80285f6:	2b00      	cmp	r3, #0
 80285f8:	dc03      	bgt.n	8028602 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80285fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80285fc:	2b00      	cmp	r3, #0
 80285fe:	f340 8387 	ble.w	8028d10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 8028602:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8028604:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028608:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802860c:	1e48      	subs	r0, r1, #1
 802860e:	1e57      	subs	r7, r2, #1
 8028610:	9b07      	ldr	r3, [sp, #28]
 8028612:	2b00      	cmp	r3, #0
 8028614:	f340 8166 	ble.w	80288e4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x340>
 8028618:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802861c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028620:	d406      	bmi.n	8028630 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8028622:	4584      	cmp	ip, r0
 8028624:	da04      	bge.n	8028630 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8028626:	2b00      	cmp	r3, #0
 8028628:	db02      	blt.n	8028630 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802862a:	42bb      	cmp	r3, r7
 802862c:	f2c0 815b 	blt.w	80288e6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8028630:	f11c 0c01 	adds.w	ip, ip, #1
 8028634:	f100 814b 	bmi.w	80288ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8028638:	4561      	cmp	r1, ip
 802863a:	f2c0 8148 	blt.w	80288ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802863e:	3301      	adds	r3, #1
 8028640:	f100 8145 	bmi.w	80288ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 8028644:	429a      	cmp	r2, r3
 8028646:	f2c0 8142 	blt.w	80288ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 802864a:	9b07      	ldr	r3, [sp, #28]
 802864c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802864e:	9317      	str	r3, [sp, #92]	; 0x5c
 8028650:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028652:	2b00      	cmp	r3, #0
 8028654:	f340 8165 	ble.w	8028922 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 8028658:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 802865a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802865e:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8028660:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8028664:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8028668:	1422      	asrs	r2, r4, #16
 802866a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802866e:	689b      	ldr	r3, [r3, #8]
 8028670:	f100 81d5 	bmi.w	8028a1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8028674:	f103 38ff 	add.w	r8, r3, #4294967295
 8028678:	4542      	cmp	r2, r8
 802867a:	f280 81d0 	bge.w	8028a1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 802867e:	f1bc 0f00 	cmp.w	ip, #0
 8028682:	f2c0 81cc 	blt.w	8028a1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8028686:	f10e 38ff 	add.w	r8, lr, #4294967295
 802868a:	45c4      	cmp	ip, r8
 802868c:	f280 81c7 	bge.w	8028a1e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 8028690:	b21b      	sxth	r3, r3
 8028692:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028694:	fb0c 2203 	mla	r2, ip, r3, r2
 8028698:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802869c:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80286a0:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80286a4:	2900      	cmp	r1, #0
 80286a6:	f000 8182 	beq.w	80289ae <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80286aa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80286ae:	950b      	str	r5, [sp, #44]	; 0x2c
 80286b0:	0e2d      	lsrs	r5, r5, #24
 80286b2:	9512      	str	r5, [sp, #72]	; 0x48
 80286b4:	b180      	cbz	r0, 80286d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80286b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80286ba:	3b01      	subs	r3, #1
 80286bc:	009b      	lsls	r3, r3, #2
 80286be:	3304      	adds	r3, #4
 80286c0:	eb08 0c03 	add.w	ip, r8, r3
 80286c4:	f858 3003 	ldr.w	r3, [r8, r3]
 80286c8:	9308      	str	r3, [sp, #32]
 80286ca:	0e1b      	lsrs	r3, r3, #24
 80286cc:	9310      	str	r3, [sp, #64]	; 0x40
 80286ce:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80286d2:	930c      	str	r3, [sp, #48]	; 0x30
 80286d4:	0e1b      	lsrs	r3, r3, #24
 80286d6:	9313      	str	r3, [sp, #76]	; 0x4c
 80286d8:	b289      	uxth	r1, r1
 80286da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80286dc:	b280      	uxth	r0, r0
 80286de:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80286e0:	fb01 f900 	mul.w	r9, r1, r0
 80286e4:	0109      	lsls	r1, r1, #4
 80286e6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80286ea:	eba1 0809 	sub.w	r8, r1, r9
 80286ee:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80286f2:	b280      	uxth	r0, r0
 80286f4:	fa1f f888 	uxth.w	r8, r8
 80286f8:	1a09      	subs	r1, r1, r0
 80286fa:	fb08 f303 	mul.w	r3, r8, r3
 80286fe:	b289      	uxth	r1, r1
 8028700:	fb01 330e 	mla	r3, r1, lr, r3
 8028704:	fb00 3305 	mla	r3, r0, r5, r3
 8028708:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802870a:	fb09 3305 	mla	r3, r9, r5, r3
 802870e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028712:	2b00      	cmp	r3, #0
 8028714:	f000 80d2 	beq.w	80288bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8028718:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802871c:	d01b      	beq.n	8028756 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 802871e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8028722:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028726:	fb0e fa0a 	mul.w	sl, lr, sl
 802872a:	fb0e fe02 	mul.w	lr, lr, r2
 802872e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8028732:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028736:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802873a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802873e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028742:	4452      	add	r2, sl
 8028744:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028748:	0a12      	lsrs	r2, r2, #8
 802874a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802874e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028752:	ea42 020c 	orr.w	r2, r2, ip
 8028756:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028758:	2dff      	cmp	r5, #255	; 0xff
 802875a:	d021      	beq.n	80287a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802875c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802875e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028762:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028764:	fb05 fb0b 	mul.w	fp, r5, fp
 8028768:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802876a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802876e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028770:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028774:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028778:	fb05 fa0a 	mul.w	sl, r5, sl
 802877c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028780:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028784:	44de      	add	lr, fp
 8028786:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802878a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802878e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028792:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028796:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802879a:	ea4e 050a 	orr.w	r5, lr, sl
 802879e:	950b      	str	r5, [sp, #44]	; 0x2c
 80287a0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80287a2:	2dff      	cmp	r5, #255	; 0xff
 80287a4:	d021      	beq.n	80287ea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 80287a6:	9d08      	ldr	r5, [sp, #32]
 80287a8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80287ac:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80287ae:	fb05 fb0b 	mul.w	fp, r5, fp
 80287b2:	9d08      	ldr	r5, [sp, #32]
 80287b4:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80287b8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80287ba:	fb05 fa0e 	mul.w	sl, r5, lr
 80287be:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80287c2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80287c6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80287ca:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80287ce:	44de      	add	lr, fp
 80287d0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80287d4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80287d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80287dc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80287e0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80287e4:	ea4e 050a 	orr.w	r5, lr, sl
 80287e8:	9508      	str	r5, [sp, #32]
 80287ea:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80287ec:	2dff      	cmp	r5, #255	; 0xff
 80287ee:	d021      	beq.n	8028834 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 80287f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80287f2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80287f6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80287f8:	fb05 fb0b 	mul.w	fp, r5, fp
 80287fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80287fe:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028802:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028804:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028808:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802880c:	fb05 fa0a 	mul.w	sl, r5, sl
 8028810:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028814:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028818:	44de      	add	lr, fp
 802881a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802881e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028822:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028826:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802882a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802882e:	ea4e 050a 	orr.w	r5, lr, sl
 8028832:	950c      	str	r5, [sp, #48]	; 0x30
 8028834:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028836:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802883a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802883e:	2bff      	cmp	r3, #255	; 0xff
 8028840:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028844:	9d08      	ldr	r5, [sp, #32]
 8028846:	fb08 fc0c 	mul.w	ip, r8, ip
 802884a:	fb01 cc0e 	mla	ip, r1, lr, ip
 802884e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028852:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028854:	fb00 cc0e 	mla	ip, r0, lr, ip
 8028858:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802885c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802885e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028862:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8028866:	fb08 f80e 	mul.w	r8, r8, lr
 802886a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802886e:	fb01 8202 	mla	r2, r1, r2, r8
 8028872:	9908      	ldr	r1, [sp, #32]
 8028874:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028878:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802887c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802887e:	fb00 220a 	mla	r2, r0, sl, r2
 8028882:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8028886:	fb09 2900 	mla	r9, r9, r0, r2
 802888a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802888e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028892:	ea4c 0c09 	orr.w	ip, ip, r9
 8028896:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802889a:	f040 8091 	bne.w	80289c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802889e:	ea4f 135c 	mov.w	r3, ip, lsr #5
 80288a2:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80288a6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80288aa:	f022 0207 	bic.w	r2, r2, #7
 80288ae:	431a      	orrs	r2, r3
 80288b0:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80288b4:	ea4c 0c02 	orr.w	ip, ip, r2
 80288b8:	f8a7 c000 	strh.w	ip, [r7]
 80288bc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80288be:	3702      	adds	r7, #2
 80288c0:	441c      	add	r4, r3
 80288c2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80288c4:	441e      	add	r6, r3
 80288c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80288c8:	3b01      	subs	r3, #1
 80288ca:	9317      	str	r3, [sp, #92]	; 0x5c
 80288cc:	e6c0      	b.n	8028650 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xac>
 80288ce:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80288d0:	441c      	add	r4, r3
 80288d2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80288d4:	441e      	add	r6, r3
 80288d6:	9b07      	ldr	r3, [sp, #28]
 80288d8:	3b01      	subs	r3, #1
 80288da:	9307      	str	r3, [sp, #28]
 80288dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80288de:	3302      	adds	r3, #2
 80288e0:	930a      	str	r3, [sp, #40]	; 0x28
 80288e2:	e695      	b.n	8028610 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80288e4:	d024      	beq.n	8028930 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 80288e6:	9b07      	ldr	r3, [sp, #28]
 80288e8:	982f      	ldr	r0, [sp, #188]	; 0xbc
 80288ea:	3b01      	subs	r3, #1
 80288ec:	fb00 4003 	mla	r0, r0, r3, r4
 80288f0:	1400      	asrs	r0, r0, #16
 80288f2:	f53f aeaa 	bmi.w	802864a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80288f6:	3901      	subs	r1, #1
 80288f8:	4288      	cmp	r0, r1
 80288fa:	f6bf aea6 	bge.w	802864a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80288fe:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8028900:	fb01 6303 	mla	r3, r1, r3, r6
 8028904:	141b      	asrs	r3, r3, #16
 8028906:	f53f aea0 	bmi.w	802864a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 802890a:	3a01      	subs	r2, #1
 802890c:	4293      	cmp	r3, r2
 802890e:	f6bf ae9c 	bge.w	802864a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8028912:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8028916:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 802891a:	f1bb 0f00 	cmp.w	fp, #0
 802891e:	f300 809a 	bgt.w	8028a56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 8028922:	9b07      	ldr	r3, [sp, #28]
 8028924:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8028928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802892a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802892e:	930a      	str	r3, [sp, #40]	; 0x28
 8028930:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028932:	2b00      	cmp	r3, #0
 8028934:	f340 81ec 	ble.w	8028d10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76c>
 8028938:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802893c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802893e:	ee3a aa2b 	vadd.f32	s20, s20, s23
 8028942:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8028946:	eef0 6a48 	vmov.f32	s13, s16
 802894a:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802894e:	ee39 9a2a 	vadd.f32	s18, s18, s21
 8028952:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028956:	ee16 4a90 	vmov	r4, s13
 802895a:	eef0 6a68 	vmov.f32	s13, s17
 802895e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028962:	ee16 6a90 	vmov	r6, s13
 8028966:	ee29 7aa7 	vmul.f32	s14, s19, s15
 802896a:	ee69 7a27 	vmul.f32	s15, s18, s15
 802896e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8028972:	ee77 8ae8 	vsub.f32	s17, s15, s17
 8028976:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 802897a:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 802897e:	ee18 2a10 	vmov	r2, s16
 8028982:	eeb0 8a47 	vmov.f32	s16, s14
 8028986:	fb92 f3f3 	sdiv	r3, r2, r3
 802898a:	ee18 2a90 	vmov	r2, s17
 802898e:	932f      	str	r3, [sp, #188]	; 0xbc
 8028990:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028992:	eef0 8a67 	vmov.f32	s17, s15
 8028996:	fb92 f3f3 	sdiv	r3, r2, r3
 802899a:	9330      	str	r3, [sp, #192]	; 0xc0
 802899c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802899e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80289a0:	3b01      	subs	r3, #1
 80289a2:	9316      	str	r3, [sp, #88]	; 0x58
 80289a4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80289a6:	bf08      	it	eq
 80289a8:	4613      	moveq	r3, r2
 80289aa:	9307      	str	r3, [sp, #28]
 80289ac:	e622      	b.n	80285f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80289ae:	2800      	cmp	r0, #0
 80289b0:	f43f ae92 	beq.w	80286d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80289b4:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80289b8:	9308      	str	r3, [sp, #32]
 80289ba:	0e1b      	lsrs	r3, r3, #24
 80289bc:	9310      	str	r3, [sp, #64]	; 0x40
 80289be:	e68b      	b.n	80286d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80289c0:	8839      	ldrh	r1, [r7, #0]
 80289c2:	43db      	mvns	r3, r3
 80289c4:	4dd5      	ldr	r5, [pc, #852]	; (8028d1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 80289c6:	ea4f 2e21 	mov.w	lr, r1, asr #8
 80289ca:	fa5f f883 	uxtb.w	r8, r3
 80289ce:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80289d2:	10c8      	asrs	r0, r1, #3
 80289d4:	00cb      	lsls	r3, r1, #3
 80289d6:	fb0e fe08 	mul.w	lr, lr, r8
 80289da:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80289de:	b2db      	uxtb	r3, r3
 80289e0:	f10e 0101 	add.w	r1, lr, #1
 80289e4:	fb00 f008 	mul.w	r0, r0, r8
 80289e8:	fb03 f308 	mul.w	r3, r3, r8
 80289ec:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 80289f0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80289f4:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 80289f8:	f100 0e01 	add.w	lr, r0, #1
 80289fc:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 8028a00:	b2c9      	uxtb	r1, r1
 8028a02:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8028a06:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8028a0a:	00d2      	lsls	r2, r2, #3
 8028a0c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028a10:	430a      	orrs	r2, r1
 8028a12:	1c59      	adds	r1, r3, #1
 8028a14:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8028a18:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8028a1c:	e748      	b.n	80288b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8028a1e:	f112 0801 	adds.w	r8, r2, #1
 8028a22:	f53f af4b 	bmi.w	80288bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8028a26:	4543      	cmp	r3, r8
 8028a28:	f6ff af48 	blt.w	80288bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8028a2c:	f11c 0801 	adds.w	r8, ip, #1
 8028a30:	f53f af44 	bmi.w	80288bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8028a34:	45c6      	cmp	lr, r8
 8028a36:	f6ff af41 	blt.w	80288bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8028a3a:	b21b      	sxth	r3, r3
 8028a3c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8028a40:	fa0f f28e 	sxth.w	r2, lr
 8028a44:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8028a48:	9200      	str	r2, [sp, #0]
 8028a4a:	4639      	mov	r1, r7
 8028a4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028a4e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8028a50:	f7ff fc54 	bl	80282fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8028a54:	e732      	b.n	80288bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8028a56:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8028a58:	1421      	asrs	r1, r4, #16
 8028a5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028a5c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028a60:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8028a64:	1433      	asrs	r3, r6, #16
 8028a66:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028a6a:	fb07 1303 	mla	r3, r7, r3, r1
 8028a6e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8028a70:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8028a74:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8028a78:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028a7c:	2a00      	cmp	r2, #0
 8028a7e:	f000 8108 	beq.w	8028c92 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 8028a82:	684d      	ldr	r5, [r1, #4]
 8028a84:	950d      	str	r5, [sp, #52]	; 0x34
 8028a86:	0e2d      	lsrs	r5, r5, #24
 8028a88:	9514      	str	r5, [sp, #80]	; 0x50
 8028a8a:	b178      	cbz	r0, 8028aac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8028a8c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8028a90:	3f01      	subs	r7, #1
 8028a92:	00bf      	lsls	r7, r7, #2
 8028a94:	3704      	adds	r7, #4
 8028a96:	eb01 0e07 	add.w	lr, r1, r7
 8028a9a:	59c9      	ldr	r1, [r1, r7]
 8028a9c:	9109      	str	r1, [sp, #36]	; 0x24
 8028a9e:	0e09      	lsrs	r1, r1, #24
 8028aa0:	9111      	str	r1, [sp, #68]	; 0x44
 8028aa2:	f8de 1004 	ldr.w	r1, [lr, #4]
 8028aa6:	910e      	str	r1, [sp, #56]	; 0x38
 8028aa8:	0e09      	lsrs	r1, r1, #24
 8028aaa:	9115      	str	r1, [sp, #84]	; 0x54
 8028aac:	b292      	uxth	r2, r2
 8028aae:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028ab0:	b280      	uxth	r0, r0
 8028ab2:	fb02 f900 	mul.w	r9, r2, r0
 8028ab6:	0112      	lsls	r2, r2, #4
 8028ab8:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8028abc:	eba2 0e09 	sub.w	lr, r2, r9
 8028ac0:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8028ac4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8028ac6:	b280      	uxth	r0, r0
 8028ac8:	fa1f fe8e 	uxth.w	lr, lr
 8028acc:	1a09      	subs	r1, r1, r0
 8028ace:	fb0e f202 	mul.w	r2, lr, r2
 8028ad2:	b289      	uxth	r1, r1
 8028ad4:	fb01 220c 	mla	r2, r1, ip, r2
 8028ad8:	fb00 2205 	mla	r2, r0, r5, r2
 8028adc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028ade:	fb09 2205 	mla	r2, r9, r5, r2
 8028ae2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8028ae6:	2a00      	cmp	r2, #0
 8028ae8:	f000 80ca 	beq.w	8028c80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8028aec:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8028af0:	d019      	beq.n	8028b26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x582>
 8028af2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8028af6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028afa:	fb0c fa0a 	mul.w	sl, ip, sl
 8028afe:	fb0c fc03 	mul.w	ip, ip, r3
 8028b02:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8028b06:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028b0a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8028b0e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028b12:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8028b16:	4453      	add	r3, sl
 8028b18:	0a3f      	lsrs	r7, r7, #8
 8028b1a:	0a1b      	lsrs	r3, r3, #8
 8028b1c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8028b20:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028b24:	433b      	orrs	r3, r7
 8028b26:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028b28:	2dff      	cmp	r5, #255	; 0xff
 8028b2a:	d020      	beq.n	8028b6e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ca>
 8028b2c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028b2e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028b32:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028b34:	436f      	muls	r7, r5
 8028b36:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028b38:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028b3c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028b40:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8028b42:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028b46:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028b4a:	fb05 fa0a 	mul.w	sl, r5, sl
 8028b4e:	44bc      	add	ip, r7
 8028b50:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028b54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028b58:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028b5c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028b60:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028b64:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028b68:	ea4c 050a 	orr.w	r5, ip, sl
 8028b6c:	950d      	str	r5, [sp, #52]	; 0x34
 8028b6e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028b70:	2dff      	cmp	r5, #255	; 0xff
 8028b72:	d020      	beq.n	8028bb6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x612>
 8028b74:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028b76:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028b7a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028b7c:	436f      	muls	r7, r5
 8028b7e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028b80:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8028b84:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028b86:	fb05 fa0c 	mul.w	sl, r5, ip
 8028b8a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028b8e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028b92:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028b96:	44bc      	add	ip, r7
 8028b98:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028b9c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028ba0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028ba4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028ba8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028bac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028bb0:	ea4c 050a 	orr.w	r5, ip, sl
 8028bb4:	9509      	str	r5, [sp, #36]	; 0x24
 8028bb6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028bb8:	2dff      	cmp	r5, #255	; 0xff
 8028bba:	d020      	beq.n	8028bfe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 8028bbc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028bbe:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028bc2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028bc4:	436f      	muls	r7, r5
 8028bc6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028bc8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028bcc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028bd0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028bd2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028bd6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028bda:	fb05 fa0a 	mul.w	sl, r5, sl
 8028bde:	44bc      	add	ip, r7
 8028be0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028be4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028be8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028bec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028bf0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028bf4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028bf8:	ea4c 050a 	orr.w	r5, ip, sl
 8028bfc:	950e      	str	r5, [sp, #56]	; 0x38
 8028bfe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028c00:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8028c04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028c08:	2aff      	cmp	r2, #255	; 0xff
 8028c0a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028c0e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028c10:	fb0e f707 	mul.w	r7, lr, r7
 8028c14:	fb01 770c 	mla	r7, r1, ip, r7
 8028c18:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028c1c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028c1e:	fb00 770c 	mla	r7, r0, ip, r7
 8028c22:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028c26:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028c28:	fb09 770c 	mla	r7, r9, ip, r7
 8028c2c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8028c30:	fb0e fe0c 	mul.w	lr, lr, ip
 8028c34:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8028c38:	fb01 e303 	mla	r3, r1, r3, lr
 8028c3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8028c3e:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028c42:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8028c46:	990e      	ldr	r1, [sp, #56]	; 0x38
 8028c48:	fb00 330a 	mla	r3, r0, sl, r3
 8028c4c:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8028c50:	fb09 3c0c 	mla	ip, r9, ip, r3
 8028c54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028c58:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028c5c:	ea47 070c 	orr.w	r7, r7, ip
 8028c60:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8028c64:	d11e      	bne.n	8028ca4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x700>
 8028c66:	097a      	lsrs	r2, r7, #5
 8028c68:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8028c6c:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8028c70:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028c74:	f023 0307 	bic.w	r3, r3, #7
 8028c78:	4313      	orrs	r3, r2
 8028c7a:	431f      	orrs	r7, r3
 8028c7c:	f8a8 7000 	strh.w	r7, [r8]
 8028c80:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8028c82:	f108 0802 	add.w	r8, r8, #2
 8028c86:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028c8a:	441c      	add	r4, r3
 8028c8c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028c8e:	441e      	add	r6, r3
 8028c90:	e643      	b.n	802891a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8028c92:	2800      	cmp	r0, #0
 8028c94:	f43f af0a 	beq.w	8028aac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8028c98:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8028c9c:	9109      	str	r1, [sp, #36]	; 0x24
 8028c9e:	0e09      	lsrs	r1, r1, #24
 8028ca0:	9111      	str	r1, [sp, #68]	; 0x44
 8028ca2:	e703      	b.n	8028aac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x508>
 8028ca4:	f8b8 1000 	ldrh.w	r1, [r8]
 8028ca8:	43d2      	mvns	r2, r2
 8028caa:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8028cae:	fa5f fe82 	uxtb.w	lr, r2
 8028cb2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8028cb6:	10c8      	asrs	r0, r1, #3
 8028cb8:	00ca      	lsls	r2, r1, #3
 8028cba:	fb0c fc0e 	mul.w	ip, ip, lr
 8028cbe:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028cc2:	b2d2      	uxtb	r2, r2
 8028cc4:	f10c 0101 	add.w	r1, ip, #1
 8028cc8:	fb00 f00e 	mul.w	r0, r0, lr
 8028ccc:	fb02 f20e 	mul.w	r2, r2, lr
 8028cd0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8028cd4:	0c39      	lsrs	r1, r7, #16
 8028cd6:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8028cda:	4910      	ldr	r1, [pc, #64]	; (8028d1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x778>)
 8028cdc:	fa5f fc8c 	uxtb.w	ip, ip
 8028ce0:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8028ce4:	1c41      	adds	r1, r0, #1
 8028ce6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8028cea:	1c51      	adds	r1, r2, #1
 8028cec:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028cf0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028cf4:	00c0      	lsls	r0, r0, #3
 8028cf6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8028cfa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028cfe:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8028d02:	ea4c 0c00 	orr.w	ip, ip, r0
 8028d06:	ea47 0c0c 	orr.w	ip, r7, ip
 8028d0a:	f8a8 c000 	strh.w	ip, [r8]
 8028d0e:	e7b7      	b.n	8028c80 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8028d10:	b01b      	add	sp, #108	; 0x6c
 8028d12:	ecbd 8b08 	vpop	{d8-d11}
 8028d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028d1a:	bf00      	nop
 8028d1c:	fffff800 	.word	0xfffff800

08028d20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8028d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028d24:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 8028d28:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8028d2c:	2c00      	cmp	r4, #0
 8028d2e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8028d32:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8028d36:	fb04 ce03 	mla	lr, r4, r3, ip
 8028d3a:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8028d3e:	db60      	blt.n	8028e02 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8028d40:	45a1      	cmp	r9, r4
 8028d42:	dd5e      	ble.n	8028e02 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe2>
 8028d44:	f1bc 0f00 	cmp.w	ip, #0
 8028d48:	db59      	blt.n	8028dfe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8028d4a:	45e0      	cmp	r8, ip
 8028d4c:	dd57      	ble.n	8028dfe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xde>
 8028d4e:	ea4f 005e 	mov.w	r0, lr, lsr #1
 8028d52:	f01e 0f01 	tst.w	lr, #1
 8028d56:	5c16      	ldrb	r6, [r2, r0]
 8028d58:	bf0c      	ite	eq
 8028d5a:	f006 060f 	andeq.w	r6, r6, #15
 8028d5e:	1136      	asrne	r6, r6, #4
 8028d60:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8028d64:	b2f6      	uxtb	r6, r6
 8028d66:	f11c 0001 	adds.w	r0, ip, #1
 8028d6a:	d44d      	bmi.n	8028e08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8028d6c:	4580      	cmp	r8, r0
 8028d6e:	dd4b      	ble.n	8028e08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xe8>
 8028d70:	2d00      	cmp	r5, #0
 8028d72:	d04b      	beq.n	8028e0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xec>
 8028d74:	f10e 0a01 	add.w	sl, lr, #1
 8028d78:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8028d7c:	f01a 0f01 	tst.w	sl, #1
 8028d80:	5c10      	ldrb	r0, [r2, r0]
 8028d82:	bf0c      	ite	eq
 8028d84:	f000 000f 	andeq.w	r0, r0, #15
 8028d88:	1100      	asrne	r0, r0, #4
 8028d8a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028d8e:	b2c0      	uxtb	r0, r0
 8028d90:	3401      	adds	r4, #1
 8028d92:	d43f      	bmi.n	8028e14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8028d94:	45a1      	cmp	r9, r4
 8028d96:	dd3d      	ble.n	8028e14 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf4>
 8028d98:	2f00      	cmp	r7, #0
 8028d9a:	f000 80a8 	beq.w	8028eee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ce>
 8028d9e:	f1bc 0f00 	cmp.w	ip, #0
 8028da2:	db35      	blt.n	8028e10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8028da4:	45e0      	cmp	r8, ip
 8028da6:	dd33      	ble.n	8028e10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xf0>
 8028da8:	eb03 090e 	add.w	r9, r3, lr
 8028dac:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8028db0:	f019 0f01 	tst.w	r9, #1
 8028db4:	5d14      	ldrb	r4, [r2, r4]
 8028db6:	bf0c      	ite	eq
 8028db8:	f004 040f 	andeq.w	r4, r4, #15
 8028dbc:	1124      	asrne	r4, r4, #4
 8028dbe:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028dc2:	b2e4      	uxtb	r4, r4
 8028dc4:	f11c 0c01 	adds.w	ip, ip, #1
 8028dc8:	d427      	bmi.n	8028e1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8028dca:	45e0      	cmp	r8, ip
 8028dcc:	dd25      	ble.n	8028e1a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfa>
 8028dce:	b335      	cbz	r5, 8028e1e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xfe>
 8028dd0:	3301      	adds	r3, #1
 8028dd2:	449e      	add	lr, r3
 8028dd4:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8028dd8:	f01e 0f01 	tst.w	lr, #1
 8028ddc:	5cd2      	ldrb	r2, [r2, r3]
 8028dde:	bf0c      	ite	eq
 8028de0:	f002 020f 	andeq.w	r2, r2, #15
 8028de4:	1112      	asrne	r2, r2, #4
 8028de6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8028dea:	b2d3      	uxtb	r3, r2
 8028dec:	2d0f      	cmp	r5, #15
 8028dee:	d917      	bls.n	8028e20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x100>
 8028df0:	4b42      	ldr	r3, [pc, #264]	; (8028efc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1dc>)
 8028df2:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8028df6:	4a42      	ldr	r2, [pc, #264]	; (8028f00 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e0>)
 8028df8:	4842      	ldr	r0, [pc, #264]	; (8028f04 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e4>)
 8028dfa:	f001 f829 	bl	8029e50 <__assert_func>
 8028dfe:	2600      	movs	r6, #0
 8028e00:	e7b1      	b.n	8028d66 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x46>
 8028e02:	2000      	movs	r0, #0
 8028e04:	4606      	mov	r6, r0
 8028e06:	e7c3      	b.n	8028d90 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8028e08:	2000      	movs	r0, #0
 8028e0a:	e7c1      	b.n	8028d90 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8028e0c:	4628      	mov	r0, r5
 8028e0e:	e7bf      	b.n	8028d90 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x70>
 8028e10:	2400      	movs	r4, #0
 8028e12:	e7d7      	b.n	8028dc4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa4>
 8028e14:	2300      	movs	r3, #0
 8028e16:	461c      	mov	r4, r3
 8028e18:	e7e8      	b.n	8028dec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8028e1a:	2300      	movs	r3, #0
 8028e1c:	e7e6      	b.n	8028dec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xcc>
 8028e1e:	462b      	mov	r3, r5
 8028e20:	2f0f      	cmp	r7, #15
 8028e22:	d8e5      	bhi.n	8028df0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8028e24:	b2ad      	uxth	r5, r5
 8028e26:	b2bf      	uxth	r7, r7
 8028e28:	fb05 fc07 	mul.w	ip, r5, r7
 8028e2c:	012d      	lsls	r5, r5, #4
 8028e2e:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8028e32:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 8028e36:	eba5 050c 	sub.w	r5, r5, ip
 8028e3a:	b2bf      	uxth	r7, r7
 8028e3c:	b2ad      	uxth	r5, r5
 8028e3e:	1bd2      	subs	r2, r2, r7
 8028e40:	4368      	muls	r0, r5
 8028e42:	b292      	uxth	r2, r2
 8028e44:	fb06 0002 	mla	r0, r6, r2, r0
 8028e48:	fb07 0404 	mla	r4, r7, r4, r0
 8028e4c:	fb0c 4303 	mla	r3, ip, r3, r4
 8028e50:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028e54:	b1b3      	cbz	r3, 8028e84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 8028e56:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8028e5a:	435a      	muls	r2, r3
 8028e5c:	1c53      	adds	r3, r2, #1
 8028e5e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028e62:	4a29      	ldr	r2, [pc, #164]	; (8028f08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1e8>)
 8028e64:	121b      	asrs	r3, r3, #8
 8028e66:	6812      	ldr	r2, [r2, #0]
 8028e68:	2bff      	cmp	r3, #255	; 0xff
 8028e6a:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8028e6e:	d10b      	bne.n	8028e88 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x168>
 8028e70:	0950      	lsrs	r0, r2, #5
 8028e72:	4b26      	ldr	r3, [pc, #152]	; (8028f0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1ec>)
 8028e74:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028e78:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028e7c:	4033      	ands	r3, r6
 8028e7e:	4318      	orrs	r0, r3
 8028e80:	4302      	orrs	r2, r0
 8028e82:	800a      	strh	r2, [r1, #0]
 8028e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028e88:	880d      	ldrh	r5, [r1, #0]
 8028e8a:	b29f      	uxth	r7, r3
 8028e8c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8028e90:	43db      	mvns	r3, r3
 8028e92:	122c      	asrs	r4, r5, #8
 8028e94:	fb10 f007 	smulbb	r0, r0, r7
 8028e98:	b2db      	uxtb	r3, r3
 8028e9a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8028e9e:	b2f6      	uxtb	r6, r6
 8028ea0:	b2d2      	uxtb	r2, r2
 8028ea2:	fb04 0403 	mla	r4, r4, r3, r0
 8028ea6:	10e8      	asrs	r0, r5, #3
 8028ea8:	fb12 f207 	smulbb	r2, r2, r7
 8028eac:	00ed      	lsls	r5, r5, #3
 8028eae:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028eb2:	b2a4      	uxth	r4, r4
 8028eb4:	fb16 f607 	smulbb	r6, r6, r7
 8028eb8:	b2ed      	uxtb	r5, r5
 8028eba:	fb00 6603 	mla	r6, r0, r3, r6
 8028ebe:	fb05 2303 	mla	r3, r5, r3, r2
 8028ec2:	b2b0      	uxth	r0, r6
 8028ec4:	b29a      	uxth	r2, r3
 8028ec6:	1c63      	adds	r3, r4, #1
 8028ec8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8028ecc:	1c53      	adds	r3, r2, #1
 8028ece:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028ed2:	1c42      	adds	r2, r0, #1
 8028ed4:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8028ed8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028edc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028ee0:	0940      	lsrs	r0, r0, #5
 8028ee2:	4323      	orrs	r3, r4
 8028ee4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8028ee8:	4303      	orrs	r3, r0
 8028eea:	800b      	strh	r3, [r1, #0]
 8028eec:	e7ca      	b.n	8028e84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x164>
 8028eee:	2d0f      	cmp	r5, #15
 8028ef0:	f63f af7e 	bhi.w	8028df0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xd0>
 8028ef4:	463b      	mov	r3, r7
 8028ef6:	463c      	mov	r4, r7
 8028ef8:	e794      	b.n	8028e24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x104>
 8028efa:	bf00      	nop
 8028efc:	08031892 	.word	0x08031892
 8028f00:	08031e62 	.word	0x08031e62
 8028f04:	08031916 	.word	0x08031916
 8028f08:	2002b8a8 	.word	0x2002b8a8
 8028f0c:	00fff800 	.word	0x00fff800

08028f10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028f14:	ed2d 8b08 	vpush	{d8-d11}
 8028f18:	b097      	sub	sp, #92	; 0x5c
 8028f1a:	eeb0 aa40 	vmov.f32	s20, s0
 8028f1e:	eef0 9a60 	vmov.f32	s19, s1
 8028f22:	9214      	str	r2, [sp, #80]	; 0x50
 8028f24:	eeb0 9a41 	vmov.f32	s18, s2
 8028f28:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8028f2a:	eeb0 8a62 	vmov.f32	s16, s5
 8028f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8028f30:	eef0 8a43 	vmov.f32	s17, s6
 8028f34:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8028f38:	eef0 ba44 	vmov.f32	s23, s8
 8028f3c:	9015      	str	r0, [sp, #84]	; 0x54
 8028f3e:	eeb0 ba64 	vmov.f32	s22, s9
 8028f42:	6850      	ldr	r0, [r2, #4]
 8028f44:	eef0 aa45 	vmov.f32	s21, s10
 8028f48:	910d      	str	r1, [sp, #52]	; 0x34
 8028f4a:	930f      	str	r3, [sp, #60]	; 0x3c
 8028f4c:	6812      	ldr	r2, [r2, #0]
 8028f4e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8028f52:	e9dd 4629 	ldrd	r4, r6, [sp, #164]	; 0xa4
 8028f56:	fb00 1303 	mla	r3, r0, r3, r1
 8028f5a:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8028f5e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028f60:	689b      	ldr	r3, [r3, #8]
 8028f62:	3301      	adds	r3, #1
 8028f64:	f023 0301 	bic.w	r3, r3, #1
 8028f68:	930a      	str	r3, [sp, #40]	; 0x28
 8028f6a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028f6c:	681f      	ldr	r7, [r3, #0]
 8028f6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028f70:	2b00      	cmp	r3, #0
 8028f72:	dc03      	bgt.n	8028f7c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8028f74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8028f76:	2b00      	cmp	r3, #0
 8028f78:	f340 8289 	ble.w	802948e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8028f7c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028f7e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028f82:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028f86:	1e48      	subs	r0, r1, #1
 8028f88:	f102 3cff 	add.w	ip, r2, #4294967295
 8028f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028f8e:	2b00      	cmp	r3, #0
 8028f90:	f340 80c5 	ble.w	802911e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8028f94:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028f98:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028f9c:	d406      	bmi.n	8028fac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8028f9e:	4586      	cmp	lr, r0
 8028fa0:	da04      	bge.n	8028fac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8028fa2:	2b00      	cmp	r3, #0
 8028fa4:	db02      	blt.n	8028fac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8028fa6:	4563      	cmp	r3, ip
 8028fa8:	f2c0 80ba 	blt.w	8029120 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8028fac:	f11e 0e01 	adds.w	lr, lr, #1
 8028fb0:	f100 80ab 	bmi.w	802910a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8028fb4:	4571      	cmp	r1, lr
 8028fb6:	f2c0 80a8 	blt.w	802910a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8028fba:	3301      	adds	r3, #1
 8028fbc:	f100 80a5 	bmi.w	802910a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8028fc0:	429a      	cmp	r2, r3
 8028fc2:	f2c0 80a2 	blt.w	802910a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8028fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028fc8:	46c8      	mov	r8, r9
 8028fca:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8028fce:	930e      	str	r3, [sp, #56]	; 0x38
 8028fd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028fd2:	2b00      	cmp	r3, #0
 8028fd4:	f340 80c4 	ble.w	8029160 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8028fd8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8028fda:	1430      	asrs	r0, r6, #16
 8028fdc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028fe0:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028fe4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8028fe8:	1423      	asrs	r3, r4, #16
 8028fea:	f100 814f 	bmi.w	802928c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8028fee:	f10c 3bff 	add.w	fp, ip, #4294967295
 8028ff2:	455b      	cmp	r3, fp
 8028ff4:	f280 814a 	bge.w	802928c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8028ff8:	2800      	cmp	r0, #0
 8028ffa:	f2c0 8147 	blt.w	802928c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8028ffe:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029002:	4558      	cmp	r0, fp
 8029004:	f280 8142 	bge.w	802928c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8029008:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802900a:	fb00 3305 	mla	r3, r0, r5, r3
 802900e:	0858      	lsrs	r0, r3, #1
 8029010:	07dd      	lsls	r5, r3, #31
 8029012:	f817 c000 	ldrb.w	ip, [r7, r0]
 8029016:	bf54      	ite	pl
 8029018:	f00c 0c0f 	andpl.w	ip, ip, #15
 802901c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029020:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029024:	fa5f fc8c 	uxtb.w	ip, ip
 8029028:	2a00      	cmp	r2, #0
 802902a:	f000 80dd 	beq.w	80291e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802902e:	1c58      	adds	r0, r3, #1
 8029030:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8029034:	07c0      	lsls	r0, r0, #31
 8029036:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802903a:	bf54      	ite	pl
 802903c:	f00e 0e0f 	andpl.w	lr, lr, #15
 8029040:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8029044:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8029048:	fa5f f08e 	uxtb.w	r0, lr
 802904c:	9010      	str	r0, [sp, #64]	; 0x40
 802904e:	b1d9      	cbz	r1, 8029088 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 8029050:	4453      	add	r3, sl
 8029052:	0858      	lsrs	r0, r3, #1
 8029054:	07dd      	lsls	r5, r3, #31
 8029056:	f103 0301 	add.w	r3, r3, #1
 802905a:	5c38      	ldrb	r0, [r7, r0]
 802905c:	bf54      	ite	pl
 802905e:	f000 000f 	andpl.w	r0, r0, #15
 8029062:	1100      	asrmi	r0, r0, #4
 8029064:	07dd      	lsls	r5, r3, #31
 8029066:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802906a:	b2c0      	uxtb	r0, r0
 802906c:	900b      	str	r0, [sp, #44]	; 0x2c
 802906e:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8029072:	f817 e000 	ldrb.w	lr, [r7, r0]
 8029076:	bf54      	ite	pl
 8029078:	f00e 030f 	andpl.w	r3, lr, #15
 802907c:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8029080:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029084:	b2db      	uxtb	r3, r3
 8029086:	9311      	str	r3, [sp, #68]	; 0x44
 8029088:	b292      	uxth	r2, r2
 802908a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802908c:	b289      	uxth	r1, r1
 802908e:	fb02 f301 	mul.w	r3, r2, r1
 8029092:	0112      	lsls	r2, r2, #4
 8029094:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8029098:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802909c:	1ad2      	subs	r2, r2, r3
 802909e:	b289      	uxth	r1, r1
 80290a0:	b292      	uxth	r2, r2
 80290a2:	1a40      	subs	r0, r0, r1
 80290a4:	436a      	muls	r2, r5
 80290a6:	b280      	uxth	r0, r0
 80290a8:	fb0c 2c00 	mla	ip, ip, r0, r2
 80290ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80290ae:	fb01 c102 	mla	r1, r1, r2, ip
 80290b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80290b4:	fb03 1302 	mla	r3, r3, r2, r1
 80290b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80290bc:	b1db      	cbz	r3, 80290f6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80290be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80290c0:	4353      	muls	r3, r2
 80290c2:	1c5a      	adds	r2, r3, #1
 80290c4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80290c8:	4ac6      	ldr	r2, [pc, #792]	; (80293e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 80290ca:	121b      	asrs	r3, r3, #8
 80290cc:	6812      	ldr	r2, [r2, #0]
 80290ce:	2bff      	cmp	r3, #255	; 0xff
 80290d0:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80290d4:	f040 8099 	bne.w	802920a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 80290d8:	0953      	lsrs	r3, r2, #5
 80290da:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 80290de:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80290e2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80290e6:	f02c 0c07 	bic.w	ip, ip, #7
 80290ea:	ea43 0c0c 	orr.w	ip, r3, ip
 80290ee:	ea4c 0202 	orr.w	r2, ip, r2
 80290f2:	f8a8 2000 	strh.w	r2, [r8]
 80290f6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80290f8:	f108 0802 	add.w	r8, r8, #2
 80290fc:	441c      	add	r4, r3
 80290fe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029100:	441e      	add	r6, r3
 8029102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8029104:	3b01      	subs	r3, #1
 8029106:	930e      	str	r3, [sp, #56]	; 0x38
 8029108:	e762      	b.n	8028fd0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc0>
 802910a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802910c:	f109 0902 	add.w	r9, r9, #2
 8029110:	441c      	add	r4, r3
 8029112:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029114:	441e      	add	r6, r3
 8029116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029118:	3b01      	subs	r3, #1
 802911a:	9309      	str	r3, [sp, #36]	; 0x24
 802911c:	e736      	b.n	8028f8c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802911e:	d024      	beq.n	802916a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8029120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029122:	982b      	ldr	r0, [sp, #172]	; 0xac
 8029124:	3b01      	subs	r3, #1
 8029126:	fb00 4003 	mla	r0, r0, r3, r4
 802912a:	1400      	asrs	r0, r0, #16
 802912c:	f53f af4b 	bmi.w	8028fc6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029130:	3901      	subs	r1, #1
 8029132:	4288      	cmp	r0, r1
 8029134:	f6bf af47 	bge.w	8028fc6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029138:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802913a:	fb01 6303 	mla	r3, r1, r3, r6
 802913e:	141b      	asrs	r3, r3, #16
 8029140:	f53f af41 	bmi.w	8028fc6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029144:	3a01      	subs	r2, #1
 8029146:	4293      	cmp	r3, r2
 8029148:	f6bf af3d 	bge.w	8028fc6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 802914c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8029150:	46c8      	mov	r8, r9
 8029152:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8029156:	930e      	str	r3, [sp, #56]	; 0x38
 8029158:	f1bb 0f00 	cmp.w	fp, #0
 802915c:	f300 80b7 	bgt.w	80292ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 8029160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029162:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029166:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802916a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802916c:	2b00      	cmp	r3, #0
 802916e:	f340 818e 	ble.w	802948e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 8029172:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029176:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029178:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802917c:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8029180:	eef0 6a48 	vmov.f32	s13, s16
 8029184:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 8029188:	ee39 9a2a 	vadd.f32	s18, s18, s21
 802918c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029190:	ee16 4a90 	vmov	r4, s13
 8029194:	eef0 6a68 	vmov.f32	s13, s17
 8029198:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802919c:	ee16 6a90 	vmov	r6, s13
 80291a0:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80291a4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80291a8:	ee37 8a48 	vsub.f32	s16, s14, s16
 80291ac:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80291b0:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80291b4:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80291b8:	ee18 2a10 	vmov	r2, s16
 80291bc:	eeb0 8a47 	vmov.f32	s16, s14
 80291c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80291c4:	ee18 2a90 	vmov	r2, s17
 80291c8:	932b      	str	r3, [sp, #172]	; 0xac
 80291ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80291cc:	eef0 8a67 	vmov.f32	s17, s15
 80291d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80291d4:	932c      	str	r3, [sp, #176]	; 0xb0
 80291d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80291d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80291da:	3b01      	subs	r3, #1
 80291dc:	930d      	str	r3, [sp, #52]	; 0x34
 80291de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80291e0:	bf08      	it	eq
 80291e2:	4613      	moveq	r3, r2
 80291e4:	9309      	str	r3, [sp, #36]	; 0x24
 80291e6:	e6c2      	b.n	8028f6e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80291e8:	2900      	cmp	r1, #0
 80291ea:	f43f af4d 	beq.w	8029088 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 80291ee:	eb0a 0003 	add.w	r0, sl, r3
 80291f2:	0843      	lsrs	r3, r0, #1
 80291f4:	07c0      	lsls	r0, r0, #31
 80291f6:	5cfb      	ldrb	r3, [r7, r3]
 80291f8:	bf54      	ite	pl
 80291fa:	f003 030f 	andpl.w	r3, r3, #15
 80291fe:	111b      	asrmi	r3, r3, #4
 8029200:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029204:	b2db      	uxtb	r3, r3
 8029206:	930b      	str	r3, [sp, #44]	; 0x2c
 8029208:	e73e      	b.n	8029088 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x178>
 802920a:	f8b8 e000 	ldrh.w	lr, [r8]
 802920e:	fa1f fb83 	uxth.w	fp, r3
 8029212:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8029216:	43db      	mvns	r3, r3
 8029218:	ea4f 202e 	mov.w	r0, lr, asr #8
 802921c:	fb11 f10b 	smulbb	r1, r1, fp
 8029220:	b2db      	uxtb	r3, r3
 8029222:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029226:	fa5f fc8c 	uxtb.w	ip, ip
 802922a:	b2d2      	uxtb	r2, r2
 802922c:	fb00 1003 	mla	r0, r0, r3, r1
 8029230:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8029234:	fb1c fc0b 	smulbb	ip, ip, fp
 8029238:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802923c:	b280      	uxth	r0, r0
 802923e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8029242:	fb12 fb0b 	smulbb	fp, r2, fp
 8029246:	fa5f fe8e 	uxtb.w	lr, lr
 802924a:	fb01 cc03 	mla	ip, r1, r3, ip
 802924e:	fb0e bb03 	mla	fp, lr, r3, fp
 8029252:	1c43      	adds	r3, r0, #1
 8029254:	fa1f fc8c 	uxth.w	ip, ip
 8029258:	fa1f fb8b 	uxth.w	fp, fp
 802925c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029260:	f10c 0101 	add.w	r1, ip, #1
 8029264:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8029268:	f10b 0001 	add.w	r0, fp, #1
 802926c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8029270:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8029274:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8029278:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802927c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8029280:	4318      	orrs	r0, r3
 8029282:	ea40 000c 	orr.w	r0, r0, ip
 8029286:	f8a8 0000 	strh.w	r0, [r8]
 802928a:	e734      	b.n	80290f6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802928c:	f113 0b01 	adds.w	fp, r3, #1
 8029290:	f53f af31 	bmi.w	80290f6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8029294:	45dc      	cmp	ip, fp
 8029296:	f6ff af2e 	blt.w	80290f6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802929a:	f110 0b01 	adds.w	fp, r0, #1
 802929e:	f53f af2a 	bmi.w	80290f6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80292a2:	45de      	cmp	lr, fp
 80292a4:	f6ff af27 	blt.w	80290f6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80292a8:	9302      	str	r3, [sp, #8]
 80292aa:	fa0f f38e 	sxth.w	r3, lr
 80292ae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80292b0:	9301      	str	r3, [sp, #4]
 80292b2:	fa0f f38c 	sxth.w	r3, ip
 80292b6:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80292ba:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80292be:	9300      	str	r3, [sp, #0]
 80292c0:	463a      	mov	r2, r7
 80292c2:	4653      	mov	r3, sl
 80292c4:	4641      	mov	r1, r8
 80292c6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80292c8:	f7ff fd2a 	bl	8028d20 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 80292cc:	e713      	b.n	80290f6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80292ce:	1422      	asrs	r2, r4, #16
 80292d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80292d2:	1433      	asrs	r3, r6, #16
 80292d4:	f3c4 3103 	ubfx	r1, r4, #12, #4
 80292d8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80292dc:	fb05 2303 	mla	r3, r5, r3, r2
 80292e0:	085a      	lsrs	r2, r3, #1
 80292e2:	07dd      	lsls	r5, r3, #31
 80292e4:	5cba      	ldrb	r2, [r7, r2]
 80292e6:	bf54      	ite	pl
 80292e8:	f002 020f 	andpl.w	r2, r2, #15
 80292ec:	1112      	asrmi	r2, r2, #4
 80292ee:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80292f2:	b2d2      	uxtb	r2, r2
 80292f4:	2900      	cmp	r1, #0
 80292f6:	d077      	beq.n	80293e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80292f8:	f103 0e01 	add.w	lr, r3, #1
 80292fc:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8029300:	f01e 0f01 	tst.w	lr, #1
 8029304:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029308:	bf0c      	ite	eq
 802930a:	f00c 0c0f 	andeq.w	ip, ip, #15
 802930e:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8029312:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029316:	fa5f f58c 	uxtb.w	r5, ip
 802931a:	9512      	str	r5, [sp, #72]	; 0x48
 802931c:	b308      	cbz	r0, 8029362 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802931e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8029320:	442b      	add	r3, r5
 8029322:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029326:	07dd      	lsls	r5, r3, #31
 8029328:	f103 0301 	add.w	r3, r3, #1
 802932c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8029330:	bf54      	ite	pl
 8029332:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029336:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802933a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802933e:	fa5f f58c 	uxtb.w	r5, ip
 8029342:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8029346:	950c      	str	r5, [sp, #48]	; 0x30
 8029348:	07dd      	lsls	r5, r3, #31
 802934a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802934e:	bf54      	ite	pl
 8029350:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029354:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029358:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802935c:	fa5f f38c 	uxtb.w	r3, ip
 8029360:	9313      	str	r3, [sp, #76]	; 0x4c
 8029362:	b289      	uxth	r1, r1
 8029364:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8029366:	b280      	uxth	r0, r0
 8029368:	fb01 f300 	mul.w	r3, r1, r0
 802936c:	0109      	lsls	r1, r1, #4
 802936e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8029372:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8029376:	1ac9      	subs	r1, r1, r3
 8029378:	b280      	uxth	r0, r0
 802937a:	b289      	uxth	r1, r1
 802937c:	ebac 0c00 	sub.w	ip, ip, r0
 8029380:	4369      	muls	r1, r5
 8029382:	fa1f fc8c 	uxth.w	ip, ip
 8029386:	fb02 120c 	mla	r2, r2, ip, r1
 802938a:	990c      	ldr	r1, [sp, #48]	; 0x30
 802938c:	fb00 2001 	mla	r0, r0, r1, r2
 8029390:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8029392:	fb03 0302 	mla	r3, r3, r2, r0
 8029396:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802939a:	b1d3      	cbz	r3, 80293d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802939c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802939e:	4353      	muls	r3, r2
 80293a0:	1c5a      	adds	r2, r3, #1
 80293a2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80293a6:	4a0f      	ldr	r2, [pc, #60]	; (80293e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d4>)
 80293a8:	121b      	asrs	r3, r3, #8
 80293aa:	6812      	ldr	r2, [r2, #0]
 80293ac:	2bff      	cmp	r3, #255	; 0xff
 80293ae:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80293b2:	d12d      	bne.n	8029410 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x500>
 80293b4:	0953      	lsrs	r3, r2, #5
 80293b6:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 80293ba:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80293be:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80293c2:	f02c 0c07 	bic.w	ip, ip, #7
 80293c6:	ea43 0c0c 	orr.w	ip, r3, ip
 80293ca:	ea4c 0202 	orr.w	r2, ip, r2
 80293ce:	f8a8 2000 	strh.w	r2, [r8]
 80293d2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80293d4:	f108 0802 	add.w	r8, r8, #2
 80293d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80293dc:	441c      	add	r4, r3
 80293de:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80293e0:	441e      	add	r6, r3
 80293e2:	e6b9      	b.n	8029158 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80293e4:	2002b8a8 	.word	0x2002b8a8
 80293e8:	2800      	cmp	r0, #0
 80293ea:	d0ba      	beq.n	8029362 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80293ec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80293ee:	442b      	add	r3, r5
 80293f0:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80293f4:	07db      	lsls	r3, r3, #31
 80293f6:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80293fa:	bf54      	ite	pl
 80293fc:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029400:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029404:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029408:	fa5f f38c 	uxtb.w	r3, ip
 802940c:	930c      	str	r3, [sp, #48]	; 0x30
 802940e:	e7a8      	b.n	8029362 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029410:	f8b8 e000 	ldrh.w	lr, [r8]
 8029414:	fa1f fa83 	uxth.w	sl, r3
 8029418:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802941c:	43db      	mvns	r3, r3
 802941e:	ea4f 202e 	mov.w	r0, lr, asr #8
 8029422:	fb11 f10a 	smulbb	r1, r1, sl
 8029426:	b2db      	uxtb	r3, r3
 8029428:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802942c:	b2d2      	uxtb	r2, r2
 802942e:	fa5f fc8c 	uxtb.w	ip, ip
 8029432:	fb00 1003 	mla	r0, r0, r3, r1
 8029436:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802943a:	fb12 f20a 	smulbb	r2, r2, sl
 802943e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8029442:	b280      	uxth	r0, r0
 8029444:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8029448:	fb1c fc0a 	smulbb	ip, ip, sl
 802944c:	fa5f fe8e 	uxtb.w	lr, lr
 8029450:	fb0e 2203 	mla	r2, lr, r3, r2
 8029454:	fb01 cc03 	mla	ip, r1, r3, ip
 8029458:	1c43      	adds	r3, r0, #1
 802945a:	b292      	uxth	r2, r2
 802945c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8029460:	1c51      	adds	r1, r2, #1
 8029462:	fa1f fc8c 	uxth.w	ip, ip
 8029466:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802946a:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802946e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8029472:	4308      	orrs	r0, r1
 8029474:	f10c 0101 	add.w	r1, ip, #1
 8029478:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802947c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8029480:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8029484:	ea40 000c 	orr.w	r0, r0, ip
 8029488:	f8a8 0000 	strh.w	r0, [r8]
 802948c:	e7a1      	b.n	80293d2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802948e:	b017      	add	sp, #92	; 0x5c
 8029490:	ecbd 8b08 	vpop	{d8-d11}
 8029494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029498 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8029498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802949c:	e9dd c40a 	ldrd	ip, r4, [sp, #40]	; 0x28
 80294a0:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80294a4:	2c00      	cmp	r4, #0
 80294a6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80294aa:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80294ae:	fb04 ce03 	mla	lr, r4, r3, ip
 80294b2:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 80294b6:	db60      	blt.n	802957a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 80294b8:	45a1      	cmp	r9, r4
 80294ba:	dd5e      	ble.n	802957a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe2>
 80294bc:	f1bc 0f00 	cmp.w	ip, #0
 80294c0:	db59      	blt.n	8029576 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 80294c2:	45e0      	cmp	r8, ip
 80294c4:	dd57      	ble.n	8029576 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xde>
 80294c6:	ea4f 005e 	mov.w	r0, lr, lsr #1
 80294ca:	f01e 0f01 	tst.w	lr, #1
 80294ce:	5c16      	ldrb	r6, [r2, r0]
 80294d0:	bf0c      	ite	eq
 80294d2:	f006 060f 	andeq.w	r6, r6, #15
 80294d6:	1136      	asrne	r6, r6, #4
 80294d8:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80294dc:	b2f6      	uxtb	r6, r6
 80294de:	f11c 0001 	adds.w	r0, ip, #1
 80294e2:	d44d      	bmi.n	8029580 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 80294e4:	4580      	cmp	r8, r0
 80294e6:	dd4b      	ble.n	8029580 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xe8>
 80294e8:	2d00      	cmp	r5, #0
 80294ea:	d04b      	beq.n	8029584 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xec>
 80294ec:	f10e 0a01 	add.w	sl, lr, #1
 80294f0:	ea4f 005a 	mov.w	r0, sl, lsr #1
 80294f4:	f01a 0f01 	tst.w	sl, #1
 80294f8:	5c10      	ldrb	r0, [r2, r0]
 80294fa:	bf0c      	ite	eq
 80294fc:	f000 000f 	andeq.w	r0, r0, #15
 8029500:	1100      	asrne	r0, r0, #4
 8029502:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029506:	b2c0      	uxtb	r0, r0
 8029508:	3401      	adds	r4, #1
 802950a:	d43f      	bmi.n	802958c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 802950c:	45a1      	cmp	r9, r4
 802950e:	dd3d      	ble.n	802958c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf4>
 8029510:	2f00      	cmp	r7, #0
 8029512:	f000 8093 	beq.w	802963c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8029516:	f1bc 0f00 	cmp.w	ip, #0
 802951a:	db35      	blt.n	8029588 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 802951c:	45e0      	cmp	r8, ip
 802951e:	dd33      	ble.n	8029588 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xf0>
 8029520:	eb03 090e 	add.w	r9, r3, lr
 8029524:	ea4f 0459 	mov.w	r4, r9, lsr #1
 8029528:	f019 0f01 	tst.w	r9, #1
 802952c:	5d14      	ldrb	r4, [r2, r4]
 802952e:	bf0c      	ite	eq
 8029530:	f004 040f 	andeq.w	r4, r4, #15
 8029534:	1124      	asrne	r4, r4, #4
 8029536:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802953a:	b2e4      	uxtb	r4, r4
 802953c:	f11c 0c01 	adds.w	ip, ip, #1
 8029540:	d427      	bmi.n	8029592 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8029542:	45e0      	cmp	r8, ip
 8029544:	dd25      	ble.n	8029592 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfa>
 8029546:	b335      	cbz	r5, 8029596 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xfe>
 8029548:	3301      	adds	r3, #1
 802954a:	449e      	add	lr, r3
 802954c:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8029550:	f01e 0f01 	tst.w	lr, #1
 8029554:	5cd2      	ldrb	r2, [r2, r3]
 8029556:	bf0c      	ite	eq
 8029558:	f002 020f 	andeq.w	r2, r2, #15
 802955c:	1112      	asrne	r2, r2, #4
 802955e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029562:	b2d3      	uxtb	r3, r2
 8029564:	2d0f      	cmp	r5, #15
 8029566:	d917      	bls.n	8029598 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x100>
 8029568:	4b37      	ldr	r3, [pc, #220]	; (8029648 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b0>)
 802956a:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 802956e:	4a37      	ldr	r2, [pc, #220]	; (802964c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b4>)
 8029570:	4837      	ldr	r0, [pc, #220]	; (8029650 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1b8>)
 8029572:	f000 fc6d 	bl	8029e50 <__assert_func>
 8029576:	2600      	movs	r6, #0
 8029578:	e7b1      	b.n	80294de <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x46>
 802957a:	2000      	movs	r0, #0
 802957c:	4606      	mov	r6, r0
 802957e:	e7c3      	b.n	8029508 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8029580:	2000      	movs	r0, #0
 8029582:	e7c1      	b.n	8029508 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8029584:	4628      	mov	r0, r5
 8029586:	e7bf      	b.n	8029508 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x70>
 8029588:	2400      	movs	r4, #0
 802958a:	e7d7      	b.n	802953c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xa4>
 802958c:	2300      	movs	r3, #0
 802958e:	461c      	mov	r4, r3
 8029590:	e7e8      	b.n	8029564 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8029592:	2300      	movs	r3, #0
 8029594:	e7e6      	b.n	8029564 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xcc>
 8029596:	462b      	mov	r3, r5
 8029598:	2f0f      	cmp	r7, #15
 802959a:	d8e5      	bhi.n	8029568 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 802959c:	b2ad      	uxth	r5, r5
 802959e:	b2bf      	uxth	r7, r7
 80295a0:	fb05 fc07 	mul.w	ip, r5, r7
 80295a4:	012d      	lsls	r5, r5, #4
 80295a6:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 80295aa:	f5c5 7280 	rsb	r2, r5, #256	; 0x100
 80295ae:	eba5 050c 	sub.w	r5, r5, ip
 80295b2:	b2bf      	uxth	r7, r7
 80295b4:	b2ad      	uxth	r5, r5
 80295b6:	1bd2      	subs	r2, r2, r7
 80295b8:	4368      	muls	r0, r5
 80295ba:	b292      	uxth	r2, r2
 80295bc:	fb06 0002 	mla	r0, r6, r2, r0
 80295c0:	fb07 0404 	mla	r4, r7, r4, r0
 80295c4:	fb0c 4303 	mla	r3, ip, r3, r4
 80295c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80295cc:	b3a3      	cbz	r3, 8029638 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 80295ce:	4a21      	ldr	r2, [pc, #132]	; (8029654 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1bc>)
 80295d0:	880e      	ldrh	r6, [r1, #0]
 80295d2:	6815      	ldr	r5, [r2, #0]
 80295d4:	b29a      	uxth	r2, r3
 80295d6:	1234      	asrs	r4, r6, #8
 80295d8:	43db      	mvns	r3, r3
 80295da:	f3c5 4007 	ubfx	r0, r5, #16, #8
 80295de:	f3c5 2707 	ubfx	r7, r5, #8, #8
 80295e2:	b2db      	uxtb	r3, r3
 80295e4:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80295e8:	fb10 f002 	smulbb	r0, r0, r2
 80295ec:	b2ed      	uxtb	r5, r5
 80295ee:	fb17 f702 	smulbb	r7, r7, r2
 80295f2:	fb04 0403 	mla	r4, r4, r3, r0
 80295f6:	10f0      	asrs	r0, r6, #3
 80295f8:	fb15 f202 	smulbb	r2, r5, r2
 80295fc:	00f6      	lsls	r6, r6, #3
 80295fe:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029602:	b2a4      	uxth	r4, r4
 8029604:	b2f6      	uxtb	r6, r6
 8029606:	fb00 7003 	mla	r0, r0, r3, r7
 802960a:	fb06 2303 	mla	r3, r6, r3, r2
 802960e:	b280      	uxth	r0, r0
 8029610:	b29a      	uxth	r2, r3
 8029612:	1c63      	adds	r3, r4, #1
 8029614:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8029618:	1c53      	adds	r3, r2, #1
 802961a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802961e:	1c42      	adds	r2, r0, #1
 8029620:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8029624:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8029628:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802962c:	0940      	lsrs	r0, r0, #5
 802962e:	4323      	orrs	r3, r4
 8029630:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029634:	4303      	orrs	r3, r0
 8029636:	800b      	strh	r3, [r1, #0]
 8029638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802963c:	2d0f      	cmp	r5, #15
 802963e:	d893      	bhi.n	8029568 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xd0>
 8029640:	463b      	mov	r3, r7
 8029642:	463c      	mov	r4, r7
 8029644:	e7aa      	b.n	802959c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x104>
 8029646:	bf00      	nop
 8029648:	08031892 	.word	0x08031892
 802964c:	08031e62 	.word	0x08031e62
 8029650:	08031916 	.word	0x08031916
 8029654:	2002b8a8 	.word	0x2002b8a8

08029658 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802965c:	ed2d 8b08 	vpush	{d8-d11}
 8029660:	b093      	sub	sp, #76	; 0x4c
 8029662:	461d      	mov	r5, r3
 8029664:	eeb0 aa40 	vmov.f32	s20, s0
 8029668:	920c      	str	r2, [sp, #48]	; 0x30
 802966a:	eef0 9a60 	vmov.f32	s19, s1
 802966e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8029670:	eeb0 9a41 	vmov.f32	s18, s2
 8029674:	9011      	str	r0, [sp, #68]	; 0x44
 8029676:	eeb0 8a62 	vmov.f32	s16, s5
 802967a:	6850      	ldr	r0, [r2, #4]
 802967c:	eef0 8a43 	vmov.f32	s17, s6
 8029680:	9107      	str	r1, [sp, #28]
 8029682:	eef0 ba44 	vmov.f32	s23, s8
 8029686:	6812      	ldr	r2, [r2, #0]
 8029688:	eeb0 ba64 	vmov.f32	s22, s9
 802968c:	eef0 aa45 	vmov.f32	s21, s10
 8029690:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8029694:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8029698:	fb00 1303 	mla	r3, r0, r3, r1
 802969c:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80296a0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80296a2:	689b      	ldr	r3, [r3, #8]
 80296a4:	3301      	adds	r3, #1
 80296a6:	f023 0301 	bic.w	r3, r3, #1
 80296aa:	9306      	str	r3, [sp, #24]
 80296ac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80296ae:	681f      	ldr	r7, [r3, #0]
 80296b0:	9b07      	ldr	r3, [sp, #28]
 80296b2:	2b00      	cmp	r3, #0
 80296b4:	dc03      	bgt.n	80296be <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80296b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80296b8:	2b00      	cmp	r3, #0
 80296ba:	f340 8267 	ble.w	8029b8c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 80296be:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80296c0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80296c4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80296c8:	1e48      	subs	r0, r1, #1
 80296ca:	f102 3cff 	add.w	ip, r2, #4294967295
 80296ce:	2d00      	cmp	r5, #0
 80296d0:	f340 80b7 	ble.w	8029842 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80296d4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80296d8:	ea4f 4326 	mov.w	r3, r6, asr #16
 80296dc:	d406      	bmi.n	80296ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80296de:	4586      	cmp	lr, r0
 80296e0:	da04      	bge.n	80296ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80296e2:	2b00      	cmp	r3, #0
 80296e4:	db02      	blt.n	80296ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80296e6:	4563      	cmp	r3, ip
 80296e8:	f2c0 80ac 	blt.w	8029844 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80296ec:	f11e 0e01 	adds.w	lr, lr, #1
 80296f0:	f100 809f 	bmi.w	8029832 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80296f4:	4571      	cmp	r1, lr
 80296f6:	f2c0 809c 	blt.w	8029832 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 80296fa:	3301      	adds	r3, #1
 80296fc:	f100 8099 	bmi.w	8029832 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8029700:	429a      	cmp	r2, r3
 8029702:	f2c0 8096 	blt.w	8029832 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8029706:	46c8      	mov	r8, r9
 8029708:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802970c:	9509      	str	r5, [sp, #36]	; 0x24
 802970e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029710:	2b00      	cmp	r3, #0
 8029712:	f340 80b5 	ble.w	8029880 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8029716:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802971a:	1430      	asrs	r0, r6, #16
 802971c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029720:	9308      	str	r3, [sp, #32]
 8029722:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8029724:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8029728:	1423      	asrs	r3, r4, #16
 802972a:	f100 813f 	bmi.w	80299ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802972e:	f10c 3bff 	add.w	fp, ip, #4294967295
 8029732:	455b      	cmp	r3, fp
 8029734:	f280 813a 	bge.w	80299ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029738:	2800      	cmp	r0, #0
 802973a:	f2c0 8137 	blt.w	80299ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802973e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029742:	4558      	cmp	r0, fp
 8029744:	f280 8132 	bge.w	80299ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8029748:	9a06      	ldr	r2, [sp, #24]
 802974a:	fb00 3302 	mla	r3, r0, r2, r3
 802974e:	0858      	lsrs	r0, r3, #1
 8029750:	07da      	lsls	r2, r3, #31
 8029752:	9a08      	ldr	r2, [sp, #32]
 8029754:	f817 c000 	ldrb.w	ip, [r7, r0]
 8029758:	bf54      	ite	pl
 802975a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802975e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8029762:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029766:	fa5f fc8c 	uxtb.w	ip, ip
 802976a:	2a00      	cmp	r2, #0
 802976c:	f000 80cc 	beq.w	8029908 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8029770:	1c58      	adds	r0, r3, #1
 8029772:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8029776:	07c0      	lsls	r0, r0, #31
 8029778:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802977c:	bf54      	ite	pl
 802977e:	f00e 0e0f 	andpl.w	lr, lr, #15
 8029782:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8029786:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802978a:	fa5f fe8e 	uxtb.w	lr, lr
 802978e:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8029792:	b1b9      	cbz	r1, 80297c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8029794:	4453      	add	r3, sl
 8029796:	0858      	lsrs	r0, r3, #1
 8029798:	07da      	lsls	r2, r3, #31
 802979a:	5c38      	ldrb	r0, [r7, r0]
 802979c:	bf54      	ite	pl
 802979e:	f000 000f 	andpl.w	r0, r0, #15
 80297a2:	1100      	asrmi	r0, r0, #4
 80297a4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80297a8:	b2c0      	uxtb	r0, r0
 80297aa:	900a      	str	r0, [sp, #40]	; 0x28
 80297ac:	1c58      	adds	r0, r3, #1
 80297ae:	0843      	lsrs	r3, r0, #1
 80297b0:	07c2      	lsls	r2, r0, #31
 80297b2:	5cfb      	ldrb	r3, [r7, r3]
 80297b4:	bf54      	ite	pl
 80297b6:	f003 030f 	andpl.w	r3, r3, #15
 80297ba:	111b      	asrmi	r3, r3, #4
 80297bc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80297c0:	b2db      	uxtb	r3, r3
 80297c2:	930e      	str	r3, [sp, #56]	; 0x38
 80297c4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80297c8:	b289      	uxth	r1, r1
 80297ca:	fb02 f301 	mul.w	r3, r2, r1
 80297ce:	0112      	lsls	r2, r2, #4
 80297d0:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80297d4:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80297d8:	1ad2      	subs	r2, r2, r3
 80297da:	b289      	uxth	r1, r1
 80297dc:	b292      	uxth	r2, r2
 80297de:	1a40      	subs	r0, r0, r1
 80297e0:	fa1f fe80 	uxth.w	lr, r0
 80297e4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80297e6:	4342      	muls	r2, r0
 80297e8:	fb0c 2c0e 	mla	ip, ip, lr, r2
 80297ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80297ee:	fb01 c102 	mla	r1, r1, r2, ip
 80297f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80297f4:	fb03 1302 	mla	r3, r3, r2, r1
 80297f8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80297fc:	2bff      	cmp	r3, #255	; 0xff
 80297fe:	f040 8094 	bne.w	802992a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8029802:	4bbf      	ldr	r3, [pc, #764]	; (8029b00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 8029804:	681a      	ldr	r2, [r3, #0]
 8029806:	4bbf      	ldr	r3, [pc, #764]	; (8029b04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8029808:	0951      	lsrs	r1, r2, #5
 802980a:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802980e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029812:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029816:	430b      	orrs	r3, r1
 8029818:	4313      	orrs	r3, r2
 802981a:	f8a8 3000 	strh.w	r3, [r8]
 802981e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029820:	f108 0802 	add.w	r8, r8, #2
 8029824:	441c      	add	r4, r3
 8029826:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029828:	441e      	add	r6, r3
 802982a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802982c:	3b01      	subs	r3, #1
 802982e:	9309      	str	r3, [sp, #36]	; 0x24
 8029830:	e76d      	b.n	802970e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8029832:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029834:	3d01      	subs	r5, #1
 8029836:	f109 0902 	add.w	r9, r9, #2
 802983a:	441c      	add	r4, r3
 802983c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802983e:	441e      	add	r6, r3
 8029840:	e745      	b.n	80296ce <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8029842:	d021      	beq.n	8029888 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8029844:	1e6b      	subs	r3, r5, #1
 8029846:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8029848:	fb00 4003 	mla	r0, r0, r3, r4
 802984c:	1400      	asrs	r0, r0, #16
 802984e:	f53f af5a 	bmi.w	8029706 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8029852:	3901      	subs	r1, #1
 8029854:	4288      	cmp	r0, r1
 8029856:	f6bf af56 	bge.w	8029706 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802985a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802985c:	fb01 6303 	mla	r3, r1, r3, r6
 8029860:	141b      	asrs	r3, r3, #16
 8029862:	f53f af50 	bmi.w	8029706 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8029866:	3a01      	subs	r2, #1
 8029868:	4293      	cmp	r3, r2
 802986a:	f6bf af4c 	bge.w	8029706 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 802986e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8029872:	46a8      	mov	r8, r5
 8029874:	46ce      	mov	lr, r9
 8029876:	9308      	str	r3, [sp, #32]
 8029878:	f1b8 0f00 	cmp.w	r8, #0
 802987c:	f300 80b6 	bgt.w	80299ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8029880:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8029884:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8029888:	9b07      	ldr	r3, [sp, #28]
 802988a:	2b00      	cmp	r3, #0
 802988c:	f340 817e 	ble.w	8029b8c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x534>
 8029890:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029894:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029896:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802989a:	ee79 9a8b 	vadd.f32	s19, s19, s22
 802989e:	eef0 6a48 	vmov.f32	s13, s16
 80298a2:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 80298a6:	ee39 9a2a 	vadd.f32	s18, s18, s21
 80298aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80298ae:	ee16 4a90 	vmov	r4, s13
 80298b2:	eef0 6a68 	vmov.f32	s13, s17
 80298b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80298ba:	ee16 6a90 	vmov	r6, s13
 80298be:	ee29 7aa7 	vmul.f32	s14, s19, s15
 80298c2:	ee69 7a27 	vmul.f32	s15, s18, s15
 80298c6:	ee37 8a48 	vsub.f32	s16, s14, s16
 80298ca:	ee77 8ae8 	vsub.f32	s17, s15, s17
 80298ce:	eebe 8ac8 	vcvt.s32.f32	s16, s16, #16
 80298d2:	eefe 8ac8 	vcvt.s32.f32	s17, s17, #16
 80298d6:	ee18 2a10 	vmov	r2, s16
 80298da:	eeb0 8a47 	vmov.f32	s16, s14
 80298de:	fb92 f3f3 	sdiv	r3, r2, r3
 80298e2:	ee18 2a90 	vmov	r2, s17
 80298e6:	9327      	str	r3, [sp, #156]	; 0x9c
 80298e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80298ea:	eef0 8a67 	vmov.f32	s17, s15
 80298ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80298f2:	9328      	str	r3, [sp, #160]	; 0xa0
 80298f4:	9b07      	ldr	r3, [sp, #28]
 80298f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80298f8:	3b01      	subs	r3, #1
 80298fa:	9307      	str	r3, [sp, #28]
 80298fc:	bf08      	it	eq
 80298fe:	4615      	moveq	r5, r2
 8029900:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029902:	bf18      	it	ne
 8029904:	461d      	movne	r5, r3
 8029906:	e6d3      	b.n	80296b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8029908:	2900      	cmp	r1, #0
 802990a:	f43f af5b 	beq.w	80297c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802990e:	eb0a 0003 	add.w	r0, sl, r3
 8029912:	0843      	lsrs	r3, r0, #1
 8029914:	07c0      	lsls	r0, r0, #31
 8029916:	5cfb      	ldrb	r3, [r7, r3]
 8029918:	bf54      	ite	pl
 802991a:	f003 030f 	andpl.w	r3, r3, #15
 802991e:	111b      	asrmi	r3, r3, #4
 8029920:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8029924:	b2db      	uxtb	r3, r3
 8029926:	930a      	str	r3, [sp, #40]	; 0x28
 8029928:	e74c      	b.n	80297c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 802992a:	2b00      	cmp	r3, #0
 802992c:	f43f af77 	beq.w	802981e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8029930:	4a73      	ldr	r2, [pc, #460]	; (8029b00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 8029932:	fa1f fe83 	uxth.w	lr, r3
 8029936:	f8b8 c000 	ldrh.w	ip, [r8]
 802993a:	43db      	mvns	r3, r3
 802993c:	6810      	ldr	r0, [r2, #0]
 802993e:	ea4f 212c 	mov.w	r1, ip, asr #8
 8029942:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8029946:	b2db      	uxtb	r3, r3
 8029948:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802994c:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8029950:	fb12 f20e 	smulbb	r2, r2, lr
 8029954:	b2c0      	uxtb	r0, r0
 8029956:	fb1b fb0e 	smulbb	fp, fp, lr
 802995a:	fb01 2103 	mla	r1, r1, r3, r2
 802995e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8029962:	fb10 fe0e 	smulbb	lr, r0, lr
 8029966:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802996a:	b289      	uxth	r1, r1
 802996c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029970:	fa5f fc8c 	uxtb.w	ip, ip
 8029974:	fb02 b203 	mla	r2, r2, r3, fp
 8029978:	1c48      	adds	r0, r1, #1
 802997a:	fb0c e303 	mla	r3, ip, r3, lr
 802997e:	b292      	uxth	r2, r2
 8029980:	b29b      	uxth	r3, r3
 8029982:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8029986:	f102 0b01 	add.w	fp, r2, #1
 802998a:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 802998e:	1c59      	adds	r1, r3, #1
 8029990:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8029994:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8029998:	0952      	lsrs	r2, r2, #5
 802999a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802999e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80299a2:	4301      	orrs	r1, r0
 80299a4:	4311      	orrs	r1, r2
 80299a6:	f8a8 1000 	strh.w	r1, [r8]
 80299aa:	e738      	b.n	802981e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80299ac:	f113 0b01 	adds.w	fp, r3, #1
 80299b0:	f53f af35 	bmi.w	802981e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80299b4:	45dc      	cmp	ip, fp
 80299b6:	f6ff af32 	blt.w	802981e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80299ba:	f110 0b01 	adds.w	fp, r0, #1
 80299be:	f53f af2e 	bmi.w	802981e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80299c2:	45de      	cmp	lr, fp
 80299c4:	f6ff af2b 	blt.w	802981e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80299c8:	9302      	str	r3, [sp, #8]
 80299ca:	fa0f f38e 	sxth.w	r3, lr
 80299ce:	9a08      	ldr	r2, [sp, #32]
 80299d0:	9301      	str	r3, [sp, #4]
 80299d2:	fa0f f38c 	sxth.w	r3, ip
 80299d6:	9105      	str	r1, [sp, #20]
 80299d8:	4641      	mov	r1, r8
 80299da:	9300      	str	r3, [sp, #0]
 80299dc:	4653      	mov	r3, sl
 80299de:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80299e2:	463a      	mov	r2, r7
 80299e4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80299e6:	f7ff fd57 	bl	8029498 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 80299ea:	e718      	b.n	802981e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80299ec:	1422      	asrs	r2, r4, #16
 80299ee:	9906      	ldr	r1, [sp, #24]
 80299f0:	1433      	asrs	r3, r6, #16
 80299f2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80299f6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80299fa:	fb01 2303 	mla	r3, r1, r3, r2
 80299fe:	085a      	lsrs	r2, r3, #1
 8029a00:	07d9      	lsls	r1, r3, #31
 8029a02:	5cba      	ldrb	r2, [r7, r2]
 8029a04:	bf54      	ite	pl
 8029a06:	f002 020f 	andpl.w	r2, r2, #15
 8029a0a:	1112      	asrmi	r2, r2, #4
 8029a0c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029a10:	b2d2      	uxtb	r2, r2
 8029a12:	2800      	cmp	r0, #0
 8029a14:	d063      	beq.n	8029ade <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8029a16:	f103 0a01 	add.w	sl, r3, #1
 8029a1a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8029a1e:	f01a 0f01 	tst.w	sl, #1
 8029a22:	5c79      	ldrb	r1, [r7, r1]
 8029a24:	bf0c      	ite	eq
 8029a26:	f001 010f 	andeq.w	r1, r1, #15
 8029a2a:	1109      	asrne	r1, r1, #4
 8029a2c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029a30:	b2c9      	uxtb	r1, r1
 8029a32:	910f      	str	r1, [sp, #60]	; 0x3c
 8029a34:	f1bc 0f00 	cmp.w	ip, #0
 8029a38:	d01a      	beq.n	8029a70 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8029a3a:	9908      	ldr	r1, [sp, #32]
 8029a3c:	440b      	add	r3, r1
 8029a3e:	0859      	lsrs	r1, r3, #1
 8029a40:	f013 0f01 	tst.w	r3, #1
 8029a44:	f103 0301 	add.w	r3, r3, #1
 8029a48:	5c79      	ldrb	r1, [r7, r1]
 8029a4a:	bf0c      	ite	eq
 8029a4c:	f001 010f 	andeq.w	r1, r1, #15
 8029a50:	1109      	asrne	r1, r1, #4
 8029a52:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029a56:	b2c9      	uxtb	r1, r1
 8029a58:	910b      	str	r1, [sp, #44]	; 0x2c
 8029a5a:	0859      	lsrs	r1, r3, #1
 8029a5c:	07db      	lsls	r3, r3, #31
 8029a5e:	5c79      	ldrb	r1, [r7, r1]
 8029a60:	bf54      	ite	pl
 8029a62:	f001 010f 	andpl.w	r1, r1, #15
 8029a66:	1109      	asrmi	r1, r1, #4
 8029a68:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029a6c:	b2c9      	uxtb	r1, r1
 8029a6e:	9110      	str	r1, [sp, #64]	; 0x40
 8029a70:	b280      	uxth	r0, r0
 8029a72:	fa1f fc8c 	uxth.w	ip, ip
 8029a76:	fb00 f30c 	mul.w	r3, r0, ip
 8029a7a:	0100      	lsls	r0, r0, #4
 8029a7c:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8029a80:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 8029a84:	1ac0      	subs	r0, r0, r3
 8029a86:	fa1f fc8c 	uxth.w	ip, ip
 8029a8a:	b280      	uxth	r0, r0
 8029a8c:	eba1 010c 	sub.w	r1, r1, ip
 8029a90:	fa1f fa81 	uxth.w	sl, r1
 8029a94:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8029a96:	4348      	muls	r0, r1
 8029a98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8029a9a:	fb02 020a 	mla	r2, r2, sl, r0
 8029a9e:	fb0c 2c01 	mla	ip, ip, r1, r2
 8029aa2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8029aa4:	fb03 c302 	mla	r3, r3, r2, ip
 8029aa8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029aac:	2bff      	cmp	r3, #255	; 0xff
 8029aae:	d12b      	bne.n	8029b08 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8029ab0:	4b13      	ldr	r3, [pc, #76]	; (8029b00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>)
 8029ab2:	681a      	ldr	r2, [r3, #0]
 8029ab4:	4b13      	ldr	r3, [pc, #76]	; (8029b04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8029ab6:	0951      	lsrs	r1, r2, #5
 8029ab8:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8029abc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029ac0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029ac4:	430b      	orrs	r3, r1
 8029ac6:	4313      	orrs	r3, r2
 8029ac8:	f8ae 3000 	strh.w	r3, [lr]
 8029acc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8029ace:	f10e 0e02 	add.w	lr, lr, #2
 8029ad2:	f108 38ff 	add.w	r8, r8, #4294967295
 8029ad6:	441c      	add	r4, r3
 8029ad8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029ada:	441e      	add	r6, r3
 8029adc:	e6cc      	b.n	8029878 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8029ade:	f1bc 0f00 	cmp.w	ip, #0
 8029ae2:	d0c5      	beq.n	8029a70 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8029ae4:	9908      	ldr	r1, [sp, #32]
 8029ae6:	440b      	add	r3, r1
 8029ae8:	0859      	lsrs	r1, r3, #1
 8029aea:	07db      	lsls	r3, r3, #31
 8029aec:	5c79      	ldrb	r1, [r7, r1]
 8029aee:	bf54      	ite	pl
 8029af0:	f001 010f 	andpl.w	r1, r1, #15
 8029af4:	1109      	asrmi	r1, r1, #4
 8029af6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029afa:	b2c9      	uxtb	r1, r1
 8029afc:	910b      	str	r1, [sp, #44]	; 0x2c
 8029afe:	e7b7      	b.n	8029a70 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8029b00:	2002b8a8 	.word	0x2002b8a8
 8029b04:	fffff800 	.word	0xfffff800
 8029b08:	2b00      	cmp	r3, #0
 8029b0a:	d0df      	beq.n	8029acc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 8029b0c:	4a22      	ldr	r2, [pc, #136]	; (8029b98 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x540>)
 8029b0e:	fa1f fa83 	uxth.w	sl, r3
 8029b12:	f8be c000 	ldrh.w	ip, [lr]
 8029b16:	43db      	mvns	r3, r3
 8029b18:	6810      	ldr	r0, [r2, #0]
 8029b1a:	ea4f 212c 	mov.w	r1, ip, asr #8
 8029b1e:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8029b22:	b2db      	uxtb	r3, r3
 8029b24:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029b28:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8029b2c:	fb12 f20a 	smulbb	r2, r2, sl
 8029b30:	b2c0      	uxtb	r0, r0
 8029b32:	fb1b fb0a 	smulbb	fp, fp, sl
 8029b36:	fb01 2103 	mla	r1, r1, r3, r2
 8029b3a:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8029b3e:	fb10 f00a 	smulbb	r0, r0, sl
 8029b42:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8029b46:	b289      	uxth	r1, r1
 8029b48:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029b4c:	fa5f fc8c 	uxtb.w	ip, ip
 8029b50:	fb02 b203 	mla	r2, r2, r3, fp
 8029b54:	fb0c 0003 	mla	r0, ip, r3, r0
 8029b58:	1c4b      	adds	r3, r1, #1
 8029b5a:	b292      	uxth	r2, r2
 8029b5c:	b280      	uxth	r0, r0
 8029b5e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029b62:	f100 0b01 	add.w	fp, r0, #1
 8029b66:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8029b6a:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8029b6e:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8029b72:	ea4b 0101 	orr.w	r1, fp, r1
 8029b76:	f102 0b01 	add.w	fp, r2, #1
 8029b7a:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8029b7e:	0952      	lsrs	r2, r2, #5
 8029b80:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029b84:	4311      	orrs	r1, r2
 8029b86:	f8ae 1000 	strh.w	r1, [lr]
 8029b8a:	e79f      	b.n	8029acc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x474>
 8029b8c:	b013      	add	sp, #76	; 0x4c
 8029b8e:	ecbd 8b08 	vpop	{d8-d11}
 8029b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029b96:	bf00      	nop
 8029b98:	2002b8a8 	.word	0x2002b8a8

08029b9c <CRC_Lock>:
 8029b9c:	4a20      	ldr	r2, [pc, #128]	; (8029c20 <CRC_Lock+0x84>)
 8029b9e:	b530      	push	{r4, r5, lr}
 8029ba0:	6813      	ldr	r3, [r2, #0]
 8029ba2:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8029ba6:	f24c 2540 	movw	r5, #49728	; 0xc240
 8029baa:	f023 0301 	bic.w	r3, r3, #1
 8029bae:	6013      	str	r3, [r2, #0]
 8029bb0:	4b1c      	ldr	r3, [pc, #112]	; (8029c24 <CRC_Lock+0x88>)
 8029bb2:	681a      	ldr	r2, [r3, #0]
 8029bb4:	4022      	ands	r2, r4
 8029bb6:	42aa      	cmp	r2, r5
 8029bb8:	d005      	beq.n	8029bc6 <CRC_Lock+0x2a>
 8029bba:	681b      	ldr	r3, [r3, #0]
 8029bbc:	f24c 2270 	movw	r2, #49776	; 0xc270
 8029bc0:	4023      	ands	r3, r4
 8029bc2:	4293      	cmp	r3, r2
 8029bc4:	d124      	bne.n	8029c10 <CRC_Lock+0x74>
 8029bc6:	4b18      	ldr	r3, [pc, #96]	; (8029c28 <CRC_Lock+0x8c>)
 8029bc8:	681b      	ldr	r3, [r3, #0]
 8029bca:	bb0b      	cbnz	r3, 8029c10 <CRC_Lock+0x74>
 8029bcc:	4b17      	ldr	r3, [pc, #92]	; (8029c2c <CRC_Lock+0x90>)
 8029bce:	681a      	ldr	r2, [r3, #0]
 8029bd0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029bd4:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8029bd8:	d00d      	beq.n	8029bf6 <CRC_Lock+0x5a>
 8029bda:	681a      	ldr	r2, [r3, #0]
 8029bdc:	f240 4483 	movw	r4, #1155	; 0x483
 8029be0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029be4:	42a2      	cmp	r2, r4
 8029be6:	d006      	beq.n	8029bf6 <CRC_Lock+0x5a>
 8029be8:	681b      	ldr	r3, [r3, #0]
 8029bea:	f240 4285 	movw	r2, #1157	; 0x485
 8029bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8029bf2:	4293      	cmp	r3, r2
 8029bf4:	d10c      	bne.n	8029c10 <CRC_Lock+0x74>
 8029bf6:	4b0e      	ldr	r3, [pc, #56]	; (8029c30 <CRC_Lock+0x94>)
 8029bf8:	2201      	movs	r2, #1
 8029bfa:	601a      	str	r2, [r3, #0]
 8029bfc:	681a      	ldr	r2, [r3, #0]
 8029bfe:	2a00      	cmp	r2, #0
 8029c00:	d1fc      	bne.n	8029bfc <CRC_Lock+0x60>
 8029c02:	4b0c      	ldr	r3, [pc, #48]	; (8029c34 <CRC_Lock+0x98>)
 8029c04:	6018      	str	r0, [r3, #0]
 8029c06:	6818      	ldr	r0, [r3, #0]
 8029c08:	1a43      	subs	r3, r0, r1
 8029c0a:	4258      	negs	r0, r3
 8029c0c:	4158      	adcs	r0, r3
 8029c0e:	bd30      	pop	{r4, r5, pc}
 8029c10:	4b09      	ldr	r3, [pc, #36]	; (8029c38 <CRC_Lock+0x9c>)
 8029c12:	2201      	movs	r2, #1
 8029c14:	601a      	str	r2, [r3, #0]
 8029c16:	681a      	ldr	r2, [r3, #0]
 8029c18:	2a00      	cmp	r2, #0
 8029c1a:	d1fc      	bne.n	8029c16 <CRC_Lock+0x7a>
 8029c1c:	4b07      	ldr	r3, [pc, #28]	; (8029c3c <CRC_Lock+0xa0>)
 8029c1e:	e7f1      	b.n	8029c04 <CRC_Lock+0x68>
 8029c20:	e0002000 	.word	0xe0002000
 8029c24:	e000ed00 	.word	0xe000ed00
 8029c28:	e0042000 	.word	0xe0042000
 8029c2c:	5c001000 	.word	0x5c001000
 8029c30:	58024c08 	.word	0x58024c08
 8029c34:	58024c00 	.word	0x58024c00
 8029c38:	40023008 	.word	0x40023008
 8029c3c:	40023000 	.word	0x40023000

08029c40 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8029c40:	6101      	str	r1, [r0, #16]
 8029c42:	4770      	bx	lr

08029c44 <_ZN8touchgfx8Gestures4tickEv>:
 8029c44:	7b83      	ldrb	r3, [r0, #14]
 8029c46:	b14b      	cbz	r3, 8029c5c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8029c48:	8903      	ldrh	r3, [r0, #8]
 8029c4a:	3301      	adds	r3, #1
 8029c4c:	b29b      	uxth	r3, r3
 8029c4e:	2b07      	cmp	r3, #7
 8029c50:	8103      	strh	r3, [r0, #8]
 8029c52:	bf81      	itttt	hi
 8029c54:	2300      	movhi	r3, #0
 8029c56:	8143      	strhhi	r3, [r0, #10]
 8029c58:	8183      	strhhi	r3, [r0, #12]
 8029c5a:	7383      	strbhi	r3, [r0, #14]
 8029c5c:	4770      	bx	lr
	...

08029c60 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8029c60:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8029c64:	4604      	mov	r4, r0
 8029c66:	4698      	mov	r8, r3
 8029c68:	8880      	ldrh	r0, [r0, #4]
 8029c6a:	4617      	mov	r7, r2
 8029c6c:	4b1d      	ldr	r3, [pc, #116]	; (8029ce4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8029c6e:	460e      	mov	r6, r1
 8029c70:	f8ad 0006 	strh.w	r0, [sp, #6]
 8029c74:	eba8 0000 	sub.w	r0, r8, r0
 8029c78:	9300      	str	r3, [sp, #0]
 8029c7a:	2300      	movs	r3, #0
 8029c7c:	b280      	uxth	r0, r0
 8029c7e:	8aa2      	ldrh	r2, [r4, #20]
 8029c80:	f88d 3004 	strb.w	r3, [sp, #4]
 8029c84:	b203      	sxth	r3, r0
 8029c86:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8029c8a:	88e1      	ldrh	r1, [r4, #6]
 8029c8c:	2b00      	cmp	r3, #0
 8029c8e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8029c92:	f8ad 1008 	strh.w	r1, [sp, #8]
 8029c96:	bfb8      	it	lt
 8029c98:	4240      	neglt	r0, r0
 8029c9a:	f8ad 500c 	strh.w	r5, [sp, #12]
 8029c9e:	bfb8      	it	lt
 8029ca0:	b203      	sxthlt	r3, r0
 8029ca2:	4293      	cmp	r3, r2
 8029ca4:	dc08      	bgt.n	8029cb8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x58>
 8029ca6:	1a69      	subs	r1, r5, r1
 8029ca8:	b289      	uxth	r1, r1
 8029caa:	b20b      	sxth	r3, r1
 8029cac:	2b00      	cmp	r3, #0
 8029cae:	bfbc      	itt	lt
 8029cb0:	4249      	neglt	r1, r1
 8029cb2:	b20b      	sxthlt	r3, r1
 8029cb4:	429a      	cmp	r2, r3
 8029cb6:	da13      	bge.n	8029ce0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x80>
 8029cb8:	6920      	ldr	r0, [r4, #16]
 8029cba:	4669      	mov	r1, sp
 8029cbc:	eba8 0606 	sub.w	r6, r8, r6
 8029cc0:	1bef      	subs	r7, r5, r7
 8029cc2:	6803      	ldr	r3, [r0, #0]
 8029cc4:	685b      	ldr	r3, [r3, #4]
 8029cc6:	4798      	blx	r3
 8029cc8:	2300      	movs	r3, #0
 8029cca:	2001      	movs	r0, #1
 8029ccc:	8166      	strh	r6, [r4, #10]
 8029cce:	8123      	strh	r3, [r4, #8]
 8029cd0:	81a7      	strh	r7, [r4, #12]
 8029cd2:	f8a4 8004 	strh.w	r8, [r4, #4]
 8029cd6:	80e5      	strh	r5, [r4, #6]
 8029cd8:	73a0      	strb	r0, [r4, #14]
 8029cda:	b004      	add	sp, #16
 8029cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029ce0:	2000      	movs	r0, #0
 8029ce2:	e7fa      	b.n	8029cda <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7a>
 8029ce4:	08030d64 	.word	0x08030d64

08029ce8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8029ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029cea:	461e      	mov	r6, r3
 8029cec:	1e4b      	subs	r3, r1, #1
 8029cee:	b085      	sub	sp, #20
 8029cf0:	4604      	mov	r4, r0
 8029cf2:	2b01      	cmp	r3, #1
 8029cf4:	460d      	mov	r5, r1
 8029cf6:	4617      	mov	r7, r2
 8029cf8:	d84b      	bhi.n	8029d92 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8029cfa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8029cfe:	1cd3      	adds	r3, r2, #3
 8029d00:	b29b      	uxth	r3, r3
 8029d02:	2b06      	cmp	r3, #6
 8029d04:	d916      	bls.n	8029d34 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8029d06:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8029da8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8029d0a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029d0e:	f8cd c004 	str.w	ip, [sp, #4]
 8029d12:	f04f 0c00 	mov.w	ip, #0
 8029d16:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8029d1a:	6900      	ldr	r0, [r0, #16]
 8029d1c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029d20:	a901      	add	r1, sp, #4
 8029d22:	f88d c008 	strb.w	ip, [sp, #8]
 8029d26:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029d2a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029d2e:	6803      	ldr	r3, [r0, #0]
 8029d30:	689b      	ldr	r3, [r3, #8]
 8029d32:	4798      	blx	r3
 8029d34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029d38:	1cd3      	adds	r3, r2, #3
 8029d3a:	b29b      	uxth	r3, r3
 8029d3c:	2b06      	cmp	r3, #6
 8029d3e:	d916      	bls.n	8029d6e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029d40:	f8df c064 	ldr.w	ip, [pc, #100]	; 8029da8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8029d44:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029d48:	f8cd c004 	str.w	ip, [sp, #4]
 8029d4c:	f04f 0c01 	mov.w	ip, #1
 8029d50:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8029d54:	6920      	ldr	r0, [r4, #16]
 8029d56:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029d5a:	a901      	add	r1, sp, #4
 8029d5c:	f88d c008 	strb.w	ip, [sp, #8]
 8029d60:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029d64:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029d68:	6803      	ldr	r3, [r0, #0]
 8029d6a:	689b      	ldr	r3, [r3, #8]
 8029d6c:	4798      	blx	r3
 8029d6e:	4b0d      	ldr	r3, [pc, #52]	; (8029da4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8029d70:	a901      	add	r1, sp, #4
 8029d72:	6920      	ldr	r0, [r4, #16]
 8029d74:	9301      	str	r3, [sp, #4]
 8029d76:	2300      	movs	r3, #0
 8029d78:	f88d 5008 	strb.w	r5, [sp, #8]
 8029d7c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8029d80:	f8ad 600c 	strh.w	r6, [sp, #12]
 8029d84:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029d88:	6803      	ldr	r3, [r0, #0]
 8029d8a:	681b      	ldr	r3, [r3, #0]
 8029d8c:	4798      	blx	r3
 8029d8e:	b005      	add	sp, #20
 8029d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029d92:	2900      	cmp	r1, #0
 8029d94:	d1eb      	bne.n	8029d6e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029d96:	80a2      	strh	r2, [r4, #4]
 8029d98:	80c6      	strh	r6, [r0, #6]
 8029d9a:	60a1      	str	r1, [r4, #8]
 8029d9c:	81a1      	strh	r1, [r4, #12]
 8029d9e:	73a1      	strb	r1, [r4, #14]
 8029da0:	e7e5      	b.n	8029d6e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029da2:	bf00      	nop
 8029da4:	08030d50 	.word	0x08030d50
 8029da8:	08030d78 	.word	0x08030d78

08029dac <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8029dac:	790b      	ldrb	r3, [r1, #4]
 8029dae:	2b00      	cmp	r3, #0
 8029db0:	bf0c      	ite	eq
 8029db2:	2301      	moveq	r3, #1
 8029db4:	2300      	movne	r3, #0
 8029db6:	b570      	push	{r4, r5, r6, lr}
 8029db8:	4604      	mov	r4, r0
 8029dba:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8029dbe:	460e      	mov	r6, r1
 8029dc0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8029dc4:	d109      	bne.n	8029dda <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8029dc6:	b14d      	cbz	r5, 8029ddc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8029dc8:	7933      	ldrb	r3, [r6, #4]
 8029dca:	2b01      	cmp	r3, #1
 8029dcc:	d10c      	bne.n	8029de8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8029dce:	6823      	ldr	r3, [r4, #0]
 8029dd0:	4620      	mov	r0, r4
 8029dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8029dd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8029dd8:	4718      	bx	r3
 8029dda:	b12d      	cbz	r5, 8029de8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8029ddc:	6823      	ldr	r3, [r4, #0]
 8029dde:	4620      	mov	r0, r4
 8029de0:	695b      	ldr	r3, [r3, #20]
 8029de2:	4798      	blx	r3
 8029de4:	2d00      	cmp	r5, #0
 8029de6:	d1ef      	bne.n	8029dc8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8029de8:	bd70      	pop	{r4, r5, r6, pc}

08029dea <__aeabi_atexit>:
 8029dea:	460b      	mov	r3, r1
 8029dec:	4601      	mov	r1, r0
 8029dee:	4618      	mov	r0, r3
 8029df0:	f000 b852 	b.w	8029e98 <__cxa_atexit>

08029df4 <_ZdlPvj>:
 8029df4:	f000 b812 	b.w	8029e1c <_ZdlPv>

08029df8 <__cxa_guard_acquire>:
 8029df8:	6803      	ldr	r3, [r0, #0]
 8029dfa:	07db      	lsls	r3, r3, #31
 8029dfc:	d406      	bmi.n	8029e0c <__cxa_guard_acquire+0x14>
 8029dfe:	7843      	ldrb	r3, [r0, #1]
 8029e00:	b103      	cbz	r3, 8029e04 <__cxa_guard_acquire+0xc>
 8029e02:	deff      	udf	#255	; 0xff
 8029e04:	2301      	movs	r3, #1
 8029e06:	7043      	strb	r3, [r0, #1]
 8029e08:	4618      	mov	r0, r3
 8029e0a:	4770      	bx	lr
 8029e0c:	2000      	movs	r0, #0
 8029e0e:	4770      	bx	lr

08029e10 <__cxa_guard_release>:
 8029e10:	2301      	movs	r3, #1
 8029e12:	6003      	str	r3, [r0, #0]
 8029e14:	4770      	bx	lr

08029e16 <__cxa_pure_virtual>:
 8029e16:	b508      	push	{r3, lr}
 8029e18:	f000 f80e 	bl	8029e38 <_ZSt9terminatev>

08029e1c <_ZdlPv>:
 8029e1c:	f000 b892 	b.w	8029f44 <free>

08029e20 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8029e20:	b508      	push	{r3, lr}
 8029e22:	4780      	blx	r0
 8029e24:	f000 f80d 	bl	8029e42 <abort>

08029e28 <_ZSt13get_terminatev>:
 8029e28:	4b02      	ldr	r3, [pc, #8]	; (8029e34 <_ZSt13get_terminatev+0xc>)
 8029e2a:	6818      	ldr	r0, [r3, #0]
 8029e2c:	f3bf 8f5b 	dmb	ish
 8029e30:	4770      	bx	lr
 8029e32:	bf00      	nop
 8029e34:	200000b8 	.word	0x200000b8

08029e38 <_ZSt9terminatev>:
 8029e38:	b508      	push	{r3, lr}
 8029e3a:	f7ff fff5 	bl	8029e28 <_ZSt13get_terminatev>
 8029e3e:	f7ff ffef 	bl	8029e20 <_ZN10__cxxabiv111__terminateEPFvvE>

08029e42 <abort>:
 8029e42:	b508      	push	{r3, lr}
 8029e44:	2006      	movs	r0, #6
 8029e46:	f000 fc6b 	bl	802a720 <raise>
 8029e4a:	2001      	movs	r0, #1
 8029e4c:	f7d7 fd1e 	bl	800188c <_exit>

08029e50 <__assert_func>:
 8029e50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8029e52:	4614      	mov	r4, r2
 8029e54:	461a      	mov	r2, r3
 8029e56:	4b09      	ldr	r3, [pc, #36]	; (8029e7c <__assert_func+0x2c>)
 8029e58:	681b      	ldr	r3, [r3, #0]
 8029e5a:	4605      	mov	r5, r0
 8029e5c:	68d8      	ldr	r0, [r3, #12]
 8029e5e:	b14c      	cbz	r4, 8029e74 <__assert_func+0x24>
 8029e60:	4b07      	ldr	r3, [pc, #28]	; (8029e80 <__assert_func+0x30>)
 8029e62:	9100      	str	r1, [sp, #0]
 8029e64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8029e68:	4906      	ldr	r1, [pc, #24]	; (8029e84 <__assert_func+0x34>)
 8029e6a:	462b      	mov	r3, r5
 8029e6c:	f000 f828 	bl	8029ec0 <fiprintf>
 8029e70:	f7ff ffe7 	bl	8029e42 <abort>
 8029e74:	4b04      	ldr	r3, [pc, #16]	; (8029e88 <__assert_func+0x38>)
 8029e76:	461c      	mov	r4, r3
 8029e78:	e7f3      	b.n	8029e62 <__assert_func+0x12>
 8029e7a:	bf00      	nop
 8029e7c:	200000bc 	.word	0x200000bc
 8029e80:	0803209d 	.word	0x0803209d
 8029e84:	080320aa 	.word	0x080320aa
 8029e88:	080320d8 	.word	0x080320d8

08029e8c <atexit>:
 8029e8c:	2300      	movs	r3, #0
 8029e8e:	4601      	mov	r1, r0
 8029e90:	461a      	mov	r2, r3
 8029e92:	4618      	mov	r0, r3
 8029e94:	f000 bd52 	b.w	802a93c <__register_exitproc>

08029e98 <__cxa_atexit>:
 8029e98:	b510      	push	{r4, lr}
 8029e9a:	4c05      	ldr	r4, [pc, #20]	; (8029eb0 <__cxa_atexit+0x18>)
 8029e9c:	4613      	mov	r3, r2
 8029e9e:	b12c      	cbz	r4, 8029eac <__cxa_atexit+0x14>
 8029ea0:	460a      	mov	r2, r1
 8029ea2:	4601      	mov	r1, r0
 8029ea4:	2002      	movs	r0, #2
 8029ea6:	f000 fd49 	bl	802a93c <__register_exitproc>
 8029eaa:	bd10      	pop	{r4, pc}
 8029eac:	4620      	mov	r0, r4
 8029eae:	e7fc      	b.n	8029eaa <__cxa_atexit+0x12>
 8029eb0:	0802a93d 	.word	0x0802a93d

08029eb4 <__errno>:
 8029eb4:	4b01      	ldr	r3, [pc, #4]	; (8029ebc <__errno+0x8>)
 8029eb6:	6818      	ldr	r0, [r3, #0]
 8029eb8:	4770      	bx	lr
 8029eba:	bf00      	nop
 8029ebc:	200000bc 	.word	0x200000bc

08029ec0 <fiprintf>:
 8029ec0:	b40e      	push	{r1, r2, r3}
 8029ec2:	b503      	push	{r0, r1, lr}
 8029ec4:	4601      	mov	r1, r0
 8029ec6:	ab03      	add	r3, sp, #12
 8029ec8:	4805      	ldr	r0, [pc, #20]	; (8029ee0 <fiprintf+0x20>)
 8029eca:	f853 2b04 	ldr.w	r2, [r3], #4
 8029ece:	6800      	ldr	r0, [r0, #0]
 8029ed0:	9301      	str	r3, [sp, #4]
 8029ed2:	f000 f929 	bl	802a128 <_vfiprintf_r>
 8029ed6:	b002      	add	sp, #8
 8029ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8029edc:	b003      	add	sp, #12
 8029ede:	4770      	bx	lr
 8029ee0:	200000bc 	.word	0x200000bc

08029ee4 <__libc_init_array>:
 8029ee4:	b570      	push	{r4, r5, r6, lr}
 8029ee6:	4d0d      	ldr	r5, [pc, #52]	; (8029f1c <__libc_init_array+0x38>)
 8029ee8:	4c0d      	ldr	r4, [pc, #52]	; (8029f20 <__libc_init_array+0x3c>)
 8029eea:	1b64      	subs	r4, r4, r5
 8029eec:	10a4      	asrs	r4, r4, #2
 8029eee:	2600      	movs	r6, #0
 8029ef0:	42a6      	cmp	r6, r4
 8029ef2:	d109      	bne.n	8029f08 <__libc_init_array+0x24>
 8029ef4:	4d0b      	ldr	r5, [pc, #44]	; (8029f24 <__libc_init_array+0x40>)
 8029ef6:	4c0c      	ldr	r4, [pc, #48]	; (8029f28 <__libc_init_array+0x44>)
 8029ef8:	f001 f9fa 	bl	802b2f0 <_init>
 8029efc:	1b64      	subs	r4, r4, r5
 8029efe:	10a4      	asrs	r4, r4, #2
 8029f00:	2600      	movs	r6, #0
 8029f02:	42a6      	cmp	r6, r4
 8029f04:	d105      	bne.n	8029f12 <__libc_init_array+0x2e>
 8029f06:	bd70      	pop	{r4, r5, r6, pc}
 8029f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8029f0c:	4798      	blx	r3
 8029f0e:	3601      	adds	r6, #1
 8029f10:	e7ee      	b.n	8029ef0 <__libc_init_array+0xc>
 8029f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8029f16:	4798      	blx	r3
 8029f18:	3601      	adds	r6, #1
 8029f1a:	e7f2      	b.n	8029f02 <__libc_init_array+0x1e>
 8029f1c:	08032198 	.word	0x08032198
 8029f20:	08032198 	.word	0x08032198
 8029f24:	08032198 	.word	0x08032198
 8029f28:	080321b4 	.word	0x080321b4

08029f2c <__retarget_lock_init_recursive>:
 8029f2c:	4770      	bx	lr

08029f2e <__retarget_lock_acquire_recursive>:
 8029f2e:	4770      	bx	lr

08029f30 <__retarget_lock_release>:
 8029f30:	4770      	bx	lr

08029f32 <__retarget_lock_release_recursive>:
 8029f32:	4770      	bx	lr

08029f34 <malloc>:
 8029f34:	4b02      	ldr	r3, [pc, #8]	; (8029f40 <malloc+0xc>)
 8029f36:	4601      	mov	r1, r0
 8029f38:	6818      	ldr	r0, [r3, #0]
 8029f3a:	f000 b871 	b.w	802a020 <_malloc_r>
 8029f3e:	bf00      	nop
 8029f40:	200000bc 	.word	0x200000bc

08029f44 <free>:
 8029f44:	4b02      	ldr	r3, [pc, #8]	; (8029f50 <free+0xc>)
 8029f46:	4601      	mov	r1, r0
 8029f48:	6818      	ldr	r0, [r3, #0]
 8029f4a:	f000 b819 	b.w	8029f80 <_free_r>
 8029f4e:	bf00      	nop
 8029f50:	200000bc 	.word	0x200000bc

08029f54 <memcpy>:
 8029f54:	440a      	add	r2, r1
 8029f56:	4291      	cmp	r1, r2
 8029f58:	f100 33ff 	add.w	r3, r0, #4294967295
 8029f5c:	d100      	bne.n	8029f60 <memcpy+0xc>
 8029f5e:	4770      	bx	lr
 8029f60:	b510      	push	{r4, lr}
 8029f62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029f66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8029f6a:	4291      	cmp	r1, r2
 8029f6c:	d1f9      	bne.n	8029f62 <memcpy+0xe>
 8029f6e:	bd10      	pop	{r4, pc}

08029f70 <memset>:
 8029f70:	4402      	add	r2, r0
 8029f72:	4603      	mov	r3, r0
 8029f74:	4293      	cmp	r3, r2
 8029f76:	d100      	bne.n	8029f7a <memset+0xa>
 8029f78:	4770      	bx	lr
 8029f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8029f7e:	e7f9      	b.n	8029f74 <memset+0x4>

08029f80 <_free_r>:
 8029f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029f82:	2900      	cmp	r1, #0
 8029f84:	d048      	beq.n	802a018 <_free_r+0x98>
 8029f86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029f8a:	9001      	str	r0, [sp, #4]
 8029f8c:	2b00      	cmp	r3, #0
 8029f8e:	f1a1 0404 	sub.w	r4, r1, #4
 8029f92:	bfb8      	it	lt
 8029f94:	18e4      	addlt	r4, r4, r3
 8029f96:	f000 ff69 	bl	802ae6c <__malloc_lock>
 8029f9a:	4a20      	ldr	r2, [pc, #128]	; (802a01c <_free_r+0x9c>)
 8029f9c:	9801      	ldr	r0, [sp, #4]
 8029f9e:	6813      	ldr	r3, [r2, #0]
 8029fa0:	4615      	mov	r5, r2
 8029fa2:	b933      	cbnz	r3, 8029fb2 <_free_r+0x32>
 8029fa4:	6063      	str	r3, [r4, #4]
 8029fa6:	6014      	str	r4, [r2, #0]
 8029fa8:	b003      	add	sp, #12
 8029faa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029fae:	f000 bf63 	b.w	802ae78 <__malloc_unlock>
 8029fb2:	42a3      	cmp	r3, r4
 8029fb4:	d90b      	bls.n	8029fce <_free_r+0x4e>
 8029fb6:	6821      	ldr	r1, [r4, #0]
 8029fb8:	1862      	adds	r2, r4, r1
 8029fba:	4293      	cmp	r3, r2
 8029fbc:	bf04      	itt	eq
 8029fbe:	681a      	ldreq	r2, [r3, #0]
 8029fc0:	685b      	ldreq	r3, [r3, #4]
 8029fc2:	6063      	str	r3, [r4, #4]
 8029fc4:	bf04      	itt	eq
 8029fc6:	1852      	addeq	r2, r2, r1
 8029fc8:	6022      	streq	r2, [r4, #0]
 8029fca:	602c      	str	r4, [r5, #0]
 8029fcc:	e7ec      	b.n	8029fa8 <_free_r+0x28>
 8029fce:	461a      	mov	r2, r3
 8029fd0:	685b      	ldr	r3, [r3, #4]
 8029fd2:	b10b      	cbz	r3, 8029fd8 <_free_r+0x58>
 8029fd4:	42a3      	cmp	r3, r4
 8029fd6:	d9fa      	bls.n	8029fce <_free_r+0x4e>
 8029fd8:	6811      	ldr	r1, [r2, #0]
 8029fda:	1855      	adds	r5, r2, r1
 8029fdc:	42a5      	cmp	r5, r4
 8029fde:	d10b      	bne.n	8029ff8 <_free_r+0x78>
 8029fe0:	6824      	ldr	r4, [r4, #0]
 8029fe2:	4421      	add	r1, r4
 8029fe4:	1854      	adds	r4, r2, r1
 8029fe6:	42a3      	cmp	r3, r4
 8029fe8:	6011      	str	r1, [r2, #0]
 8029fea:	d1dd      	bne.n	8029fa8 <_free_r+0x28>
 8029fec:	681c      	ldr	r4, [r3, #0]
 8029fee:	685b      	ldr	r3, [r3, #4]
 8029ff0:	6053      	str	r3, [r2, #4]
 8029ff2:	4421      	add	r1, r4
 8029ff4:	6011      	str	r1, [r2, #0]
 8029ff6:	e7d7      	b.n	8029fa8 <_free_r+0x28>
 8029ff8:	d902      	bls.n	802a000 <_free_r+0x80>
 8029ffa:	230c      	movs	r3, #12
 8029ffc:	6003      	str	r3, [r0, #0]
 8029ffe:	e7d3      	b.n	8029fa8 <_free_r+0x28>
 802a000:	6825      	ldr	r5, [r4, #0]
 802a002:	1961      	adds	r1, r4, r5
 802a004:	428b      	cmp	r3, r1
 802a006:	bf04      	itt	eq
 802a008:	6819      	ldreq	r1, [r3, #0]
 802a00a:	685b      	ldreq	r3, [r3, #4]
 802a00c:	6063      	str	r3, [r4, #4]
 802a00e:	bf04      	itt	eq
 802a010:	1949      	addeq	r1, r1, r5
 802a012:	6021      	streq	r1, [r4, #0]
 802a014:	6054      	str	r4, [r2, #4]
 802a016:	e7c7      	b.n	8029fa8 <_free_r+0x28>
 802a018:	b003      	add	sp, #12
 802a01a:	bd30      	pop	{r4, r5, pc}
 802a01c:	2002b99c 	.word	0x2002b99c

0802a020 <_malloc_r>:
 802a020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a022:	1ccd      	adds	r5, r1, #3
 802a024:	f025 0503 	bic.w	r5, r5, #3
 802a028:	3508      	adds	r5, #8
 802a02a:	2d0c      	cmp	r5, #12
 802a02c:	bf38      	it	cc
 802a02e:	250c      	movcc	r5, #12
 802a030:	2d00      	cmp	r5, #0
 802a032:	4606      	mov	r6, r0
 802a034:	db01      	blt.n	802a03a <_malloc_r+0x1a>
 802a036:	42a9      	cmp	r1, r5
 802a038:	d903      	bls.n	802a042 <_malloc_r+0x22>
 802a03a:	230c      	movs	r3, #12
 802a03c:	6033      	str	r3, [r6, #0]
 802a03e:	2000      	movs	r0, #0
 802a040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a042:	f000 ff13 	bl	802ae6c <__malloc_lock>
 802a046:	4921      	ldr	r1, [pc, #132]	; (802a0cc <_malloc_r+0xac>)
 802a048:	680a      	ldr	r2, [r1, #0]
 802a04a:	4614      	mov	r4, r2
 802a04c:	b99c      	cbnz	r4, 802a076 <_malloc_r+0x56>
 802a04e:	4f20      	ldr	r7, [pc, #128]	; (802a0d0 <_malloc_r+0xb0>)
 802a050:	683b      	ldr	r3, [r7, #0]
 802a052:	b923      	cbnz	r3, 802a05e <_malloc_r+0x3e>
 802a054:	4621      	mov	r1, r4
 802a056:	4630      	mov	r0, r6
 802a058:	f000 fb2a 	bl	802a6b0 <_sbrk_r>
 802a05c:	6038      	str	r0, [r7, #0]
 802a05e:	4629      	mov	r1, r5
 802a060:	4630      	mov	r0, r6
 802a062:	f000 fb25 	bl	802a6b0 <_sbrk_r>
 802a066:	1c43      	adds	r3, r0, #1
 802a068:	d123      	bne.n	802a0b2 <_malloc_r+0x92>
 802a06a:	230c      	movs	r3, #12
 802a06c:	6033      	str	r3, [r6, #0]
 802a06e:	4630      	mov	r0, r6
 802a070:	f000 ff02 	bl	802ae78 <__malloc_unlock>
 802a074:	e7e3      	b.n	802a03e <_malloc_r+0x1e>
 802a076:	6823      	ldr	r3, [r4, #0]
 802a078:	1b5b      	subs	r3, r3, r5
 802a07a:	d417      	bmi.n	802a0ac <_malloc_r+0x8c>
 802a07c:	2b0b      	cmp	r3, #11
 802a07e:	d903      	bls.n	802a088 <_malloc_r+0x68>
 802a080:	6023      	str	r3, [r4, #0]
 802a082:	441c      	add	r4, r3
 802a084:	6025      	str	r5, [r4, #0]
 802a086:	e004      	b.n	802a092 <_malloc_r+0x72>
 802a088:	6863      	ldr	r3, [r4, #4]
 802a08a:	42a2      	cmp	r2, r4
 802a08c:	bf0c      	ite	eq
 802a08e:	600b      	streq	r3, [r1, #0]
 802a090:	6053      	strne	r3, [r2, #4]
 802a092:	4630      	mov	r0, r6
 802a094:	f000 fef0 	bl	802ae78 <__malloc_unlock>
 802a098:	f104 000b 	add.w	r0, r4, #11
 802a09c:	1d23      	adds	r3, r4, #4
 802a09e:	f020 0007 	bic.w	r0, r0, #7
 802a0a2:	1ac2      	subs	r2, r0, r3
 802a0a4:	d0cc      	beq.n	802a040 <_malloc_r+0x20>
 802a0a6:	1a1b      	subs	r3, r3, r0
 802a0a8:	50a3      	str	r3, [r4, r2]
 802a0aa:	e7c9      	b.n	802a040 <_malloc_r+0x20>
 802a0ac:	4622      	mov	r2, r4
 802a0ae:	6864      	ldr	r4, [r4, #4]
 802a0b0:	e7cc      	b.n	802a04c <_malloc_r+0x2c>
 802a0b2:	1cc4      	adds	r4, r0, #3
 802a0b4:	f024 0403 	bic.w	r4, r4, #3
 802a0b8:	42a0      	cmp	r0, r4
 802a0ba:	d0e3      	beq.n	802a084 <_malloc_r+0x64>
 802a0bc:	1a21      	subs	r1, r4, r0
 802a0be:	4630      	mov	r0, r6
 802a0c0:	f000 faf6 	bl	802a6b0 <_sbrk_r>
 802a0c4:	3001      	adds	r0, #1
 802a0c6:	d1dd      	bne.n	802a084 <_malloc_r+0x64>
 802a0c8:	e7cf      	b.n	802a06a <_malloc_r+0x4a>
 802a0ca:	bf00      	nop
 802a0cc:	2002b99c 	.word	0x2002b99c
 802a0d0:	2002b9a0 	.word	0x2002b9a0

0802a0d4 <__sfputc_r>:
 802a0d4:	6893      	ldr	r3, [r2, #8]
 802a0d6:	3b01      	subs	r3, #1
 802a0d8:	2b00      	cmp	r3, #0
 802a0da:	b410      	push	{r4}
 802a0dc:	6093      	str	r3, [r2, #8]
 802a0de:	da08      	bge.n	802a0f2 <__sfputc_r+0x1e>
 802a0e0:	6994      	ldr	r4, [r2, #24]
 802a0e2:	42a3      	cmp	r3, r4
 802a0e4:	db01      	blt.n	802a0ea <__sfputc_r+0x16>
 802a0e6:	290a      	cmp	r1, #10
 802a0e8:	d103      	bne.n	802a0f2 <__sfputc_r+0x1e>
 802a0ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a0ee:	f000 bb65 	b.w	802a7bc <__swbuf_r>
 802a0f2:	6813      	ldr	r3, [r2, #0]
 802a0f4:	1c58      	adds	r0, r3, #1
 802a0f6:	6010      	str	r0, [r2, #0]
 802a0f8:	7019      	strb	r1, [r3, #0]
 802a0fa:	4608      	mov	r0, r1
 802a0fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a100:	4770      	bx	lr

0802a102 <__sfputs_r>:
 802a102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a104:	4606      	mov	r6, r0
 802a106:	460f      	mov	r7, r1
 802a108:	4614      	mov	r4, r2
 802a10a:	18d5      	adds	r5, r2, r3
 802a10c:	42ac      	cmp	r4, r5
 802a10e:	d101      	bne.n	802a114 <__sfputs_r+0x12>
 802a110:	2000      	movs	r0, #0
 802a112:	e007      	b.n	802a124 <__sfputs_r+0x22>
 802a114:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a118:	463a      	mov	r2, r7
 802a11a:	4630      	mov	r0, r6
 802a11c:	f7ff ffda 	bl	802a0d4 <__sfputc_r>
 802a120:	1c43      	adds	r3, r0, #1
 802a122:	d1f3      	bne.n	802a10c <__sfputs_r+0xa>
 802a124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802a128 <_vfiprintf_r>:
 802a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a12c:	460d      	mov	r5, r1
 802a12e:	b09d      	sub	sp, #116	; 0x74
 802a130:	4614      	mov	r4, r2
 802a132:	4698      	mov	r8, r3
 802a134:	4606      	mov	r6, r0
 802a136:	b118      	cbz	r0, 802a140 <_vfiprintf_r+0x18>
 802a138:	6983      	ldr	r3, [r0, #24]
 802a13a:	b90b      	cbnz	r3, 802a140 <_vfiprintf_r+0x18>
 802a13c:	f000 fd7a 	bl	802ac34 <__sinit>
 802a140:	4b89      	ldr	r3, [pc, #548]	; (802a368 <_vfiprintf_r+0x240>)
 802a142:	429d      	cmp	r5, r3
 802a144:	d11b      	bne.n	802a17e <_vfiprintf_r+0x56>
 802a146:	6875      	ldr	r5, [r6, #4]
 802a148:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a14a:	07d9      	lsls	r1, r3, #31
 802a14c:	d405      	bmi.n	802a15a <_vfiprintf_r+0x32>
 802a14e:	89ab      	ldrh	r3, [r5, #12]
 802a150:	059a      	lsls	r2, r3, #22
 802a152:	d402      	bmi.n	802a15a <_vfiprintf_r+0x32>
 802a154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a156:	f7ff feea 	bl	8029f2e <__retarget_lock_acquire_recursive>
 802a15a:	89ab      	ldrh	r3, [r5, #12]
 802a15c:	071b      	lsls	r3, r3, #28
 802a15e:	d501      	bpl.n	802a164 <_vfiprintf_r+0x3c>
 802a160:	692b      	ldr	r3, [r5, #16]
 802a162:	b9eb      	cbnz	r3, 802a1a0 <_vfiprintf_r+0x78>
 802a164:	4629      	mov	r1, r5
 802a166:	4630      	mov	r0, r6
 802a168:	f000 fb7a 	bl	802a860 <__swsetup_r>
 802a16c:	b1c0      	cbz	r0, 802a1a0 <_vfiprintf_r+0x78>
 802a16e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a170:	07dc      	lsls	r4, r3, #31
 802a172:	d50e      	bpl.n	802a192 <_vfiprintf_r+0x6a>
 802a174:	f04f 30ff 	mov.w	r0, #4294967295
 802a178:	b01d      	add	sp, #116	; 0x74
 802a17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a17e:	4b7b      	ldr	r3, [pc, #492]	; (802a36c <_vfiprintf_r+0x244>)
 802a180:	429d      	cmp	r5, r3
 802a182:	d101      	bne.n	802a188 <_vfiprintf_r+0x60>
 802a184:	68b5      	ldr	r5, [r6, #8]
 802a186:	e7df      	b.n	802a148 <_vfiprintf_r+0x20>
 802a188:	4b79      	ldr	r3, [pc, #484]	; (802a370 <_vfiprintf_r+0x248>)
 802a18a:	429d      	cmp	r5, r3
 802a18c:	bf08      	it	eq
 802a18e:	68f5      	ldreq	r5, [r6, #12]
 802a190:	e7da      	b.n	802a148 <_vfiprintf_r+0x20>
 802a192:	89ab      	ldrh	r3, [r5, #12]
 802a194:	0598      	lsls	r0, r3, #22
 802a196:	d4ed      	bmi.n	802a174 <_vfiprintf_r+0x4c>
 802a198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a19a:	f7ff feca 	bl	8029f32 <__retarget_lock_release_recursive>
 802a19e:	e7e9      	b.n	802a174 <_vfiprintf_r+0x4c>
 802a1a0:	2300      	movs	r3, #0
 802a1a2:	9309      	str	r3, [sp, #36]	; 0x24
 802a1a4:	2320      	movs	r3, #32
 802a1a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802a1aa:	f8cd 800c 	str.w	r8, [sp, #12]
 802a1ae:	2330      	movs	r3, #48	; 0x30
 802a1b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802a374 <_vfiprintf_r+0x24c>
 802a1b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802a1b8:	f04f 0901 	mov.w	r9, #1
 802a1bc:	4623      	mov	r3, r4
 802a1be:	469a      	mov	sl, r3
 802a1c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a1c4:	b10a      	cbz	r2, 802a1ca <_vfiprintf_r+0xa2>
 802a1c6:	2a25      	cmp	r2, #37	; 0x25
 802a1c8:	d1f9      	bne.n	802a1be <_vfiprintf_r+0x96>
 802a1ca:	ebba 0b04 	subs.w	fp, sl, r4
 802a1ce:	d00b      	beq.n	802a1e8 <_vfiprintf_r+0xc0>
 802a1d0:	465b      	mov	r3, fp
 802a1d2:	4622      	mov	r2, r4
 802a1d4:	4629      	mov	r1, r5
 802a1d6:	4630      	mov	r0, r6
 802a1d8:	f7ff ff93 	bl	802a102 <__sfputs_r>
 802a1dc:	3001      	adds	r0, #1
 802a1de:	f000 80aa 	beq.w	802a336 <_vfiprintf_r+0x20e>
 802a1e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a1e4:	445a      	add	r2, fp
 802a1e6:	9209      	str	r2, [sp, #36]	; 0x24
 802a1e8:	f89a 3000 	ldrb.w	r3, [sl]
 802a1ec:	2b00      	cmp	r3, #0
 802a1ee:	f000 80a2 	beq.w	802a336 <_vfiprintf_r+0x20e>
 802a1f2:	2300      	movs	r3, #0
 802a1f4:	f04f 32ff 	mov.w	r2, #4294967295
 802a1f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802a1fc:	f10a 0a01 	add.w	sl, sl, #1
 802a200:	9304      	str	r3, [sp, #16]
 802a202:	9307      	str	r3, [sp, #28]
 802a204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802a208:	931a      	str	r3, [sp, #104]	; 0x68
 802a20a:	4654      	mov	r4, sl
 802a20c:	2205      	movs	r2, #5
 802a20e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a212:	4858      	ldr	r0, [pc, #352]	; (802a374 <_vfiprintf_r+0x24c>)
 802a214:	f7d5 fffc 	bl	8000210 <memchr>
 802a218:	9a04      	ldr	r2, [sp, #16]
 802a21a:	b9d8      	cbnz	r0, 802a254 <_vfiprintf_r+0x12c>
 802a21c:	06d1      	lsls	r1, r2, #27
 802a21e:	bf44      	itt	mi
 802a220:	2320      	movmi	r3, #32
 802a222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a226:	0713      	lsls	r3, r2, #28
 802a228:	bf44      	itt	mi
 802a22a:	232b      	movmi	r3, #43	; 0x2b
 802a22c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a230:	f89a 3000 	ldrb.w	r3, [sl]
 802a234:	2b2a      	cmp	r3, #42	; 0x2a
 802a236:	d015      	beq.n	802a264 <_vfiprintf_r+0x13c>
 802a238:	9a07      	ldr	r2, [sp, #28]
 802a23a:	4654      	mov	r4, sl
 802a23c:	2000      	movs	r0, #0
 802a23e:	f04f 0c0a 	mov.w	ip, #10
 802a242:	4621      	mov	r1, r4
 802a244:	f811 3b01 	ldrb.w	r3, [r1], #1
 802a248:	3b30      	subs	r3, #48	; 0x30
 802a24a:	2b09      	cmp	r3, #9
 802a24c:	d94e      	bls.n	802a2ec <_vfiprintf_r+0x1c4>
 802a24e:	b1b0      	cbz	r0, 802a27e <_vfiprintf_r+0x156>
 802a250:	9207      	str	r2, [sp, #28]
 802a252:	e014      	b.n	802a27e <_vfiprintf_r+0x156>
 802a254:	eba0 0308 	sub.w	r3, r0, r8
 802a258:	fa09 f303 	lsl.w	r3, r9, r3
 802a25c:	4313      	orrs	r3, r2
 802a25e:	9304      	str	r3, [sp, #16]
 802a260:	46a2      	mov	sl, r4
 802a262:	e7d2      	b.n	802a20a <_vfiprintf_r+0xe2>
 802a264:	9b03      	ldr	r3, [sp, #12]
 802a266:	1d19      	adds	r1, r3, #4
 802a268:	681b      	ldr	r3, [r3, #0]
 802a26a:	9103      	str	r1, [sp, #12]
 802a26c:	2b00      	cmp	r3, #0
 802a26e:	bfbb      	ittet	lt
 802a270:	425b      	neglt	r3, r3
 802a272:	f042 0202 	orrlt.w	r2, r2, #2
 802a276:	9307      	strge	r3, [sp, #28]
 802a278:	9307      	strlt	r3, [sp, #28]
 802a27a:	bfb8      	it	lt
 802a27c:	9204      	strlt	r2, [sp, #16]
 802a27e:	7823      	ldrb	r3, [r4, #0]
 802a280:	2b2e      	cmp	r3, #46	; 0x2e
 802a282:	d10c      	bne.n	802a29e <_vfiprintf_r+0x176>
 802a284:	7863      	ldrb	r3, [r4, #1]
 802a286:	2b2a      	cmp	r3, #42	; 0x2a
 802a288:	d135      	bne.n	802a2f6 <_vfiprintf_r+0x1ce>
 802a28a:	9b03      	ldr	r3, [sp, #12]
 802a28c:	1d1a      	adds	r2, r3, #4
 802a28e:	681b      	ldr	r3, [r3, #0]
 802a290:	9203      	str	r2, [sp, #12]
 802a292:	2b00      	cmp	r3, #0
 802a294:	bfb8      	it	lt
 802a296:	f04f 33ff 	movlt.w	r3, #4294967295
 802a29a:	3402      	adds	r4, #2
 802a29c:	9305      	str	r3, [sp, #20]
 802a29e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802a384 <_vfiprintf_r+0x25c>
 802a2a2:	7821      	ldrb	r1, [r4, #0]
 802a2a4:	2203      	movs	r2, #3
 802a2a6:	4650      	mov	r0, sl
 802a2a8:	f7d5 ffb2 	bl	8000210 <memchr>
 802a2ac:	b140      	cbz	r0, 802a2c0 <_vfiprintf_r+0x198>
 802a2ae:	2340      	movs	r3, #64	; 0x40
 802a2b0:	eba0 000a 	sub.w	r0, r0, sl
 802a2b4:	fa03 f000 	lsl.w	r0, r3, r0
 802a2b8:	9b04      	ldr	r3, [sp, #16]
 802a2ba:	4303      	orrs	r3, r0
 802a2bc:	3401      	adds	r4, #1
 802a2be:	9304      	str	r3, [sp, #16]
 802a2c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a2c4:	482c      	ldr	r0, [pc, #176]	; (802a378 <_vfiprintf_r+0x250>)
 802a2c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802a2ca:	2206      	movs	r2, #6
 802a2cc:	f7d5 ffa0 	bl	8000210 <memchr>
 802a2d0:	2800      	cmp	r0, #0
 802a2d2:	d03f      	beq.n	802a354 <_vfiprintf_r+0x22c>
 802a2d4:	4b29      	ldr	r3, [pc, #164]	; (802a37c <_vfiprintf_r+0x254>)
 802a2d6:	bb1b      	cbnz	r3, 802a320 <_vfiprintf_r+0x1f8>
 802a2d8:	9b03      	ldr	r3, [sp, #12]
 802a2da:	3307      	adds	r3, #7
 802a2dc:	f023 0307 	bic.w	r3, r3, #7
 802a2e0:	3308      	adds	r3, #8
 802a2e2:	9303      	str	r3, [sp, #12]
 802a2e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a2e6:	443b      	add	r3, r7
 802a2e8:	9309      	str	r3, [sp, #36]	; 0x24
 802a2ea:	e767      	b.n	802a1bc <_vfiprintf_r+0x94>
 802a2ec:	fb0c 3202 	mla	r2, ip, r2, r3
 802a2f0:	460c      	mov	r4, r1
 802a2f2:	2001      	movs	r0, #1
 802a2f4:	e7a5      	b.n	802a242 <_vfiprintf_r+0x11a>
 802a2f6:	2300      	movs	r3, #0
 802a2f8:	3401      	adds	r4, #1
 802a2fa:	9305      	str	r3, [sp, #20]
 802a2fc:	4619      	mov	r1, r3
 802a2fe:	f04f 0c0a 	mov.w	ip, #10
 802a302:	4620      	mov	r0, r4
 802a304:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a308:	3a30      	subs	r2, #48	; 0x30
 802a30a:	2a09      	cmp	r2, #9
 802a30c:	d903      	bls.n	802a316 <_vfiprintf_r+0x1ee>
 802a30e:	2b00      	cmp	r3, #0
 802a310:	d0c5      	beq.n	802a29e <_vfiprintf_r+0x176>
 802a312:	9105      	str	r1, [sp, #20]
 802a314:	e7c3      	b.n	802a29e <_vfiprintf_r+0x176>
 802a316:	fb0c 2101 	mla	r1, ip, r1, r2
 802a31a:	4604      	mov	r4, r0
 802a31c:	2301      	movs	r3, #1
 802a31e:	e7f0      	b.n	802a302 <_vfiprintf_r+0x1da>
 802a320:	ab03      	add	r3, sp, #12
 802a322:	9300      	str	r3, [sp, #0]
 802a324:	462a      	mov	r2, r5
 802a326:	4b16      	ldr	r3, [pc, #88]	; (802a380 <_vfiprintf_r+0x258>)
 802a328:	a904      	add	r1, sp, #16
 802a32a:	4630      	mov	r0, r6
 802a32c:	f3af 8000 	nop.w
 802a330:	4607      	mov	r7, r0
 802a332:	1c78      	adds	r0, r7, #1
 802a334:	d1d6      	bne.n	802a2e4 <_vfiprintf_r+0x1bc>
 802a336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a338:	07d9      	lsls	r1, r3, #31
 802a33a:	d405      	bmi.n	802a348 <_vfiprintf_r+0x220>
 802a33c:	89ab      	ldrh	r3, [r5, #12]
 802a33e:	059a      	lsls	r2, r3, #22
 802a340:	d402      	bmi.n	802a348 <_vfiprintf_r+0x220>
 802a342:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a344:	f7ff fdf5 	bl	8029f32 <__retarget_lock_release_recursive>
 802a348:	89ab      	ldrh	r3, [r5, #12]
 802a34a:	065b      	lsls	r3, r3, #25
 802a34c:	f53f af12 	bmi.w	802a174 <_vfiprintf_r+0x4c>
 802a350:	9809      	ldr	r0, [sp, #36]	; 0x24
 802a352:	e711      	b.n	802a178 <_vfiprintf_r+0x50>
 802a354:	ab03      	add	r3, sp, #12
 802a356:	9300      	str	r3, [sp, #0]
 802a358:	462a      	mov	r2, r5
 802a35a:	4b09      	ldr	r3, [pc, #36]	; (802a380 <_vfiprintf_r+0x258>)
 802a35c:	a904      	add	r1, sp, #16
 802a35e:	4630      	mov	r0, r6
 802a360:	f000 f880 	bl	802a464 <_printf_i>
 802a364:	e7e4      	b.n	802a330 <_vfiprintf_r+0x208>
 802a366:	bf00      	nop
 802a368:	08032138 	.word	0x08032138
 802a36c:	08032158 	.word	0x08032158
 802a370:	08032118 	.word	0x08032118
 802a374:	080320e0 	.word	0x080320e0
 802a378:	080320ea 	.word	0x080320ea
 802a37c:	00000000 	.word	0x00000000
 802a380:	0802a103 	.word	0x0802a103
 802a384:	080320e6 	.word	0x080320e6

0802a388 <_printf_common>:
 802a388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a38c:	4616      	mov	r6, r2
 802a38e:	4699      	mov	r9, r3
 802a390:	688a      	ldr	r2, [r1, #8]
 802a392:	690b      	ldr	r3, [r1, #16]
 802a394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802a398:	4293      	cmp	r3, r2
 802a39a:	bfb8      	it	lt
 802a39c:	4613      	movlt	r3, r2
 802a39e:	6033      	str	r3, [r6, #0]
 802a3a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802a3a4:	4607      	mov	r7, r0
 802a3a6:	460c      	mov	r4, r1
 802a3a8:	b10a      	cbz	r2, 802a3ae <_printf_common+0x26>
 802a3aa:	3301      	adds	r3, #1
 802a3ac:	6033      	str	r3, [r6, #0]
 802a3ae:	6823      	ldr	r3, [r4, #0]
 802a3b0:	0699      	lsls	r1, r3, #26
 802a3b2:	bf42      	ittt	mi
 802a3b4:	6833      	ldrmi	r3, [r6, #0]
 802a3b6:	3302      	addmi	r3, #2
 802a3b8:	6033      	strmi	r3, [r6, #0]
 802a3ba:	6825      	ldr	r5, [r4, #0]
 802a3bc:	f015 0506 	ands.w	r5, r5, #6
 802a3c0:	d106      	bne.n	802a3d0 <_printf_common+0x48>
 802a3c2:	f104 0a19 	add.w	sl, r4, #25
 802a3c6:	68e3      	ldr	r3, [r4, #12]
 802a3c8:	6832      	ldr	r2, [r6, #0]
 802a3ca:	1a9b      	subs	r3, r3, r2
 802a3cc:	42ab      	cmp	r3, r5
 802a3ce:	dc26      	bgt.n	802a41e <_printf_common+0x96>
 802a3d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802a3d4:	1e13      	subs	r3, r2, #0
 802a3d6:	6822      	ldr	r2, [r4, #0]
 802a3d8:	bf18      	it	ne
 802a3da:	2301      	movne	r3, #1
 802a3dc:	0692      	lsls	r2, r2, #26
 802a3de:	d42b      	bmi.n	802a438 <_printf_common+0xb0>
 802a3e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802a3e4:	4649      	mov	r1, r9
 802a3e6:	4638      	mov	r0, r7
 802a3e8:	47c0      	blx	r8
 802a3ea:	3001      	adds	r0, #1
 802a3ec:	d01e      	beq.n	802a42c <_printf_common+0xa4>
 802a3ee:	6823      	ldr	r3, [r4, #0]
 802a3f0:	68e5      	ldr	r5, [r4, #12]
 802a3f2:	6832      	ldr	r2, [r6, #0]
 802a3f4:	f003 0306 	and.w	r3, r3, #6
 802a3f8:	2b04      	cmp	r3, #4
 802a3fa:	bf08      	it	eq
 802a3fc:	1aad      	subeq	r5, r5, r2
 802a3fe:	68a3      	ldr	r3, [r4, #8]
 802a400:	6922      	ldr	r2, [r4, #16]
 802a402:	bf0c      	ite	eq
 802a404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802a408:	2500      	movne	r5, #0
 802a40a:	4293      	cmp	r3, r2
 802a40c:	bfc4      	itt	gt
 802a40e:	1a9b      	subgt	r3, r3, r2
 802a410:	18ed      	addgt	r5, r5, r3
 802a412:	2600      	movs	r6, #0
 802a414:	341a      	adds	r4, #26
 802a416:	42b5      	cmp	r5, r6
 802a418:	d11a      	bne.n	802a450 <_printf_common+0xc8>
 802a41a:	2000      	movs	r0, #0
 802a41c:	e008      	b.n	802a430 <_printf_common+0xa8>
 802a41e:	2301      	movs	r3, #1
 802a420:	4652      	mov	r2, sl
 802a422:	4649      	mov	r1, r9
 802a424:	4638      	mov	r0, r7
 802a426:	47c0      	blx	r8
 802a428:	3001      	adds	r0, #1
 802a42a:	d103      	bne.n	802a434 <_printf_common+0xac>
 802a42c:	f04f 30ff 	mov.w	r0, #4294967295
 802a430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a434:	3501      	adds	r5, #1
 802a436:	e7c6      	b.n	802a3c6 <_printf_common+0x3e>
 802a438:	18e1      	adds	r1, r4, r3
 802a43a:	1c5a      	adds	r2, r3, #1
 802a43c:	2030      	movs	r0, #48	; 0x30
 802a43e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802a442:	4422      	add	r2, r4
 802a444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802a448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802a44c:	3302      	adds	r3, #2
 802a44e:	e7c7      	b.n	802a3e0 <_printf_common+0x58>
 802a450:	2301      	movs	r3, #1
 802a452:	4622      	mov	r2, r4
 802a454:	4649      	mov	r1, r9
 802a456:	4638      	mov	r0, r7
 802a458:	47c0      	blx	r8
 802a45a:	3001      	adds	r0, #1
 802a45c:	d0e6      	beq.n	802a42c <_printf_common+0xa4>
 802a45e:	3601      	adds	r6, #1
 802a460:	e7d9      	b.n	802a416 <_printf_common+0x8e>
	...

0802a464 <_printf_i>:
 802a464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802a468:	460c      	mov	r4, r1
 802a46a:	4691      	mov	r9, r2
 802a46c:	7e27      	ldrb	r7, [r4, #24]
 802a46e:	990c      	ldr	r1, [sp, #48]	; 0x30
 802a470:	2f78      	cmp	r7, #120	; 0x78
 802a472:	4680      	mov	r8, r0
 802a474:	469a      	mov	sl, r3
 802a476:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802a47a:	d807      	bhi.n	802a48c <_printf_i+0x28>
 802a47c:	2f62      	cmp	r7, #98	; 0x62
 802a47e:	d80a      	bhi.n	802a496 <_printf_i+0x32>
 802a480:	2f00      	cmp	r7, #0
 802a482:	f000 80d8 	beq.w	802a636 <_printf_i+0x1d2>
 802a486:	2f58      	cmp	r7, #88	; 0x58
 802a488:	f000 80a3 	beq.w	802a5d2 <_printf_i+0x16e>
 802a48c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802a490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802a494:	e03a      	b.n	802a50c <_printf_i+0xa8>
 802a496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802a49a:	2b15      	cmp	r3, #21
 802a49c:	d8f6      	bhi.n	802a48c <_printf_i+0x28>
 802a49e:	a001      	add	r0, pc, #4	; (adr r0, 802a4a4 <_printf_i+0x40>)
 802a4a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 802a4a4:	0802a4fd 	.word	0x0802a4fd
 802a4a8:	0802a511 	.word	0x0802a511
 802a4ac:	0802a48d 	.word	0x0802a48d
 802a4b0:	0802a48d 	.word	0x0802a48d
 802a4b4:	0802a48d 	.word	0x0802a48d
 802a4b8:	0802a48d 	.word	0x0802a48d
 802a4bc:	0802a511 	.word	0x0802a511
 802a4c0:	0802a48d 	.word	0x0802a48d
 802a4c4:	0802a48d 	.word	0x0802a48d
 802a4c8:	0802a48d 	.word	0x0802a48d
 802a4cc:	0802a48d 	.word	0x0802a48d
 802a4d0:	0802a61d 	.word	0x0802a61d
 802a4d4:	0802a541 	.word	0x0802a541
 802a4d8:	0802a5ff 	.word	0x0802a5ff
 802a4dc:	0802a48d 	.word	0x0802a48d
 802a4e0:	0802a48d 	.word	0x0802a48d
 802a4e4:	0802a63f 	.word	0x0802a63f
 802a4e8:	0802a48d 	.word	0x0802a48d
 802a4ec:	0802a541 	.word	0x0802a541
 802a4f0:	0802a48d 	.word	0x0802a48d
 802a4f4:	0802a48d 	.word	0x0802a48d
 802a4f8:	0802a607 	.word	0x0802a607
 802a4fc:	680b      	ldr	r3, [r1, #0]
 802a4fe:	1d1a      	adds	r2, r3, #4
 802a500:	681b      	ldr	r3, [r3, #0]
 802a502:	600a      	str	r2, [r1, #0]
 802a504:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802a508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802a50c:	2301      	movs	r3, #1
 802a50e:	e0a3      	b.n	802a658 <_printf_i+0x1f4>
 802a510:	6825      	ldr	r5, [r4, #0]
 802a512:	6808      	ldr	r0, [r1, #0]
 802a514:	062e      	lsls	r6, r5, #24
 802a516:	f100 0304 	add.w	r3, r0, #4
 802a51a:	d50a      	bpl.n	802a532 <_printf_i+0xce>
 802a51c:	6805      	ldr	r5, [r0, #0]
 802a51e:	600b      	str	r3, [r1, #0]
 802a520:	2d00      	cmp	r5, #0
 802a522:	da03      	bge.n	802a52c <_printf_i+0xc8>
 802a524:	232d      	movs	r3, #45	; 0x2d
 802a526:	426d      	negs	r5, r5
 802a528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a52c:	485e      	ldr	r0, [pc, #376]	; (802a6a8 <_printf_i+0x244>)
 802a52e:	230a      	movs	r3, #10
 802a530:	e019      	b.n	802a566 <_printf_i+0x102>
 802a532:	f015 0f40 	tst.w	r5, #64	; 0x40
 802a536:	6805      	ldr	r5, [r0, #0]
 802a538:	600b      	str	r3, [r1, #0]
 802a53a:	bf18      	it	ne
 802a53c:	b22d      	sxthne	r5, r5
 802a53e:	e7ef      	b.n	802a520 <_printf_i+0xbc>
 802a540:	680b      	ldr	r3, [r1, #0]
 802a542:	6825      	ldr	r5, [r4, #0]
 802a544:	1d18      	adds	r0, r3, #4
 802a546:	6008      	str	r0, [r1, #0]
 802a548:	0628      	lsls	r0, r5, #24
 802a54a:	d501      	bpl.n	802a550 <_printf_i+0xec>
 802a54c:	681d      	ldr	r5, [r3, #0]
 802a54e:	e002      	b.n	802a556 <_printf_i+0xf2>
 802a550:	0669      	lsls	r1, r5, #25
 802a552:	d5fb      	bpl.n	802a54c <_printf_i+0xe8>
 802a554:	881d      	ldrh	r5, [r3, #0]
 802a556:	4854      	ldr	r0, [pc, #336]	; (802a6a8 <_printf_i+0x244>)
 802a558:	2f6f      	cmp	r7, #111	; 0x6f
 802a55a:	bf0c      	ite	eq
 802a55c:	2308      	moveq	r3, #8
 802a55e:	230a      	movne	r3, #10
 802a560:	2100      	movs	r1, #0
 802a562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802a566:	6866      	ldr	r6, [r4, #4]
 802a568:	60a6      	str	r6, [r4, #8]
 802a56a:	2e00      	cmp	r6, #0
 802a56c:	bfa2      	ittt	ge
 802a56e:	6821      	ldrge	r1, [r4, #0]
 802a570:	f021 0104 	bicge.w	r1, r1, #4
 802a574:	6021      	strge	r1, [r4, #0]
 802a576:	b90d      	cbnz	r5, 802a57c <_printf_i+0x118>
 802a578:	2e00      	cmp	r6, #0
 802a57a:	d04d      	beq.n	802a618 <_printf_i+0x1b4>
 802a57c:	4616      	mov	r6, r2
 802a57e:	fbb5 f1f3 	udiv	r1, r5, r3
 802a582:	fb03 5711 	mls	r7, r3, r1, r5
 802a586:	5dc7      	ldrb	r7, [r0, r7]
 802a588:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802a58c:	462f      	mov	r7, r5
 802a58e:	42bb      	cmp	r3, r7
 802a590:	460d      	mov	r5, r1
 802a592:	d9f4      	bls.n	802a57e <_printf_i+0x11a>
 802a594:	2b08      	cmp	r3, #8
 802a596:	d10b      	bne.n	802a5b0 <_printf_i+0x14c>
 802a598:	6823      	ldr	r3, [r4, #0]
 802a59a:	07df      	lsls	r7, r3, #31
 802a59c:	d508      	bpl.n	802a5b0 <_printf_i+0x14c>
 802a59e:	6923      	ldr	r3, [r4, #16]
 802a5a0:	6861      	ldr	r1, [r4, #4]
 802a5a2:	4299      	cmp	r1, r3
 802a5a4:	bfde      	ittt	le
 802a5a6:	2330      	movle	r3, #48	; 0x30
 802a5a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 802a5ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 802a5b0:	1b92      	subs	r2, r2, r6
 802a5b2:	6122      	str	r2, [r4, #16]
 802a5b4:	f8cd a000 	str.w	sl, [sp]
 802a5b8:	464b      	mov	r3, r9
 802a5ba:	aa03      	add	r2, sp, #12
 802a5bc:	4621      	mov	r1, r4
 802a5be:	4640      	mov	r0, r8
 802a5c0:	f7ff fee2 	bl	802a388 <_printf_common>
 802a5c4:	3001      	adds	r0, #1
 802a5c6:	d14c      	bne.n	802a662 <_printf_i+0x1fe>
 802a5c8:	f04f 30ff 	mov.w	r0, #4294967295
 802a5cc:	b004      	add	sp, #16
 802a5ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a5d2:	4835      	ldr	r0, [pc, #212]	; (802a6a8 <_printf_i+0x244>)
 802a5d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802a5d8:	6823      	ldr	r3, [r4, #0]
 802a5da:	680e      	ldr	r6, [r1, #0]
 802a5dc:	061f      	lsls	r7, r3, #24
 802a5de:	f856 5b04 	ldr.w	r5, [r6], #4
 802a5e2:	600e      	str	r6, [r1, #0]
 802a5e4:	d514      	bpl.n	802a610 <_printf_i+0x1ac>
 802a5e6:	07d9      	lsls	r1, r3, #31
 802a5e8:	bf44      	itt	mi
 802a5ea:	f043 0320 	orrmi.w	r3, r3, #32
 802a5ee:	6023      	strmi	r3, [r4, #0]
 802a5f0:	b91d      	cbnz	r5, 802a5fa <_printf_i+0x196>
 802a5f2:	6823      	ldr	r3, [r4, #0]
 802a5f4:	f023 0320 	bic.w	r3, r3, #32
 802a5f8:	6023      	str	r3, [r4, #0]
 802a5fa:	2310      	movs	r3, #16
 802a5fc:	e7b0      	b.n	802a560 <_printf_i+0xfc>
 802a5fe:	6823      	ldr	r3, [r4, #0]
 802a600:	f043 0320 	orr.w	r3, r3, #32
 802a604:	6023      	str	r3, [r4, #0]
 802a606:	2378      	movs	r3, #120	; 0x78
 802a608:	4828      	ldr	r0, [pc, #160]	; (802a6ac <_printf_i+0x248>)
 802a60a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802a60e:	e7e3      	b.n	802a5d8 <_printf_i+0x174>
 802a610:	065e      	lsls	r6, r3, #25
 802a612:	bf48      	it	mi
 802a614:	b2ad      	uxthmi	r5, r5
 802a616:	e7e6      	b.n	802a5e6 <_printf_i+0x182>
 802a618:	4616      	mov	r6, r2
 802a61a:	e7bb      	b.n	802a594 <_printf_i+0x130>
 802a61c:	680b      	ldr	r3, [r1, #0]
 802a61e:	6826      	ldr	r6, [r4, #0]
 802a620:	6960      	ldr	r0, [r4, #20]
 802a622:	1d1d      	adds	r5, r3, #4
 802a624:	600d      	str	r5, [r1, #0]
 802a626:	0635      	lsls	r5, r6, #24
 802a628:	681b      	ldr	r3, [r3, #0]
 802a62a:	d501      	bpl.n	802a630 <_printf_i+0x1cc>
 802a62c:	6018      	str	r0, [r3, #0]
 802a62e:	e002      	b.n	802a636 <_printf_i+0x1d2>
 802a630:	0671      	lsls	r1, r6, #25
 802a632:	d5fb      	bpl.n	802a62c <_printf_i+0x1c8>
 802a634:	8018      	strh	r0, [r3, #0]
 802a636:	2300      	movs	r3, #0
 802a638:	6123      	str	r3, [r4, #16]
 802a63a:	4616      	mov	r6, r2
 802a63c:	e7ba      	b.n	802a5b4 <_printf_i+0x150>
 802a63e:	680b      	ldr	r3, [r1, #0]
 802a640:	1d1a      	adds	r2, r3, #4
 802a642:	600a      	str	r2, [r1, #0]
 802a644:	681e      	ldr	r6, [r3, #0]
 802a646:	6862      	ldr	r2, [r4, #4]
 802a648:	2100      	movs	r1, #0
 802a64a:	4630      	mov	r0, r6
 802a64c:	f7d5 fde0 	bl	8000210 <memchr>
 802a650:	b108      	cbz	r0, 802a656 <_printf_i+0x1f2>
 802a652:	1b80      	subs	r0, r0, r6
 802a654:	6060      	str	r0, [r4, #4]
 802a656:	6863      	ldr	r3, [r4, #4]
 802a658:	6123      	str	r3, [r4, #16]
 802a65a:	2300      	movs	r3, #0
 802a65c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a660:	e7a8      	b.n	802a5b4 <_printf_i+0x150>
 802a662:	6923      	ldr	r3, [r4, #16]
 802a664:	4632      	mov	r2, r6
 802a666:	4649      	mov	r1, r9
 802a668:	4640      	mov	r0, r8
 802a66a:	47d0      	blx	sl
 802a66c:	3001      	adds	r0, #1
 802a66e:	d0ab      	beq.n	802a5c8 <_printf_i+0x164>
 802a670:	6823      	ldr	r3, [r4, #0]
 802a672:	079b      	lsls	r3, r3, #30
 802a674:	d413      	bmi.n	802a69e <_printf_i+0x23a>
 802a676:	68e0      	ldr	r0, [r4, #12]
 802a678:	9b03      	ldr	r3, [sp, #12]
 802a67a:	4298      	cmp	r0, r3
 802a67c:	bfb8      	it	lt
 802a67e:	4618      	movlt	r0, r3
 802a680:	e7a4      	b.n	802a5cc <_printf_i+0x168>
 802a682:	2301      	movs	r3, #1
 802a684:	4632      	mov	r2, r6
 802a686:	4649      	mov	r1, r9
 802a688:	4640      	mov	r0, r8
 802a68a:	47d0      	blx	sl
 802a68c:	3001      	adds	r0, #1
 802a68e:	d09b      	beq.n	802a5c8 <_printf_i+0x164>
 802a690:	3501      	adds	r5, #1
 802a692:	68e3      	ldr	r3, [r4, #12]
 802a694:	9903      	ldr	r1, [sp, #12]
 802a696:	1a5b      	subs	r3, r3, r1
 802a698:	42ab      	cmp	r3, r5
 802a69a:	dcf2      	bgt.n	802a682 <_printf_i+0x21e>
 802a69c:	e7eb      	b.n	802a676 <_printf_i+0x212>
 802a69e:	2500      	movs	r5, #0
 802a6a0:	f104 0619 	add.w	r6, r4, #25
 802a6a4:	e7f5      	b.n	802a692 <_printf_i+0x22e>
 802a6a6:	bf00      	nop
 802a6a8:	080320f1 	.word	0x080320f1
 802a6ac:	08032102 	.word	0x08032102

0802a6b0 <_sbrk_r>:
 802a6b0:	b538      	push	{r3, r4, r5, lr}
 802a6b2:	4d06      	ldr	r5, [pc, #24]	; (802a6cc <_sbrk_r+0x1c>)
 802a6b4:	2300      	movs	r3, #0
 802a6b6:	4604      	mov	r4, r0
 802a6b8:	4608      	mov	r0, r1
 802a6ba:	602b      	str	r3, [r5, #0]
 802a6bc:	f7d7 f912 	bl	80018e4 <_sbrk>
 802a6c0:	1c43      	adds	r3, r0, #1
 802a6c2:	d102      	bne.n	802a6ca <_sbrk_r+0x1a>
 802a6c4:	682b      	ldr	r3, [r5, #0]
 802a6c6:	b103      	cbz	r3, 802a6ca <_sbrk_r+0x1a>
 802a6c8:	6023      	str	r3, [r4, #0]
 802a6ca:	bd38      	pop	{r3, r4, r5, pc}
 802a6cc:	2002be08 	.word	0x2002be08

0802a6d0 <_raise_r>:
 802a6d0:	291f      	cmp	r1, #31
 802a6d2:	b538      	push	{r3, r4, r5, lr}
 802a6d4:	4604      	mov	r4, r0
 802a6d6:	460d      	mov	r5, r1
 802a6d8:	d904      	bls.n	802a6e4 <_raise_r+0x14>
 802a6da:	2316      	movs	r3, #22
 802a6dc:	6003      	str	r3, [r0, #0]
 802a6de:	f04f 30ff 	mov.w	r0, #4294967295
 802a6e2:	bd38      	pop	{r3, r4, r5, pc}
 802a6e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802a6e6:	b112      	cbz	r2, 802a6ee <_raise_r+0x1e>
 802a6e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802a6ec:	b94b      	cbnz	r3, 802a702 <_raise_r+0x32>
 802a6ee:	4620      	mov	r0, r4
 802a6f0:	f000 f830 	bl	802a754 <_getpid_r>
 802a6f4:	462a      	mov	r2, r5
 802a6f6:	4601      	mov	r1, r0
 802a6f8:	4620      	mov	r0, r4
 802a6fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a6fe:	f000 b817 	b.w	802a730 <_kill_r>
 802a702:	2b01      	cmp	r3, #1
 802a704:	d00a      	beq.n	802a71c <_raise_r+0x4c>
 802a706:	1c59      	adds	r1, r3, #1
 802a708:	d103      	bne.n	802a712 <_raise_r+0x42>
 802a70a:	2316      	movs	r3, #22
 802a70c:	6003      	str	r3, [r0, #0]
 802a70e:	2001      	movs	r0, #1
 802a710:	e7e7      	b.n	802a6e2 <_raise_r+0x12>
 802a712:	2400      	movs	r4, #0
 802a714:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802a718:	4628      	mov	r0, r5
 802a71a:	4798      	blx	r3
 802a71c:	2000      	movs	r0, #0
 802a71e:	e7e0      	b.n	802a6e2 <_raise_r+0x12>

0802a720 <raise>:
 802a720:	4b02      	ldr	r3, [pc, #8]	; (802a72c <raise+0xc>)
 802a722:	4601      	mov	r1, r0
 802a724:	6818      	ldr	r0, [r3, #0]
 802a726:	f7ff bfd3 	b.w	802a6d0 <_raise_r>
 802a72a:	bf00      	nop
 802a72c:	200000bc 	.word	0x200000bc

0802a730 <_kill_r>:
 802a730:	b538      	push	{r3, r4, r5, lr}
 802a732:	4d07      	ldr	r5, [pc, #28]	; (802a750 <_kill_r+0x20>)
 802a734:	2300      	movs	r3, #0
 802a736:	4604      	mov	r4, r0
 802a738:	4608      	mov	r0, r1
 802a73a:	4611      	mov	r1, r2
 802a73c:	602b      	str	r3, [r5, #0]
 802a73e:	f7d7 f89d 	bl	800187c <_kill>
 802a742:	1c43      	adds	r3, r0, #1
 802a744:	d102      	bne.n	802a74c <_kill_r+0x1c>
 802a746:	682b      	ldr	r3, [r5, #0]
 802a748:	b103      	cbz	r3, 802a74c <_kill_r+0x1c>
 802a74a:	6023      	str	r3, [r4, #0]
 802a74c:	bd38      	pop	{r3, r4, r5, pc}
 802a74e:	bf00      	nop
 802a750:	2002be08 	.word	0x2002be08

0802a754 <_getpid_r>:
 802a754:	f7d7 b890 	b.w	8001878 <_getpid>

0802a758 <siprintf>:
 802a758:	b40e      	push	{r1, r2, r3}
 802a75a:	b500      	push	{lr}
 802a75c:	b09c      	sub	sp, #112	; 0x70
 802a75e:	ab1d      	add	r3, sp, #116	; 0x74
 802a760:	9002      	str	r0, [sp, #8]
 802a762:	9006      	str	r0, [sp, #24]
 802a764:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802a768:	4809      	ldr	r0, [pc, #36]	; (802a790 <siprintf+0x38>)
 802a76a:	9107      	str	r1, [sp, #28]
 802a76c:	9104      	str	r1, [sp, #16]
 802a76e:	4909      	ldr	r1, [pc, #36]	; (802a794 <siprintf+0x3c>)
 802a770:	f853 2b04 	ldr.w	r2, [r3], #4
 802a774:	9105      	str	r1, [sp, #20]
 802a776:	6800      	ldr	r0, [r0, #0]
 802a778:	9301      	str	r3, [sp, #4]
 802a77a:	a902      	add	r1, sp, #8
 802a77c:	f000 fc04 	bl	802af88 <_svfiprintf_r>
 802a780:	9b02      	ldr	r3, [sp, #8]
 802a782:	2200      	movs	r2, #0
 802a784:	701a      	strb	r2, [r3, #0]
 802a786:	b01c      	add	sp, #112	; 0x70
 802a788:	f85d eb04 	ldr.w	lr, [sp], #4
 802a78c:	b003      	add	sp, #12
 802a78e:	4770      	bx	lr
 802a790:	200000bc 	.word	0x200000bc
 802a794:	ffff0208 	.word	0xffff0208

0802a798 <strncmp>:
 802a798:	b510      	push	{r4, lr}
 802a79a:	b16a      	cbz	r2, 802a7b8 <strncmp+0x20>
 802a79c:	3901      	subs	r1, #1
 802a79e:	1884      	adds	r4, r0, r2
 802a7a0:	f810 3b01 	ldrb.w	r3, [r0], #1
 802a7a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802a7a8:	4293      	cmp	r3, r2
 802a7aa:	d103      	bne.n	802a7b4 <strncmp+0x1c>
 802a7ac:	42a0      	cmp	r0, r4
 802a7ae:	d001      	beq.n	802a7b4 <strncmp+0x1c>
 802a7b0:	2b00      	cmp	r3, #0
 802a7b2:	d1f5      	bne.n	802a7a0 <strncmp+0x8>
 802a7b4:	1a98      	subs	r0, r3, r2
 802a7b6:	bd10      	pop	{r4, pc}
 802a7b8:	4610      	mov	r0, r2
 802a7ba:	e7fc      	b.n	802a7b6 <strncmp+0x1e>

0802a7bc <__swbuf_r>:
 802a7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a7be:	460e      	mov	r6, r1
 802a7c0:	4614      	mov	r4, r2
 802a7c2:	4605      	mov	r5, r0
 802a7c4:	b118      	cbz	r0, 802a7ce <__swbuf_r+0x12>
 802a7c6:	6983      	ldr	r3, [r0, #24]
 802a7c8:	b90b      	cbnz	r3, 802a7ce <__swbuf_r+0x12>
 802a7ca:	f000 fa33 	bl	802ac34 <__sinit>
 802a7ce:	4b21      	ldr	r3, [pc, #132]	; (802a854 <__swbuf_r+0x98>)
 802a7d0:	429c      	cmp	r4, r3
 802a7d2:	d12b      	bne.n	802a82c <__swbuf_r+0x70>
 802a7d4:	686c      	ldr	r4, [r5, #4]
 802a7d6:	69a3      	ldr	r3, [r4, #24]
 802a7d8:	60a3      	str	r3, [r4, #8]
 802a7da:	89a3      	ldrh	r3, [r4, #12]
 802a7dc:	071a      	lsls	r2, r3, #28
 802a7de:	d52f      	bpl.n	802a840 <__swbuf_r+0x84>
 802a7e0:	6923      	ldr	r3, [r4, #16]
 802a7e2:	b36b      	cbz	r3, 802a840 <__swbuf_r+0x84>
 802a7e4:	6923      	ldr	r3, [r4, #16]
 802a7e6:	6820      	ldr	r0, [r4, #0]
 802a7e8:	1ac0      	subs	r0, r0, r3
 802a7ea:	6963      	ldr	r3, [r4, #20]
 802a7ec:	b2f6      	uxtb	r6, r6
 802a7ee:	4283      	cmp	r3, r0
 802a7f0:	4637      	mov	r7, r6
 802a7f2:	dc04      	bgt.n	802a7fe <__swbuf_r+0x42>
 802a7f4:	4621      	mov	r1, r4
 802a7f6:	4628      	mov	r0, r5
 802a7f8:	f000 f988 	bl	802ab0c <_fflush_r>
 802a7fc:	bb30      	cbnz	r0, 802a84c <__swbuf_r+0x90>
 802a7fe:	68a3      	ldr	r3, [r4, #8]
 802a800:	3b01      	subs	r3, #1
 802a802:	60a3      	str	r3, [r4, #8]
 802a804:	6823      	ldr	r3, [r4, #0]
 802a806:	1c5a      	adds	r2, r3, #1
 802a808:	6022      	str	r2, [r4, #0]
 802a80a:	701e      	strb	r6, [r3, #0]
 802a80c:	6963      	ldr	r3, [r4, #20]
 802a80e:	3001      	adds	r0, #1
 802a810:	4283      	cmp	r3, r0
 802a812:	d004      	beq.n	802a81e <__swbuf_r+0x62>
 802a814:	89a3      	ldrh	r3, [r4, #12]
 802a816:	07db      	lsls	r3, r3, #31
 802a818:	d506      	bpl.n	802a828 <__swbuf_r+0x6c>
 802a81a:	2e0a      	cmp	r6, #10
 802a81c:	d104      	bne.n	802a828 <__swbuf_r+0x6c>
 802a81e:	4621      	mov	r1, r4
 802a820:	4628      	mov	r0, r5
 802a822:	f000 f973 	bl	802ab0c <_fflush_r>
 802a826:	b988      	cbnz	r0, 802a84c <__swbuf_r+0x90>
 802a828:	4638      	mov	r0, r7
 802a82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a82c:	4b0a      	ldr	r3, [pc, #40]	; (802a858 <__swbuf_r+0x9c>)
 802a82e:	429c      	cmp	r4, r3
 802a830:	d101      	bne.n	802a836 <__swbuf_r+0x7a>
 802a832:	68ac      	ldr	r4, [r5, #8]
 802a834:	e7cf      	b.n	802a7d6 <__swbuf_r+0x1a>
 802a836:	4b09      	ldr	r3, [pc, #36]	; (802a85c <__swbuf_r+0xa0>)
 802a838:	429c      	cmp	r4, r3
 802a83a:	bf08      	it	eq
 802a83c:	68ec      	ldreq	r4, [r5, #12]
 802a83e:	e7ca      	b.n	802a7d6 <__swbuf_r+0x1a>
 802a840:	4621      	mov	r1, r4
 802a842:	4628      	mov	r0, r5
 802a844:	f000 f80c 	bl	802a860 <__swsetup_r>
 802a848:	2800      	cmp	r0, #0
 802a84a:	d0cb      	beq.n	802a7e4 <__swbuf_r+0x28>
 802a84c:	f04f 37ff 	mov.w	r7, #4294967295
 802a850:	e7ea      	b.n	802a828 <__swbuf_r+0x6c>
 802a852:	bf00      	nop
 802a854:	08032138 	.word	0x08032138
 802a858:	08032158 	.word	0x08032158
 802a85c:	08032118 	.word	0x08032118

0802a860 <__swsetup_r>:
 802a860:	4b32      	ldr	r3, [pc, #200]	; (802a92c <__swsetup_r+0xcc>)
 802a862:	b570      	push	{r4, r5, r6, lr}
 802a864:	681d      	ldr	r5, [r3, #0]
 802a866:	4606      	mov	r6, r0
 802a868:	460c      	mov	r4, r1
 802a86a:	b125      	cbz	r5, 802a876 <__swsetup_r+0x16>
 802a86c:	69ab      	ldr	r3, [r5, #24]
 802a86e:	b913      	cbnz	r3, 802a876 <__swsetup_r+0x16>
 802a870:	4628      	mov	r0, r5
 802a872:	f000 f9df 	bl	802ac34 <__sinit>
 802a876:	4b2e      	ldr	r3, [pc, #184]	; (802a930 <__swsetup_r+0xd0>)
 802a878:	429c      	cmp	r4, r3
 802a87a:	d10f      	bne.n	802a89c <__swsetup_r+0x3c>
 802a87c:	686c      	ldr	r4, [r5, #4]
 802a87e:	89a3      	ldrh	r3, [r4, #12]
 802a880:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a884:	0719      	lsls	r1, r3, #28
 802a886:	d42c      	bmi.n	802a8e2 <__swsetup_r+0x82>
 802a888:	06dd      	lsls	r5, r3, #27
 802a88a:	d411      	bmi.n	802a8b0 <__swsetup_r+0x50>
 802a88c:	2309      	movs	r3, #9
 802a88e:	6033      	str	r3, [r6, #0]
 802a890:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802a894:	81a3      	strh	r3, [r4, #12]
 802a896:	f04f 30ff 	mov.w	r0, #4294967295
 802a89a:	e03e      	b.n	802a91a <__swsetup_r+0xba>
 802a89c:	4b25      	ldr	r3, [pc, #148]	; (802a934 <__swsetup_r+0xd4>)
 802a89e:	429c      	cmp	r4, r3
 802a8a0:	d101      	bne.n	802a8a6 <__swsetup_r+0x46>
 802a8a2:	68ac      	ldr	r4, [r5, #8]
 802a8a4:	e7eb      	b.n	802a87e <__swsetup_r+0x1e>
 802a8a6:	4b24      	ldr	r3, [pc, #144]	; (802a938 <__swsetup_r+0xd8>)
 802a8a8:	429c      	cmp	r4, r3
 802a8aa:	bf08      	it	eq
 802a8ac:	68ec      	ldreq	r4, [r5, #12]
 802a8ae:	e7e6      	b.n	802a87e <__swsetup_r+0x1e>
 802a8b0:	0758      	lsls	r0, r3, #29
 802a8b2:	d512      	bpl.n	802a8da <__swsetup_r+0x7a>
 802a8b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802a8b6:	b141      	cbz	r1, 802a8ca <__swsetup_r+0x6a>
 802a8b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a8bc:	4299      	cmp	r1, r3
 802a8be:	d002      	beq.n	802a8c6 <__swsetup_r+0x66>
 802a8c0:	4630      	mov	r0, r6
 802a8c2:	f7ff fb5d 	bl	8029f80 <_free_r>
 802a8c6:	2300      	movs	r3, #0
 802a8c8:	6363      	str	r3, [r4, #52]	; 0x34
 802a8ca:	89a3      	ldrh	r3, [r4, #12]
 802a8cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802a8d0:	81a3      	strh	r3, [r4, #12]
 802a8d2:	2300      	movs	r3, #0
 802a8d4:	6063      	str	r3, [r4, #4]
 802a8d6:	6923      	ldr	r3, [r4, #16]
 802a8d8:	6023      	str	r3, [r4, #0]
 802a8da:	89a3      	ldrh	r3, [r4, #12]
 802a8dc:	f043 0308 	orr.w	r3, r3, #8
 802a8e0:	81a3      	strh	r3, [r4, #12]
 802a8e2:	6923      	ldr	r3, [r4, #16]
 802a8e4:	b94b      	cbnz	r3, 802a8fa <__swsetup_r+0x9a>
 802a8e6:	89a3      	ldrh	r3, [r4, #12]
 802a8e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802a8ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802a8f0:	d003      	beq.n	802a8fa <__swsetup_r+0x9a>
 802a8f2:	4621      	mov	r1, r4
 802a8f4:	4630      	mov	r0, r6
 802a8f6:	f000 fa5f 	bl	802adb8 <__smakebuf_r>
 802a8fa:	89a0      	ldrh	r0, [r4, #12]
 802a8fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a900:	f010 0301 	ands.w	r3, r0, #1
 802a904:	d00a      	beq.n	802a91c <__swsetup_r+0xbc>
 802a906:	2300      	movs	r3, #0
 802a908:	60a3      	str	r3, [r4, #8]
 802a90a:	6963      	ldr	r3, [r4, #20]
 802a90c:	425b      	negs	r3, r3
 802a90e:	61a3      	str	r3, [r4, #24]
 802a910:	6923      	ldr	r3, [r4, #16]
 802a912:	b943      	cbnz	r3, 802a926 <__swsetup_r+0xc6>
 802a914:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802a918:	d1ba      	bne.n	802a890 <__swsetup_r+0x30>
 802a91a:	bd70      	pop	{r4, r5, r6, pc}
 802a91c:	0781      	lsls	r1, r0, #30
 802a91e:	bf58      	it	pl
 802a920:	6963      	ldrpl	r3, [r4, #20]
 802a922:	60a3      	str	r3, [r4, #8]
 802a924:	e7f4      	b.n	802a910 <__swsetup_r+0xb0>
 802a926:	2000      	movs	r0, #0
 802a928:	e7f7      	b.n	802a91a <__swsetup_r+0xba>
 802a92a:	bf00      	nop
 802a92c:	200000bc 	.word	0x200000bc
 802a930:	08032138 	.word	0x08032138
 802a934:	08032158 	.word	0x08032158
 802a938:	08032118 	.word	0x08032118

0802a93c <__register_exitproc>:
 802a93c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a940:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802a9fc <__register_exitproc+0xc0>
 802a944:	4606      	mov	r6, r0
 802a946:	f8d8 0000 	ldr.w	r0, [r8]
 802a94a:	461f      	mov	r7, r3
 802a94c:	460d      	mov	r5, r1
 802a94e:	4691      	mov	r9, r2
 802a950:	f7ff faed 	bl	8029f2e <__retarget_lock_acquire_recursive>
 802a954:	4b25      	ldr	r3, [pc, #148]	; (802a9ec <__register_exitproc+0xb0>)
 802a956:	681c      	ldr	r4, [r3, #0]
 802a958:	b934      	cbnz	r4, 802a968 <__register_exitproc+0x2c>
 802a95a:	4c25      	ldr	r4, [pc, #148]	; (802a9f0 <__register_exitproc+0xb4>)
 802a95c:	601c      	str	r4, [r3, #0]
 802a95e:	4b25      	ldr	r3, [pc, #148]	; (802a9f4 <__register_exitproc+0xb8>)
 802a960:	b113      	cbz	r3, 802a968 <__register_exitproc+0x2c>
 802a962:	681b      	ldr	r3, [r3, #0]
 802a964:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802a968:	6863      	ldr	r3, [r4, #4]
 802a96a:	2b1f      	cmp	r3, #31
 802a96c:	dd07      	ble.n	802a97e <__register_exitproc+0x42>
 802a96e:	f8d8 0000 	ldr.w	r0, [r8]
 802a972:	f7ff fade 	bl	8029f32 <__retarget_lock_release_recursive>
 802a976:	f04f 30ff 	mov.w	r0, #4294967295
 802a97a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a97e:	b34e      	cbz	r6, 802a9d4 <__register_exitproc+0x98>
 802a980:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802a984:	b988      	cbnz	r0, 802a9aa <__register_exitproc+0x6e>
 802a986:	4b1c      	ldr	r3, [pc, #112]	; (802a9f8 <__register_exitproc+0xbc>)
 802a988:	b923      	cbnz	r3, 802a994 <__register_exitproc+0x58>
 802a98a:	f8d8 0000 	ldr.w	r0, [r8]
 802a98e:	f7ff facf 	bl	8029f30 <__retarget_lock_release>
 802a992:	e7f0      	b.n	802a976 <__register_exitproc+0x3a>
 802a994:	f44f 7084 	mov.w	r0, #264	; 0x108
 802a998:	f7ff facc 	bl	8029f34 <malloc>
 802a99c:	2800      	cmp	r0, #0
 802a99e:	d0f4      	beq.n	802a98a <__register_exitproc+0x4e>
 802a9a0:	2300      	movs	r3, #0
 802a9a2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802a9a6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802a9aa:	6863      	ldr	r3, [r4, #4]
 802a9ac:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802a9b0:	2201      	movs	r2, #1
 802a9b2:	409a      	lsls	r2, r3
 802a9b4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802a9b8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802a9bc:	4313      	orrs	r3, r2
 802a9be:	2e02      	cmp	r6, #2
 802a9c0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802a9c4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802a9c8:	bf02      	ittt	eq
 802a9ca:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802a9ce:	431a      	orreq	r2, r3
 802a9d0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 802a9d4:	6863      	ldr	r3, [r4, #4]
 802a9d6:	f8d8 0000 	ldr.w	r0, [r8]
 802a9da:	1c5a      	adds	r2, r3, #1
 802a9dc:	3302      	adds	r3, #2
 802a9de:	6062      	str	r2, [r4, #4]
 802a9e0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802a9e4:	f7ff faa5 	bl	8029f32 <__retarget_lock_release_recursive>
 802a9e8:	2000      	movs	r0, #0
 802a9ea:	e7c6      	b.n	802a97a <__register_exitproc+0x3e>
 802a9ec:	2002bb38 	.word	0x2002bb38
 802a9f0:	2002baac 	.word	0x2002baac
 802a9f4:	08032114 	.word	0x08032114
 802a9f8:	08029f35 	.word	0x08029f35
 802a9fc:	20000120 	.word	0x20000120

0802aa00 <__sflush_r>:
 802aa00:	898a      	ldrh	r2, [r1, #12]
 802aa02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802aa06:	4605      	mov	r5, r0
 802aa08:	0710      	lsls	r0, r2, #28
 802aa0a:	460c      	mov	r4, r1
 802aa0c:	d458      	bmi.n	802aac0 <__sflush_r+0xc0>
 802aa0e:	684b      	ldr	r3, [r1, #4]
 802aa10:	2b00      	cmp	r3, #0
 802aa12:	dc05      	bgt.n	802aa20 <__sflush_r+0x20>
 802aa14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802aa16:	2b00      	cmp	r3, #0
 802aa18:	dc02      	bgt.n	802aa20 <__sflush_r+0x20>
 802aa1a:	2000      	movs	r0, #0
 802aa1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802aa20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802aa22:	2e00      	cmp	r6, #0
 802aa24:	d0f9      	beq.n	802aa1a <__sflush_r+0x1a>
 802aa26:	2300      	movs	r3, #0
 802aa28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802aa2c:	682f      	ldr	r7, [r5, #0]
 802aa2e:	602b      	str	r3, [r5, #0]
 802aa30:	d032      	beq.n	802aa98 <__sflush_r+0x98>
 802aa32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802aa34:	89a3      	ldrh	r3, [r4, #12]
 802aa36:	075a      	lsls	r2, r3, #29
 802aa38:	d505      	bpl.n	802aa46 <__sflush_r+0x46>
 802aa3a:	6863      	ldr	r3, [r4, #4]
 802aa3c:	1ac0      	subs	r0, r0, r3
 802aa3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802aa40:	b10b      	cbz	r3, 802aa46 <__sflush_r+0x46>
 802aa42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802aa44:	1ac0      	subs	r0, r0, r3
 802aa46:	2300      	movs	r3, #0
 802aa48:	4602      	mov	r2, r0
 802aa4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802aa4c:	6a21      	ldr	r1, [r4, #32]
 802aa4e:	4628      	mov	r0, r5
 802aa50:	47b0      	blx	r6
 802aa52:	1c43      	adds	r3, r0, #1
 802aa54:	89a3      	ldrh	r3, [r4, #12]
 802aa56:	d106      	bne.n	802aa66 <__sflush_r+0x66>
 802aa58:	6829      	ldr	r1, [r5, #0]
 802aa5a:	291d      	cmp	r1, #29
 802aa5c:	d82c      	bhi.n	802aab8 <__sflush_r+0xb8>
 802aa5e:	4a2a      	ldr	r2, [pc, #168]	; (802ab08 <__sflush_r+0x108>)
 802aa60:	40ca      	lsrs	r2, r1
 802aa62:	07d6      	lsls	r6, r2, #31
 802aa64:	d528      	bpl.n	802aab8 <__sflush_r+0xb8>
 802aa66:	2200      	movs	r2, #0
 802aa68:	6062      	str	r2, [r4, #4]
 802aa6a:	04d9      	lsls	r1, r3, #19
 802aa6c:	6922      	ldr	r2, [r4, #16]
 802aa6e:	6022      	str	r2, [r4, #0]
 802aa70:	d504      	bpl.n	802aa7c <__sflush_r+0x7c>
 802aa72:	1c42      	adds	r2, r0, #1
 802aa74:	d101      	bne.n	802aa7a <__sflush_r+0x7a>
 802aa76:	682b      	ldr	r3, [r5, #0]
 802aa78:	b903      	cbnz	r3, 802aa7c <__sflush_r+0x7c>
 802aa7a:	6560      	str	r0, [r4, #84]	; 0x54
 802aa7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802aa7e:	602f      	str	r7, [r5, #0]
 802aa80:	2900      	cmp	r1, #0
 802aa82:	d0ca      	beq.n	802aa1a <__sflush_r+0x1a>
 802aa84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802aa88:	4299      	cmp	r1, r3
 802aa8a:	d002      	beq.n	802aa92 <__sflush_r+0x92>
 802aa8c:	4628      	mov	r0, r5
 802aa8e:	f7ff fa77 	bl	8029f80 <_free_r>
 802aa92:	2000      	movs	r0, #0
 802aa94:	6360      	str	r0, [r4, #52]	; 0x34
 802aa96:	e7c1      	b.n	802aa1c <__sflush_r+0x1c>
 802aa98:	6a21      	ldr	r1, [r4, #32]
 802aa9a:	2301      	movs	r3, #1
 802aa9c:	4628      	mov	r0, r5
 802aa9e:	47b0      	blx	r6
 802aaa0:	1c41      	adds	r1, r0, #1
 802aaa2:	d1c7      	bne.n	802aa34 <__sflush_r+0x34>
 802aaa4:	682b      	ldr	r3, [r5, #0]
 802aaa6:	2b00      	cmp	r3, #0
 802aaa8:	d0c4      	beq.n	802aa34 <__sflush_r+0x34>
 802aaaa:	2b1d      	cmp	r3, #29
 802aaac:	d001      	beq.n	802aab2 <__sflush_r+0xb2>
 802aaae:	2b16      	cmp	r3, #22
 802aab0:	d101      	bne.n	802aab6 <__sflush_r+0xb6>
 802aab2:	602f      	str	r7, [r5, #0]
 802aab4:	e7b1      	b.n	802aa1a <__sflush_r+0x1a>
 802aab6:	89a3      	ldrh	r3, [r4, #12]
 802aab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802aabc:	81a3      	strh	r3, [r4, #12]
 802aabe:	e7ad      	b.n	802aa1c <__sflush_r+0x1c>
 802aac0:	690f      	ldr	r7, [r1, #16]
 802aac2:	2f00      	cmp	r7, #0
 802aac4:	d0a9      	beq.n	802aa1a <__sflush_r+0x1a>
 802aac6:	0793      	lsls	r3, r2, #30
 802aac8:	680e      	ldr	r6, [r1, #0]
 802aaca:	bf08      	it	eq
 802aacc:	694b      	ldreq	r3, [r1, #20]
 802aace:	600f      	str	r7, [r1, #0]
 802aad0:	bf18      	it	ne
 802aad2:	2300      	movne	r3, #0
 802aad4:	eba6 0807 	sub.w	r8, r6, r7
 802aad8:	608b      	str	r3, [r1, #8]
 802aada:	f1b8 0f00 	cmp.w	r8, #0
 802aade:	dd9c      	ble.n	802aa1a <__sflush_r+0x1a>
 802aae0:	6a21      	ldr	r1, [r4, #32]
 802aae2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802aae4:	4643      	mov	r3, r8
 802aae6:	463a      	mov	r2, r7
 802aae8:	4628      	mov	r0, r5
 802aaea:	47b0      	blx	r6
 802aaec:	2800      	cmp	r0, #0
 802aaee:	dc06      	bgt.n	802aafe <__sflush_r+0xfe>
 802aaf0:	89a3      	ldrh	r3, [r4, #12]
 802aaf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802aaf6:	81a3      	strh	r3, [r4, #12]
 802aaf8:	f04f 30ff 	mov.w	r0, #4294967295
 802aafc:	e78e      	b.n	802aa1c <__sflush_r+0x1c>
 802aafe:	4407      	add	r7, r0
 802ab00:	eba8 0800 	sub.w	r8, r8, r0
 802ab04:	e7e9      	b.n	802aada <__sflush_r+0xda>
 802ab06:	bf00      	nop
 802ab08:	20400001 	.word	0x20400001

0802ab0c <_fflush_r>:
 802ab0c:	b538      	push	{r3, r4, r5, lr}
 802ab0e:	690b      	ldr	r3, [r1, #16]
 802ab10:	4605      	mov	r5, r0
 802ab12:	460c      	mov	r4, r1
 802ab14:	b913      	cbnz	r3, 802ab1c <_fflush_r+0x10>
 802ab16:	2500      	movs	r5, #0
 802ab18:	4628      	mov	r0, r5
 802ab1a:	bd38      	pop	{r3, r4, r5, pc}
 802ab1c:	b118      	cbz	r0, 802ab26 <_fflush_r+0x1a>
 802ab1e:	6983      	ldr	r3, [r0, #24]
 802ab20:	b90b      	cbnz	r3, 802ab26 <_fflush_r+0x1a>
 802ab22:	f000 f887 	bl	802ac34 <__sinit>
 802ab26:	4b14      	ldr	r3, [pc, #80]	; (802ab78 <_fflush_r+0x6c>)
 802ab28:	429c      	cmp	r4, r3
 802ab2a:	d11b      	bne.n	802ab64 <_fflush_r+0x58>
 802ab2c:	686c      	ldr	r4, [r5, #4]
 802ab2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ab32:	2b00      	cmp	r3, #0
 802ab34:	d0ef      	beq.n	802ab16 <_fflush_r+0xa>
 802ab36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802ab38:	07d0      	lsls	r0, r2, #31
 802ab3a:	d404      	bmi.n	802ab46 <_fflush_r+0x3a>
 802ab3c:	0599      	lsls	r1, r3, #22
 802ab3e:	d402      	bmi.n	802ab46 <_fflush_r+0x3a>
 802ab40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802ab42:	f7ff f9f4 	bl	8029f2e <__retarget_lock_acquire_recursive>
 802ab46:	4628      	mov	r0, r5
 802ab48:	4621      	mov	r1, r4
 802ab4a:	f7ff ff59 	bl	802aa00 <__sflush_r>
 802ab4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802ab50:	07da      	lsls	r2, r3, #31
 802ab52:	4605      	mov	r5, r0
 802ab54:	d4e0      	bmi.n	802ab18 <_fflush_r+0xc>
 802ab56:	89a3      	ldrh	r3, [r4, #12]
 802ab58:	059b      	lsls	r3, r3, #22
 802ab5a:	d4dd      	bmi.n	802ab18 <_fflush_r+0xc>
 802ab5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802ab5e:	f7ff f9e8 	bl	8029f32 <__retarget_lock_release_recursive>
 802ab62:	e7d9      	b.n	802ab18 <_fflush_r+0xc>
 802ab64:	4b05      	ldr	r3, [pc, #20]	; (802ab7c <_fflush_r+0x70>)
 802ab66:	429c      	cmp	r4, r3
 802ab68:	d101      	bne.n	802ab6e <_fflush_r+0x62>
 802ab6a:	68ac      	ldr	r4, [r5, #8]
 802ab6c:	e7df      	b.n	802ab2e <_fflush_r+0x22>
 802ab6e:	4b04      	ldr	r3, [pc, #16]	; (802ab80 <_fflush_r+0x74>)
 802ab70:	429c      	cmp	r4, r3
 802ab72:	bf08      	it	eq
 802ab74:	68ec      	ldreq	r4, [r5, #12]
 802ab76:	e7da      	b.n	802ab2e <_fflush_r+0x22>
 802ab78:	08032138 	.word	0x08032138
 802ab7c:	08032158 	.word	0x08032158
 802ab80:	08032118 	.word	0x08032118

0802ab84 <std>:
 802ab84:	2300      	movs	r3, #0
 802ab86:	b510      	push	{r4, lr}
 802ab88:	4604      	mov	r4, r0
 802ab8a:	e9c0 3300 	strd	r3, r3, [r0]
 802ab8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802ab92:	6083      	str	r3, [r0, #8]
 802ab94:	8181      	strh	r1, [r0, #12]
 802ab96:	6643      	str	r3, [r0, #100]	; 0x64
 802ab98:	81c2      	strh	r2, [r0, #14]
 802ab9a:	6183      	str	r3, [r0, #24]
 802ab9c:	4619      	mov	r1, r3
 802ab9e:	2208      	movs	r2, #8
 802aba0:	305c      	adds	r0, #92	; 0x5c
 802aba2:	f7ff f9e5 	bl	8029f70 <memset>
 802aba6:	4b05      	ldr	r3, [pc, #20]	; (802abbc <std+0x38>)
 802aba8:	6263      	str	r3, [r4, #36]	; 0x24
 802abaa:	4b05      	ldr	r3, [pc, #20]	; (802abc0 <std+0x3c>)
 802abac:	62a3      	str	r3, [r4, #40]	; 0x28
 802abae:	4b05      	ldr	r3, [pc, #20]	; (802abc4 <std+0x40>)
 802abb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 802abb2:	4b05      	ldr	r3, [pc, #20]	; (802abc8 <std+0x44>)
 802abb4:	6224      	str	r4, [r4, #32]
 802abb6:	6323      	str	r3, [r4, #48]	; 0x30
 802abb8:	bd10      	pop	{r4, pc}
 802abba:	bf00      	nop
 802abbc:	0802b189 	.word	0x0802b189
 802abc0:	0802b1ab 	.word	0x0802b1ab
 802abc4:	0802b1e3 	.word	0x0802b1e3
 802abc8:	0802b207 	.word	0x0802b207

0802abcc <_cleanup_r>:
 802abcc:	4901      	ldr	r1, [pc, #4]	; (802abd4 <_cleanup_r+0x8>)
 802abce:	f000 b8af 	b.w	802ad30 <_fwalk_reent>
 802abd2:	bf00      	nop
 802abd4:	0802ab0d 	.word	0x0802ab0d

0802abd8 <__sfmoreglue>:
 802abd8:	b570      	push	{r4, r5, r6, lr}
 802abda:	1e4a      	subs	r2, r1, #1
 802abdc:	2568      	movs	r5, #104	; 0x68
 802abde:	4355      	muls	r5, r2
 802abe0:	460e      	mov	r6, r1
 802abe2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802abe6:	f7ff fa1b 	bl	802a020 <_malloc_r>
 802abea:	4604      	mov	r4, r0
 802abec:	b140      	cbz	r0, 802ac00 <__sfmoreglue+0x28>
 802abee:	2100      	movs	r1, #0
 802abf0:	e9c0 1600 	strd	r1, r6, [r0]
 802abf4:	300c      	adds	r0, #12
 802abf6:	60a0      	str	r0, [r4, #8]
 802abf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802abfc:	f7ff f9b8 	bl	8029f70 <memset>
 802ac00:	4620      	mov	r0, r4
 802ac02:	bd70      	pop	{r4, r5, r6, pc}

0802ac04 <__sfp_lock_acquire>:
 802ac04:	4801      	ldr	r0, [pc, #4]	; (802ac0c <__sfp_lock_acquire+0x8>)
 802ac06:	f7ff b992 	b.w	8029f2e <__retarget_lock_acquire_recursive>
 802ac0a:	bf00      	nop
 802ac0c:	2002be04 	.word	0x2002be04

0802ac10 <__sfp_lock_release>:
 802ac10:	4801      	ldr	r0, [pc, #4]	; (802ac18 <__sfp_lock_release+0x8>)
 802ac12:	f7ff b98e 	b.w	8029f32 <__retarget_lock_release_recursive>
 802ac16:	bf00      	nop
 802ac18:	2002be04 	.word	0x2002be04

0802ac1c <__sinit_lock_acquire>:
 802ac1c:	4801      	ldr	r0, [pc, #4]	; (802ac24 <__sinit_lock_acquire+0x8>)
 802ac1e:	f7ff b986 	b.w	8029f2e <__retarget_lock_acquire_recursive>
 802ac22:	bf00      	nop
 802ac24:	2002bdff 	.word	0x2002bdff

0802ac28 <__sinit_lock_release>:
 802ac28:	4801      	ldr	r0, [pc, #4]	; (802ac30 <__sinit_lock_release+0x8>)
 802ac2a:	f7ff b982 	b.w	8029f32 <__retarget_lock_release_recursive>
 802ac2e:	bf00      	nop
 802ac30:	2002bdff 	.word	0x2002bdff

0802ac34 <__sinit>:
 802ac34:	b510      	push	{r4, lr}
 802ac36:	4604      	mov	r4, r0
 802ac38:	f7ff fff0 	bl	802ac1c <__sinit_lock_acquire>
 802ac3c:	69a3      	ldr	r3, [r4, #24]
 802ac3e:	b11b      	cbz	r3, 802ac48 <__sinit+0x14>
 802ac40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802ac44:	f7ff bff0 	b.w	802ac28 <__sinit_lock_release>
 802ac48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802ac4c:	6523      	str	r3, [r4, #80]	; 0x50
 802ac4e:	4b13      	ldr	r3, [pc, #76]	; (802ac9c <__sinit+0x68>)
 802ac50:	4a13      	ldr	r2, [pc, #76]	; (802aca0 <__sinit+0x6c>)
 802ac52:	681b      	ldr	r3, [r3, #0]
 802ac54:	62a2      	str	r2, [r4, #40]	; 0x28
 802ac56:	42a3      	cmp	r3, r4
 802ac58:	bf04      	itt	eq
 802ac5a:	2301      	moveq	r3, #1
 802ac5c:	61a3      	streq	r3, [r4, #24]
 802ac5e:	4620      	mov	r0, r4
 802ac60:	f000 f820 	bl	802aca4 <__sfp>
 802ac64:	6060      	str	r0, [r4, #4]
 802ac66:	4620      	mov	r0, r4
 802ac68:	f000 f81c 	bl	802aca4 <__sfp>
 802ac6c:	60a0      	str	r0, [r4, #8]
 802ac6e:	4620      	mov	r0, r4
 802ac70:	f000 f818 	bl	802aca4 <__sfp>
 802ac74:	2200      	movs	r2, #0
 802ac76:	60e0      	str	r0, [r4, #12]
 802ac78:	2104      	movs	r1, #4
 802ac7a:	6860      	ldr	r0, [r4, #4]
 802ac7c:	f7ff ff82 	bl	802ab84 <std>
 802ac80:	68a0      	ldr	r0, [r4, #8]
 802ac82:	2201      	movs	r2, #1
 802ac84:	2109      	movs	r1, #9
 802ac86:	f7ff ff7d 	bl	802ab84 <std>
 802ac8a:	68e0      	ldr	r0, [r4, #12]
 802ac8c:	2202      	movs	r2, #2
 802ac8e:	2112      	movs	r1, #18
 802ac90:	f7ff ff78 	bl	802ab84 <std>
 802ac94:	2301      	movs	r3, #1
 802ac96:	61a3      	str	r3, [r4, #24]
 802ac98:	e7d2      	b.n	802ac40 <__sinit+0xc>
 802ac9a:	bf00      	nop
 802ac9c:	080320dc 	.word	0x080320dc
 802aca0:	0802abcd 	.word	0x0802abcd

0802aca4 <__sfp>:
 802aca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802aca6:	4607      	mov	r7, r0
 802aca8:	f7ff ffac 	bl	802ac04 <__sfp_lock_acquire>
 802acac:	4b1e      	ldr	r3, [pc, #120]	; (802ad28 <__sfp+0x84>)
 802acae:	681e      	ldr	r6, [r3, #0]
 802acb0:	69b3      	ldr	r3, [r6, #24]
 802acb2:	b913      	cbnz	r3, 802acba <__sfp+0x16>
 802acb4:	4630      	mov	r0, r6
 802acb6:	f7ff ffbd 	bl	802ac34 <__sinit>
 802acba:	3648      	adds	r6, #72	; 0x48
 802acbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802acc0:	3b01      	subs	r3, #1
 802acc2:	d503      	bpl.n	802accc <__sfp+0x28>
 802acc4:	6833      	ldr	r3, [r6, #0]
 802acc6:	b30b      	cbz	r3, 802ad0c <__sfp+0x68>
 802acc8:	6836      	ldr	r6, [r6, #0]
 802acca:	e7f7      	b.n	802acbc <__sfp+0x18>
 802accc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802acd0:	b9d5      	cbnz	r5, 802ad08 <__sfp+0x64>
 802acd2:	4b16      	ldr	r3, [pc, #88]	; (802ad2c <__sfp+0x88>)
 802acd4:	60e3      	str	r3, [r4, #12]
 802acd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802acda:	6665      	str	r5, [r4, #100]	; 0x64
 802acdc:	f7ff f926 	bl	8029f2c <__retarget_lock_init_recursive>
 802ace0:	f7ff ff96 	bl	802ac10 <__sfp_lock_release>
 802ace4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802ace8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802acec:	6025      	str	r5, [r4, #0]
 802acee:	61a5      	str	r5, [r4, #24]
 802acf0:	2208      	movs	r2, #8
 802acf2:	4629      	mov	r1, r5
 802acf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802acf8:	f7ff f93a 	bl	8029f70 <memset>
 802acfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802ad00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802ad04:	4620      	mov	r0, r4
 802ad06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ad08:	3468      	adds	r4, #104	; 0x68
 802ad0a:	e7d9      	b.n	802acc0 <__sfp+0x1c>
 802ad0c:	2104      	movs	r1, #4
 802ad0e:	4638      	mov	r0, r7
 802ad10:	f7ff ff62 	bl	802abd8 <__sfmoreglue>
 802ad14:	4604      	mov	r4, r0
 802ad16:	6030      	str	r0, [r6, #0]
 802ad18:	2800      	cmp	r0, #0
 802ad1a:	d1d5      	bne.n	802acc8 <__sfp+0x24>
 802ad1c:	f7ff ff78 	bl	802ac10 <__sfp_lock_release>
 802ad20:	230c      	movs	r3, #12
 802ad22:	603b      	str	r3, [r7, #0]
 802ad24:	e7ee      	b.n	802ad04 <__sfp+0x60>
 802ad26:	bf00      	nop
 802ad28:	080320dc 	.word	0x080320dc
 802ad2c:	ffff0001 	.word	0xffff0001

0802ad30 <_fwalk_reent>:
 802ad30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ad34:	4606      	mov	r6, r0
 802ad36:	4688      	mov	r8, r1
 802ad38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802ad3c:	2700      	movs	r7, #0
 802ad3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802ad42:	f1b9 0901 	subs.w	r9, r9, #1
 802ad46:	d505      	bpl.n	802ad54 <_fwalk_reent+0x24>
 802ad48:	6824      	ldr	r4, [r4, #0]
 802ad4a:	2c00      	cmp	r4, #0
 802ad4c:	d1f7      	bne.n	802ad3e <_fwalk_reent+0xe>
 802ad4e:	4638      	mov	r0, r7
 802ad50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ad54:	89ab      	ldrh	r3, [r5, #12]
 802ad56:	2b01      	cmp	r3, #1
 802ad58:	d907      	bls.n	802ad6a <_fwalk_reent+0x3a>
 802ad5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802ad5e:	3301      	adds	r3, #1
 802ad60:	d003      	beq.n	802ad6a <_fwalk_reent+0x3a>
 802ad62:	4629      	mov	r1, r5
 802ad64:	4630      	mov	r0, r6
 802ad66:	47c0      	blx	r8
 802ad68:	4307      	orrs	r7, r0
 802ad6a:	3568      	adds	r5, #104	; 0x68
 802ad6c:	e7e9      	b.n	802ad42 <_fwalk_reent+0x12>

0802ad6e <__swhatbuf_r>:
 802ad6e:	b570      	push	{r4, r5, r6, lr}
 802ad70:	460e      	mov	r6, r1
 802ad72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ad76:	2900      	cmp	r1, #0
 802ad78:	b096      	sub	sp, #88	; 0x58
 802ad7a:	4614      	mov	r4, r2
 802ad7c:	461d      	mov	r5, r3
 802ad7e:	da07      	bge.n	802ad90 <__swhatbuf_r+0x22>
 802ad80:	2300      	movs	r3, #0
 802ad82:	602b      	str	r3, [r5, #0]
 802ad84:	89b3      	ldrh	r3, [r6, #12]
 802ad86:	061a      	lsls	r2, r3, #24
 802ad88:	d410      	bmi.n	802adac <__swhatbuf_r+0x3e>
 802ad8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802ad8e:	e00e      	b.n	802adae <__swhatbuf_r+0x40>
 802ad90:	466a      	mov	r2, sp
 802ad92:	f000 fa5f 	bl	802b254 <_fstat_r>
 802ad96:	2800      	cmp	r0, #0
 802ad98:	dbf2      	blt.n	802ad80 <__swhatbuf_r+0x12>
 802ad9a:	9a01      	ldr	r2, [sp, #4]
 802ad9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802ada0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802ada4:	425a      	negs	r2, r3
 802ada6:	415a      	adcs	r2, r3
 802ada8:	602a      	str	r2, [r5, #0]
 802adaa:	e7ee      	b.n	802ad8a <__swhatbuf_r+0x1c>
 802adac:	2340      	movs	r3, #64	; 0x40
 802adae:	2000      	movs	r0, #0
 802adb0:	6023      	str	r3, [r4, #0]
 802adb2:	b016      	add	sp, #88	; 0x58
 802adb4:	bd70      	pop	{r4, r5, r6, pc}
	...

0802adb8 <__smakebuf_r>:
 802adb8:	898b      	ldrh	r3, [r1, #12]
 802adba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802adbc:	079d      	lsls	r5, r3, #30
 802adbe:	4606      	mov	r6, r0
 802adc0:	460c      	mov	r4, r1
 802adc2:	d507      	bpl.n	802add4 <__smakebuf_r+0x1c>
 802adc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802adc8:	6023      	str	r3, [r4, #0]
 802adca:	6123      	str	r3, [r4, #16]
 802adcc:	2301      	movs	r3, #1
 802adce:	6163      	str	r3, [r4, #20]
 802add0:	b002      	add	sp, #8
 802add2:	bd70      	pop	{r4, r5, r6, pc}
 802add4:	ab01      	add	r3, sp, #4
 802add6:	466a      	mov	r2, sp
 802add8:	f7ff ffc9 	bl	802ad6e <__swhatbuf_r>
 802addc:	9900      	ldr	r1, [sp, #0]
 802adde:	4605      	mov	r5, r0
 802ade0:	4630      	mov	r0, r6
 802ade2:	f7ff f91d 	bl	802a020 <_malloc_r>
 802ade6:	b948      	cbnz	r0, 802adfc <__smakebuf_r+0x44>
 802ade8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802adec:	059a      	lsls	r2, r3, #22
 802adee:	d4ef      	bmi.n	802add0 <__smakebuf_r+0x18>
 802adf0:	f023 0303 	bic.w	r3, r3, #3
 802adf4:	f043 0302 	orr.w	r3, r3, #2
 802adf8:	81a3      	strh	r3, [r4, #12]
 802adfa:	e7e3      	b.n	802adc4 <__smakebuf_r+0xc>
 802adfc:	4b0d      	ldr	r3, [pc, #52]	; (802ae34 <__smakebuf_r+0x7c>)
 802adfe:	62b3      	str	r3, [r6, #40]	; 0x28
 802ae00:	89a3      	ldrh	r3, [r4, #12]
 802ae02:	6020      	str	r0, [r4, #0]
 802ae04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802ae08:	81a3      	strh	r3, [r4, #12]
 802ae0a:	9b00      	ldr	r3, [sp, #0]
 802ae0c:	6163      	str	r3, [r4, #20]
 802ae0e:	9b01      	ldr	r3, [sp, #4]
 802ae10:	6120      	str	r0, [r4, #16]
 802ae12:	b15b      	cbz	r3, 802ae2c <__smakebuf_r+0x74>
 802ae14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ae18:	4630      	mov	r0, r6
 802ae1a:	f000 fa2d 	bl	802b278 <_isatty_r>
 802ae1e:	b128      	cbz	r0, 802ae2c <__smakebuf_r+0x74>
 802ae20:	89a3      	ldrh	r3, [r4, #12]
 802ae22:	f023 0303 	bic.w	r3, r3, #3
 802ae26:	f043 0301 	orr.w	r3, r3, #1
 802ae2a:	81a3      	strh	r3, [r4, #12]
 802ae2c:	89a0      	ldrh	r0, [r4, #12]
 802ae2e:	4305      	orrs	r5, r0
 802ae30:	81a5      	strh	r5, [r4, #12]
 802ae32:	e7cd      	b.n	802add0 <__smakebuf_r+0x18>
 802ae34:	0802abcd 	.word	0x0802abcd

0802ae38 <memmove>:
 802ae38:	4288      	cmp	r0, r1
 802ae3a:	b510      	push	{r4, lr}
 802ae3c:	eb01 0402 	add.w	r4, r1, r2
 802ae40:	d902      	bls.n	802ae48 <memmove+0x10>
 802ae42:	4284      	cmp	r4, r0
 802ae44:	4623      	mov	r3, r4
 802ae46:	d807      	bhi.n	802ae58 <memmove+0x20>
 802ae48:	1e43      	subs	r3, r0, #1
 802ae4a:	42a1      	cmp	r1, r4
 802ae4c:	d008      	beq.n	802ae60 <memmove+0x28>
 802ae4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 802ae52:	f803 2f01 	strb.w	r2, [r3, #1]!
 802ae56:	e7f8      	b.n	802ae4a <memmove+0x12>
 802ae58:	4402      	add	r2, r0
 802ae5a:	4601      	mov	r1, r0
 802ae5c:	428a      	cmp	r2, r1
 802ae5e:	d100      	bne.n	802ae62 <memmove+0x2a>
 802ae60:	bd10      	pop	{r4, pc}
 802ae62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802ae66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802ae6a:	e7f7      	b.n	802ae5c <memmove+0x24>

0802ae6c <__malloc_lock>:
 802ae6c:	4801      	ldr	r0, [pc, #4]	; (802ae74 <__malloc_lock+0x8>)
 802ae6e:	f7ff b85e 	b.w	8029f2e <__retarget_lock_acquire_recursive>
 802ae72:	bf00      	nop
 802ae74:	2002be00 	.word	0x2002be00

0802ae78 <__malloc_unlock>:
 802ae78:	4801      	ldr	r0, [pc, #4]	; (802ae80 <__malloc_unlock+0x8>)
 802ae7a:	f7ff b85a 	b.w	8029f32 <__retarget_lock_release_recursive>
 802ae7e:	bf00      	nop
 802ae80:	2002be00 	.word	0x2002be00

0802ae84 <_realloc_r>:
 802ae84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ae86:	4607      	mov	r7, r0
 802ae88:	4614      	mov	r4, r2
 802ae8a:	460e      	mov	r6, r1
 802ae8c:	b921      	cbnz	r1, 802ae98 <_realloc_r+0x14>
 802ae8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802ae92:	4611      	mov	r1, r2
 802ae94:	f7ff b8c4 	b.w	802a020 <_malloc_r>
 802ae98:	b922      	cbnz	r2, 802aea4 <_realloc_r+0x20>
 802ae9a:	f7ff f871 	bl	8029f80 <_free_r>
 802ae9e:	4625      	mov	r5, r4
 802aea0:	4628      	mov	r0, r5
 802aea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802aea4:	f000 fa0a 	bl	802b2bc <_malloc_usable_size_r>
 802aea8:	42a0      	cmp	r0, r4
 802aeaa:	d20f      	bcs.n	802aecc <_realloc_r+0x48>
 802aeac:	4621      	mov	r1, r4
 802aeae:	4638      	mov	r0, r7
 802aeb0:	f7ff f8b6 	bl	802a020 <_malloc_r>
 802aeb4:	4605      	mov	r5, r0
 802aeb6:	2800      	cmp	r0, #0
 802aeb8:	d0f2      	beq.n	802aea0 <_realloc_r+0x1c>
 802aeba:	4631      	mov	r1, r6
 802aebc:	4622      	mov	r2, r4
 802aebe:	f7ff f849 	bl	8029f54 <memcpy>
 802aec2:	4631      	mov	r1, r6
 802aec4:	4638      	mov	r0, r7
 802aec6:	f7ff f85b 	bl	8029f80 <_free_r>
 802aeca:	e7e9      	b.n	802aea0 <_realloc_r+0x1c>
 802aecc:	4635      	mov	r5, r6
 802aece:	e7e7      	b.n	802aea0 <_realloc_r+0x1c>

0802aed0 <__ssputs_r>:
 802aed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802aed4:	688e      	ldr	r6, [r1, #8]
 802aed6:	429e      	cmp	r6, r3
 802aed8:	4682      	mov	sl, r0
 802aeda:	460c      	mov	r4, r1
 802aedc:	4690      	mov	r8, r2
 802aede:	461f      	mov	r7, r3
 802aee0:	d838      	bhi.n	802af54 <__ssputs_r+0x84>
 802aee2:	898a      	ldrh	r2, [r1, #12]
 802aee4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802aee8:	d032      	beq.n	802af50 <__ssputs_r+0x80>
 802aeea:	6825      	ldr	r5, [r4, #0]
 802aeec:	6909      	ldr	r1, [r1, #16]
 802aeee:	eba5 0901 	sub.w	r9, r5, r1
 802aef2:	6965      	ldr	r5, [r4, #20]
 802aef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802aef8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802aefc:	3301      	adds	r3, #1
 802aefe:	444b      	add	r3, r9
 802af00:	106d      	asrs	r5, r5, #1
 802af02:	429d      	cmp	r5, r3
 802af04:	bf38      	it	cc
 802af06:	461d      	movcc	r5, r3
 802af08:	0553      	lsls	r3, r2, #21
 802af0a:	d531      	bpl.n	802af70 <__ssputs_r+0xa0>
 802af0c:	4629      	mov	r1, r5
 802af0e:	f7ff f887 	bl	802a020 <_malloc_r>
 802af12:	4606      	mov	r6, r0
 802af14:	b950      	cbnz	r0, 802af2c <__ssputs_r+0x5c>
 802af16:	230c      	movs	r3, #12
 802af18:	f8ca 3000 	str.w	r3, [sl]
 802af1c:	89a3      	ldrh	r3, [r4, #12]
 802af1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802af22:	81a3      	strh	r3, [r4, #12]
 802af24:	f04f 30ff 	mov.w	r0, #4294967295
 802af28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802af2c:	6921      	ldr	r1, [r4, #16]
 802af2e:	464a      	mov	r2, r9
 802af30:	f7ff f810 	bl	8029f54 <memcpy>
 802af34:	89a3      	ldrh	r3, [r4, #12]
 802af36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802af3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802af3e:	81a3      	strh	r3, [r4, #12]
 802af40:	6126      	str	r6, [r4, #16]
 802af42:	6165      	str	r5, [r4, #20]
 802af44:	444e      	add	r6, r9
 802af46:	eba5 0509 	sub.w	r5, r5, r9
 802af4a:	6026      	str	r6, [r4, #0]
 802af4c:	60a5      	str	r5, [r4, #8]
 802af4e:	463e      	mov	r6, r7
 802af50:	42be      	cmp	r6, r7
 802af52:	d900      	bls.n	802af56 <__ssputs_r+0x86>
 802af54:	463e      	mov	r6, r7
 802af56:	4632      	mov	r2, r6
 802af58:	6820      	ldr	r0, [r4, #0]
 802af5a:	4641      	mov	r1, r8
 802af5c:	f7ff ff6c 	bl	802ae38 <memmove>
 802af60:	68a3      	ldr	r3, [r4, #8]
 802af62:	6822      	ldr	r2, [r4, #0]
 802af64:	1b9b      	subs	r3, r3, r6
 802af66:	4432      	add	r2, r6
 802af68:	60a3      	str	r3, [r4, #8]
 802af6a:	6022      	str	r2, [r4, #0]
 802af6c:	2000      	movs	r0, #0
 802af6e:	e7db      	b.n	802af28 <__ssputs_r+0x58>
 802af70:	462a      	mov	r2, r5
 802af72:	f7ff ff87 	bl	802ae84 <_realloc_r>
 802af76:	4606      	mov	r6, r0
 802af78:	2800      	cmp	r0, #0
 802af7a:	d1e1      	bne.n	802af40 <__ssputs_r+0x70>
 802af7c:	6921      	ldr	r1, [r4, #16]
 802af7e:	4650      	mov	r0, sl
 802af80:	f7fe fffe 	bl	8029f80 <_free_r>
 802af84:	e7c7      	b.n	802af16 <__ssputs_r+0x46>
	...

0802af88 <_svfiprintf_r>:
 802af88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802af8c:	4698      	mov	r8, r3
 802af8e:	898b      	ldrh	r3, [r1, #12]
 802af90:	061b      	lsls	r3, r3, #24
 802af92:	b09d      	sub	sp, #116	; 0x74
 802af94:	4607      	mov	r7, r0
 802af96:	460d      	mov	r5, r1
 802af98:	4614      	mov	r4, r2
 802af9a:	d50e      	bpl.n	802afba <_svfiprintf_r+0x32>
 802af9c:	690b      	ldr	r3, [r1, #16]
 802af9e:	b963      	cbnz	r3, 802afba <_svfiprintf_r+0x32>
 802afa0:	2140      	movs	r1, #64	; 0x40
 802afa2:	f7ff f83d 	bl	802a020 <_malloc_r>
 802afa6:	6028      	str	r0, [r5, #0]
 802afa8:	6128      	str	r0, [r5, #16]
 802afaa:	b920      	cbnz	r0, 802afb6 <_svfiprintf_r+0x2e>
 802afac:	230c      	movs	r3, #12
 802afae:	603b      	str	r3, [r7, #0]
 802afb0:	f04f 30ff 	mov.w	r0, #4294967295
 802afb4:	e0d1      	b.n	802b15a <_svfiprintf_r+0x1d2>
 802afb6:	2340      	movs	r3, #64	; 0x40
 802afb8:	616b      	str	r3, [r5, #20]
 802afba:	2300      	movs	r3, #0
 802afbc:	9309      	str	r3, [sp, #36]	; 0x24
 802afbe:	2320      	movs	r3, #32
 802afc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802afc4:	f8cd 800c 	str.w	r8, [sp, #12]
 802afc8:	2330      	movs	r3, #48	; 0x30
 802afca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802b174 <_svfiprintf_r+0x1ec>
 802afce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802afd2:	f04f 0901 	mov.w	r9, #1
 802afd6:	4623      	mov	r3, r4
 802afd8:	469a      	mov	sl, r3
 802afda:	f813 2b01 	ldrb.w	r2, [r3], #1
 802afde:	b10a      	cbz	r2, 802afe4 <_svfiprintf_r+0x5c>
 802afe0:	2a25      	cmp	r2, #37	; 0x25
 802afe2:	d1f9      	bne.n	802afd8 <_svfiprintf_r+0x50>
 802afe4:	ebba 0b04 	subs.w	fp, sl, r4
 802afe8:	d00b      	beq.n	802b002 <_svfiprintf_r+0x7a>
 802afea:	465b      	mov	r3, fp
 802afec:	4622      	mov	r2, r4
 802afee:	4629      	mov	r1, r5
 802aff0:	4638      	mov	r0, r7
 802aff2:	f7ff ff6d 	bl	802aed0 <__ssputs_r>
 802aff6:	3001      	adds	r0, #1
 802aff8:	f000 80aa 	beq.w	802b150 <_svfiprintf_r+0x1c8>
 802affc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802affe:	445a      	add	r2, fp
 802b000:	9209      	str	r2, [sp, #36]	; 0x24
 802b002:	f89a 3000 	ldrb.w	r3, [sl]
 802b006:	2b00      	cmp	r3, #0
 802b008:	f000 80a2 	beq.w	802b150 <_svfiprintf_r+0x1c8>
 802b00c:	2300      	movs	r3, #0
 802b00e:	f04f 32ff 	mov.w	r2, #4294967295
 802b012:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b016:	f10a 0a01 	add.w	sl, sl, #1
 802b01a:	9304      	str	r3, [sp, #16]
 802b01c:	9307      	str	r3, [sp, #28]
 802b01e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802b022:	931a      	str	r3, [sp, #104]	; 0x68
 802b024:	4654      	mov	r4, sl
 802b026:	2205      	movs	r2, #5
 802b028:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b02c:	4851      	ldr	r0, [pc, #324]	; (802b174 <_svfiprintf_r+0x1ec>)
 802b02e:	f7d5 f8ef 	bl	8000210 <memchr>
 802b032:	9a04      	ldr	r2, [sp, #16]
 802b034:	b9d8      	cbnz	r0, 802b06e <_svfiprintf_r+0xe6>
 802b036:	06d0      	lsls	r0, r2, #27
 802b038:	bf44      	itt	mi
 802b03a:	2320      	movmi	r3, #32
 802b03c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b040:	0711      	lsls	r1, r2, #28
 802b042:	bf44      	itt	mi
 802b044:	232b      	movmi	r3, #43	; 0x2b
 802b046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b04a:	f89a 3000 	ldrb.w	r3, [sl]
 802b04e:	2b2a      	cmp	r3, #42	; 0x2a
 802b050:	d015      	beq.n	802b07e <_svfiprintf_r+0xf6>
 802b052:	9a07      	ldr	r2, [sp, #28]
 802b054:	4654      	mov	r4, sl
 802b056:	2000      	movs	r0, #0
 802b058:	f04f 0c0a 	mov.w	ip, #10
 802b05c:	4621      	mov	r1, r4
 802b05e:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b062:	3b30      	subs	r3, #48	; 0x30
 802b064:	2b09      	cmp	r3, #9
 802b066:	d94e      	bls.n	802b106 <_svfiprintf_r+0x17e>
 802b068:	b1b0      	cbz	r0, 802b098 <_svfiprintf_r+0x110>
 802b06a:	9207      	str	r2, [sp, #28]
 802b06c:	e014      	b.n	802b098 <_svfiprintf_r+0x110>
 802b06e:	eba0 0308 	sub.w	r3, r0, r8
 802b072:	fa09 f303 	lsl.w	r3, r9, r3
 802b076:	4313      	orrs	r3, r2
 802b078:	9304      	str	r3, [sp, #16]
 802b07a:	46a2      	mov	sl, r4
 802b07c:	e7d2      	b.n	802b024 <_svfiprintf_r+0x9c>
 802b07e:	9b03      	ldr	r3, [sp, #12]
 802b080:	1d19      	adds	r1, r3, #4
 802b082:	681b      	ldr	r3, [r3, #0]
 802b084:	9103      	str	r1, [sp, #12]
 802b086:	2b00      	cmp	r3, #0
 802b088:	bfbb      	ittet	lt
 802b08a:	425b      	neglt	r3, r3
 802b08c:	f042 0202 	orrlt.w	r2, r2, #2
 802b090:	9307      	strge	r3, [sp, #28]
 802b092:	9307      	strlt	r3, [sp, #28]
 802b094:	bfb8      	it	lt
 802b096:	9204      	strlt	r2, [sp, #16]
 802b098:	7823      	ldrb	r3, [r4, #0]
 802b09a:	2b2e      	cmp	r3, #46	; 0x2e
 802b09c:	d10c      	bne.n	802b0b8 <_svfiprintf_r+0x130>
 802b09e:	7863      	ldrb	r3, [r4, #1]
 802b0a0:	2b2a      	cmp	r3, #42	; 0x2a
 802b0a2:	d135      	bne.n	802b110 <_svfiprintf_r+0x188>
 802b0a4:	9b03      	ldr	r3, [sp, #12]
 802b0a6:	1d1a      	adds	r2, r3, #4
 802b0a8:	681b      	ldr	r3, [r3, #0]
 802b0aa:	9203      	str	r2, [sp, #12]
 802b0ac:	2b00      	cmp	r3, #0
 802b0ae:	bfb8      	it	lt
 802b0b0:	f04f 33ff 	movlt.w	r3, #4294967295
 802b0b4:	3402      	adds	r4, #2
 802b0b6:	9305      	str	r3, [sp, #20]
 802b0b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802b184 <_svfiprintf_r+0x1fc>
 802b0bc:	7821      	ldrb	r1, [r4, #0]
 802b0be:	2203      	movs	r2, #3
 802b0c0:	4650      	mov	r0, sl
 802b0c2:	f7d5 f8a5 	bl	8000210 <memchr>
 802b0c6:	b140      	cbz	r0, 802b0da <_svfiprintf_r+0x152>
 802b0c8:	2340      	movs	r3, #64	; 0x40
 802b0ca:	eba0 000a 	sub.w	r0, r0, sl
 802b0ce:	fa03 f000 	lsl.w	r0, r3, r0
 802b0d2:	9b04      	ldr	r3, [sp, #16]
 802b0d4:	4303      	orrs	r3, r0
 802b0d6:	3401      	adds	r4, #1
 802b0d8:	9304      	str	r3, [sp, #16]
 802b0da:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b0de:	4826      	ldr	r0, [pc, #152]	; (802b178 <_svfiprintf_r+0x1f0>)
 802b0e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802b0e4:	2206      	movs	r2, #6
 802b0e6:	f7d5 f893 	bl	8000210 <memchr>
 802b0ea:	2800      	cmp	r0, #0
 802b0ec:	d038      	beq.n	802b160 <_svfiprintf_r+0x1d8>
 802b0ee:	4b23      	ldr	r3, [pc, #140]	; (802b17c <_svfiprintf_r+0x1f4>)
 802b0f0:	bb1b      	cbnz	r3, 802b13a <_svfiprintf_r+0x1b2>
 802b0f2:	9b03      	ldr	r3, [sp, #12]
 802b0f4:	3307      	adds	r3, #7
 802b0f6:	f023 0307 	bic.w	r3, r3, #7
 802b0fa:	3308      	adds	r3, #8
 802b0fc:	9303      	str	r3, [sp, #12]
 802b0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b100:	4433      	add	r3, r6
 802b102:	9309      	str	r3, [sp, #36]	; 0x24
 802b104:	e767      	b.n	802afd6 <_svfiprintf_r+0x4e>
 802b106:	fb0c 3202 	mla	r2, ip, r2, r3
 802b10a:	460c      	mov	r4, r1
 802b10c:	2001      	movs	r0, #1
 802b10e:	e7a5      	b.n	802b05c <_svfiprintf_r+0xd4>
 802b110:	2300      	movs	r3, #0
 802b112:	3401      	adds	r4, #1
 802b114:	9305      	str	r3, [sp, #20]
 802b116:	4619      	mov	r1, r3
 802b118:	f04f 0c0a 	mov.w	ip, #10
 802b11c:	4620      	mov	r0, r4
 802b11e:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b122:	3a30      	subs	r2, #48	; 0x30
 802b124:	2a09      	cmp	r2, #9
 802b126:	d903      	bls.n	802b130 <_svfiprintf_r+0x1a8>
 802b128:	2b00      	cmp	r3, #0
 802b12a:	d0c5      	beq.n	802b0b8 <_svfiprintf_r+0x130>
 802b12c:	9105      	str	r1, [sp, #20]
 802b12e:	e7c3      	b.n	802b0b8 <_svfiprintf_r+0x130>
 802b130:	fb0c 2101 	mla	r1, ip, r1, r2
 802b134:	4604      	mov	r4, r0
 802b136:	2301      	movs	r3, #1
 802b138:	e7f0      	b.n	802b11c <_svfiprintf_r+0x194>
 802b13a:	ab03      	add	r3, sp, #12
 802b13c:	9300      	str	r3, [sp, #0]
 802b13e:	462a      	mov	r2, r5
 802b140:	4b0f      	ldr	r3, [pc, #60]	; (802b180 <_svfiprintf_r+0x1f8>)
 802b142:	a904      	add	r1, sp, #16
 802b144:	4638      	mov	r0, r7
 802b146:	f3af 8000 	nop.w
 802b14a:	1c42      	adds	r2, r0, #1
 802b14c:	4606      	mov	r6, r0
 802b14e:	d1d6      	bne.n	802b0fe <_svfiprintf_r+0x176>
 802b150:	89ab      	ldrh	r3, [r5, #12]
 802b152:	065b      	lsls	r3, r3, #25
 802b154:	f53f af2c 	bmi.w	802afb0 <_svfiprintf_r+0x28>
 802b158:	9809      	ldr	r0, [sp, #36]	; 0x24
 802b15a:	b01d      	add	sp, #116	; 0x74
 802b15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b160:	ab03      	add	r3, sp, #12
 802b162:	9300      	str	r3, [sp, #0]
 802b164:	462a      	mov	r2, r5
 802b166:	4b06      	ldr	r3, [pc, #24]	; (802b180 <_svfiprintf_r+0x1f8>)
 802b168:	a904      	add	r1, sp, #16
 802b16a:	4638      	mov	r0, r7
 802b16c:	f7ff f97a 	bl	802a464 <_printf_i>
 802b170:	e7eb      	b.n	802b14a <_svfiprintf_r+0x1c2>
 802b172:	bf00      	nop
 802b174:	080320e0 	.word	0x080320e0
 802b178:	080320ea 	.word	0x080320ea
 802b17c:	00000000 	.word	0x00000000
 802b180:	0802aed1 	.word	0x0802aed1
 802b184:	080320e6 	.word	0x080320e6

0802b188 <__sread>:
 802b188:	b510      	push	{r4, lr}
 802b18a:	460c      	mov	r4, r1
 802b18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b190:	f000 f89c 	bl	802b2cc <_read_r>
 802b194:	2800      	cmp	r0, #0
 802b196:	bfab      	itete	ge
 802b198:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802b19a:	89a3      	ldrhlt	r3, [r4, #12]
 802b19c:	181b      	addge	r3, r3, r0
 802b19e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802b1a2:	bfac      	ite	ge
 802b1a4:	6563      	strge	r3, [r4, #84]	; 0x54
 802b1a6:	81a3      	strhlt	r3, [r4, #12]
 802b1a8:	bd10      	pop	{r4, pc}

0802b1aa <__swrite>:
 802b1aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b1ae:	461f      	mov	r7, r3
 802b1b0:	898b      	ldrh	r3, [r1, #12]
 802b1b2:	05db      	lsls	r3, r3, #23
 802b1b4:	4605      	mov	r5, r0
 802b1b6:	460c      	mov	r4, r1
 802b1b8:	4616      	mov	r6, r2
 802b1ba:	d505      	bpl.n	802b1c8 <__swrite+0x1e>
 802b1bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b1c0:	2302      	movs	r3, #2
 802b1c2:	2200      	movs	r2, #0
 802b1c4:	f000 f868 	bl	802b298 <_lseek_r>
 802b1c8:	89a3      	ldrh	r3, [r4, #12]
 802b1ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b1ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802b1d2:	81a3      	strh	r3, [r4, #12]
 802b1d4:	4632      	mov	r2, r6
 802b1d6:	463b      	mov	r3, r7
 802b1d8:	4628      	mov	r0, r5
 802b1da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b1de:	f000 b817 	b.w	802b210 <_write_r>

0802b1e2 <__sseek>:
 802b1e2:	b510      	push	{r4, lr}
 802b1e4:	460c      	mov	r4, r1
 802b1e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b1ea:	f000 f855 	bl	802b298 <_lseek_r>
 802b1ee:	1c43      	adds	r3, r0, #1
 802b1f0:	89a3      	ldrh	r3, [r4, #12]
 802b1f2:	bf15      	itete	ne
 802b1f4:	6560      	strne	r0, [r4, #84]	; 0x54
 802b1f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802b1fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802b1fe:	81a3      	strheq	r3, [r4, #12]
 802b200:	bf18      	it	ne
 802b202:	81a3      	strhne	r3, [r4, #12]
 802b204:	bd10      	pop	{r4, pc}

0802b206 <__sclose>:
 802b206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b20a:	f000 b813 	b.w	802b234 <_close_r>
	...

0802b210 <_write_r>:
 802b210:	b538      	push	{r3, r4, r5, lr}
 802b212:	4d07      	ldr	r5, [pc, #28]	; (802b230 <_write_r+0x20>)
 802b214:	4604      	mov	r4, r0
 802b216:	4608      	mov	r0, r1
 802b218:	4611      	mov	r1, r2
 802b21a:	2200      	movs	r2, #0
 802b21c:	602a      	str	r2, [r5, #0]
 802b21e:	461a      	mov	r2, r3
 802b220:	f7d6 fb47 	bl	80018b2 <_write>
 802b224:	1c43      	adds	r3, r0, #1
 802b226:	d102      	bne.n	802b22e <_write_r+0x1e>
 802b228:	682b      	ldr	r3, [r5, #0]
 802b22a:	b103      	cbz	r3, 802b22e <_write_r+0x1e>
 802b22c:	6023      	str	r3, [r4, #0]
 802b22e:	bd38      	pop	{r3, r4, r5, pc}
 802b230:	2002be08 	.word	0x2002be08

0802b234 <_close_r>:
 802b234:	b538      	push	{r3, r4, r5, lr}
 802b236:	4d06      	ldr	r5, [pc, #24]	; (802b250 <_close_r+0x1c>)
 802b238:	2300      	movs	r3, #0
 802b23a:	4604      	mov	r4, r0
 802b23c:	4608      	mov	r0, r1
 802b23e:	602b      	str	r3, [r5, #0]
 802b240:	f7d6 fb44 	bl	80018cc <_close>
 802b244:	1c43      	adds	r3, r0, #1
 802b246:	d102      	bne.n	802b24e <_close_r+0x1a>
 802b248:	682b      	ldr	r3, [r5, #0]
 802b24a:	b103      	cbz	r3, 802b24e <_close_r+0x1a>
 802b24c:	6023      	str	r3, [r4, #0]
 802b24e:	bd38      	pop	{r3, r4, r5, pc}
 802b250:	2002be08 	.word	0x2002be08

0802b254 <_fstat_r>:
 802b254:	b538      	push	{r3, r4, r5, lr}
 802b256:	4d07      	ldr	r5, [pc, #28]	; (802b274 <_fstat_r+0x20>)
 802b258:	2300      	movs	r3, #0
 802b25a:	4604      	mov	r4, r0
 802b25c:	4608      	mov	r0, r1
 802b25e:	4611      	mov	r1, r2
 802b260:	602b      	str	r3, [r5, #0]
 802b262:	f7d6 fb36 	bl	80018d2 <_fstat>
 802b266:	1c43      	adds	r3, r0, #1
 802b268:	d102      	bne.n	802b270 <_fstat_r+0x1c>
 802b26a:	682b      	ldr	r3, [r5, #0]
 802b26c:	b103      	cbz	r3, 802b270 <_fstat_r+0x1c>
 802b26e:	6023      	str	r3, [r4, #0]
 802b270:	bd38      	pop	{r3, r4, r5, pc}
 802b272:	bf00      	nop
 802b274:	2002be08 	.word	0x2002be08

0802b278 <_isatty_r>:
 802b278:	b538      	push	{r3, r4, r5, lr}
 802b27a:	4d06      	ldr	r5, [pc, #24]	; (802b294 <_isatty_r+0x1c>)
 802b27c:	2300      	movs	r3, #0
 802b27e:	4604      	mov	r4, r0
 802b280:	4608      	mov	r0, r1
 802b282:	602b      	str	r3, [r5, #0]
 802b284:	f7d6 fb2a 	bl	80018dc <_isatty>
 802b288:	1c43      	adds	r3, r0, #1
 802b28a:	d102      	bne.n	802b292 <_isatty_r+0x1a>
 802b28c:	682b      	ldr	r3, [r5, #0]
 802b28e:	b103      	cbz	r3, 802b292 <_isatty_r+0x1a>
 802b290:	6023      	str	r3, [r4, #0]
 802b292:	bd38      	pop	{r3, r4, r5, pc}
 802b294:	2002be08 	.word	0x2002be08

0802b298 <_lseek_r>:
 802b298:	b538      	push	{r3, r4, r5, lr}
 802b29a:	4d07      	ldr	r5, [pc, #28]	; (802b2b8 <_lseek_r+0x20>)
 802b29c:	4604      	mov	r4, r0
 802b29e:	4608      	mov	r0, r1
 802b2a0:	4611      	mov	r1, r2
 802b2a2:	2200      	movs	r2, #0
 802b2a4:	602a      	str	r2, [r5, #0]
 802b2a6:	461a      	mov	r2, r3
 802b2a8:	f7d6 fb1a 	bl	80018e0 <_lseek>
 802b2ac:	1c43      	adds	r3, r0, #1
 802b2ae:	d102      	bne.n	802b2b6 <_lseek_r+0x1e>
 802b2b0:	682b      	ldr	r3, [r5, #0]
 802b2b2:	b103      	cbz	r3, 802b2b6 <_lseek_r+0x1e>
 802b2b4:	6023      	str	r3, [r4, #0]
 802b2b6:	bd38      	pop	{r3, r4, r5, pc}
 802b2b8:	2002be08 	.word	0x2002be08

0802b2bc <_malloc_usable_size_r>:
 802b2bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802b2c0:	1f18      	subs	r0, r3, #4
 802b2c2:	2b00      	cmp	r3, #0
 802b2c4:	bfbc      	itt	lt
 802b2c6:	580b      	ldrlt	r3, [r1, r0]
 802b2c8:	18c0      	addlt	r0, r0, r3
 802b2ca:	4770      	bx	lr

0802b2cc <_read_r>:
 802b2cc:	b538      	push	{r3, r4, r5, lr}
 802b2ce:	4d07      	ldr	r5, [pc, #28]	; (802b2ec <_read_r+0x20>)
 802b2d0:	4604      	mov	r4, r0
 802b2d2:	4608      	mov	r0, r1
 802b2d4:	4611      	mov	r1, r2
 802b2d6:	2200      	movs	r2, #0
 802b2d8:	602a      	str	r2, [r5, #0]
 802b2da:	461a      	mov	r2, r3
 802b2dc:	f7d6 fadc 	bl	8001898 <_read>
 802b2e0:	1c43      	adds	r3, r0, #1
 802b2e2:	d102      	bne.n	802b2ea <_read_r+0x1e>
 802b2e4:	682b      	ldr	r3, [r5, #0]
 802b2e6:	b103      	cbz	r3, 802b2ea <_read_r+0x1e>
 802b2e8:	6023      	str	r3, [r4, #0]
 802b2ea:	bd38      	pop	{r3, r4, r5, pc}
 802b2ec:	2002be08 	.word	0x2002be08

0802b2f0 <_init>:
 802b2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b2f2:	bf00      	nop
 802b2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b2f6:	bc08      	pop	{r3}
 802b2f8:	469e      	mov	lr, r3
 802b2fa:	4770      	bx	lr

0802b2fc <_fini>:
 802b2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b2fe:	bf00      	nop
 802b300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802b302:	bc08      	pop	{r3}
 802b304:	469e      	mov	lr, r3
 802b306:	4770      	bx	lr
